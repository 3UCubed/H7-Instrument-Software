
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001af00  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801b1a0  0801b1a0  0002b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b638  0801b638  0002b638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b640  0801b640  0002b640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b644  0801b644  0002b644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000013c  24000000  0801b648  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b784  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b784  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004116f  00000000  00000000  0003016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d76  00000000  00000000  000712d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  00079050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002878  00000000  00000000  0007bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004335e  00000000  00000000  000c4cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196b75  00000000  00000000  0010803b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029ebb0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd08  00000000  00000000  0029ec00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b188 	.word	0x0801b188

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801b188 	.word	0x0801b188

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fea1 	bl	80063b0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa46 	bl	8003b04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 ffbc 	bl	8007600 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fa39 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 f8ff 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 fa20 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 f8f1 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 fa12 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 f8e3 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 fa04 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 f8d5 	bl	80068b8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f9f6 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 f8c6 	bl	80068b8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f9e7 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 f8b7 	bl	80068b8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f9d8 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 f8a8 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f9c9 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 f899 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f9ba 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 f88a 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f9ab 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 f87b 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f99c 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 f86c 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f98d 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fd89 	bl	80063b0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f92e 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fff4 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f915 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 ffe6 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f907 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 ffd8 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f8f9 	bl	8003b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 ffca 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f8eb 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fcf4 	bl	800b3e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fce8 	bl	800b3e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fcdc 	bl	800b3e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fb87 	bl	8008188 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f840 	bl	8003b04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 fa42 	bl	8005f68 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 fa3c 	bl	8005f68 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 fb27 	bl	8008188 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ffe0 	bl	8003b04 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fdf5 	bl	801a77c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 feef 	bl	800797c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ffae 	bl	8003b04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 f90a 	bl	8007ddc <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff99 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fbc7 	bl	800b3e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 fa72 	bl	8008188 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 ff2b 	bl	8003b04 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fe34 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fe4b 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fe0b 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fe22 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fe03 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fe1a 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fdfb 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fe12 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fdf3 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fe0a 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fdeb 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fe02 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fde3 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fdfa 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fddb 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fdf2 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fdd3 	bl	800792c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fdea 	bl	8007960 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fcd6 	bl	801a77c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a f94a 	bl	800b104 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a f8ef 	bl	800b104 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 ff3c 	bl	800ae34 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fe90 	bl	800ae34 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 ff9c 	bl	800b104 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 ff39 	bl	800b104 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fd86 	bl	800ae34 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fe64 	bl	800b104 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fc6f 	bl	800ae34 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fd7c 	bl	800b104 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 ffc2 	bl	801a77c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fc57 	bl	800b104 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 faa5 	bl	800ae34 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fbb9 	bl	800b104 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fe5d 	bl	801a77c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fe54 	bl	801a77c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 f971 	bl	800ae34 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 f95e 	bl	800ae34 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fd9f 	bl	801a77c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fd98 	bl	801a77c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 f8b7 	bl	800ae34 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 f8cf 	bl	800af58 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f977 	bl	800b104 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 ffc3 	bl	800ae34 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]
#ifdef ERROR_HANDLING_ENABLED
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <handle_error+0x60>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f015 fa3e 	bl	80173ec <osEventFlagsSet>
	while (!IDLING) {};
 8001f70:	bf00      	nop
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <handle_error+0x64>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0fa      	beq.n	8001f72 <handle_error+0x16>
	increment_error_counter(error);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f851 	bl	8002024 <increment_error_counter>
	set_previous_error(error);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8b2 	bl	80020ec <set_previous_error>
	send_current_error_packet(error);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fa5b 	bl	8002444 <send_current_error_packet>
	send_junk_packet();
 8001f8e:	f000 fa73 	bl	8002478 <send_junk_packet>

	switch (error.category) {
 8001f92:	793b      	ldrb	r3, [r7, #4]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <handle_error+0x4e>
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	dc08      	bgt.n	8001fae <handle_error+0x52>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <handle_error+0x4a>
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d006      	beq.n	8001fb2 <handle_error+0x56>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001fa4:	e003      	b.n	8001fae <handle_error+0x52>
		NVIC_SystemReset();
 8001fa6:	f7ff ffc3 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001faa:	f7ff ffc1 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001fae:	bf00      	nop
 8001fb0:	e000      	b.n	8001fb4 <handle_error+0x58>
		break;
 8001fb2:	bf00      	nop
	}
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24001a98 	.word	0x24001a98
 8001fc0:	240000c0 	.word	0x240000c0

08001fc4 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fca:	f008 ffc5 	bl	800af58 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fce:	f7fe fee3 	bl	8000d98 <EE_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <error_counter_init+0x18>
		Error_Handler();
 8001fd8:	f001 fd94 	bl	8003b04 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e013      	b.n	800200a <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <error_counter_init+0x58>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	490c      	ldr	r1, [pc, #48]	; (8002020 <error_counter_init+0x5c>)
 8001ff0:	440b      	add	r3, r1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff fb87 	bl	8001708 <EE_ReadVariable>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <error_counter_init+0x40>
			Error_Handler();
 8002000:	f001 fd80 	bl	8003b04 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b1a      	cmp	r3, #26
 800200e:	dde8      	ble.n	8001fe2 <error_counter_init+0x1e>
		}
	}
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	24000000 	.word	0x24000000
 8002020:	240003a4 	.word	0x240003a4

08002024 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 800202c:	793b      	ldrb	r3, [r7, #4]
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <increment_error_counter+0x38>)
 8002030:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002034:	3201      	adds	r2, #1
 8002036:	b291      	uxth	r1, r2
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <increment_error_counter+0x38>)
 800203a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800203e:	797b      	ldrb	r3, [r7, #5]
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <increment_error_counter+0x38>)
 8002042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002046:	3201      	adds	r2, #1
 8002048:	b291      	uxth	r1, r2
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <increment_error_counter+0x38>)
 800204c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8002050:	f000 f806 	bl	8002060 <update_error_counter>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	240003a4 	.word	0x240003a4

08002060 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	e013      	b.n	8002094 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <update_error_counter+0x44>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <update_error_counter+0x48>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f7ff fb8a 	bl	8001798 <EE_WriteVariable>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <update_error_counter+0x2e>
			Error_Handler();
 800208a:	f001 fd3b 	bl	8003b04 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3301      	adds	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b1a      	cmp	r3, #26
 8002098:	dde8      	ble.n	800206c <update_error_counter+0xc>
		}
	}
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24000000 	.word	0x24000000
 80020a8:	240003a4 	.word	0x240003a4

080020ac <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	e00f      	b.n	80020d8 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <reset_error_counters+0x3c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fb68 	bl	8001798 <EE_WriteVariable>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <reset_error_counters+0x26>
			Error_Handler();
 80020ce:	f001 fd19 	bl	8003b04 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3301      	adds	r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b1a      	cmp	r3, #26
 80020dc:	ddec      	ble.n	80020b8 <reset_error_counters+0xc>
		}
	}
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	24000000 	.word	0x24000000

080020ec <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <set_previous_error+0x44>)
 80020f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f8:	793a      	ldrb	r2, [r7, #4]
 80020fa:	b292      	uxth	r2, r2
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fb4a 	bl	8001798 <EE_WriteVariable>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <set_previous_error+0x22>
		Error_Handler();
 800210a:	f001 fcfb 	bl	8003b04 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <set_previous_error+0x44>)
 8002110:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002112:	797a      	ldrb	r2, [r7, #5]
 8002114:	b292      	uxth	r2, r2
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fb3d 	bl	8001798 <EE_WriteVariable>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <set_previous_error+0x3c>
		Error_Handler();
 8002124:	f001 fcee 	bl	8003b04 <Error_Handler>
	}
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	24000000 	.word	0x24000000

08002134 <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <get_previous_error+0x5c>)
 800213c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213e:	1dba      	adds	r2, r7, #6
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fae0 	bl	8001708 <EE_ReadVariable>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <get_previous_error+0x1e>
		Error_Handler();
 800214e:	f001 fcd9 	bl	8003b04 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <get_previous_error+0x5c>)
 8002154:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002156:	1d3a      	adds	r2, r7, #4
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fad4 	bl	8001708 <EE_ReadVariable>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <get_previous_error+0x36>
		Error_Handler();
 8002166:	f001 fccd 	bl	8003b04 <Error_Handler>
	}

	prev_error.category = category;
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 8002170:	88bb      	ldrh	r3, [r7, #4]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	727b      	strb	r3, [r7, #9]

	return prev_error;
 8002176:	893b      	ldrh	r3, [r7, #8]
 8002178:	81bb      	strh	r3, [r7, #12]
 800217a:	2300      	movs	r3, #0
 800217c:	7b3a      	ldrb	r2, [r7, #12]
 800217e:	f362 0307 	bfi	r3, r2, #0, #8
 8002182:	7b7a      	ldrb	r2, [r7, #13]
 8002184:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	24000000 	.word	0x24000000

08002194 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	; 0x38
 8002198:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 800219a:	23cc      	movs	r3, #204	; 0xcc
 800219c:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 800219e:	23cc      	movs	r3, #204	; 0xcc
 80021a0:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 80021a2:	4b98      	ldr	r3, [pc, #608]	; (8002404 <send_error_counter_packet+0x270>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 80021ae:	4b95      	ldr	r3, [pc, #596]	; (8002404 <send_error_counter_packet+0x270>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80021b6:	4b93      	ldr	r3, [pc, #588]	; (8002404 <send_error_counter_packet+0x270>)
 80021b8:	885b      	ldrh	r3, [r3, #2]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80021c2:	4b90      	ldr	r3, [pc, #576]	; (8002404 <send_error_counter_packet+0x270>)
 80021c4:	885b      	ldrh	r3, [r3, #2]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80021ca:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <send_error_counter_packet+0x270>)
 80021cc:	889b      	ldrh	r3, [r3, #4]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <send_error_counter_packet+0x270>)
 80021d8:	889b      	ldrh	r3, [r3, #4]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80021de:	4b89      	ldr	r3, [pc, #548]	; (8002404 <send_error_counter_packet+0x270>)
 80021e0:	88db      	ldrh	r3, [r3, #6]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80021ea:	4b86      	ldr	r3, [pc, #536]	; (8002404 <send_error_counter_packet+0x270>)
 80021ec:	88db      	ldrh	r3, [r3, #6]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80021f2:	4b84      	ldr	r3, [pc, #528]	; (8002404 <send_error_counter_packet+0x270>)
 80021f4:	891b      	ldrh	r3, [r3, #8]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <send_error_counter_packet+0x270>)
 8002200:	891b      	ldrh	r3, [r3, #8]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 8002206:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <send_error_counter_packet+0x270>)
 8002208:	895b      	ldrh	r3, [r3, #10]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 8002212:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <send_error_counter_packet+0x270>)
 8002214:	895b      	ldrh	r3, [r3, #10]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 800221a:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <send_error_counter_packet+0x270>)
 800221c:	899b      	ldrh	r3, [r3, #12]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002226:	4b77      	ldr	r3, [pc, #476]	; (8002404 <send_error_counter_packet+0x270>)
 8002228:	899b      	ldrh	r3, [r3, #12]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800222e:	4b75      	ldr	r3, [pc, #468]	; (8002404 <send_error_counter_packet+0x270>)
 8002230:	89db      	ldrh	r3, [r3, #14]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <send_error_counter_packet+0x270>)
 800223c:	89db      	ldrh	r3, [r3, #14]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 8002242:	4b70      	ldr	r3, [pc, #448]	; (8002404 <send_error_counter_packet+0x270>)
 8002244:	8a1b      	ldrh	r3, [r3, #16]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800224e:	4b6d      	ldr	r3, [pc, #436]	; (8002404 <send_error_counter_packet+0x270>)
 8002250:	8a1b      	ldrh	r3, [r3, #16]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <send_error_counter_packet+0x270>)
 8002258:	8a5b      	ldrh	r3, [r3, #18]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 8002262:	4b68      	ldr	r3, [pc, #416]	; (8002404 <send_error_counter_packet+0x270>)
 8002264:	8a5b      	ldrh	r3, [r3, #18]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 800226a:	4b66      	ldr	r3, [pc, #408]	; (8002404 <send_error_counter_packet+0x270>)
 800226c:	8a9b      	ldrh	r3, [r3, #20]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <send_error_counter_packet+0x270>)
 8002278:	8a9b      	ldrh	r3, [r3, #20]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800227e:	4b61      	ldr	r3, [pc, #388]	; (8002404 <send_error_counter_packet+0x270>)
 8002280:	8adb      	ldrh	r3, [r3, #22]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 800228a:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <send_error_counter_packet+0x270>)
 800228c:	8adb      	ldrh	r3, [r3, #22]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 8002292:	4b5c      	ldr	r3, [pc, #368]	; (8002404 <send_error_counter_packet+0x270>)
 8002294:	8b1b      	ldrh	r3, [r3, #24]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800229e:	4b59      	ldr	r3, [pc, #356]	; (8002404 <send_error_counter_packet+0x270>)
 80022a0:	8b1b      	ldrh	r3, [r3, #24]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 80022a6:	4b57      	ldr	r3, [pc, #348]	; (8002404 <send_error_counter_packet+0x270>)
 80022a8:	8b5b      	ldrh	r3, [r3, #26]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80022b2:	4b54      	ldr	r3, [pc, #336]	; (8002404 <send_error_counter_packet+0x270>)
 80022b4:	8b5b      	ldrh	r3, [r3, #26]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80022ba:	4b52      	ldr	r3, [pc, #328]	; (8002404 <send_error_counter_packet+0x270>)
 80022bc:	8b9b      	ldrh	r3, [r3, #28]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <send_error_counter_packet+0x270>)
 80022c8:	8b9b      	ldrh	r3, [r3, #28]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80022ce:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <send_error_counter_packet+0x270>)
 80022d0:	8bdb      	ldrh	r3, [r3, #30]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <send_error_counter_packet+0x270>)
 80022de:	8bdb      	ldrh	r3, [r3, #30]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <send_error_counter_packet+0x270>)
 80022e8:	8c1b      	ldrh	r3, [r3, #32]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <send_error_counter_packet+0x270>)
 80022f6:	8c1b      	ldrh	r3, [r3, #32]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <send_error_counter_packet+0x270>)
 8002300:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 800230c:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <send_error_counter_packet+0x270>)
 800230e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <send_error_counter_packet+0x270>)
 8002318:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	b29b      	uxth	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <send_error_counter_packet+0x270>)
 8002326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <send_error_counter_packet+0x270>)
 8002330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	b29b      	uxth	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <send_error_counter_packet+0x270>)
 800233e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <send_error_counter_packet+0x270>)
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <send_error_counter_packet+0x270>)
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <send_error_counter_packet+0x270>)
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <send_error_counter_packet+0x270>)
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <send_error_counter_packet+0x270>)
 8002378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	b29b      	uxth	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <send_error_counter_packet+0x270>)
 8002386:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <send_error_counter_packet+0x270>)
 8002390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	b29b      	uxth	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <send_error_counter_packet+0x270>)
 800239e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <send_error_counter_packet+0x270>)
 80023a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <send_error_counter_packet+0x270>)
 80023b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <send_error_counter_packet+0x270>)
 80023c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <send_error_counter_packet+0x270>)
 80023ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <send_error_counter_packet+0x270>)
 80023d8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <send_error_counter_packet+0x270>)
 80023e6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 80023ee:	4639      	mov	r1, r7
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	2238      	movs	r2, #56	; 0x38
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <send_error_counter_packet+0x274>)
 80023f6:	f012 f853 	bl	80144a0 <HAL_UART_Transmit>
}
 80023fa:	bf00      	nop
 80023fc:	3738      	adds	r7, #56	; 0x38
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	240003a4 	.word	0x240003a4
 8002408:	24001e3c 	.word	0x24001e3c

0800240c <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 8002412:	f7ff fe8f 	bl	8002134 <get_previous_error>
 8002416:	4603      	mov	r3, r0
 8002418:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 800241a:	23aa      	movs	r3, #170	; 0xaa
 800241c:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 800241e:	23aa      	movs	r3, #170	; 0xaa
 8002420:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 8002422:	793b      	ldrb	r3, [r7, #4]
 8002424:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 8002426:	797b      	ldrb	r3, [r7, #5]
 8002428:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800242a:	4639      	mov	r1, r7
 800242c:	2364      	movs	r3, #100	; 0x64
 800242e:	2204      	movs	r2, #4
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <send_previous_error_packet+0x34>)
 8002432:	f012 f835 	bl	80144a0 <HAL_UART_Transmit>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	24001e3c 	.word	0x24001e3c

08002444 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 800244c:	23bb      	movs	r3, #187	; 0xbb
 800244e:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002450:	23bb      	movs	r3, #187	; 0xbb
 8002452:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002454:	793b      	ldrb	r3, [r7, #4]
 8002456:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002458:	797b      	ldrb	r3, [r7, #5]
 800245a:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800245c:	f107 010c 	add.w	r1, r7, #12
 8002460:	2364      	movs	r3, #100	; 0x64
 8002462:	2204      	movs	r2, #4
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <send_current_error_packet+0x30>)
 8002466:	f012 f81b 	bl	80144a0 <HAL_UART_Transmit>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	24001e3c 	.word	0x24001e3c

08002478 <send_junk_packet>:
/**
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet() {	// TODO: Figure out if we still need this.
 8002478:	b580      	push	{r7, lr}
 800247a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800247e:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002486:	e00d      	b.n	80024a4 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 8002488:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800248c:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8002490:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002494:	4413      	add	r3, r2
 8002496:	22ce      	movs	r2, #206	; 0xce
 8002498:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 800249a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800249e:	3301      	adds	r3, #1
 80024a0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80024a4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ac:	dbec      	blt.n	8002488 <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 80024ae:	1d39      	adds	r1, r7, #4
 80024b0:	2364      	movs	r3, #100	; 0x64
 80024b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b6:	4804      	ldr	r0, [pc, #16]	; (80024c8 <send_junk_packet+0x50>)
 80024b8:	f011 fff2 	bl	80144a0 <HAL_UART_Transmit>
}
 80024bc:	bf00      	nop
 80024be:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	24001e3c 	.word	0x24001e3c

080024cc <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <vApplicationTickHook+0x18>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <vApplicationTickHook+0x18>)
 80024d8:	6013      	str	r3, [r2, #0]
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	24001ae0 	.word	0x24001ae0

080024e8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002504:	4a24      	ldr	r2, [pc, #144]	; (8002598 <MX_FREERTOS_Init+0x98>)
 8002506:	2100      	movs	r1, #0
 8002508:	4824      	ldr	r0, [pc, #144]	; (800259c <MX_FREERTOS_Init+0x9c>)
 800250a:	f014 fe21 	bl	8017150 <osThreadNew>
 800250e:	4603      	mov	r3, r0
 8002510:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <MX_FREERTOS_Init+0xa0>)
 8002512:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <MX_FREERTOS_Init+0xa4>)
 8002516:	2100      	movs	r1, #0
 8002518:	4823      	ldr	r0, [pc, #140]	; (80025a8 <MX_FREERTOS_Init+0xa8>)
 800251a:	f014 fe19 	bl	8017150 <osThreadNew>
 800251e:	4603      	mov	r3, r0
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <MX_FREERTOS_Init+0xac>)
 8002522:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <MX_FREERTOS_Init+0xb0>)
 8002526:	2100      	movs	r1, #0
 8002528:	4822      	ldr	r0, [pc, #136]	; (80025b4 <MX_FREERTOS_Init+0xb4>)
 800252a:	f014 fe11 	bl	8017150 <osThreadNew>
 800252e:	4603      	mov	r3, r0
 8002530:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <MX_FREERTOS_Init+0xb8>)
 8002532:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <MX_FREERTOS_Init+0xbc>)
 8002536:	2100      	movs	r1, #0
 8002538:	4821      	ldr	r0, [pc, #132]	; (80025c0 <MX_FREERTOS_Init+0xc0>)
 800253a:	f014 fe09 	bl	8017150 <osThreadNew>
 800253e:	4603      	mov	r3, r0
 8002540:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <MX_FREERTOS_Init+0xc4>)
 8002542:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <MX_FREERTOS_Init+0xc8>)
 8002546:	2100      	movs	r1, #0
 8002548:	4820      	ldr	r0, [pc, #128]	; (80025cc <MX_FREERTOS_Init+0xcc>)
 800254a:	f014 fe01 	bl	8017150 <osThreadNew>
 800254e:	4603      	mov	r3, r0
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <MX_FREERTOS_Init+0xd0>)
 8002552:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002554:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <MX_FREERTOS_Init+0xd4>)
 8002556:	2100      	movs	r1, #0
 8002558:	481f      	ldr	r0, [pc, #124]	; (80025d8 <MX_FREERTOS_Init+0xd8>)
 800255a:	f014 fdf9 	bl	8017150 <osThreadNew>
 800255e:	4603      	mov	r3, r0
 8002560:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <MX_FREERTOS_Init+0xdc>)
 8002562:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002564:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <MX_FREERTOS_Init+0xe0>)
 8002566:	2100      	movs	r1, #0
 8002568:	481e      	ldr	r0, [pc, #120]	; (80025e4 <MX_FREERTOS_Init+0xe4>)
 800256a:	f014 fdf1 	bl	8017150 <osThreadNew>
 800256e:	4603      	mov	r3, r0
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <MX_FREERTOS_Init+0xe8>)
 8002572:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <MX_FREERTOS_Init+0xec>)
 8002576:	2100      	movs	r1, #0
 8002578:	481d      	ldr	r0, [pc, #116]	; (80025f0 <MX_FREERTOS_Init+0xf0>)
 800257a:	f014 fde9 	bl	8017150 <osThreadNew>
 800257e:	4603      	mov	r3, r0
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <MX_FREERTOS_Init+0xf4>)
 8002582:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002584:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <MX_FREERTOS_Init+0xf8>)
 8002586:	2100      	movs	r1, #0
 8002588:	481c      	ldr	r0, [pc, #112]	; (80025fc <MX_FREERTOS_Init+0xfc>)
 800258a:	f014 fde1 	bl	8017150 <osThreadNew>
 800258e:	4603      	mov	r3, r0
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <MX_FREERTOS_Init+0x100>)
 8002592:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	0801b408 	.word	0x0801b408
 800259c:	08002605 	.word	0x08002605
 80025a0:	240003dc 	.word	0x240003dc
 80025a4:	0801b42c 	.word	0x0801b42c
 80025a8:	0800262d 	.word	0x0800262d
 80025ac:	2400063c 	.word	0x2400063c
 80025b0:	0801b450 	.word	0x0801b450
 80025b4:	08002655 	.word	0x08002655
 80025b8:	2400089c 	.word	0x2400089c
 80025bc:	0801b474 	.word	0x0801b474
 80025c0:	0800267d 	.word	0x0800267d
 80025c4:	24000afc 	.word	0x24000afc
 80025c8:	0801b498 	.word	0x0801b498
 80025cc:	080026f5 	.word	0x080026f5
 80025d0:	24000d5c 	.word	0x24000d5c
 80025d4:	0801b4bc 	.word	0x0801b4bc
 80025d8:	0800276d 	.word	0x0800276d
 80025dc:	24000fbc 	.word	0x24000fbc
 80025e0:	0801b4e0 	.word	0x0801b4e0
 80025e4:	08002795 	.word	0x08002795
 80025e8:	2400121c 	.word	0x2400121c
 80025ec:	0801b504 	.word	0x0801b504
 80025f0:	080027c5 	.word	0x080027c5
 80025f4:	2400147c 	.word	0x2400147c
 80025f8:	0801b528 	.word	0x0801b528
 80025fc:	080028c5 	.word	0x080028c5
 8002600:	240016dc 	.word	0x240016dc

08002604 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <PMT_init+0x24>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002614:	2200      	movs	r2, #0
 8002616:	2101      	movs	r1, #1
 8002618:	f014 ff5e 	bl	80174d8 <osEventFlagsWait>

		create_pmt_packet();
 800261c:	f001 fa80 	bl	8003b20 <create_pmt_packet>

		osThreadYield();
 8002620:	f014 fe28 	bl	8017274 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002624:	e7f2      	b.n	800260c <PMT_init+0x8>
 8002626:	bf00      	nop
 8002628:	24001a90 	.word	0x24001a90

0800262c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <ERPA_init+0x24>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263c:	2200      	movs	r2, #0
 800263e:	2102      	movs	r1, #2
 8002640:	f014 ff4a 	bl	80174d8 <osEventFlagsWait>

		create_erpa_packet();
 8002644:	f001 fab2 	bl	8003bac <create_erpa_packet>

		osThreadYield();
 8002648:	f014 fe14 	bl	8017274 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800264c:	e7f2      	b.n	8002634 <ERPA_init+0x8>
 800264e:	bf00      	nop
 8002650:	24001a90 	.word	0x24001a90

08002654 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HK_init+0x24>)
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002664:	2200      	movs	r2, #0
 8002666:	2104      	movs	r1, #4
 8002668:	f014 ff36 	bl	80174d8 <osEventFlagsWait>

		create_hk_packet();
 800266c:	f001 fafc 	bl	8003c68 <create_hk_packet>

		osThreadYield();
 8002670:	f014 fe00 	bl	8017274 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002674:	e7f2      	b.n	800265c <HK_init+0x8>
 8002676:	bf00      	nop
 8002678:	24001a90 	.word	0x24001a90

0800267c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <AUTOINIT_init+0x70>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800268c:	2200      	movs	r2, #0
 800268e:	2104      	movs	r1, #4
 8002690:	f014 ff22 	bl	80174d8 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e012      	b.n	80026c0 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800269a:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <AUTOINIT_init+0x74>)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80026a2:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <AUTOINIT_init+0x74>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	889b      	ldrh	r3, [r3, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4619      	mov	r1, r3
 80026b0:	f009 f862 	bl	800b778 <HAL_GPIO_WritePin>
			osDelay(100);
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f014 fe3f 	bl	8017338 <osDelay>
		for (int i = 0; i < 7; i++) {
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3301      	adds	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	dde9      	ble.n	800269a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026c6:	2308      	movs	r3, #8
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	e008      	b.n	80026de <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f9e0 	bl	8005a98 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3301      	adds	r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b0d      	cmp	r3, #13
 80026e2:	ddf3      	ble.n	80026cc <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80026e4:	f014 fdc6 	bl	8017274 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026e8:	e7cc      	b.n	8002684 <AUTOINIT_init+0x8>
 80026ea:	bf00      	nop
 80026ec:	24001a94 	.word	0x24001a94
 80026f0:	0801b54c 	.word	0x0801b54c

080026f4 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <AUTODEINIT_init+0x70>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002704:	2200      	movs	r2, #0
 8002706:	2108      	movs	r1, #8
 8002708:	f014 fee6 	bl	80174d8 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800270c:	230d      	movs	r3, #13
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e008      	b.n	8002724 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f003 f9bd 	bl	8005a98 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3b01      	subs	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b07      	cmp	r3, #7
 8002728:	dcf3      	bgt.n	8002712 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800272a:	2306      	movs	r3, #6
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	e012      	b.n	8002756 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <AUTODEINIT_init+0x74>)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002738:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <AUTODEINIT_init+0x74>)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	889b      	ldrh	r3, [r3, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	f009 f817 	bl	800b778 <HAL_GPIO_WritePin>
			osDelay(100);
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	f014 fdf4 	bl	8017338 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3b01      	subs	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	dae9      	bge.n	8002730 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 800275c:	f014 fd8a 	bl	8017274 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002760:	e7cc      	b.n	80026fc <AUTODEINIT_init+0x8>
 8002762:	bf00      	nop
 8002764:	24001a94 	.word	0x24001a94
 8002768:	0801b54c 	.word	0x0801b54c

0800276c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <Voltage_Monitor_init+0x24>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277c:	2200      	movs	r2, #0
 800277e:	2101      	movs	r1, #1
 8002780:	f014 feaa 	bl	80174d8 <osEventFlagsWait>
	  		osWaitForever);
	  set_rail_monitor();
 8002784:	f003 f9a8 	bl	8005ad8 <set_rail_monitor>
	  monitor_rails();
 8002788:	f003 fa2a 	bl	8005be0 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800278c:	e7f2      	b.n	8002774 <Voltage_Monitor_init+0x8>
 800278e:	bf00      	nop
 8002790:	24001a94 	.word	0x24001a94

08002794 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <STOP_init+0x2c>)
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a4:	2200      	movs	r2, #0
 80027a6:	2102      	movs	r1, #2
 80027a8:	f014 fe96 	bl	80174d8 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <STOP_init+0x2c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f014 fe5e 	bl	8017474 <osEventFlagsClear>

	  enter_stop();
 80027b8:	f001 f986 	bl	8003ac8 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80027bc:	e7ee      	b.n	800279c <STOP_init+0x8>
 80027be:	bf00      	nop
 80027c0:	24001a94 	.word	0x24001a94

080027c4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <Science_init+0xd4>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027d4:	2200      	movs	r2, #0
 80027d6:	2101      	movs	r1, #1
 80027d8:	f014 fe7e 	bl	80174d8 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <Science_init+0xd8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f014 fd67 	bl	80172b4 <osThreadSuspend>
		IDLING = 0;
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <Science_init+0xdc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e012      	b.n	8002818 <Science_init+0x54>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80027f2:	4a2c      	ldr	r2, [pc, #176]	; (80028a4 <Science_init+0xe0>)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <Science_init+0xe0>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	889b      	ldrh	r3, [r3, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	4619      	mov	r1, r3
 8002808:	f008 ffb6 	bl	800b778 <HAL_GPIO_WritePin>
			osDelay(200);
 800280c:	20c8      	movs	r0, #200	; 0xc8
 800280e:	f014 fd93 	bl	8017338 <osDelay>
		for (int i = 0; i < 9; i++) {
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b08      	cmp	r3, #8
 800281c:	dde9      	ble.n	80027f2 <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 800281e:	2306      	movs	r3, #6
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	e008      	b.n	8002836 <Science_init+0x72>
			set_rail_monitor_enable(i, 1);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f003 f934 	bl	8005a98 <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3301      	adds	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b10      	cmp	r3, #16
 800283a:	ddf3      	ble.n	8002824 <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <Science_init+0xd8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f014 fd58 	bl	80172f6 <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 8002846:	b672      	cpsid	i
}
 8002848:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800284a:	2300      	movs	r3, #0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2320      	movs	r3, #32
 8002850:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <Science_init+0xe4>)
 8002852:	2100      	movs	r1, #0
 8002854:	4815      	ldr	r0, [pc, #84]	; (80028ac <Science_init+0xe8>)
 8002856:	f005 f90b 	bl	8007a70 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <Science_init+0xec>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <Science_init+0xf0>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <Science_init+0xf4>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800286c:	f001 fb3a 	bl	8003ee4 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <Science_init+0xf8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2104      	movs	r1, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f014 fdb8 	bl	80173ec <osEventFlagsSet>
		TIM2->CCR4 = 312;
 800287c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002880:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002886:	2100      	movs	r1, #0
 8002888:	480d      	ldr	r0, [pc, #52]	; (80028c0 <Science_init+0xfc>)
 800288a:	f010 fa7f 	bl	8012d8c <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800288e:	b662      	cpsie	i
}
 8002890:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002892:	f014 fcef 	bl	8017274 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002896:	e799      	b.n	80027cc <Science_init+0x8>
 8002898:	24001a98 	.word	0x24001a98
 800289c:	24000fbc 	.word	0x24000fbc
 80028a0:	240000c0 	.word	0x240000c0
 80028a4:	0801b54c 	.word	0x0801b54c
 80028a8:	2400003c 	.word	0x2400003c
 80028ac:	24000314 	.word	0x24000314
 80028b0:	24001adc 	.word	0x24001adc
 80028b4:	24001add 	.word	0x24001add
 80028b8:	24001ae0 	.word	0x24001ae0
 80028bc:	24001a90 	.word	0x24001a90
 80028c0:	24001da4 	.word	0x24001da4

080028c4 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <Idle_init+0xb4>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d4:	2200      	movs	r2, #0
 80028d6:	2102      	movs	r1, #2
 80028d8:	f014 fdfe 	bl	80174d8 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <Idle_init+0xb8>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80028e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80028ea:	2100      	movs	r1, #0
 80028ec:	4824      	ldr	r0, [pc, #144]	; (8002980 <Idle_init+0xbc>)
 80028ee:	f010 fba7 	bl	8013040 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <Idle_init+0xc0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80028f8:	2100      	movs	r1, #0
 80028fa:	4823      	ldr	r0, [pc, #140]	; (8002988 <Idle_init+0xc4>)
 80028fc:	f005 f978 	bl	8007bf0 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <Idle_init+0xc8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f014 fcd5 	bl	80172b4 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 800290a:	2310      	movs	r3, #16
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e008      	b.n	8002922 <Idle_init+0x5e>
			set_rail_monitor_enable(i, 0);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f003 f8be 	bl	8005a98 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3b01      	subs	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b05      	cmp	r3, #5
 8002926:	dcf3      	bgt.n	8002910 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002928:	2308      	movs	r3, #8
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	e012      	b.n	8002954 <Idle_init+0x90>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800292e:	4a18      	ldr	r2, [pc, #96]	; (8002990 <Idle_init+0xcc>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002936:	4a16      	ldr	r2, [pc, #88]	; (8002990 <Idle_init+0xcc>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	889b      	ldrh	r3, [r3, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	f008 ff18 	bl	800b778 <HAL_GPIO_WritePin>
			osDelay(200);
 8002948:	20c8      	movs	r0, #200	; 0xc8
 800294a:	f014 fcf5 	bl	8017338 <osDelay>
		for (int i = 8; i >= 0; i--) {
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3b01      	subs	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	dae9      	bge.n	800292e <Idle_init+0x6a>
		}
		osDelay(3500);		// TODO: Reduce to 1000 for assembled instrument
 800295a:	f640 50ac 	movw	r0, #3500	; 0xdac
 800295e:	f014 fceb 	bl	8017338 <osDelay>
		IDLING = 1;
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <Idle_init+0xd0>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <Idle_init+0xc8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f014 fcc2 	bl	80172f6 <osThreadResume>

		// Yield thread control
		osThreadYield();
 8002972:	f014 fc7f 	bl	8017274 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002976:	e7a9      	b.n	80028cc <Idle_init+0x8>
 8002978:	24001a98 	.word	0x24001a98
 800297c:	24001add 	.word	0x24001add
 8002980:	24001da4 	.word	0x24001da4
 8002984:	24001adc 	.word	0x24001adc
 8002988:	24000314 	.word	0x24000314
 800298c:	24000fbc 	.word	0x24000fbc
 8002990:	0801b54c 	.word	0x0801b54c
 8002994:	240000c0 	.word	0x240000c0

08002998 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b4:	4a32      	ldr	r2, [pc, #200]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d2:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <MX_GPIO_Init+0xe8>)
 80029fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <MX_GPIO_Init+0xe8>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <MX_GPIO_Init+0xe8>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <MX_GPIO_Init+0xe8>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a26:	2200      	movs	r2, #0
 8002a28:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002a2c:	4815      	ldr	r0, [pc, #84]	; (8002a84 <MX_GPIO_Init+0xec>)
 8002a2e:	f008 fea3 	bl	800b778 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2164      	movs	r1, #100	; 0x64
 8002a36:	4814      	ldr	r0, [pc, #80]	; (8002a88 <MX_GPIO_Init+0xf0>)
 8002a38:	f008 fe9e 	bl	800b778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a3c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002a40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a46:	2302      	movs	r3, #2
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <MX_GPIO_Init+0xec>)
 8002a56:	f008 fcc7 	bl	800b3e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002a5a:	2364      	movs	r3, #100	; 0x64
 8002a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a62:	2302      	movs	r3, #2
 8002a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <MX_GPIO_Init+0xf0>)
 8002a72:	f008 fcb9 	bl	800b3e8 <HAL_GPIO_Init>

}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	58024400 	.word	0x58024400
 8002a84:	58020800 	.word	0x58020800
 8002a88:	58020400 	.word	0x58020400

08002a8c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002a92:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <MX_I2C1_Init+0x7c>)
 8002a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <MX_I2C1_Init+0x80>)
 8002a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac6:	480f      	ldr	r0, [pc, #60]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002ac8:	f008 fe70 	bl	800b7ac <HAL_I2C_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ad2:	f001 f817 	bl	8003b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	480a      	ldr	r0, [pc, #40]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002ada:	f00b f90f 	bl	800dcfc <HAL_I2CEx_ConfigAnalogFilter>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ae4:	f001 f80e 	bl	8003b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4806      	ldr	r0, [pc, #24]	; (8002b04 <MX_I2C1_Init+0x78>)
 8002aec:	f00b f951 	bl	800dd92 <HAL_I2CEx_ConfigDigitalFilter>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002af6:	f001 f805 	bl	8003b04 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f00b f996 	bl	800de2c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2400193c 	.word	0x2400193c
 8002b08:	40005400 	.word	0x40005400
 8002b0c:	00100517 	.word	0x00100517

08002b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b0ba      	sub	sp, #232	; 0xe8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	22c0      	movs	r2, #192	; 0xc0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f017 fe23 	bl	801a77c <memset>
  if(i2cHandle->Instance==I2C1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5d      	ldr	r2, [pc, #372]	; (8002cb0 <HAL_I2C_MspInit+0x1a0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	f040 80b3 	bne.w	8002ca8 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b42:	f04f 0208 	mov.w	r2, #8
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00c fa89 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b64:	f000 ffce 	bl	8003b04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	4b52      	ldr	r3, [pc, #328]	; (8002cb4 <HAL_I2C_MspInit+0x1a4>)
 8002b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6e:	4a51      	ldr	r2, [pc, #324]	; (8002cb4 <HAL_I2C_MspInit+0x1a4>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b78:	4b4e      	ldr	r3, [pc, #312]	; (8002cb4 <HAL_I2C_MspInit+0x1a4>)
 8002b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8e:	2312      	movs	r3, #18
 8002b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002baa:	4619      	mov	r1, r3
 8002bac:	4842      	ldr	r0, [pc, #264]	; (8002cb8 <HAL_I2C_MspInit+0x1a8>)
 8002bae:	f008 fc1b 	bl	800b3e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <HAL_I2C_MspInit+0x1a4>)
 8002bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb8:	4a3e      	ldr	r2, [pc, #248]	; (8002cb4 <HAL_I2C_MspInit+0x1a4>)
 8002bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_I2C_MspInit+0x1a4>)
 8002bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002bd0:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002bd2:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002bd4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002bd8:	2222      	movs	r2, #34	; 0x22
 8002bda:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002be8:	4b34      	ldr	r3, [pc, #208]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf0:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002c04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c08:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c10:	482a      	ldr	r0, [pc, #168]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002c12:	f005 fab9 	bl	8008188 <HAL_DMA_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002c1c:	f000 ff72 	bl	8003b04 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_I2C_MspInit+0x1b8>)
 8002c30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c64:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c6c:	4815      	ldr	r0, [pc, #84]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c6e:	f005 fa8b 	bl	8008188 <HAL_DMA_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002c78:	f000 ff44 	bl	8003b04 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c82:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2105      	movs	r1, #5
 8002c8c:	201f      	movs	r0, #31
 8002c8e:	f004 fe4d 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c92:	201f      	movs	r0, #31
 8002c94:	f004 fe64 	bl	8007960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2105      	movs	r1, #5
 8002c9c:	2020      	movs	r0, #32
 8002c9e:	f004 fe45 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002ca2:	2020      	movs	r0, #32
 8002ca4:	f004 fe5c 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ca8:	bf00      	nop
 8002caa:	37e8      	adds	r7, #232	; 0xe8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40005400 	.word	0x40005400
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	58020400 	.word	0x58020400
 8002cbc:	24001990 	.word	0x24001990
 8002cc0:	400200a0 	.word	0x400200a0
 8002cc4:	24001a08 	.word	0x24001a08
 8002cc8:	400200b8 	.word	0x400200b8

08002ccc <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <MX_IWDG1_Init+0x34>)
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <MX_IWDG1_Init+0x38>)
 8002cd4:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <MX_IWDG1_Init+0x34>)
 8002cd8:	2204      	movs	r2, #4
 8002cda:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <MX_IWDG1_Init+0x34>)
 8002cde:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ce2:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_IWDG1_Init+0x34>)
 8002ce6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002cea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002cec:	4804      	ldr	r0, [pc, #16]	; (8002d00 <MX_IWDG1_Init+0x34>)
 8002cee:	f00b f8c1 	bl	800de74 <HAL_IWDG_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002cf8:	f000 ff04 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	24001a80 	.word	0x24001a80
 8002d04:	58004800 	.word	0x58004800

08002d08 <__NVIC_SystemReset>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d0c:	f3bf 8f4f 	dsb	sy
}
 8002d10:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <__NVIC_SystemReset+0x24>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <__NVIC_SystemReset+0x24>)
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <__NVIC_SystemReset+0x28>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d22:	f3bf 8f4f 	dsb	sy
}
 8002d26:	bf00      	nop
    __NOP();
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <__NVIC_SystemReset+0x20>
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	05fa0004 	.word	0x05fa0004

08002d34 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a22      	ldr	r2, [pc, #136]	; (8002dc8 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d106      	bne.n	8002d52 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002d44:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f014 fb4e 	bl	80173ec <osEventFlagsSet>


	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002d50:	e035      	b.n	8002dbe <HAL_TIM_OC_DelayElapsedCallback+0x8a>
	else if (htim == &htim2) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d12e      	bne.n	8002db8 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		if (ERPA_ENABLED) {
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f014 fb3e 	bl	80173ec <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d113      	bne.n	8002da2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f014 fb33 	bl	80173ec <osEventFlagsSet>
			if (HK_ENABLED){
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2104      	movs	r1, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f014 fb28 	bl	80173ec <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002dae:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg1);
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8002db2:	f00b f8ae 	bl	800df12 <HAL_IWDG_Refresh>
}
 8002db6:	e002      	b.n	8002dbe <HAL_TIM_OC_DelayElapsedCallback+0x8a>
		printf("Unknown Timer Interrupt\n");
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8002dba:	f017 fd55 	bl	801a868 <puts>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	24001da4 	.word	0x24001da4
 8002dcc:	24001a90 	.word	0x24001a90
 8002dd0:	24001df0 	.word	0x24001df0
 8002dd4:	24001add 	.word	0x24001add
 8002dd8:	24001ae4 	.word	0x24001ae4
 8002ddc:	24001a94 	.word	0x24001a94
 8002de0:	24001adc 	.word	0x24001adc
 8002de4:	24001a80 	.word	0x24001a80
 8002de8:	0801b218 	.word	0x0801b218

08002dec <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002df4:	2201      	movs	r2, #1
 8002df6:	49f7      	ldr	r1, [pc, #988]	; (80031d4 <HAL_UART_RxCpltCallback+0x3e8>)
 8002df8:	48f7      	ldr	r0, [pc, #988]	; (80031d8 <HAL_UART_RxCpltCallback+0x3ec>)
 8002dfa:	f011 fca7 	bl	801474c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002dfe:	4bf5      	ldr	r3, [pc, #980]	; (80031d4 <HAL_UART_RxCpltCallback+0x3e8>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2bef      	cmp	r3, #239	; 0xef
 8002e08:	f200 843e 	bhi.w	8003688 <HAL_UART_RxCpltCallback+0x89c>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_UART_RxCpltCallback+0x28>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	080031f1 	.word	0x080031f1
 8002e18:	08003221 	.word	0x08003221
 8002e1c:	08003291 	.word	0x08003291
 8002e20:	080032cb 	.word	0x080032cb
 8002e24:	08003303 	.word	0x08003303
 8002e28:	0800333d 	.word	0x0800333d
 8002e2c:	08003379 	.word	0x08003379
 8002e30:	080033b5 	.word	0x080033b5
 8002e34:	080033ef 	.word	0x080033ef
 8002e38:	08003423 	.word	0x08003423
 8002e3c:	08003457 	.word	0x08003457
 8002e40:	08003489 	.word	0x08003489
 8002e44:	080034b3 	.word	0x080034b3
 8002e48:	0800358f 	.word	0x0800358f
 8002e4c:	080035f7 	.word	0x080035f7
 8002e50:	0800361f 	.word	0x0800361f
 8002e54:	080031dd 	.word	0x080031dd
 8002e58:	08003205 	.word	0x08003205
 8002e5c:	08003273 	.word	0x08003273
 8002e60:	080032af 	.word	0x080032af
 8002e64:	080032e7 	.word	0x080032e7
 8002e68:	0800331f 	.word	0x0800331f
 8002e6c:	0800335b 	.word	0x0800335b
 8002e70:	08003397 	.word	0x08003397
 8002e74:	080033d3 	.word	0x080033d3
 8002e78:	0800340b 	.word	0x0800340b
 8002e7c:	08003433 	.word	0x08003433
 8002e80:	0800346d 	.word	0x0800346d
 8002e84:	08003499 	.word	0x08003499
 8002e88:	0800354d 	.word	0x0800354d
 8002e8c:	080035cf 	.word	0x080035cf
 8002e90:	08003689 	.word	0x08003689
 8002e94:	08003689 	.word	0x08003689
 8002e98:	08003689 	.word	0x08003689
 8002e9c:	08003689 	.word	0x08003689
 8002ea0:	08003689 	.word	0x08003689
 8002ea4:	08003689 	.word	0x08003689
 8002ea8:	08003689 	.word	0x08003689
 8002eac:	08003689 	.word	0x08003689
 8002eb0:	08003689 	.word	0x08003689
 8002eb4:	08003689 	.word	0x08003689
 8002eb8:	08003689 	.word	0x08003689
 8002ebc:	08003689 	.word	0x08003689
 8002ec0:	08003689 	.word	0x08003689
 8002ec4:	08003689 	.word	0x08003689
 8002ec8:	08003689 	.word	0x08003689
 8002ecc:	08003689 	.word	0x08003689
 8002ed0:	08003689 	.word	0x08003689
 8002ed4:	08003689 	.word	0x08003689
 8002ed8:	08003689 	.word	0x08003689
 8002edc:	08003689 	.word	0x08003689
 8002ee0:	08003689 	.word	0x08003689
 8002ee4:	08003689 	.word	0x08003689
 8002ee8:	08003689 	.word	0x08003689
 8002eec:	08003689 	.word	0x08003689
 8002ef0:	08003689 	.word	0x08003689
 8002ef4:	08003689 	.word	0x08003689
 8002ef8:	08003689 	.word	0x08003689
 8002efc:	08003689 	.word	0x08003689
 8002f00:	08003689 	.word	0x08003689
 8002f04:	08003689 	.word	0x08003689
 8002f08:	08003689 	.word	0x08003689
 8002f0c:	08003689 	.word	0x08003689
 8002f10:	08003689 	.word	0x08003689
 8002f14:	08003689 	.word	0x08003689
 8002f18:	08003689 	.word	0x08003689
 8002f1c:	08003689 	.word	0x08003689
 8002f20:	08003689 	.word	0x08003689
 8002f24:	08003689 	.word	0x08003689
 8002f28:	08003689 	.word	0x08003689
 8002f2c:	08003689 	.word	0x08003689
 8002f30:	08003689 	.word	0x08003689
 8002f34:	08003689 	.word	0x08003689
 8002f38:	08003689 	.word	0x08003689
 8002f3c:	08003689 	.word	0x08003689
 8002f40:	08003689 	.word	0x08003689
 8002f44:	08003689 	.word	0x08003689
 8002f48:	08003689 	.word	0x08003689
 8002f4c:	08003689 	.word	0x08003689
 8002f50:	08003689 	.word	0x08003689
 8002f54:	08003689 	.word	0x08003689
 8002f58:	08003689 	.word	0x08003689
 8002f5c:	08003689 	.word	0x08003689
 8002f60:	08003689 	.word	0x08003689
 8002f64:	08003689 	.word	0x08003689
 8002f68:	08003689 	.word	0x08003689
 8002f6c:	08003689 	.word	0x08003689
 8002f70:	08003689 	.word	0x08003689
 8002f74:	08003689 	.word	0x08003689
 8002f78:	08003689 	.word	0x08003689
 8002f7c:	08003689 	.word	0x08003689
 8002f80:	08003689 	.word	0x08003689
 8002f84:	08003689 	.word	0x08003689
 8002f88:	08003689 	.word	0x08003689
 8002f8c:	08003689 	.word	0x08003689
 8002f90:	08003689 	.word	0x08003689
 8002f94:	08003689 	.word	0x08003689
 8002f98:	08003689 	.word	0x08003689
 8002f9c:	08003689 	.word	0x08003689
 8002fa0:	08003689 	.word	0x08003689
 8002fa4:	08003689 	.word	0x08003689
 8002fa8:	08003689 	.word	0x08003689
 8002fac:	08003689 	.word	0x08003689
 8002fb0:	08003689 	.word	0x08003689
 8002fb4:	08003689 	.word	0x08003689
 8002fb8:	08003689 	.word	0x08003689
 8002fbc:	08003689 	.word	0x08003689
 8002fc0:	08003689 	.word	0x08003689
 8002fc4:	08003689 	.word	0x08003689
 8002fc8:	08003689 	.word	0x08003689
 8002fcc:	08003689 	.word	0x08003689
 8002fd0:	08003689 	.word	0x08003689
 8002fd4:	08003689 	.word	0x08003689
 8002fd8:	08003689 	.word	0x08003689
 8002fdc:	08003689 	.word	0x08003689
 8002fe0:	08003689 	.word	0x08003689
 8002fe4:	08003689 	.word	0x08003689
 8002fe8:	08003689 	.word	0x08003689
 8002fec:	08003689 	.word	0x08003689
 8002ff0:	08003689 	.word	0x08003689
 8002ff4:	08003689 	.word	0x08003689
 8002ff8:	08003689 	.word	0x08003689
 8002ffc:	08003689 	.word	0x08003689
 8003000:	08003689 	.word	0x08003689
 8003004:	08003689 	.word	0x08003689
 8003008:	08003689 	.word	0x08003689
 800300c:	08003689 	.word	0x08003689
 8003010:	08003689 	.word	0x08003689
 8003014:	08003689 	.word	0x08003689
 8003018:	08003689 	.word	0x08003689
 800301c:	08003689 	.word	0x08003689
 8003020:	08003689 	.word	0x08003689
 8003024:	08003689 	.word	0x08003689
 8003028:	08003689 	.word	0x08003689
 800302c:	08003689 	.word	0x08003689
 8003030:	08003689 	.word	0x08003689
 8003034:	08003689 	.word	0x08003689
 8003038:	08003689 	.word	0x08003689
 800303c:	08003689 	.word	0x08003689
 8003040:	08003689 	.word	0x08003689
 8003044:	08003689 	.word	0x08003689
 8003048:	08003689 	.word	0x08003689
 800304c:	08003689 	.word	0x08003689
 8003050:	08003689 	.word	0x08003689
 8003054:	08003689 	.word	0x08003689
 8003058:	08003689 	.word	0x08003689
 800305c:	08003689 	.word	0x08003689
 8003060:	08003689 	.word	0x08003689
 8003064:	08003689 	.word	0x08003689
 8003068:	08003689 	.word	0x08003689
 800306c:	08003689 	.word	0x08003689
 8003070:	08003689 	.word	0x08003689
 8003074:	08003689 	.word	0x08003689
 8003078:	08003689 	.word	0x08003689
 800307c:	08003689 	.word	0x08003689
 8003080:	08003689 	.word	0x08003689
 8003084:	08003689 	.word	0x08003689
 8003088:	08003689 	.word	0x08003689
 800308c:	08003689 	.word	0x08003689
 8003090:	08003689 	.word	0x08003689
 8003094:	08003689 	.word	0x08003689
 8003098:	08003689 	.word	0x08003689
 800309c:	08003689 	.word	0x08003689
 80030a0:	08003689 	.word	0x08003689
 80030a4:	08003689 	.word	0x08003689
 80030a8:	08003689 	.word	0x08003689
 80030ac:	08003689 	.word	0x08003689
 80030b0:	08003689 	.word	0x08003689
 80030b4:	08003689 	.word	0x08003689
 80030b8:	08003689 	.word	0x08003689
 80030bc:	08003689 	.word	0x08003689
 80030c0:	08003689 	.word	0x08003689
 80030c4:	08003689 	.word	0x08003689
 80030c8:	08003689 	.word	0x08003689
 80030cc:	08003689 	.word	0x08003689
 80030d0:	0800365b 	.word	0x0800365b
 80030d4:	08003689 	.word	0x08003689
 80030d8:	08003689 	.word	0x08003689
 80030dc:	08003689 	.word	0x08003689
 80030e0:	08003689 	.word	0x08003689
 80030e4:	08003689 	.word	0x08003689
 80030e8:	08003689 	.word	0x08003689
 80030ec:	08003689 	.word	0x08003689
 80030f0:	08003689 	.word	0x08003689
 80030f4:	08003689 	.word	0x08003689
 80030f8:	08003689 	.word	0x08003689
 80030fc:	08003689 	.word	0x08003689
 8003100:	08003689 	.word	0x08003689
 8003104:	08003689 	.word	0x08003689
 8003108:	08003689 	.word	0x08003689
 800310c:	08003689 	.word	0x08003689
 8003110:	08003661 	.word	0x08003661
 8003114:	08003689 	.word	0x08003689
 8003118:	08003689 	.word	0x08003689
 800311c:	08003689 	.word	0x08003689
 8003120:	08003689 	.word	0x08003689
 8003124:	08003689 	.word	0x08003689
 8003128:	08003689 	.word	0x08003689
 800312c:	08003689 	.word	0x08003689
 8003130:	08003689 	.word	0x08003689
 8003134:	08003689 	.word	0x08003689
 8003138:	08003689 	.word	0x08003689
 800313c:	08003689 	.word	0x08003689
 8003140:	08003689 	.word	0x08003689
 8003144:	08003689 	.word	0x08003689
 8003148:	08003689 	.word	0x08003689
 800314c:	08003689 	.word	0x08003689
 8003150:	0800366f 	.word	0x0800366f
 8003154:	08003647 	.word	0x08003647
 8003158:	08003689 	.word	0x08003689
 800315c:	08003689 	.word	0x08003689
 8003160:	08003689 	.word	0x08003689
 8003164:	08003689 	.word	0x08003689
 8003168:	08003689 	.word	0x08003689
 800316c:	08003689 	.word	0x08003689
 8003170:	08003689 	.word	0x08003689
 8003174:	08003689 	.word	0x08003689
 8003178:	08003689 	.word	0x08003689
 800317c:	08003689 	.word	0x08003689
 8003180:	08003689 	.word	0x08003689
 8003184:	08003689 	.word	0x08003689
 8003188:	08003689 	.word	0x08003689
 800318c:	08003689 	.word	0x08003689
 8003190:	0800367d 	.word	0x0800367d
 8003194:	08003633 	.word	0x08003633
 8003198:	08003689 	.word	0x08003689
 800319c:	08003689 	.word	0x08003689
 80031a0:	08003689 	.word	0x08003689
 80031a4:	08003689 	.word	0x08003689
 80031a8:	08003689 	.word	0x08003689
 80031ac:	08003689 	.word	0x08003689
 80031b0:	08003689 	.word	0x08003689
 80031b4:	08003689 	.word	0x08003689
 80031b8:	08003689 	.word	0x08003689
 80031bc:	08003689 	.word	0x08003689
 80031c0:	08003689 	.word	0x08003689
 80031c4:	08003689 	.word	0x08003689
 80031c8:	08003689 	.word	0x08003689
 80031cc:	08003689 	.word	0x08003689
 80031d0:	08003683 	.word	0x08003683
 80031d4:	24001a9c 	.word	0x24001a9c
 80031d8:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 80031dc:	48b8      	ldr	r0, [pc, #736]	; (80034c0 <HAL_UART_RxCpltCallback+0x6d4>)
 80031de:	f017 fb43 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80031e2:	4bb8      	ldr	r3, [pc, #736]	; (80034c4 <HAL_UART_RxCpltCallback+0x6d8>)
 80031e4:	2104      	movs	r1, #4
 80031e6:	2201      	movs	r2, #1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f008 fac5 	bl	800b778 <HAL_GPIO_WritePin>
		break;
 80031ee:	e256      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80031f0:	48b5      	ldr	r0, [pc, #724]	; (80034c8 <HAL_UART_RxCpltCallback+0x6dc>)
 80031f2:	f017 fb39 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80031f6:	4bb3      	ldr	r3, [pc, #716]	; (80034c4 <HAL_UART_RxCpltCallback+0x6d8>)
 80031f8:	2104      	movs	r1, #4
 80031fa:	2200      	movs	r2, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f008 fabb 	bl	800b778 <HAL_GPIO_WritePin>
		break;
 8003202:	e24c      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8003204:	48b1      	ldr	r0, [pc, #708]	; (80034cc <HAL_UART_RxCpltCallback+0x6e0>)
 8003206:	f017 fb2f 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800320a:	4bae      	ldr	r3, [pc, #696]	; (80034c4 <HAL_UART_RxCpltCallback+0x6d8>)
 800320c:	2120      	movs	r1, #32
 800320e:	2201      	movs	r2, #1
 8003210:	4618      	mov	r0, r3
 8003212:	f008 fab1 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8003216:	2101      	movs	r1, #1
 8003218:	2008      	movs	r0, #8
 800321a:	f002 fc3d 	bl	8005a98 <set_rail_monitor_enable>
		break;
 800321e:	e23e      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8003220:	48ab      	ldr	r0, [pc, #684]	; (80034d0 <HAL_UART_RxCpltCallback+0x6e4>)
 8003222:	f017 fb21 	bl	801a868 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8003226:	2308      	movs	r3, #8
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e00f      	b.n	800324c <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800322c:	4aa9      	ldr	r2, [pc, #676]	; (80034d4 <HAL_UART_RxCpltCallback+0x6e8>)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003234:	4aa7      	ldr	r2, [pc, #668]	; (80034d4 <HAL_UART_RxCpltCallback+0x6e8>)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	889b      	ldrh	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	4619      	mov	r1, r3
 8003242:	f008 fa99 	bl	800b778 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3b01      	subs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	dcec      	bgt.n	800322c <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003252:	2310      	movs	r3, #16
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e008      	b.n	800326a <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f002 fc1a 	bl	8005a98 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	3b01      	subs	r3, #1
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b07      	cmp	r3, #7
 800326e:	dcf3      	bgt.n	8003258 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 8003270:	e215      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003272:	4899      	ldr	r0, [pc, #612]	; (80034d8 <HAL_UART_RxCpltCallback+0x6ec>)
 8003274:	f017 faf8 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8003278:	4b98      	ldr	r3, [pc, #608]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 800327a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800327e:	2201      	movs	r2, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f008 fa79 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003286:	2101      	movs	r1, #1
 8003288:	2009      	movs	r0, #9
 800328a:	f002 fc05 	bl	8005a98 <set_rail_monitor_enable>

		break;
 800328e:	e206      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003290:	4893      	ldr	r0, [pc, #588]	; (80034e0 <HAL_UART_RxCpltCallback+0x6f4>)
 8003292:	f017 fae9 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8003296:	4b91      	ldr	r3, [pc, #580]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 8003298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800329c:	2200      	movs	r2, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f008 fa6a 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80032a4:	2100      	movs	r1, #0
 80032a6:	2009      	movs	r0, #9
 80032a8:	f002 fbf6 	bl	8005a98 <set_rail_monitor_enable>
		break;
 80032ac:	e1f7      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80032ae:	488d      	ldr	r0, [pc, #564]	; (80034e4 <HAL_UART_RxCpltCallback+0x6f8>)
 80032b0:	f017 fada 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80032b4:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	2201      	movs	r2, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f008 fa5c 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80032c0:	2101      	movs	r1, #1
 80032c2:	200a      	movs	r0, #10
 80032c4:	f002 fbe8 	bl	8005a98 <set_rail_monitor_enable>

		break;
 80032c8:	e1e9      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 80032ca:	4887      	ldr	r0, [pc, #540]	; (80034e8 <HAL_UART_RxCpltCallback+0x6fc>)
 80032cc:	f017 facc 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 80032d0:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	2200      	movs	r2, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f008 fa4e 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 80032dc:	2100      	movs	r1, #0
 80032de:	200a      	movs	r0, #10
 80032e0:	f002 fbda 	bl	8005a98 <set_rail_monitor_enable>
		break;
 80032e4:	e1db      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 80032e6:	4881      	ldr	r0, [pc, #516]	; (80034ec <HAL_UART_RxCpltCallback+0x700>)
 80032e8:	f017 fabe 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80032ec:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 80032ee:	2140      	movs	r1, #64	; 0x40
 80032f0:	2201      	movs	r2, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f008 fa40 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 80032f8:	2101      	movs	r1, #1
 80032fa:	200b      	movs	r0, #11
 80032fc:	f002 fbcc 	bl	8005a98 <set_rail_monitor_enable>

		break;
 8003300:	e1cd      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8003302:	487b      	ldr	r0, [pc, #492]	; (80034f0 <HAL_UART_RxCpltCallback+0x704>)
 8003304:	f017 fab0 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8003308:	4b74      	ldr	r3, [pc, #464]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	2200      	movs	r2, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f008 fa32 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8003314:	2100      	movs	r1, #0
 8003316:	200b      	movs	r0, #11
 8003318:	f002 fbbe 	bl	8005a98 <set_rail_monitor_enable>
		break;
 800331c:	e1bf      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800331e:	4875      	ldr	r0, [pc, #468]	; (80034f4 <HAL_UART_RxCpltCallback+0x708>)
 8003320:	f017 faa2 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8003324:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 8003326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800332a:	2201      	movs	r2, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f008 fa23 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8003332:	2101      	movs	r1, #1
 8003334:	200c      	movs	r0, #12
 8003336:	f002 fbaf 	bl	8005a98 <set_rail_monitor_enable>

		break;
 800333a:	e1b0      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 800333c:	486e      	ldr	r0, [pc, #440]	; (80034f8 <HAL_UART_RxCpltCallback+0x70c>)
 800333e:	f017 fa93 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8003342:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 8003344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003348:	2200      	movs	r2, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f008 fa14 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8003350:	2100      	movs	r1, #0
 8003352:	200c      	movs	r0, #12
 8003354:	f002 fba0 	bl	8005a98 <set_rail_monitor_enable>
		break;
 8003358:	e1a1      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800335a:	4868      	ldr	r0, [pc, #416]	; (80034fc <HAL_UART_RxCpltCallback+0x710>)
 800335c:	f017 fa84 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003360:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 8003362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003366:	2201      	movs	r2, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f008 fa05 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800336e:	2101      	movs	r1, #1
 8003370:	200d      	movs	r0, #13
 8003372:	f002 fb91 	bl	8005a98 <set_rail_monitor_enable>

		break;
 8003376:	e192      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8003378:	4861      	ldr	r0, [pc, #388]	; (8003500 <HAL_UART_RxCpltCallback+0x714>)
 800337a:	f017 fa75 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 8003380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003384:	2200      	movs	r2, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f008 f9f6 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800338c:	2100      	movs	r1, #0
 800338e:	200d      	movs	r0, #13
 8003390:	f002 fb82 	bl	8005a98 <set_rail_monitor_enable>
		break;
 8003394:	e183      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8003396:	485b      	ldr	r0, [pc, #364]	; (8003504 <HAL_UART_RxCpltCallback+0x718>)
 8003398:	f017 fa66 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 800339e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033a2:	2201      	movs	r2, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f008 f9e7 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80033aa:	2101      	movs	r1, #1
 80033ac:	200f      	movs	r0, #15
 80033ae:	f002 fb73 	bl	8005a98 <set_rail_monitor_enable>

		break;
 80033b2:	e174      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 80033b4:	4854      	ldr	r0, [pc, #336]	; (8003508 <HAL_UART_RxCpltCallback+0x71c>)
 80033b6:	f017 fa57 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 80033ba:	4b48      	ldr	r3, [pc, #288]	; (80034dc <HAL_UART_RxCpltCallback+0x6f0>)
 80033bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033c0:	2200      	movs	r2, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f008 f9d8 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 80033c8:	2100      	movs	r1, #0
 80033ca:	200f      	movs	r0, #15
 80033cc:	f002 fb64 	bl	8005a98 <set_rail_monitor_enable>
		break;
 80033d0:	e165      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 80033d2:	484e      	ldr	r0, [pc, #312]	; (800350c <HAL_UART_RxCpltCallback+0x720>)
 80033d4:	f017 fa48 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_UART_RxCpltCallback+0x6d8>)
 80033da:	2140      	movs	r1, #64	; 0x40
 80033dc:	2201      	movs	r2, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f008 f9ca 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 80033e4:	2101      	movs	r1, #1
 80033e6:	2010      	movs	r0, #16
 80033e8:	f002 fb56 	bl	8005a98 <set_rail_monitor_enable>

		break;
 80033ec:	e157      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80033ee:	4848      	ldr	r0, [pc, #288]	; (8003510 <HAL_UART_RxCpltCallback+0x724>)
 80033f0:	f017 fa3a 	bl	801a868 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80033f4:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_UART_RxCpltCallback+0x6d8>)
 80033f6:	2140      	movs	r1, #64	; 0x40
 80033f8:	2200      	movs	r2, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f008 f9bc 	bl	800b778 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003400:	2100      	movs	r1, #0
 8003402:	2010      	movs	r0, #16
 8003404:	f002 fb48 	bl	8005a98 <set_rail_monitor_enable>
		break;
 8003408:	e149      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800340a:	4842      	ldr	r0, [pc, #264]	; (8003514 <HAL_UART_RxCpltCallback+0x728>)
 800340c:	f017 fa2c 	bl	801a868 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2320      	movs	r3, #32
 8003416:	4a40      	ldr	r2, [pc, #256]	; (8003518 <HAL_UART_RxCpltCallback+0x72c>)
 8003418:	2100      	movs	r1, #0
 800341a:	4840      	ldr	r0, [pc, #256]	; (800351c <HAL_UART_RxCpltCallback+0x730>)
 800341c:	f004 fb28 	bl	8007a70 <HAL_DAC_Start_DMA>
		break;
 8003420:	e13d      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8003422:	483f      	ldr	r0, [pc, #252]	; (8003520 <HAL_UART_RxCpltCallback+0x734>)
 8003424:	f017 fa20 	bl	801a868 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8003428:	2100      	movs	r1, #0
 800342a:	483c      	ldr	r0, [pc, #240]	; (800351c <HAL_UART_RxCpltCallback+0x730>)
 800342c:	f004 fbe0 	bl	8007bf0 <HAL_DAC_Stop_DMA>
		break;
 8003430:	e135      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8003432:	483c      	ldr	r0, [pc, #240]	; (8003524 <HAL_UART_RxCpltCallback+0x738>)
 8003434:	f017 fa18 	bl	801a868 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_UART_RxCpltCallback+0x73c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f013 ffd4 	bl	80173ec <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8003444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003448:	f44f 729c 	mov.w	r2, #312	; 0x138
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_UART_RxCpltCallback+0x740>)
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]

		break;
 8003454:	e123      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8003456:	4836      	ldr	r0, [pc, #216]	; (8003530 <HAL_UART_RxCpltCallback+0x744>)
 8003458:	f017 fa06 	bl	801a868 <puts>
		ERPA_ENABLED = 0;
 800345c:	4b33      	ldr	r3, [pc, #204]	; (800352c <HAL_UART_RxCpltCallback+0x740>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800346a:	e118      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800346c:	4831      	ldr	r0, [pc, #196]	; (8003534 <HAL_UART_RxCpltCallback+0x748>)
 800346e:	f017 f9fb 	bl	801a868 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003472:	2100      	movs	r1, #0
 8003474:	4830      	ldr	r0, [pc, #192]	; (8003538 <HAL_UART_RxCpltCallback+0x74c>)
 8003476:	f00f fc89 	bl	8012d8c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_UART_RxCpltCallback+0x73c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2101      	movs	r1, #1
 8003480:	4618      	mov	r0, r3
 8003482:	f013 ffb3 	bl	80173ec <osEventFlagsSet>
		break;
 8003486:	e10a      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003488:	482c      	ldr	r0, [pc, #176]	; (800353c <HAL_UART_RxCpltCallback+0x750>)
 800348a:	f017 f9ed 	bl	801a868 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800348e:	2100      	movs	r1, #0
 8003490:	4829      	ldr	r0, [pc, #164]	; (8003538 <HAL_UART_RxCpltCallback+0x74c>)
 8003492:	f00f fdd5 	bl	8013040 <HAL_TIM_OC_Stop_IT>
		break;
 8003496:	e102      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003498:	4829      	ldr	r0, [pc, #164]	; (8003540 <HAL_UART_RxCpltCallback+0x754>)
 800349a:	f017 f9e5 	bl	801a868 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_UART_RxCpltCallback+0x73c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2104      	movs	r1, #4
 80034a4:	4618      	mov	r0, r3
 80034a6:	f013 ffa1 	bl	80173ec <osEventFlagsSet>
		HK_ENABLED = 1;
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_UART_RxCpltCallback+0x758>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
		break;
 80034b0:	e0f5      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80034b2:	4825      	ldr	r0, [pc, #148]	; (8003548 <HAL_UART_RxCpltCallback+0x75c>)
 80034b4:	f017 f9d8 	bl	801a868 <puts>
		HK_ENABLED = 0;
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_UART_RxCpltCallback+0x758>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
		break;
 80034be:	e0ee      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
 80034c0:	0801b230 	.word	0x0801b230
 80034c4:	58020400 	.word	0x58020400
 80034c8:	0801b238 	.word	0x0801b238
 80034cc:	0801b244 	.word	0x0801b244
 80034d0:	0801b250 	.word	0x0801b250
 80034d4:	0801b54c 	.word	0x0801b54c
 80034d8:	0801b25c 	.word	0x0801b25c
 80034dc:	58020800 	.word	0x58020800
 80034e0:	0801b268 	.word	0x0801b268
 80034e4:	0801b278 	.word	0x0801b278
 80034e8:	0801b284 	.word	0x0801b284
 80034ec:	0801b290 	.word	0x0801b290
 80034f0:	0801b29c 	.word	0x0801b29c
 80034f4:	0801b2ac 	.word	0x0801b2ac
 80034f8:	0801b2b8 	.word	0x0801b2b8
 80034fc:	0801b2c4 	.word	0x0801b2c4
 8003500:	0801b2d0 	.word	0x0801b2d0
 8003504:	0801b2dc 	.word	0x0801b2dc
 8003508:	0801b2ec 	.word	0x0801b2ec
 800350c:	0801b2fc 	.word	0x0801b2fc
 8003510:	0801b308 	.word	0x0801b308
 8003514:	0801b318 	.word	0x0801b318
 8003518:	2400003c 	.word	0x2400003c
 800351c:	24000314 	.word	0x24000314
 8003520:	0801b328 	.word	0x0801b328
 8003524:	0801b338 	.word	0x0801b338
 8003528:	24001a90 	.word	0x24001a90
 800352c:	24001add 	.word	0x24001add
 8003530:	0801b340 	.word	0x0801b340
 8003534:	0801b34c 	.word	0x0801b34c
 8003538:	24001da4 	.word	0x24001da4
 800353c:	0801b354 	.word	0x0801b354
 8003540:	0801b35c 	.word	0x0801b35c
 8003544:	24001adc 	.word	0x24001adc
 8003548:	0801b364 	.word	0x0801b364
	}
	case 0x1D: {
		printf("Step Up\n");
 800354c:	4856      	ldr	r0, [pc, #344]	; (80036a8 <HAL_UART_RxCpltCallback+0x8bc>)
 800354e:	f017 f98b 	bl	801a868 <puts>
		if (step < 14) {
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b0d      	cmp	r3, #13
 800355a:	f200 8099 	bhi.w	8003690 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 800355e:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3302      	adds	r3, #2
 8003566:	b2da      	uxtb	r2, r3
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 800356a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800356c:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <HAL_UART_RxCpltCallback+0x8c4>)
 8003576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	484d      	ldr	r0, [pc, #308]	; (80036b4 <HAL_UART_RxCpltCallback+0x8c8>)
 8003580:	f004 fbd9 	bl	8007d36 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003584:	2100      	movs	r1, #0
 8003586:	484b      	ldr	r0, [pc, #300]	; (80036b4 <HAL_UART_RxCpltCallback+0x8c8>)
 8003588:	f004 fa1a 	bl	80079c0 <HAL_DAC_Start>
		}
		break;
 800358c:	e080      	b.n	8003690 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800358e:	484a      	ldr	r0, [pc, #296]	; (80036b8 <HAL_UART_RxCpltCallback+0x8cc>)
 8003590:	f017 f96a 	bl	801a868 <puts>
		if (step > 1) {
 8003594:	4b45      	ldr	r3, [pc, #276]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d97a      	bls.n	8003694 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3b02      	subs	r3, #2
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	4b40      	ldr	r3, [pc, #256]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 80035aa:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80035ac:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <HAL_UART_RxCpltCallback+0x8c0>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b3e      	ldr	r3, [pc, #248]	; (80036b0 <HAL_UART_RxCpltCallback+0x8c4>)
 80035b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	483d      	ldr	r0, [pc, #244]	; (80036b4 <HAL_UART_RxCpltCallback+0x8c8>)
 80035c0:	f004 fbb9 	bl	8007d36 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80035c4:	2100      	movs	r1, #0
 80035c6:	483b      	ldr	r0, [pc, #236]	; (80036b4 <HAL_UART_RxCpltCallback+0x8c8>)
 80035c8:	f004 f9fa 	bl	80079c0 <HAL_DAC_Start>
		}
		break;
 80035cc:	e062      	b.n	8003694 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 80035ce:	483b      	ldr	r0, [pc, #236]	; (80036bc <HAL_UART_RxCpltCallback+0x8d0>)
 80035d0:	f017 f94a 	bl	801a868 <puts>
		if (cadence <= 50000) {
 80035d4:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80035dc:	4293      	cmp	r3, r2
 80035de:	d85b      	bhi.n	8003698 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 80035e0:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4a36      	ldr	r2, [pc, #216]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 80035e8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80035ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80035f4:	e050      	b.n	8003698 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80035f6:	4833      	ldr	r0, [pc, #204]	; (80036c4 <HAL_UART_RxCpltCallback+0x8d8>)
 80035f8:	f017 f936 	bl	801a868 <puts>
		if (cadence >= 6250) {
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f641 0269 	movw	r2, #6249	; 0x1869
 8003604:	4293      	cmp	r3, r2
 8003606:	d949      	bls.n	800369c <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003610:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003616:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800361c:	e03e      	b.n	800369c <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 800361e:	482a      	ldr	r0, [pc, #168]	; (80036c8 <HAL_UART_RxCpltCallback+0x8dc>)
 8003620:	f017 f922 	bl	801a868 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <HAL_UART_RxCpltCallback+0x8e0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f013 fede 	bl	80173ec <osEventFlagsSet>
		break;
 8003630:	e035      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8003632:	4827      	ldr	r0, [pc, #156]	; (80036d0 <HAL_UART_RxCpltCallback+0x8e4>)
 8003634:	f017 f918 	bl	801a868 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_UART_RxCpltCallback+0x8e0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2104      	movs	r1, #4
 800363e:	4618      	mov	r0, r3
 8003640:	f013 fed4 	bl	80173ec <osEventFlagsSet>
		break;
 8003644:	e02b      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8003646:	4823      	ldr	r0, [pc, #140]	; (80036d4 <HAL_UART_RxCpltCallback+0x8e8>)
 8003648:	f017 f90e 	bl	801a868 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_UART_RxCpltCallback+0x8e0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2108      	movs	r1, #8
 8003652:	4618      	mov	r0, r3
 8003654:	f013 feca 	bl	80173ec <osEventFlagsSet>
		break;
 8003658:	e021      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 800365a:	f000 f99b 	bl	8003994 <sync>
		break;
 800365e:	e01e      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_UART_RxCpltCallback+0x8ec>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f013 fec0 	bl	80173ec <osEventFlagsSet>
		break;
 800366c:	e017      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_UART_RxCpltCallback+0x8ec>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2102      	movs	r1, #2
 8003674:	4618      	mov	r0, r3
 8003676:	f013 feb9 	bl	80173ec <osEventFlagsSet>
		break;
 800367a:	e010      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 800367c:	f7fe fd16 	bl	80020ac <reset_error_counters>
		break;
 8003680:	e00d      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003682:	f7fe fec3 	bl	800240c <send_previous_error_packet>
#endif
		break;
 8003686:	e00a      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003688:	4814      	ldr	r0, [pc, #80]	; (80036dc <HAL_UART_RxCpltCallback+0x8f0>)
 800368a:	f017 f8ed 	bl	801a868 <puts>
		break;
 800368e:	e006      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003690:	bf00      	nop
 8003692:	e004      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003694:	bf00      	nop
 8003696:	e002      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003698:	bf00      	nop
 800369a:	e000      	b.n	800369e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800369c:	bf00      	nop
	}
	}
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	0801b36c 	.word	0x0801b36c
 80036ac:	24001ade 	.word	0x24001ade
 80036b0:	2400003c 	.word	0x2400003c
 80036b4:	24000314 	.word	0x24000314
 80036b8:	0801b374 	.word	0x0801b374
 80036bc:	0801b380 	.word	0x0801b380
 80036c0:	240000bc 	.word	0x240000bc
 80036c4:	0801b38c 	.word	0x0801b38c
 80036c8:	0801b398 	.word	0x0801b398
 80036cc:	24001a94 	.word	0x24001a94
 80036d0:	0801b3a8 	.word	0x0801b3a8
 80036d4:	0801b3b4 	.word	0x0801b3b4
 80036d8:	24001a98 	.word	0x24001a98
 80036dc:	0801b3c0 	.word	0x0801b3c0

080036e0 <get_reset_cause>:

void get_reset_cause()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <get_reset_cause+0x58>)
 80036e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 80036f4:	2304      	movs	r3, #4
 80036f6:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 80036f8:	231a      	movs	r3, #26
 80036fa:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fe fc2d 	bl	8001f5c <handle_error>
 8003702:	e00d      	b.n	8003720 <get_reset_cause+0x40>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <get_reset_cause+0x58>)
 8003706:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800370a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <get_reset_cause+0x40>
    {
        error.category = EC_brownout;
 8003712:	2303      	movs	r3, #3
 8003714:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003716:	231a      	movs	r3, #26
 8003718:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe fc1e 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <get_reset_cause+0x58>)
 8003722:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <get_reset_cause+0x58>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	58024400 	.word	0x58024400

0800373c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003740:	f002 fbaa 	bl	8005e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003744:	f000 f82a 	bl	800379c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003748:	f000 f8aa 	bl	80038a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800374c:	f7ff f924 	bl	8002998 <MX_GPIO_Init>
  MX_DMA_Init();
 8003750:	f7fd faca 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003754:	f001 fed8 	bl	8005508 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003758:	f7ff f998 	bl	8002a8c <MX_I2C1_Init>
  MX_SPI2_Init();
 800375c:	f000 fe62 	bl	8004424 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003760:	f001 fb4e 	bl	8004e00 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003764:	f001 fa9e 	bl	8004ca4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003768:	f7fd f85e 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 800376c:	f7fc ff3a 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003770:	f7fd fa06 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003774:	f000 fdfe 	bl	8004374 <MX_SPI1_Init>
  MX_RTC_Init();
 8003778:	f000 fbca 	bl	8003f10 <MX_RTC_Init>
  MX_IWDG1_Init();
 800377c:	f7ff faa6 	bl	8002ccc <MX_IWDG1_Init>

  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 8003780:	f7fe fc20 	bl	8001fc4 <error_counter_init>
  	get_reset_cause();
 8003784:	f7ff ffac 	bl	80036e0 <get_reset_cause>
#endif

  system_setup();
 8003788:	f000 f8ba 	bl	8003900 <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800378c:	f013 fc96 	bl	80170bc <osKernelInitialize>
  MX_FREERTOS_Init();
 8003790:	f7fe feb6 	bl	8002500 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003794:	f013 fcb6 	bl	8017104 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003798:	e7fe      	b.n	8003798 <main+0x5c>
	...

0800379c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b09c      	sub	sp, #112	; 0x70
 80037a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a6:	224c      	movs	r2, #76	; 0x4c
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f016 ffe6 	bl	801a77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	2220      	movs	r2, #32
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f016 ffe0 	bl	801a77c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80037bc:	2002      	movs	r0, #2
 80037be:	f00a fbf5 	bl	800dfac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037c2:	2300      	movs	r3, #0
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4b34      	ldr	r3, [pc, #208]	; (8003898 <SystemClock_Config+0xfc>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	4a33      	ldr	r2, [pc, #204]	; (8003898 <SystemClock_Config+0xfc>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037d2:	4b31      	ldr	r3, [pc, #196]	; (8003898 <SystemClock_Config+0xfc>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4b2f      	ldr	r3, [pc, #188]	; (800389c <SystemClock_Config+0x100>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037e4:	4a2d      	ldr	r2, [pc, #180]	; (800389c <SystemClock_Config+0x100>)
 80037e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ea:	6193      	str	r3, [r2, #24]
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <SystemClock_Config+0x100>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80037f8:	bf00      	nop
 80037fa:	4b28      	ldr	r3, [pc, #160]	; (800389c <SystemClock_Config+0x100>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003806:	d1f8      	bne.n	80037fa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003808:	230b      	movs	r3, #11
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800380c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003812:	2309      	movs	r3, #9
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003816:	2340      	movs	r3, #64	; 0x40
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800381a:	2301      	movs	r3, #1
 800381c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800381e:	2302      	movs	r3, #2
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003822:	2302      	movs	r3, #2
 8003824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003826:	2304      	movs	r3, #4
 8003828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800382a:	2318      	movs	r3, #24
 800382c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800382e:	2302      	movs	r3, #2
 8003830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003832:	2302      	movs	r3, #2
 8003834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003836:	2302      	movs	r3, #2
 8003838:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800383a:	2308      	movs	r3, #8
 800383c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800383e:	2302      	movs	r3, #2
 8003840:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384a:	4618      	mov	r0, r3
 800384c:	f00a fbe8 	bl	800e020 <HAL_RCC_OscConfig>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003856:	f000 f955 	bl	8003b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800385a:	233f      	movs	r3, #63	; 0x3f
 800385c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800385e:	2303      	movs	r3, #3
 8003860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f00b f828 	bl	800e8d4 <HAL_RCC_ClockConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800388a:	f000 f93b 	bl	8003b04 <Error_Handler>
  }
}
 800388e:	bf00      	nop
 8003890:	3770      	adds	r7, #112	; 0x70
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	58000400 	.word	0x58000400
 800389c:	58024800 	.word	0x58024800

080038a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0b0      	sub	sp, #192	; 0xc0
 80038a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038a6:	463b      	mov	r3, r7
 80038a8:	22c0      	movs	r2, #192	; 0xc0
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f016 ff65 	bl	801a77c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80038b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80038be:	2304      	movs	r3, #4
 80038c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80038c2:	2318      	movs	r3, #24
 80038c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80038c6:	2308      	movs	r3, #8
 80038c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80038ca:	2302      	movs	r3, #2
 80038cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80038ce:	2302      	movs	r3, #2
 80038d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80038d6:	2320      	movs	r3, #32
 80038d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038e4:	463b      	mov	r3, r7
 80038e6:	4618      	mov	r0, r3
 80038e8:	f00b fbc2 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80038f2:	f000 f907 	bl	8003b04 <Error_Handler>
  }
}
 80038f6:	bf00      	nop
 80038f8:	37c0      	adds	r7, #192	; 0xc0
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 8003904:	2000      	movs	r0, #0
 8003906:	f013 fd32 	bl	801736e <osEventFlagsNew>
 800390a:	4603      	mov	r3, r0
 800390c:	4a1b      	ldr	r2, [pc, #108]	; (800397c <system_setup+0x7c>)
 800390e:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <system_setup+0x7c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d100      	bne.n	800391a <system_setup+0x1a>
        while (1);
 8003918:	e7fe      	b.n	8003918 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800391a:	2000      	movs	r0, #0
 800391c:	f013 fd27 	bl	801736e <osEventFlagsNew>
 8003920:	4603      	mov	r3, r0
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <system_setup+0x80>)
 8003924:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <system_setup+0x80>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d100      	bne.n	8003930 <system_setup+0x30>
        while (1);
 800392e:	e7fe      	b.n	800392e <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003930:	2000      	movs	r0, #0
 8003932:	f013 fd1c 	bl	801736e <osEventFlagsNew>
 8003936:	4603      	mov	r3, r0
 8003938:	4a12      	ldr	r2, [pc, #72]	; (8003984 <system_setup+0x84>)
 800393a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <system_setup+0x84>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d100      	bne.n	8003946 <system_setup+0x46>
        while (1);
 8003944:	e7fe      	b.n	8003944 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 8003946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800394e:	210c      	movs	r1, #12
 8003950:	480d      	ldr	r0, [pc, #52]	; (8003988 <system_setup+0x88>)
 8003952:	f00f fa1b 	bl	8012d8c <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8003956:	f001 fee1 	bl	800571c <voltage_monitor_init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d100      	bne.n	8003962 <system_setup+0x62>
		while (1);
 8003960:	e7fe      	b.n	8003960 <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 8003962:	f000 fb67 	bl	8004034 <init_adc_dma>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d100      	bne.n	800396e <system_setup+0x6e>
		while (1);
 800396c:	e7fe      	b.n	800396c <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800396e:	2201      	movs	r2, #1
 8003970:	4906      	ldr	r1, [pc, #24]	; (800398c <system_setup+0x8c>)
 8003972:	4807      	ldr	r0, [pc, #28]	; (8003990 <system_setup+0x90>)
 8003974:	f010 feea 	bl	801474c <HAL_UART_Receive_IT>


}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	24001a90 	.word	0x24001a90
 8003980:	24001a94 	.word	0x24001a94
 8003984:	24001a98 	.word	0x24001a98
 8003988:	24001df0 	.word	0x24001df0
 800398c:	24001a9c 	.word	0x24001a9c
 8003990:	24001e3c 	.word	0x24001e3c

08003994 <sync>:

void sync() {
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
	send_ACK();
 800399a:	f000 f821 	bl	80039e0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800399e:	480e      	ldr	r0, [pc, #56]	; (80039d8 <sync+0x44>)
 80039a0:	f010 ff20 	bl	80147e4 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80039a4:	2364      	movs	r3, #100	; 0x64
 80039a6:	2209      	movs	r2, #9
 80039a8:	490c      	ldr	r1, [pc, #48]	; (80039dc <sync+0x48>)
 80039aa:	480b      	ldr	r0, [pc, #44]	; (80039d8 <sync+0x44>)
 80039ac:	f010 fe06 	bl	80145bc <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <sync+0x48>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2bff      	cmp	r3, #255	; 0xff
 80039ba:	d1f3      	bne.n	80039a4 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 80039bc:	4807      	ldr	r0, [pc, #28]	; (80039dc <sync+0x48>)
 80039be:	f001 fce1 	bl	8005384 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80039c2:	2201      	movs	r2, #1
 80039c4:	4905      	ldr	r1, [pc, #20]	; (80039dc <sync+0x48>)
 80039c6:	4804      	ldr	r0, [pc, #16]	; (80039d8 <sync+0x44>)
 80039c8:	f010 fec0 	bl	801474c <HAL_UART_Receive_IT>
	send_error_counter_packet();
 80039cc:	f7fe fbe2 	bl	8002194 <send_error_counter_packet>
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	24001e3c 	.word	0x24001e3c
 80039dc:	24001a9c 	.word	0x24001a9c

080039e0 <send_ACK>:

void send_ACK() {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <send_ACK+0x1c>)
 80039e6:	22ff      	movs	r2, #255	; 0xff
 80039e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80039ea:	2364      	movs	r3, #100	; 0x64
 80039ec:	2201      	movs	r2, #1
 80039ee:	4903      	ldr	r1, [pc, #12]	; (80039fc <send_ACK+0x1c>)
 80039f0:	4803      	ldr	r0, [pc, #12]	; (8003a00 <send_ACK+0x20>)
 80039f2:	f010 fd55 	bl	80144a0 <HAL_UART_Transmit>
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	24001ae8 	.word	0x24001ae8
 8003a00:	24001e3c 	.word	0x24001e3c

08003a04 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003a0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ac4 <get_current_step+0xc0>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d04a      	beq.n	8003ab0 <get_current_step+0xac>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a20:	da48      	bge.n	8003ab4 <get_current_step+0xb0>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d03f      	beq.n	8003aac <get_current_step+0xa8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003a32:	4293      	cmp	r3, r2
 8003a34:	dc3e      	bgt.n	8003ab4 <get_current_step+0xb0>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d033      	beq.n	8003aa8 <get_current_step+0xa4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003a46:	da35      	bge.n	8003ab4 <get_current_step+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d028      	beq.n	8003aa4 <get_current_step+0xa0>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	dc2b      	bgt.n	8003ab4 <get_current_step+0xb0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f240 7245 	movw	r2, #1861	; 0x745
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01c      	beq.n	8003aa0 <get_current_step+0x9c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f240 7245 	movw	r2, #1861	; 0x745
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	dc21      	bgt.n	8003ab4 <get_current_step+0xb0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d010      	beq.n	8003a9c <get_current_step+0x98>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003a80:	4293      	cmp	r3, r2
 8003a82:	dc17      	bgt.n	8003ab4 <get_current_step+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <get_current_step+0x90>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003a90:	d002      	beq.n	8003a98 <get_current_step+0x94>
 8003a92:	e00f      	b.n	8003ab4 <get_current_step+0xb0>
	case 0:
		return 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e00e      	b.n	8003ab6 <get_current_step+0xb2>
	case 620:
		return 1;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e00c      	b.n	8003ab6 <get_current_step+0xb2>
	case 1241:
		return 2;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e00a      	b.n	8003ab6 <get_current_step+0xb2>
	case 1861:
		return 3;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e008      	b.n	8003ab6 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	e006      	b.n	8003ab6 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	e004      	b.n	8003ab6 <get_current_step+0xb2>
	case 3723:
		return 6;
 8003aac:	2306      	movs	r3, #6
 8003aae:	e002      	b.n	8003ab6 <get_current_step+0xb2>
	case 4095:
		return 7;
 8003ab0:	2307      	movs	r3, #7
 8003ab2:	e000      	b.n	8003ab6 <get_current_step+0xb2>
	default:
		return -1;
 8003ab4:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40007400 	.word	0x40007400

08003ac8 <enter_stop>:

void enter_stop() {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
	  send_ACK();
 8003acc:	f7ff ff88 	bl	80039e0 <send_ACK>

	  vTaskSuspendAll();
 8003ad0:	f015 f8ea 	bl	8018ca8 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f00a fa2c 	bl	800df34 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003adc:	f7ff f914 	bl	8002d08 <__NVIC_SystemReset>

08003ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003af2:	f002 fa0d 	bl	8005f10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40001000 	.word	0x40001000

08003b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003b0e:	231a      	movs	r3, #26
 8003b10:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe fa22 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003b26:	bf00      	nop
 8003b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b2c:	481c      	ldr	r0, [pc, #112]	; (8003ba0 <create_pmt_packet+0x80>)
 8003b2e:	f007 fe0b 	bl	800b748 <HAL_GPIO_ReadPin>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f7      	bne.n	8003b28 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fa98 	bl	8005070 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003b40:	f107 0308 	add.w	r3, r7, #8
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fac9 	bl	80040dc <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003b4a:	23ff      	movs	r3, #255	; 0xff
 8003b4c:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003b4e:	23ff      	movs	r3, #255	; 0xff
 8003b50:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <create_pmt_packet+0x84>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <create_pmt_packet+0x84>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003b66:	7a3b      	ldrb	r3, [r7, #8]
 8003b68:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003b6a:	7a7b      	ldrb	r3, [r7, #9]
 8003b6c:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003b6e:	793b      	ldrb	r3, [r7, #4]
 8003b70:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003b72:	797b      	ldrb	r3, [r7, #5]
 8003b74:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003b76:	79bb      	ldrb	r3, [r7, #6]
 8003b78:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003b7e:	f107 010c 	add.w	r1, r7, #12
 8003b82:	2364      	movs	r3, #100	; 0x64
 8003b84:	220a      	movs	r2, #10
 8003b86:	4808      	ldr	r0, [pc, #32]	; (8003ba8 <create_pmt_packet+0x88>)
 8003b88:	f010 fc8a 	bl	80144a0 <HAL_UART_Transmit>

	pmt_seq++;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <create_pmt_packet+0x84>)
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <create_pmt_packet+0x84>)
 8003b96:	801a      	strh	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	58020000 	.word	0x58020000
 8003ba4:	24001aea 	.word	0x24001aea
 8003ba8:	24001e3c 	.word	0x24001e3c

08003bac <create_erpa_packet>:


void create_erpa_packet() {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003bb2:	bf00      	nop
 8003bb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bb8:	4828      	ldr	r0, [pc, #160]	; (8003c5c <create_erpa_packet+0xb0>)
 8003bba:	f007 fdc5 	bl	800b748 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f7      	bne.n	8003bb4 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003bc4:	23ff      	movs	r3, #255	; 0xff
 8003bc6:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003bc8:	1d3b      	adds	r3, r7, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 fa50 	bl	8005070 <get_uptime>
	sweep_step = get_current_step();
 8003bd0:	f7ff ff18 	bl	8003a04 <get_current_step>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fa9d 	bl	800411c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fab8 	bl	800415c <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003bec:	23ee      	movs	r3, #238	; 0xee
 8003bee:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003bf0:	23ee      	movs	r3, #238	; 0xee
 8003bf2:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <create_erpa_packet+0xb4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003bfe:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <create_erpa_packet+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <create_erpa_packet+0xb4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
 8003c12:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003c1e:	893b      	ldrh	r3, [r7, #8]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003c24:	7b3b      	ldrb	r3, [r7, #12]
 8003c26:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003c28:	7b7b      	ldrb	r3, [r7, #13]
 8003c2a:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003c2c:	793b      	ldrb	r3, [r7, #4]
 8003c2e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003c30:	797b      	ldrb	r3, [r7, #5]
 8003c32:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003c3c:	f107 0110 	add.w	r1, r7, #16
 8003c40:	2364      	movs	r3, #100	; 0x64
 8003c42:	220e      	movs	r2, #14
 8003c44:	4807      	ldr	r0, [pc, #28]	; (8003c64 <create_erpa_packet+0xb8>)
 8003c46:	f010 fc2b 	bl	80144a0 <HAL_UART_Transmit>

	erpa_seq++;
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <create_erpa_packet+0xb4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a03      	ldr	r2, [pc, #12]	; (8003c60 <create_erpa_packet+0xb4>)
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	58020400 	.word	0x58020400
 8003c60:	24001aec 	.word	0x24001aec
 8003c64:	24001e3c 	.word	0x24001e3c

08003c68 <create_hk_packet>:


void create_hk_packet() {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b092      	sub	sp, #72	; 0x48
 8003c6c:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 f9fd 	bl	8005070 <get_uptime>
	get_unix_time(timestamp);
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fa48 	bl	8005110 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003c80:	f001 ff8c 	bl	8005b9c <get_rail_monitor>
 8003c84:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003c86:	23dd      	movs	r3, #221	; 0xdd
 8003c88:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003c8a:	23dd      	movs	r3, #221	; 0xdd
 8003c8c:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003c8e:	4b93      	ldr	r3, [pc, #588]	; (8003edc <create_hk_packet+0x274>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003c9a:	4b90      	ldr	r3, [pc, #576]	; (8003edc <create_hk_packet+0x274>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca4:	889b      	ldrh	r3, [r3, #4]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb0:	889b      	ldrh	r3, [r3, #4]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb8:	330a      	adds	r3, #10
 8003cba:	889b      	ldrh	r3, [r3, #4]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc6:	330a      	adds	r3, #10
 8003cc8:	889b      	ldrh	r3, [r3, #4]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	889b      	ldrh	r3, [r3, #4]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cde:	3314      	adds	r3, #20
 8003ce0:	889b      	ldrh	r3, [r3, #4]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce8:	331e      	adds	r3, #30
 8003cea:	889b      	ldrh	r3, [r3, #4]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf6:	331e      	adds	r3, #30
 8003cf8:	889b      	ldrh	r3, [r3, #4]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d00:	3328      	adds	r3, #40	; 0x28
 8003d02:	889b      	ldrh	r3, [r3, #4]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0e:	3328      	adds	r3, #40	; 0x28
 8003d10:	889b      	ldrh	r3, [r3, #4]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	889b      	ldrh	r3, [r3, #4]
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d26:	3332      	adds	r3, #50	; 0x32
 8003d28:	889b      	ldrh	r3, [r3, #4]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d30:	333c      	adds	r3, #60	; 0x3c
 8003d32:	889b      	ldrh	r3, [r3, #4]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d40:	333c      	adds	r3, #60	; 0x3c
 8003d42:	889b      	ldrh	r3, [r3, #4]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4c:	3346      	adds	r3, #70	; 0x46
 8003d4e:	889b      	ldrh	r3, [r3, #4]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5c:	3346      	adds	r3, #70	; 0x46
 8003d5e:	889b      	ldrh	r3, [r3, #4]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d68:	3350      	adds	r3, #80	; 0x50
 8003d6a:	889b      	ldrh	r3, [r3, #4]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d78:	3350      	adds	r3, #80	; 0x50
 8003d7a:	889b      	ldrh	r3, [r3, #4]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d84:	335a      	adds	r3, #90	; 0x5a
 8003d86:	889b      	ldrh	r3, [r3, #4]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d94:	335a      	adds	r3, #90	; 0x5a
 8003d96:	889b      	ldrh	r3, [r3, #4]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da0:	3364      	adds	r3, #100	; 0x64
 8003da2:	889b      	ldrh	r3, [r3, #4]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db0:	3364      	adds	r3, #100	; 0x64
 8003db2:	889b      	ldrh	r3, [r3, #4]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbc:	336e      	adds	r3, #110	; 0x6e
 8003dbe:	889b      	ldrh	r3, [r3, #4]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dcc:	336e      	adds	r3, #110	; 0x6e
 8003dce:	889b      	ldrh	r3, [r3, #4]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd8:	3378      	adds	r3, #120	; 0x78
 8003dda:	889b      	ldrh	r3, [r3, #4]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de8:	3378      	adds	r3, #120	; 0x78
 8003dea:	889b      	ldrh	r3, [r3, #4]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	3382      	adds	r3, #130	; 0x82
 8003df6:	889b      	ldrh	r3, [r3, #4]
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e04:	3382      	adds	r3, #130	; 0x82
 8003e06:	889b      	ldrh	r3, [r3, #4]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e10:	338c      	adds	r3, #140	; 0x8c
 8003e12:	889b      	ldrh	r3, [r3, #4]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e20:	338c      	adds	r3, #140	; 0x8c
 8003e22:	889b      	ldrh	r3, [r3, #4]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2c:	3396      	adds	r3, #150	; 0x96
 8003e2e:	889b      	ldrh	r3, [r3, #4]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	3396      	adds	r3, #150	; 0x96
 8003e3e:	889b      	ldrh	r3, [r3, #4]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e48:	33a0      	adds	r3, #160	; 0xa0
 8003e4a:	889b      	ldrh	r3, [r3, #4]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e58:	33a0      	adds	r3, #160	; 0xa0
 8003e5a:	889b      	ldrh	r3, [r3, #4]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e64:	33aa      	adds	r3, #170	; 0xaa
 8003e66:	889b      	ldrh	r3, [r3, #4]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e74:	33aa      	adds	r3, #170	; 0xaa
 8003e76:	889b      	ldrh	r3, [r3, #4]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003e7e:	7a3b      	ldrb	r3, [r7, #8]
 8003e80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003e84:	7a7b      	ldrb	r3, [r7, #9]
 8003e86:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003e8a:	7abb      	ldrb	r3, [r7, #10]
 8003e8c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003e96:	7b3b      	ldrb	r3, [r7, #12]
 8003e98:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003e9c:	7b7b      	ldrb	r3, [r7, #13]
 8003e9e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003ea2:	793b      	ldrb	r3, [r7, #4]
 8003ea4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003ea8:	797b      	ldrb	r3, [r7, #5]
 8003eaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003eae:	79bb      	ldrb	r3, [r7, #6]
 8003eb0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003eba:	f107 0110 	add.w	r1, r7, #16
 8003ebe:	2364      	movs	r3, #100	; 0x64
 8003ec0:	2232      	movs	r2, #50	; 0x32
 8003ec2:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <create_hk_packet+0x278>)
 8003ec4:	f010 faec 	bl	80144a0 <HAL_UART_Transmit>

	hk_seq++;
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <create_hk_packet+0x274>)
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <create_hk_packet+0x274>)
 8003ed2:	801a      	strh	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3748      	adds	r7, #72	; 0x48
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	24001af0 	.word	0x24001af0
 8003ee0:	24001e3c 	.word	0x24001e3c

08003ee4 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <reset_packet_sequence_numbers+0x20>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <reset_packet_sequence_numbers+0x24>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <reset_packet_sequence_numbers+0x28>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	24001aea 	.word	0x24001aea
 8003f08:	24001aec 	.word	0x24001aec
 8003f0c:	24001af0 	.word	0x24001af0

08003f10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003f24:	2300      	movs	r3, #0
 8003f26:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f28:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f2a:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <MX_RTC_Init+0xb8>)
 8003f2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003f34:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f36:	2263      	movs	r2, #99	; 0x63
 8003f38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f40:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f5a:	481a      	ldr	r0, [pc, #104]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f5c:	f00d fd86 	bl	8011a6c <HAL_RTC_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003f66:	f7ff fdcd 	bl	8003b04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	2201      	movs	r2, #1
 8003f82:	4619      	mov	r1, r3
 8003f84:	480f      	ldr	r0, [pc, #60]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f86:	f00d fdf3 	bl	8011b70 <HAL_RTC_SetTime>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003f90:	f7ff fdb8 	bl	8003b04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003f94:	2301      	movs	r3, #1
 8003f96:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003fac:	f00d feda 	bl	8011d64 <HAL_RTC_SetDate>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003fb6:	f7ff fda5 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	24001af4 	.word	0x24001af4
 8003fc8:	58004000 	.word	0x58004000

08003fcc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b0b2      	sub	sp, #200	; 0xc8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	22c0      	movs	r2, #192	; 0xc0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f016 fbcd 	bl	801a77c <memset>
  if(rtcHandle->Instance==RTC)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_RTC_MspInit+0x5c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d118      	bne.n	800401e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RTC_MspInit+0x60>)
 8003ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4618      	mov	r0, r3
 8004004:	f00b f834 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800400e:	f7ff fd79 	bl	8003b04 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <HAL_RTC_MspInit+0x64>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a06      	ldr	r2, [pc, #24]	; (8004030 <HAL_RTC_MspInit+0x64>)
 8004018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800401e:	bf00      	nop
 8004020:	37c8      	adds	r7, #200	; 0xc8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	58004000 	.word	0x58004000
 800402c:	00019300 	.word	0x00019300
 8004030:	58024400 	.word	0x58024400

08004034 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800403e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004046:	481f      	ldr	r0, [pc, #124]	; (80040c4 <init_adc_dma+0x90>)
 8004048:	f003 fa76 	bl	8007538 <HAL_ADCEx_Calibration_Start>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8004052:	f7ff fd57 	bl	8003b04 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8004056:	220b      	movs	r2, #11
 8004058:	491b      	ldr	r1, [pc, #108]	; (80040c8 <init_adc_dma+0x94>)
 800405a:	481a      	ldr	r0, [pc, #104]	; (80040c4 <init_adc_dma+0x90>)
 800405c:	f002 fb4a 	bl	80066f4 <HAL_ADC_Start_DMA>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8004066:	f7ff fd4d 	bl	8003b04 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800406a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800406e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004072:	4816      	ldr	r0, [pc, #88]	; (80040cc <init_adc_dma+0x98>)
 8004074:	f003 fa60 	bl	8007538 <HAL_ADCEx_Calibration_Start>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800407e:	f7ff fd41 	bl	8003b04 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8004082:	2204      	movs	r2, #4
 8004084:	4912      	ldr	r1, [pc, #72]	; (80040d0 <init_adc_dma+0x9c>)
 8004086:	4811      	ldr	r0, [pc, #68]	; (80040cc <init_adc_dma+0x98>)
 8004088:	f002 fb34 	bl	80066f4 <HAL_ADC_Start_DMA>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8004092:	f7ff fd37 	bl	8003b04 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <init_adc_dma+0xa0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <init_adc_dma+0xa0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a4:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <init_adc_dma+0xa4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <init_adc_dma+0xa4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b4:	601a      	str	r2, [r3, #0]


	status = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	71fb      	strb	r3, [r7, #7]

	return status;
 80040ba:	79fb      	ldrb	r3, [r7, #7]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	2400015c 	.word	0x2400015c
 80040c8:	24001b20 	.word	0x24001b20
 80040cc:	240001c0 	.word	0x240001c0
 80040d0:	24001b40 	.word	0x24001b40
 80040d4:	24001bdc 	.word	0x24001bdc
 80040d8:	24001b54 	.word	0x24001b54

080040dc <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80040e4:	2201      	movs	r2, #1
 80040e6:	490b      	ldr	r1, [pc, #44]	; (8004114 <sample_pmt_spi+0x38>)
 80040e8:	480b      	ldr	r0, [pc, #44]	; (8004118 <sample_pmt_spi+0x3c>)
 80040ea:	f00e f905 	bl	80122f8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <sample_pmt_spi+0x38>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <sample_pmt_spi+0x38>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3301      	adds	r3, #1
 8004108:	7bba      	ldrb	r2, [r7, #14]
 800410a:	701a      	strb	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	24001b4c 	.word	0x24001b4c
 8004118:	24001b54 	.word	0x24001b54

0800411c <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8004124:	2201      	movs	r2, #1
 8004126:	490b      	ldr	r1, [pc, #44]	; (8004154 <sample_erpa_spi+0x38>)
 8004128:	480b      	ldr	r0, [pc, #44]	; (8004158 <sample_erpa_spi+0x3c>)
 800412a:	f00e f8e5 	bl	80122f8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <sample_erpa_spi+0x38>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	b29b      	uxth	r3, r3
 8004136:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <sample_erpa_spi+0x38>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3301      	adds	r3, #1
 8004148:	7bba      	ldrb	r2, [r7, #14]
 800414a:	701a      	strb	r2, [r3, #0]
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	24001b48 	.word	0x24001b48
 8004158:	24001bdc 	.word	0x24001bdc

0800415c <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <sample_erpa_adc+0x20>)
 8004166:	885b      	ldrh	r3, [r3, #2]
 8004168:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	89fa      	ldrh	r2, [r7, #14]
 800416e:	801a      	strh	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	24001b20 	.word	0x24001b20

08004180 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004188:	2390      	movs	r3, #144	; 0x90
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f8a2 	bl	80042d4 <poll_i2c_sensor>
 8004190:	4603      	mov	r3, r0
 8004192:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004194:	2394      	movs	r3, #148	; 0x94
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f89c 	bl	80042d4 <poll_i2c_sensor>
 800419c:	4603      	mov	r3, r0
 800419e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80041a0:	2392      	movs	r3, #146	; 0x92
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f896 	bl	80042d4 <poll_i2c_sensor>
 80041a8:	4603      	mov	r3, r0
 80041aa:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80041ac:	2396      	movs	r3, #150	; 0x96
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f890 	bl	80042d4 <poll_i2c_sensor>
 80041b4:	4603      	mov	r3, r0
 80041b6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	89fa      	ldrh	r2, [r7, #14]
 80041bc:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3302      	adds	r3, #2
 80041c2:	89ba      	ldrh	r2, [r7, #12]
 80041c4:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	897a      	ldrh	r2, [r7, #10]
 80041cc:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3306      	adds	r3, #6
 80041d2:	893a      	ldrh	r2, [r7, #8]
 80041d4:	801a      	strh	r2, [r3, #0]
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <sample_hk_adc1+0xa0>)
 80041ea:	8a9b      	ldrh	r3, [r3, #20]
 80041ec:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <sample_hk_adc1+0xa0>)
 80041f0:	8a1b      	ldrh	r3, [r3, #16]
 80041f2:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80041f4:	4b22      	ldr	r3, [pc, #136]	; (8004280 <sample_hk_adc1+0xa0>)
 80041f6:	899b      	ldrh	r3, [r3, #12]
 80041f8:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <sample_hk_adc1+0xa0>)
 80041fc:	8a5b      	ldrh	r3, [r3, #18]
 80041fe:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <sample_hk_adc1+0xa0>)
 8004202:	889b      	ldrh	r3, [r3, #4]
 8004204:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8004206:	4b1e      	ldr	r3, [pc, #120]	; (8004280 <sample_hk_adc1+0xa0>)
 8004208:	88db      	ldrh	r3, [r3, #6]
 800420a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <sample_hk_adc1+0xa0>)
 800420e:	89db      	ldrh	r3, [r3, #14]
 8004210:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <sample_hk_adc1+0xa0>)
 8004214:	891b      	ldrh	r3, [r3, #8]
 8004216:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <sample_hk_adc1+0xa0>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <sample_hk_adc1+0xa0>)
 8004220:	895b      	ldrh	r3, [r3, #10]
 8004222:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8bfa      	ldrh	r2, [r7, #30]
 8004228:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3302      	adds	r3, #2
 800422e:	8bba      	ldrh	r2, [r7, #28]
 8004230:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	8b7a      	ldrh	r2, [r7, #26]
 8004238:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3306      	adds	r3, #6
 800423e:	8b3a      	ldrh	r2, [r7, #24]
 8004240:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3308      	adds	r3, #8
 8004246:	8afa      	ldrh	r2, [r7, #22]
 8004248:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	330a      	adds	r3, #10
 800424e:	8aba      	ldrh	r2, [r7, #20]
 8004250:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	330c      	adds	r3, #12
 8004256:	8a7a      	ldrh	r2, [r7, #18]
 8004258:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	330e      	adds	r3, #14
 800425e:	8a3a      	ldrh	r2, [r7, #16]
 8004260:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3310      	adds	r3, #16
 8004266:	89fa      	ldrh	r2, [r7, #14]
 8004268:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3312      	adds	r3, #18
 800426e:	89ba      	ldrh	r2, [r7, #12]
 8004270:	801a      	strh	r2, [r3, #0]
}
 8004272:	bf00      	nop
 8004274:	3724      	adds	r7, #36	; 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	24001b20 	.word	0x24001b20

08004284 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <sample_hk_adc3+0x4c>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <sample_hk_adc3+0x4c>)
 8004294:	885b      	ldrh	r3, [r3, #2]
 8004296:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <sample_hk_adc3+0x4c>)
 800429a:	889b      	ldrh	r3, [r3, #4]
 800429c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <sample_hk_adc3+0x4c>)
 80042a0:	88db      	ldrh	r3, [r3, #6]
 80042a2:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	89fa      	ldrh	r2, [r7, #14]
 80042a8:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3302      	adds	r3, #2
 80042ae:	89ba      	ldrh	r2, [r7, #12]
 80042b0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	897a      	ldrh	r2, [r7, #10]
 80042b8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3306      	adds	r3, #6
 80042be:	893a      	ldrh	r2, [r7, #8]
 80042c0:	801a      	strh	r2, [r3, #0]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	24001b40 	.word	0x24001b40

080042d4 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80042de:	2200      	movs	r2, #0
 80042e0:	4b20      	ldr	r3, [pc, #128]	; (8004364 <poll_i2c_sensor+0x90>)
 80042e2:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	b299      	uxth	r1, r3
 80042e8:	2301      	movs	r3, #1
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <poll_i2c_sensor+0x90>)
 80042ec:	481e      	ldr	r0, [pc, #120]	; (8004368 <poll_i2c_sensor+0x94>)
 80042ee:	f007 faf9 	bl	800b8e4 <HAL_I2C_Master_Transmit_DMA>
 80042f2:	4603      	mov	r3, r0
 80042f4:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80042f6:	7b7b      	ldrb	r3, [r7, #13]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 80042fc:	481b      	ldr	r0, [pc, #108]	; (800436c <poll_i2c_sensor+0x98>)
 80042fe:	f016 fab3 	bl	801a868 <puts>
 8004302:	e028      	b.n	8004356 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004304:	bf00      	nop
 8004306:	4818      	ldr	r0, [pc, #96]	; (8004368 <poll_i2c_sensor+0x94>)
 8004308:	f007 fdd3 	bl	800beb2 <HAL_I2C_GetState>
 800430c:	4603      	mov	r3, r0
 800430e:	2b20      	cmp	r3, #32
 8004310:	d1f9      	bne.n	8004306 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	b299      	uxth	r1, r3
 8004316:	2302      	movs	r3, #2
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <poll_i2c_sensor+0x90>)
 800431a:	4813      	ldr	r0, [pc, #76]	; (8004368 <poll_i2c_sensor+0x94>)
 800431c:	f007 fbf6 	bl	800bb0c <HAL_I2C_Master_Receive_DMA>
 8004320:	4603      	mov	r3, r0
 8004322:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8004324:	7b7b      	ldrb	r3, [r7, #13]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 800432a:	4811      	ldr	r0, [pc, #68]	; (8004370 <poll_i2c_sensor+0x9c>)
 800432c:	f016 fa9c 	bl	801a868 <puts>
 8004330:	e011      	b.n	8004356 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004332:	bf00      	nop
 8004334:	480c      	ldr	r0, [pc, #48]	; (8004368 <poll_i2c_sensor+0x94>)
 8004336:	f007 fdbc 	bl	800beb2 <HAL_I2C_GetState>
 800433a:	4603      	mov	r3, r0
 800433c:	2b20      	cmp	r3, #32
 800433e:	d1f9      	bne.n	8004334 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <poll_i2c_sensor+0x90>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800434c:	4a05      	ldr	r2, [pc, #20]	; (8004364 <poll_i2c_sensor+0x90>)
 800434e:	7852      	ldrb	r2, [r2, #1]
 8004350:	4313      	orrs	r3, r2
 8004352:	10db      	asrs	r3, r3, #3
 8004354:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	24001b50 	.word	0x24001b50
 8004368:	2400193c 	.word	0x2400193c
 800436c:	0801b3d0 	.word	0x0801b3d0
 8004370:	0801b3e0 	.word	0x0801b3e0

08004374 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004378:	4b28      	ldr	r3, [pc, #160]	; (800441c <MX_SPI1_Init+0xa8>)
 800437a:	4a29      	ldr	r2, [pc, #164]	; (8004420 <MX_SPI1_Init+0xac>)
 800437c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800437e:	4b27      	ldr	r3, [pc, #156]	; (800441c <MX_SPI1_Init+0xa8>)
 8004380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004386:	4b25      	ldr	r3, [pc, #148]	; (800441c <MX_SPI1_Init+0xa8>)
 8004388:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800438c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <MX_SPI1_Init+0xa8>)
 8004390:	220f      	movs	r2, #15
 8004392:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <MX_SPI1_Init+0xa8>)
 8004396:	2200      	movs	r2, #0
 8004398:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <MX_SPI1_Init+0xa8>)
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <MX_SPI1_Init+0xa8>)
 80043a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <MX_SPI1_Init+0xa8>)
 80043aa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80043ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043b0:	4b1a      	ldr	r3, [pc, #104]	; (800441c <MX_SPI1_Init+0xa8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043b6:	4b19      	ldr	r3, [pc, #100]	; (800441c <MX_SPI1_Init+0xa8>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043bc:	4b17      	ldr	r3, [pc, #92]	; (800441c <MX_SPI1_Init+0xa8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <MX_SPI1_Init+0xa8>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <MX_SPI1_Init+0xa8>)
 80043ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043ce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <MX_SPI1_Init+0xa8>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <MX_SPI1_Init+0xa8>)
 80043d8:	2200      	movs	r2, #0
 80043da:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <MX_SPI1_Init+0xa8>)
 80043de:	2200      	movs	r2, #0
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <MX_SPI1_Init+0xa8>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <MX_SPI1_Init+0xa8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <MX_SPI1_Init+0xa8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <MX_SPI1_Init+0xa8>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <MX_SPI1_Init+0xa8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <MX_SPI1_Init+0xa8>)
 8004402:	2200      	movs	r2, #0
 8004404:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004406:	4805      	ldr	r0, [pc, #20]	; (800441c <MX_SPI1_Init+0xa8>)
 8004408:	f00d fe52 	bl	80120b0 <HAL_SPI_Init>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004412:	f7ff fb77 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	24001b54 	.word	0x24001b54
 8004420:	40013000 	.word	0x40013000

08004424 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <MX_SPI2_Init+0xa8>)
 800442a:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <MX_SPI2_Init+0xac>)
 800442c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004430:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004434:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004436:	4b25      	ldr	r3, [pc, #148]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004438:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800443c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004440:	220f      	movs	r2, #15
 8004442:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800444a:	4b20      	ldr	r3, [pc, #128]	; (80044cc <MX_SPI2_Init+0xa8>)
 800444c:	2200      	movs	r2, #0
 800444e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004450:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004452:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004456:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004458:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <MX_SPI2_Init+0xa8>)
 800445a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800445e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004462:	2200      	movs	r2, #0
 8004464:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004468:	2200      	movs	r2, #0
 800446a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <MX_SPI2_Init+0xa8>)
 800446e:	2200      	movs	r2, #0
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004474:	2200      	movs	r2, #0
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <MX_SPI2_Init+0xa8>)
 800447a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800447e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004480:	4b12      	ldr	r3, [pc, #72]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004482:	2200      	movs	r2, #0
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004488:	2200      	movs	r2, #0
 800448a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <MX_SPI2_Init+0xa8>)
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <MX_SPI2_Init+0xa8>)
 8004494:	2200      	movs	r2, #0
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <MX_SPI2_Init+0xa8>)
 800449a:	2200      	movs	r2, #0
 800449c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <MX_SPI2_Init+0xa8>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <MX_SPI2_Init+0xa8>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <MX_SPI2_Init+0xa8>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <MX_SPI2_Init+0xa8>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044b6:	4805      	ldr	r0, [pc, #20]	; (80044cc <MX_SPI2_Init+0xa8>)
 80044b8:	f00d fdfa 	bl	80120b0 <HAL_SPI_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80044c2:	f7ff fb1f 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	24001bdc 	.word	0x24001bdc
 80044d0:	40003800 	.word	0x40003800

080044d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b0bc      	sub	sp, #240	; 0xf0
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044ec:	f107 0318 	add.w	r3, r7, #24
 80044f0:	22c0      	movs	r2, #192	; 0xc0
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f016 f941 	bl	801a77c <memset>
  if(spiHandle->Instance==SPI1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a83      	ldr	r2, [pc, #524]	; (800470c <HAL_SPI_MspInit+0x238>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d17c      	bne.n	80045fe <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004510:	2300      	movs	r3, #0
 8004512:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004514:	f107 0318 	add.w	r3, r7, #24
 8004518:	4618      	mov	r0, r3
 800451a:	f00a fda9 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004524:	f7ff faee 	bl	8003b04 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004528:	4b79      	ldr	r3, [pc, #484]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 800452a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800452e:	4a78      	ldr	r2, [pc, #480]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 8004530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004534:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004538:	4b75      	ldr	r3, [pc, #468]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 800453a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800453e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004546:	4b72      	ldr	r3, [pc, #456]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 8004548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800454c:	4a70      	ldr	r2, [pc, #448]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 800454e:	f043 0302 	orr.w	r3, r3, #2
 8004552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004556:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 8004558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004564:	2318      	movs	r3, #24
 8004566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456a:	2302      	movs	r3, #2
 800456c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004576:	2300      	movs	r3, #0
 8004578:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800457c:	2305      	movs	r3, #5
 800457e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004582:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004586:	4619      	mov	r1, r3
 8004588:	4862      	ldr	r0, [pc, #392]	; (8004714 <HAL_SPI_MspInit+0x240>)
 800458a:	f006 ff2d 	bl	800b3e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800458e:	4b62      	ldr	r3, [pc, #392]	; (8004718 <HAL_SPI_MspInit+0x244>)
 8004590:	4a62      	ldr	r2, [pc, #392]	; (800471c <HAL_SPI_MspInit+0x248>)
 8004592:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004594:	4b60      	ldr	r3, [pc, #384]	; (8004718 <HAL_SPI_MspInit+0x244>)
 8004596:	2225      	movs	r2, #37	; 0x25
 8004598:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800459a:	4b5f      	ldr	r3, [pc, #380]	; (8004718 <HAL_SPI_MspInit+0x244>)
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045a0:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045a6:	4b5c      	ldr	r3, [pc, #368]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045ae:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045b6:	4b58      	ldr	r3, [pc, #352]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80045be:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045c4:	4b54      	ldr	r3, [pc, #336]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ca:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80045d0:	4851      	ldr	r0, [pc, #324]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045d2:	f003 fdd9 	bl	8008188 <HAL_DMA_Init>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80045dc:	f7ff fa92 	bl	8003b04 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a4d      	ldr	r2, [pc, #308]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80045e6:	4a4c      	ldr	r2, [pc, #304]	; (8004718 <HAL_SPI_MspInit+0x244>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80045ec:	2200      	movs	r2, #0
 80045ee:	2105      	movs	r1, #5
 80045f0:	2023      	movs	r0, #35	; 0x23
 80045f2:	f003 f99b 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80045f6:	2023      	movs	r0, #35	; 0x23
 80045f8:	f003 f9b2 	bl	8007960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80045fc:	e081      	b.n	8004702 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a47      	ldr	r2, [pc, #284]	; (8004720 <HAL_SPI_MspInit+0x24c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d17c      	bne.n	8004702 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004614:	2300      	movs	r3, #0
 8004616:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004618:	f107 0318 	add.w	r3, r7, #24
 800461c:	4618      	mov	r0, r3
 800461e:	f00a fd27 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004628:	f7ff fa6c 	bl	8003b04 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800462c:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 800462e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004632:	4a37      	ldr	r2, [pc, #220]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004638:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800463c:	4b34      	ldr	r3, [pc, #208]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 800463e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 800464c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004650:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 8004652:	f043 0302 	orr.w	r3, r3, #2
 8004656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800465a:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_SPI_MspInit+0x23c>)
 800465c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004668:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800466c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004676:	2300      	movs	r3, #0
 8004678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004682:	2305      	movs	r3, #5
 8004684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004688:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800468c:	4619      	mov	r1, r3
 800468e:	4821      	ldr	r0, [pc, #132]	; (8004714 <HAL_SPI_MspInit+0x240>)
 8004690:	f006 feaa 	bl	800b3e8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <HAL_SPI_MspInit+0x250>)
 8004696:	4a24      	ldr	r2, [pc, #144]	; (8004728 <HAL_SPI_MspInit+0x254>)
 8004698:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800469a:	4b22      	ldr	r3, [pc, #136]	; (8004724 <HAL_SPI_MspInit+0x250>)
 800469c:	2227      	movs	r2, #39	; 0x27
 800469e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046a0:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80046c4:	4b17      	ldr	r3, [pc, #92]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80046d6:	4813      	ldr	r0, [pc, #76]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046d8:	f003 fd56 	bl	8008188 <HAL_DMA_Init>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80046e2:	f7ff fa0f 	bl	8003b04 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80046ec:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <HAL_SPI_MspInit+0x250>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	2105      	movs	r1, #5
 80046f6:	2024      	movs	r0, #36	; 0x24
 80046f8:	f003 f918 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046fc:	2024      	movs	r0, #36	; 0x24
 80046fe:	f003 f92f 	bl	8007960 <HAL_NVIC_EnableIRQ>
}
 8004702:	bf00      	nop
 8004704:	37f0      	adds	r7, #240	; 0xf0
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40013000 	.word	0x40013000
 8004710:	58024400 	.word	0x58024400
 8004714:	58020400 	.word	0x58020400
 8004718:	24001c64 	.word	0x24001c64
 800471c:	40020070 	.word	0x40020070
 8004720:	40003800 	.word	0x40003800
 8004724:	24001cdc 	.word	0x24001cdc
 8004728:	40020058 	.word	0x40020058

0800472c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_MspInit+0x38>)
 8004734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004738:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <HAL_MspInit+0x38>)
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_MspInit+0x38>)
 8004744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004750:	2200      	movs	r2, #0
 8004752:	210f      	movs	r1, #15
 8004754:	f06f 0001 	mvn.w	r0, #1
 8004758:	f003 f8e8 	bl	800792c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	58024400 	.word	0x58024400

08004768 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b090      	sub	sp, #64	; 0x40
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d827      	bhi.n	80047c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004776:	2200      	movs	r2, #0
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	2036      	movs	r0, #54	; 0x36
 800477c:	f003 f8d6 	bl	800792c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004780:	2036      	movs	r0, #54	; 0x36
 8004782:	f003 f8ed 	bl	8007960 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004786:	4a29      	ldr	r2, [pc, #164]	; (800482c <HAL_InitTick+0xc4>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_InitTick+0xc8>)
 800478e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004792:	4a27      	ldr	r2, [pc, #156]	; (8004830 <HAL_InitTick+0xc8>)
 8004794:	f043 0310 	orr.w	r3, r3, #16
 8004798:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800479c:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_InitTick+0xc8>)
 800479e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047aa:	f107 0210 	add.w	r2, r7, #16
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f00a fc19 	bl	800efec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <HAL_InitTick+0x6a>
 80047c4:	e001      	b.n	80047ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e02b      	b.n	8004822 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80047ca:	f00a fbe3 	bl	800ef94 <HAL_RCC_GetPCLK1Freq>
 80047ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 80047d0:	e004      	b.n	80047dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80047d2:	f00a fbdf 	bl	800ef94 <HAL_RCC_GetPCLK1Freq>
 80047d6:	4603      	mov	r3, r0
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_InitTick+0xcc>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	0c9b      	lsrs	r3, r3, #18
 80047e6:	3b01      	subs	r3, #1
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80047ea:	4b13      	ldr	r3, [pc, #76]	; (8004838 <HAL_InitTick+0xd0>)
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <HAL_InitTick+0xd4>)
 80047ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <HAL_InitTick+0xd0>)
 80047f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80047f8:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <HAL_InitTick+0xd0>)
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80047fe:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <HAL_InitTick+0xd0>)
 8004800:	2200      	movs	r2, #0
 8004802:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <HAL_InitTick+0xd0>)
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800480a:	480b      	ldr	r0, [pc, #44]	; (8004838 <HAL_InitTick+0xd0>)
 800480c:	f00e f9ef 	bl	8012bee <HAL_TIM_Base_Init>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004816:	4808      	ldr	r0, [pc, #32]	; (8004838 <HAL_InitTick+0xd0>)
 8004818:	f00e fa40 	bl	8012c9c <HAL_TIM_Base_Start_IT>
 800481c:	4603      	mov	r3, r0
 800481e:	e000      	b.n	8004822 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
}
 8004822:	4618      	mov	r0, r3
 8004824:	3740      	adds	r7, #64	; 0x40
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	240000cc 	.word	0x240000cc
 8004830:	58024400 	.word	0x58024400
 8004834:	431bde83 	.word	0x431bde83
 8004838:	24001d54 	.word	0x24001d54
 800483c:	40001000 	.word	0x40001000

08004840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004844:	e7fe      	b.n	8004844 <NMI_Handler+0x4>

08004846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800484a:	e7fe      	b.n	800484a <HardFault_Handler+0x4>

0800484c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004850:	e7fe      	b.n	8004850 <MemManage_Handler+0x4>

08004852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004856:	e7fe      	b.n	8004856 <BusFault_Handler+0x4>

08004858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800485c:	e7fe      	b.n	800485c <UsageFault_Handler+0x4>

0800485e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004862:	bf00      	nop
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004870:	4802      	ldr	r0, [pc, #8]	; (800487c <DMA1_Stream0_IRQHandler+0x10>)
 8004872:	f004 ffb3 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	24000224 	.word	0x24000224

08004880 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004884:	4802      	ldr	r0, [pc, #8]	; (8004890 <DMA1_Stream1_IRQHandler+0x10>)
 8004886:	f004 ffa9 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	2400029c 	.word	0x2400029c

08004894 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004898:	4802      	ldr	r0, [pc, #8]	; (80048a4 <DMA1_Stream2_IRQHandler+0x10>)
 800489a:	f004 ff9f 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	24001ed0 	.word	0x24001ed0

080048a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <DMA1_Stream3_IRQHandler+0x10>)
 80048ae:	f004 ff95 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	24001cdc 	.word	0x24001cdc

080048bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <DMA1_Stream4_IRQHandler+0x10>)
 80048c2:	f004 ff8b 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	24001c64 	.word	0x24001c64

080048d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <DMA1_Stream5_IRQHandler+0x10>)
 80048d6:	f004 ff81 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	24000328 	.word	0x24000328

080048e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <DMA1_Stream6_IRQHandler+0x10>)
 80048ea:	f004 ff77 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	24001990 	.word	0x24001990

080048f8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <TIM1_BRK_IRQHandler+0x10>)
 80048fe:	f00e fce4 	bl	80132ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	24001da4 	.word	0x24001da4

0800490c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <TIM1_UP_IRQHandler+0x10>)
 8004912:	f00e fcda 	bl	80132ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	24001da4 	.word	0x24001da4

08004920 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004924:	4802      	ldr	r0, [pc, #8]	; (8004930 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004926:	f00e fcd0 	bl	80132ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	24001da4 	.word	0x24001da4

08004934 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004938:	4802      	ldr	r0, [pc, #8]	; (8004944 <TIM1_CC_IRQHandler+0x10>)
 800493a:	f00e fcc6 	bl	80132ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	24001da4 	.word	0x24001da4

08004948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800494c:	4802      	ldr	r0, [pc, #8]	; (8004958 <TIM2_IRQHandler+0x10>)
 800494e:	f00e fcbc 	bl	80132ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	24001df0 	.word	0x24001df0

0800495c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <I2C1_EV_IRQHandler+0x10>)
 8004962:	f007 f9c3 	bl	800bcec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2400193c 	.word	0x2400193c

08004970 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <I2C1_ER_IRQHandler+0x10>)
 8004976:	f007 f9d3 	bl	800bd20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2400193c 	.word	0x2400193c

08004984 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <SPI1_IRQHandler+0x10>)
 800498a:	f00d fdfd 	bl	8012588 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	24001b54 	.word	0x24001b54

08004998 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800499c:	4802      	ldr	r0, [pc, #8]	; (80049a8 <SPI2_IRQHandler+0x10>)
 800499e:	f00d fdf3 	bl	8012588 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	24001bdc 	.word	0x24001bdc

080049ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049b0:	4802      	ldr	r0, [pc, #8]	; (80049bc <USART1_IRQHandler+0x10>)
 80049b2:	f00f ffcd 	bl	8014950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	24001e3c 	.word	0x24001e3c

080049c0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80049c4:	4802      	ldr	r0, [pc, #8]	; (80049d0 <DMA1_Stream7_IRQHandler+0x10>)
 80049c6:	f004 ff09 	bl	80097dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	24001a08 	.word	0x24001a08

080049d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <TIM6_DAC_IRQHandler+0x20>)
 80049da:	791b      	ldrb	r3, [r3, #4]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80049e2:	4804      	ldr	r0, [pc, #16]	; (80049f4 <TIM6_DAC_IRQHandler+0x20>)
 80049e4:	f003 f951 	bl	8007c8a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80049e8:	4803      	ldr	r0, [pc, #12]	; (80049f8 <TIM6_DAC_IRQHandler+0x24>)
 80049ea:	f00e fc6e 	bl	80132ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	24000314 	.word	0x24000314
 80049f8:	24001d54 	.word	0x24001d54

080049fc <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004a06:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <ITM_SendChar+0x48>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <ITM_SendChar+0x48>)
 8004a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a10:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <ITM_SendChar+0x4c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <ITM_SendChar+0x4c>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8004a1e:	bf00      	nop
 8004a20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f8      	beq.n	8004a20 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8004a2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000edfc 	.word	0xe000edfc
 8004a48:	e0000e00 	.word	0xe0000e00

08004a4c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e00a      	b.n	8004a74 <_read+0x28>
		*ptr++ = __io_getchar();
 8004a5e:	f3af 8000 	nop.w
 8004a62:	4601      	mov	r1, r0
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	60ba      	str	r2, [r7, #8]
 8004a6a:	b2ca      	uxtb	r2, r1
 8004a6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3301      	adds	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	dbf0      	blt.n	8004a5e <_read+0x12>
	}

	return len;
 8004a7c:	687b      	ldr	r3, [r7, #4]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e009      	b.n	8004aac <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	60ba      	str	r2, [r7, #8]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ffab 	bl	80049fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	dbf1      	blt.n	8004a98 <_write+0x12>
	}
	return len;
 8004ab4:	687b      	ldr	r3, [r7, #4]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <_close>:

int _close(int file) {
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <_isatty>:

int _isatty(int file) {
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004afe:	2301      	movs	r3, #1
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <_sbrk+0x64>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <_sbrk+0x64>)
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <_sbrk+0x68>)
 8004b48:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <_sbrk+0x64>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d207      	bcs.n	8004b68 <_sbrk+0x40>
		errno = ENOMEM;
 8004b58:	f015 fdd8 	bl	801a70c <__errno>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	220c      	movs	r2, #12
 8004b60:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b66:	e009      	b.n	8004b7c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <_sbrk+0x64>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <_sbrk+0x64>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <_sbrk+0x64>)
 8004b78:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	24080000 	.word	0x24080000
 8004b88:	00000400 	.word	0x00000400
 8004b8c:	24001da0 	.word	0x24001da0
 8004b90:	24006980 	.word	0x24006980

08004b94 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004b98:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <SystemInit+0xe4>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	4a36      	ldr	r2, [pc, #216]	; (8004c78 <SystemInit+0xe4>)
 8004ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004ba8:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <SystemInit+0xe8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d807      	bhi.n	8004bc4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004bb4:	4b31      	ldr	r3, [pc, #196]	; (8004c7c <SystemInit+0xe8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f023 030f 	bic.w	r3, r3, #15
 8004bbc:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <SystemInit+0xe8>)
 8004bbe:	f043 0307 	orr.w	r3, r3, #7
 8004bc2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004bc4:	4b2e      	ldr	r3, [pc, #184]	; (8004c80 <SystemInit+0xec>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2d      	ldr	r2, [pc, #180]	; (8004c80 <SystemInit+0xec>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004bd0:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <SystemInit+0xec>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <SystemInit+0xec>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4929      	ldr	r1, [pc, #164]	; (8004c80 <SystemInit+0xec>)
 8004bdc:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <SystemInit+0xf0>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004be2:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <SystemInit+0xe8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004bee:	4b23      	ldr	r3, [pc, #140]	; (8004c7c <SystemInit+0xe8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 030f 	bic.w	r3, r3, #15
 8004bf6:	4a21      	ldr	r2, [pc, #132]	; (8004c7c <SystemInit+0xe8>)
 8004bf8:	f043 0307 	orr.w	r3, r3, #7
 8004bfc:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004bfe:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <SystemInit+0xec>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004c04:	4b1e      	ldr	r3, [pc, #120]	; (8004c80 <SystemInit+0xec>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <SystemInit+0xec>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <SystemInit+0xec>)
 8004c12:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <SystemInit+0xf4>)
 8004c14:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <SystemInit+0xec>)
 8004c18:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <SystemInit+0xf8>)
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004c1c:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <SystemInit+0xec>)
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <SystemInit+0xfc>)
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <SystemInit+0xec>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004c28:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <SystemInit+0xec>)
 8004c2a:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <SystemInit+0xfc>)
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004c2e:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <SystemInit+0xec>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <SystemInit+0xec>)
 8004c36:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <SystemInit+0xfc>)
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <SystemInit+0xec>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004c40:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <SystemInit+0xec>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <SystemInit+0xec>)
 8004c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <SystemInit+0xec>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <SystemInit+0x100>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <SystemInit+0x104>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5e:	d202      	bcs.n	8004c66 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004c60:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <SystemInit+0x108>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c66:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <SystemInit+0x10c>)
 8004c68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000ed00 	.word	0xe000ed00
 8004c7c:	52002000 	.word	0x52002000
 8004c80:	58024400 	.word	0x58024400
 8004c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c88:	02020200 	.word	0x02020200
 8004c8c:	01ff0000 	.word	0x01ff0000
 8004c90:	01010280 	.word	0x01010280
 8004c94:	5c001000 	.word	0x5c001000
 8004c98:	ffff0000 	.word	0xffff0000
 8004c9c:	51008108 	.word	0x51008108
 8004ca0:	52004000 	.word	0x52004000

08004ca4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b09a      	sub	sp, #104	; 0x68
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	611a      	str	r2, [r3, #16]
 8004cd4:	615a      	str	r2, [r3, #20]
 8004cd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cd8:	1d3b      	adds	r3, r7, #4
 8004cda:	222c      	movs	r2, #44	; 0x2c
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f015 fd4c 	bl	801a77c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ce4:	4b44      	ldr	r3, [pc, #272]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004ce6:	4a45      	ldr	r2, [pc, #276]	; (8004dfc <MX_TIM1_Init+0x158>)
 8004ce8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004cea:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004cec:	224a      	movs	r2, #74	; 0x4a
 8004cee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf0:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004cf6:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004cf8:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004cfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d04:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d0a:	4b3b      	ldr	r3, [pc, #236]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d10:	4839      	ldr	r0, [pc, #228]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d12:	f00d ff6c 	bl	8012bee <HAL_TIM_Base_Init>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004d1c:	f7fe fef2 	bl	8003b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4832      	ldr	r0, [pc, #200]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d2e:	f00e fce7 	bl	8013700 <HAL_TIM_ConfigClockSource>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004d38:	f7fe fee4 	bl	8003b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d3c:	482e      	ldr	r0, [pc, #184]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d3e:	f00e fa63 	bl	8013208 <HAL_TIM_PWM_Init>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004d48:	f7fe fedc 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d50:	2300      	movs	r3, #0
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4826      	ldr	r0, [pc, #152]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d60:	f00f fa24 	bl	80141ac <HAL_TIMEx_MasterConfigSynchronization>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004d6a:	f7fe fecb 	bl	8003b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d6e:	2360      	movs	r3, #96	; 0x60
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004d72:	f240 13df 	movw	r3, #479	; 0x1df
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d84:	2300      	movs	r3, #0
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d90:	2200      	movs	r2, #0
 8004d92:	4619      	mov	r1, r3
 8004d94:	4818      	ldr	r0, [pc, #96]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004d96:	f00e fb9f 	bl	80134d8 <HAL_TIM_PWM_ConfigChannel>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004da0:	f7fe feb0 	bl	8003b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4807      	ldr	r0, [pc, #28]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004dda:	f00f fa75 	bl	80142c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004de4:	f7fe fe8e 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004de8:	4803      	ldr	r0, [pc, #12]	; (8004df8 <MX_TIM1_Init+0x154>)
 8004dea:	f000 f8dd 	bl	8004fa8 <HAL_TIM_MspPostInit>

}
 8004dee:	bf00      	nop
 8004df0:	3768      	adds	r7, #104	; 0x68
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	24001da4 	.word	0x24001da4
 8004dfc:	40010000 	.word	0x40010000

08004e00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08e      	sub	sp, #56	; 0x38
 8004e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	609a      	str	r2, [r3, #8]
 8004e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e14:	f107 031c 	add.w	r3, r7, #28
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e20:	463b      	mov	r3, r7
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	609a      	str	r2, [r3, #8]
 8004e2a:	60da      	str	r2, [r3, #12]
 8004e2c:	611a      	str	r2, [r3, #16]
 8004e2e:	615a      	str	r2, [r3, #20]
 8004e30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e32:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e3c:	224a      	movs	r2, #74	; 0x4a
 8004e3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e40:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e48:	f640 4234 	movw	r2, #3124	; 0xc34
 8004e4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e54:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e5a:	4823      	ldr	r0, [pc, #140]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e5c:	f00d fec7 	bl	8012bee <HAL_TIM_Base_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004e66:	f7fe fe4d 	bl	8003b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e74:	4619      	mov	r1, r3
 8004e76:	481c      	ldr	r0, [pc, #112]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e78:	f00e fc42 	bl	8013700 <HAL_TIM_ConfigClockSource>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004e82:	f7fe fe3f 	bl	8003b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e86:	4818      	ldr	r0, [pc, #96]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004e88:	f00e f9be 	bl	8013208 <HAL_TIM_PWM_Init>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004e92:	f7fe fe37 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e96:	2320      	movs	r3, #32
 8004e98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e9e:	f107 031c 	add.w	r3, r7, #28
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004ea6:	f00f f981 	bl	80141ac <HAL_TIMEx_MasterConfigSynchronization>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004eb0:	f7fe fe28 	bl	8003b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eb4:	2360      	movs	r3, #96	; 0x60
 8004eb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	220c      	movs	r2, #12
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004ecc:	f00e fb04 	bl	80134d8 <HAL_TIM_PWM_ConfigChannel>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004ed6:	f7fe fe15 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004eda:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <MX_TIM2_Init+0xe8>)
 8004edc:	f000 f864 	bl	8004fa8 <HAL_TIM_MspPostInit>

}
 8004ee0:	bf00      	nop
 8004ee2:	3738      	adds	r7, #56	; 0x38
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	24001df0 	.word	0x24001df0

08004eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <HAL_TIM_Base_MspInit+0xb4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d12f      	bne.n	8004f5e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004efe:	4b29      	ldr	r3, [pc, #164]	; (8004fa4 <HAL_TIM_Base_MspInit+0xb8>)
 8004f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f04:	4a27      	ldr	r2, [pc, #156]	; (8004fa4 <HAL_TIM_Base_MspInit+0xb8>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f0e:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_TIM_Base_MspInit+0xb8>)
 8004f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2105      	movs	r1, #5
 8004f20:	2018      	movs	r0, #24
 8004f22:	f002 fd03 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004f26:	2018      	movs	r0, #24
 8004f28:	f002 fd1a 	bl	8007960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2105      	movs	r1, #5
 8004f30:	2019      	movs	r0, #25
 8004f32:	f002 fcfb 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004f36:	2019      	movs	r0, #25
 8004f38:	f002 fd12 	bl	8007960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2105      	movs	r1, #5
 8004f40:	201a      	movs	r0, #26
 8004f42:	f002 fcf3 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004f46:	201a      	movs	r0, #26
 8004f48:	f002 fd0a 	bl	8007960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2105      	movs	r1, #5
 8004f50:	201b      	movs	r0, #27
 8004f52:	f002 fceb 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004f56:	201b      	movs	r0, #27
 8004f58:	f002 fd02 	bl	8007960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004f5c:	e01b      	b.n	8004f96 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d116      	bne.n	8004f96 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_TIM_Base_MspInit+0xb8>)
 8004f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f6e:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <HAL_TIM_Base_MspInit+0xb8>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <HAL_TIM_Base_MspInit+0xb8>)
 8004f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004f86:	2200      	movs	r2, #0
 8004f88:	2105      	movs	r1, #5
 8004f8a:	201c      	movs	r0, #28
 8004f8c:	f002 fcce 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f90:	201c      	movs	r0, #28
 8004f92:	f002 fce5 	bl	8007960 <HAL_NVIC_EnableIRQ>
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	58024400 	.word	0x58024400

08004fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a26      	ldr	r2, [pc, #152]	; (8005060 <HAL_TIM_MspPostInit+0xb8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d120      	bne.n	800500c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fca:	4b26      	ldr	r3, [pc, #152]	; (8005064 <HAL_TIM_MspPostInit+0xbc>)
 8004fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fd0:	4a24      	ldr	r2, [pc, #144]	; (8005064 <HAL_TIM_MspPostInit+0xbc>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fda:	4b22      	ldr	r3, [pc, #136]	; (8005064 <HAL_TIM_MspPostInit+0xbc>)
 8004fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	4619      	mov	r1, r3
 8005004:	4818      	ldr	r0, [pc, #96]	; (8005068 <HAL_TIM_MspPostInit+0xc0>)
 8005006:	f006 f9ef 	bl	800b3e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800500a:	e024      	b.n	8005056 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d11f      	bne.n	8005056 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <HAL_TIM_MspPostInit+0xbc>)
 8005018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800501c:	4a11      	ldr	r2, [pc, #68]	; (8005064 <HAL_TIM_MspPostInit+0xbc>)
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_TIM_MspPostInit+0xbc>)
 8005028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503a:	2302      	movs	r3, #2
 800503c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005042:	2300      	movs	r3, #0
 8005044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005046:	2301      	movs	r3, #1
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504a:	f107 0314 	add.w	r3, r7, #20
 800504e:	4619      	mov	r1, r3
 8005050:	4806      	ldr	r0, [pc, #24]	; (800506c <HAL_TIM_MspPostInit+0xc4>)
 8005052:	f006 f9c9 	bl	800b3e8 <HAL_GPIO_Init>
}
 8005056:	bf00      	nop
 8005058:	3728      	adds	r7, #40	; 0x28
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	58024400 	.word	0x58024400
 8005068:	58020000 	.word	0x58020000
 800506c:	58020400 	.word	0x58020400

08005070 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 800507c:	4b21      	ldr	r3, [pc, #132]	; (8005104 <get_uptime+0x94>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8005082:	4b21      	ldr	r3, [pc, #132]	; (8005108 <get_uptime+0x98>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8005088:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <get_uptime+0x94>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	429a      	cmp	r2, r3
 8005090:	d005      	beq.n	800509e <get_uptime+0x2e>
		ms = uptime_millis;
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <get_uptime+0x94>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <get_uptime+0x98>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050a4:	fb03 f202 	mul.w	r2, r3, r2
 80050a8:	4b17      	ldr	r3, [pc, #92]	; (8005108 <get_uptime+0x98>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	3301      	adds	r3, #1
 80050ae:	4917      	ldr	r1, [pc, #92]	; (800510c <get_uptime+0x9c>)
 80050b0:	fba1 1303 	umull	r1, r3, r1, r3
 80050b4:	099b      	lsrs	r3, r3, #6
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <get_uptime+0x5a>
		uptime = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	0c1a      	lsrs	r2, r3, #16
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3301      	adds	r3, #1
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	0a1a      	lsrs	r2, r3, #8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3302      	adds	r3, #2
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3303      	adds	r3, #3
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	24001ae0 	.word	0x24001ae0
 8005108:	e000e010 	.word	0xe000e010
 800510c:	10624dd3 	.word	0x10624dd3

08005110 <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 8005110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	b09d      	sub	sp, #116	; 0x74
 8005116:	af00      	add	r7, sp, #0
 8005118:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800511a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800511e:	2200      	movs	r2, #0
 8005120:	4619      	mov	r1, r3
 8005122:	4893      	ldr	r0, [pc, #588]	; (8005370 <get_unix_time+0x260>)
 8005124:	f00c fdc2 	bl	8011cac <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8005128:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800512c:	2200      	movs	r2, #0
 800512e:	4619      	mov	r1, r3
 8005130:	488f      	ldr	r0, [pc, #572]	; (8005370 <get_unix_time+0x260>)
 8005132:	f00c fe9f 	bl	8011e74 <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 8005136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005138:	f242 7210 	movw	r2, #10000	; 0x2710
 800513c:	1ad2      	subs	r2, r2, r3
 800513e:	4b8d      	ldr	r3, [pc, #564]	; (8005374 <get_unix_time+0x264>)
 8005140:	fba3 2302 	umull	r2, r3, r3, r2
 8005144:	08db      	lsrs	r3, r3, #3
 8005146:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60


	y = current_date.Year + 2000;
 8005156:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800515a:	b29b      	uxth	r3, r3
 800515c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005160:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 8005164:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005168:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 800516c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005174:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005178:	2b02      	cmp	r3, #2
 800517a:	d809      	bhi.n	8005190 <get_unix_time+0x80>
	{
		m += 12;
 800517c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005180:	330c      	adds	r3, #12
 8005182:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 8005186:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800518a:	3b01      	subs	r3, #1
 800518c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8005190:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005194:	f240 136d 	movw	r3, #365	; 0x16d
 8005198:	fb03 f202 	mul.w	r2, r3, r2
 800519c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	18d1      	adds	r1, r2, r3
 80051a6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80051aa:	4b73      	ldr	r3, [pc, #460]	; (8005378 <get_unix_time+0x268>)
 80051ac:	fba3 2302 	umull	r2, r3, r3, r2
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	1ac9      	subs	r1, r1, r3
 80051b6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80051ba:	4b6f      	ldr	r3, [pc, #444]	; (8005378 <get_unix_time+0x268>)
 80051bc:	fba3 2302 	umull	r2, r3, r3, r2
 80051c0:	09db      	lsrs	r3, r3, #7
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	440b      	add	r3, r1
 80051c6:	17da      	asrs	r2, r3, #31
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	627a      	str	r2, [r7, #36]	; 0x24
 80051cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 80051d4:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80051d8:	4613      	mov	r3, r2
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4618      	mov	r0, r3
 80051e2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	1899      	adds	r1, r3, r2
 80051ee:	4b63      	ldr	r3, [pc, #396]	; (800537c <get_unix_time+0x26c>)
 80051f0:	fb83 2301 	smull	r2, r3, r3, r1
 80051f4:	105a      	asrs	r2, r3, #1
 80051f6:	17cb      	asrs	r3, r1, #31
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	18c2      	adds	r2, r0, r3
 80051fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005200:	4413      	add	r3, r2
 8005202:	17da      	asrs	r2, r3, #31
 8005204:	633b      	str	r3, [r7, #48]	; 0x30
 8005206:	637a      	str	r2, [r7, #52]	; 0x34
 8005208:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800520c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800520e:	1851      	adds	r1, r2, r1
 8005210:	61b9      	str	r1, [r7, #24]
 8005212:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005214:	eb43 0101 	adc.w	r1, r3, r1
 8005218:	61f9      	str	r1, [r7, #28]
 800521a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 8005222:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005226:	4956      	ldr	r1, [pc, #344]	; (8005380 <get_unix_time+0x270>)
 8005228:	1851      	adds	r1, r2, r1
 800522a:	6139      	str	r1, [r7, #16]
 800522c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005236:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 800523a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	1896      	adds	r6, r2, r2
 8005244:	60be      	str	r6, [r7, #8]
 8005246:	415b      	adcs	r3, r3
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800524e:	eb12 0800 	adds.w	r8, r2, r0
 8005252:	eb43 0901 	adc.w	r9, r3, r1
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005262:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005266:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800526a:	ebb2 0408 	subs.w	r4, r2, r8
 800526e:	eb63 0509 	sbc.w	r5, r3, r9
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	012b      	lsls	r3, r5, #4
 800527c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005280:	0122      	lsls	r2, r4, #4
 8005282:	ebb2 0a04 	subs.w	sl, r2, r4
 8005286:	eb63 0b05 	sbc.w	fp, r3, r5
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8005296:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 800529a:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 800529e:	4692      	mov	sl, r2
 80052a0:	469b      	mov	fp, r3
 80052a2:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 80052a6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80052aa:	461a      	mov	r2, r3
 80052ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80052b0:	fb03 f202 	mul.w	r2, r3, r2
 80052b4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80052b8:	4619      	mov	r1, r3
 80052ba:	460b      	mov	r3, r1
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a5b      	subs	r3, r3, r1
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 80052c8:	4413      	add	r3, r2
 80052ca:	2200      	movs	r2, #0
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052d4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80052d8:	4621      	mov	r1, r4
 80052da:	1851      	adds	r1, r2, r1
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	4629      	mov	r1, r5
 80052e0:	eb43 0101 	adc.w	r1, r3, r1
 80052e4:	6079      	str	r1, [r7, #4]
 80052e6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052ea:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 80052ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	0e02      	lsrs	r2, r0, #24
 80052fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005300:	0e0b      	lsrs	r3, r1, #24
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 8005308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	0c02      	lsrs	r2, r0, #16
 8005316:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800531a:	0c0b      	lsrs	r3, r1, #16
 800531c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800531e:	3101      	adds	r1, #1
 8005320:	b2d3      	uxtb	r3, r2
 8005322:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 8005324:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	0a02      	lsrs	r2, r0, #8
 8005332:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005336:	0a0b      	lsrs	r3, r1, #8
 8005338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800533a:	3102      	adds	r1, #2
 800533c:	b2d3      	uxtb	r3, r2
 800533e:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 8005340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005342:	3303      	adds	r3, #3
 8005344:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005348:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 800534a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	b29a      	uxth	r2, r3
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	3304      	adds	r3, #4
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	3305      	adds	r3, #5
 800535e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
}
 8005366:	bf00      	nop
 8005368:	3774      	adds	r7, #116	; 0x74
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005370:	24001af4 	.word	0x24001af4
 8005374:	cccccccd 	.word	0xcccccccd
 8005378:	51eb851f 	.word	0x51eb851f
 800537c:	66666667 	.word	0x66666667
 8005380:	fff50537 	.word	0xfff50537

08005384 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b08c      	sub	sp, #48	; 0x30
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	789b      	ldrb	r3, [r3, #2]
 8005398:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	78db      	ldrb	r3, [r3, #3]
 80053a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	791b      	ldrb	r3, [r3, #4]
 80053a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	795b      	ldrb	r3, [r3, #5]
 80053b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	799b      	ldrb	r3, [r3, #6]
 80053b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3307      	adds	r3, #7
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	b21a      	sxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3308      	adds	r3, #8
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80053d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80053dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80053e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80053ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80053f0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80053f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053f6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80053f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80053fc:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80053fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005400:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005402:	f107 0320 	add.w	r3, r7, #32
 8005406:	2200      	movs	r2, #0
 8005408:	4619      	mov	r1, r3
 800540a:	480b      	ldr	r0, [pc, #44]	; (8005438 <calibrateRTC+0xb4>)
 800540c:	f00c fcaa 	bl	8011d64 <HAL_RTC_SetDate>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8005416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <calibrateRTC+0x9e>
		Error_Handler();
 800541e:	f7fe fb71 	bl	8003b04 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	2200      	movs	r2, #0
 8005428:	4619      	mov	r1, r3
 800542a:	4803      	ldr	r0, [pc, #12]	; (8005438 <calibrateRTC+0xb4>)
 800542c:	f000 f806 	bl	800543c <RTC_SetTime>
}
 8005430:	bf00      	nop
 8005432:	3730      	adds	r7, #48	; 0x30
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	24001af4 	.word	0x24001af4

0800543c <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <RTC_SetTime+0x1a>
 8005452:	2302      	movs	r3, #2
 8005454:	e051      	b.n	80054fa <RTC_SetTime+0xbe>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	22ca      	movs	r2, #202	; 0xca
 800546c:	625a      	str	r2, [r3, #36]	; 0x24
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2253      	movs	r2, #83	; 0x53
 8005474:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f00c fd6e 	bl	8011f58 <RTC_EnterInitMode>
 800547c:	4603      	mov	r3, r0
 800547e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d129      	bne.n	80054da <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2200      	movs	r2, #0
 800548a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f00c fdd3 	bl	801203c <RTC_ByteToBcd2>
 8005496:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005498:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	4618      	mov	r0, r3
 80054a0:	f00c fdcc 	bl	801203c <RTC_ByteToBcd2>
 80054a4:	4603      	mov	r3, r0
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	789b      	ldrb	r3, [r3, #2]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f00c fdc4 	bl	801203c <RTC_ByteToBcd2>
 80054b4:	4603      	mov	r3, r0
 80054b6:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	6939      	ldr	r1, [r7, #16]
 80054ca:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <RTC_SetTime+0xc8>)
 80054cc:	400b      	ands	r3, r1
 80054ce:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f00c fd75 	bl	8011fc0 <RTC_ExitInitMode>
 80054d6:	4603      	mov	r3, r0
 80054d8:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	22ff      	movs	r2, #255	; 0xff
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]

}
 80054fa:	4618      	mov	r0, r3
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	bf00      	nop
 8005504:	007f7f7f 	.word	0x007f7f7f

08005508 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800550c:	4b30      	ldr	r3, [pc, #192]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 800550e:	4a31      	ldr	r2, [pc, #196]	; (80055d4 <MX_USART1_UART_Init+0xcc>)
 8005510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8005512:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005514:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800551a:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 800551c:	2200      	movs	r2, #0
 800551e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005520:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005522:	2200      	movs	r2, #0
 8005524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005526:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005528:	2200      	movs	r2, #0
 800552a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800552c:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 800552e:	220c      	movs	r2, #12
 8005530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005532:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 800553a:	2200      	movs	r2, #0
 800553c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005540:	2200      	movs	r2, #0
 8005542:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005546:	2200      	movs	r2, #0
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800554a:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 800554c:	2200      	movs	r2, #0
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005550:	481f      	ldr	r0, [pc, #124]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005552:	f00e ff55 	bl	8014400 <HAL_UART_Init>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800555c:	f7fe fad2 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005560:	2100      	movs	r1, #0
 8005562:	481b      	ldr	r0, [pc, #108]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005564:	f011 fc9b 	bl	8016e9e <HAL_UARTEx_SetTxFifoThreshold>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800556e:	f7fe fac9 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005572:	2100      	movs	r1, #0
 8005574:	4816      	ldr	r0, [pc, #88]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005576:	f011 fcd0 	bl	8016f1a <HAL_UARTEx_SetRxFifoThreshold>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005580:	f7fe fac0 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005584:	4812      	ldr	r0, [pc, #72]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 8005586:	f011 fc51 	bl	8016e2c <HAL_UARTEx_DisableFifoMode>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005590:	f7fe fab8 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005594:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005598:	480d      	ldr	r0, [pc, #52]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 800559a:	f011 fcbe 	bl	8016f1a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800559e:	480c      	ldr	r0, [pc, #48]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 80055a0:	f011 fc09 	bl	8016db6 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80055a4:	480a      	ldr	r0, [pc, #40]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 80055a6:	f011 fbd3 	bl	8016d50 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 80055aa:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055b8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <MX_USART1_UART_Init+0xc8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80055c8:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	24001e3c 	.word	0x24001e3c
 80055d4:	40011000 	.word	0x40011000

080055d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b0ba      	sub	sp, #232	; 0xe8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055f0:	f107 0310 	add.w	r3, r7, #16
 80055f4:	22c0      	movs	r2, #192	; 0xc0
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f015 f8bf 	bl	801a77c <memset>
  if(uartHandle->Instance==USART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a41      	ldr	r2, [pc, #260]	; (8005708 <HAL_UART_MspInit+0x130>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d17b      	bne.n	8005700 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005608:	f04f 0201 	mov.w	r2, #1
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005614:	2318      	movs	r3, #24
 8005616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800561a:	f107 0310 	add.w	r3, r7, #16
 800561e:	4618      	mov	r0, r3
 8005620:	f009 fd26 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800562a:	f7fe fa6b 	bl	8003b04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <HAL_UART_MspInit+0x134>)
 8005630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005634:	4a35      	ldr	r2, [pc, #212]	; (800570c <HAL_UART_MspInit+0x134>)
 8005636:	f043 0310 	orr.w	r3, r3, #16
 800563a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800563e:	4b33      	ldr	r3, [pc, #204]	; (800570c <HAL_UART_MspInit+0x134>)
 8005640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800564c:	4b2f      	ldr	r3, [pc, #188]	; (800570c <HAL_UART_MspInit+0x134>)
 800564e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005652:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_UART_MspInit+0x134>)
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800565c:	4b2b      	ldr	r3, [pc, #172]	; (800570c <HAL_UART_MspInit+0x134>)
 800565e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800566a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800566e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005672:	2302      	movs	r3, #2
 8005674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005678:	2300      	movs	r3, #0
 800567a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005684:	2307      	movs	r3, #7
 8005686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800568a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800568e:	4619      	mov	r1, r3
 8005690:	481f      	ldr	r0, [pc, #124]	; (8005710 <HAL_UART_MspInit+0x138>)
 8005692:	f005 fea9 	bl	800b3e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005696:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <HAL_UART_MspInit+0x13c>)
 8005698:	4a1f      	ldr	r2, [pc, #124]	; (8005718 <HAL_UART_MspInit+0x140>)
 800569a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800569c:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <HAL_UART_MspInit+0x13c>)
 800569e:	222a      	movs	r2, #42	; 0x2a
 80056a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056a2:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056a4:	2240      	movs	r2, #64	; 0x40
 80056a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056a8:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056ae:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056b6:	4b17      	ldr	r3, [pc, #92]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056bc:	4b15      	ldr	r3, [pc, #84]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056ce:	4b11      	ldr	r3, [pc, #68]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80056d4:	480f      	ldr	r0, [pc, #60]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056d6:	f002 fd57 	bl	8008188 <HAL_DMA_Init>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80056e0:	f7fe fa10 	bl	8003b04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056e8:	67da      	str	r2, [r3, #124]	; 0x7c
 80056ea:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <HAL_UART_MspInit+0x13c>)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80056f0:	2200      	movs	r2, #0
 80056f2:	2105      	movs	r1, #5
 80056f4:	2025      	movs	r0, #37	; 0x25
 80056f6:	f002 f919 	bl	800792c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056fa:	2025      	movs	r0, #37	; 0x25
 80056fc:	f002 f930 	bl	8007960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005700:	bf00      	nop
 8005702:	37e8      	adds	r7, #232	; 0xe8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40011000 	.word	0x40011000
 800570c:	58024400 	.word	0x58024400
 8005710:	58020000 	.word	0x58020000
 8005714:	24001ed0 	.word	0x24001ed0
 8005718:	40020040 	.word	0x40020040

0800571c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005726:	4bc2      	ldr	r3, [pc, #776]	; (8005a30 <voltage_monitor_init+0x314>)
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 800572c:	4bc0      	ldr	r3, [pc, #768]	; (8005a30 <voltage_monitor_init+0x314>)
 800572e:	2200      	movs	r2, #0
 8005730:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8005732:	4bbf      	ldr	r3, [pc, #764]	; (8005a30 <voltage_monitor_init+0x314>)
 8005734:	2201      	movs	r2, #1
 8005736:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005738:	4bbd      	ldr	r3, [pc, #756]	; (8005a30 <voltage_monitor_init+0x314>)
 800573a:	2200      	movs	r2, #0
 800573c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 800573e:	4bbc      	ldr	r3, [pc, #752]	; (8005a30 <voltage_monitor_init+0x314>)
 8005740:	f242 7210 	movw	r2, #10000	; 0x2710
 8005744:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8005746:	4bba      	ldr	r3, [pc, #744]	; (8005a30 <voltage_monitor_init+0x314>)
 8005748:	2200      	movs	r2, #0
 800574a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 800574c:	4bb8      	ldr	r3, [pc, #736]	; (8005a30 <voltage_monitor_init+0x314>)
 800574e:	2201      	movs	r2, #1
 8005750:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8005752:	4bb7      	ldr	r3, [pc, #732]	; (8005a30 <voltage_monitor_init+0x314>)
 8005754:	2200      	movs	r2, #0
 8005756:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005758:	4bb5      	ldr	r3, [pc, #724]	; (8005a30 <voltage_monitor_init+0x314>)
 800575a:	2201      	movs	r2, #1
 800575c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800575e:	4bb4      	ldr	r3, [pc, #720]	; (8005a30 <voltage_monitor_init+0x314>)
 8005760:	2200      	movs	r2, #0
 8005762:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005764:	4bb2      	ldr	r3, [pc, #712]	; (8005a30 <voltage_monitor_init+0x314>)
 8005766:	f242 7210 	movw	r2, #10000	; 0x2710
 800576a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 800576c:	4bb0      	ldr	r3, [pc, #704]	; (8005a30 <voltage_monitor_init+0x314>)
 800576e:	2200      	movs	r2, #0
 8005770:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8005772:	4baf      	ldr	r3, [pc, #700]	; (8005a30 <voltage_monitor_init+0x314>)
 8005774:	2202      	movs	r2, #2
 8005776:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005778:	4bad      	ldr	r3, [pc, #692]	; (8005a30 <voltage_monitor_init+0x314>)
 800577a:	2200      	movs	r2, #0
 800577c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800577e:	4bac      	ldr	r3, [pc, #688]	; (8005a30 <voltage_monitor_init+0x314>)
 8005780:	2201      	movs	r2, #1
 8005782:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8005784:	4baa      	ldr	r3, [pc, #680]	; (8005a30 <voltage_monitor_init+0x314>)
 8005786:	2200      	movs	r2, #0
 8005788:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 800578a:	4ba9      	ldr	r3, [pc, #676]	; (8005a30 <voltage_monitor_init+0x314>)
 800578c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005790:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8005792:	4ba7      	ldr	r3, [pc, #668]	; (8005a30 <voltage_monitor_init+0x314>)
 8005794:	2200      	movs	r2, #0
 8005796:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005798:	4ba5      	ldr	r3, [pc, #660]	; (8005a30 <voltage_monitor_init+0x314>)
 800579a:	2203      	movs	r2, #3
 800579c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800579e:	4ba4      	ldr	r3, [pc, #656]	; (8005a30 <voltage_monitor_init+0x314>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80057a4:	4ba2      	ldr	r3, [pc, #648]	; (8005a30 <voltage_monitor_init+0x314>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80057ac:	4ba0      	ldr	r3, [pc, #640]	; (8005a30 <voltage_monitor_init+0x314>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057b2:	4b9f      	ldr	r3, [pc, #636]	; (8005a30 <voltage_monitor_init+0x314>)
 80057b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80057b8:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80057ba:	4b9d      	ldr	r3, [pc, #628]	; (8005a30 <voltage_monitor_init+0x314>)
 80057bc:	2200      	movs	r2, #0
 80057be:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80057c0:	4b9b      	ldr	r3, [pc, #620]	; (8005a30 <voltage_monitor_init+0x314>)
 80057c2:	2204      	movs	r2, #4
 80057c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80057c8:	4b99      	ldr	r3, [pc, #612]	; (8005a30 <voltage_monitor_init+0x314>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 80057d0:	4b97      	ldr	r3, [pc, #604]	; (8005a30 <voltage_monitor_init+0x314>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 80057d8:	4b95      	ldr	r3, [pc, #596]	; (8005a30 <voltage_monitor_init+0x314>)
 80057da:	2200      	movs	r2, #0
 80057dc:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057de:	4b94      	ldr	r3, [pc, #592]	; (8005a30 <voltage_monitor_init+0x314>)
 80057e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80057e4:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 80057e6:	4b92      	ldr	r3, [pc, #584]	; (8005a30 <voltage_monitor_init+0x314>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 80057ec:	4b90      	ldr	r3, [pc, #576]	; (8005a30 <voltage_monitor_init+0x314>)
 80057ee:	2205      	movs	r2, #5
 80057f0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80057f4:	4b8e      	ldr	r3, [pc, #568]	; (8005a30 <voltage_monitor_init+0x314>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80057fc:	4b8c      	ldr	r3, [pc, #560]	; (8005a30 <voltage_monitor_init+0x314>)
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005804:	4b8a      	ldr	r3, [pc, #552]	; (8005a30 <voltage_monitor_init+0x314>)
 8005806:	2200      	movs	r2, #0
 8005808:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800580a:	4b89      	ldr	r3, [pc, #548]	; (8005a30 <voltage_monitor_init+0x314>)
 800580c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005810:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8005812:	4b87      	ldr	r3, [pc, #540]	; (8005a30 <voltage_monitor_init+0x314>)
 8005814:	2200      	movs	r2, #0
 8005816:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005818:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <voltage_monitor_init+0x314>)
 800581a:	2206      	movs	r2, #6
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8005820:	4b83      	ldr	r3, [pc, #524]	; (8005a30 <voltage_monitor_init+0x314>)
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 0;
 8005828:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <voltage_monitor_init+0x314>)
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8005830:	4b7f      	ldr	r3, [pc, #508]	; (8005a30 <voltage_monitor_init+0x314>)
 8005832:	2200      	movs	r2, #0
 8005834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005838:	4b7d      	ldr	r3, [pc, #500]	; (8005a30 <voltage_monitor_init+0x314>)
 800583a:	f242 7210 	movw	r2, #10000	; 0x2710
 800583e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8005842:	4b7b      	ldr	r3, [pc, #492]	; (8005a30 <voltage_monitor_init+0x314>)
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800584a:	4b79      	ldr	r3, [pc, #484]	; (8005a30 <voltage_monitor_init+0x314>)
 800584c:	2207      	movs	r2, #7
 800584e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8005852:	4b77      	ldr	r3, [pc, #476]	; (8005a30 <voltage_monitor_init+0x314>)
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 0;
 800585a:	4b75      	ldr	r3, [pc, #468]	; (8005a30 <voltage_monitor_init+0x314>)
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8005862:	4b73      	ldr	r3, [pc, #460]	; (8005a30 <voltage_monitor_init+0x314>)
 8005864:	2200      	movs	r2, #0
 8005866:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800586a:	4b71      	ldr	r3, [pc, #452]	; (8005a30 <voltage_monitor_init+0x314>)
 800586c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005870:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8005874:	4b6e      	ldr	r3, [pc, #440]	; (8005a30 <voltage_monitor_init+0x314>)
 8005876:	2200      	movs	r2, #0
 8005878:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 800587c:	4b6c      	ldr	r3, [pc, #432]	; (8005a30 <voltage_monitor_init+0x314>)
 800587e:	2208      	movs	r2, #8
 8005880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8005884:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <voltage_monitor_init+0x314>)
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 800588c:	4b68      	ldr	r3, [pc, #416]	; (8005a30 <voltage_monitor_init+0x314>)
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005894:	4b66      	ldr	r3, [pc, #408]	; (8005a30 <voltage_monitor_init+0x314>)
 8005896:	2200      	movs	r2, #0
 8005898:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 800589c:	4b64      	ldr	r3, [pc, #400]	; (8005a30 <voltage_monitor_init+0x314>)
 800589e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80058a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80058a6:	4b62      	ldr	r3, [pc, #392]	; (8005a30 <voltage_monitor_init+0x314>)
 80058a8:	f640 3283 	movw	r2, #2947	; 0xb83
 80058ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80058b0:	4b5f      	ldr	r3, [pc, #380]	; (8005a30 <voltage_monitor_init+0x314>)
 80058b2:	2209      	movs	r2, #9
 80058b4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80058b8:	4b5d      	ldr	r3, [pc, #372]	; (8005a30 <voltage_monitor_init+0x314>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80058c0:	4b5b      	ldr	r3, [pc, #364]	; (8005a30 <voltage_monitor_init+0x314>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 80058c8:	4b59      	ldr	r3, [pc, #356]	; (8005a30 <voltage_monitor_init+0x314>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 80058d0:	4b57      	ldr	r3, [pc, #348]	; (8005a30 <voltage_monitor_init+0x314>)
 80058d2:	f640 7245 	movw	r2, #3909	; 0xf45
 80058d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 80058da:	4b55      	ldr	r3, [pc, #340]	; (8005a30 <voltage_monitor_init+0x314>)
 80058dc:	2200      	movs	r2, #0
 80058de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 80058e2:	4b53      	ldr	r3, [pc, #332]	; (8005a30 <voltage_monitor_init+0x314>)
 80058e4:	220a      	movs	r2, #10
 80058e6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 80058ea:	4b51      	ldr	r3, [pc, #324]	; (8005a30 <voltage_monitor_init+0x314>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 80058f2:	4b4f      	ldr	r3, [pc, #316]	; (8005a30 <voltage_monitor_init+0x314>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 80058fa:	4b4d      	ldr	r3, [pc, #308]	; (8005a30 <voltage_monitor_init+0x314>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8005902:	4b4b      	ldr	r3, [pc, #300]	; (8005a30 <voltage_monitor_init+0x314>)
 8005904:	f640 7245 	movw	r2, #3909	; 0xf45
 8005908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 800590c:	4b48      	ldr	r3, [pc, #288]	; (8005a30 <voltage_monitor_init+0x314>)
 800590e:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005912:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005916:	4b46      	ldr	r3, [pc, #280]	; (8005a30 <voltage_monitor_init+0x314>)
 8005918:	220b      	movs	r2, #11
 800591a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800591e:	4b44      	ldr	r3, [pc, #272]	; (8005a30 <voltage_monitor_init+0x314>)
 8005920:	2200      	movs	r2, #0
 8005922:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005926:	4b42      	ldr	r3, [pc, #264]	; (8005a30 <voltage_monitor_init+0x314>)
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800592e:	4b40      	ldr	r3, [pc, #256]	; (8005a30 <voltage_monitor_init+0x314>)
 8005930:	2200      	movs	r2, #0
 8005932:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8005936:	4b3e      	ldr	r3, [pc, #248]	; (8005a30 <voltage_monitor_init+0x314>)
 8005938:	f640 72fb 	movw	r2, #4091	; 0xffb
 800593c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8005940:	4b3b      	ldr	r3, [pc, #236]	; (8005a30 <voltage_monitor_init+0x314>)
 8005942:	f640 6276 	movw	r2, #3702	; 0xe76
 8005946:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800594a:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <voltage_monitor_init+0x314>)
 800594c:	220c      	movs	r2, #12
 800594e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8005952:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <voltage_monitor_init+0x314>)
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800595a:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <voltage_monitor_init+0x314>)
 800595c:	2200      	movs	r2, #0
 800595e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8005962:	4b33      	ldr	r3, [pc, #204]	; (8005a30 <voltage_monitor_init+0x314>)
 8005964:	2200      	movs	r2, #0
 8005966:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800596a:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <voltage_monitor_init+0x314>)
 800596c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005970:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005974:	4b2e      	ldr	r3, [pc, #184]	; (8005a30 <voltage_monitor_init+0x314>)
 8005976:	2200      	movs	r2, #0
 8005978:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 800597c:	4b2c      	ldr	r3, [pc, #176]	; (8005a30 <voltage_monitor_init+0x314>)
 800597e:	220d      	movs	r2, #13
 8005980:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8005984:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <voltage_monitor_init+0x314>)
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 800598c:	4b28      	ldr	r3, [pc, #160]	; (8005a30 <voltage_monitor_init+0x314>)
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005994:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <voltage_monitor_init+0x314>)
 8005996:	2200      	movs	r2, #0
 8005998:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 800599c:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <voltage_monitor_init+0x314>)
 800599e:	f640 7238 	movw	r2, #3896	; 0xf38
 80059a2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80059a6:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <voltage_monitor_init+0x314>)
 80059a8:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80059ac:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80059b0:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <voltage_monitor_init+0x314>)
 80059b2:	220e      	movs	r2, #14
 80059b4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <voltage_monitor_init+0x314>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <voltage_monitor_init+0x314>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 80059c8:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <voltage_monitor_init+0x314>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 80059d0:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <voltage_monitor_init+0x314>)
 80059d2:	f640 7245 	movw	r2, #3909	; 0xf45
 80059d6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <voltage_monitor_init+0x314>)
 80059dc:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80059e0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 80059e4:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <voltage_monitor_init+0x314>)
 80059e6:	220f      	movs	r2, #15
 80059e8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <voltage_monitor_init+0x314>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80059f4:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <voltage_monitor_init+0x314>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80059fc:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <voltage_monitor_init+0x314>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005a04:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <voltage_monitor_init+0x314>)
 8005a06:	f241 0264 	movw	r2, #4196	; 0x1064
 8005a0a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8005a0e:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <voltage_monitor_init+0x314>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <voltage_monitor_init+0x314>)
 8005a18:	2210      	movs	r2, #16
 8005a1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8005a1e:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <voltage_monitor_init+0x314>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005a26:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <voltage_monitor_init+0x314>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8005a2e:	e001      	b.n	8005a34 <voltage_monitor_init+0x318>
 8005a30:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8005a3c:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a3e:	f640 5208 	movw	r2, #3336	; 0xd08
 8005a42:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a48:	f640 32ca 	movw	r2, #3018	; 0xbca
 8005a4c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005a50:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a52:	2211      	movs	r2, #17
 8005a54:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005a58:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005a60:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005a70:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a72:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a76:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <voltage_monitor_init+0x378>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8005a82:	2301      	movs	r3, #1
 8005a84:	71fb      	strb	r3, [r7, #7]

	return status;
 8005a86:	79fb      	ldrb	r3, [r7, #7]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	24001f48 	.word	0x24001f48

08005a98 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	71fb      	strb	r3, [r7, #7]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005aac:	79fa      	ldrb	r2, [r7, #7]
 8005aae:	4909      	ldr	r1, [pc, #36]	; (8005ad4 <set_rail_monitor_enable+0x3c>)
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	440b      	add	r3, r1
 8005aba:	3302      	adds	r3, #2
 8005abc:	79ba      	ldrb	r2, [r7, #6]
 8005abe:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]

	return status;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	24001f48 	.word	0x24001f48

08005ad8 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fb4a 	bl	8004180 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005aec:	f107 0310 	add.w	r3, r7, #16
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fb75 	bl	80041e0 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fbc2 	bl	8004284 <sample_hk_adc3>
 8005b00:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005b02:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b04:	809a      	strh	r2, [r3, #4]
 8005b06:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b0a:	81da      	strh	r2, [r3, #14]
 8005b0c:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005b0e:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b10:	831a      	strh	r2, [r3, #24]
 8005b12:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005b14:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b16:	845a      	strh	r2, [r3, #34]	; 0x22
 8005b18:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b1c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005b20:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b24:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005b26:	4b1c      	ldr	r3, [pc, #112]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005b2c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005b34:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005b36:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005b3c:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005b3e:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005b44:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005b4c:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b50:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005b54:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b58:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005b5c:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b60:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005b64:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b68:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005b6c:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b70:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005b74:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b78:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005b7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <set_rail_monitor+0xc0>)
 8005b80:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3728      	adds	r7, #40	; 0x28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	24001f48 	.word	0x24001f48

08005b9c <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005ba0:	4b02      	ldr	r3, [pc, #8]	; (8005bac <get_rail_monitor+0x10>)
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	24001f48 	.word	0x24001f48

08005bb0 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005bbe:	89fb      	ldrh	r3, [r7, #14]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	db05      	blt.n	8005bd2 <in_range+0x22>
 8005bc6:	89fb      	ldrh	r3, [r7, #14]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	dc01      	bgt.n	8005bd2 <in_range+0x22>
		return 1;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <in_range+0x24>
	}
	return 0;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <monitor_rails>:


void monitor_rails() {
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e0bd      	b.n	8005d68 <monitor_rails+0x188>
		if (rail_monitor[i].is_enabled){
 8005bec:	4966      	ldr	r1, [pc, #408]	; (8005d88 <monitor_rails+0x1a8>)
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	440b      	add	r3, r1
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d056      	beq.n	8005cb0 <monitor_rails+0xd0>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005c02:	4961      	ldr	r1, [pc, #388]	; (8005d88 <monitor_rails+0x1a8>)
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	440b      	add	r3, r1
 8005c10:	3304      	adds	r3, #4
 8005c12:	8818      	ldrh	r0, [r3, #0]
 8005c14:	495c      	ldr	r1, [pc, #368]	; (8005d88 <monitor_rails+0x1a8>)
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	440b      	add	r3, r1
 8005c22:	3308      	adds	r3, #8
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	461c      	mov	r4, r3
 8005c28:	4957      	ldr	r1, [pc, #348]	; (8005d88 <monitor_rails+0x1a8>)
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	440b      	add	r3, r1
 8005c36:	3306      	adds	r3, #6
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	f7ff ffb7 	bl	8005bb0 <in_range>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f040 808c 	bne.w	8005d62 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005c4a:	494f      	ldr	r1, [pc, #316]	; (8005d88 <monitor_rails+0x1a8>)
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	440b      	add	r3, r1
 8005c58:	3301      	adds	r3, #1
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	b2d8      	uxtb	r0, r3
 8005c60:	4949      	ldr	r1, [pc, #292]	; (8005d88 <monitor_rails+0x1a8>)
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4602      	mov	r2, r0
 8005c72:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005c74:	4944      	ldr	r1, [pc, #272]	; (8005d88 <monitor_rails+0x1a8>)
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	440b      	add	r3, r1
 8005c82:	3301      	adds	r3, #1
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d16b      	bne.n	8005d62 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005c8a:	493f      	ldr	r1, [pc, #252]	; (8005d88 <monitor_rails+0x1a8>)
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	440b      	add	r3, r1
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f876 	bl	8005d8c <get_rail_name_error_detail>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	727b      	strb	r3, [r7, #9]
					error.category = EC_power_supply_rail;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	723b      	strb	r3, [r7, #8]
					handle_error(error);
 8005ca8:	68b8      	ldr	r0, [r7, #8]
 8005caa:	f7fc f957 	bl	8001f5c <handle_error>
 8005cae:	e058      	b.n	8005d62 <monitor_rails+0x182>
			}
		}
		// If the rail monitor isn't enabled...
		else {
			uint16_t tolerance;
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8005cb0:	4935      	ldr	r1, [pc, #212]	; (8005d88 <monitor_rails+0x1a8>)
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3306      	adds	r3, #6
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005cca:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005d80 <monitor_rails+0x1a0>
 8005cce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005cd6:	ee17 3a90 	vmov	r3, s15
 8005cda:	817b      	strh	r3, [r7, #10]

			// If it isn't within +10% of its max voltage from 0...
			if (!in_range(rail_monitor[i].data, 0, tolerance)) {
 8005cdc:	492a      	ldr	r1, [pc, #168]	; (8005d88 <monitor_rails+0x1a8>)
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	440b      	add	r3, r1
 8005cea:	3304      	adds	r3, #4
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	897a      	ldrh	r2, [r7, #10]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ff5c 	bl	8005bb0 <in_range>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d131      	bne.n	8005d62 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005cfe:	4922      	ldr	r1, [pc, #136]	; (8005d88 <monitor_rails+0x1a8>)
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	b2d8      	uxtb	r0, r3
 8005d14:	491c      	ldr	r1, [pc, #112]	; (8005d88 <monitor_rails+0x1a8>)
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	440b      	add	r3, r1
 8005d22:	3301      	adds	r3, #1
 8005d24:	4602      	mov	r2, r0
 8005d26:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005d28:	4917      	ldr	r1, [pc, #92]	; (8005d88 <monitor_rails+0x1a8>)
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	440b      	add	r3, r1
 8005d36:	3301      	adds	r3, #1
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d111      	bne.n	8005d62 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005d3e:	4912      	ldr	r1, [pc, #72]	; (8005d88 <monitor_rails+0x1a8>)
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	440b      	add	r3, r1
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f81c 	bl	8005d8c <get_rail_name_error_detail>
 8005d54:	4603      	mov	r3, r0
 8005d56:	717b      	strb	r3, [r7, #5]
					error.category = EC_power_supply_rail;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	713b      	strb	r3, [r7, #4]
					handle_error(error);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fc f8fd 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b11      	cmp	r3, #17
 8005d6c:	f77f af3e 	ble.w	8005bec <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd90      	pop	{r4, r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w
 8005d80:	9999999a 	.word	0x9999999a
 8005d84:	3fb99999 	.word	0x3fb99999
 8005d88:	24001f48 	.word	0x24001f48

08005d8c <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	4603      	mov	r3, r0
 8005d94:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	2b11      	cmp	r3, #17
 8005d9a:	d84b      	bhi.n	8005e34 <get_rail_name_error_detail+0xa8>
 8005d9c:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <get_rail_name_error_detail+0x18>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005ded 	.word	0x08005ded
 8005da8:	08005df1 	.word	0x08005df1
 8005dac:	08005df5 	.word	0x08005df5
 8005db0:	08005df9 	.word	0x08005df9
 8005db4:	08005dfd 	.word	0x08005dfd
 8005db8:	08005e01 	.word	0x08005e01
 8005dbc:	08005e05 	.word	0x08005e05
 8005dc0:	08005e09 	.word	0x08005e09
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e15 	.word	0x08005e15
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e1d 	.word	0x08005e1d
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e25 	.word	0x08005e25
 8005de0:	08005e29 	.word	0x08005e29
 8005de4:	08005e2d 	.word	0x08005e2d
 8005de8:	08005e31 	.word	0x08005e31
	case RAIL_vsense:
		return ED_vsense;
 8005dec:	2306      	movs	r3, #6
 8005dee:	e022      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005df0:	2307      	movs	r3, #7
 8005df2:	e020      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005df4:	2308      	movs	r3, #8
 8005df6:	e01e      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005df8:	2309      	movs	r3, #9
 8005dfa:	e01c      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005dfc:	230a      	movs	r3, #10
 8005dfe:	e01a      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005e00:	230b      	movs	r3, #11
 8005e02:	e018      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005e04:	230c      	movs	r3, #12
 8005e06:	e016      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005e08:	230d      	movs	r3, #13
 8005e0a:	e014      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005e0c:	230e      	movs	r3, #14
 8005e0e:	e012      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005e10:	230f      	movs	r3, #15
 8005e12:	e010      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005e14:	2310      	movs	r3, #16
 8005e16:	e00e      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005e18:	2311      	movs	r3, #17
 8005e1a:	e00c      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005e1c:	2312      	movs	r3, #18
 8005e1e:	e00a      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005e20:	2313      	movs	r3, #19
 8005e22:	e008      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005e24:	2314      	movs	r3, #20
 8005e26:	e006      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005e28:	2315      	movs	r3, #21
 8005e2a:	e004      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005e2c:	2316      	movs	r3, #22
 8005e2e:	e002      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005e30:	2317      	movs	r3, #23
 8005e32:	e000      	b.n	8005e36 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005e34:	231a      	movs	r3, #26
	}
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop

08005e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e48:	f7fe fea4 	bl	8004b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e4c:	480c      	ldr	r0, [pc, #48]	; (8005e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e4e:	490d      	ldr	r1, [pc, #52]	; (8005e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e50:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e54:	e002      	b.n	8005e5c <LoopCopyDataInit>

08005e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e5a:	3304      	adds	r3, #4

08005e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e60:	d3f9      	bcc.n	8005e56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e64:	4c0a      	ldr	r4, [pc, #40]	; (8005e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e68:	e001      	b.n	8005e6e <LoopFillZerobss>

08005e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e6c:	3204      	adds	r2, #4

08005e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e70:	d3fb      	bcc.n	8005e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e72:	f014 fc51 	bl	801a718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e76:	f7fd fc61 	bl	800373c <main>
  bx  lr
 8005e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005e80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005e84:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8005e88:	0801b648 	.word	0x0801b648
  ldr r2, =_sbss
 8005e8c:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005e90:	2400697c 	.word	0x2400697c

08005e94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e94:	e7fe      	b.n	8005e94 <ADC3_IRQHandler>
	...

08005e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e9e:	2003      	movs	r0, #3
 8005ea0:	f001 fd39 	bl	8007916 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ea4:	f008 fecc 	bl	800ec40 <HAL_RCC_GetSysClockFreq>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <HAL_Init+0x68>)
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	0a1b      	lsrs	r3, r3, #8
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	4913      	ldr	r1, [pc, #76]	; (8005f04 <HAL_Init+0x6c>)
 8005eb6:	5ccb      	ldrb	r3, [r1, r3]
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <HAL_Init+0x68>)
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	4a0e      	ldr	r2, [pc, #56]	; (8005f04 <HAL_Init+0x6c>)
 8005ecc:	5cd3      	ldrb	r3, [r2, r3]
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <HAL_Init+0x70>)
 8005eda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005edc:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <HAL_Init+0x74>)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ee2:	2005      	movs	r0, #5
 8005ee4:	f7fe fc40 	bl	8004768 <HAL_InitTick>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e002      	b.n	8005ef8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005ef2:	f7fe fc1b 	bl	800472c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	58024400 	.word	0x58024400
 8005f04:	0801b594 	.word	0x0801b594
 8005f08:	240000c8 	.word	0x240000c8
 8005f0c:	240000c4 	.word	0x240000c4

08005f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <HAL_IncTick+0x20>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_IncTick+0x24>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4413      	add	r3, r2
 8005f20:	4a04      	ldr	r2, [pc, #16]	; (8005f34 <HAL_IncTick+0x24>)
 8005f22:	6013      	str	r3, [r2, #0]
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	240000d0 	.word	0x240000d0
 8005f34:	24001ffc 	.word	0x24001ffc

08005f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f3c:	4b03      	ldr	r3, [pc, #12]	; (8005f4c <HAL_GetTick+0x14>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	24001ffc 	.word	0x24001ffc

08005f50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005f54:	4b03      	ldr	r3, [pc, #12]	; (8005f64 <HAL_GetREVID+0x14>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	0c1b      	lsrs	r3, r3, #16
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	5c001000 	.word	0x5c001000

08005f68 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	4904      	ldr	r1, [pc, #16]	; (8005f90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	604b      	str	r3, [r1, #4]
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	58000400 	.word	0x58000400

08005f94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3360      	adds	r3, #96	; 0x60
 800600e:	461a      	mov	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	430b      	orrs	r3, r1
 800602a:	431a      	orrs	r2, r3
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	fa01 f303 	lsl.w	r3, r1, r3
 800605c:	431a      	orrs	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	611a      	str	r2, [r3, #16]
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3360      	adds	r3, #96	; 0x60
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	431a      	orrs	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	601a      	str	r2, [r3, #0]
  }
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3330      	adds	r3, #48	; 0x30
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	f003 030c 	and.w	r3, r3, #12
 80060e6:	4413      	add	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	211f      	movs	r1, #31
 80060f6:	fa01 f303 	lsl.w	r3, r1, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	401a      	ands	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0e9b      	lsrs	r3, r3, #26
 8006102:	f003 011f 	and.w	r1, r3, #31
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	431a      	orrs	r2, r3
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f023 0203 	bic.w	r2, r3, #3
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3314      	adds	r3, #20
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	0e5b      	lsrs	r3, r3, #25
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	4413      	add	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	0d1b      	lsrs	r3, r3, #20
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2107      	movs	r1, #7
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	401a      	ands	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	0d1b      	lsrs	r3, r3, #20
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	431a      	orrs	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061b8:	43db      	mvns	r3, r3
 80061ba:	401a      	ands	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f003 0318 	and.w	r3, r3, #24
 80061c2:	4908      	ldr	r1, [pc, #32]	; (80061e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80061c4:	40d9      	lsrs	r1, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	400b      	ands	r3, r1
 80061ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061ce:	431a      	orrs	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	000fffff 	.word	0x000fffff

080061e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 031f 	and.w	r3, r3, #31
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006212:	4013      	ands	r3, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6093      	str	r3, [r2, #8]
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	5fffffc0 	.word	0x5fffffc0

08006228 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800623c:	d101      	bne.n	8006242 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <LL_ADC_EnableInternalRegulator+0x24>)
 800625e:	4013      	ands	r3, r2
 8006260:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	6fffffc0 	.word	0x6fffffc0

08006278 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800628c:	d101      	bne.n	8006292 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <LL_ADC_Enable+0x24>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	f043 0201 	orr.w	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	7fffffc0 	.word	0x7fffffc0

080062c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <LL_ADC_Disable+0x24>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	f043 0202 	orr.w	r2, r3, #2
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	7fffffc0 	.word	0x7fffffc0

080062f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <LL_ADC_IsEnabled+0x18>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <LL_ADC_IsEnabled+0x1a>
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b02      	cmp	r3, #2
 8006328:	d101      	bne.n	800632e <LL_ADC_IsDisableOngoing+0x18>
 800632a:	2301      	movs	r3, #1
 800632c:	e000      	b.n	8006330 <LL_ADC_IsDisableOngoing+0x1a>
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <LL_ADC_REG_StartConversion+0x24>)
 800634a:	4013      	ands	r3, r2
 800634c:	f043 0204 	orr.w	r2, r3, #4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	7fffffc0 	.word	0x7fffffc0

08006364 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b04      	cmp	r3, #4
 8006376:	d101      	bne.n	800637c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b08      	cmp	r3, #8
 800639c:	d101      	bne.n	80063a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b089      	sub	sp, #36	; 0x24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80063bc:	2300      	movs	r3, #0
 80063be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e18f      	b.n	80066ea <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fa fab7 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff ff19 	bl	8006228 <LL_ADC_IsDeepPowerDownEnabled>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff feff 	bl	8006204 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff ff34 	bl	8006278 <LL_ADC_IsInternalRegulatorEnabled>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d114      	bne.n	8006440 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff18 	bl	8006250 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006420:	4b87      	ldr	r3, [pc, #540]	; (8006640 <HAL_ADC_Init+0x290>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	4a87      	ldr	r2, [pc, #540]	; (8006644 <HAL_ADC_Init+0x294>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	3301      	adds	r3, #1
 8006430:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006432:	e002      	b.n	800643a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	3b01      	subs	r3, #1
 8006438:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f9      	bne.n	8006434 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff ff17 	bl	8006278 <LL_ADC_IsInternalRegulatorEnabled>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10d      	bne.n	800646c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006454:	f043 0210 	orr.w	r2, r3, #16
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006460:	f043 0201 	orr.w	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff ff77 	bl	8006364 <LL_ADC_REG_IsConversionOngoing>
 8006476:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 8129 	bne.w	80066d8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 8125 	bne.w	80066d8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006496:	f043 0202 	orr.w	r2, r3, #2
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff ff24 	bl	80062f0 <LL_ADC_IsEnabled>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d136      	bne.n	800651c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a65      	ldr	r2, [pc, #404]	; (8006648 <HAL_ADC_Init+0x298>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_ADC_Init+0x112>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a63      	ldr	r2, [pc, #396]	; (800664c <HAL_ADC_Init+0x29c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10e      	bne.n	80064e0 <HAL_ADC_Init+0x130>
 80064c2:	4861      	ldr	r0, [pc, #388]	; (8006648 <HAL_ADC_Init+0x298>)
 80064c4:	f7ff ff14 	bl	80062f0 <LL_ADC_IsEnabled>
 80064c8:	4604      	mov	r4, r0
 80064ca:	4860      	ldr	r0, [pc, #384]	; (800664c <HAL_ADC_Init+0x29c>)
 80064cc:	f7ff ff10 	bl	80062f0 <LL_ADC_IsEnabled>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4323      	orrs	r3, r4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e008      	b.n	80064f2 <HAL_ADC_Init+0x142>
 80064e0:	485b      	ldr	r0, [pc, #364]	; (8006650 <HAL_ADC_Init+0x2a0>)
 80064e2:	f7ff ff05 	bl	80062f0 <LL_ADC_IsEnabled>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d012      	beq.n	800651c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a53      	ldr	r2, [pc, #332]	; (8006648 <HAL_ADC_Init+0x298>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_ADC_Init+0x15a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a51      	ldr	r2, [pc, #324]	; (800664c <HAL_ADC_Init+0x29c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d101      	bne.n	800650e <HAL_ADC_Init+0x15e>
 800650a:	4a52      	ldr	r2, [pc, #328]	; (8006654 <HAL_ADC_Init+0x2a4>)
 800650c:	e000      	b.n	8006510 <HAL_ADC_Init+0x160>
 800650e:	4a52      	ldr	r2, [pc, #328]	; (8006658 <HAL_ADC_Init+0x2a8>)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f7ff fd3c 	bl	8005f94 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800651c:	f7ff fd18 	bl	8005f50 <HAL_GetREVID>
 8006520:	4603      	mov	r3, r0
 8006522:	f241 0203 	movw	r2, #4099	; 0x1003
 8006526:	4293      	cmp	r3, r2
 8006528:	d914      	bls.n	8006554 <HAL_ADC_Init+0x1a4>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b10      	cmp	r3, #16
 8006530:	d110      	bne.n	8006554 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7d5b      	ldrb	r3, [r3, #21]
 8006536:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800653c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006542:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	7f1b      	ldrb	r3, [r3, #28]
 8006548:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800654a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800654c:	f043 030c 	orr.w	r3, r3, #12
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	e00d      	b.n	8006570 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	7d5b      	ldrb	r3, [r3, #21]
 8006558:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800655e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006564:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	7f1b      	ldrb	r3, [r3, #28]
 800656a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7f1b      	ldrb	r3, [r3, #28]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d106      	bne.n	8006586 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	3b01      	subs	r3, #1
 800657e:	045b      	lsls	r3, r3, #17
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4313      	orrs	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <HAL_ADC_Init+0x2ac>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	69b9      	ldr	r1, [r7, #24]
 80065b2:	430b      	orrs	r3, r1
 80065b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff fed2 	bl	8006364 <LL_ADC_REG_IsConversionOngoing>
 80065c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fedf 	bl	800638a <LL_ADC_INJ_IsConversionOngoing>
 80065cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d15f      	bne.n	8006694 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d15c      	bne.n	8006694 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7d1b      	ldrb	r3, [r3, #20]
 80065de:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	4b1c      	ldr	r3, [pc, #112]	; (8006660 <HAL_ADC_Init+0x2b0>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	69b9      	ldr	r1, [r7, #24]
 80065f8:	430b      	orrs	r3, r1
 80065fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006602:	2b01      	cmp	r3, #1
 8006604:	d130      	bne.n	8006668 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <HAL_ADC_Init+0x2b4>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800661a:	3a01      	subs	r2, #1
 800661c:	0411      	lsls	r1, r2, #16
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006622:	4311      	orrs	r1, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006628:	4311      	orrs	r1, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800662e:	430a      	orrs	r2, r1
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	611a      	str	r2, [r3, #16]
 800663c:	e01c      	b.n	8006678 <HAL_ADC_Init+0x2c8>
 800663e:	bf00      	nop
 8006640:	240000c4 	.word	0x240000c4
 8006644:	053e2d63 	.word	0x053e2d63
 8006648:	40022000 	.word	0x40022000
 800664c:	40022100 	.word	0x40022100
 8006650:	58026000 	.word	0x58026000
 8006654:	40022300 	.word	0x40022300
 8006658:	58026300 	.word	0x58026300
 800665c:	fff0c003 	.word	0xfff0c003
 8006660:	ffffbffc 	.word	0xffffbffc
 8006664:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fdec 	bl	800726c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d10c      	bne.n	80066b6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	f023 010f 	bic.w	r1, r3, #15
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	1e5a      	subs	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
 80066b4:	e007      	b.n	80066c6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 020f 	bic.w	r2, r2, #15
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	f043 0201 	orr.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
 80066d6:	e007      	b.n	80066e8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f043 0210 	orr.w	r2, r3, #16
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80066e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3724      	adds	r7, #36	; 0x24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd90      	pop	{r4, r7, pc}
 80066f2:	bf00      	nop

080066f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a55      	ldr	r2, [pc, #340]	; (800685c <HAL_ADC_Start_DMA+0x168>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_ADC_Start_DMA+0x20>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a54      	ldr	r2, [pc, #336]	; (8006860 <HAL_ADC_Start_DMA+0x16c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d101      	bne.n	8006718 <HAL_ADC_Start_DMA+0x24>
 8006714:	4b53      	ldr	r3, [pc, #332]	; (8006864 <HAL_ADC_Start_DMA+0x170>)
 8006716:	e000      	b.n	800671a <HAL_ADC_Start_DMA+0x26>
 8006718:	4b53      	ldr	r3, [pc, #332]	; (8006868 <HAL_ADC_Start_DMA+0x174>)
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fd64 	bl	80061e8 <LL_ADC_GetMultimode>
 8006720:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fe1c 	bl	8006364 <LL_ADC_REG_IsConversionOngoing>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 808c 	bne.w	800684c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <HAL_ADC_Start_DMA+0x4e>
 800673e:	2302      	movs	r3, #2
 8006740:	e087      	b.n	8006852 <HAL_ADC_Start_DMA+0x15e>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2b05      	cmp	r3, #5
 8006754:	d002      	beq.n	800675c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b09      	cmp	r3, #9
 800675a:	d170      	bne.n	800683e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fc07 	bl	8006f70 <ADC_Enable>
 8006762:	4603      	mov	r3, r0
 8006764:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d163      	bne.n	8006834 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006770:	4b3e      	ldr	r3, [pc, #248]	; (800686c <HAL_ADC_Start_DMA+0x178>)
 8006772:	4013      	ands	r3, r2
 8006774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a37      	ldr	r2, [pc, #220]	; (8006860 <HAL_ADC_Start_DMA+0x16c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d002      	beq.n	800678c <HAL_ADC_Start_DMA+0x98>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	e000      	b.n	800678e <HAL_ADC_Start_DMA+0x9a>
 800678c:	4b33      	ldr	r3, [pc, #204]	; (800685c <HAL_ADC_Start_DMA+0x168>)
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	4293      	cmp	r3, r2
 8006794:	d002      	beq.n	800679c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d006      	beq.n	80067c2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b8:	f023 0206 	bic.w	r2, r3, #6
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	659a      	str	r2, [r3, #88]	; 0x58
 80067c0:	e002      	b.n	80067c8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067cc:	4a28      	ldr	r2, [pc, #160]	; (8006870 <HAL_ADC_Start_DMA+0x17c>)
 80067ce:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d4:	4a27      	ldr	r2, [pc, #156]	; (8006874 <HAL_ADC_Start_DMA+0x180>)
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067dc:	4a26      	ldr	r2, [pc, #152]	; (8006878 <HAL_ADC_Start_DMA+0x184>)
 80067de:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	221c      	movs	r2, #28
 80067e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0210 	orr.w	r2, r2, #16
 80067fe:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f7ff fc89 	bl	8006122 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3340      	adds	r3, #64	; 0x40
 800681a:	4619      	mov	r1, r3
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f002 f80e 	bl	8008840 <HAL_DMA_Start_IT>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fd85 	bl	800633c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006832:	e00d      	b.n	8006850 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800683c:	e008      	b.n	8006850 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800684a:	e001      	b.n	8006850 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800684c:	2302      	movs	r3, #2
 800684e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40022000 	.word	0x40022000
 8006860:	40022100 	.word	0x40022100
 8006864:	40022300 	.word	0x40022300
 8006868:	58026300 	.word	0x58026300
 800686c:	fffff0fe 	.word	0xfffff0fe
 8006870:	08007143 	.word	0x08007143
 8006874:	0800721b 	.word	0x0800721b
 8006878:	08007237 	.word	0x08007237

0800687c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b0a1      	sub	sp, #132	; 0x84
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4a65      	ldr	r2, [pc, #404]	; (8006a68 <HAL_ADC_ConfigChannel+0x1b0>)
 80068d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_ADC_ConfigChannel+0x2a>
 80068de:	2302      	movs	r3, #2
 80068e0:	e32e      	b.n	8006f40 <HAL_ADC_ConfigChannel+0x688>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fd38 	bl	8006364 <LL_ADC_REG_IsConversionOngoing>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 8313 	bne.w	8006f22 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	db2c      	blt.n	800695e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <HAL_ADC_ConfigChannel+0x6a>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	0e9b      	lsrs	r3, r3, #26
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2201      	movs	r2, #1
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	e016      	b.n	8006950 <HAL_ADC_ConfigChannel+0x98>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800692a:	fa93 f3a3 	rbit	r3, r3
 800692e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006932:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800693a:	2320      	movs	r3, #32
 800693c:	e003      	b.n	8006946 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800693e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006940:	fab3 f383 	clz	r3, r3
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2201      	movs	r2, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	69d1      	ldr	r1, [r2, #28]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6812      	ldr	r2, [r2, #0]
 800695a:	430b      	orrs	r3, r1
 800695c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6859      	ldr	r1, [r3, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	f7ff fbad 	bl	80060ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff fcf5 	bl	8006364 <LL_ADC_REG_IsConversionOngoing>
 800697a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fd02 	bl	800638a <LL_ADC_INJ_IsConversionOngoing>
 8006986:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 80b8 	bne.w	8006b00 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006992:	2b00      	cmp	r3, #0
 8006994:	f040 80b4 	bne.w	8006b00 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	461a      	mov	r2, r3
 80069a6:	f7ff fbcf 	bl	8006148 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80069aa:	4b30      	ldr	r3, [pc, #192]	; (8006a6c <HAL_ADC_ConfigChannel+0x1b4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b6:	d10b      	bne.n	80069d0 <HAL_ADC_ConfigChannel+0x118>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	e01d      	b.n	8006a0c <HAL_ADC_ConfigChannel+0x154>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <HAL_ADC_ConfigChannel+0x13e>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	e00a      	b.n	8006a0c <HAL_ADC_ConfigChannel+0x154>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	089b      	lsrs	r3, r3, #2
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d02c      	beq.n	8006a70 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6919      	ldr	r1, [r3, #16]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a24:	f7ff faea 	bl	8005ffc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	6919      	ldr	r1, [r3, #16]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	7e5b      	ldrb	r3, [r3, #25]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d102      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x186>
 8006a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a3c:	e000      	b.n	8006a40 <HAL_ADC_ConfigChannel+0x188>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	461a      	mov	r2, r3
 8006a42:	f7ff fb14 	bl	800606e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6919      	ldr	r1, [r3, #16]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	7e1b      	ldrb	r3, [r3, #24]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d102      	bne.n	8006a5c <HAL_ADC_ConfigChannel+0x1a4>
 8006a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a5a:	e000      	b.n	8006a5e <HAL_ADC_ConfigChannel+0x1a6>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7ff faec 	bl	800603c <LL_ADC_SetDataRightShift>
 8006a64:	e04c      	b.n	8006b00 <HAL_ADC_ConfigChannel+0x248>
 8006a66:	bf00      	nop
 8006a68:	47ff0000 	.word	0x47ff0000
 8006a6c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	069b      	lsls	r3, r3, #26
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d107      	bne.n	8006a94 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a92:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	069b      	lsls	r3, r3, #26
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d107      	bne.n	8006ab8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ab6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	069b      	lsls	r3, r3, #26
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d107      	bne.n	8006adc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ada:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	069b      	lsls	r3, r3, #26
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d107      	bne.n	8006b00 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006afe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fbf3 	bl	80062f0 <LL_ADC_IsEnabled>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 8211 	bne.w	8006f34 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6819      	ldr	r1, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f7ff fb3e 	bl	80061a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4aa1      	ldr	r2, [pc, #644]	; (8006db0 <HAL_ADC_ConfigChannel+0x4f8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	f040 812e 	bne.w	8006d8c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x2a0>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	0e9b      	lsrs	r3, r3, #26
 8006b46:	3301      	adds	r3, #1
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2b09      	cmp	r3, #9
 8006b4e:	bf94      	ite	ls
 8006b50:	2301      	movls	r3, #1
 8006b52:	2300      	movhi	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e019      	b.n	8006b8c <HAL_ADC_ConfigChannel+0x2d4>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b60:	fa93 f3a3 	rbit	r3, r3
 8006b64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006b70:	2320      	movs	r3, #32
 8006b72:	e003      	b.n	8006b7c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b76:	fab3 f383 	clz	r3, r3
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2b09      	cmp	r3, #9
 8006b84:	bf94      	ite	ls
 8006b86:	2301      	movls	r3, #1
 8006b88:	2300      	movhi	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d079      	beq.n	8006c84 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <HAL_ADC_ConfigChannel+0x2f4>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	0e9b      	lsrs	r3, r3, #26
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	069b      	lsls	r3, r3, #26
 8006ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006baa:	e015      	b.n	8006bd8 <HAL_ADC_ConfigChannel+0x320>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb4:	fa93 f3a3 	rbit	r3, r3
 8006bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006bc4:	2320      	movs	r3, #32
 8006bc6:	e003      	b.n	8006bd0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bca:	fab3 f383 	clz	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	069b      	lsls	r3, r3, #26
 8006bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x340>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	0e9b      	lsrs	r3, r3, #26
 8006bea:	3301      	adds	r3, #1
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf6:	e017      	b.n	8006c28 <HAL_ADC_ConfigChannel+0x370>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c00:	fa93 f3a3 	rbit	r3, r3
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006c10:	2320      	movs	r3, #32
 8006c12:	e003      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c16:	fab3 f383 	clz	r3, r3
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	2101      	movs	r1, #1
 8006c24:	fa01 f303 	lsl.w	r3, r1, r3
 8006c28:	ea42 0103 	orr.w	r1, r2, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <HAL_ADC_ConfigChannel+0x396>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	0e9b      	lsrs	r3, r3, #26
 8006c3e:	3301      	adds	r3, #1
 8006c40:	f003 021f 	and.w	r2, r3, #31
 8006c44:	4613      	mov	r3, r2
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	4413      	add	r3, r2
 8006c4a:	051b      	lsls	r3, r3, #20
 8006c4c:	e018      	b.n	8006c80 <HAL_ADC_ConfigChannel+0x3c8>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	fa93 f3a3 	rbit	r3, r3
 8006c5a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006c66:	2320      	movs	r3, #32
 8006c68:	e003      	b.n	8006c72 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	fab3 f383 	clz	r3, r3
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	3301      	adds	r3, #1
 8006c74:	f003 021f 	and.w	r2, r3, #31
 8006c78:	4613      	mov	r3, r2
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
 8006c7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c80:	430b      	orrs	r3, r1
 8006c82:	e07e      	b.n	8006d82 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d107      	bne.n	8006ca0 <HAL_ADC_ConfigChannel+0x3e8>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	0e9b      	lsrs	r3, r3, #26
 8006c96:	3301      	adds	r3, #1
 8006c98:	069b      	lsls	r3, r3, #26
 8006c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c9e:	e015      	b.n	8006ccc <HAL_ADC_ConfigChannel+0x414>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	fa93 f3a3 	rbit	r3, r3
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006cb8:	2320      	movs	r3, #32
 8006cba:	e003      	b.n	8006cc4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	fab3 f383 	clz	r3, r3
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	069b      	lsls	r3, r3, #26
 8006cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <HAL_ADC_ConfigChannel+0x434>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0e9b      	lsrs	r3, r3, #26
 8006cde:	3301      	adds	r3, #1
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	e017      	b.n	8006d1c <HAL_ADC_ConfigChannel+0x464>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	fa93 f3a3 	rbit	r3, r3
 8006cf8:	61bb      	str	r3, [r7, #24]
  return result;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006d04:	2320      	movs	r3, #32
 8006d06:	e003      	b.n	8006d10 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	fab3 f383 	clz	r3, r3
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	3301      	adds	r3, #1
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2101      	movs	r1, #1
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	ea42 0103 	orr.w	r1, r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10d      	bne.n	8006d48 <HAL_ADC_ConfigChannel+0x490>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	0e9b      	lsrs	r3, r3, #26
 8006d32:	3301      	adds	r3, #1
 8006d34:	f003 021f 	and.w	r2, r3, #31
 8006d38:	4613      	mov	r3, r2
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3b1e      	subs	r3, #30
 8006d40:	051b      	lsls	r3, r3, #20
 8006d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d46:	e01b      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x4c8>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	fa93 f3a3 	rbit	r3, r3
 8006d54:	60fb      	str	r3, [r7, #12]
  return result;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006d60:	2320      	movs	r3, #32
 8006d62:	e003      	b.n	8006d6c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	fab3 f383 	clz	r3, r3
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f003 021f 	and.w	r2, r3, #31
 8006d72:	4613      	mov	r3, r2
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	3b1e      	subs	r3, #30
 8006d7a:	051b      	lsls	r3, r3, #20
 8006d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d80:	430b      	orrs	r3, r1
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	6892      	ldr	r2, [r2, #8]
 8006d86:	4619      	mov	r1, r3
 8006d88:	f7ff f9de 	bl	8006148 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f280 80cf 	bge.w	8006f34 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a06      	ldr	r2, [pc, #24]	; (8006db4 <HAL_ADC_ConfigChannel+0x4fc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d004      	beq.n	8006daa <HAL_ADC_ConfigChannel+0x4f2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <HAL_ADC_ConfigChannel+0x500>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d10a      	bne.n	8006dc0 <HAL_ADC_ConfigChannel+0x508>
 8006daa:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <HAL_ADC_ConfigChannel+0x504>)
 8006dac:	e009      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x50a>
 8006dae:	bf00      	nop
 8006db0:	47ff0000 	.word	0x47ff0000
 8006db4:	40022000 	.word	0x40022000
 8006db8:	40022100 	.word	0x40022100
 8006dbc:	40022300 	.word	0x40022300
 8006dc0:	4b61      	ldr	r3, [pc, #388]	; (8006f48 <HAL_ADC_ConfigChannel+0x690>)
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff f90c 	bl	8005fe0 <LL_ADC_GetCommonPathInternalCh>
 8006dc8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a5f      	ldr	r2, [pc, #380]	; (8006f4c <HAL_ADC_ConfigChannel+0x694>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_ADC_ConfigChannel+0x526>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5d      	ldr	r2, [pc, #372]	; (8006f50 <HAL_ADC_ConfigChannel+0x698>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10e      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x544>
 8006dde:	485b      	ldr	r0, [pc, #364]	; (8006f4c <HAL_ADC_ConfigChannel+0x694>)
 8006de0:	f7ff fa86 	bl	80062f0 <LL_ADC_IsEnabled>
 8006de4:	4604      	mov	r4, r0
 8006de6:	485a      	ldr	r0, [pc, #360]	; (8006f50 <HAL_ADC_ConfigChannel+0x698>)
 8006de8:	f7ff fa82 	bl	80062f0 <LL_ADC_IsEnabled>
 8006dec:	4603      	mov	r3, r0
 8006dee:	4323      	orrs	r3, r4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bf0c      	ite	eq
 8006df4:	2301      	moveq	r3, #1
 8006df6:	2300      	movne	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e008      	b.n	8006e0e <HAL_ADC_ConfigChannel+0x556>
 8006dfc:	4855      	ldr	r0, [pc, #340]	; (8006f54 <HAL_ADC_ConfigChannel+0x69c>)
 8006dfe:	f7ff fa77 	bl	80062f0 <LL_ADC_IsEnabled>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bf0c      	ite	eq
 8006e08:	2301      	moveq	r3, #1
 8006e0a:	2300      	movne	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d07d      	beq.n	8006f0e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a50      	ldr	r2, [pc, #320]	; (8006f58 <HAL_ADC_ConfigChannel+0x6a0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d130      	bne.n	8006e7e <HAL_ADC_ConfigChannel+0x5c6>
 8006e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d12b      	bne.n	8006e7e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a4a      	ldr	r2, [pc, #296]	; (8006f54 <HAL_ADC_ConfigChannel+0x69c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	f040 8081 	bne.w	8006f34 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a45      	ldr	r2, [pc, #276]	; (8006f4c <HAL_ADC_ConfigChannel+0x694>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d004      	beq.n	8006e46 <HAL_ADC_ConfigChannel+0x58e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a43      	ldr	r2, [pc, #268]	; (8006f50 <HAL_ADC_ConfigChannel+0x698>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d101      	bne.n	8006e4a <HAL_ADC_ConfigChannel+0x592>
 8006e46:	4a45      	ldr	r2, [pc, #276]	; (8006f5c <HAL_ADC_ConfigChannel+0x6a4>)
 8006e48:	e000      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x594>
 8006e4a:	4a3f      	ldr	r2, [pc, #252]	; (8006f48 <HAL_ADC_ConfigChannel+0x690>)
 8006e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7ff f8b0 	bl	8005fba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e5a:	4b41      	ldr	r3, [pc, #260]	; (8006f60 <HAL_ADC_ConfigChannel+0x6a8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	099b      	lsrs	r3, r3, #6
 8006e60:	4a40      	ldr	r2, [pc, #256]	; (8006f64 <HAL_ADC_ConfigChannel+0x6ac>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	099b      	lsrs	r3, r3, #6
 8006e68:	3301      	adds	r3, #1
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006e6e:	e002      	b.n	8006e76 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1f9      	bne.n	8006e70 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e7c:	e05a      	b.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a39      	ldr	r2, [pc, #228]	; (8006f68 <HAL_ADC_ConfigChannel+0x6b0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d11e      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x60e>
 8006e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d119      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a2f      	ldr	r2, [pc, #188]	; (8006f54 <HAL_ADC_ConfigChannel+0x69c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d14b      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2a      	ldr	r2, [pc, #168]	; (8006f4c <HAL_ADC_ConfigChannel+0x694>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d004      	beq.n	8006eb0 <HAL_ADC_ConfigChannel+0x5f8>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a29      	ldr	r2, [pc, #164]	; (8006f50 <HAL_ADC_ConfigChannel+0x698>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d101      	bne.n	8006eb4 <HAL_ADC_ConfigChannel+0x5fc>
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	; (8006f5c <HAL_ADC_ConfigChannel+0x6a4>)
 8006eb2:	e000      	b.n	8006eb6 <HAL_ADC_ConfigChannel+0x5fe>
 8006eb4:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <HAL_ADC_ConfigChannel+0x690>)
 8006eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7ff f87b 	bl	8005fba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ec4:	e036      	b.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <HAL_ADC_ConfigChannel+0x6b4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d131      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d12c      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <HAL_ADC_ConfigChannel+0x69c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d127      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_ADC_ConfigChannel+0x694>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d004      	beq.n	8006ef8 <HAL_ADC_ConfigChannel+0x640>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <HAL_ADC_ConfigChannel+0x698>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d101      	bne.n	8006efc <HAL_ADC_ConfigChannel+0x644>
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_ADC_ConfigChannel+0x6a4>)
 8006efa:	e000      	b.n	8006efe <HAL_ADC_ConfigChannel+0x646>
 8006efc:	4a12      	ldr	r2, [pc, #72]	; (8006f48 <HAL_ADC_ConfigChannel+0x690>)
 8006efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7ff f857 	bl	8005fba <LL_ADC_SetCommonPathInternalCh>
 8006f0c:	e012      	b.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f12:	f043 0220 	orr.w	r2, r3, #32
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006f20:	e008      	b.n	8006f34 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f26:	f043 0220 	orr.w	r2, r3, #32
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3784      	adds	r7, #132	; 0x84
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd90      	pop	{r4, r7, pc}
 8006f48:	58026300 	.word	0x58026300
 8006f4c:	40022000 	.word	0x40022000
 8006f50:	40022100 	.word	0x40022100
 8006f54:	58026000 	.word	0x58026000
 8006f58:	cb840000 	.word	0xcb840000
 8006f5c:	40022300 	.word	0x40022300
 8006f60:	240000c4 	.word	0x240000c4
 8006f64:	053e2d63 	.word	0x053e2d63
 8006f68:	c7520000 	.word	0xc7520000
 8006f6c:	cfb80000 	.word	0xcfb80000

08006f70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff f9b7 	bl	80062f0 <LL_ADC_IsEnabled>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d16e      	bne.n	8007066 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	4b38      	ldr	r3, [pc, #224]	; (8007070 <ADC_Enable+0x100>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00d      	beq.n	8006fb2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f043 0210 	orr.w	r2, r3, #16
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa6:	f043 0201 	orr.w	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e05a      	b.n	8007068 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff f972 	bl	80062a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006fbc:	f7fe ffbc 	bl	8005f38 <HAL_GetTick>
 8006fc0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2b      	ldr	r2, [pc, #172]	; (8007074 <ADC_Enable+0x104>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <ADC_Enable+0x66>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a29      	ldr	r2, [pc, #164]	; (8007078 <ADC_Enable+0x108>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d101      	bne.n	8006fda <ADC_Enable+0x6a>
 8006fd6:	4b29      	ldr	r3, [pc, #164]	; (800707c <ADC_Enable+0x10c>)
 8006fd8:	e000      	b.n	8006fdc <ADC_Enable+0x6c>
 8006fda:	4b29      	ldr	r3, [pc, #164]	; (8007080 <ADC_Enable+0x110>)
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff f903 	bl	80061e8 <LL_ADC_GetMultimode>
 8006fe2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a23      	ldr	r2, [pc, #140]	; (8007078 <ADC_Enable+0x108>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d002      	beq.n	8006ff4 <ADC_Enable+0x84>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	e000      	b.n	8006ff6 <ADC_Enable+0x86>
 8006ff4:	4b1f      	ldr	r3, [pc, #124]	; (8007074 <ADC_Enable+0x104>)
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d02c      	beq.n	8007058 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d130      	bne.n	8007066 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007004:	e028      	b.n	8007058 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff f970 	bl	80062f0 <LL_ADC_IsEnabled>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff f940 	bl	80062a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007020:	f7fe ff8a 	bl	8005f38 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d914      	bls.n	8007058 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	d00d      	beq.n	8007058 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007040:	f043 0210 	orr.w	r2, r3, #16
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	f043 0201 	orr.w	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e007      	b.n	8007068 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b01      	cmp	r3, #1
 8007064:	d1cf      	bne.n	8007006 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	8000003f 	.word	0x8000003f
 8007074:	40022000 	.word	0x40022000
 8007078:	40022100 	.word	0x40022100
 800707c:	40022300 	.word	0x40022300
 8007080:	58026300 	.word	0x58026300

08007084 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff f940 	bl	8006316 <LL_ADC_IsDisableOngoing>
 8007096:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff f927 	bl	80062f0 <LL_ADC_IsEnabled>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d047      	beq.n	8007138 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d144      	bne.n	8007138 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 030d 	and.w	r3, r3, #13
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d10c      	bne.n	80070d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff f901 	bl	80062c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2203      	movs	r2, #3
 80070cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070ce:	f7fe ff33 	bl	8005f38 <HAL_GetTick>
 80070d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070d4:	e029      	b.n	800712a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f043 0210 	orr.w	r2, r3, #16
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e6:	f043 0201 	orr.w	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e023      	b.n	800713a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80070f2:	f7fe ff21 	bl	8005f38 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d914      	bls.n	800712a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	f043 0210 	orr.w	r2, r3, #16
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711e:	f043 0201 	orr.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e007      	b.n	800713a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1dc      	bne.n	80070f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007158:	2b00      	cmp	r3, #0
 800715a:	d14b      	bne.n	80071f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007160:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d021      	beq.n	80071ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe ff92 	bl	80060a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d032      	beq.n	80071ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d12b      	bne.n	80071ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11f      	bne.n	80071ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b0:	f043 0201 	orr.w	r2, r3, #1
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	655a      	str	r2, [r3, #84]	; 0x54
 80071b8:	e018      	b.n	80071ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d111      	bne.n	80071ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e4:	f043 0201 	orr.w	r2, r3, #1
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fb45 	bl	800687c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80071f2:	e00e      	b.n	8007212 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff fb4f 	bl	80068a4 <HAL_ADC_ErrorCallback>
}
 8007206:	e004      	b.n	8007212 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7ff fb31 	bl	8006890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007254:	f043 0204 	orr.w	r2, r3, #4
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fb21 	bl	80068a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a7a      	ldr	r2, [pc, #488]	; (8007464 <ADC_ConfigureBoostMode+0x1f8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <ADC_ConfigureBoostMode+0x1c>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a79      	ldr	r2, [pc, #484]	; (8007468 <ADC_ConfigureBoostMode+0x1fc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d109      	bne.n	800729c <ADC_ConfigureBoostMode+0x30>
 8007288:	4b78      	ldr	r3, [pc, #480]	; (800746c <ADC_ConfigureBoostMode+0x200>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e008      	b.n	80072ae <ADC_ConfigureBoostMode+0x42>
 800729c:	4b74      	ldr	r3, [pc, #464]	; (8007470 <ADC_ConfigureBoostMode+0x204>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01c      	beq.n	80072ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80072b2:	f007 fe3f 	bl	800ef34 <HAL_RCC_GetHCLKFreq>
 80072b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072c0:	d010      	beq.n	80072e4 <ADC_ConfigureBoostMode+0x78>
 80072c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072c6:	d873      	bhi.n	80073b0 <ADC_ConfigureBoostMode+0x144>
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072cc:	d002      	beq.n	80072d4 <ADC_ConfigureBoostMode+0x68>
 80072ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072d2:	d16d      	bne.n	80073b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	60fb      	str	r3, [r7, #12]
        break;
 80072e2:	e068      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	089b      	lsrs	r3, r3, #2
 80072e8:	60fb      	str	r3, [r7, #12]
        break;
 80072ea:	e064      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80072ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80072f0:	f04f 0100 	mov.w	r1, #0
 80072f4:	f009 f8c6 	bl	8010484 <HAL_RCCEx_GetPeriphCLKFreq>
 80072f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007302:	d051      	beq.n	80073a8 <ADC_ConfigureBoostMode+0x13c>
 8007304:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007308:	d854      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 800730a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800730e:	d047      	beq.n	80073a0 <ADC_ConfigureBoostMode+0x134>
 8007310:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007314:	d84e      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 8007316:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800731a:	d03d      	beq.n	8007398 <ADC_ConfigureBoostMode+0x12c>
 800731c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007320:	d848      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 8007322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007326:	d033      	beq.n	8007390 <ADC_ConfigureBoostMode+0x124>
 8007328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800732c:	d842      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 800732e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007332:	d029      	beq.n	8007388 <ADC_ConfigureBoostMode+0x11c>
 8007334:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007338:	d83c      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 800733a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800733e:	d01a      	beq.n	8007376 <ADC_ConfigureBoostMode+0x10a>
 8007340:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007344:	d836      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 8007346:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800734a:	d014      	beq.n	8007376 <ADC_ConfigureBoostMode+0x10a>
 800734c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007350:	d830      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007356:	d00e      	beq.n	8007376 <ADC_ConfigureBoostMode+0x10a>
 8007358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735c:	d82a      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 800735e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007362:	d008      	beq.n	8007376 <ADC_ConfigureBoostMode+0x10a>
 8007364:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007368:	d824      	bhi.n	80073b4 <ADC_ConfigureBoostMode+0x148>
 800736a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800736e:	d002      	beq.n	8007376 <ADC_ConfigureBoostMode+0x10a>
 8007370:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007374:	d11e      	bne.n	80073b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	0c9b      	lsrs	r3, r3, #18
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	60fb      	str	r3, [r7, #12]
        break;
 8007386:	e016      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	091b      	lsrs	r3, r3, #4
 800738c:	60fb      	str	r3, [r7, #12]
        break;
 800738e:	e012      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	60fb      	str	r3, [r7, #12]
        break;
 8007396:	e00e      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	099b      	lsrs	r3, r3, #6
 800739c:	60fb      	str	r3, [r7, #12]
        break;
 800739e:	e00a      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	09db      	lsrs	r3, r3, #7
 80073a4:	60fb      	str	r3, [r7, #12]
        break;
 80073a6:	e006      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	60fb      	str	r3, [r7, #12]
        break;
 80073ae:	e002      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80073b4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80073b6:	f7fe fdcb 	bl	8005f50 <HAL_GetREVID>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d815      	bhi.n	80073f0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4a2b      	ldr	r2, [pc, #172]	; (8007474 <ADC_ConfigureBoostMode+0x208>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d908      	bls.n	80073de <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073da:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80073dc:	e03e      	b.n	800745c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ec:	609a      	str	r2, [r3, #8]
}
 80073ee:	e035      	b.n	800745c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a1f      	ldr	r2, [pc, #124]	; (8007478 <ADC_ConfigureBoostMode+0x20c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d808      	bhi.n	8007410 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800740c:	609a      	str	r2, [r3, #8]
}
 800740e:	e025      	b.n	800745c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4a1a      	ldr	r2, [pc, #104]	; (800747c <ADC_ConfigureBoostMode+0x210>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d80a      	bhi.n	800742e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800742a:	609a      	str	r2, [r3, #8]
}
 800742c:	e016      	b.n	800745c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4a13      	ldr	r2, [pc, #76]	; (8007480 <ADC_ConfigureBoostMode+0x214>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d80a      	bhi.n	800744c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007448:	609a      	str	r2, [r3, #8]
}
 800744a:	e007      	b.n	800745c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800745a:	609a      	str	r2, [r3, #8]
}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40022000 	.word	0x40022000
 8007468:	40022100 	.word	0x40022100
 800746c:	40022300 	.word	0x40022300
 8007470:	58026300 	.word	0x58026300
 8007474:	01312d00 	.word	0x01312d00
 8007478:	005f5e10 	.word	0x005f5e10
 800747c:	00bebc20 	.word	0x00bebc20
 8007480:	017d7840 	.word	0x017d7840

08007484 <LL_ADC_IsEnabled>:
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <LL_ADC_IsEnabled+0x18>
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <LL_ADC_IsEnabled+0x1a>
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <LL_ADC_StartCalibration>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <LL_ADC_StartCalibration+0x38>)
 80074be:	4013      	ands	r3, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80074cc:	430a      	orrs	r2, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	609a      	str	r2, [r3, #8]
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	3ffeffc0 	.word	0x3ffeffc0

080074e8 <LL_ADC_IsCalibrationOnGoing>:
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074fc:	d101      	bne.n	8007502 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <LL_ADC_REG_IsConversionOngoing>:
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b04      	cmp	r3, #4
 8007522:	d101      	bne.n	8007528 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007544:	2300      	movs	r3, #0
 8007546:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_ADCEx_Calibration_Start+0x1e>
 8007552:	2302      	movs	r3, #2
 8007554:	e04c      	b.n	80075f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff fd90 	bl	8007084 <ADC_Disable>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d135      	bne.n	80075da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007572:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007574:	4013      	ands	r3, r2
 8007576:	f043 0202 	orr.w	r2, r3, #2
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff ff90 	bl	80074ac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800758c:	e014      	b.n	80075b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3301      	adds	r3, #1
 8007592:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	4a19      	ldr	r2, [pc, #100]	; (80075fc <HAL_ADCEx_Calibration_Start+0xc4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d30d      	bcc.n	80075b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	f023 0312 	bic.w	r3, r3, #18
 80075a4:	f043 0210 	orr.w	r2, r3, #16
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e01b      	b.n	80075f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff ff93 	bl	80074e8 <LL_ADC_IsCalibrationOnGoing>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e2      	bne.n	800758e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075cc:	f023 0303 	bic.w	r3, r3, #3
 80075d0:	f043 0201 	orr.w	r2, r3, #1
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54
 80075d8:	e005      	b.n	80075e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	f043 0210 	orr.w	r2, r3, #16
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	ffffeefd 	.word	0xffffeefd
 80075fc:	25c3f800 	.word	0x25c3f800

08007600 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007600:	b590      	push	{r4, r7, lr}
 8007602:	b09f      	sub	sp, #124	; 0x7c
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800761a:	2302      	movs	r3, #2
 800761c:	e0be      	b.n	800779c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007626:	2300      	movs	r3, #0
 8007628:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800762a:	2300      	movs	r3, #0
 800762c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a5c      	ldr	r2, [pc, #368]	; (80077a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d102      	bne.n	800763e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007638:	4b5b      	ldr	r3, [pc, #364]	; (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800763a:	60bb      	str	r3, [r7, #8]
 800763c:	e001      	b.n	8007642 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800763e:	2300      	movs	r3, #0
 8007640:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	f043 0220 	orr.w	r2, r3, #32
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e09d      	b.n	800779c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff ff54 	bl	8007510 <LL_ADC_REG_IsConversionOngoing>
 8007668:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff ff4e 	bl	8007510 <LL_ADC_REG_IsConversionOngoing>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d17f      	bne.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800767a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800767c:	2b00      	cmp	r3, #0
 800767e:	d17c      	bne.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a47      	ldr	r2, [pc, #284]	; (80077a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a46      	ldr	r2, [pc, #280]	; (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d101      	bne.n	8007698 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007694:	4b45      	ldr	r3, [pc, #276]	; (80077ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007696:	e000      	b.n	800769a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007698:	4b45      	ldr	r3, [pc, #276]	; (80077b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800769a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d039      	beq.n	8007718 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80076a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a38      	ldr	r2, [pc, #224]	; (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d10e      	bne.n	80076e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80076ca:	4836      	ldr	r0, [pc, #216]	; (80077a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076cc:	f7ff feda 	bl	8007484 <LL_ADC_IsEnabled>
 80076d0:	4604      	mov	r4, r0
 80076d2:	4835      	ldr	r0, [pc, #212]	; (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80076d4:	f7ff fed6 	bl	8007484 <LL_ADC_IsEnabled>
 80076d8:	4603      	mov	r3, r0
 80076da:	4323      	orrs	r3, r4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf0c      	ite	eq
 80076e0:	2301      	moveq	r3, #1
 80076e2:	2300      	movne	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	e008      	b.n	80076fa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80076e8:	4832      	ldr	r0, [pc, #200]	; (80077b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80076ea:	f7ff fecb 	bl	8007484 <LL_ADC_IsEnabled>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bf0c      	ite	eq
 80076f4:	2301      	moveq	r3, #1
 80076f6:	2300      	movne	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d047      	beq.n	800778e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80076fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	4b2d      	ldr	r3, [pc, #180]	; (80077b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007704:	4013      	ands	r3, r2
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	6811      	ldr	r1, [r2, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	6892      	ldr	r2, [r2, #8]
 800770e:	430a      	orrs	r2, r1
 8007710:	431a      	orrs	r2, r3
 8007712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007714:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007716:	e03a      	b.n	800778e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007722:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1e      	ldr	r2, [pc, #120]	; (80077a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d10e      	bne.n	8007756 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007738:	481a      	ldr	r0, [pc, #104]	; (80077a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800773a:	f7ff fea3 	bl	8007484 <LL_ADC_IsEnabled>
 800773e:	4604      	mov	r4, r0
 8007740:	4819      	ldr	r0, [pc, #100]	; (80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007742:	f7ff fe9f 	bl	8007484 <LL_ADC_IsEnabled>
 8007746:	4603      	mov	r3, r0
 8007748:	4323      	orrs	r3, r4
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	e008      	b.n	8007768 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007756:	4817      	ldr	r0, [pc, #92]	; (80077b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007758:	f7ff fe94 	bl	8007484 <LL_ADC_IsEnabled>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf0c      	ite	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	2300      	movne	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d010      	beq.n	800778e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800776c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	4b11      	ldr	r3, [pc, #68]	; (80077b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007772:	4013      	ands	r3, r2
 8007774:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007776:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007778:	e009      	b.n	800778e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f043 0220 	orr.w	r2, r3, #32
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800778c:	e000      	b.n	8007790 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800778e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007798:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800779c:	4618      	mov	r0, r3
 800779e:	377c      	adds	r7, #124	; 0x7c
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd90      	pop	{r4, r7, pc}
 80077a4:	40022000 	.word	0x40022000
 80077a8:	40022100 	.word	0x40022100
 80077ac:	40022300 	.word	0x40022300
 80077b0:	58026300 	.word	0x58026300
 80077b4:	58026000 	.word	0x58026000
 80077b8:	fffff0e0 	.word	0xfffff0e0

080077bc <__NVIC_SetPriorityGrouping>:
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077cc:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <__NVIC_SetPriorityGrouping+0x40>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077d8:	4013      	ands	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80077e4:	4b06      	ldr	r3, [pc, #24]	; (8007800 <__NVIC_SetPriorityGrouping+0x44>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077ea:	4a04      	ldr	r2, [pc, #16]	; (80077fc <__NVIC_SetPriorityGrouping+0x40>)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	60d3      	str	r3, [r2, #12]
}
 80077f0:	bf00      	nop
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	e000ed00 	.word	0xe000ed00
 8007800:	05fa0000 	.word	0x05fa0000

08007804 <__NVIC_GetPriorityGrouping>:
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007808:	4b04      	ldr	r3, [pc, #16]	; (800781c <__NVIC_GetPriorityGrouping+0x18>)
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	0a1b      	lsrs	r3, r3, #8
 800780e:	f003 0307 	and.w	r3, r3, #7
}
 8007812:	4618      	mov	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	e000ed00 	.word	0xe000ed00

08007820 <__NVIC_EnableIRQ>:
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800782a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	db0b      	blt.n	800784a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	f003 021f 	and.w	r2, r3, #31
 8007838:	4907      	ldr	r1, [pc, #28]	; (8007858 <__NVIC_EnableIRQ+0x38>)
 800783a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	2001      	movs	r0, #1
 8007842:	fa00 f202 	lsl.w	r2, r0, r2
 8007846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	e000e100 	.word	0xe000e100

0800785c <__NVIC_SetPriority>:
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800786c:	2b00      	cmp	r3, #0
 800786e:	db0a      	blt.n	8007886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	490c      	ldr	r1, [pc, #48]	; (80078a8 <__NVIC_SetPriority+0x4c>)
 8007876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800787a:	0112      	lsls	r2, r2, #4
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	440b      	add	r3, r1
 8007880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007884:	e00a      	b.n	800789c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4908      	ldr	r1, [pc, #32]	; (80078ac <__NVIC_SetPriority+0x50>)
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	3b04      	subs	r3, #4
 8007894:	0112      	lsls	r2, r2, #4
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	440b      	add	r3, r1
 800789a:	761a      	strb	r2, [r3, #24]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	e000e100 	.word	0xe000e100
 80078ac:	e000ed00 	.word	0xe000ed00

080078b0 <NVIC_EncodePriority>:
{
 80078b0:	b480      	push	{r7}
 80078b2:	b089      	sub	sp, #36	; 0x24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f1c3 0307 	rsb	r3, r3, #7
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	bf28      	it	cs
 80078ce:	2304      	movcs	r3, #4
 80078d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	3304      	adds	r3, #4
 80078d6:	2b06      	cmp	r3, #6
 80078d8:	d902      	bls.n	80078e0 <NVIC_EncodePriority+0x30>
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	3b03      	subs	r3, #3
 80078de:	e000      	b.n	80078e2 <NVIC_EncodePriority+0x32>
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43da      	mvns	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	401a      	ands	r2, r3
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007902:	43d9      	mvns	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007908:	4313      	orrs	r3, r2
}
 800790a:	4618      	mov	r0, r3
 800790c:	3724      	adds	r7, #36	; 0x24
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff ff4c 	bl	80077bc <__NVIC_SetPriorityGrouping>
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800793a:	f7ff ff63 	bl	8007804 <__NVIC_GetPriorityGrouping>
 800793e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	6978      	ldr	r0, [r7, #20]
 8007946:	f7ff ffb3 	bl	80078b0 <NVIC_EncodePriority>
 800794a:	4602      	mov	r2, r0
 800794c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff ff82 	bl	800785c <__NVIC_SetPriority>
}
 8007958:	bf00      	nop
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800796a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff ff56 	bl	8007820 <__NVIC_EnableIRQ>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e014      	b.n	80079b8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7f9 f920 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e046      	b.n	8007a62 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	795b      	ldrb	r3, [r3, #5]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_DAC_Start+0x20>
 80079dc:	2302      	movs	r3, #2
 80079de:	e040      	b.n	8007a62 <HAL_DAC_Start+0xa2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6819      	ldr	r1, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2201      	movs	r2, #1
 80079fa:	409a      	lsls	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10f      	bne.n	8007a2a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d11d      	bne.n	8007a54 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	e014      	b.n	8007a54 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2102      	movs	r1, #2
 8007a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d107      	bne.n	8007a54 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0202 	orr.w	r2, r2, #2
 8007a52:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e0a2      	b.n	8007bce <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	795b      	ldrb	r3, [r3, #5]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_DAC_Start_DMA+0x24>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e09c      	b.n	8007bce <HAL_DAC_Start_DMA+0x15e>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d129      	bne.n	8007afa <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	4a4b      	ldr	r2, [pc, #300]	; (8007bd8 <HAL_DAC_Start_DMA+0x168>)
 8007aac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	4a4a      	ldr	r2, [pc, #296]	; (8007bdc <HAL_DAC_Start_DMA+0x16c>)
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	4a49      	ldr	r2, [pc, #292]	; (8007be0 <HAL_DAC_Start_DMA+0x170>)
 8007abc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007acc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_DAC_Start_DMA+0x6c>
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d005      	beq.n	8007ae6 <HAL_DAC_Start_DMA+0x76>
 8007ada:	e009      	b.n	8007af0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	613b      	str	r3, [r7, #16]
        break;
 8007ae4:	e033      	b.n	8007b4e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	613b      	str	r3, [r7, #16]
        break;
 8007aee:	e02e      	b.n	8007b4e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3310      	adds	r3, #16
 8007af6:	613b      	str	r3, [r7, #16]
        break;
 8007af8:	e029      	b.n	8007b4e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	4a39      	ldr	r2, [pc, #228]	; (8007be4 <HAL_DAC_Start_DMA+0x174>)
 8007b00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	4a38      	ldr	r2, [pc, #224]	; (8007be8 <HAL_DAC_Start_DMA+0x178>)
 8007b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	4a37      	ldr	r2, [pc, #220]	; (8007bec <HAL_DAC_Start_DMA+0x17c>)
 8007b10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b20:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <HAL_DAC_Start_DMA+0xc0>
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d005      	beq.n	8007b3a <HAL_DAC_Start_DMA+0xca>
 8007b2e:	e009      	b.n	8007b44 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3314      	adds	r3, #20
 8007b36:	613b      	str	r3, [r7, #16]
        break;
 8007b38:	e009      	b.n	8007b4e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3318      	adds	r3, #24
 8007b40:	613b      	str	r3, [r7, #16]
        break;
 8007b42:	e004      	b.n	8007b4e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	331c      	adds	r3, #28
 8007b4a:	613b      	str	r3, [r7, #16]
        break;
 8007b4c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d111      	bne.n	8007b78 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6898      	ldr	r0, [r3, #8]
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	f000 fe67 	bl	8008840 <HAL_DMA_Start_IT>
 8007b72:	4603      	mov	r3, r0
 8007b74:	75fb      	strb	r3, [r7, #23]
 8007b76:	e010      	b.n	8007b9a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007b86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68d8      	ldr	r0, [r3, #12]
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	f000 fe55 	bl	8008840 <HAL_DMA_Start_IT>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6819      	ldr	r1, [r3, #0]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	409a      	lsls	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e005      	b.n	8007bcc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f043 0204 	orr.w	r2, r3, #4
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08008061 	.word	0x08008061
 8007bdc:	08008083 	.word	0x08008083
 8007be0:	0800809f 	.word	0x0800809f
 8007be4:	0800811d 	.word	0x0800811d
 8007be8:	0800813f 	.word	0x0800813f
 8007bec:	0800815b 	.word	0x0800815b

08007bf0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e03e      	b.n	8007c82 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6819      	ldr	r1, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c14:	fa02 f303 	lsl.w	r3, r2, r3
 8007c18:	43da      	mvns	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	400a      	ands	r2, r1
 8007c20:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6819      	ldr	r1, [r3, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2201      	movs	r2, #1
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	43da      	mvns	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	400a      	ands	r2, r1
 8007c3c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10d      	bne.n	8007c60 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f001 f863 	bl	8008d14 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e00c      	b.n	8007c7a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 f855 	bl	8008d14 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007c78:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01d      	beq.n	8007ce8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d018      	beq.n	8007ce8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2204      	movs	r2, #4
 8007cba:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f043 0201 	orr.w	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007cd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ce0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f86f 	bl	8007dc6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01d      	beq.n	8007d2e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d018      	beq.n	8007d2e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2204      	movs	r2, #4
 8007d00:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f043 0202 	orr.w	r2, r3, #2
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d26:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9ed 	bl	8008108 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007d2e:	bf00      	nop
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b087      	sub	sp, #28
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e015      	b.n	8007d7e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d105      	bne.n	8007d6a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4413      	add	r3, r2
 8007d64:	3308      	adds	r3, #8
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e004      	b.n	8007d74 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4413      	add	r3, r2
 8007d70:	3314      	adds	r3, #20
 8007d72:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	461a      	mov	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	; 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <HAL_DAC_ConfigChannel+0x1e>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e12a      	b.n	8008054 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	795b      	ldrb	r3, [r3, #5]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <HAL_DAC_ConfigChannel+0x2e>
 8007e06:	2302      	movs	r3, #2
 8007e08:	e124      	b.n	8008054 <HAL_DAC_ConfigChannel+0x278>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2202      	movs	r2, #2
 8007e14:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d17a      	bne.n	8007f14 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007e1e:	f7fe f88b 	bl	8005f38 <HAL_GetTick>
 8007e22:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d13d      	bne.n	8007ea6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e2a:	e018      	b.n	8007e5e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e2c:	f7fe f884 	bl	8005f38 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d911      	bls.n	8007e5e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e40:	4b86      	ldr	r3, [pc, #536]	; (800805c <HAL_DAC_ConfigChannel+0x280>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f043 0208 	orr.w	r2, r3, #8
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2203      	movs	r2, #3
 8007e58:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e0fa      	b.n	8008054 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e64:	4b7d      	ldr	r3, [pc, #500]	; (800805c <HAL_DAC_ConfigChannel+0x280>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1df      	bne.n	8007e2c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	6992      	ldr	r2, [r2, #24]
 8007e74:	641a      	str	r2, [r3, #64]	; 0x40
 8007e76:	e020      	b.n	8007eba <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e78:	f7fe f85e 	bl	8005f38 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d90f      	bls.n	8007ea6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	da0a      	bge.n	8007ea6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f043 0208 	orr.w	r2, r3, #8
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e0d6      	b.n	8008054 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dbe3      	blt.n	8007e78 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	6992      	ldr	r2, [r2, #24]
 8007eb8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007eca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	ea02 0103 	and.w	r1, r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f003 0310 	and.w	r3, r3, #16
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	21ff      	movs	r1, #255	; 0xff
 8007ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8007efa:	43db      	mvns	r3, r3
 8007efc:	ea02 0103 	and.w	r1, r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6a1a      	ldr	r2, [r3, #32]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f003 0310 	and.w	r3, r3, #16
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d11d      	bne.n	8007f58 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	221f      	movs	r2, #31
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	43db      	mvns	r3, r3
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	4013      	ands	r3, r2
 8007f36:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2207      	movs	r2, #7
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	4013      	ands	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d102      	bne.n	8007f82 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f80:	e00f      	b.n	8007fa2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d102      	bne.n	8007f90 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f8e:	e008      	b.n	8007fa2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9c:	e001      	b.n	8007fa2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6819      	ldr	r1, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	43da      	mvns	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	400a      	ands	r2, r1
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f003 0310 	and.w	r3, r3, #16
 8007ff8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8008000:	43db      	mvns	r3, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4013      	ands	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	4313      	orrs	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6819      	ldr	r1, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	22c0      	movs	r2, #192	; 0xc0
 8008036:	fa02 f303 	lsl.w	r3, r2, r3
 800803a:	43da      	mvns	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	400a      	ands	r2, r1
 8008042:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008054:	4618      	mov	r0, r3
 8008056:	3728      	adds	r7, #40	; 0x28
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20008000 	.word	0x20008000

08008060 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fe8b 	bl	8007d8a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2201      	movs	r2, #1
 8008078:	711a      	strb	r2, [r3, #4]
}
 800807a:	bf00      	nop
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff fe84 	bl	8007d9e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f043 0204 	orr.w	r2, r3, #4
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fe7a 	bl	8007db2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	711a      	strb	r2, [r3, #4]
}
 80080c4:	bf00      	nop
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff ffce 	bl	80080cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	711a      	strb	r2, [r3, #4]
}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff ffc7 	bl	80080e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	f043 0204 	orr.w	r2, r3, #4
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff ffbd 	bl	80080f4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	711a      	strb	r2, [r3, #4]
}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008190:	f7fd fed2 	bl	8005f38 <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e316      	b.n	80087ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a66      	ldr	r2, [pc, #408]	; (8008340 <HAL_DMA_Init+0x1b8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d04a      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a65      	ldr	r2, [pc, #404]	; (8008344 <HAL_DMA_Init+0x1bc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d045      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a63      	ldr	r2, [pc, #396]	; (8008348 <HAL_DMA_Init+0x1c0>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d040      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a62      	ldr	r2, [pc, #392]	; (800834c <HAL_DMA_Init+0x1c4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d03b      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a60      	ldr	r2, [pc, #384]	; (8008350 <HAL_DMA_Init+0x1c8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d036      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a5f      	ldr	r2, [pc, #380]	; (8008354 <HAL_DMA_Init+0x1cc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d031      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a5d      	ldr	r2, [pc, #372]	; (8008358 <HAL_DMA_Init+0x1d0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d02c      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a5c      	ldr	r2, [pc, #368]	; (800835c <HAL_DMA_Init+0x1d4>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d027      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a5a      	ldr	r2, [pc, #360]	; (8008360 <HAL_DMA_Init+0x1d8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d022      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a59      	ldr	r2, [pc, #356]	; (8008364 <HAL_DMA_Init+0x1dc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d01d      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a57      	ldr	r2, [pc, #348]	; (8008368 <HAL_DMA_Init+0x1e0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d018      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a56      	ldr	r2, [pc, #344]	; (800836c <HAL_DMA_Init+0x1e4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a54      	ldr	r2, [pc, #336]	; (8008370 <HAL_DMA_Init+0x1e8>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00e      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a53      	ldr	r2, [pc, #332]	; (8008374 <HAL_DMA_Init+0x1ec>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d009      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a51      	ldr	r2, [pc, #324]	; (8008378 <HAL_DMA_Init+0x1f0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d004      	beq.n	8008240 <HAL_DMA_Init+0xb8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a50      	ldr	r2, [pc, #320]	; (800837c <HAL_DMA_Init+0x1f4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d101      	bne.n	8008244 <HAL_DMA_Init+0xbc>
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <HAL_DMA_Init+0xbe>
 8008244:	2300      	movs	r3, #0
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 813b 	beq.w	80084c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a37      	ldr	r2, [pc, #220]	; (8008340 <HAL_DMA_Init+0x1b8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d04a      	beq.n	80082fc <HAL_DMA_Init+0x174>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a36      	ldr	r2, [pc, #216]	; (8008344 <HAL_DMA_Init+0x1bc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d045      	beq.n	80082fc <HAL_DMA_Init+0x174>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a34      	ldr	r2, [pc, #208]	; (8008348 <HAL_DMA_Init+0x1c0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d040      	beq.n	80082fc <HAL_DMA_Init+0x174>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a33      	ldr	r2, [pc, #204]	; (800834c <HAL_DMA_Init+0x1c4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d03b      	beq.n	80082fc <HAL_DMA_Init+0x174>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a31      	ldr	r2, [pc, #196]	; (8008350 <HAL_DMA_Init+0x1c8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d036      	beq.n	80082fc <HAL_DMA_Init+0x174>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a30      	ldr	r2, [pc, #192]	; (8008354 <HAL_DMA_Init+0x1cc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d031      	beq.n	80082fc <HAL_DMA_Init+0x174>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a2e      	ldr	r2, [pc, #184]	; (8008358 <HAL_DMA_Init+0x1d0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d02c      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a2d      	ldr	r2, [pc, #180]	; (800835c <HAL_DMA_Init+0x1d4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d027      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a2b      	ldr	r2, [pc, #172]	; (8008360 <HAL_DMA_Init+0x1d8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d022      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <HAL_DMA_Init+0x1dc>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d01d      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a28      	ldr	r2, [pc, #160]	; (8008368 <HAL_DMA_Init+0x1e0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d018      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a27      	ldr	r2, [pc, #156]	; (800836c <HAL_DMA_Init+0x1e4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d013      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a25      	ldr	r2, [pc, #148]	; (8008370 <HAL_DMA_Init+0x1e8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00e      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a24      	ldr	r2, [pc, #144]	; (8008374 <HAL_DMA_Init+0x1ec>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d009      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a22      	ldr	r2, [pc, #136]	; (8008378 <HAL_DMA_Init+0x1f0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d004      	beq.n	80082fc <HAL_DMA_Init+0x174>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a21      	ldr	r2, [pc, #132]	; (800837c <HAL_DMA_Init+0x1f4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d108      	bne.n	800830e <HAL_DMA_Init+0x186>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0201 	bic.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	e007      	b.n	800831e <HAL_DMA_Init+0x196>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0201 	bic.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800831e:	e02f      	b.n	8008380 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008320:	f7fd fe0a 	bl	8005f38 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b05      	cmp	r3, #5
 800832c:	d928      	bls.n	8008380 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2203      	movs	r2, #3
 8008338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e246      	b.n	80087ce <HAL_DMA_Init+0x646>
 8008340:	40020010 	.word	0x40020010
 8008344:	40020028 	.word	0x40020028
 8008348:	40020040 	.word	0x40020040
 800834c:	40020058 	.word	0x40020058
 8008350:	40020070 	.word	0x40020070
 8008354:	40020088 	.word	0x40020088
 8008358:	400200a0 	.word	0x400200a0
 800835c:	400200b8 	.word	0x400200b8
 8008360:	40020410 	.word	0x40020410
 8008364:	40020428 	.word	0x40020428
 8008368:	40020440 	.word	0x40020440
 800836c:	40020458 	.word	0x40020458
 8008370:	40020470 	.word	0x40020470
 8008374:	40020488 	.word	0x40020488
 8008378:	400204a0 	.word	0x400204a0
 800837c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1c8      	bne.n	8008320 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4b83      	ldr	r3, [pc, #524]	; (80085a8 <HAL_DMA_Init+0x420>)
 800839a:	4013      	ands	r3, r2
 800839c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80083a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d107      	bne.n	80083e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	4313      	orrs	r3, r2
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80083e4:	4b71      	ldr	r3, [pc, #452]	; (80085ac <HAL_DMA_Init+0x424>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	4b71      	ldr	r3, [pc, #452]	; (80085b0 <HAL_DMA_Init+0x428>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f0:	d328      	bcc.n	8008444 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b28      	cmp	r3, #40	; 0x28
 80083f8:	d903      	bls.n	8008402 <HAL_DMA_Init+0x27a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008400:	d917      	bls.n	8008432 <HAL_DMA_Init+0x2aa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2b3e      	cmp	r3, #62	; 0x3e
 8008408:	d903      	bls.n	8008412 <HAL_DMA_Init+0x28a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b42      	cmp	r3, #66	; 0x42
 8008410:	d90f      	bls.n	8008432 <HAL_DMA_Init+0x2aa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2b46      	cmp	r3, #70	; 0x46
 8008418:	d903      	bls.n	8008422 <HAL_DMA_Init+0x29a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b48      	cmp	r3, #72	; 0x48
 8008420:	d907      	bls.n	8008432 <HAL_DMA_Init+0x2aa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b4e      	cmp	r3, #78	; 0x4e
 8008428:	d905      	bls.n	8008436 <HAL_DMA_Init+0x2ae>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b52      	cmp	r3, #82	; 0x52
 8008430:	d801      	bhi.n	8008436 <HAL_DMA_Init+0x2ae>
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <HAL_DMA_Init+0x2b0>
 8008436:	2300      	movs	r3, #0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008442:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	2b04      	cmp	r3, #4
 800846c:	d117      	bne.n	800849e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00e      	beq.n	800849e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f002 fb4d 	bl	800ab20 <DMA_CheckFifoParam>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d008      	beq.n	800849e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2240      	movs	r2, #64	; 0x40
 8008490:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e197      	b.n	80087ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f002 fa88 	bl	800a9bc <DMA_CalcBaseAndBitshift>
 80084ac:	4603      	mov	r3, r0
 80084ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	223f      	movs	r2, #63	; 0x3f
 80084ba:	409a      	lsls	r2, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	609a      	str	r2, [r3, #8]
 80084c0:	e0cd      	b.n	800865e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a3b      	ldr	r2, [pc, #236]	; (80085b4 <HAL_DMA_Init+0x42c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d022      	beq.n	8008512 <HAL_DMA_Init+0x38a>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a39      	ldr	r2, [pc, #228]	; (80085b8 <HAL_DMA_Init+0x430>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d01d      	beq.n	8008512 <HAL_DMA_Init+0x38a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a38      	ldr	r2, [pc, #224]	; (80085bc <HAL_DMA_Init+0x434>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d018      	beq.n	8008512 <HAL_DMA_Init+0x38a>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a36      	ldr	r2, [pc, #216]	; (80085c0 <HAL_DMA_Init+0x438>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d013      	beq.n	8008512 <HAL_DMA_Init+0x38a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a35      	ldr	r2, [pc, #212]	; (80085c4 <HAL_DMA_Init+0x43c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d00e      	beq.n	8008512 <HAL_DMA_Init+0x38a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a33      	ldr	r2, [pc, #204]	; (80085c8 <HAL_DMA_Init+0x440>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d009      	beq.n	8008512 <HAL_DMA_Init+0x38a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a32      	ldr	r2, [pc, #200]	; (80085cc <HAL_DMA_Init+0x444>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d004      	beq.n	8008512 <HAL_DMA_Init+0x38a>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a30      	ldr	r2, [pc, #192]	; (80085d0 <HAL_DMA_Init+0x448>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d101      	bne.n	8008516 <HAL_DMA_Init+0x38e>
 8008512:	2301      	movs	r3, #1
 8008514:	e000      	b.n	8008518 <HAL_DMA_Init+0x390>
 8008516:	2300      	movs	r3, #0
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8097 	beq.w	800864c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <HAL_DMA_Init+0x42c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d021      	beq.n	800856c <HAL_DMA_Init+0x3e4>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <HAL_DMA_Init+0x430>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d01c      	beq.n	800856c <HAL_DMA_Init+0x3e4>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a21      	ldr	r2, [pc, #132]	; (80085bc <HAL_DMA_Init+0x434>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d017      	beq.n	800856c <HAL_DMA_Init+0x3e4>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1f      	ldr	r2, [pc, #124]	; (80085c0 <HAL_DMA_Init+0x438>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d012      	beq.n	800856c <HAL_DMA_Init+0x3e4>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1e      	ldr	r2, [pc, #120]	; (80085c4 <HAL_DMA_Init+0x43c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00d      	beq.n	800856c <HAL_DMA_Init+0x3e4>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_DMA_Init+0x440>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d008      	beq.n	800856c <HAL_DMA_Init+0x3e4>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <HAL_DMA_Init+0x444>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d003      	beq.n	800856c <HAL_DMA_Init+0x3e4>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a19      	ldr	r2, [pc, #100]	; (80085d0 <HAL_DMA_Init+0x448>)
 800856a:	4293      	cmp	r3, r2
 800856c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2202      	movs	r2, #2
 8008572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <HAL_DMA_Init+0x44c>)
 800858a:	4013      	ands	r3, r2
 800858c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d020      	beq.n	80085d8 <HAL_DMA_Init+0x450>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	2b80      	cmp	r3, #128	; 0x80
 800859c:	d102      	bne.n	80085a4 <HAL_DMA_Init+0x41c>
 800859e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085a2:	e01a      	b.n	80085da <HAL_DMA_Init+0x452>
 80085a4:	2300      	movs	r3, #0
 80085a6:	e018      	b.n	80085da <HAL_DMA_Init+0x452>
 80085a8:	fe10803f 	.word	0xfe10803f
 80085ac:	5c001000 	.word	0x5c001000
 80085b0:	ffff0000 	.word	0xffff0000
 80085b4:	58025408 	.word	0x58025408
 80085b8:	5802541c 	.word	0x5802541c
 80085bc:	58025430 	.word	0x58025430
 80085c0:	58025444 	.word	0x58025444
 80085c4:	58025458 	.word	0x58025458
 80085c8:	5802546c 	.word	0x5802546c
 80085cc:	58025480 	.word	0x58025480
 80085d0:	58025494 	.word	0x58025494
 80085d4:	fffe000f 	.word	0xfffe000f
 80085d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	68d2      	ldr	r2, [r2, #12]
 80085de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80085e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80085f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80085f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008608:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	4b6e      	ldr	r3, [pc, #440]	; (80087d8 <HAL_DMA_Init+0x650>)
 8008620:	4413      	add	r3, r2
 8008622:	4a6e      	ldr	r2, [pc, #440]	; (80087dc <HAL_DMA_Init+0x654>)
 8008624:	fba2 2303 	umull	r2, r3, r2, r3
 8008628:	091b      	lsrs	r3, r3, #4
 800862a:	009a      	lsls	r2, r3, #2
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f002 f9c3 	bl	800a9bc <DMA_CalcBaseAndBitshift>
 8008636:	4603      	mov	r3, r0
 8008638:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	2201      	movs	r2, #1
 8008644:	409a      	lsls	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	605a      	str	r2, [r3, #4]
 800864a:	e008      	b.n	800865e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2240      	movs	r2, #64	; 0x40
 8008650:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2203      	movs	r2, #3
 8008656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e0b7      	b.n	80087ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a5f      	ldr	r2, [pc, #380]	; (80087e0 <HAL_DMA_Init+0x658>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d072      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a5d      	ldr	r2, [pc, #372]	; (80087e4 <HAL_DMA_Init+0x65c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d06d      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a5c      	ldr	r2, [pc, #368]	; (80087e8 <HAL_DMA_Init+0x660>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d068      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a5a      	ldr	r2, [pc, #360]	; (80087ec <HAL_DMA_Init+0x664>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d063      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a59      	ldr	r2, [pc, #356]	; (80087f0 <HAL_DMA_Init+0x668>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d05e      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a57      	ldr	r2, [pc, #348]	; (80087f4 <HAL_DMA_Init+0x66c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d059      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a56      	ldr	r2, [pc, #344]	; (80087f8 <HAL_DMA_Init+0x670>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d054      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a54      	ldr	r2, [pc, #336]	; (80087fc <HAL_DMA_Init+0x674>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d04f      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a53      	ldr	r2, [pc, #332]	; (8008800 <HAL_DMA_Init+0x678>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d04a      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a51      	ldr	r2, [pc, #324]	; (8008804 <HAL_DMA_Init+0x67c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d045      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a50      	ldr	r2, [pc, #320]	; (8008808 <HAL_DMA_Init+0x680>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d040      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a4e      	ldr	r2, [pc, #312]	; (800880c <HAL_DMA_Init+0x684>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d03b      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a4d      	ldr	r2, [pc, #308]	; (8008810 <HAL_DMA_Init+0x688>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d036      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a4b      	ldr	r2, [pc, #300]	; (8008814 <HAL_DMA_Init+0x68c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d031      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a4a      	ldr	r2, [pc, #296]	; (8008818 <HAL_DMA_Init+0x690>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d02c      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a48      	ldr	r2, [pc, #288]	; (800881c <HAL_DMA_Init+0x694>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d027      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a47      	ldr	r2, [pc, #284]	; (8008820 <HAL_DMA_Init+0x698>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d022      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a45      	ldr	r2, [pc, #276]	; (8008824 <HAL_DMA_Init+0x69c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d01d      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a44      	ldr	r2, [pc, #272]	; (8008828 <HAL_DMA_Init+0x6a0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d018      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a42      	ldr	r2, [pc, #264]	; (800882c <HAL_DMA_Init+0x6a4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d013      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a41      	ldr	r2, [pc, #260]	; (8008830 <HAL_DMA_Init+0x6a8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d00e      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a3f      	ldr	r2, [pc, #252]	; (8008834 <HAL_DMA_Init+0x6ac>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d009      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a3e      	ldr	r2, [pc, #248]	; (8008838 <HAL_DMA_Init+0x6b0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d004      	beq.n	800874e <HAL_DMA_Init+0x5c6>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a3c      	ldr	r2, [pc, #240]	; (800883c <HAL_DMA_Init+0x6b4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d101      	bne.n	8008752 <HAL_DMA_Init+0x5ca>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <HAL_DMA_Init+0x5cc>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d032      	beq.n	80087be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f002 fa5d 	bl	800ac18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b80      	cmp	r3, #128	; 0x80
 8008764:	d102      	bne.n	800876c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008780:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <HAL_DMA_Init+0x624>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b08      	cmp	r3, #8
 8008790:	d80c      	bhi.n	80087ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f002 fada 	bl	800ad4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	e008      	b.n	80087be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	a7fdabf8 	.word	0xa7fdabf8
 80087dc:	cccccccd 	.word	0xcccccccd
 80087e0:	40020010 	.word	0x40020010
 80087e4:	40020028 	.word	0x40020028
 80087e8:	40020040 	.word	0x40020040
 80087ec:	40020058 	.word	0x40020058
 80087f0:	40020070 	.word	0x40020070
 80087f4:	40020088 	.word	0x40020088
 80087f8:	400200a0 	.word	0x400200a0
 80087fc:	400200b8 	.word	0x400200b8
 8008800:	40020410 	.word	0x40020410
 8008804:	40020428 	.word	0x40020428
 8008808:	40020440 	.word	0x40020440
 800880c:	40020458 	.word	0x40020458
 8008810:	40020470 	.word	0x40020470
 8008814:	40020488 	.word	0x40020488
 8008818:	400204a0 	.word	0x400204a0
 800881c:	400204b8 	.word	0x400204b8
 8008820:	58025408 	.word	0x58025408
 8008824:	5802541c 	.word	0x5802541c
 8008828:	58025430 	.word	0x58025430
 800882c:	58025444 	.word	0x58025444
 8008830:	58025458 	.word	0x58025458
 8008834:	5802546c 	.word	0x5802546c
 8008838:	58025480 	.word	0x58025480
 800883c:	58025494 	.word	0x58025494

08008840 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e226      	b.n	8008caa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <HAL_DMA_Start_IT+0x2a>
 8008866:	2302      	movs	r3, #2
 8008868:	e21f      	b.n	8008caa <HAL_DMA_Start_IT+0x46a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b01      	cmp	r3, #1
 800887c:	f040 820a 	bne.w	8008c94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a68      	ldr	r2, [pc, #416]	; (8008a34 <HAL_DMA_Start_IT+0x1f4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d04a      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a66      	ldr	r2, [pc, #408]	; (8008a38 <HAL_DMA_Start_IT+0x1f8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d045      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a65      	ldr	r2, [pc, #404]	; (8008a3c <HAL_DMA_Start_IT+0x1fc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d040      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a63      	ldr	r2, [pc, #396]	; (8008a40 <HAL_DMA_Start_IT+0x200>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d03b      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a62      	ldr	r2, [pc, #392]	; (8008a44 <HAL_DMA_Start_IT+0x204>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d036      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a60      	ldr	r2, [pc, #384]	; (8008a48 <HAL_DMA_Start_IT+0x208>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d031      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a5f      	ldr	r2, [pc, #380]	; (8008a4c <HAL_DMA_Start_IT+0x20c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d02c      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a5d      	ldr	r2, [pc, #372]	; (8008a50 <HAL_DMA_Start_IT+0x210>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d027      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a5c      	ldr	r2, [pc, #368]	; (8008a54 <HAL_DMA_Start_IT+0x214>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d022      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a5a      	ldr	r2, [pc, #360]	; (8008a58 <HAL_DMA_Start_IT+0x218>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01d      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a59      	ldr	r2, [pc, #356]	; (8008a5c <HAL_DMA_Start_IT+0x21c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d018      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a57      	ldr	r2, [pc, #348]	; (8008a60 <HAL_DMA_Start_IT+0x220>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a56      	ldr	r2, [pc, #344]	; (8008a64 <HAL_DMA_Start_IT+0x224>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a54      	ldr	r2, [pc, #336]	; (8008a68 <HAL_DMA_Start_IT+0x228>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a53      	ldr	r2, [pc, #332]	; (8008a6c <HAL_DMA_Start_IT+0x22c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_DMA_Start_IT+0xee>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a51      	ldr	r2, [pc, #324]	; (8008a70 <HAL_DMA_Start_IT+0x230>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d108      	bne.n	8008940 <HAL_DMA_Start_IT+0x100>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e007      	b.n	8008950 <HAL_DMA_Start_IT+0x110>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f001 fe84 	bl	800a664 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a34      	ldr	r2, [pc, #208]	; (8008a34 <HAL_DMA_Start_IT+0x1f4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d04a      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a33      	ldr	r2, [pc, #204]	; (8008a38 <HAL_DMA_Start_IT+0x1f8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d045      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a31      	ldr	r2, [pc, #196]	; (8008a3c <HAL_DMA_Start_IT+0x1fc>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d040      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a30      	ldr	r2, [pc, #192]	; (8008a40 <HAL_DMA_Start_IT+0x200>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d03b      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a2e      	ldr	r2, [pc, #184]	; (8008a44 <HAL_DMA_Start_IT+0x204>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d036      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a2d      	ldr	r2, [pc, #180]	; (8008a48 <HAL_DMA_Start_IT+0x208>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d031      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a2b      	ldr	r2, [pc, #172]	; (8008a4c <HAL_DMA_Start_IT+0x20c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d02c      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a2a      	ldr	r2, [pc, #168]	; (8008a50 <HAL_DMA_Start_IT+0x210>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d027      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a28      	ldr	r2, [pc, #160]	; (8008a54 <HAL_DMA_Start_IT+0x214>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d022      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a27      	ldr	r2, [pc, #156]	; (8008a58 <HAL_DMA_Start_IT+0x218>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d01d      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a25      	ldr	r2, [pc, #148]	; (8008a5c <HAL_DMA_Start_IT+0x21c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d018      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a24      	ldr	r2, [pc, #144]	; (8008a60 <HAL_DMA_Start_IT+0x220>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d013      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a22      	ldr	r2, [pc, #136]	; (8008a64 <HAL_DMA_Start_IT+0x224>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d00e      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a21      	ldr	r2, [pc, #132]	; (8008a68 <HAL_DMA_Start_IT+0x228>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d009      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a1f      	ldr	r2, [pc, #124]	; (8008a6c <HAL_DMA_Start_IT+0x22c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <HAL_DMA_Start_IT+0x1bc>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a1e      	ldr	r2, [pc, #120]	; (8008a70 <HAL_DMA_Start_IT+0x230>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d101      	bne.n	8008a00 <HAL_DMA_Start_IT+0x1c0>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <HAL_DMA_Start_IT+0x1c2>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d036      	beq.n	8008a74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f023 021e 	bic.w	r2, r3, #30
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0216 	orr.w	r2, r2, #22
 8008a18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d03e      	beq.n	8008aa0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0208 	orr.w	r2, r2, #8
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e035      	b.n	8008aa0 <HAL_DMA_Start_IT+0x260>
 8008a34:	40020010 	.word	0x40020010
 8008a38:	40020028 	.word	0x40020028
 8008a3c:	40020040 	.word	0x40020040
 8008a40:	40020058 	.word	0x40020058
 8008a44:	40020070 	.word	0x40020070
 8008a48:	40020088 	.word	0x40020088
 8008a4c:	400200a0 	.word	0x400200a0
 8008a50:	400200b8 	.word	0x400200b8
 8008a54:	40020410 	.word	0x40020410
 8008a58:	40020428 	.word	0x40020428
 8008a5c:	40020440 	.word	0x40020440
 8008a60:	40020458 	.word	0x40020458
 8008a64:	40020470 	.word	0x40020470
 8008a68:	40020488 	.word	0x40020488
 8008a6c:	400204a0 	.word	0x400204a0
 8008a70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f023 020e 	bic.w	r2, r3, #14
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 020a 	orr.w	r2, r2, #10
 8008a86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0204 	orr.w	r2, r2, #4
 8008a9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a83      	ldr	r2, [pc, #524]	; (8008cb4 <HAL_DMA_Start_IT+0x474>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d072      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a82      	ldr	r2, [pc, #520]	; (8008cb8 <HAL_DMA_Start_IT+0x478>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d06d      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a80      	ldr	r2, [pc, #512]	; (8008cbc <HAL_DMA_Start_IT+0x47c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d068      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a7f      	ldr	r2, [pc, #508]	; (8008cc0 <HAL_DMA_Start_IT+0x480>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d063      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a7d      	ldr	r2, [pc, #500]	; (8008cc4 <HAL_DMA_Start_IT+0x484>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d05e      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a7c      	ldr	r2, [pc, #496]	; (8008cc8 <HAL_DMA_Start_IT+0x488>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d059      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a7a      	ldr	r2, [pc, #488]	; (8008ccc <HAL_DMA_Start_IT+0x48c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d054      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a79      	ldr	r2, [pc, #484]	; (8008cd0 <HAL_DMA_Start_IT+0x490>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d04f      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a77      	ldr	r2, [pc, #476]	; (8008cd4 <HAL_DMA_Start_IT+0x494>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d04a      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a76      	ldr	r2, [pc, #472]	; (8008cd8 <HAL_DMA_Start_IT+0x498>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d045      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a74      	ldr	r2, [pc, #464]	; (8008cdc <HAL_DMA_Start_IT+0x49c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d040      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a73      	ldr	r2, [pc, #460]	; (8008ce0 <HAL_DMA_Start_IT+0x4a0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d03b      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a71      	ldr	r2, [pc, #452]	; (8008ce4 <HAL_DMA_Start_IT+0x4a4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d036      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a70      	ldr	r2, [pc, #448]	; (8008ce8 <HAL_DMA_Start_IT+0x4a8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d031      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a6e      	ldr	r2, [pc, #440]	; (8008cec <HAL_DMA_Start_IT+0x4ac>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d02c      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a6d      	ldr	r2, [pc, #436]	; (8008cf0 <HAL_DMA_Start_IT+0x4b0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d027      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a6b      	ldr	r2, [pc, #428]	; (8008cf4 <HAL_DMA_Start_IT+0x4b4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d022      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a6a      	ldr	r2, [pc, #424]	; (8008cf8 <HAL_DMA_Start_IT+0x4b8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d01d      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a68      	ldr	r2, [pc, #416]	; (8008cfc <HAL_DMA_Start_IT+0x4bc>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d018      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a67      	ldr	r2, [pc, #412]	; (8008d00 <HAL_DMA_Start_IT+0x4c0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d013      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a65      	ldr	r2, [pc, #404]	; (8008d04 <HAL_DMA_Start_IT+0x4c4>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00e      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a64      	ldr	r2, [pc, #400]	; (8008d08 <HAL_DMA_Start_IT+0x4c8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d009      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a62      	ldr	r2, [pc, #392]	; (8008d0c <HAL_DMA_Start_IT+0x4cc>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <HAL_DMA_Start_IT+0x350>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a61      	ldr	r2, [pc, #388]	; (8008d10 <HAL_DMA_Start_IT+0x4d0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d101      	bne.n	8008b94 <HAL_DMA_Start_IT+0x354>
 8008b90:	2301      	movs	r3, #1
 8008b92:	e000      	b.n	8008b96 <HAL_DMA_Start_IT+0x356>
 8008b94:	2300      	movs	r3, #0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01a      	beq.n	8008bd0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a37      	ldr	r2, [pc, #220]	; (8008cb4 <HAL_DMA_Start_IT+0x474>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d04a      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a36      	ldr	r2, [pc, #216]	; (8008cb8 <HAL_DMA_Start_IT+0x478>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d045      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a34      	ldr	r2, [pc, #208]	; (8008cbc <HAL_DMA_Start_IT+0x47c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d040      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a33      	ldr	r2, [pc, #204]	; (8008cc0 <HAL_DMA_Start_IT+0x480>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d03b      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a31      	ldr	r2, [pc, #196]	; (8008cc4 <HAL_DMA_Start_IT+0x484>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d036      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a30      	ldr	r2, [pc, #192]	; (8008cc8 <HAL_DMA_Start_IT+0x488>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d031      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a2e      	ldr	r2, [pc, #184]	; (8008ccc <HAL_DMA_Start_IT+0x48c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d02c      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a2d      	ldr	r2, [pc, #180]	; (8008cd0 <HAL_DMA_Start_IT+0x490>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d027      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a2b      	ldr	r2, [pc, #172]	; (8008cd4 <HAL_DMA_Start_IT+0x494>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d022      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <HAL_DMA_Start_IT+0x498>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d01d      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a28      	ldr	r2, [pc, #160]	; (8008cdc <HAL_DMA_Start_IT+0x49c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d018      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a27      	ldr	r2, [pc, #156]	; (8008ce0 <HAL_DMA_Start_IT+0x4a0>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d013      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a25      	ldr	r2, [pc, #148]	; (8008ce4 <HAL_DMA_Start_IT+0x4a4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00e      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a24      	ldr	r2, [pc, #144]	; (8008ce8 <HAL_DMA_Start_IT+0x4a8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d009      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a22      	ldr	r2, [pc, #136]	; (8008cec <HAL_DMA_Start_IT+0x4ac>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d004      	beq.n	8008c70 <HAL_DMA_Start_IT+0x430>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a21      	ldr	r2, [pc, #132]	; (8008cf0 <HAL_DMA_Start_IT+0x4b0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d108      	bne.n	8008c82 <HAL_DMA_Start_IT+0x442>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e012      	b.n	8008ca8 <HAL_DMA_Start_IT+0x468>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e009      	b.n	8008ca8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40020010 	.word	0x40020010
 8008cb8:	40020028 	.word	0x40020028
 8008cbc:	40020040 	.word	0x40020040
 8008cc0:	40020058 	.word	0x40020058
 8008cc4:	40020070 	.word	0x40020070
 8008cc8:	40020088 	.word	0x40020088
 8008ccc:	400200a0 	.word	0x400200a0
 8008cd0:	400200b8 	.word	0x400200b8
 8008cd4:	40020410 	.word	0x40020410
 8008cd8:	40020428 	.word	0x40020428
 8008cdc:	40020440 	.word	0x40020440
 8008ce0:	40020458 	.word	0x40020458
 8008ce4:	40020470 	.word	0x40020470
 8008ce8:	40020488 	.word	0x40020488
 8008cec:	400204a0 	.word	0x400204a0
 8008cf0:	400204b8 	.word	0x400204b8
 8008cf4:	58025408 	.word	0x58025408
 8008cf8:	5802541c 	.word	0x5802541c
 8008cfc:	58025430 	.word	0x58025430
 8008d00:	58025444 	.word	0x58025444
 8008d04:	58025458 	.word	0x58025458
 8008d08:	5802546c 	.word	0x5802546c
 8008d0c:	58025480 	.word	0x58025480
 8008d10:	58025494 	.word	0x58025494

08008d14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008d1c:	f7fd f90c 	bl	8005f38 <HAL_GetTick>
 8008d20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e2dc      	b.n	80092e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d008      	beq.n	8008d4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2280      	movs	r2, #128	; 0x80
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e2cd      	b.n	80092e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a76      	ldr	r2, [pc, #472]	; (8008f28 <HAL_DMA_Abort+0x214>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d04a      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a74      	ldr	r2, [pc, #464]	; (8008f2c <HAL_DMA_Abort+0x218>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d045      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a73      	ldr	r2, [pc, #460]	; (8008f30 <HAL_DMA_Abort+0x21c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d040      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a71      	ldr	r2, [pc, #452]	; (8008f34 <HAL_DMA_Abort+0x220>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d03b      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a70      	ldr	r2, [pc, #448]	; (8008f38 <HAL_DMA_Abort+0x224>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d036      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a6e      	ldr	r2, [pc, #440]	; (8008f3c <HAL_DMA_Abort+0x228>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d031      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a6d      	ldr	r2, [pc, #436]	; (8008f40 <HAL_DMA_Abort+0x22c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d02c      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a6b      	ldr	r2, [pc, #428]	; (8008f44 <HAL_DMA_Abort+0x230>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d027      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a6a      	ldr	r2, [pc, #424]	; (8008f48 <HAL_DMA_Abort+0x234>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d022      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a68      	ldr	r2, [pc, #416]	; (8008f4c <HAL_DMA_Abort+0x238>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01d      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a67      	ldr	r2, [pc, #412]	; (8008f50 <HAL_DMA_Abort+0x23c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d018      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a65      	ldr	r2, [pc, #404]	; (8008f54 <HAL_DMA_Abort+0x240>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d013      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a64      	ldr	r2, [pc, #400]	; (8008f58 <HAL_DMA_Abort+0x244>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00e      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a62      	ldr	r2, [pc, #392]	; (8008f5c <HAL_DMA_Abort+0x248>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d009      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a61      	ldr	r2, [pc, #388]	; (8008f60 <HAL_DMA_Abort+0x24c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d004      	beq.n	8008dea <HAL_DMA_Abort+0xd6>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a5f      	ldr	r2, [pc, #380]	; (8008f64 <HAL_DMA_Abort+0x250>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d101      	bne.n	8008dee <HAL_DMA_Abort+0xda>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <HAL_DMA_Abort+0xdc>
 8008dee:	2300      	movs	r3, #0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d013      	beq.n	8008e1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 021e 	bic.w	r2, r2, #30
 8008e02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	695a      	ldr	r2, [r3, #20]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	617b      	str	r3, [r7, #20]
 8008e1a:	e00a      	b.n	8008e32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 020e 	bic.w	r2, r2, #14
 8008e2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a3c      	ldr	r2, [pc, #240]	; (8008f28 <HAL_DMA_Abort+0x214>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d072      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a3a      	ldr	r2, [pc, #232]	; (8008f2c <HAL_DMA_Abort+0x218>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d06d      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a39      	ldr	r2, [pc, #228]	; (8008f30 <HAL_DMA_Abort+0x21c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d068      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a37      	ldr	r2, [pc, #220]	; (8008f34 <HAL_DMA_Abort+0x220>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d063      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a36      	ldr	r2, [pc, #216]	; (8008f38 <HAL_DMA_Abort+0x224>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d05e      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a34      	ldr	r2, [pc, #208]	; (8008f3c <HAL_DMA_Abort+0x228>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d059      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a33      	ldr	r2, [pc, #204]	; (8008f40 <HAL_DMA_Abort+0x22c>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d054      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a31      	ldr	r2, [pc, #196]	; (8008f44 <HAL_DMA_Abort+0x230>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d04f      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a30      	ldr	r2, [pc, #192]	; (8008f48 <HAL_DMA_Abort+0x234>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d04a      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a2e      	ldr	r2, [pc, #184]	; (8008f4c <HAL_DMA_Abort+0x238>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d045      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a2d      	ldr	r2, [pc, #180]	; (8008f50 <HAL_DMA_Abort+0x23c>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d040      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a2b      	ldr	r2, [pc, #172]	; (8008f54 <HAL_DMA_Abort+0x240>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d03b      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a2a      	ldr	r2, [pc, #168]	; (8008f58 <HAL_DMA_Abort+0x244>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d036      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a28      	ldr	r2, [pc, #160]	; (8008f5c <HAL_DMA_Abort+0x248>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d031      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a27      	ldr	r2, [pc, #156]	; (8008f60 <HAL_DMA_Abort+0x24c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d02c      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a25      	ldr	r2, [pc, #148]	; (8008f64 <HAL_DMA_Abort+0x250>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d027      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a24      	ldr	r2, [pc, #144]	; (8008f68 <HAL_DMA_Abort+0x254>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d022      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <HAL_DMA_Abort+0x258>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d01d      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a21      	ldr	r2, [pc, #132]	; (8008f70 <HAL_DMA_Abort+0x25c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d018      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a1f      	ldr	r2, [pc, #124]	; (8008f74 <HAL_DMA_Abort+0x260>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d013      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <HAL_DMA_Abort+0x264>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00e      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1c      	ldr	r2, [pc, #112]	; (8008f7c <HAL_DMA_Abort+0x268>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d009      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a1b      	ldr	r2, [pc, #108]	; (8008f80 <HAL_DMA_Abort+0x26c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d004      	beq.n	8008f22 <HAL_DMA_Abort+0x20e>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a19      	ldr	r2, [pc, #100]	; (8008f84 <HAL_DMA_Abort+0x270>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d132      	bne.n	8008f88 <HAL_DMA_Abort+0x274>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e031      	b.n	8008f8a <HAL_DMA_Abort+0x276>
 8008f26:	bf00      	nop
 8008f28:	40020010 	.word	0x40020010
 8008f2c:	40020028 	.word	0x40020028
 8008f30:	40020040 	.word	0x40020040
 8008f34:	40020058 	.word	0x40020058
 8008f38:	40020070 	.word	0x40020070
 8008f3c:	40020088 	.word	0x40020088
 8008f40:	400200a0 	.word	0x400200a0
 8008f44:	400200b8 	.word	0x400200b8
 8008f48:	40020410 	.word	0x40020410
 8008f4c:	40020428 	.word	0x40020428
 8008f50:	40020440 	.word	0x40020440
 8008f54:	40020458 	.word	0x40020458
 8008f58:	40020470 	.word	0x40020470
 8008f5c:	40020488 	.word	0x40020488
 8008f60:	400204a0 	.word	0x400204a0
 8008f64:	400204b8 	.word	0x400204b8
 8008f68:	58025408 	.word	0x58025408
 8008f6c:	5802541c 	.word	0x5802541c
 8008f70:	58025430 	.word	0x58025430
 8008f74:	58025444 	.word	0x58025444
 8008f78:	58025458 	.word	0x58025458
 8008f7c:	5802546c 	.word	0x5802546c
 8008f80:	58025480 	.word	0x58025480
 8008f84:	58025494 	.word	0x58025494
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d007      	beq.n	8008f9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a6d      	ldr	r2, [pc, #436]	; (8009158 <HAL_DMA_Abort+0x444>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d04a      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a6b      	ldr	r2, [pc, #428]	; (800915c <HAL_DMA_Abort+0x448>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d045      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a6a      	ldr	r2, [pc, #424]	; (8009160 <HAL_DMA_Abort+0x44c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d040      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a68      	ldr	r2, [pc, #416]	; (8009164 <HAL_DMA_Abort+0x450>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d03b      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a67      	ldr	r2, [pc, #412]	; (8009168 <HAL_DMA_Abort+0x454>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d036      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a65      	ldr	r2, [pc, #404]	; (800916c <HAL_DMA_Abort+0x458>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d031      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a64      	ldr	r2, [pc, #400]	; (8009170 <HAL_DMA_Abort+0x45c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d02c      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a62      	ldr	r2, [pc, #392]	; (8009174 <HAL_DMA_Abort+0x460>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d027      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a61      	ldr	r2, [pc, #388]	; (8009178 <HAL_DMA_Abort+0x464>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d022      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a5f      	ldr	r2, [pc, #380]	; (800917c <HAL_DMA_Abort+0x468>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d01d      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a5e      	ldr	r2, [pc, #376]	; (8009180 <HAL_DMA_Abort+0x46c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d018      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a5c      	ldr	r2, [pc, #368]	; (8009184 <HAL_DMA_Abort+0x470>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d013      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a5b      	ldr	r2, [pc, #364]	; (8009188 <HAL_DMA_Abort+0x474>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00e      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a59      	ldr	r2, [pc, #356]	; (800918c <HAL_DMA_Abort+0x478>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d009      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a58      	ldr	r2, [pc, #352]	; (8009190 <HAL_DMA_Abort+0x47c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d004      	beq.n	800903e <HAL_DMA_Abort+0x32a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a56      	ldr	r2, [pc, #344]	; (8009194 <HAL_DMA_Abort+0x480>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d108      	bne.n	8009050 <HAL_DMA_Abort+0x33c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0201 	bic.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e007      	b.n	8009060 <HAL_DMA_Abort+0x34c>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 0201 	bic.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009060:	e013      	b.n	800908a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009062:	f7fc ff69 	bl	8005f38 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b05      	cmp	r3, #5
 800906e:	d90c      	bls.n	800908a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2203      	movs	r2, #3
 800907a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e12d      	b.n	80092e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e5      	bne.n	8009062 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a2f      	ldr	r2, [pc, #188]	; (8009158 <HAL_DMA_Abort+0x444>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d04a      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2d      	ldr	r2, [pc, #180]	; (800915c <HAL_DMA_Abort+0x448>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d045      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2c      	ldr	r2, [pc, #176]	; (8009160 <HAL_DMA_Abort+0x44c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d040      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a2a      	ldr	r2, [pc, #168]	; (8009164 <HAL_DMA_Abort+0x450>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d03b      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a29      	ldr	r2, [pc, #164]	; (8009168 <HAL_DMA_Abort+0x454>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d036      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a27      	ldr	r2, [pc, #156]	; (800916c <HAL_DMA_Abort+0x458>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d031      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a26      	ldr	r2, [pc, #152]	; (8009170 <HAL_DMA_Abort+0x45c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d02c      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a24      	ldr	r2, [pc, #144]	; (8009174 <HAL_DMA_Abort+0x460>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d027      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a23      	ldr	r2, [pc, #140]	; (8009178 <HAL_DMA_Abort+0x464>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d022      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a21      	ldr	r2, [pc, #132]	; (800917c <HAL_DMA_Abort+0x468>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d01d      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a20      	ldr	r2, [pc, #128]	; (8009180 <HAL_DMA_Abort+0x46c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d018      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1e      	ldr	r2, [pc, #120]	; (8009184 <HAL_DMA_Abort+0x470>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d013      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1d      	ldr	r2, [pc, #116]	; (8009188 <HAL_DMA_Abort+0x474>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00e      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1b      	ldr	r2, [pc, #108]	; (800918c <HAL_DMA_Abort+0x478>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d009      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a1a      	ldr	r2, [pc, #104]	; (8009190 <HAL_DMA_Abort+0x47c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d004      	beq.n	8009136 <HAL_DMA_Abort+0x422>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a18      	ldr	r2, [pc, #96]	; (8009194 <HAL_DMA_Abort+0x480>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d101      	bne.n	800913a <HAL_DMA_Abort+0x426>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <HAL_DMA_Abort+0x428>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d02b      	beq.n	8009198 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009144:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	223f      	movs	r2, #63	; 0x3f
 8009150:	409a      	lsls	r2, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	609a      	str	r2, [r3, #8]
 8009156:	e02a      	b.n	80091ae <HAL_DMA_Abort+0x49a>
 8009158:	40020010 	.word	0x40020010
 800915c:	40020028 	.word	0x40020028
 8009160:	40020040 	.word	0x40020040
 8009164:	40020058 	.word	0x40020058
 8009168:	40020070 	.word	0x40020070
 800916c:	40020088 	.word	0x40020088
 8009170:	400200a0 	.word	0x400200a0
 8009174:	400200b8 	.word	0x400200b8
 8009178:	40020410 	.word	0x40020410
 800917c:	40020428 	.word	0x40020428
 8009180:	40020440 	.word	0x40020440
 8009184:	40020458 	.word	0x40020458
 8009188:	40020470 	.word	0x40020470
 800918c:	40020488 	.word	0x40020488
 8009190:	400204a0 	.word	0x400204a0
 8009194:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a2:	f003 031f 	and.w	r3, r3, #31
 80091a6:	2201      	movs	r2, #1
 80091a8:	409a      	lsls	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a4f      	ldr	r2, [pc, #316]	; (80092f0 <HAL_DMA_Abort+0x5dc>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d072      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a4d      	ldr	r2, [pc, #308]	; (80092f4 <HAL_DMA_Abort+0x5e0>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d06d      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a4c      	ldr	r2, [pc, #304]	; (80092f8 <HAL_DMA_Abort+0x5e4>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d068      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a4a      	ldr	r2, [pc, #296]	; (80092fc <HAL_DMA_Abort+0x5e8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d063      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a49      	ldr	r2, [pc, #292]	; (8009300 <HAL_DMA_Abort+0x5ec>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d05e      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a47      	ldr	r2, [pc, #284]	; (8009304 <HAL_DMA_Abort+0x5f0>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d059      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a46      	ldr	r2, [pc, #280]	; (8009308 <HAL_DMA_Abort+0x5f4>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d054      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a44      	ldr	r2, [pc, #272]	; (800930c <HAL_DMA_Abort+0x5f8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d04f      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a43      	ldr	r2, [pc, #268]	; (8009310 <HAL_DMA_Abort+0x5fc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d04a      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a41      	ldr	r2, [pc, #260]	; (8009314 <HAL_DMA_Abort+0x600>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d045      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a40      	ldr	r2, [pc, #256]	; (8009318 <HAL_DMA_Abort+0x604>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d040      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a3e      	ldr	r2, [pc, #248]	; (800931c <HAL_DMA_Abort+0x608>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d03b      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a3d      	ldr	r2, [pc, #244]	; (8009320 <HAL_DMA_Abort+0x60c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d036      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a3b      	ldr	r2, [pc, #236]	; (8009324 <HAL_DMA_Abort+0x610>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d031      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a3a      	ldr	r2, [pc, #232]	; (8009328 <HAL_DMA_Abort+0x614>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d02c      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a38      	ldr	r2, [pc, #224]	; (800932c <HAL_DMA_Abort+0x618>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d027      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a37      	ldr	r2, [pc, #220]	; (8009330 <HAL_DMA_Abort+0x61c>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d022      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a35      	ldr	r2, [pc, #212]	; (8009334 <HAL_DMA_Abort+0x620>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d01d      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a34      	ldr	r2, [pc, #208]	; (8009338 <HAL_DMA_Abort+0x624>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d018      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a32      	ldr	r2, [pc, #200]	; (800933c <HAL_DMA_Abort+0x628>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d013      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a31      	ldr	r2, [pc, #196]	; (8009340 <HAL_DMA_Abort+0x62c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00e      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a2f      	ldr	r2, [pc, #188]	; (8009344 <HAL_DMA_Abort+0x630>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d009      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a2e      	ldr	r2, [pc, #184]	; (8009348 <HAL_DMA_Abort+0x634>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d004      	beq.n	800929e <HAL_DMA_Abort+0x58a>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a2c      	ldr	r2, [pc, #176]	; (800934c <HAL_DMA_Abort+0x638>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d101      	bne.n	80092a2 <HAL_DMA_Abort+0x58e>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <HAL_DMA_Abort+0x590>
 80092a2:	2300      	movs	r3, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d015      	beq.n	80092d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80092b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00c      	beq.n	80092d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80092d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40020010 	.word	0x40020010
 80092f4:	40020028 	.word	0x40020028
 80092f8:	40020040 	.word	0x40020040
 80092fc:	40020058 	.word	0x40020058
 8009300:	40020070 	.word	0x40020070
 8009304:	40020088 	.word	0x40020088
 8009308:	400200a0 	.word	0x400200a0
 800930c:	400200b8 	.word	0x400200b8
 8009310:	40020410 	.word	0x40020410
 8009314:	40020428 	.word	0x40020428
 8009318:	40020440 	.word	0x40020440
 800931c:	40020458 	.word	0x40020458
 8009320:	40020470 	.word	0x40020470
 8009324:	40020488 	.word	0x40020488
 8009328:	400204a0 	.word	0x400204a0
 800932c:	400204b8 	.word	0x400204b8
 8009330:	58025408 	.word	0x58025408
 8009334:	5802541c 	.word	0x5802541c
 8009338:	58025430 	.word	0x58025430
 800933c:	58025444 	.word	0x58025444
 8009340:	58025458 	.word	0x58025458
 8009344:	5802546c 	.word	0x5802546c
 8009348:	58025480 	.word	0x58025480
 800934c:	58025494 	.word	0x58025494

08009350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e237      	b.n	80097d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d004      	beq.n	8009378 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2280      	movs	r2, #128	; 0x80
 8009372:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e22c      	b.n	80097d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a5c      	ldr	r2, [pc, #368]	; (80094f0 <HAL_DMA_Abort_IT+0x1a0>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d04a      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a5b      	ldr	r2, [pc, #364]	; (80094f4 <HAL_DMA_Abort_IT+0x1a4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d045      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a59      	ldr	r2, [pc, #356]	; (80094f8 <HAL_DMA_Abort_IT+0x1a8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d040      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a58      	ldr	r2, [pc, #352]	; (80094fc <HAL_DMA_Abort_IT+0x1ac>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d03b      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a56      	ldr	r2, [pc, #344]	; (8009500 <HAL_DMA_Abort_IT+0x1b0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d036      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a55      	ldr	r2, [pc, #340]	; (8009504 <HAL_DMA_Abort_IT+0x1b4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d031      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a53      	ldr	r2, [pc, #332]	; (8009508 <HAL_DMA_Abort_IT+0x1b8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d02c      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a52      	ldr	r2, [pc, #328]	; (800950c <HAL_DMA_Abort_IT+0x1bc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d027      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a50      	ldr	r2, [pc, #320]	; (8009510 <HAL_DMA_Abort_IT+0x1c0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d022      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a4f      	ldr	r2, [pc, #316]	; (8009514 <HAL_DMA_Abort_IT+0x1c4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d01d      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a4d      	ldr	r2, [pc, #308]	; (8009518 <HAL_DMA_Abort_IT+0x1c8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d018      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a4c      	ldr	r2, [pc, #304]	; (800951c <HAL_DMA_Abort_IT+0x1cc>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d013      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a4a      	ldr	r2, [pc, #296]	; (8009520 <HAL_DMA_Abort_IT+0x1d0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00e      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a49      	ldr	r2, [pc, #292]	; (8009524 <HAL_DMA_Abort_IT+0x1d4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d009      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a47      	ldr	r2, [pc, #284]	; (8009528 <HAL_DMA_Abort_IT+0x1d8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d004      	beq.n	8009418 <HAL_DMA_Abort_IT+0xc8>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a46      	ldr	r2, [pc, #280]	; (800952c <HAL_DMA_Abort_IT+0x1dc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d101      	bne.n	800941c <HAL_DMA_Abort_IT+0xcc>
 8009418:	2301      	movs	r3, #1
 800941a:	e000      	b.n	800941e <HAL_DMA_Abort_IT+0xce>
 800941c:	2300      	movs	r3, #0
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8086 	beq.w	8009530 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2204      	movs	r2, #4
 8009428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a2f      	ldr	r2, [pc, #188]	; (80094f0 <HAL_DMA_Abort_IT+0x1a0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d04a      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a2e      	ldr	r2, [pc, #184]	; (80094f4 <HAL_DMA_Abort_IT+0x1a4>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d045      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a2c      	ldr	r2, [pc, #176]	; (80094f8 <HAL_DMA_Abort_IT+0x1a8>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d040      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a2b      	ldr	r2, [pc, #172]	; (80094fc <HAL_DMA_Abort_IT+0x1ac>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d03b      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a29      	ldr	r2, [pc, #164]	; (8009500 <HAL_DMA_Abort_IT+0x1b0>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d036      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a28      	ldr	r2, [pc, #160]	; (8009504 <HAL_DMA_Abort_IT+0x1b4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d031      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a26      	ldr	r2, [pc, #152]	; (8009508 <HAL_DMA_Abort_IT+0x1b8>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d02c      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a25      	ldr	r2, [pc, #148]	; (800950c <HAL_DMA_Abort_IT+0x1bc>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d027      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a23      	ldr	r2, [pc, #140]	; (8009510 <HAL_DMA_Abort_IT+0x1c0>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d022      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a22      	ldr	r2, [pc, #136]	; (8009514 <HAL_DMA_Abort_IT+0x1c4>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d01d      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a20      	ldr	r2, [pc, #128]	; (8009518 <HAL_DMA_Abort_IT+0x1c8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d018      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1f      	ldr	r2, [pc, #124]	; (800951c <HAL_DMA_Abort_IT+0x1cc>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <HAL_DMA_Abort_IT+0x1d0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00e      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a1c      	ldr	r2, [pc, #112]	; (8009524 <HAL_DMA_Abort_IT+0x1d4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d009      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a1a      	ldr	r2, [pc, #104]	; (8009528 <HAL_DMA_Abort_IT+0x1d8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d004      	beq.n	80094cc <HAL_DMA_Abort_IT+0x17c>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a19      	ldr	r2, [pc, #100]	; (800952c <HAL_DMA_Abort_IT+0x1dc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d108      	bne.n	80094de <HAL_DMA_Abort_IT+0x18e>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e178      	b.n	80097d0 <HAL_DMA_Abort_IT+0x480>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0201 	bic.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	e16f      	b.n	80097d0 <HAL_DMA_Abort_IT+0x480>
 80094f0:	40020010 	.word	0x40020010
 80094f4:	40020028 	.word	0x40020028
 80094f8:	40020040 	.word	0x40020040
 80094fc:	40020058 	.word	0x40020058
 8009500:	40020070 	.word	0x40020070
 8009504:	40020088 	.word	0x40020088
 8009508:	400200a0 	.word	0x400200a0
 800950c:	400200b8 	.word	0x400200b8
 8009510:	40020410 	.word	0x40020410
 8009514:	40020428 	.word	0x40020428
 8009518:	40020440 	.word	0x40020440
 800951c:	40020458 	.word	0x40020458
 8009520:	40020470 	.word	0x40020470
 8009524:	40020488 	.word	0x40020488
 8009528:	400204a0 	.word	0x400204a0
 800952c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 020e 	bic.w	r2, r2, #14
 800953e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a6c      	ldr	r2, [pc, #432]	; (80096f8 <HAL_DMA_Abort_IT+0x3a8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d04a      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a6b      	ldr	r2, [pc, #428]	; (80096fc <HAL_DMA_Abort_IT+0x3ac>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d045      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a69      	ldr	r2, [pc, #420]	; (8009700 <HAL_DMA_Abort_IT+0x3b0>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d040      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a68      	ldr	r2, [pc, #416]	; (8009704 <HAL_DMA_Abort_IT+0x3b4>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d03b      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a66      	ldr	r2, [pc, #408]	; (8009708 <HAL_DMA_Abort_IT+0x3b8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d036      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a65      	ldr	r2, [pc, #404]	; (800970c <HAL_DMA_Abort_IT+0x3bc>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d031      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a63      	ldr	r2, [pc, #396]	; (8009710 <HAL_DMA_Abort_IT+0x3c0>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d02c      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a62      	ldr	r2, [pc, #392]	; (8009714 <HAL_DMA_Abort_IT+0x3c4>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d027      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a60      	ldr	r2, [pc, #384]	; (8009718 <HAL_DMA_Abort_IT+0x3c8>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d022      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a5f      	ldr	r2, [pc, #380]	; (800971c <HAL_DMA_Abort_IT+0x3cc>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d01d      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a5d      	ldr	r2, [pc, #372]	; (8009720 <HAL_DMA_Abort_IT+0x3d0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d018      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a5c      	ldr	r2, [pc, #368]	; (8009724 <HAL_DMA_Abort_IT+0x3d4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d013      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a5a      	ldr	r2, [pc, #360]	; (8009728 <HAL_DMA_Abort_IT+0x3d8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00e      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a59      	ldr	r2, [pc, #356]	; (800972c <HAL_DMA_Abort_IT+0x3dc>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d009      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a57      	ldr	r2, [pc, #348]	; (8009730 <HAL_DMA_Abort_IT+0x3e0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d004      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x290>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a56      	ldr	r2, [pc, #344]	; (8009734 <HAL_DMA_Abort_IT+0x3e4>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d108      	bne.n	80095f2 <HAL_DMA_Abort_IT+0x2a2>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 0201 	bic.w	r2, r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	e007      	b.n	8009602 <HAL_DMA_Abort_IT+0x2b2>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0201 	bic.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a3c      	ldr	r2, [pc, #240]	; (80096f8 <HAL_DMA_Abort_IT+0x3a8>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d072      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a3a      	ldr	r2, [pc, #232]	; (80096fc <HAL_DMA_Abort_IT+0x3ac>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d06d      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a39      	ldr	r2, [pc, #228]	; (8009700 <HAL_DMA_Abort_IT+0x3b0>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d068      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a37      	ldr	r2, [pc, #220]	; (8009704 <HAL_DMA_Abort_IT+0x3b4>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d063      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a36      	ldr	r2, [pc, #216]	; (8009708 <HAL_DMA_Abort_IT+0x3b8>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d05e      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a34      	ldr	r2, [pc, #208]	; (800970c <HAL_DMA_Abort_IT+0x3bc>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d059      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a33      	ldr	r2, [pc, #204]	; (8009710 <HAL_DMA_Abort_IT+0x3c0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d054      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a31      	ldr	r2, [pc, #196]	; (8009714 <HAL_DMA_Abort_IT+0x3c4>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d04f      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a30      	ldr	r2, [pc, #192]	; (8009718 <HAL_DMA_Abort_IT+0x3c8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d04a      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a2e      	ldr	r2, [pc, #184]	; (800971c <HAL_DMA_Abort_IT+0x3cc>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d045      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a2d      	ldr	r2, [pc, #180]	; (8009720 <HAL_DMA_Abort_IT+0x3d0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d040      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a2b      	ldr	r2, [pc, #172]	; (8009724 <HAL_DMA_Abort_IT+0x3d4>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d03b      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a2a      	ldr	r2, [pc, #168]	; (8009728 <HAL_DMA_Abort_IT+0x3d8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d036      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a28      	ldr	r2, [pc, #160]	; (800972c <HAL_DMA_Abort_IT+0x3dc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d031      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a27      	ldr	r2, [pc, #156]	; (8009730 <HAL_DMA_Abort_IT+0x3e0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d02c      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a25      	ldr	r2, [pc, #148]	; (8009734 <HAL_DMA_Abort_IT+0x3e4>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d027      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a24      	ldr	r2, [pc, #144]	; (8009738 <HAL_DMA_Abort_IT+0x3e8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d022      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a22      	ldr	r2, [pc, #136]	; (800973c <HAL_DMA_Abort_IT+0x3ec>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d01d      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a21      	ldr	r2, [pc, #132]	; (8009740 <HAL_DMA_Abort_IT+0x3f0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d018      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a1f      	ldr	r2, [pc, #124]	; (8009744 <HAL_DMA_Abort_IT+0x3f4>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a1e      	ldr	r2, [pc, #120]	; (8009748 <HAL_DMA_Abort_IT+0x3f8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00e      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1c      	ldr	r2, [pc, #112]	; (800974c <HAL_DMA_Abort_IT+0x3fc>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d009      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <HAL_DMA_Abort_IT+0x400>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d004      	beq.n	80096f2 <HAL_DMA_Abort_IT+0x3a2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a19      	ldr	r2, [pc, #100]	; (8009754 <HAL_DMA_Abort_IT+0x404>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d132      	bne.n	8009758 <HAL_DMA_Abort_IT+0x408>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e031      	b.n	800975a <HAL_DMA_Abort_IT+0x40a>
 80096f6:	bf00      	nop
 80096f8:	40020010 	.word	0x40020010
 80096fc:	40020028 	.word	0x40020028
 8009700:	40020040 	.word	0x40020040
 8009704:	40020058 	.word	0x40020058
 8009708:	40020070 	.word	0x40020070
 800970c:	40020088 	.word	0x40020088
 8009710:	400200a0 	.word	0x400200a0
 8009714:	400200b8 	.word	0x400200b8
 8009718:	40020410 	.word	0x40020410
 800971c:	40020428 	.word	0x40020428
 8009720:	40020440 	.word	0x40020440
 8009724:	40020458 	.word	0x40020458
 8009728:	40020470 	.word	0x40020470
 800972c:	40020488 	.word	0x40020488
 8009730:	400204a0 	.word	0x400204a0
 8009734:	400204b8 	.word	0x400204b8
 8009738:	58025408 	.word	0x58025408
 800973c:	5802541c 	.word	0x5802541c
 8009740:	58025430 	.word	0x58025430
 8009744:	58025444 	.word	0x58025444
 8009748:	58025458 	.word	0x58025458
 800974c:	5802546c 	.word	0x5802546c
 8009750:	58025480 	.word	0x58025480
 8009754:	58025494 	.word	0x58025494
 8009758:	2300      	movs	r3, #0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d028      	beq.n	80097b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800976c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009772:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009778:	f003 031f 	and.w	r3, r3, #31
 800977c:	2201      	movs	r2, #1
 800977e:	409a      	lsls	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800978c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00c      	beq.n	80097b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80097ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop

080097dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	; 0x28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80097e8:	4b67      	ldr	r3, [pc, #412]	; (8009988 <HAL_DMA_IRQHandler+0x1ac>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a67      	ldr	r2, [pc, #412]	; (800998c <HAL_DMA_IRQHandler+0x1b0>)
 80097ee:	fba2 2303 	umull	r2, r3, r2, r3
 80097f2:	0a9b      	lsrs	r3, r3, #10
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009800:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a5f      	ldr	r2, [pc, #380]	; (8009990 <HAL_DMA_IRQHandler+0x1b4>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d04a      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a5d      	ldr	r2, [pc, #372]	; (8009994 <HAL_DMA_IRQHandler+0x1b8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d045      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a5c      	ldr	r2, [pc, #368]	; (8009998 <HAL_DMA_IRQHandler+0x1bc>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d040      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a5a      	ldr	r2, [pc, #360]	; (800999c <HAL_DMA_IRQHandler+0x1c0>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d03b      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a59      	ldr	r2, [pc, #356]	; (80099a0 <HAL_DMA_IRQHandler+0x1c4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d036      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a57      	ldr	r2, [pc, #348]	; (80099a4 <HAL_DMA_IRQHandler+0x1c8>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d031      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a56      	ldr	r2, [pc, #344]	; (80099a8 <HAL_DMA_IRQHandler+0x1cc>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d02c      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a54      	ldr	r2, [pc, #336]	; (80099ac <HAL_DMA_IRQHandler+0x1d0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d027      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a53      	ldr	r2, [pc, #332]	; (80099b0 <HAL_DMA_IRQHandler+0x1d4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d022      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a51      	ldr	r2, [pc, #324]	; (80099b4 <HAL_DMA_IRQHandler+0x1d8>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01d      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a50      	ldr	r2, [pc, #320]	; (80099b8 <HAL_DMA_IRQHandler+0x1dc>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d018      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a4e      	ldr	r2, [pc, #312]	; (80099bc <HAL_DMA_IRQHandler+0x1e0>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d013      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a4d      	ldr	r2, [pc, #308]	; (80099c0 <HAL_DMA_IRQHandler+0x1e4>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00e      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a4b      	ldr	r2, [pc, #300]	; (80099c4 <HAL_DMA_IRQHandler+0x1e8>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d009      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a4a      	ldr	r2, [pc, #296]	; (80099c8 <HAL_DMA_IRQHandler+0x1ec>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d004      	beq.n	80098ae <HAL_DMA_IRQHandler+0xd2>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a48      	ldr	r2, [pc, #288]	; (80099cc <HAL_DMA_IRQHandler+0x1f0>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d101      	bne.n	80098b2 <HAL_DMA_IRQHandler+0xd6>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <HAL_DMA_IRQHandler+0xd8>
 80098b2:	2300      	movs	r3, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 842b 	beq.w	800a110 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098be:	f003 031f 	and.w	r3, r3, #31
 80098c2:	2208      	movs	r2, #8
 80098c4:	409a      	lsls	r2, r3
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	4013      	ands	r3, r2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 80a2 	beq.w	8009a14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a2e      	ldr	r2, [pc, #184]	; (8009990 <HAL_DMA_IRQHandler+0x1b4>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d04a      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a2d      	ldr	r2, [pc, #180]	; (8009994 <HAL_DMA_IRQHandler+0x1b8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d045      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a2b      	ldr	r2, [pc, #172]	; (8009998 <HAL_DMA_IRQHandler+0x1bc>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d040      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a2a      	ldr	r2, [pc, #168]	; (800999c <HAL_DMA_IRQHandler+0x1c0>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d03b      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a28      	ldr	r2, [pc, #160]	; (80099a0 <HAL_DMA_IRQHandler+0x1c4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d036      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a27      	ldr	r2, [pc, #156]	; (80099a4 <HAL_DMA_IRQHandler+0x1c8>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d031      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a25      	ldr	r2, [pc, #148]	; (80099a8 <HAL_DMA_IRQHandler+0x1cc>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d02c      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a24      	ldr	r2, [pc, #144]	; (80099ac <HAL_DMA_IRQHandler+0x1d0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d027      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <HAL_DMA_IRQHandler+0x1d4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d022      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a21      	ldr	r2, [pc, #132]	; (80099b4 <HAL_DMA_IRQHandler+0x1d8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d01d      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a1f      	ldr	r2, [pc, #124]	; (80099b8 <HAL_DMA_IRQHandler+0x1dc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d018      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a1e      	ldr	r2, [pc, #120]	; (80099bc <HAL_DMA_IRQHandler+0x1e0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d013      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a1c      	ldr	r2, [pc, #112]	; (80099c0 <HAL_DMA_IRQHandler+0x1e4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d00e      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a1b      	ldr	r2, [pc, #108]	; (80099c4 <HAL_DMA_IRQHandler+0x1e8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d009      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a19      	ldr	r2, [pc, #100]	; (80099c8 <HAL_DMA_IRQHandler+0x1ec>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d004      	beq.n	8009970 <HAL_DMA_IRQHandler+0x194>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a18      	ldr	r2, [pc, #96]	; (80099cc <HAL_DMA_IRQHandler+0x1f0>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d12f      	bne.n	80099d0 <HAL_DMA_IRQHandler+0x1f4>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	2b00      	cmp	r3, #0
 800997c:	bf14      	ite	ne
 800997e:	2301      	movne	r3, #1
 8009980:	2300      	moveq	r3, #0
 8009982:	b2db      	uxtb	r3, r3
 8009984:	e02e      	b.n	80099e4 <HAL_DMA_IRQHandler+0x208>
 8009986:	bf00      	nop
 8009988:	240000c4 	.word	0x240000c4
 800998c:	1b4e81b5 	.word	0x1b4e81b5
 8009990:	40020010 	.word	0x40020010
 8009994:	40020028 	.word	0x40020028
 8009998:	40020040 	.word	0x40020040
 800999c:	40020058 	.word	0x40020058
 80099a0:	40020070 	.word	0x40020070
 80099a4:	40020088 	.word	0x40020088
 80099a8:	400200a0 	.word	0x400200a0
 80099ac:	400200b8 	.word	0x400200b8
 80099b0:	40020410 	.word	0x40020410
 80099b4:	40020428 	.word	0x40020428
 80099b8:	40020440 	.word	0x40020440
 80099bc:	40020458 	.word	0x40020458
 80099c0:	40020470 	.word	0x40020470
 80099c4:	40020488 	.word	0x40020488
 80099c8:	400204a0 	.word	0x400204a0
 80099cc:	400204b8 	.word	0x400204b8
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0308 	and.w	r3, r3, #8
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bf14      	ite	ne
 80099de:	2301      	movne	r3, #1
 80099e0:	2300      	moveq	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d015      	beq.n	8009a14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 0204 	bic.w	r2, r2, #4
 80099f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	2208      	movs	r2, #8
 8009a02:	409a      	lsls	r2, r3
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0c:	f043 0201 	orr.w	r2, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d06e      	beq.n	8009b08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a69      	ldr	r2, [pc, #420]	; (8009bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d04a      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a67      	ldr	r2, [pc, #412]	; (8009bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d045      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a66      	ldr	r2, [pc, #408]	; (8009bdc <HAL_DMA_IRQHandler+0x400>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d040      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a64      	ldr	r2, [pc, #400]	; (8009be0 <HAL_DMA_IRQHandler+0x404>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d03b      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a63      	ldr	r2, [pc, #396]	; (8009be4 <HAL_DMA_IRQHandler+0x408>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d036      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a61      	ldr	r2, [pc, #388]	; (8009be8 <HAL_DMA_IRQHandler+0x40c>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d031      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a60      	ldr	r2, [pc, #384]	; (8009bec <HAL_DMA_IRQHandler+0x410>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d02c      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a5e      	ldr	r2, [pc, #376]	; (8009bf0 <HAL_DMA_IRQHandler+0x414>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d027      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a5d      	ldr	r2, [pc, #372]	; (8009bf4 <HAL_DMA_IRQHandler+0x418>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d022      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a5b      	ldr	r2, [pc, #364]	; (8009bf8 <HAL_DMA_IRQHandler+0x41c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d01d      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a5a      	ldr	r2, [pc, #360]	; (8009bfc <HAL_DMA_IRQHandler+0x420>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d018      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a58      	ldr	r2, [pc, #352]	; (8009c00 <HAL_DMA_IRQHandler+0x424>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a57      	ldr	r2, [pc, #348]	; (8009c04 <HAL_DMA_IRQHandler+0x428>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00e      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a55      	ldr	r2, [pc, #340]	; (8009c08 <HAL_DMA_IRQHandler+0x42c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d009      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a54      	ldr	r2, [pc, #336]	; (8009c0c <HAL_DMA_IRQHandler+0x430>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d004      	beq.n	8009aca <HAL_DMA_IRQHandler+0x2ee>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a52      	ldr	r2, [pc, #328]	; (8009c10 <HAL_DMA_IRQHandler+0x434>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d10a      	bne.n	8009ae0 <HAL_DMA_IRQHandler+0x304>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bf14      	ite	ne
 8009ad8:	2301      	movne	r3, #1
 8009ada:	2300      	moveq	r3, #0
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	e003      	b.n	8009ae8 <HAL_DMA_IRQHandler+0x30c>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00d      	beq.n	8009b08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af0:	f003 031f 	and.w	r3, r3, #31
 8009af4:	2201      	movs	r2, #1
 8009af6:	409a      	lsls	r2, r3
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	f043 0202 	orr.w	r2, r3, #2
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0c:	f003 031f 	and.w	r3, r3, #31
 8009b10:	2204      	movs	r2, #4
 8009b12:	409a      	lsls	r2, r3
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 808f 	beq.w	8009c3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a2c      	ldr	r2, [pc, #176]	; (8009bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d04a      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a2a      	ldr	r2, [pc, #168]	; (8009bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d045      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a29      	ldr	r2, [pc, #164]	; (8009bdc <HAL_DMA_IRQHandler+0x400>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d040      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a27      	ldr	r2, [pc, #156]	; (8009be0 <HAL_DMA_IRQHandler+0x404>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d03b      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a26      	ldr	r2, [pc, #152]	; (8009be4 <HAL_DMA_IRQHandler+0x408>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d036      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a24      	ldr	r2, [pc, #144]	; (8009be8 <HAL_DMA_IRQHandler+0x40c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d031      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a23      	ldr	r2, [pc, #140]	; (8009bec <HAL_DMA_IRQHandler+0x410>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d02c      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a21      	ldr	r2, [pc, #132]	; (8009bf0 <HAL_DMA_IRQHandler+0x414>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d027      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a20      	ldr	r2, [pc, #128]	; (8009bf4 <HAL_DMA_IRQHandler+0x418>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d022      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a1e      	ldr	r2, [pc, #120]	; (8009bf8 <HAL_DMA_IRQHandler+0x41c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d01d      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a1d      	ldr	r2, [pc, #116]	; (8009bfc <HAL_DMA_IRQHandler+0x420>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d018      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a1b      	ldr	r2, [pc, #108]	; (8009c00 <HAL_DMA_IRQHandler+0x424>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d013      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a1a      	ldr	r2, [pc, #104]	; (8009c04 <HAL_DMA_IRQHandler+0x428>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d00e      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a18      	ldr	r2, [pc, #96]	; (8009c08 <HAL_DMA_IRQHandler+0x42c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d009      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a17      	ldr	r2, [pc, #92]	; (8009c0c <HAL_DMA_IRQHandler+0x430>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d004      	beq.n	8009bbe <HAL_DMA_IRQHandler+0x3e2>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <HAL_DMA_IRQHandler+0x434>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d12a      	bne.n	8009c14 <HAL_DMA_IRQHandler+0x438>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	bf14      	ite	ne
 8009bcc:	2301      	movne	r3, #1
 8009bce:	2300      	moveq	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	e023      	b.n	8009c1c <HAL_DMA_IRQHandler+0x440>
 8009bd4:	40020010 	.word	0x40020010
 8009bd8:	40020028 	.word	0x40020028
 8009bdc:	40020040 	.word	0x40020040
 8009be0:	40020058 	.word	0x40020058
 8009be4:	40020070 	.word	0x40020070
 8009be8:	40020088 	.word	0x40020088
 8009bec:	400200a0 	.word	0x400200a0
 8009bf0:	400200b8 	.word	0x400200b8
 8009bf4:	40020410 	.word	0x40020410
 8009bf8:	40020428 	.word	0x40020428
 8009bfc:	40020440 	.word	0x40020440
 8009c00:	40020458 	.word	0x40020458
 8009c04:	40020470 	.word	0x40020470
 8009c08:	40020488 	.word	0x40020488
 8009c0c:	400204a0 	.word	0x400204a0
 8009c10:	400204b8 	.word	0x400204b8
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00d      	beq.n	8009c3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	2204      	movs	r2, #4
 8009c2a:	409a      	lsls	r2, r3
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c34:	f043 0204 	orr.w	r2, r3, #4
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	2210      	movs	r2, #16
 8009c46:	409a      	lsls	r2, r3
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 80a6 	beq.w	8009d9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a85      	ldr	r2, [pc, #532]	; (8009e6c <HAL_DMA_IRQHandler+0x690>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d04a      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a83      	ldr	r2, [pc, #524]	; (8009e70 <HAL_DMA_IRQHandler+0x694>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d045      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a82      	ldr	r2, [pc, #520]	; (8009e74 <HAL_DMA_IRQHandler+0x698>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d040      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a80      	ldr	r2, [pc, #512]	; (8009e78 <HAL_DMA_IRQHandler+0x69c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d03b      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a7f      	ldr	r2, [pc, #508]	; (8009e7c <HAL_DMA_IRQHandler+0x6a0>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d036      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a7d      	ldr	r2, [pc, #500]	; (8009e80 <HAL_DMA_IRQHandler+0x6a4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d031      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a7c      	ldr	r2, [pc, #496]	; (8009e84 <HAL_DMA_IRQHandler+0x6a8>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d02c      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a7a      	ldr	r2, [pc, #488]	; (8009e88 <HAL_DMA_IRQHandler+0x6ac>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d027      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a79      	ldr	r2, [pc, #484]	; (8009e8c <HAL_DMA_IRQHandler+0x6b0>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d022      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a77      	ldr	r2, [pc, #476]	; (8009e90 <HAL_DMA_IRQHandler+0x6b4>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d01d      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a76      	ldr	r2, [pc, #472]	; (8009e94 <HAL_DMA_IRQHandler+0x6b8>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d018      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a74      	ldr	r2, [pc, #464]	; (8009e98 <HAL_DMA_IRQHandler+0x6bc>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d013      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a73      	ldr	r2, [pc, #460]	; (8009e9c <HAL_DMA_IRQHandler+0x6c0>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d00e      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a71      	ldr	r2, [pc, #452]	; (8009ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d009      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a70      	ldr	r2, [pc, #448]	; (8009ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d004      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x516>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a6e      	ldr	r2, [pc, #440]	; (8009ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d10a      	bne.n	8009d08 <HAL_DMA_IRQHandler+0x52c>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	bf14      	ite	ne
 8009d00:	2301      	movne	r3, #1
 8009d02:	2300      	moveq	r3, #0
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	e009      	b.n	8009d1c <HAL_DMA_IRQHandler+0x540>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bf14      	ite	ne
 8009d16:	2301      	movne	r3, #1
 8009d18:	2300      	moveq	r3, #0
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d03e      	beq.n	8009d9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d24:	f003 031f 	and.w	r3, r3, #31
 8009d28:	2210      	movs	r2, #16
 8009d2a:	409a      	lsls	r2, r3
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d108      	bne.n	8009d5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d024      	beq.n	8009d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	4798      	blx	r3
 8009d5c:	e01f      	b.n	8009d9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01b      	beq.n	8009d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	4798      	blx	r3
 8009d6e:	e016      	b.n	8009d9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d107      	bne.n	8009d8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f022 0208 	bic.w	r2, r2, #8
 8009d8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009da2:	f003 031f 	and.w	r3, r3, #31
 8009da6:	2220      	movs	r2, #32
 8009da8:	409a      	lsls	r2, r3
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	4013      	ands	r3, r2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 8110 	beq.w	8009fd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a2c      	ldr	r2, [pc, #176]	; (8009e6c <HAL_DMA_IRQHandler+0x690>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d04a      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a2b      	ldr	r2, [pc, #172]	; (8009e70 <HAL_DMA_IRQHandler+0x694>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d045      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a29      	ldr	r2, [pc, #164]	; (8009e74 <HAL_DMA_IRQHandler+0x698>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d040      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a28      	ldr	r2, [pc, #160]	; (8009e78 <HAL_DMA_IRQHandler+0x69c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d03b      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a26      	ldr	r2, [pc, #152]	; (8009e7c <HAL_DMA_IRQHandler+0x6a0>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d036      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a25      	ldr	r2, [pc, #148]	; (8009e80 <HAL_DMA_IRQHandler+0x6a4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d031      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a23      	ldr	r2, [pc, #140]	; (8009e84 <HAL_DMA_IRQHandler+0x6a8>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d02c      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a22      	ldr	r2, [pc, #136]	; (8009e88 <HAL_DMA_IRQHandler+0x6ac>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d027      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a20      	ldr	r2, [pc, #128]	; (8009e8c <HAL_DMA_IRQHandler+0x6b0>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d022      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a1f      	ldr	r2, [pc, #124]	; (8009e90 <HAL_DMA_IRQHandler+0x6b4>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d01d      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a1d      	ldr	r2, [pc, #116]	; (8009e94 <HAL_DMA_IRQHandler+0x6b8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d018      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a1c      	ldr	r2, [pc, #112]	; (8009e98 <HAL_DMA_IRQHandler+0x6bc>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d013      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a1a      	ldr	r2, [pc, #104]	; (8009e9c <HAL_DMA_IRQHandler+0x6c0>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d00e      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a19      	ldr	r2, [pc, #100]	; (8009ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d009      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a17      	ldr	r2, [pc, #92]	; (8009ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d004      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x678>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a16      	ldr	r2, [pc, #88]	; (8009ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d12b      	bne.n	8009eac <HAL_DMA_IRQHandler+0x6d0>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bf14      	ite	ne
 8009e62:	2301      	movne	r3, #1
 8009e64:	2300      	moveq	r3, #0
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	e02a      	b.n	8009ec0 <HAL_DMA_IRQHandler+0x6e4>
 8009e6a:	bf00      	nop
 8009e6c:	40020010 	.word	0x40020010
 8009e70:	40020028 	.word	0x40020028
 8009e74:	40020040 	.word	0x40020040
 8009e78:	40020058 	.word	0x40020058
 8009e7c:	40020070 	.word	0x40020070
 8009e80:	40020088 	.word	0x40020088
 8009e84:	400200a0 	.word	0x400200a0
 8009e88:	400200b8 	.word	0x400200b8
 8009e8c:	40020410 	.word	0x40020410
 8009e90:	40020428 	.word	0x40020428
 8009e94:	40020440 	.word	0x40020440
 8009e98:	40020458 	.word	0x40020458
 8009e9c:	40020470 	.word	0x40020470
 8009ea0:	40020488 	.word	0x40020488
 8009ea4:	400204a0 	.word	0x400204a0
 8009ea8:	400204b8 	.word	0x400204b8
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bf14      	ite	ne
 8009eba:	2301      	movne	r3, #1
 8009ebc:	2300      	moveq	r3, #0
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 8087 	beq.w	8009fd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eca:	f003 031f 	and.w	r3, r3, #31
 8009ece:	2220      	movs	r2, #32
 8009ed0:	409a      	lsls	r2, r3
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d139      	bne.n	8009f56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0216 	bic.w	r2, r2, #22
 8009ef0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	695a      	ldr	r2, [r3, #20]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <HAL_DMA_IRQHandler+0x736>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d007      	beq.n	8009f22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0208 	bic.w	r2, r2, #8
 8009f20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f26:	f003 031f 	and.w	r3, r3, #31
 8009f2a:	223f      	movs	r2, #63	; 0x3f
 8009f2c:	409a      	lsls	r2, r3
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 834a 	beq.w	800a5e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4798      	blx	r3
          }
          return;
 8009f54:	e344      	b.n	800a5e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d018      	beq.n	8009f96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d108      	bne.n	8009f84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d02c      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	4798      	blx	r3
 8009f82:	e027      	b.n	8009fd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d023      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	4798      	blx	r3
 8009f94:	e01e      	b.n	8009fd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10f      	bne.n	8009fc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0210 	bic.w	r2, r2, #16
 8009fb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8306 	beq.w	800a5ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 8088 	beq.w	800a0fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2204      	movs	r2, #4
 8009ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a7a      	ldr	r2, [pc, #488]	; (800a1e4 <HAL_DMA_IRQHandler+0xa08>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d04a      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a79      	ldr	r2, [pc, #484]	; (800a1e8 <HAL_DMA_IRQHandler+0xa0c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d045      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a77      	ldr	r2, [pc, #476]	; (800a1ec <HAL_DMA_IRQHandler+0xa10>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d040      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a76      	ldr	r2, [pc, #472]	; (800a1f0 <HAL_DMA_IRQHandler+0xa14>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d03b      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a74      	ldr	r2, [pc, #464]	; (800a1f4 <HAL_DMA_IRQHandler+0xa18>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d036      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a73      	ldr	r2, [pc, #460]	; (800a1f8 <HAL_DMA_IRQHandler+0xa1c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d031      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a71      	ldr	r2, [pc, #452]	; (800a1fc <HAL_DMA_IRQHandler+0xa20>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d02c      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a70      	ldr	r2, [pc, #448]	; (800a200 <HAL_DMA_IRQHandler+0xa24>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d027      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a6e      	ldr	r2, [pc, #440]	; (800a204 <HAL_DMA_IRQHandler+0xa28>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d022      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a6d      	ldr	r2, [pc, #436]	; (800a208 <HAL_DMA_IRQHandler+0xa2c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d01d      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a6b      	ldr	r2, [pc, #428]	; (800a20c <HAL_DMA_IRQHandler+0xa30>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d018      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a6a      	ldr	r2, [pc, #424]	; (800a210 <HAL_DMA_IRQHandler+0xa34>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d013      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a68      	ldr	r2, [pc, #416]	; (800a214 <HAL_DMA_IRQHandler+0xa38>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00e      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a67      	ldr	r2, [pc, #412]	; (800a218 <HAL_DMA_IRQHandler+0xa3c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d009      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a65      	ldr	r2, [pc, #404]	; (800a21c <HAL_DMA_IRQHandler+0xa40>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d004      	beq.n	800a094 <HAL_DMA_IRQHandler+0x8b8>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a64      	ldr	r2, [pc, #400]	; (800a220 <HAL_DMA_IRQHandler+0xa44>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d108      	bne.n	800a0a6 <HAL_DMA_IRQHandler+0x8ca>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 0201 	bic.w	r2, r2, #1
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e007      	b.n	800a0b6 <HAL_DMA_IRQHandler+0x8da>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0201 	bic.w	r2, r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d307      	bcc.n	800a0d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1f2      	bne.n	800a0b6 <HAL_DMA_IRQHandler+0x8da>
 800a0d0:	e000      	b.n	800a0d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a0d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2203      	movs	r2, #3
 800a0e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a0ea:	e003      	b.n	800a0f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 8272 	beq.w	800a5ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	4798      	blx	r3
 800a10e:	e26c      	b.n	800a5ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a43      	ldr	r2, [pc, #268]	; (800a224 <HAL_DMA_IRQHandler+0xa48>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d022      	beq.n	800a160 <HAL_DMA_IRQHandler+0x984>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a42      	ldr	r2, [pc, #264]	; (800a228 <HAL_DMA_IRQHandler+0xa4c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d01d      	beq.n	800a160 <HAL_DMA_IRQHandler+0x984>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a40      	ldr	r2, [pc, #256]	; (800a22c <HAL_DMA_IRQHandler+0xa50>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d018      	beq.n	800a160 <HAL_DMA_IRQHandler+0x984>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a3f      	ldr	r2, [pc, #252]	; (800a230 <HAL_DMA_IRQHandler+0xa54>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d013      	beq.n	800a160 <HAL_DMA_IRQHandler+0x984>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a3d      	ldr	r2, [pc, #244]	; (800a234 <HAL_DMA_IRQHandler+0xa58>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00e      	beq.n	800a160 <HAL_DMA_IRQHandler+0x984>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a3c      	ldr	r2, [pc, #240]	; (800a238 <HAL_DMA_IRQHandler+0xa5c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d009      	beq.n	800a160 <HAL_DMA_IRQHandler+0x984>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a3a      	ldr	r2, [pc, #232]	; (800a23c <HAL_DMA_IRQHandler+0xa60>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d004      	beq.n	800a160 <HAL_DMA_IRQHandler+0x984>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a39      	ldr	r2, [pc, #228]	; (800a240 <HAL_DMA_IRQHandler+0xa64>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d101      	bne.n	800a164 <HAL_DMA_IRQHandler+0x988>
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <HAL_DMA_IRQHandler+0x98a>
 800a164:	2300      	movs	r3, #0
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 823f 	beq.w	800a5ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a178:	f003 031f 	and.w	r3, r3, #31
 800a17c:	2204      	movs	r2, #4
 800a17e:	409a      	lsls	r2, r3
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	4013      	ands	r3, r2
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 80cd 	beq.w	800a324 <HAL_DMA_IRQHandler+0xb48>
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80c7 	beq.w	800a324 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19a:	f003 031f 	and.w	r3, r3, #31
 800a19e:	2204      	movs	r2, #4
 800a1a0:	409a      	lsls	r2, r3
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d049      	beq.n	800a244 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d109      	bne.n	800a1ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f000 8210 	beq.w	800a5e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1cc:	e20a      	b.n	800a5e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 8206 	beq.w	800a5e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1e0:	e200      	b.n	800a5e4 <HAL_DMA_IRQHandler+0xe08>
 800a1e2:	bf00      	nop
 800a1e4:	40020010 	.word	0x40020010
 800a1e8:	40020028 	.word	0x40020028
 800a1ec:	40020040 	.word	0x40020040
 800a1f0:	40020058 	.word	0x40020058
 800a1f4:	40020070 	.word	0x40020070
 800a1f8:	40020088 	.word	0x40020088
 800a1fc:	400200a0 	.word	0x400200a0
 800a200:	400200b8 	.word	0x400200b8
 800a204:	40020410 	.word	0x40020410
 800a208:	40020428 	.word	0x40020428
 800a20c:	40020440 	.word	0x40020440
 800a210:	40020458 	.word	0x40020458
 800a214:	40020470 	.word	0x40020470
 800a218:	40020488 	.word	0x40020488
 800a21c:	400204a0 	.word	0x400204a0
 800a220:	400204b8 	.word	0x400204b8
 800a224:	58025408 	.word	0x58025408
 800a228:	5802541c 	.word	0x5802541c
 800a22c:	58025430 	.word	0x58025430
 800a230:	58025444 	.word	0x58025444
 800a234:	58025458 	.word	0x58025458
 800a238:	5802546c 	.word	0x5802546c
 800a23c:	58025480 	.word	0x58025480
 800a240:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d160      	bne.n	800a310 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a7f      	ldr	r2, [pc, #508]	; (800a450 <HAL_DMA_IRQHandler+0xc74>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d04a      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a7d      	ldr	r2, [pc, #500]	; (800a454 <HAL_DMA_IRQHandler+0xc78>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d045      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a7c      	ldr	r2, [pc, #496]	; (800a458 <HAL_DMA_IRQHandler+0xc7c>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d040      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a7a      	ldr	r2, [pc, #488]	; (800a45c <HAL_DMA_IRQHandler+0xc80>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d03b      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a79      	ldr	r2, [pc, #484]	; (800a460 <HAL_DMA_IRQHandler+0xc84>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d036      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a77      	ldr	r2, [pc, #476]	; (800a464 <HAL_DMA_IRQHandler+0xc88>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d031      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a76      	ldr	r2, [pc, #472]	; (800a468 <HAL_DMA_IRQHandler+0xc8c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d02c      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a74      	ldr	r2, [pc, #464]	; (800a46c <HAL_DMA_IRQHandler+0xc90>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d027      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a73      	ldr	r2, [pc, #460]	; (800a470 <HAL_DMA_IRQHandler+0xc94>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d022      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a71      	ldr	r2, [pc, #452]	; (800a474 <HAL_DMA_IRQHandler+0xc98>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d01d      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a70      	ldr	r2, [pc, #448]	; (800a478 <HAL_DMA_IRQHandler+0xc9c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d018      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a6e      	ldr	r2, [pc, #440]	; (800a47c <HAL_DMA_IRQHandler+0xca0>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d013      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a6d      	ldr	r2, [pc, #436]	; (800a480 <HAL_DMA_IRQHandler+0xca4>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d00e      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a6b      	ldr	r2, [pc, #428]	; (800a484 <HAL_DMA_IRQHandler+0xca8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d009      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a6a      	ldr	r2, [pc, #424]	; (800a488 <HAL_DMA_IRQHandler+0xcac>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d004      	beq.n	800a2ee <HAL_DMA_IRQHandler+0xb12>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a68      	ldr	r2, [pc, #416]	; (800a48c <HAL_DMA_IRQHandler+0xcb0>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d108      	bne.n	800a300 <HAL_DMA_IRQHandler+0xb24>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0208 	bic.w	r2, r2, #8
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	e007      	b.n	800a310 <HAL_DMA_IRQHandler+0xb34>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f022 0204 	bic.w	r2, r2, #4
 800a30e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 8165 	beq.w	800a5e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a322:	e15f      	b.n	800a5e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a328:	f003 031f 	and.w	r3, r3, #31
 800a32c:	2202      	movs	r2, #2
 800a32e:	409a      	lsls	r2, r3
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	4013      	ands	r3, r2
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 80c5 	beq.w	800a4c4 <HAL_DMA_IRQHandler+0xce8>
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80bf 	beq.w	800a4c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a34a:	f003 031f 	and.w	r3, r3, #31
 800a34e:	2202      	movs	r2, #2
 800a350:	409a      	lsls	r2, r3
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d018      	beq.n	800a392 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d109      	bne.n	800a37e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 813a 	beq.w	800a5e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a37c:	e134      	b.n	800a5e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8130 	beq.w	800a5e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a390:	e12a      	b.n	800a5e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f003 0320 	and.w	r3, r3, #32
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f040 8089 	bne.w	800a4b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a2b      	ldr	r2, [pc, #172]	; (800a450 <HAL_DMA_IRQHandler+0xc74>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d04a      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a29      	ldr	r2, [pc, #164]	; (800a454 <HAL_DMA_IRQHandler+0xc78>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d045      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a28      	ldr	r2, [pc, #160]	; (800a458 <HAL_DMA_IRQHandler+0xc7c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d040      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a26      	ldr	r2, [pc, #152]	; (800a45c <HAL_DMA_IRQHandler+0xc80>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d03b      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a25      	ldr	r2, [pc, #148]	; (800a460 <HAL_DMA_IRQHandler+0xc84>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d036      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a23      	ldr	r2, [pc, #140]	; (800a464 <HAL_DMA_IRQHandler+0xc88>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d031      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a22      	ldr	r2, [pc, #136]	; (800a468 <HAL_DMA_IRQHandler+0xc8c>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d02c      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a20      	ldr	r2, [pc, #128]	; (800a46c <HAL_DMA_IRQHandler+0xc90>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d027      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a1f      	ldr	r2, [pc, #124]	; (800a470 <HAL_DMA_IRQHandler+0xc94>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d022      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a1d      	ldr	r2, [pc, #116]	; (800a474 <HAL_DMA_IRQHandler+0xc98>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d01d      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a1c      	ldr	r2, [pc, #112]	; (800a478 <HAL_DMA_IRQHandler+0xc9c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d018      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a1a      	ldr	r2, [pc, #104]	; (800a47c <HAL_DMA_IRQHandler+0xca0>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d013      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a19      	ldr	r2, [pc, #100]	; (800a480 <HAL_DMA_IRQHandler+0xca4>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d00e      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a17      	ldr	r2, [pc, #92]	; (800a484 <HAL_DMA_IRQHandler+0xca8>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d009      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a16      	ldr	r2, [pc, #88]	; (800a488 <HAL_DMA_IRQHandler+0xcac>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d004      	beq.n	800a43e <HAL_DMA_IRQHandler+0xc62>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a14      	ldr	r2, [pc, #80]	; (800a48c <HAL_DMA_IRQHandler+0xcb0>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d128      	bne.n	800a490 <HAL_DMA_IRQHandler+0xcb4>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0214 	bic.w	r2, r2, #20
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e027      	b.n	800a4a0 <HAL_DMA_IRQHandler+0xcc4>
 800a450:	40020010 	.word	0x40020010
 800a454:	40020028 	.word	0x40020028
 800a458:	40020040 	.word	0x40020040
 800a45c:	40020058 	.word	0x40020058
 800a460:	40020070 	.word	0x40020070
 800a464:	40020088 	.word	0x40020088
 800a468:	400200a0 	.word	0x400200a0
 800a46c:	400200b8 	.word	0x400200b8
 800a470:	40020410 	.word	0x40020410
 800a474:	40020428 	.word	0x40020428
 800a478:	40020440 	.word	0x40020440
 800a47c:	40020458 	.word	0x40020458
 800a480:	40020470 	.word	0x40020470
 800a484:	40020488 	.word	0x40020488
 800a488:	400204a0 	.word	0x400204a0
 800a48c:	400204b8 	.word	0x400204b8
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 020a 	bic.w	r2, r2, #10
 800a49e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 8097 	beq.w	800a5e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a4c2:	e091      	b.n	800a5e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c8:	f003 031f 	and.w	r3, r3, #31
 800a4cc:	2208      	movs	r2, #8
 800a4ce:	409a      	lsls	r2, r3
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 8088 	beq.w	800a5ea <HAL_DMA_IRQHandler+0xe0e>
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	f003 0308 	and.w	r3, r3, #8
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 8082 	beq.w	800a5ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a41      	ldr	r2, [pc, #260]	; (800a5f0 <HAL_DMA_IRQHandler+0xe14>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d04a      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a3f      	ldr	r2, [pc, #252]	; (800a5f4 <HAL_DMA_IRQHandler+0xe18>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d045      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a3e      	ldr	r2, [pc, #248]	; (800a5f8 <HAL_DMA_IRQHandler+0xe1c>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d040      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a3c      	ldr	r2, [pc, #240]	; (800a5fc <HAL_DMA_IRQHandler+0xe20>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d03b      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a3b      	ldr	r2, [pc, #236]	; (800a600 <HAL_DMA_IRQHandler+0xe24>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d036      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a39      	ldr	r2, [pc, #228]	; (800a604 <HAL_DMA_IRQHandler+0xe28>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d031      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a38      	ldr	r2, [pc, #224]	; (800a608 <HAL_DMA_IRQHandler+0xe2c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d02c      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a36      	ldr	r2, [pc, #216]	; (800a60c <HAL_DMA_IRQHandler+0xe30>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d027      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a35      	ldr	r2, [pc, #212]	; (800a610 <HAL_DMA_IRQHandler+0xe34>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d022      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a33      	ldr	r2, [pc, #204]	; (800a614 <HAL_DMA_IRQHandler+0xe38>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d01d      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a32      	ldr	r2, [pc, #200]	; (800a618 <HAL_DMA_IRQHandler+0xe3c>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d018      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a30      	ldr	r2, [pc, #192]	; (800a61c <HAL_DMA_IRQHandler+0xe40>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d013      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a2f      	ldr	r2, [pc, #188]	; (800a620 <HAL_DMA_IRQHandler+0xe44>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d00e      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a2d      	ldr	r2, [pc, #180]	; (800a624 <HAL_DMA_IRQHandler+0xe48>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d009      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a2c      	ldr	r2, [pc, #176]	; (800a628 <HAL_DMA_IRQHandler+0xe4c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d004      	beq.n	800a586 <HAL_DMA_IRQHandler+0xdaa>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a2a      	ldr	r2, [pc, #168]	; (800a62c <HAL_DMA_IRQHandler+0xe50>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d108      	bne.n	800a598 <HAL_DMA_IRQHandler+0xdbc>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 021c 	bic.w	r2, r2, #28
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	e007      	b.n	800a5a8 <HAL_DMA_IRQHandler+0xdcc>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 020e 	bic.w	r2, r2, #14
 800a5a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ac:	f003 031f 	and.w	r3, r3, #31
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	409a      	lsls	r2, r3
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d009      	beq.n	800a5ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
 800a5de:	e004      	b.n	800a5ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a5e0:	bf00      	nop
 800a5e2:	e002      	b.n	800a5ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5e4:	bf00      	nop
 800a5e6:	e000      	b.n	800a5ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a5ea:	3728      	adds	r7, #40	; 0x28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	40020010 	.word	0x40020010
 800a5f4:	40020028 	.word	0x40020028
 800a5f8:	40020040 	.word	0x40020040
 800a5fc:	40020058 	.word	0x40020058
 800a600:	40020070 	.word	0x40020070
 800a604:	40020088 	.word	0x40020088
 800a608:	400200a0 	.word	0x400200a0
 800a60c:	400200b8 	.word	0x400200b8
 800a610:	40020410 	.word	0x40020410
 800a614:	40020428 	.word	0x40020428
 800a618:	40020440 	.word	0x40020440
 800a61c:	40020458 	.word	0x40020458
 800a620:	40020470 	.word	0x40020470
 800a624:	40020488 	.word	0x40020488
 800a628:	400204a0 	.word	0x400204a0
 800a62c:	400204b8 	.word	0x400204b8

0800a630 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a63e:	b2db      	uxtb	r3, r3
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a676:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a7f      	ldr	r2, [pc, #508]	; (800a880 <DMA_SetConfig+0x21c>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d072      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a7d      	ldr	r2, [pc, #500]	; (800a884 <DMA_SetConfig+0x220>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d06d      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a7c      	ldr	r2, [pc, #496]	; (800a888 <DMA_SetConfig+0x224>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d068      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a7a      	ldr	r2, [pc, #488]	; (800a88c <DMA_SetConfig+0x228>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d063      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a79      	ldr	r2, [pc, #484]	; (800a890 <DMA_SetConfig+0x22c>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d05e      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a77      	ldr	r2, [pc, #476]	; (800a894 <DMA_SetConfig+0x230>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d059      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a76      	ldr	r2, [pc, #472]	; (800a898 <DMA_SetConfig+0x234>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d054      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a74      	ldr	r2, [pc, #464]	; (800a89c <DMA_SetConfig+0x238>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d04f      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a73      	ldr	r2, [pc, #460]	; (800a8a0 <DMA_SetConfig+0x23c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d04a      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a71      	ldr	r2, [pc, #452]	; (800a8a4 <DMA_SetConfig+0x240>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d045      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a70      	ldr	r2, [pc, #448]	; (800a8a8 <DMA_SetConfig+0x244>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d040      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a6e      	ldr	r2, [pc, #440]	; (800a8ac <DMA_SetConfig+0x248>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d03b      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a6d      	ldr	r2, [pc, #436]	; (800a8b0 <DMA_SetConfig+0x24c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d036      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a6b      	ldr	r2, [pc, #428]	; (800a8b4 <DMA_SetConfig+0x250>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d031      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a6a      	ldr	r2, [pc, #424]	; (800a8b8 <DMA_SetConfig+0x254>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d02c      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a68      	ldr	r2, [pc, #416]	; (800a8bc <DMA_SetConfig+0x258>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d027      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a67      	ldr	r2, [pc, #412]	; (800a8c0 <DMA_SetConfig+0x25c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d022      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a65      	ldr	r2, [pc, #404]	; (800a8c4 <DMA_SetConfig+0x260>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d01d      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a64      	ldr	r2, [pc, #400]	; (800a8c8 <DMA_SetConfig+0x264>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d018      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a62      	ldr	r2, [pc, #392]	; (800a8cc <DMA_SetConfig+0x268>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a61      	ldr	r2, [pc, #388]	; (800a8d0 <DMA_SetConfig+0x26c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00e      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a5f      	ldr	r2, [pc, #380]	; (800a8d4 <DMA_SetConfig+0x270>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d009      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a5e      	ldr	r2, [pc, #376]	; (800a8d8 <DMA_SetConfig+0x274>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d004      	beq.n	800a76e <DMA_SetConfig+0x10a>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a5c      	ldr	r2, [pc, #368]	; (800a8dc <DMA_SetConfig+0x278>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d101      	bne.n	800a772 <DMA_SetConfig+0x10e>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <DMA_SetConfig+0x110>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00d      	beq.n	800a794 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a780:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a792:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a39      	ldr	r2, [pc, #228]	; (800a880 <DMA_SetConfig+0x21c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d04a      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a38      	ldr	r2, [pc, #224]	; (800a884 <DMA_SetConfig+0x220>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d045      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a36      	ldr	r2, [pc, #216]	; (800a888 <DMA_SetConfig+0x224>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d040      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a35      	ldr	r2, [pc, #212]	; (800a88c <DMA_SetConfig+0x228>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d03b      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a33      	ldr	r2, [pc, #204]	; (800a890 <DMA_SetConfig+0x22c>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d036      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a32      	ldr	r2, [pc, #200]	; (800a894 <DMA_SetConfig+0x230>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d031      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a30      	ldr	r2, [pc, #192]	; (800a898 <DMA_SetConfig+0x234>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d02c      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a2f      	ldr	r2, [pc, #188]	; (800a89c <DMA_SetConfig+0x238>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d027      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a2d      	ldr	r2, [pc, #180]	; (800a8a0 <DMA_SetConfig+0x23c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d022      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a2c      	ldr	r2, [pc, #176]	; (800a8a4 <DMA_SetConfig+0x240>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d01d      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a2a      	ldr	r2, [pc, #168]	; (800a8a8 <DMA_SetConfig+0x244>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d018      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a29      	ldr	r2, [pc, #164]	; (800a8ac <DMA_SetConfig+0x248>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d013      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a27      	ldr	r2, [pc, #156]	; (800a8b0 <DMA_SetConfig+0x24c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d00e      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a26      	ldr	r2, [pc, #152]	; (800a8b4 <DMA_SetConfig+0x250>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d009      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a24      	ldr	r2, [pc, #144]	; (800a8b8 <DMA_SetConfig+0x254>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d004      	beq.n	800a834 <DMA_SetConfig+0x1d0>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a23      	ldr	r2, [pc, #140]	; (800a8bc <DMA_SetConfig+0x258>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d101      	bne.n	800a838 <DMA_SetConfig+0x1d4>
 800a834:	2301      	movs	r3, #1
 800a836:	e000      	b.n	800a83a <DMA_SetConfig+0x1d6>
 800a838:	2300      	movs	r3, #0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d059      	beq.n	800a8f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a842:	f003 031f 	and.w	r3, r3, #31
 800a846:	223f      	movs	r2, #63	; 0x3f
 800a848:	409a      	lsls	r2, r3
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a85c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	2b40      	cmp	r3, #64	; 0x40
 800a86c:	d138      	bne.n	800a8e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a87e:	e086      	b.n	800a98e <DMA_SetConfig+0x32a>
 800a880:	40020010 	.word	0x40020010
 800a884:	40020028 	.word	0x40020028
 800a888:	40020040 	.word	0x40020040
 800a88c:	40020058 	.word	0x40020058
 800a890:	40020070 	.word	0x40020070
 800a894:	40020088 	.word	0x40020088
 800a898:	400200a0 	.word	0x400200a0
 800a89c:	400200b8 	.word	0x400200b8
 800a8a0:	40020410 	.word	0x40020410
 800a8a4:	40020428 	.word	0x40020428
 800a8a8:	40020440 	.word	0x40020440
 800a8ac:	40020458 	.word	0x40020458
 800a8b0:	40020470 	.word	0x40020470
 800a8b4:	40020488 	.word	0x40020488
 800a8b8:	400204a0 	.word	0x400204a0
 800a8bc:	400204b8 	.word	0x400204b8
 800a8c0:	58025408 	.word	0x58025408
 800a8c4:	5802541c 	.word	0x5802541c
 800a8c8:	58025430 	.word	0x58025430
 800a8cc:	58025444 	.word	0x58025444
 800a8d0:	58025458 	.word	0x58025458
 800a8d4:	5802546c 	.word	0x5802546c
 800a8d8:	58025480 	.word	0x58025480
 800a8dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	60da      	str	r2, [r3, #12]
}
 800a8f0:	e04d      	b.n	800a98e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a29      	ldr	r2, [pc, #164]	; (800a99c <DMA_SetConfig+0x338>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d022      	beq.n	800a942 <DMA_SetConfig+0x2de>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a27      	ldr	r2, [pc, #156]	; (800a9a0 <DMA_SetConfig+0x33c>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d01d      	beq.n	800a942 <DMA_SetConfig+0x2de>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a26      	ldr	r2, [pc, #152]	; (800a9a4 <DMA_SetConfig+0x340>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d018      	beq.n	800a942 <DMA_SetConfig+0x2de>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a24      	ldr	r2, [pc, #144]	; (800a9a8 <DMA_SetConfig+0x344>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d013      	beq.n	800a942 <DMA_SetConfig+0x2de>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a23      	ldr	r2, [pc, #140]	; (800a9ac <DMA_SetConfig+0x348>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d00e      	beq.n	800a942 <DMA_SetConfig+0x2de>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a21      	ldr	r2, [pc, #132]	; (800a9b0 <DMA_SetConfig+0x34c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d009      	beq.n	800a942 <DMA_SetConfig+0x2de>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a20      	ldr	r2, [pc, #128]	; (800a9b4 <DMA_SetConfig+0x350>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d004      	beq.n	800a942 <DMA_SetConfig+0x2de>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a1e      	ldr	r2, [pc, #120]	; (800a9b8 <DMA_SetConfig+0x354>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d101      	bne.n	800a946 <DMA_SetConfig+0x2e2>
 800a942:	2301      	movs	r3, #1
 800a944:	e000      	b.n	800a948 <DMA_SetConfig+0x2e4>
 800a946:	2300      	movs	r3, #0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d020      	beq.n	800a98e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a950:	f003 031f 	and.w	r3, r3, #31
 800a954:	2201      	movs	r2, #1
 800a956:	409a      	lsls	r2, r3
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d108      	bne.n	800a97e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	60da      	str	r2, [r3, #12]
}
 800a97c:	e007      	b.n	800a98e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	60da      	str	r2, [r3, #12]
}
 800a98e:	bf00      	nop
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	58025408 	.word	0x58025408
 800a9a0:	5802541c 	.word	0x5802541c
 800a9a4:	58025430 	.word	0x58025430
 800a9a8:	58025444 	.word	0x58025444
 800a9ac:	58025458 	.word	0x58025458
 800a9b0:	5802546c 	.word	0x5802546c
 800a9b4:	58025480 	.word	0x58025480
 800a9b8:	58025494 	.word	0x58025494

0800a9bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a42      	ldr	r2, [pc, #264]	; (800aad4 <DMA_CalcBaseAndBitshift+0x118>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d04a      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a41      	ldr	r2, [pc, #260]	; (800aad8 <DMA_CalcBaseAndBitshift+0x11c>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d045      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a3f      	ldr	r2, [pc, #252]	; (800aadc <DMA_CalcBaseAndBitshift+0x120>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d040      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a3e      	ldr	r2, [pc, #248]	; (800aae0 <DMA_CalcBaseAndBitshift+0x124>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d03b      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a3c      	ldr	r2, [pc, #240]	; (800aae4 <DMA_CalcBaseAndBitshift+0x128>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d036      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a3b      	ldr	r2, [pc, #236]	; (800aae8 <DMA_CalcBaseAndBitshift+0x12c>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d031      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a39      	ldr	r2, [pc, #228]	; (800aaec <DMA_CalcBaseAndBitshift+0x130>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d02c      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a38      	ldr	r2, [pc, #224]	; (800aaf0 <DMA_CalcBaseAndBitshift+0x134>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d027      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a36      	ldr	r2, [pc, #216]	; (800aaf4 <DMA_CalcBaseAndBitshift+0x138>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d022      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a35      	ldr	r2, [pc, #212]	; (800aaf8 <DMA_CalcBaseAndBitshift+0x13c>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d01d      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a33      	ldr	r2, [pc, #204]	; (800aafc <DMA_CalcBaseAndBitshift+0x140>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d018      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a32      	ldr	r2, [pc, #200]	; (800ab00 <DMA_CalcBaseAndBitshift+0x144>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d013      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a30      	ldr	r2, [pc, #192]	; (800ab04 <DMA_CalcBaseAndBitshift+0x148>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d00e      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a2f      	ldr	r2, [pc, #188]	; (800ab08 <DMA_CalcBaseAndBitshift+0x14c>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d009      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a2d      	ldr	r2, [pc, #180]	; (800ab0c <DMA_CalcBaseAndBitshift+0x150>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d004      	beq.n	800aa64 <DMA_CalcBaseAndBitshift+0xa8>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a2c      	ldr	r2, [pc, #176]	; (800ab10 <DMA_CalcBaseAndBitshift+0x154>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d101      	bne.n	800aa68 <DMA_CalcBaseAndBitshift+0xac>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <DMA_CalcBaseAndBitshift+0xae>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d024      	beq.n	800aab8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	3b10      	subs	r3, #16
 800aa76:	4a27      	ldr	r2, [pc, #156]	; (800ab14 <DMA_CalcBaseAndBitshift+0x158>)
 800aa78:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7c:	091b      	lsrs	r3, r3, #4
 800aa7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f003 0307 	and.w	r3, r3, #7
 800aa86:	4a24      	ldr	r2, [pc, #144]	; (800ab18 <DMA_CalcBaseAndBitshift+0x15c>)
 800aa88:	5cd3      	ldrb	r3, [r2, r3]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d908      	bls.n	800aaa8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	4b1f      	ldr	r3, [pc, #124]	; (800ab1c <DMA_CalcBaseAndBitshift+0x160>)
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	1d1a      	adds	r2, r3, #4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	659a      	str	r2, [r3, #88]	; 0x58
 800aaa6:	e00d      	b.n	800aac4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	4b1b      	ldr	r3, [pc, #108]	; (800ab1c <DMA_CalcBaseAndBitshift+0x160>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6593      	str	r3, [r2, #88]	; 0x58
 800aab6:	e005      	b.n	800aac4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	40020010 	.word	0x40020010
 800aad8:	40020028 	.word	0x40020028
 800aadc:	40020040 	.word	0x40020040
 800aae0:	40020058 	.word	0x40020058
 800aae4:	40020070 	.word	0x40020070
 800aae8:	40020088 	.word	0x40020088
 800aaec:	400200a0 	.word	0x400200a0
 800aaf0:	400200b8 	.word	0x400200b8
 800aaf4:	40020410 	.word	0x40020410
 800aaf8:	40020428 	.word	0x40020428
 800aafc:	40020440 	.word	0x40020440
 800ab00:	40020458 	.word	0x40020458
 800ab04:	40020470 	.word	0x40020470
 800ab08:	40020488 	.word	0x40020488
 800ab0c:	400204a0 	.word	0x400204a0
 800ab10:	400204b8 	.word	0x400204b8
 800ab14:	aaaaaaab 	.word	0xaaaaaaab
 800ab18:	0801b5a4 	.word	0x0801b5a4
 800ab1c:	fffffc00 	.word	0xfffffc00

0800ab20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d120      	bne.n	800ab76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d858      	bhi.n	800abee <DMA_CheckFifoParam+0xce>
 800ab3c:	a201      	add	r2, pc, #4	; (adr r2, 800ab44 <DMA_CheckFifoParam+0x24>)
 800ab3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab42:	bf00      	nop
 800ab44:	0800ab55 	.word	0x0800ab55
 800ab48:	0800ab67 	.word	0x0800ab67
 800ab4c:	0800ab55 	.word	0x0800ab55
 800ab50:	0800abef 	.word	0x0800abef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d048      	beq.n	800abf2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ab64:	e045      	b.n	800abf2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab6e:	d142      	bne.n	800abf6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ab74:	e03f      	b.n	800abf6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab7e:	d123      	bne.n	800abc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d838      	bhi.n	800abfa <DMA_CheckFifoParam+0xda>
 800ab88:	a201      	add	r2, pc, #4	; (adr r2, 800ab90 <DMA_CheckFifoParam+0x70>)
 800ab8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8e:	bf00      	nop
 800ab90:	0800aba1 	.word	0x0800aba1
 800ab94:	0800aba7 	.word	0x0800aba7
 800ab98:	0800aba1 	.word	0x0800aba1
 800ab9c:	0800abb9 	.word	0x0800abb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
        break;
 800aba4:	e030      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d025      	beq.n	800abfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abb6:	e022      	b.n	800abfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800abc0:	d11f      	bne.n	800ac02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abc6:	e01c      	b.n	800ac02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d902      	bls.n	800abd6 <DMA_CheckFifoParam+0xb6>
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d003      	beq.n	800abdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800abd4:	e018      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	73fb      	strb	r3, [r7, #15]
        break;
 800abda:	e015      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00e      	beq.n	800ac06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	73fb      	strb	r3, [r7, #15]
    break;
 800abec:	e00b      	b.n	800ac06 <DMA_CheckFifoParam+0xe6>
        break;
 800abee:	bf00      	nop
 800abf0:	e00a      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
        break;
 800abf2:	bf00      	nop
 800abf4:	e008      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
        break;
 800abf6:	bf00      	nop
 800abf8:	e006      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
        break;
 800abfa:	bf00      	nop
 800abfc:	e004      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
        break;
 800abfe:	bf00      	nop
 800ac00:	e002      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
        break;
 800ac02:	bf00      	nop
 800ac04:	e000      	b.n	800ac08 <DMA_CheckFifoParam+0xe8>
    break;
 800ac06:	bf00      	nop
    }
  }

  return status;
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop

0800ac18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a38      	ldr	r2, [pc, #224]	; (800ad0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d022      	beq.n	800ac76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a36      	ldr	r2, [pc, #216]	; (800ad10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d01d      	beq.n	800ac76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a35      	ldr	r2, [pc, #212]	; (800ad14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d018      	beq.n	800ac76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a33      	ldr	r2, [pc, #204]	; (800ad18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d013      	beq.n	800ac76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a32      	ldr	r2, [pc, #200]	; (800ad1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00e      	beq.n	800ac76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a30      	ldr	r2, [pc, #192]	; (800ad20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d009      	beq.n	800ac76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a2f      	ldr	r2, [pc, #188]	; (800ad24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d004      	beq.n	800ac76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a2d      	ldr	r2, [pc, #180]	; (800ad28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d101      	bne.n	800ac7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e000      	b.n	800ac7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d01a      	beq.n	800acb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	3b08      	subs	r3, #8
 800ac88:	4a28      	ldr	r2, [pc, #160]	; (800ad2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ac8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac8e:	091b      	lsrs	r3, r3, #4
 800ac90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a24      	ldr	r2, [pc, #144]	; (800ad34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800aca4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 031f 	and.w	r3, r3, #31
 800acac:	2201      	movs	r2, #1
 800acae:	409a      	lsls	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800acb4:	e024      	b.n	800ad00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	3b10      	subs	r3, #16
 800acbe:	4a1e      	ldr	r2, [pc, #120]	; (800ad38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800acc0:	fba2 2303 	umull	r2, r3, r2, r3
 800acc4:	091b      	lsrs	r3, r3, #4
 800acc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	4a1c      	ldr	r2, [pc, #112]	; (800ad3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d806      	bhi.n	800acde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	4a1b      	ldr	r2, [pc, #108]	; (800ad40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d902      	bls.n	800acde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3308      	adds	r3, #8
 800acdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4b18      	ldr	r3, [pc, #96]	; (800ad44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	461a      	mov	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a16      	ldr	r2, [pc, #88]	; (800ad48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800acf0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f003 031f 	and.w	r3, r3, #31
 800acf8:	2201      	movs	r2, #1
 800acfa:	409a      	lsls	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	58025408 	.word	0x58025408
 800ad10:	5802541c 	.word	0x5802541c
 800ad14:	58025430 	.word	0x58025430
 800ad18:	58025444 	.word	0x58025444
 800ad1c:	58025458 	.word	0x58025458
 800ad20:	5802546c 	.word	0x5802546c
 800ad24:	58025480 	.word	0x58025480
 800ad28:	58025494 	.word	0x58025494
 800ad2c:	cccccccd 	.word	0xcccccccd
 800ad30:	16009600 	.word	0x16009600
 800ad34:	58025880 	.word	0x58025880
 800ad38:	aaaaaaab 	.word	0xaaaaaaab
 800ad3c:	400204b8 	.word	0x400204b8
 800ad40:	4002040f 	.word	0x4002040f
 800ad44:	10008200 	.word	0x10008200
 800ad48:	40020880 	.word	0x40020880

0800ad4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d04a      	beq.n	800adf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	d847      	bhi.n	800adf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a25      	ldr	r2, [pc, #148]	; (800ae04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d022      	beq.n	800adb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a24      	ldr	r2, [pc, #144]	; (800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d01d      	beq.n	800adb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a22      	ldr	r2, [pc, #136]	; (800ae0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d018      	beq.n	800adb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a21      	ldr	r2, [pc, #132]	; (800ae10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d013      	beq.n	800adb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a1f      	ldr	r2, [pc, #124]	; (800ae14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00e      	beq.n	800adb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a1e      	ldr	r2, [pc, #120]	; (800ae18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d009      	beq.n	800adb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a1c      	ldr	r2, [pc, #112]	; (800ae1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d004      	beq.n	800adb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a1b      	ldr	r2, [pc, #108]	; (800ae20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d101      	bne.n	800adbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800adb8:	2301      	movs	r3, #1
 800adba:	e000      	b.n	800adbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800adbc:	2300      	movs	r3, #0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00a      	beq.n	800add8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	4b17      	ldr	r3, [pc, #92]	; (800ae24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	461a      	mov	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a15      	ldr	r2, [pc, #84]	; (800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800add4:	671a      	str	r2, [r3, #112]	; 0x70
 800add6:	e009      	b.n	800adec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	4b14      	ldr	r3, [pc, #80]	; (800ae2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	461a      	mov	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a11      	ldr	r2, [pc, #68]	; (800ae30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800adea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3b01      	subs	r3, #1
 800adf0:	2201      	movs	r2, #1
 800adf2:	409a      	lsls	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800adf8:	bf00      	nop
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	58025408 	.word	0x58025408
 800ae08:	5802541c 	.word	0x5802541c
 800ae0c:	58025430 	.word	0x58025430
 800ae10:	58025444 	.word	0x58025444
 800ae14:	58025458 	.word	0x58025458
 800ae18:	5802546c 	.word	0x5802546c
 800ae1c:	58025480 	.word	0x58025480
 800ae20:	58025494 	.word	0x58025494
 800ae24:	1600963f 	.word	0x1600963f
 800ae28:	58025940 	.word	0x58025940
 800ae2c:	1000823f 	.word	0x1000823f
 800ae30:	40020940 	.word	0x40020940

0800ae34 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08a      	sub	sp, #40	; 0x28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800ae48:	2308      	movs	r3, #8
 800ae4a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae4c:	4b40      	ldr	r3, [pc, #256]	; (800af50 <HAL_FLASH_Program+0x11c>)
 800ae4e:	7d1b      	ldrb	r3, [r3, #20]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d101      	bne.n	800ae58 <HAL_FLASH_Program+0x24>
 800ae54:	2302      	movs	r3, #2
 800ae56:	e076      	b.n	800af46 <HAL_FLASH_Program+0x112>
 800ae58:	4b3d      	ldr	r3, [pc, #244]	; (800af50 <HAL_FLASH_Program+0x11c>)
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae64:	d306      	bcc.n	800ae74 <HAL_FLASH_Program+0x40>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ae6c:	d202      	bcs.n	800ae74 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800ae72:	e00c      	b.n	800ae8e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ae7a:	d306      	bcc.n	800ae8a <HAL_FLASH_Program+0x56>
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800ae82:	d202      	bcs.n	800ae8a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800ae84:	2302      	movs	r3, #2
 800ae86:	61bb      	str	r3, [r7, #24]
 800ae88:	e001      	b.n	800ae8e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e05b      	b.n	800af46 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ae8e:	4b30      	ldr	r3, [pc, #192]	; (800af50 <HAL_FLASH_Program+0x11c>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800ae94:	69b9      	ldr	r1, [r7, #24]
 800ae96:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae9a:	f000 f897 	bl	800afcc <FLASH_WaitForLastOperation>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800aea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d147      	bne.n	800af3c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d106      	bne.n	800aec0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800aeb2:	4b28      	ldr	r3, [pc, #160]	; (800af54 <HAL_FLASH_Program+0x120>)
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	4a27      	ldr	r2, [pc, #156]	; (800af54 <HAL_FLASH_Program+0x120>)
 800aeb8:	f043 0302 	orr.w	r3, r3, #2
 800aebc:	60d3      	str	r3, [r2, #12]
 800aebe:	e007      	b.n	800aed0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800aec0:	4b24      	ldr	r3, [pc, #144]	; (800af54 <HAL_FLASH_Program+0x120>)
 800aec2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aec6:	4a23      	ldr	r2, [pc, #140]	; (800af54 <HAL_FLASH_Program+0x120>)
 800aec8:	f043 0302 	orr.w	r3, r3, #2
 800aecc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800aed0:	f3bf 8f6f 	isb	sy
}
 800aed4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aed6:	f3bf 8f4f 	dsb	sy
}
 800aeda:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	3304      	adds	r3, #4
 800aee8:	623b      	str	r3, [r7, #32]
        src_addr++;
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	3304      	adds	r3, #4
 800aeee:	61fb      	str	r3, [r7, #28]
        row_index--;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1ef      	bne.n	800aedc <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800aefc:	f3bf 8f6f 	isb	sy
}
 800af00:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800af02:	f3bf 8f4f 	dsb	sy
}
 800af06:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800af08:	69b9      	ldr	r1, [r7, #24]
 800af0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af0e:	f000 f85d 	bl	800afcc <FLASH_WaitForLastOperation>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d106      	bne.n	800af2c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800af1e:	4b0d      	ldr	r3, [pc, #52]	; (800af54 <HAL_FLASH_Program+0x120>)
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	4a0c      	ldr	r2, [pc, #48]	; (800af54 <HAL_FLASH_Program+0x120>)
 800af24:	f023 0302 	bic.w	r3, r3, #2
 800af28:	60d3      	str	r3, [r2, #12]
 800af2a:	e007      	b.n	800af3c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <HAL_FLASH_Program+0x120>)
 800af2e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af32:	4a08      	ldr	r2, [pc, #32]	; (800af54 <HAL_FLASH_Program+0x120>)
 800af34:	f023 0302 	bic.w	r3, r3, #2
 800af38:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af3c:	4b04      	ldr	r3, [pc, #16]	; (800af50 <HAL_FLASH_Program+0x11c>)
 800af3e:	2200      	movs	r2, #0
 800af40:	751a      	strb	r2, [r3, #20]

  return status;
 800af42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af46:	4618      	mov	r0, r3
 800af48:	3728      	adds	r7, #40	; 0x28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	24002000 	.word	0x24002000
 800af54:	52002000 	.word	0x52002000

0800af58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800af5c:	4b18      	ldr	r3, [pc, #96]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00d      	beq.n	800af84 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800af68:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800af6a:	4a16      	ldr	r2, [pc, #88]	; (800afc4 <HAL_FLASH_Unlock+0x6c>)
 800af6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800af6e:	4b14      	ldr	r3, [pc, #80]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800af70:	4a15      	ldr	r2, [pc, #84]	; (800afc8 <HAL_FLASH_Unlock+0x70>)
 800af72:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800af74:	4b12      	ldr	r3, [pc, #72]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e018      	b.n	800afb6 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800af84:	4b0e      	ldr	r3, [pc, #56]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800af86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d010      	beq.n	800afb4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800af92:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800af94:	4a0b      	ldr	r2, [pc, #44]	; (800afc4 <HAL_FLASH_Unlock+0x6c>)
 800af96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800af9a:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800af9c:	4a0a      	ldr	r2, [pc, #40]	; (800afc8 <HAL_FLASH_Unlock+0x70>)
 800af9e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800afa2:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <HAL_FLASH_Unlock+0x68>)
 800afa4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	52002000 	.word	0x52002000
 800afc4:	45670123 	.word	0x45670123
 800afc8:	cdef89ab 	.word	0xcdef89ab

0800afcc <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800afd6:	2304      	movs	r3, #4
 800afd8:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800afde:	f7fa ffab 	bl	8005f38 <HAL_GetTick>
 800afe2:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d113      	bne.n	800b012 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800afea:	4b41      	ldr	r3, [pc, #260]	; (800b0f0 <FLASH_WaitForLastOperation+0x124>)
 800afec:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800afee:	e010      	b.n	800b012 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aff6:	d00c      	beq.n	800b012 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aff8:	f7fa ff9e 	bl	8005f38 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	429a      	cmp	r2, r3
 800b006:	d302      	bcc.n	800b00e <FLASH_WaitForLastOperation+0x42>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e06a      	b.n	800b0e8 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	4b37      	ldr	r3, [pc, #220]	; (800b0f4 <FLASH_WaitForLastOperation+0x128>)
 800b016:	4013      	ands	r3, r2
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d10a      	bne.n	800b034 <FLASH_WaitForLastOperation+0x68>
 800b01e:	4b36      	ldr	r3, [pc, #216]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	4013      	ands	r3, r2
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	429a      	cmp	r2, r3
 800b02a:	bf0c      	ite	eq
 800b02c:	2301      	moveq	r3, #1
 800b02e:	2300      	movne	r3, #0
 800b030:	b2db      	uxtb	r3, r3
 800b032:	e00c      	b.n	800b04e <FLASH_WaitForLastOperation+0x82>
 800b034:	4b30      	ldr	r3, [pc, #192]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b036:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b03a:	43da      	mvns	r2, r3
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	4013      	ands	r3, r2
 800b040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b044:	2b00      	cmp	r3, #0
 800b046:	bf0c      	ite	eq
 800b048:	2301      	moveq	r3, #1
 800b04a:	2300      	movne	r3, #0
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1ce      	bne.n	800aff0 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d105      	bne.n	800b064 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800b058:	4b27      	ldr	r3, [pc, #156]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	4b27      	ldr	r3, [pc, #156]	; (800b0fc <FLASH_WaitForLastOperation+0x130>)
 800b05e:	4013      	ands	r3, r2
 800b060:	613b      	str	r3, [r7, #16]
 800b062:	e007      	b.n	800b074 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800b064:	4b24      	ldr	r3, [pc, #144]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b066:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800b06a:	4b24      	ldr	r3, [pc, #144]	; (800b0fc <FLASH_WaitForLastOperation+0x130>)
 800b06c:	4013      	ands	r3, r2
 800b06e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b072:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d017      	beq.n	800b0ae <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b07e:	4b20      	ldr	r3, [pc, #128]	; (800b100 <FLASH_WaitForLastOperation+0x134>)
 800b080:	699a      	ldr	r2, [r3, #24]
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	4313      	orrs	r3, r2
 800b086:	4a1e      	ldr	r2, [pc, #120]	; (800b100 <FLASH_WaitForLastOperation+0x134>)
 800b088:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	4b19      	ldr	r3, [pc, #100]	; (800b0f4 <FLASH_WaitForLastOperation+0x128>)
 800b08e:	4013      	ands	r3, r2
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	429a      	cmp	r2, r3
 800b094:	d103      	bne.n	800b09e <FLASH_WaitForLastOperation+0xd2>
 800b096:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	6153      	str	r3, [r2, #20]
 800b09c:	e005      	b.n	800b0aa <FLASH_WaitForLastOperation+0xde>
 800b09e:	4a16      	ldr	r2, [pc, #88]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0a6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e01c      	b.n	800b0e8 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d10b      	bne.n	800b0cc <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800b0b4:	4b10      	ldr	r3, [pc, #64]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c0:	d111      	bne.n	800b0e6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800b0c2:	4b0d      	ldr	r3, [pc, #52]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b0c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b0c8:	615a      	str	r2, [r3, #20]
 800b0ca:	e00c      	b.n	800b0e6 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b0ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b0d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0da:	d104      	bne.n	800b0e6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800b0dc:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <FLASH_WaitForLastOperation+0x12c>)
 800b0de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b0e2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	80000004 	.word	0x80000004
 800b0f4:	1fef000f 	.word	0x1fef000f
 800b0f8:	52002000 	.word	0x52002000
 800b0fc:	17ee0000 	.word	0x17ee0000
 800b100:	24002000 	.word	0x24002000

0800b104 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b112:	4b5e      	ldr	r3, [pc, #376]	; (800b28c <HAL_FLASHEx_Erase+0x188>)
 800b114:	7d1b      	ldrb	r3, [r3, #20]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d101      	bne.n	800b11e <HAL_FLASHEx_Erase+0x1a>
 800b11a:	2302      	movs	r3, #2
 800b11c:	e0b2      	b.n	800b284 <HAL_FLASHEx_Erase+0x180>
 800b11e:	4b5b      	ldr	r3, [pc, #364]	; (800b28c <HAL_FLASHEx_Erase+0x188>)
 800b120:	2201      	movs	r2, #1
 800b122:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b124:	4b59      	ldr	r3, [pc, #356]	; (800b28c <HAL_FLASHEx_Erase+0x188>)
 800b126:	2200      	movs	r2, #0
 800b128:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d009      	beq.n	800b14a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b136:	2101      	movs	r1, #1
 800b138:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b13c:	f7ff ff46 	bl	800afcc <FLASH_WaitForLastOperation>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f003 0302 	and.w	r3, r3, #2
 800b152:	2b00      	cmp	r3, #0
 800b154:	d009      	beq.n	800b16a <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b156:	2102      	movs	r1, #2
 800b158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b15c:	f7ff ff36 	bl	800afcc <FLASH_WaitForLastOperation>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f040 8085 	bne.w	800b27c <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d136      	bne.n	800b1e8 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691a      	ldr	r2, [r3, #16]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	4619      	mov	r1, r3
 800b184:	4610      	mov	r0, r2
 800b186:	f000 f887 	bl	800b298 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00f      	beq.n	800b1b6 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b196:	2101      	movs	r1, #1
 800b198:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b19c:	f7ff ff16 	bl	800afcc <FLASH_WaitForLastOperation>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b1aa:	4b39      	ldr	r3, [pc, #228]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	4a38      	ldr	r2, [pc, #224]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b1b0:	f023 0308 	bic.w	r3, r3, #8
 800b1b4:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f003 0302 	and.w	r3, r3, #2
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d05c      	beq.n	800b27c <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b1c2:	2102      	movs	r1, #2
 800b1c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1c8:	f7ff ff00 	bl	800afcc <FLASH_WaitForLastOperation>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b1d6:	4b2e      	ldr	r3, [pc, #184]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b1d8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b1dc:	4a2c      	ldr	r2, [pc, #176]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b1de:	f023 0308 	bic.w	r3, r3, #8
 800b1e2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b1e6:	e049      	b.n	800b27c <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1ee:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	60bb      	str	r3, [r7, #8]
 800b1f6:	e039      	b.n	800b26c <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6859      	ldr	r1, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	461a      	mov	r2, r3
 800b202:	68b8      	ldr	r0, [r7, #8]
 800b204:	f000 f8b2 	bl	800b36c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00c      	beq.n	800b22e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b214:	2101      	movs	r1, #1
 800b216:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b21a:	f7ff fed7 	bl	800afcc <FLASH_WaitForLastOperation>
 800b21e:	4603      	mov	r3, r0
 800b220:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b222:	4b1b      	ldr	r3, [pc, #108]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	491a      	ldr	r1, [pc, #104]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b228:	4b1a      	ldr	r3, [pc, #104]	; (800b294 <HAL_FLASHEx_Erase+0x190>)
 800b22a:	4013      	ands	r3, r2
 800b22c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00e      	beq.n	800b258 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b23a:	2102      	movs	r1, #2
 800b23c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b240:	f7ff fec4 	bl	800afcc <FLASH_WaitForLastOperation>
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b248:	4b11      	ldr	r3, [pc, #68]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b24a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b24e:	4910      	ldr	r1, [pc, #64]	; (800b290 <HAL_FLASHEx_Erase+0x18c>)
 800b250:	4b10      	ldr	r3, [pc, #64]	; (800b294 <HAL_FLASHEx_Erase+0x190>)
 800b252:	4013      	ands	r3, r2
 800b254:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	601a      	str	r2, [r3, #0]
          break;
 800b264:	e00a      	b.n	800b27c <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	3301      	adds	r3, #1
 800b26a:	60bb      	str	r3, [r7, #8]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	4413      	add	r3, r2
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d3bd      	bcc.n	800b1f8 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b27c:	4b03      	ldr	r3, [pc, #12]	; (800b28c <HAL_FLASHEx_Erase+0x188>)
 800b27e:	2200      	movs	r2, #0
 800b280:	751a      	strb	r2, [r3, #20]

  return status;
 800b282:	7bfb      	ldrb	r3, [r7, #15]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	24002000 	.word	0x24002000
 800b290:	52002000 	.word	0x52002000
 800b294:	fffff8fb 	.word	0xfffff8fb

0800b298 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	f003 0303 	and.w	r3, r3, #3
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d122      	bne.n	800b2f2 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b2ac:	4b2e      	ldr	r3, [pc, #184]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	4a2d      	ldr	r2, [pc, #180]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b2b6:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b2b8:	4b2b      	ldr	r3, [pc, #172]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b2be:	4a2a      	ldr	r2, [pc, #168]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b2c4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b2c8:	4b27      	ldr	r3, [pc, #156]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	4926      	ldr	r1, [pc, #152]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b2d4:	4b24      	ldr	r3, [pc, #144]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2d6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b2da:	4923      	ldr	r1, [pc, #140]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b2e4:	4b20      	ldr	r3, [pc, #128]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	4a1f      	ldr	r2, [pc, #124]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2ea:	f043 0310 	orr.w	r3, r3, #16
 800b2ee:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b2f0:	e033      	b.n	800b35a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d011      	beq.n	800b320 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <FLASH_MassErase+0xd0>)
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	4a19      	ldr	r2, [pc, #100]	; (800b368 <FLASH_MassErase+0xd0>)
 800b302:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b306:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b308:	4b17      	ldr	r3, [pc, #92]	; (800b368 <FLASH_MassErase+0xd0>)
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	4916      	ldr	r1, [pc, #88]	; (800b368 <FLASH_MassErase+0xd0>)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4313      	orrs	r3, r2
 800b312:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b314:	4b14      	ldr	r3, [pc, #80]	; (800b368 <FLASH_MassErase+0xd0>)
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	4a13      	ldr	r2, [pc, #76]	; (800b368 <FLASH_MassErase+0xd0>)
 800b31a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b31e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d017      	beq.n	800b35a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b32a:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <FLASH_MassErase+0xd0>)
 800b32c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b330:	4a0d      	ldr	r2, [pc, #52]	; (800b368 <FLASH_MassErase+0xd0>)
 800b332:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b336:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b33a:	4b0b      	ldr	r3, [pc, #44]	; (800b368 <FLASH_MassErase+0xd0>)
 800b33c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b340:	4909      	ldr	r1, [pc, #36]	; (800b368 <FLASH_MassErase+0xd0>)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4313      	orrs	r3, r2
 800b346:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b34a:	4b07      	ldr	r3, [pc, #28]	; (800b368 <FLASH_MassErase+0xd0>)
 800b34c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b350:	4a05      	ldr	r2, [pc, #20]	; (800b368 <FLASH_MassErase+0xd0>)
 800b352:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b356:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	52002000 	.word	0x52002000

0800b36c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d010      	beq.n	800b3a4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b382:	4b18      	ldr	r3, [pc, #96]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4a17      	ldr	r2, [pc, #92]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b388:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b38c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b38e:	4b15      	ldr	r3, [pc, #84]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b390:	68da      	ldr	r2, [r3, #12]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	0219      	lsls	r1, r3, #8
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	430b      	orrs	r3, r1
 800b39a:	4313      	orrs	r3, r2
 800b39c:	4a11      	ldr	r2, [pc, #68]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b39e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b3a2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f003 0302 	and.w	r3, r3, #2
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d014      	beq.n	800b3d8 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b3b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3b4:	4a0b      	ldr	r2, [pc, #44]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b3b6:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b3ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b3be:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b3c0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	0219      	lsls	r1, r3, #8
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	4a05      	ldr	r2, [pc, #20]	; (800b3e4 <FLASH_Erase_Sector+0x78>)
 800b3d0:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b3d4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b3d8:	bf00      	nop
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	52002000 	.word	0x52002000

0800b3e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b089      	sub	sp, #36	; 0x24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b3f6:	4b89      	ldr	r3, [pc, #548]	; (800b61c <HAL_GPIO_Init+0x234>)
 800b3f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b3fa:	e194      	b.n	800b726 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	2101      	movs	r1, #1
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	fa01 f303 	lsl.w	r3, r1, r3
 800b408:	4013      	ands	r3, r2
 800b40a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f000 8186 	beq.w	800b720 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f003 0303 	and.w	r3, r3, #3
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d005      	beq.n	800b42c <HAL_GPIO_Init+0x44>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f003 0303 	and.w	r3, r3, #3
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d130      	bne.n	800b48e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	2203      	movs	r2, #3
 800b438:	fa02 f303 	lsl.w	r3, r2, r3
 800b43c:	43db      	mvns	r3, r3
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	4013      	ands	r3, r2
 800b442:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	68da      	ldr	r2, [r3, #12]
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	fa02 f303 	lsl.w	r3, r2, r3
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	4313      	orrs	r3, r2
 800b454:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b462:	2201      	movs	r2, #1
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	fa02 f303 	lsl.w	r3, r2, r3
 800b46a:	43db      	mvns	r3, r3
 800b46c:	69ba      	ldr	r2, [r7, #24]
 800b46e:	4013      	ands	r3, r2
 800b470:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	091b      	lsrs	r3, r3, #4
 800b478:	f003 0201 	and.w	r2, r3, #1
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	fa02 f303 	lsl.w	r3, r2, r3
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	4313      	orrs	r3, r2
 800b486:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	69ba      	ldr	r2, [r7, #24]
 800b48c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f003 0303 	and.w	r3, r3, #3
 800b496:	2b03      	cmp	r3, #3
 800b498:	d017      	beq.n	800b4ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	2203      	movs	r2, #3
 800b4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4aa:	43db      	mvns	r3, r3
 800b4ac:	69ba      	ldr	r2, [r7, #24]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	689a      	ldr	r2, [r3, #8]
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b4be:	69ba      	ldr	r2, [r7, #24]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d123      	bne.n	800b51e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	08da      	lsrs	r2, r3, #3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	3208      	adds	r2, #8
 800b4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	f003 0307 	and.w	r3, r3, #7
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	220f      	movs	r2, #15
 800b4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f2:	43db      	mvns	r3, r3
 800b4f4:	69ba      	ldr	r2, [r7, #24]
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	691a      	ldr	r2, [r3, #16]
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	f003 0307 	and.w	r3, r3, #7
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	fa02 f303 	lsl.w	r3, r2, r3
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	08da      	lsrs	r2, r3, #3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3208      	adds	r2, #8
 800b518:	69b9      	ldr	r1, [r7, #24]
 800b51a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	005b      	lsls	r3, r3, #1
 800b528:	2203      	movs	r2, #3
 800b52a:	fa02 f303 	lsl.w	r3, r2, r3
 800b52e:	43db      	mvns	r3, r3
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	4013      	ands	r3, r2
 800b534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	f003 0203 	and.w	r2, r3, #3
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	fa02 f303 	lsl.w	r3, r2, r3
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	4313      	orrs	r3, r2
 800b54a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f000 80e0 	beq.w	800b720 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b560:	4b2f      	ldr	r3, [pc, #188]	; (800b620 <HAL_GPIO_Init+0x238>)
 800b562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b566:	4a2e      	ldr	r2, [pc, #184]	; (800b620 <HAL_GPIO_Init+0x238>)
 800b568:	f043 0302 	orr.w	r3, r3, #2
 800b56c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b570:	4b2b      	ldr	r3, [pc, #172]	; (800b620 <HAL_GPIO_Init+0x238>)
 800b572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b57e:	4a29      	ldr	r2, [pc, #164]	; (800b624 <HAL_GPIO_Init+0x23c>)
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	089b      	lsrs	r3, r3, #2
 800b584:	3302      	adds	r3, #2
 800b586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b58a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	f003 0303 	and.w	r3, r3, #3
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	220f      	movs	r2, #15
 800b596:	fa02 f303 	lsl.w	r3, r2, r3
 800b59a:	43db      	mvns	r3, r3
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	4013      	ands	r3, r2
 800b5a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a20      	ldr	r2, [pc, #128]	; (800b628 <HAL_GPIO_Init+0x240>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d052      	beq.n	800b650 <HAL_GPIO_Init+0x268>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a1f      	ldr	r2, [pc, #124]	; (800b62c <HAL_GPIO_Init+0x244>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d031      	beq.n	800b616 <HAL_GPIO_Init+0x22e>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a1e      	ldr	r2, [pc, #120]	; (800b630 <HAL_GPIO_Init+0x248>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d02b      	beq.n	800b612 <HAL_GPIO_Init+0x22a>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a1d      	ldr	r2, [pc, #116]	; (800b634 <HAL_GPIO_Init+0x24c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d025      	beq.n	800b60e <HAL_GPIO_Init+0x226>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a1c      	ldr	r2, [pc, #112]	; (800b638 <HAL_GPIO_Init+0x250>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d01f      	beq.n	800b60a <HAL_GPIO_Init+0x222>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a1b      	ldr	r2, [pc, #108]	; (800b63c <HAL_GPIO_Init+0x254>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d019      	beq.n	800b606 <HAL_GPIO_Init+0x21e>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a1a      	ldr	r2, [pc, #104]	; (800b640 <HAL_GPIO_Init+0x258>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d013      	beq.n	800b602 <HAL_GPIO_Init+0x21a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a19      	ldr	r2, [pc, #100]	; (800b644 <HAL_GPIO_Init+0x25c>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00d      	beq.n	800b5fe <HAL_GPIO_Init+0x216>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a18      	ldr	r2, [pc, #96]	; (800b648 <HAL_GPIO_Init+0x260>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d007      	beq.n	800b5fa <HAL_GPIO_Init+0x212>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a17      	ldr	r2, [pc, #92]	; (800b64c <HAL_GPIO_Init+0x264>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d101      	bne.n	800b5f6 <HAL_GPIO_Init+0x20e>
 800b5f2:	2309      	movs	r3, #9
 800b5f4:	e02d      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b5f6:	230a      	movs	r3, #10
 800b5f8:	e02b      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b5fa:	2308      	movs	r3, #8
 800b5fc:	e029      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b5fe:	2307      	movs	r3, #7
 800b600:	e027      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b602:	2306      	movs	r3, #6
 800b604:	e025      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b606:	2305      	movs	r3, #5
 800b608:	e023      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b60a:	2304      	movs	r3, #4
 800b60c:	e021      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b60e:	2303      	movs	r3, #3
 800b610:	e01f      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b612:	2302      	movs	r3, #2
 800b614:	e01d      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b616:	2301      	movs	r3, #1
 800b618:	e01b      	b.n	800b652 <HAL_GPIO_Init+0x26a>
 800b61a:	bf00      	nop
 800b61c:	58000080 	.word	0x58000080
 800b620:	58024400 	.word	0x58024400
 800b624:	58000400 	.word	0x58000400
 800b628:	58020000 	.word	0x58020000
 800b62c:	58020400 	.word	0x58020400
 800b630:	58020800 	.word	0x58020800
 800b634:	58020c00 	.word	0x58020c00
 800b638:	58021000 	.word	0x58021000
 800b63c:	58021400 	.word	0x58021400
 800b640:	58021800 	.word	0x58021800
 800b644:	58021c00 	.word	0x58021c00
 800b648:	58022000 	.word	0x58022000
 800b64c:	58022400 	.word	0x58022400
 800b650:	2300      	movs	r3, #0
 800b652:	69fa      	ldr	r2, [r7, #28]
 800b654:	f002 0203 	and.w	r2, r2, #3
 800b658:	0092      	lsls	r2, r2, #2
 800b65a:	4093      	lsls	r3, r2
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	4313      	orrs	r3, r2
 800b660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b662:	4938      	ldr	r1, [pc, #224]	; (800b744 <HAL_GPIO_Init+0x35c>)
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	089b      	lsrs	r3, r3, #2
 800b668:	3302      	adds	r3, #2
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	43db      	mvns	r3, r3
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	4013      	ands	r3, r2
 800b680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b68e:	69ba      	ldr	r2, [r7, #24]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	4313      	orrs	r3, r2
 800b694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b69e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	43db      	mvns	r3, r3
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b6c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	43db      	mvns	r3, r3
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	4013      	ands	r3, r2
 800b6da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b6e8:	69ba      	ldr	r2, [r7, #24]
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	43db      	mvns	r3, r3
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	4013      	ands	r3, r2
 800b704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	3301      	adds	r3, #1
 800b724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	fa22 f303 	lsr.w	r3, r2, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	f47f ae63 	bne.w	800b3fc <HAL_GPIO_Init+0x14>
  }
}
 800b736:	bf00      	nop
 800b738:	bf00      	nop
 800b73a:	3724      	adds	r7, #36	; 0x24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	58000400 	.word	0x58000400

0800b748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	691a      	ldr	r2, [r3, #16]
 800b758:	887b      	ldrh	r3, [r7, #2]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b760:	2301      	movs	r3, #1
 800b762:	73fb      	strb	r3, [r7, #15]
 800b764:	e001      	b.n	800b76a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b766:	2300      	movs	r3, #0
 800b768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	807b      	strh	r3, [r7, #2]
 800b784:	4613      	mov	r3, r2
 800b786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b788:	787b      	ldrb	r3, [r7, #1]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d003      	beq.n	800b796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b78e:	887a      	ldrh	r2, [r7, #2]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b794:	e003      	b.n	800b79e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b796:	887b      	ldrh	r3, [r7, #2]
 800b798:	041a      	lsls	r2, r3, #16
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	619a      	str	r2, [r3, #24]
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
	...

0800b7ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e08b      	b.n	800b8d6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d106      	bne.n	800b7d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7f7 f99c 	bl	8002b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2224      	movs	r2, #36	; 0x24
 800b7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f022 0201 	bic.w	r2, r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b7fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b80c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d107      	bne.n	800b826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689a      	ldr	r2, [r3, #8]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b822:	609a      	str	r2, [r3, #8]
 800b824:	e006      	b.n	800b834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	689a      	ldr	r2, [r3, #8]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d108      	bne.n	800b84e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b84a:	605a      	str	r2, [r3, #4]
 800b84c:	e007      	b.n	800b85e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b85c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6859      	ldr	r1, [r3, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	4b1d      	ldr	r3, [pc, #116]	; (800b8e0 <HAL_I2C_Init+0x134>)
 800b86a:	430b      	orrs	r3, r1
 800b86c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68da      	ldr	r2, [r3, #12]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b87c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	691a      	ldr	r2, [r3, #16]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	695b      	ldr	r3, [r3, #20]
 800b886:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	430a      	orrs	r2, r1
 800b896:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	69d9      	ldr	r1, [r3, #28]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a1a      	ldr	r2, [r3, #32]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0201 	orr.w	r2, r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	02008000 	.word	0x02008000

0800b8e4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08a      	sub	sp, #40	; 0x28
 800b8e8:	af02      	add	r7, sp, #8
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	607a      	str	r2, [r7, #4]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	817b      	strh	r3, [r7, #10]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b20      	cmp	r3, #32
 800b906:	f040 80ef 	bne.w	800bae8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b918:	d101      	bne.n	800b91e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b91a:	2302      	movs	r3, #2
 800b91c:	e0e5      	b.n	800baea <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b924:	2b01      	cmp	r3, #1
 800b926:	d101      	bne.n	800b92c <HAL_I2C_Master_Transmit_DMA+0x48>
 800b928:	2302      	movs	r3, #2
 800b92a:	e0de      	b.n	800baea <HAL_I2C_Master_Transmit_DMA+0x206>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2221      	movs	r2, #33	; 0x21
 800b938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2210      	movs	r2, #16
 800b940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	893a      	ldrh	r2, [r7, #8]
 800b954:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	4a66      	ldr	r2, [pc, #408]	; (800baf4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b95a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4a66      	ldr	r2, [pc, #408]	; (800baf8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b960:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b966:	b29b      	uxth	r3, r3
 800b968:	2bff      	cmp	r3, #255	; 0xff
 800b96a:	d906      	bls.n	800b97a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	22ff      	movs	r2, #255	; 0xff
 800b970:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b972:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b976:	61fb      	str	r3, [r7, #28]
 800b978:	e007      	b.n	800b98a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b97e:	b29a      	uxth	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b988:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d01a      	beq.n	800b9c8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	781a      	ldrb	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ac:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d074      	beq.n	800baba <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d022      	beq.n	800ba1e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9dc:	4a47      	ldr	r2, [pc, #284]	; (800bafc <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b9de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e4:	4a46      	ldr	r2, [pc, #280]	; (800bb00 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b9e6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba08:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba0e:	f7fc ff17 	bl	8008840 <HAL_DMA_Start_IT>
 800ba12:	4603      	mov	r3, r0
 800ba14:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d13a      	bne.n	800ba92 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800ba1c:	e013      	b.n	800ba46 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2220      	movs	r2, #32
 800ba22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e051      	b.n	800baea <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	8979      	ldrh	r1, [r7, #10]
 800ba52:	4b2c      	ldr	r3, [pc, #176]	; (800bb04 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f002 f83b 	bl	800dad4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ba78:	2110      	movs	r1, #16
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f002 f85c 	bl	800db38 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	e028      	b.n	800bae4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa6:	f043 0210 	orr.w	r2, r3, #16
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e017      	b.n	800baea <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	4a12      	ldr	r2, [pc, #72]	; (800bb08 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800babe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	8979      	ldrh	r1, [r7, #10]
 800bac6:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f002 f800 	bl	800dad4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800badc:	2101      	movs	r1, #1
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f002 f82a 	bl	800db38 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	e000      	b.n	800baea <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800bae8:	2302      	movs	r3, #2
  }
}
 800baea:	4618      	mov	r0, r3
 800baec:	3720      	adds	r7, #32
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	ffff0000 	.word	0xffff0000
 800baf8:	0800c33f 	.word	0x0800c33f
 800bafc:	0800d6f7 	.word	0x0800d6f7
 800bb00:	0800d825 	.word	0x0800d825
 800bb04:	80002000 	.word	0x80002000
 800bb08:	0800becf 	.word	0x0800becf

0800bb0c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	607a      	str	r2, [r7, #4]
 800bb16:	461a      	mov	r2, r3
 800bb18:	460b      	mov	r3, r1
 800bb1a:	817b      	strh	r3, [r7, #10]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b20      	cmp	r3, #32
 800bb2a:	f040 80cd 	bne.w	800bcc8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb3c:	d101      	bne.n	800bb42 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800bb3e:	2302      	movs	r3, #2
 800bb40:	e0c3      	b.n	800bcca <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d101      	bne.n	800bb50 <HAL_I2C_Master_Receive_DMA+0x44>
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	e0bc      	b.n	800bcca <HAL_I2C_Master_Receive_DMA+0x1be>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2222      	movs	r2, #34	; 0x22
 800bb5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2210      	movs	r2, #16
 800bb64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	893a      	ldrh	r2, [r7, #8]
 800bb78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	4a55      	ldr	r2, [pc, #340]	; (800bcd4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800bb7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	4a55      	ldr	r2, [pc, #340]	; (800bcd8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800bb84:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	2bff      	cmp	r3, #255	; 0xff
 800bb8e:	d906      	bls.n	800bb9e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	22ff      	movs	r2, #255	; 0xff
 800bb94:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bb96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	e007      	b.n	800bbae <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d070      	beq.n	800bc98 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d020      	beq.n	800bc00 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	4a46      	ldr	r2, [pc, #280]	; (800bcdc <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800bbc4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbca:	4a45      	ldr	r2, [pc, #276]	; (800bce0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bbcc:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	2200      	movs	r2, #0
 800bbdc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	3324      	adds	r3, #36	; 0x24
 800bbe8:	4619      	mov	r1, r3
 800bbea:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bbf0:	f7fc fe26 	bl	8008840 <HAL_DMA_Start_IT>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bbf8:	7cfb      	ldrb	r3, [r7, #19]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d138      	bne.n	800bc70 <HAL_I2C_Master_Receive_DMA+0x164>
 800bbfe:	e013      	b.n	800bc28 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e050      	b.n	800bcca <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	8979      	ldrh	r1, [r7, #10]
 800bc30:	4b2c      	ldr	r3, [pc, #176]	; (800bce4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f001 ff4c 	bl	800dad4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bc56:	2110      	movs	r1, #16
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f001 ff6d 	bl	800db38 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	e029      	b.n	800bcc4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc84:	f043 0210 	orr.w	r2, r3, #16
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e018      	b.n	800bcca <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4a13      	ldr	r2, [pc, #76]	; (800bce8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800bc9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	8979      	ldrh	r1, [r7, #10]
 800bca6:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f001 ff10 	bl	800dad4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f001 ff3a 	bl	800db38 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	e000      	b.n	800bcca <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800bcc8:	2302      	movs	r3, #2
  }
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	ffff0000 	.word	0xffff0000
 800bcd8:	0800c33f 	.word	0x0800c33f
 800bcdc:	0800d78d 	.word	0x0800d78d
 800bce0:	0800d825 	.word	0x0800d825
 800bce4:	80002400 	.word	0x80002400
 800bce8:	0800becf 	.word	0x0800becf

0800bcec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	68f9      	ldr	r1, [r7, #12]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	4798      	blx	r3
  }
}
 800bd18:	bf00      	nop
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	0a1b      	lsrs	r3, r3, #8
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	09db      	lsrs	r3, r3, #7
 800bd48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00a      	beq.n	800bd66 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd54:	f043 0201 	orr.w	r2, r3, #1
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	0a9b      	lsrs	r3, r3, #10
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d010      	beq.n	800bd94 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	09db      	lsrs	r3, r3, #7
 800bd76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd82:	f043 0208 	orr.w	r2, r3, #8
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	0a5b      	lsrs	r3, r3, #9
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d010      	beq.n	800bdc2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	09db      	lsrs	r3, r3, #7
 800bda4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00a      	beq.n	800bdc2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb0:	f043 0202 	orr.w	r2, r3, #2
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdc0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f003 030b 	and.w	r3, r3, #11
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800bdd2:	68f9      	ldr	r1, [r7, #12]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f001 fb53 	bl	800d480 <I2C_ITError>
  }
}
 800bdda:	bf00      	nop
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b083      	sub	sp, #12
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bdea:	bf00      	nop
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bdfe:	bf00      	nop
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800be26:	bf00      	nop
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
 800be3a:	460b      	mov	r3, r1
 800be3c:	70fb      	strb	r3, [r7, #3]
 800be3e:	4613      	mov	r3, r2
 800be40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800be42:	bf00      	nop
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be62:	b480      	push	{r7}
 800be64:	b083      	sub	sp, #12
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800be7e:	bf00      	nop
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b083      	sub	sp, #12
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800be92:	bf00      	nop
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b083      	sub	sp, #12
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bec0:	b2db      	uxtb	r3, r3
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b088      	sub	sp, #32
 800bed2:	af02      	add	r7, sp, #8
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d101      	bne.n	800beec <I2C_Master_ISR_IT+0x1e>
 800bee8:	2302      	movs	r3, #2
 800beea:	e120      	b.n	800c12e <I2C_Master_ISR_IT+0x260>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	091b      	lsrs	r3, r3, #4
 800bef8:	f003 0301 	and.w	r3, r3, #1
 800befc:	2b00      	cmp	r3, #0
 800befe:	d013      	beq.n	800bf28 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	091b      	lsrs	r3, r3, #4
 800bf04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00d      	beq.n	800bf28 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2210      	movs	r2, #16
 800bf12:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf18:	f043 0204 	orr.w	r2, r3, #4
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f001 fbc4 	bl	800d6ae <I2C_Flush_TXDR>
 800bf26:	e0ed      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	089b      	lsrs	r3, r3, #2
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d023      	beq.n	800bf7c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	089b      	lsrs	r3, r3, #2
 800bf38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01d      	beq.n	800bf7c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f023 0304 	bic.w	r3, r3, #4
 800bf46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf64:	3b01      	subs	r3, #1
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf7a:	e0c3      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	099b      	lsrs	r3, r3, #6
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d12a      	bne.n	800bfde <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	085b      	lsrs	r3, r3, #1
 800bf8c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d024      	beq.n	800bfde <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	085b      	lsrs	r3, r3, #1
 800bf98:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d01e      	beq.n	800bfde <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 80ac 	beq.w	800c104 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	781a      	ldrb	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	1c5a      	adds	r2, r3, #1
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800bfdc:	e092      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	09db      	lsrs	r3, r3, #7
 800bfe2:	f003 0301 	and.w	r3, r3, #1
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d05d      	beq.n	800c0a6 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	099b      	lsrs	r3, r3, #6
 800bfee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d057      	beq.n	800c0a6 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d040      	beq.n	800c082 <I2C_Master_ISR_IT+0x1b4>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c004:	2b00      	cmp	r3, #0
 800c006:	d13c      	bne.n	800c082 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	b29b      	uxth	r3, r3
 800c010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c014:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	2bff      	cmp	r3, #255	; 0xff
 800c01e:	d90e      	bls.n	800c03e <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	22ff      	movs	r2, #255	; 0xff
 800c024:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	8a79      	ldrh	r1, [r7, #18]
 800c02e:	2300      	movs	r3, #0
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f001 fd4c 	bl	800dad4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c03c:	e032      	b.n	800c0a4 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c042:	b29a      	uxth	r2, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c050:	d00b      	beq.n	800c06a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c056:	b2da      	uxtb	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05c:	8a79      	ldrh	r1, [r7, #18]
 800c05e:	2000      	movs	r0, #0
 800c060:	9000      	str	r0, [sp, #0]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f001 fd36 	bl	800dad4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c068:	e01c      	b.n	800c0a4 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	8a79      	ldrh	r1, [r7, #18]
 800c072:	2300      	movs	r3, #0
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f001 fd2a 	bl	800dad4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c080:	e010      	b.n	800c0a4 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c08c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c090:	d003      	beq.n	800c09a <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f000 fdde 	bl	800cc54 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c098:	e034      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c09a:	2140      	movs	r1, #64	; 0x40
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f001 f9ef 	bl	800d480 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c0a2:	e02f      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
 800c0a4:	e02e      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	099b      	lsrs	r3, r3, #6
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d028      	beq.n	800c104 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	099b      	lsrs	r3, r3, #6
 800c0b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d022      	beq.n	800c104 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d119      	bne.n	800c0fc <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0d6:	d015      	beq.n	800c104 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0e0:	d108      	bne.n	800c0f4 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0f0:	605a      	str	r2, [r3, #4]
 800c0f2:	e007      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f000 fdad 	bl	800cc54 <I2C_ITMasterSeqCplt>
 800c0fa:	e003      	b.n	800c104 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c0fc:	2140      	movs	r1, #64	; 0x40
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f001 f9be 	bl	800d480 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	095b      	lsrs	r3, r3, #5
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	095b      	lsrs	r3, r3, #5
 800c114:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c11c:	6979      	ldr	r1, [r7, #20]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 fe34 	bl	800cd8c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b086      	sub	sp, #24
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	60b9      	str	r1, [r7, #8]
 800c140:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c152:	2b01      	cmp	r3, #1
 800c154:	d101      	bne.n	800c15a <I2C_Slave_ISR_IT+0x24>
 800c156:	2302      	movs	r3, #2
 800c158:	e0ed      	b.n	800c336 <I2C_Slave_ISR_IT+0x200>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	095b      	lsrs	r3, r3, #5
 800c166:	f003 0301 	and.w	r3, r3, #1
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00a      	beq.n	800c184 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	095b      	lsrs	r3, r3, #5
 800c172:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c176:	2b00      	cmp	r3, #0
 800c178:	d004      	beq.n	800c184 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c17a:	6939      	ldr	r1, [r7, #16]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f000 fecf 	bl	800cf20 <I2C_ITSlaveCplt>
 800c182:	e0d3      	b.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	091b      	lsrs	r3, r3, #4
 800c188:	f003 0301 	and.w	r3, r3, #1
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d04d      	beq.n	800c22c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	091b      	lsrs	r3, r3, #4
 800c194:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d047      	beq.n	800c22c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d128      	bne.n	800c1f8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b28      	cmp	r3, #40	; 0x28
 800c1b0:	d108      	bne.n	800c1c4 <I2C_Slave_ISR_IT+0x8e>
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1b8:	d104      	bne.n	800c1c4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c1ba:	6939      	ldr	r1, [r7, #16]
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f001 f909 	bl	800d3d4 <I2C_ITListenCplt>
 800c1c2:	e032      	b.n	800c22a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b29      	cmp	r3, #41	; 0x29
 800c1ce:	d10e      	bne.n	800c1ee <I2C_Slave_ISR_IT+0xb8>
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c1d6:	d00a      	beq.n	800c1ee <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2210      	movs	r2, #16
 800c1de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f001 fa64 	bl	800d6ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 fd71 	bl	800ccce <I2C_ITSlaveSeqCplt>
 800c1ec:	e01d      	b.n	800c22a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2210      	movs	r2, #16
 800c1f4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c1f6:	e096      	b.n	800c326 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2210      	movs	r2, #16
 800c1fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c204:	f043 0204 	orr.w	r2, r3, #4
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <I2C_Slave_ISR_IT+0xe6>
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c218:	f040 8085 	bne.w	800c326 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c220:	4619      	mov	r1, r3
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f001 f92c 	bl	800d480 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c228:	e07d      	b.n	800c326 <I2C_Slave_ISR_IT+0x1f0>
 800c22a:	e07c      	b.n	800c326 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	089b      	lsrs	r3, r3, #2
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d030      	beq.n	800c29a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	089b      	lsrs	r3, r3, #2
 800c23c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c240:	2b00      	cmp	r3, #0
 800c242:	d02a      	beq.n	800c29a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c248:	b29b      	uxth	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d018      	beq.n	800c280 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c258:	b2d2      	uxtb	r2, r2
 800c25a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	1c5a      	adds	r2, r3, #1
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c26a:	3b01      	subs	r3, #1
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c276:	b29b      	uxth	r3, r3
 800c278:	3b01      	subs	r3, #1
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c284:	b29b      	uxth	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d14f      	bne.n	800c32a <I2C_Slave_ISR_IT+0x1f4>
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c290:	d04b      	beq.n	800c32a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f000 fd1b 	bl	800ccce <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c298:	e047      	b.n	800c32a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	08db      	lsrs	r3, r3, #3
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00a      	beq.n	800c2bc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	08db      	lsrs	r3, r3, #3
 800c2aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d004      	beq.n	800c2bc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c2b2:	6939      	ldr	r1, [r7, #16]
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f000 fc49 	bl	800cb4c <I2C_ITAddrCplt>
 800c2ba:	e037      	b.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	085b      	lsrs	r3, r3, #1
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d031      	beq.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	085b      	lsrs	r3, r3, #1
 800c2cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d02b      	beq.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d018      	beq.n	800c310 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e2:	781a      	ldrb	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c306:	3b01      	subs	r3, #1
 800c308:	b29a      	uxth	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c30e:	e00d      	b.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c316:	d002      	beq.n	800c31e <I2C_Slave_ISR_IT+0x1e8>
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d106      	bne.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 fcd5 	bl	800ccce <I2C_ITSlaveSeqCplt>
 800c324:	e002      	b.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c326:	bf00      	nop
 800c328:	e000      	b.n	800c32c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c32a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b088      	sub	sp, #32
 800c342:	af02      	add	r7, sp, #8
 800c344:	60f8      	str	r0, [r7, #12]
 800c346:	60b9      	str	r1, [r7, #8]
 800c348:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <I2C_Master_ISR_DMA+0x1a>
 800c354:	2302      	movs	r3, #2
 800c356:	e0e1      	b.n	800c51c <I2C_Master_ISR_DMA+0x1de>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	091b      	lsrs	r3, r3, #4
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d017      	beq.n	800c39c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	091b      	lsrs	r3, r3, #4
 800c370:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c374:	2b00      	cmp	r3, #0
 800c376:	d011      	beq.n	800c39c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2210      	movs	r2, #16
 800c37e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c384:	f043 0204 	orr.w	r2, r3, #4
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c38c:	2120      	movs	r1, #32
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f001 fbd2 	bl	800db38 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f001 f98a 	bl	800d6ae <I2C_Flush_TXDR>
 800c39a:	e0ba      	b.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	09db      	lsrs	r3, r3, #7
 800c3a0:	f003 0301 	and.w	r3, r3, #1
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d072      	beq.n	800c48e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	099b      	lsrs	r3, r3, #6
 800c3ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d06c      	beq.n	800c48e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3c2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d04e      	beq.n	800c46c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3da:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	2bff      	cmp	r3, #255	; 0xff
 800c3e4:	d906      	bls.n	800c3f4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	22ff      	movs	r2, #255	; 0xff
 800c3ea:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c3ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e010      	b.n	800c416 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c402:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c406:	d003      	beq.n	800c410 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40c:	617b      	str	r3, [r7, #20]
 800c40e:	e002      	b.n	800c416 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c414:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	8a79      	ldrh	r1, [r7, #18]
 800c41e:	2300      	movs	r3, #0
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f001 fb55 	bl	800dad4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c42e:	b29a      	uxth	r2, r3
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	b29a      	uxth	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c442:	b2db      	uxtb	r3, r3
 800c444:	2b22      	cmp	r3, #34	; 0x22
 800c446:	d108      	bne.n	800c45a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c456:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c458:	e05b      	b.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c468:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c46a:	e052      	b.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c47a:	d003      	beq.n	800c484 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c47c:	68f8      	ldr	r0, [r7, #12]
 800c47e:	f000 fbe9 	bl	800cc54 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c482:	e046      	b.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c484:	2140      	movs	r1, #64	; 0x40
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f000 fffa 	bl	800d480 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c48c:	e041      	b.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	099b      	lsrs	r3, r3, #6
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d029      	beq.n	800c4ee <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	099b      	lsrs	r3, r3, #6
 800c49e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d023      	beq.n	800c4ee <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d119      	bne.n	800c4e4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4be:	d027      	beq.n	800c510 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4c8:	d108      	bne.n	800c4dc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4d8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c4da:	e019      	b.n	800c510 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 fbb9 	bl	800cc54 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c4e2:	e015      	b.n	800c510 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4e4:	2140      	movs	r1, #64	; 0x40
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 ffca 	bl	800d480 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c4ec:	e010      	b.n	800c510 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	095b      	lsrs	r3, r3, #5
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00b      	beq.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	095b      	lsrs	r3, r3, #5
 800c4fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c502:	2b00      	cmp	r3, #0
 800c504:	d005      	beq.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c506:	68b9      	ldr	r1, [r7, #8]
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 fc3f 	bl	800cd8c <I2C_ITMasterCplt>
 800c50e:	e000      	b.n	800c512 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c510:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b088      	sub	sp, #32
 800c528:	af02      	add	r7, sp, #8
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c530:	4b92      	ldr	r3, [pc, #584]	; (800c77c <I2C_Mem_ISR_DMA+0x258>)
 800c532:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <I2C_Mem_ISR_DMA+0x1e>
 800c53e:	2302      	movs	r3, #2
 800c540:	e118      	b.n	800c774 <I2C_Mem_ISR_DMA+0x250>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	091b      	lsrs	r3, r3, #4
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	d017      	beq.n	800c586 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	091b      	lsrs	r3, r3, #4
 800c55a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d011      	beq.n	800c586 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2210      	movs	r2, #16
 800c568:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56e:	f043 0204 	orr.w	r2, r3, #4
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c576:	2120      	movs	r1, #32
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f001 fadd 	bl	800db38 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f001 f895 	bl	800d6ae <I2C_Flush_TXDR>
 800c584:	e0f1      	b.n	800c76a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	085b      	lsrs	r3, r3, #1
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00f      	beq.n	800c5b2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	085b      	lsrs	r3, r3, #1
 800c596:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d009      	beq.n	800c5b2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c5a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5ae:	651a      	str	r2, [r3, #80]	; 0x50
 800c5b0:	e0db      	b.n	800c76a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	09db      	lsrs	r3, r3, #7
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d060      	beq.n	800c680 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	099b      	lsrs	r3, r3, #6
 800c5c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d05a      	beq.n	800c680 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f001 fb37 	bl	800dc40 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c5d2:	2110      	movs	r1, #16
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f001 faaf 	bl	800db38 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d048      	beq.n	800c676 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	2bff      	cmp	r3, #255	; 0xff
 800c5ec:	d910      	bls.n	800c610 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	22ff      	movs	r2, #255	; 0xff
 800c5f2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f8:	b299      	uxth	r1, r3
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	2300      	movs	r3, #0
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f001 fa63 	bl	800dad4 <I2C_TransferConfig>
 800c60e:	e011      	b.n	800c634 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c614:	b29a      	uxth	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c61e:	b299      	uxth	r1, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c624:	b2da      	uxtb	r2, r3
 800c626:	2300      	movs	r3, #0
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	f001 fa50 	bl	800dad4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c638:	b29a      	uxth	r2, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	b29a      	uxth	r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b22      	cmp	r3, #34	; 0x22
 800c650:	d108      	bne.n	800c664 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c660:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c662:	e082      	b.n	800c76a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c672:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c674:	e079      	b.n	800c76a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c676:	2140      	movs	r1, #64	; 0x40
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 ff01 	bl	800d480 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c67e:	e074      	b.n	800c76a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	099b      	lsrs	r3, r3, #6
 800c684:	f003 0301 	and.w	r3, r3, #1
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d05e      	beq.n	800c74a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	099b      	lsrs	r3, r3, #6
 800c690:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c694:	2b00      	cmp	r3, #0
 800c696:	d058      	beq.n	800c74a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c698:	2101      	movs	r1, #1
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f001 fad0 	bl	800dc40 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c6a0:	2110      	movs	r1, #16
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f001 fa48 	bl	800db38 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b22      	cmp	r3, #34	; 0x22
 800c6b2:	d101      	bne.n	800c6b8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c6b4:	4b32      	ldr	r3, [pc, #200]	; (800c780 <I2C_Mem_ISR_DMA+0x25c>)
 800c6b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2bff      	cmp	r3, #255	; 0xff
 800c6c0:	d910      	bls.n	800c6e4 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	22ff      	movs	r2, #255	; 0xff
 800c6c6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6cc:	b299      	uxth	r1, r3
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f001 f9f9 	bl	800dad4 <I2C_TransferConfig>
 800c6e2:	e011      	b.n	800c708 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f2:	b299      	uxth	r1, r3
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f001 f9e6 	bl	800dad4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	b29a      	uxth	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b22      	cmp	r3, #34	; 0x22
 800c724:	d108      	bne.n	800c738 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c734:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c736:	e018      	b.n	800c76a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c746:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c748:	e00f      	b.n	800c76a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	095b      	lsrs	r3, r3, #5
 800c74e:	f003 0301 	and.w	r3, r3, #1
 800c752:	2b00      	cmp	r3, #0
 800c754:	d009      	beq.n	800c76a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	095b      	lsrs	r3, r3, #5
 800c75a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d003      	beq.n	800c76a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f000 fb11 	bl	800cd8c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	80002000 	.word	0x80002000
 800c780:	80002400 	.word	0x80002400

0800c784 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c794:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d101      	bne.n	800c7a8 <I2C_Slave_ISR_DMA+0x24>
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	e1cc      	b.n	800cb42 <I2C_Slave_ISR_DMA+0x3be>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	095b      	lsrs	r3, r3, #5
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00a      	beq.n	800c7d2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	095b      	lsrs	r3, r3, #5
 800c7c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d004      	beq.n	800c7d2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c7c8:	68b9      	ldr	r1, [r7, #8]
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f000 fba8 	bl	800cf20 <I2C_ITSlaveCplt>
 800c7d0:	e1b2      	b.n	800cb38 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	091b      	lsrs	r3, r3, #4
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 819c 	beq.w	800cb18 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	091b      	lsrs	r3, r3, #4
 800c7e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 8195 	beq.w	800cb18 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	0b9b      	lsrs	r3, r3, #14
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	0bdb      	lsrs	r3, r3, #15
 800c7fe:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 8181 	beq.w	800cb0a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d07c      	beq.n	800c90a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	0bdb      	lsrs	r3, r3, #15
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d076      	beq.n	800c90a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a75      	ldr	r2, [pc, #468]	; (800c9f8 <I2C_Slave_ISR_DMA+0x274>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d059      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a73      	ldr	r2, [pc, #460]	; (800c9fc <I2C_Slave_ISR_DMA+0x278>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d053      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a71      	ldr	r2, [pc, #452]	; (800ca00 <I2C_Slave_ISR_DMA+0x27c>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d04d      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a6f      	ldr	r2, [pc, #444]	; (800ca04 <I2C_Slave_ISR_DMA+0x280>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d047      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a6d      	ldr	r2, [pc, #436]	; (800ca08 <I2C_Slave_ISR_DMA+0x284>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d041      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a6b      	ldr	r2, [pc, #428]	; (800ca0c <I2C_Slave_ISR_DMA+0x288>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d03b      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a69      	ldr	r2, [pc, #420]	; (800ca10 <I2C_Slave_ISR_DMA+0x28c>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d035      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a67      	ldr	r2, [pc, #412]	; (800ca14 <I2C_Slave_ISR_DMA+0x290>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d02f      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a65      	ldr	r2, [pc, #404]	; (800ca18 <I2C_Slave_ISR_DMA+0x294>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d029      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a63      	ldr	r2, [pc, #396]	; (800ca1c <I2C_Slave_ISR_DMA+0x298>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d023      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a61      	ldr	r2, [pc, #388]	; (800ca20 <I2C_Slave_ISR_DMA+0x29c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d01d      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a5f      	ldr	r2, [pc, #380]	; (800ca24 <I2C_Slave_ISR_DMA+0x2a0>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d017      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a5d      	ldr	r2, [pc, #372]	; (800ca28 <I2C_Slave_ISR_DMA+0x2a4>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d011      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a5b      	ldr	r2, [pc, #364]	; (800ca2c <I2C_Slave_ISR_DMA+0x2a8>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00b      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a59      	ldr	r2, [pc, #356]	; (800ca30 <I2C_Slave_ISR_DMA+0x2ac>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d005      	beq.n	800c8dc <I2C_Slave_ISR_DMA+0x158>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a57      	ldr	r2, [pc, #348]	; (800ca34 <I2C_Slave_ISR_DMA+0x2b0>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d109      	bne.n	800c8f0 <I2C_Slave_ISR_DMA+0x16c>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	bf0c      	ite	eq
 800c8e8:	2301      	moveq	r3, #1
 800c8ea:	2300      	movne	r3, #0
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	e008      	b.n	800c902 <I2C_Slave_ISR_DMA+0x17e>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bf0c      	ite	eq
 800c8fc:	2301      	moveq	r3, #1
 800c8fe:	2300      	movne	r3, #0
 800c900:	b2db      	uxtb	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c906:	2301      	movs	r3, #1
 800c908:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 809f 	beq.w	800ca52 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	0b9b      	lsrs	r3, r3, #14
 800c918:	f003 0301 	and.w	r3, r3, #1
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8098 	beq.w	800ca52 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a33      	ldr	r2, [pc, #204]	; (800c9f8 <I2C_Slave_ISR_DMA+0x274>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d059      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a31      	ldr	r2, [pc, #196]	; (800c9fc <I2C_Slave_ISR_DMA+0x278>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d053      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a2f      	ldr	r2, [pc, #188]	; (800ca00 <I2C_Slave_ISR_DMA+0x27c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d04d      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a2d      	ldr	r2, [pc, #180]	; (800ca04 <I2C_Slave_ISR_DMA+0x280>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d047      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a2b      	ldr	r2, [pc, #172]	; (800ca08 <I2C_Slave_ISR_DMA+0x284>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d041      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a29      	ldr	r2, [pc, #164]	; (800ca0c <I2C_Slave_ISR_DMA+0x288>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d03b      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a27      	ldr	r2, [pc, #156]	; (800ca10 <I2C_Slave_ISR_DMA+0x28c>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d035      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a25      	ldr	r2, [pc, #148]	; (800ca14 <I2C_Slave_ISR_DMA+0x290>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d02f      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a23      	ldr	r2, [pc, #140]	; (800ca18 <I2C_Slave_ISR_DMA+0x294>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d029      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a21      	ldr	r2, [pc, #132]	; (800ca1c <I2C_Slave_ISR_DMA+0x298>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d023      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a1f      	ldr	r2, [pc, #124]	; (800ca20 <I2C_Slave_ISR_DMA+0x29c>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d01d      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <I2C_Slave_ISR_DMA+0x2a0>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d017      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a1b      	ldr	r2, [pc, #108]	; (800ca28 <I2C_Slave_ISR_DMA+0x2a4>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d011      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a19      	ldr	r2, [pc, #100]	; (800ca2c <I2C_Slave_ISR_DMA+0x2a8>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d00b      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a17      	ldr	r2, [pc, #92]	; (800ca30 <I2C_Slave_ISR_DMA+0x2ac>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d005      	beq.n	800c9e2 <I2C_Slave_ISR_DMA+0x25e>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a15      	ldr	r2, [pc, #84]	; (800ca34 <I2C_Slave_ISR_DMA+0x2b0>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d12a      	bne.n	800ca38 <I2C_Slave_ISR_DMA+0x2b4>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	bf0c      	ite	eq
 800c9ee:	2301      	moveq	r3, #1
 800c9f0:	2300      	movne	r3, #0
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	e029      	b.n	800ca4a <I2C_Slave_ISR_DMA+0x2c6>
 800c9f6:	bf00      	nop
 800c9f8:	40020010 	.word	0x40020010
 800c9fc:	40020028 	.word	0x40020028
 800ca00:	40020040 	.word	0x40020040
 800ca04:	40020058 	.word	0x40020058
 800ca08:	40020070 	.word	0x40020070
 800ca0c:	40020088 	.word	0x40020088
 800ca10:	400200a0 	.word	0x400200a0
 800ca14:	400200b8 	.word	0x400200b8
 800ca18:	40020410 	.word	0x40020410
 800ca1c:	40020428 	.word	0x40020428
 800ca20:	40020440 	.word	0x40020440
 800ca24:	40020458 	.word	0x40020458
 800ca28:	40020470 	.word	0x40020470
 800ca2c:	40020488 	.word	0x40020488
 800ca30:	400204a0 	.word	0x400204a0
 800ca34:	400204b8 	.word	0x400204b8
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	bf0c      	ite	eq
 800ca44:	2301      	moveq	r3, #1
 800ca46:	2300      	movne	r3, #0
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d128      	bne.n	800caaa <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b28      	cmp	r3, #40	; 0x28
 800ca62:	d108      	bne.n	800ca76 <I2C_Slave_ISR_DMA+0x2f2>
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca6a:	d104      	bne.n	800ca76 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 fcb0 	bl	800d3d4 <I2C_ITListenCplt>
 800ca74:	e048      	b.n	800cb08 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b29      	cmp	r3, #41	; 0x29
 800ca80:	d10e      	bne.n	800caa0 <I2C_Slave_ISR_DMA+0x31c>
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ca88:	d00a      	beq.n	800caa0 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2210      	movs	r2, #16
 800ca90:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 fe0b 	bl	800d6ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f000 f918 	bl	800ccce <I2C_ITSlaveSeqCplt>
 800ca9e:	e033      	b.n	800cb08 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2210      	movs	r2, #16
 800caa6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800caa8:	e034      	b.n	800cb14 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2210      	movs	r2, #16
 800cab0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cab6:	f043 0204 	orr.w	r2, r3, #4
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cac4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <I2C_Slave_ISR_DMA+0x350>
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cad2:	d11f      	bne.n	800cb14 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cad4:	7dfb      	ldrb	r3, [r7, #23]
 800cad6:	2b21      	cmp	r3, #33	; 0x21
 800cad8:	d002      	beq.n	800cae0 <I2C_Slave_ISR_DMA+0x35c>
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	2b29      	cmp	r3, #41	; 0x29
 800cade:	d103      	bne.n	800cae8 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2221      	movs	r2, #33	; 0x21
 800cae4:	631a      	str	r2, [r3, #48]	; 0x30
 800cae6:	e008      	b.n	800cafa <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cae8:	7dfb      	ldrb	r3, [r7, #23]
 800caea:	2b22      	cmp	r3, #34	; 0x22
 800caec:	d002      	beq.n	800caf4 <I2C_Slave_ISR_DMA+0x370>
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	2b2a      	cmp	r3, #42	; 0x2a
 800caf2:	d102      	bne.n	800cafa <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2222      	movs	r2, #34	; 0x22
 800caf8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafe:	4619      	mov	r1, r3
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f000 fcbd 	bl	800d480 <I2C_ITError>
      if (treatdmanack == 1U)
 800cb06:	e005      	b.n	800cb14 <I2C_Slave_ISR_DMA+0x390>
 800cb08:	e004      	b.n	800cb14 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2210      	movs	r2, #16
 800cb10:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb12:	e011      	b.n	800cb38 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800cb14:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb16:	e00f      	b.n	800cb38 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	08db      	lsrs	r3, r3, #3
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d009      	beq.n	800cb38 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	08db      	lsrs	r3, r3, #3
 800cb28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d003      	beq.n	800cb38 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f000 f80a 	bl	800cb4c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop

0800cb4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cb62:	2b28      	cmp	r3, #40	; 0x28
 800cb64:	d16a      	bne.n	800cc3c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f003 0301 	and.w	r3, r3, #1
 800cb74:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	0c1b      	lsrs	r3, r3, #16
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cb84:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb92:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cba0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d138      	bne.n	800cc1c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cbaa:	897b      	ldrh	r3, [r7, #10]
 800cbac:	09db      	lsrs	r3, r3, #7
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	89bb      	ldrh	r3, [r7, #12]
 800cbb2:	4053      	eors	r3, r2
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	f003 0306 	and.w	r3, r3, #6
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d11c      	bne.n	800cbf8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cbbe:	897b      	ldrh	r3, [r7, #10]
 800cbc0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d13b      	bne.n	800cc4c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2208      	movs	r2, #8
 800cbe0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cbea:	89ba      	ldrh	r2, [r7, #12]
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7ff f91e 	bl	800be32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cbf6:	e029      	b.n	800cc4c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800cbf8:	893b      	ldrh	r3, [r7, #8]
 800cbfa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cbfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 f81d 	bl	800dc40 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc0e:	89ba      	ldrh	r2, [r7, #12]
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff f90c 	bl	800be32 <HAL_I2C_AddrCallback>
}
 800cc1a:	e017      	b.n	800cc4c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f001 f80d 	bl	800dc40 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc2e:	89ba      	ldrh	r2, [r7, #12]
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7ff f8fc 	bl	800be32 <HAL_I2C_AddrCallback>
}
 800cc3a:	e007      	b.n	800cc4c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2208      	movs	r2, #8
 800cc42:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cc4c:	bf00      	nop
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b21      	cmp	r3, #33	; 0x21
 800cc6e:	d115      	bne.n	800cc9c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2220      	movs	r2, #32
 800cc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2211      	movs	r2, #17
 800cc7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc84:	2101      	movs	r1, #1
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 ffda 	bl	800dc40 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff f8a4 	bl	800bde2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc9a:	e014      	b.n	800ccc6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2220      	movs	r2, #32
 800cca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2212      	movs	r2, #18
 800cca8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ccb0:	2102      	movs	r1, #2
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 ffc4 	bl	800dc40 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff f898 	bl	800bdf6 <HAL_I2C_MasterRxCpltCallback>
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b084      	sub	sp, #16
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	0b9b      	lsrs	r3, r3, #14
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d008      	beq.n	800cd04 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	e00d      	b.n	800cd20 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	0bdb      	lsrs	r3, r3, #15
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d007      	beq.n	800cd20 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd1e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b29      	cmp	r3, #41	; 0x29
 800cd2a:	d112      	bne.n	800cd52 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2228      	movs	r2, #40	; 0x28
 800cd30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2221      	movs	r2, #33	; 0x21
 800cd38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd3a:	2101      	movs	r1, #1
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 ff7f 	bl	800dc40 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff f85d 	bl	800be0a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd50:	e017      	b.n	800cd82 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd5c:	d111      	bne.n	800cd82 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2228      	movs	r2, #40	; 0x28
 800cd62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2222      	movs	r2, #34	; 0x22
 800cd6a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cd6c:	2102      	movs	r1, #2
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 ff66 	bl	800dc40 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff f84e 	bl	800be1e <HAL_I2C_SlaveRxCpltCallback>
}
 800cd82:	bf00      	nop
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
	...

0800cd8c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2220      	movs	r2, #32
 800cda0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b21      	cmp	r3, #33	; 0x21
 800cdac:	d107      	bne.n	800cdbe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cdae:	2101      	movs	r1, #1
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 ff45 	bl	800dc40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2211      	movs	r2, #17
 800cdba:	631a      	str	r2, [r3, #48]	; 0x30
 800cdbc:	e00c      	b.n	800cdd8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b22      	cmp	r3, #34	; 0x22
 800cdc8:	d106      	bne.n	800cdd8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cdca:	2102      	movs	r1, #2
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 ff37 	bl	800dc40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2212      	movs	r2, #18
 800cdd6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6859      	ldr	r1, [r3, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	4b4d      	ldr	r3, [pc, #308]	; (800cf18 <I2C_ITMasterCplt+0x18c>)
 800cde4:	400b      	ands	r3, r1
 800cde6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4a4a      	ldr	r2, [pc, #296]	; (800cf1c <I2C_ITMasterCplt+0x190>)
 800cdf2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	091b      	lsrs	r3, r3, #4
 800cdf8:	f003 0301 	and.w	r3, r3, #1
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d009      	beq.n	800ce14 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2210      	movs	r2, #16
 800ce06:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce0c:	f043 0204 	orr.w	r2, r3, #4
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	2b60      	cmp	r3, #96	; 0x60
 800ce1e:	d10b      	bne.n	800ce38 <I2C_ITMasterCplt+0xac>
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	089b      	lsrs	r3, r3, #2
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d005      	beq.n	800ce38 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ce36:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fc38 	bl	800d6ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce42:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b60      	cmp	r3, #96	; 0x60
 800ce4e:	d002      	beq.n	800ce56 <I2C_ITMasterCplt+0xca>
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d006      	beq.n	800ce64 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fb0f 	bl	800d480 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce62:	e054      	b.n	800cf0e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b21      	cmp	r3, #33	; 0x21
 800ce6e:	d124      	bne.n	800ceba <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2220      	movs	r2, #32
 800ce74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	2b40      	cmp	r3, #64	; 0x40
 800ce88:	d10b      	bne.n	800cea2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7fe ffe1 	bl	800be62 <HAL_I2C_MemTxCpltCallback>
}
 800cea0:	e035      	b.n	800cf0e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7fe ff95 	bl	800bde2 <HAL_I2C_MasterTxCpltCallback>
}
 800ceb8:	e029      	b.n	800cf0e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b22      	cmp	r3, #34	; 0x22
 800cec4:	d123      	bne.n	800cf0e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2220      	movs	r2, #32
 800ceca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b40      	cmp	r3, #64	; 0x40
 800cede:	d10b      	bne.n	800cef8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7fe ffc0 	bl	800be76 <HAL_I2C_MemRxCpltCallback>
}
 800cef6:	e00a      	b.n	800cf0e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7fe ff74 	bl	800bdf6 <HAL_I2C_MasterRxCpltCallback>
}
 800cf0e:	bf00      	nop
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	fe00e800 	.word	0xfe00e800
 800cf1c:	ffff0000 	.word	0xffff0000

0800cf20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf42:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2220      	movs	r2, #32
 800cf4a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cf4c:	7afb      	ldrb	r3, [r7, #11]
 800cf4e:	2b21      	cmp	r3, #33	; 0x21
 800cf50:	d002      	beq.n	800cf58 <I2C_ITSlaveCplt+0x38>
 800cf52:	7afb      	ldrb	r3, [r7, #11]
 800cf54:	2b29      	cmp	r3, #41	; 0x29
 800cf56:	d108      	bne.n	800cf6a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cf58:	f248 0101 	movw	r1, #32769	; 0x8001
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fe6f 	bl	800dc40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2221      	movs	r2, #33	; 0x21
 800cf66:	631a      	str	r2, [r3, #48]	; 0x30
 800cf68:	e019      	b.n	800cf9e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cf6a:	7afb      	ldrb	r3, [r7, #11]
 800cf6c:	2b22      	cmp	r3, #34	; 0x22
 800cf6e:	d002      	beq.n	800cf76 <I2C_ITSlaveCplt+0x56>
 800cf70:	7afb      	ldrb	r3, [r7, #11]
 800cf72:	2b2a      	cmp	r3, #42	; 0x2a
 800cf74:	d108      	bne.n	800cf88 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cf76:	f248 0102 	movw	r1, #32770	; 0x8002
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fe60 	bl	800dc40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2222      	movs	r2, #34	; 0x22
 800cf84:	631a      	str	r2, [r3, #48]	; 0x30
 800cf86:	e00a      	b.n	800cf9e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cf88:	7afb      	ldrb	r3, [r7, #11]
 800cf8a:	2b28      	cmp	r3, #40	; 0x28
 800cf8c:	d107      	bne.n	800cf9e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cf8e:	f248 0103 	movw	r1, #32771	; 0x8003
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fe54 	bl	800dc40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6859      	ldr	r1, [r3, #4]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	4b80      	ldr	r3, [pc, #512]	; (800d1bc <I2C_ITSlaveCplt+0x29c>)
 800cfba:	400b      	ands	r3, r1
 800cfbc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fb75 	bl	800d6ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	0b9b      	lsrs	r3, r3, #14
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d07a      	beq.n	800d0c6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cfde:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f000 8112 	beq.w	800d20e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a73      	ldr	r2, [pc, #460]	; (800d1c0 <I2C_ITSlaveCplt+0x2a0>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d059      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a71      	ldr	r2, [pc, #452]	; (800d1c4 <I2C_ITSlaveCplt+0x2a4>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d053      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a6f      	ldr	r2, [pc, #444]	; (800d1c8 <I2C_ITSlaveCplt+0x2a8>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d04d      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a6d      	ldr	r2, [pc, #436]	; (800d1cc <I2C_ITSlaveCplt+0x2ac>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d047      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a6b      	ldr	r2, [pc, #428]	; (800d1d0 <I2C_ITSlaveCplt+0x2b0>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d041      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a69      	ldr	r2, [pc, #420]	; (800d1d4 <I2C_ITSlaveCplt+0x2b4>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d03b      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a67      	ldr	r2, [pc, #412]	; (800d1d8 <I2C_ITSlaveCplt+0x2b8>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d035      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a65      	ldr	r2, [pc, #404]	; (800d1dc <I2C_ITSlaveCplt+0x2bc>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d02f      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a63      	ldr	r2, [pc, #396]	; (800d1e0 <I2C_ITSlaveCplt+0x2c0>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d029      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a61      	ldr	r2, [pc, #388]	; (800d1e4 <I2C_ITSlaveCplt+0x2c4>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d023      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a5f      	ldr	r2, [pc, #380]	; (800d1e8 <I2C_ITSlaveCplt+0x2c8>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d01d      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a5d      	ldr	r2, [pc, #372]	; (800d1ec <I2C_ITSlaveCplt+0x2cc>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d017      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a5b      	ldr	r2, [pc, #364]	; (800d1f0 <I2C_ITSlaveCplt+0x2d0>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d011      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a59      	ldr	r2, [pc, #356]	; (800d1f4 <I2C_ITSlaveCplt+0x2d4>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d00b      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a57      	ldr	r2, [pc, #348]	; (800d1f8 <I2C_ITSlaveCplt+0x2d8>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d005      	beq.n	800d0aa <I2C_ITSlaveCplt+0x18a>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a55      	ldr	r2, [pc, #340]	; (800d1fc <I2C_ITSlaveCplt+0x2dc>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d105      	bne.n	800d0b6 <I2C_ITSlaveCplt+0x196>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	e004      	b.n	800d0c0 <I2C_ITSlaveCplt+0x1a0>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d0c4:	e0a3      	b.n	800d20e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	0bdb      	lsrs	r3, r3, #15
 800d0ca:	f003 0301 	and.w	r3, r3, #1
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 809d 	beq.w	800d20e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 8090 	beq.w	800d20e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a32      	ldr	r2, [pc, #200]	; (800d1c0 <I2C_ITSlaveCplt+0x2a0>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d059      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a30      	ldr	r2, [pc, #192]	; (800d1c4 <I2C_ITSlaveCplt+0x2a4>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d053      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a2e      	ldr	r2, [pc, #184]	; (800d1c8 <I2C_ITSlaveCplt+0x2a8>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d04d      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a2c      	ldr	r2, [pc, #176]	; (800d1cc <I2C_ITSlaveCplt+0x2ac>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d047      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a2a      	ldr	r2, [pc, #168]	; (800d1d0 <I2C_ITSlaveCplt+0x2b0>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d041      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a28      	ldr	r2, [pc, #160]	; (800d1d4 <I2C_ITSlaveCplt+0x2b4>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d03b      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a26      	ldr	r2, [pc, #152]	; (800d1d8 <I2C_ITSlaveCplt+0x2b8>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d035      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a24      	ldr	r2, [pc, #144]	; (800d1dc <I2C_ITSlaveCplt+0x2bc>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d02f      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a22      	ldr	r2, [pc, #136]	; (800d1e0 <I2C_ITSlaveCplt+0x2c0>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d029      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a20      	ldr	r2, [pc, #128]	; (800d1e4 <I2C_ITSlaveCplt+0x2c4>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d023      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a1e      	ldr	r2, [pc, #120]	; (800d1e8 <I2C_ITSlaveCplt+0x2c8>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d01d      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a1c      	ldr	r2, [pc, #112]	; (800d1ec <I2C_ITSlaveCplt+0x2cc>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d017      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a1a      	ldr	r2, [pc, #104]	; (800d1f0 <I2C_ITSlaveCplt+0x2d0>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d011      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a18      	ldr	r2, [pc, #96]	; (800d1f4 <I2C_ITSlaveCplt+0x2d4>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d00b      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a16      	ldr	r2, [pc, #88]	; (800d1f8 <I2C_ITSlaveCplt+0x2d8>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d005      	beq.n	800d1ae <I2C_ITSlaveCplt+0x28e>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a14      	ldr	r2, [pc, #80]	; (800d1fc <I2C_ITSlaveCplt+0x2dc>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d128      	bne.n	800d200 <I2C_ITSlaveCplt+0x2e0>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	e027      	b.n	800d20a <I2C_ITSlaveCplt+0x2ea>
 800d1ba:	bf00      	nop
 800d1bc:	fe00e800 	.word	0xfe00e800
 800d1c0:	40020010 	.word	0x40020010
 800d1c4:	40020028 	.word	0x40020028
 800d1c8:	40020040 	.word	0x40020040
 800d1cc:	40020058 	.word	0x40020058
 800d1d0:	40020070 	.word	0x40020070
 800d1d4:	40020088 	.word	0x40020088
 800d1d8:	400200a0 	.word	0x400200a0
 800d1dc:	400200b8 	.word	0x400200b8
 800d1e0:	40020410 	.word	0x40020410
 800d1e4:	40020428 	.word	0x40020428
 800d1e8:	40020440 	.word	0x40020440
 800d1ec:	40020458 	.word	0x40020458
 800d1f0:	40020470 	.word	0x40020470
 800d1f4:	40020488 	.word	0x40020488
 800d1f8:	400204a0 	.word	0x400204a0
 800d1fc:	400204b8 	.word	0x400204b8
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	089b      	lsrs	r3, r3, #2
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d020      	beq.n	800d25c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	f023 0304 	bic.w	r3, r3, #4
 800d220:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	b2d2      	uxtb	r2, r2
 800d22e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00c      	beq.n	800d25c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d246:	3b01      	subs	r3, #1
 800d248:	b29a      	uxth	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d252:	b29b      	uxth	r3, r3
 800d254:	3b01      	subs	r3, #1
 800d256:	b29a      	uxth	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d260:	b29b      	uxth	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d005      	beq.n	800d272 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26a:	f043 0204 	orr.w	r2, r3, #4
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	091b      	lsrs	r3, r3, #4
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d04a      	beq.n	800d314 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	091b      	lsrs	r3, r3, #4
 800d282:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d286:	2b00      	cmp	r3, #0
 800d288:	d044      	beq.n	800d314 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d28e:	b29b      	uxth	r3, r3
 800d290:	2b00      	cmp	r3, #0
 800d292:	d128      	bne.n	800d2e6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b28      	cmp	r3, #40	; 0x28
 800d29e:	d108      	bne.n	800d2b2 <I2C_ITSlaveCplt+0x392>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2a6:	d104      	bne.n	800d2b2 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d2a8:	6979      	ldr	r1, [r7, #20]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f892 	bl	800d3d4 <I2C_ITListenCplt>
 800d2b0:	e030      	b.n	800d314 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	2b29      	cmp	r3, #41	; 0x29
 800d2bc:	d10e      	bne.n	800d2dc <I2C_ITSlaveCplt+0x3bc>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d2c4:	d00a      	beq.n	800d2dc <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2210      	movs	r2, #16
 800d2cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f9ed 	bl	800d6ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff fcfa 	bl	800ccce <I2C_ITSlaveSeqCplt>
 800d2da:	e01b      	b.n	800d314 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2210      	movs	r2, #16
 800d2e2:	61da      	str	r2, [r3, #28]
 800d2e4:	e016      	b.n	800d314 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2210      	movs	r2, #16
 800d2ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f2:	f043 0204 	orr.w	r2, r3, #4
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d003      	beq.n	800d308 <I2C_ITSlaveCplt+0x3e8>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d306:	d105      	bne.n	800d314 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d30c:	4619      	mov	r1, r3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f8b6 	bl	800d480 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d326:	2b00      	cmp	r3, #0
 800d328:	d010      	beq.n	800d34c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f8a5 	bl	800d480 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b28      	cmp	r3, #40	; 0x28
 800d340:	d141      	bne.n	800d3c6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d342:	6979      	ldr	r1, [r7, #20]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 f845 	bl	800d3d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d34a:	e03c      	b.n	800d3c6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d354:	d014      	beq.n	800d380 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff fcb9 	bl	800ccce <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a1c      	ldr	r2, [pc, #112]	; (800d3d0 <I2C_ITSlaveCplt+0x4b0>)
 800d360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2220      	movs	r2, #32
 800d366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7fe fd68 	bl	800be4e <HAL_I2C_ListenCpltCallback>
}
 800d37e:	e022      	b.n	800d3c6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b22      	cmp	r3, #34	; 0x22
 800d38a:	d10e      	bne.n	800d3aa <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2220      	movs	r2, #32
 800d390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7fe fd3b 	bl	800be1e <HAL_I2C_SlaveRxCpltCallback>
}
 800d3a8:	e00d      	b.n	800d3c6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2220      	movs	r2, #32
 800d3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7fe fd22 	bl	800be0a <HAL_I2C_SlaveTxCpltCallback>
}
 800d3c6:	bf00      	nop
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	ffff0000 	.word	0xffff0000

0800d3d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4a26      	ldr	r2, [pc, #152]	; (800d47c <I2C_ITListenCplt+0xa8>)
 800d3e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	089b      	lsrs	r3, r3, #2
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d022      	beq.n	800d452 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d416:	b2d2      	uxtb	r2, r2
 800d418:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41e:	1c5a      	adds	r2, r3, #1
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d012      	beq.n	800d452 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d430:	3b01      	subs	r3, #1
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	3b01      	subs	r3, #1
 800d440:	b29a      	uxth	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d44a:	f043 0204 	orr.w	r2, r3, #4
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d452:	f248 0103 	movw	r1, #32771	; 0x8003
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fbf2 	bl	800dc40 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2210      	movs	r2, #16
 800d462:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7fe fcee 	bl	800be4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d472:	bf00      	nop
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	ffff0000 	.word	0xffff0000

0800d480 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d490:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a6d      	ldr	r2, [pc, #436]	; (800d654 <I2C_ITError+0x1d4>)
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	431a      	orrs	r2, r3
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	2b28      	cmp	r3, #40	; 0x28
 800d4b6:	d005      	beq.n	800d4c4 <I2C_ITError+0x44>
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	2b29      	cmp	r3, #41	; 0x29
 800d4bc:	d002      	beq.n	800d4c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d4c2:	d10b      	bne.n	800d4dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d4c4:	2103      	movs	r1, #3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fbba 	bl	800dc40 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2228      	movs	r2, #40	; 0x28
 800d4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a60      	ldr	r2, [pc, #384]	; (800d658 <I2C_ITError+0x1d8>)
 800d4d8:	635a      	str	r2, [r3, #52]	; 0x34
 800d4da:	e030      	b.n	800d53e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d4dc:	f248 0103 	movw	r1, #32771	; 0x8003
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 fbad 	bl	800dc40 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f8e1 	bl	800d6ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	2b60      	cmp	r3, #96	; 0x60
 800d4f6:	d01f      	beq.n	800d538 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2220      	movs	r2, #32
 800d4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	699b      	ldr	r3, [r3, #24]
 800d506:	f003 0320 	and.w	r3, r3, #32
 800d50a:	2b20      	cmp	r3, #32
 800d50c:	d114      	bne.n	800d538 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	f003 0310 	and.w	r3, r3, #16
 800d518:	2b10      	cmp	r3, #16
 800d51a:	d109      	bne.n	800d530 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2210      	movs	r2, #16
 800d522:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d528:	f043 0204 	orr.w	r2, r3, #4
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2220      	movs	r2, #32
 800d536:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d542:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d039      	beq.n	800d5c0 <I2C_ITError+0x140>
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	2b11      	cmp	r3, #17
 800d550:	d002      	beq.n	800d558 <I2C_ITError+0xd8>
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	2b21      	cmp	r3, #33	; 0x21
 800d556:	d133      	bne.n	800d5c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d566:	d107      	bne.n	800d578 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d576:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fd f857 	bl	800a630 <HAL_DMA_GetState>
 800d582:	4603      	mov	r3, r0
 800d584:	2b01      	cmp	r3, #1
 800d586:	d017      	beq.n	800d5b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58c:	4a33      	ldr	r2, [pc, #204]	; (800d65c <I2C_ITError+0x1dc>)
 800d58e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fb fed7 	bl	8009350 <HAL_DMA_Abort_IT>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d04d      	beq.n	800d644 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d5b6:	e045      	b.n	800d644 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f851 	bl	800d660 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d5be:	e041      	b.n	800d644 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d039      	beq.n	800d63c <I2C_ITError+0x1bc>
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	2b12      	cmp	r3, #18
 800d5cc:	d002      	beq.n	800d5d4 <I2C_ITError+0x154>
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b22      	cmp	r3, #34	; 0x22
 800d5d2:	d133      	bne.n	800d63c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5e2:	d107      	bne.n	800d5f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d5f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fd f819 	bl	800a630 <HAL_DMA_GetState>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b01      	cmp	r3, #1
 800d602:	d017      	beq.n	800d634 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d608:	4a14      	ldr	r2, [pc, #80]	; (800d65c <I2C_ITError+0x1dc>)
 800d60a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fb fe99 	bl	8009350 <HAL_DMA_Abort_IT>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d011      	beq.n	800d648 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d62e:	4610      	mov	r0, r2
 800d630:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d632:	e009      	b.n	800d648 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 f813 	bl	800d660 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d63a:	e005      	b.n	800d648 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f80f 	bl	800d660 <I2C_TreatErrorCallback>
  }
}
 800d642:	e002      	b.n	800d64a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d644:	bf00      	nop
 800d646:	e000      	b.n	800d64a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d648:	bf00      	nop
}
 800d64a:	bf00      	nop
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	ffff0000 	.word	0xffff0000
 800d658:	0800c137 	.word	0x0800c137
 800d65c:	0800da99 	.word	0x0800da99

0800d660 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b60      	cmp	r3, #96	; 0x60
 800d672:	d10e      	bne.n	800d692 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2220      	movs	r2, #32
 800d678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7fe fc07 	bl	800be9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d690:	e009      	b.n	800d6a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7fe fbf2 	bl	800be8a <HAL_I2C_ErrorCallback>
}
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	b083      	sub	sp, #12
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	f003 0302 	and.w	r3, r3, #2
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d103      	bne.n	800d6cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d007      	beq.n	800d6ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	699a      	ldr	r2, [r3, #24]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f042 0201 	orr.w	r2, r2, #1
 800d6e8:	619a      	str	r2, [r3, #24]
  }
}
 800d6ea:	bf00      	nop
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d702:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d712:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d718:	b29b      	uxth	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d104      	bne.n	800d728 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d71e:	2120      	movs	r1, #32
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f000 fa09 	bl	800db38 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d726:	e02d      	b.n	800d784 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d730:	441a      	add	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	2bff      	cmp	r3, #255	; 0xff
 800d73e:	d903      	bls.n	800d748 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	22ff      	movs	r2, #255	; 0xff
 800d744:	851a      	strh	r2, [r3, #40]	; 0x28
 800d746:	e004      	b.n	800d752 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75a:	4619      	mov	r1, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3328      	adds	r3, #40	; 0x28
 800d762:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d768:	f7fb f86a 	bl	8008840 <HAL_DMA_Start_IT>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d004      	beq.n	800d77c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d772:	2110      	movs	r1, #16
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7ff fe83 	bl	800d480 <I2C_ITError>
}
 800d77a:	e003      	b.n	800d784 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d77c:	2140      	movs	r1, #64	; 0x40
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f000 f9da 	bl	800db38 <I2C_Enable_IRQ>
}
 800d784:	bf00      	nop
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d798:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7a8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d104      	bne.n	800d7be <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d7b4:	2120      	movs	r1, #32
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f000 f9be 	bl	800db38 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d7bc:	e02d      	b.n	800d81a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d7c6:	441a      	add	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	2bff      	cmp	r3, #255	; 0xff
 800d7d4:	d903      	bls.n	800d7de <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	22ff      	movs	r2, #255	; 0xff
 800d7da:	851a      	strh	r2, [r3, #40]	; 0x28
 800d7dc:	e004      	b.n	800d7e8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	3324      	adds	r3, #36	; 0x24
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d7fe:	f7fb f81f 	bl	8008840 <HAL_DMA_Start_IT>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d004      	beq.n	800d812 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d808:	2110      	movs	r1, #16
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7ff fe38 	bl	800d480 <I2C_ITError>
}
 800d810:	e003      	b.n	800d81a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d812:	2140      	movs	r1, #64	; 0x40
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 f98f 	bl	800db38 <I2C_Enable_IRQ>
}
 800d81a:	bf00      	nop
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d82c:	2300      	movs	r3, #0
 800d82e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d076      	beq.n	800d92c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a71      	ldr	r2, [pc, #452]	; (800da0c <I2C_DMAError+0x1e8>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d059      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a6f      	ldr	r2, [pc, #444]	; (800da10 <I2C_DMAError+0x1ec>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d053      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a6d      	ldr	r2, [pc, #436]	; (800da14 <I2C_DMAError+0x1f0>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d04d      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a6b      	ldr	r2, [pc, #428]	; (800da18 <I2C_DMAError+0x1f4>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d047      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a69      	ldr	r2, [pc, #420]	; (800da1c <I2C_DMAError+0x1f8>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d041      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a67      	ldr	r2, [pc, #412]	; (800da20 <I2C_DMAError+0x1fc>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d03b      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a65      	ldr	r2, [pc, #404]	; (800da24 <I2C_DMAError+0x200>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d035      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a63      	ldr	r2, [pc, #396]	; (800da28 <I2C_DMAError+0x204>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d02f      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a61      	ldr	r2, [pc, #388]	; (800da2c <I2C_DMAError+0x208>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d029      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a5f      	ldr	r2, [pc, #380]	; (800da30 <I2C_DMAError+0x20c>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d023      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a5d      	ldr	r2, [pc, #372]	; (800da34 <I2C_DMAError+0x210>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d01d      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a5b      	ldr	r2, [pc, #364]	; (800da38 <I2C_DMAError+0x214>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d017      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a59      	ldr	r2, [pc, #356]	; (800da3c <I2C_DMAError+0x218>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d011      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a57      	ldr	r2, [pc, #348]	; (800da40 <I2C_DMAError+0x21c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d00b      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a55      	ldr	r2, [pc, #340]	; (800da44 <I2C_DMAError+0x220>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d005      	beq.n	800d8fe <I2C_DMAError+0xda>
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a53      	ldr	r2, [pc, #332]	; (800da48 <I2C_DMAError+0x224>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d109      	bne.n	800d912 <I2C_DMAError+0xee>
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	bf0c      	ite	eq
 800d90a:	2301      	moveq	r3, #1
 800d90c:	2300      	movne	r3, #0
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	e008      	b.n	800d924 <I2C_DMAError+0x100>
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bf0c      	ite	eq
 800d91e:	2301      	moveq	r3, #1
 800d920:	2300      	movne	r3, #0
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d001      	beq.n	800d92c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d928:	2301      	movs	r3, #1
 800d92a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 8098 	beq.w	800da66 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a33      	ldr	r2, [pc, #204]	; (800da0c <I2C_DMAError+0x1e8>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d059      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a31      	ldr	r2, [pc, #196]	; (800da10 <I2C_DMAError+0x1ec>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d053      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a2f      	ldr	r2, [pc, #188]	; (800da14 <I2C_DMAError+0x1f0>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d04d      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a2d      	ldr	r2, [pc, #180]	; (800da18 <I2C_DMAError+0x1f4>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d047      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a2b      	ldr	r2, [pc, #172]	; (800da1c <I2C_DMAError+0x1f8>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d041      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a29      	ldr	r2, [pc, #164]	; (800da20 <I2C_DMAError+0x1fc>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d03b      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a27      	ldr	r2, [pc, #156]	; (800da24 <I2C_DMAError+0x200>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d035      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a25      	ldr	r2, [pc, #148]	; (800da28 <I2C_DMAError+0x204>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d02f      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a23      	ldr	r2, [pc, #140]	; (800da2c <I2C_DMAError+0x208>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d029      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a21      	ldr	r2, [pc, #132]	; (800da30 <I2C_DMAError+0x20c>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d023      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a1f      	ldr	r2, [pc, #124]	; (800da34 <I2C_DMAError+0x210>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d01d      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a1d      	ldr	r2, [pc, #116]	; (800da38 <I2C_DMAError+0x214>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d017      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a1b      	ldr	r2, [pc, #108]	; (800da3c <I2C_DMAError+0x218>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d011      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a19      	ldr	r2, [pc, #100]	; (800da40 <I2C_DMAError+0x21c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d00b      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a17      	ldr	r2, [pc, #92]	; (800da44 <I2C_DMAError+0x220>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d005      	beq.n	800d9f6 <I2C_DMAError+0x1d2>
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a15      	ldr	r2, [pc, #84]	; (800da48 <I2C_DMAError+0x224>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d12a      	bne.n	800da4c <I2C_DMAError+0x228>
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	bf0c      	ite	eq
 800da02:	2301      	moveq	r3, #1
 800da04:	2300      	movne	r3, #0
 800da06:	b2db      	uxtb	r3, r3
 800da08:	e029      	b.n	800da5e <I2C_DMAError+0x23a>
 800da0a:	bf00      	nop
 800da0c:	40020010 	.word	0x40020010
 800da10:	40020028 	.word	0x40020028
 800da14:	40020040 	.word	0x40020040
 800da18:	40020058 	.word	0x40020058
 800da1c:	40020070 	.word	0x40020070
 800da20:	40020088 	.word	0x40020088
 800da24:	400200a0 	.word	0x400200a0
 800da28:	400200b8 	.word	0x400200b8
 800da2c:	40020410 	.word	0x40020410
 800da30:	40020428 	.word	0x40020428
 800da34:	40020440 	.word	0x40020440
 800da38:	40020458 	.word	0x40020458
 800da3c:	40020470 	.word	0x40020470
 800da40:	40020488 	.word	0x40020488
 800da44:	400204a0 	.word	0x400204a0
 800da48:	400204b8 	.word	0x400204b8
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	bf0c      	ite	eq
 800da58:	2301      	moveq	r3, #1
 800da5a:	2300      	movne	r3, #0
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800da62:	2301      	movs	r3, #1
 800da64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7fc fdf0 	bl	800a64c <HAL_DMA_GetError>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b02      	cmp	r3, #2
 800da70:	d00e      	beq.n	800da90 <I2C_DMAError+0x26c>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00b      	beq.n	800da90 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	685a      	ldr	r2, [r3, #4]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da86:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800da88:	2110      	movs	r1, #16
 800da8a:	68b8      	ldr	r0, [r7, #8]
 800da8c:	f7ff fcf8 	bl	800d480 <I2C_ITError>
  }
}
 800da90:	bf00      	nop
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d003      	beq.n	800dab6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab2:	2200      	movs	r2, #0
 800dab4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d003      	beq.n	800dac6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac2:	2200      	movs	r2, #0
 800dac4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f7ff fdca 	bl	800d660 <I2C_TreatErrorCallback>
}
 800dacc:	bf00      	nop
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b087      	sub	sp, #28
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	607b      	str	r3, [r7, #4]
 800dade:	460b      	mov	r3, r1
 800dae0:	817b      	strh	r3, [r7, #10]
 800dae2:	4613      	mov	r3, r2
 800dae4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dae6:	897b      	ldrh	r3, [r7, #10]
 800dae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800daec:	7a7b      	ldrb	r3, [r7, #9]
 800daee:	041b      	lsls	r3, r3, #16
 800daf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800daf4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	0d5b      	lsrs	r3, r3, #21
 800db0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800db12:	4b08      	ldr	r3, [pc, #32]	; (800db34 <I2C_TransferConfig+0x60>)
 800db14:	430b      	orrs	r3, r1
 800db16:	43db      	mvns	r3, r3
 800db18:	ea02 0103 	and.w	r1, r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	430a      	orrs	r2, r1
 800db24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800db26:	bf00      	nop
 800db28:	371c      	adds	r7, #28
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	03ff63ff 	.word	0x03ff63ff

0800db38 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db4c:	4a39      	ldr	r2, [pc, #228]	; (800dc34 <I2C_Enable_IRQ+0xfc>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d032      	beq.n	800dbb8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800db56:	4a38      	ldr	r2, [pc, #224]	; (800dc38 <I2C_Enable_IRQ+0x100>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d02d      	beq.n	800dbb8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800db60:	4a36      	ldr	r2, [pc, #216]	; (800dc3c <I2C_Enable_IRQ+0x104>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d028      	beq.n	800dbb8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800db66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	da03      	bge.n	800db76 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800db74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800db76:	887b      	ldrh	r3, [r7, #2]
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d003      	beq.n	800db88 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800db86:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800db88:	887b      	ldrh	r3, [r7, #2]
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800db98:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800db9a:	887b      	ldrh	r3, [r7, #2]
 800db9c:	2b10      	cmp	r3, #16
 800db9e:	d103      	bne.n	800dba8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dba6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dba8:	887b      	ldrh	r3, [r7, #2]
 800dbaa:	2b20      	cmp	r3, #32
 800dbac:	d133      	bne.n	800dc16 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f043 0320 	orr.w	r3, r3, #32
 800dbb4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dbb6:	e02e      	b.n	800dc16 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dbb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	da03      	bge.n	800dbc8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dbc6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dbc8:	887b      	ldrh	r3, [r7, #2]
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dbd8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dbda:	887b      	ldrh	r3, [r7, #2]
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dbea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dbec:	887b      	ldrh	r3, [r7, #2]
 800dbee:	2b10      	cmp	r3, #16
 800dbf0:	d103      	bne.n	800dbfa <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dbf8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dbfa:	887b      	ldrh	r3, [r7, #2]
 800dbfc:	2b20      	cmp	r3, #32
 800dbfe:	d103      	bne.n	800dc08 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dc06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dc08:	887b      	ldrh	r3, [r7, #2]
 800dc0a:	2b40      	cmp	r3, #64	; 0x40
 800dc0c:	d103      	bne.n	800dc16 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc14:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	6819      	ldr	r1, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	430a      	orrs	r2, r1
 800dc24:	601a      	str	r2, [r3, #0]
}
 800dc26:	bf00      	nop
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	0800c33f 	.word	0x0800c33f
 800dc38:	0800c785 	.word	0x0800c785
 800dc3c:	0800c525 	.word	0x0800c525

0800dc40 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dc50:	887b      	ldrh	r3, [r7, #2]
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00f      	beq.n	800dc7a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800dc60:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dc6e:	2b28      	cmp	r3, #40	; 0x28
 800dc70:	d003      	beq.n	800dc7a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dc78:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dc7a:	887b      	ldrh	r3, [r7, #2]
 800dc7c:	f003 0302 	and.w	r3, r3, #2
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00f      	beq.n	800dca4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800dc8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dc98:	2b28      	cmp	r3, #40	; 0x28
 800dc9a:	d003      	beq.n	800dca4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dca2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dca4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	da03      	bge.n	800dcb4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dcb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dcb4:	887b      	ldrh	r3, [r7, #2]
 800dcb6:	2b10      	cmp	r3, #16
 800dcb8:	d103      	bne.n	800dcc2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dcc0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dcc2:	887b      	ldrh	r3, [r7, #2]
 800dcc4:	2b20      	cmp	r3, #32
 800dcc6:	d103      	bne.n	800dcd0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f043 0320 	orr.w	r3, r3, #32
 800dcce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dcd0:	887b      	ldrh	r3, [r7, #2]
 800dcd2:	2b40      	cmp	r3, #64	; 0x40
 800dcd4:	d103      	bne.n	800dcde <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcdc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	43da      	mvns	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	400a      	ands	r2, r1
 800dcee:	601a      	str	r2, [r3, #0]
}
 800dcf0:	bf00      	nop
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b20      	cmp	r3, #32
 800dd10:	d138      	bne.n	800dd84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d101      	bne.n	800dd20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	e032      	b.n	800dd86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2224      	movs	r2, #36	; 0x24
 800dd2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f022 0201 	bic.w	r2, r2, #1
 800dd3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dd4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6819      	ldr	r1, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	430a      	orrs	r2, r1
 800dd5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f042 0201 	orr.w	r2, r2, #1
 800dd6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2220      	movs	r2, #32
 800dd74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	e000      	b.n	800dd86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dd84:	2302      	movs	r3, #2
  }
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b085      	sub	sp, #20
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	2b20      	cmp	r3, #32
 800dda6:	d139      	bne.n	800de1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d101      	bne.n	800ddb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	e033      	b.n	800de1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2224      	movs	r2, #36	; 0x24
 800ddc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f022 0201 	bic.w	r2, r2, #1
 800ddd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800dde4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68fa      	ldr	r2, [r7, #12]
 800ddf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f042 0201 	orr.w	r2, r2, #1
 800de06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2220      	movs	r2, #32
 800de0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	e000      	b.n	800de1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800de1c:	2302      	movs	r3, #2
  }
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
	...

0800de2c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de34:	4b0d      	ldr	r3, [pc, #52]	; (800de6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de3a:	4a0c      	ldr	r2, [pc, #48]	; (800de6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de3c:	f043 0302 	orr.w	r3, r3, #2
 800de40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800de44:	4b09      	ldr	r3, [pc, #36]	; (800de6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de4a:	f003 0302 	and.w	r3, r3, #2
 800de4e:	60fb      	str	r3, [r7, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	4906      	ldr	r1, [pc, #24]	; (800de70 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	604b      	str	r3, [r1, #4]
}
 800de5e:	bf00      	nop
 800de60:	3714      	adds	r7, #20
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	58024400 	.word	0x58024400
 800de70:	58000400 	.word	0x58000400

0800de74 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d101      	bne.n	800de86 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	e041      	b.n	800df0a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800de8e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f245 5255 	movw	r2, #21845	; 0x5555
 800de98:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	6852      	ldr	r2, [r2, #4]
 800dea2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	6892      	ldr	r2, [r2, #8]
 800deac:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800deae:	f7f8 f843 	bl	8005f38 <HAL_GetTick>
 800deb2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800deb4:	e00f      	b.n	800ded6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800deb6:	f7f8 f83f 	bl	8005f38 <HAL_GetTick>
 800deba:	4602      	mov	r2, r0
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	2b31      	cmp	r3, #49	; 0x31
 800dec2:	d908      	bls.n	800ded6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	f003 0307 	and.w	r3, r3, #7
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e019      	b.n	800df0a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	f003 0307 	and.w	r3, r3, #7
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1e8      	bne.n	800deb6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	691a      	ldr	r2, [r3, #16]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	429a      	cmp	r2, r3
 800def0:	d005      	beq.n	800defe <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	68d2      	ldr	r2, [r2, #12]
 800defa:	611a      	str	r2, [r3, #16]
 800defc:	e004      	b.n	800df08 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800df06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800df12:	b480      	push	{r7}
 800df14:	b083      	sub	sp, #12
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800df22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
	...

0800df34 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800df40:	4b18      	ldr	r3, [pc, #96]	; (800dfa4 <HAL_PWR_EnterSTOPMode+0x70>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f023 0201 	bic.w	r2, r3, #1
 800df48:	4916      	ldr	r1, [pc, #88]	; (800dfa4 <HAL_PWR_EnterSTOPMode+0x70>)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800df50:	4b14      	ldr	r3, [pc, #80]	; (800dfa4 <HAL_PWR_EnterSTOPMode+0x70>)
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	4a13      	ldr	r2, [pc, #76]	; (800dfa4 <HAL_PWR_EnterSTOPMode+0x70>)
 800df56:	f023 0305 	bic.w	r3, r3, #5
 800df5a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800df5c:	4b11      	ldr	r3, [pc, #68]	; (800dfa4 <HAL_PWR_EnterSTOPMode+0x70>)
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	4a10      	ldr	r2, [pc, #64]	; (800dfa4 <HAL_PWR_EnterSTOPMode+0x70>)
 800df62:	f023 0302 	bic.w	r3, r3, #2
 800df66:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800df68:	4b0f      	ldr	r3, [pc, #60]	; (800dfa8 <HAL_PWR_EnterSTOPMode+0x74>)
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	4a0e      	ldr	r2, [pc, #56]	; (800dfa8 <HAL_PWR_EnterSTOPMode+0x74>)
 800df6e:	f043 0304 	orr.w	r3, r3, #4
 800df72:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800df74:	f3bf 8f4f 	dsb	sy
}
 800df78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800df7a:	f3bf 8f6f 	isb	sy
}
 800df7e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800df80:	78fb      	ldrb	r3, [r7, #3]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d101      	bne.n	800df8a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800df86:	bf30      	wfi
 800df88:	e000      	b.n	800df8c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800df8a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800df8c:	4b06      	ldr	r3, [pc, #24]	; (800dfa8 <HAL_PWR_EnterSTOPMode+0x74>)
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	4a05      	ldr	r2, [pc, #20]	; (800dfa8 <HAL_PWR_EnterSTOPMode+0x74>)
 800df92:	f023 0304 	bic.w	r3, r3, #4
 800df96:	6113      	str	r3, [r2, #16]
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	58024800 	.word	0x58024800
 800dfa8:	e000ed00 	.word	0xe000ed00

0800dfac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800dfb4:	4b19      	ldr	r3, [pc, #100]	; (800e01c <HAL_PWREx_ConfigSupply+0x70>)
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	f003 0304 	and.w	r3, r3, #4
 800dfbc:	2b04      	cmp	r3, #4
 800dfbe:	d00a      	beq.n	800dfd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800dfc0:	4b16      	ldr	r3, [pc, #88]	; (800e01c <HAL_PWREx_ConfigSupply+0x70>)
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	f003 0307 	and.w	r3, r3, #7
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d001      	beq.n	800dfd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e01f      	b.n	800e012 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	e01d      	b.n	800e012 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800dfd6:	4b11      	ldr	r3, [pc, #68]	; (800e01c <HAL_PWREx_ConfigSupply+0x70>)
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	f023 0207 	bic.w	r2, r3, #7
 800dfde:	490f      	ldr	r1, [pc, #60]	; (800e01c <HAL_PWREx_ConfigSupply+0x70>)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800dfe6:	f7f7 ffa7 	bl	8005f38 <HAL_GetTick>
 800dfea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dfec:	e009      	b.n	800e002 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800dfee:	f7f7 ffa3 	bl	8005f38 <HAL_GetTick>
 800dff2:	4602      	mov	r2, r0
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dffc:	d901      	bls.n	800e002 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	e007      	b.n	800e012 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e002:	4b06      	ldr	r3, [pc, #24]	; (800e01c <HAL_PWREx_ConfigSupply+0x70>)
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e00e:	d1ee      	bne.n	800dfee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	58024800 	.word	0x58024800

0800e020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b08c      	sub	sp, #48	; 0x30
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d102      	bne.n	800e034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	f000 bc48 	b.w	800e8c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f000 8088 	beq.w	800e152 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e042:	4b99      	ldr	r3, [pc, #612]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e04a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e04c:	4b96      	ldr	r3, [pc, #600]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e050:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e054:	2b10      	cmp	r3, #16
 800e056:	d007      	beq.n	800e068 <HAL_RCC_OscConfig+0x48>
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	2b18      	cmp	r3, #24
 800e05c:	d111      	bne.n	800e082 <HAL_RCC_OscConfig+0x62>
 800e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e060:	f003 0303 	and.w	r3, r3, #3
 800e064:	2b02      	cmp	r3, #2
 800e066:	d10c      	bne.n	800e082 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e068:	4b8f      	ldr	r3, [pc, #572]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d06d      	beq.n	800e150 <HAL_RCC_OscConfig+0x130>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d169      	bne.n	800e150 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	f000 bc21 	b.w	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e08a:	d106      	bne.n	800e09a <HAL_RCC_OscConfig+0x7a>
 800e08c:	4b86      	ldr	r3, [pc, #536]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a85      	ldr	r2, [pc, #532]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	e02e      	b.n	800e0f8 <HAL_RCC_OscConfig+0xd8>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10c      	bne.n	800e0bc <HAL_RCC_OscConfig+0x9c>
 800e0a2:	4b81      	ldr	r3, [pc, #516]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a80      	ldr	r2, [pc, #512]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	4b7e      	ldr	r3, [pc, #504]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a7d      	ldr	r2, [pc, #500]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e0b8:	6013      	str	r3, [r2, #0]
 800e0ba:	e01d      	b.n	800e0f8 <HAL_RCC_OscConfig+0xd8>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e0c4:	d10c      	bne.n	800e0e0 <HAL_RCC_OscConfig+0xc0>
 800e0c6:	4b78      	ldr	r3, [pc, #480]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a77      	ldr	r2, [pc, #476]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	4b75      	ldr	r3, [pc, #468]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a74      	ldr	r2, [pc, #464]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	e00b      	b.n	800e0f8 <HAL_RCC_OscConfig+0xd8>
 800e0e0:	4b71      	ldr	r3, [pc, #452]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a70      	ldr	r2, [pc, #448]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	4b6e      	ldr	r3, [pc, #440]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a6d      	ldr	r2, [pc, #436]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e0f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e0f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d013      	beq.n	800e128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e100:	f7f7 ff1a 	bl	8005f38 <HAL_GetTick>
 800e104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e106:	e008      	b.n	800e11a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e108:	f7f7 ff16 	bl	8005f38 <HAL_GetTick>
 800e10c:	4602      	mov	r2, r0
 800e10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	2b64      	cmp	r3, #100	; 0x64
 800e114:	d901      	bls.n	800e11a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e116:	2303      	movs	r3, #3
 800e118:	e3d4      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e11a:	4b63      	ldr	r3, [pc, #396]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e122:	2b00      	cmp	r3, #0
 800e124:	d0f0      	beq.n	800e108 <HAL_RCC_OscConfig+0xe8>
 800e126:	e014      	b.n	800e152 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e128:	f7f7 ff06 	bl	8005f38 <HAL_GetTick>
 800e12c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e12e:	e008      	b.n	800e142 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e130:	f7f7 ff02 	bl	8005f38 <HAL_GetTick>
 800e134:	4602      	mov	r2, r0
 800e136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e138:	1ad3      	subs	r3, r2, r3
 800e13a:	2b64      	cmp	r3, #100	; 0x64
 800e13c:	d901      	bls.n	800e142 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e3c0      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e142:	4b59      	ldr	r3, [pc, #356]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d1f0      	bne.n	800e130 <HAL_RCC_OscConfig+0x110>
 800e14e:	e000      	b.n	800e152 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f003 0302 	and.w	r3, r3, #2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 80ca 	beq.w	800e2f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e160:	4b51      	ldr	r3, [pc, #324]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e168:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e16a:	4b4f      	ldr	r3, [pc, #316]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d007      	beq.n	800e186 <HAL_RCC_OscConfig+0x166>
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	2b18      	cmp	r3, #24
 800e17a:	d156      	bne.n	800e22a <HAL_RCC_OscConfig+0x20a>
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	f003 0303 	and.w	r3, r3, #3
 800e182:	2b00      	cmp	r3, #0
 800e184:	d151      	bne.n	800e22a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e186:	4b48      	ldr	r3, [pc, #288]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f003 0304 	and.w	r3, r3, #4
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d005      	beq.n	800e19e <HAL_RCC_OscConfig+0x17e>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	e392      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e19e:	4b42      	ldr	r3, [pc, #264]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f023 0219 	bic.w	r2, r3, #25
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	493f      	ldr	r1, [pc, #252]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1b0:	f7f7 fec2 	bl	8005f38 <HAL_GetTick>
 800e1b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e1b6:	e008      	b.n	800e1ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e1b8:	f7f7 febe 	bl	8005f38 <HAL_GetTick>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d901      	bls.n	800e1ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	e37c      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e1ca:	4b37      	ldr	r3, [pc, #220]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f003 0304 	and.w	r3, r3, #4
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d0f0      	beq.n	800e1b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1d6:	f7f7 febb 	bl	8005f50 <HAL_GetREVID>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	f241 0203 	movw	r2, #4099	; 0x1003
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d817      	bhi.n	800e214 <HAL_RCC_OscConfig+0x1f4>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	2b40      	cmp	r3, #64	; 0x40
 800e1ea:	d108      	bne.n	800e1fe <HAL_RCC_OscConfig+0x1de>
 800e1ec:	4b2e      	ldr	r3, [pc, #184]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e1f4:	4a2c      	ldr	r2, [pc, #176]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e1f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1fc:	e07a      	b.n	800e2f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1fe:	4b2a      	ldr	r3, [pc, #168]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	031b      	lsls	r3, r3, #12
 800e20c:	4926      	ldr	r1, [pc, #152]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e20e:	4313      	orrs	r3, r2
 800e210:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e212:	e06f      	b.n	800e2f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e214:	4b24      	ldr	r3, [pc, #144]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	691b      	ldr	r3, [r3, #16]
 800e220:	061b      	lsls	r3, r3, #24
 800e222:	4921      	ldr	r1, [pc, #132]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e224:	4313      	orrs	r3, r2
 800e226:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e228:	e064      	b.n	800e2f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d047      	beq.n	800e2c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e232:	4b1d      	ldr	r3, [pc, #116]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f023 0219 	bic.w	r2, r3, #25
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	491a      	ldr	r1, [pc, #104]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e240:	4313      	orrs	r3, r2
 800e242:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e244:	f7f7 fe78 	bl	8005f38 <HAL_GetTick>
 800e248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e24a:	e008      	b.n	800e25e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e24c:	f7f7 fe74 	bl	8005f38 <HAL_GetTick>
 800e250:	4602      	mov	r2, r0
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	2b02      	cmp	r3, #2
 800e258:	d901      	bls.n	800e25e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e25a:	2303      	movs	r3, #3
 800e25c:	e332      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e25e:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 0304 	and.w	r3, r3, #4
 800e266:	2b00      	cmp	r3, #0
 800e268:	d0f0      	beq.n	800e24c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e26a:	f7f7 fe71 	bl	8005f50 <HAL_GetREVID>
 800e26e:	4603      	mov	r3, r0
 800e270:	f241 0203 	movw	r2, #4099	; 0x1003
 800e274:	4293      	cmp	r3, r2
 800e276:	d819      	bhi.n	800e2ac <HAL_RCC_OscConfig+0x28c>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	2b40      	cmp	r3, #64	; 0x40
 800e27e:	d108      	bne.n	800e292 <HAL_RCC_OscConfig+0x272>
 800e280:	4b09      	ldr	r3, [pc, #36]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e288:	4a07      	ldr	r2, [pc, #28]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e28a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e28e:	6053      	str	r3, [r2, #4]
 800e290:	e030      	b.n	800e2f4 <HAL_RCC_OscConfig+0x2d4>
 800e292:	4b05      	ldr	r3, [pc, #20]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	031b      	lsls	r3, r3, #12
 800e2a0:	4901      	ldr	r1, [pc, #4]	; (800e2a8 <HAL_RCC_OscConfig+0x288>)
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	604b      	str	r3, [r1, #4]
 800e2a6:	e025      	b.n	800e2f4 <HAL_RCC_OscConfig+0x2d4>
 800e2a8:	58024400 	.word	0x58024400
 800e2ac:	4b9a      	ldr	r3, [pc, #616]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	061b      	lsls	r3, r3, #24
 800e2ba:	4997      	ldr	r1, [pc, #604]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	604b      	str	r3, [r1, #4]
 800e2c0:	e018      	b.n	800e2f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e2c2:	4b95      	ldr	r3, [pc, #596]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a94      	ldr	r2, [pc, #592]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e2c8:	f023 0301 	bic.w	r3, r3, #1
 800e2cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2ce:	f7f7 fe33 	bl	8005f38 <HAL_GetTick>
 800e2d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e2d4:	e008      	b.n	800e2e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e2d6:	f7f7 fe2f 	bl	8005f38 <HAL_GetTick>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d901      	bls.n	800e2e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	e2ed      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e2e8:	4b8b      	ldr	r3, [pc, #556]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f003 0304 	and.w	r3, r3, #4
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1f0      	bne.n	800e2d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f003 0310 	and.w	r3, r3, #16
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 80a9 	beq.w	800e454 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e302:	4b85      	ldr	r3, [pc, #532]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e30a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e30c:	4b82      	ldr	r3, [pc, #520]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e310:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	2b08      	cmp	r3, #8
 800e316:	d007      	beq.n	800e328 <HAL_RCC_OscConfig+0x308>
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	2b18      	cmp	r3, #24
 800e31c:	d13a      	bne.n	800e394 <HAL_RCC_OscConfig+0x374>
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	f003 0303 	and.w	r3, r3, #3
 800e324:	2b01      	cmp	r3, #1
 800e326:	d135      	bne.n	800e394 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e328:	4b7b      	ldr	r3, [pc, #492]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <HAL_RCC_OscConfig+0x320>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	2b80      	cmp	r3, #128	; 0x80
 800e33a:	d001      	beq.n	800e340 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e2c1      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e340:	f7f7 fe06 	bl	8005f50 <HAL_GetREVID>
 800e344:	4603      	mov	r3, r0
 800e346:	f241 0203 	movw	r2, #4099	; 0x1003
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d817      	bhi.n	800e37e <HAL_RCC_OscConfig+0x35e>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	2b20      	cmp	r3, #32
 800e354:	d108      	bne.n	800e368 <HAL_RCC_OscConfig+0x348>
 800e356:	4b70      	ldr	r3, [pc, #448]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e35e:	4a6e      	ldr	r2, [pc, #440]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e364:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e366:	e075      	b.n	800e454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e368:	4b6b      	ldr	r3, [pc, #428]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a1b      	ldr	r3, [r3, #32]
 800e374:	069b      	lsls	r3, r3, #26
 800e376:	4968      	ldr	r1, [pc, #416]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e378:	4313      	orrs	r3, r2
 800e37a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e37c:	e06a      	b.n	800e454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e37e:	4b66      	ldr	r3, [pc, #408]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	061b      	lsls	r3, r3, #24
 800e38c:	4962      	ldr	r1, [pc, #392]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e38e:	4313      	orrs	r3, r2
 800e390:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e392:	e05f      	b.n	800e454 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	69db      	ldr	r3, [r3, #28]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d042      	beq.n	800e422 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e39c:	4b5e      	ldr	r3, [pc, #376]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a5d      	ldr	r2, [pc, #372]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3a8:	f7f7 fdc6 	bl	8005f38 <HAL_GetTick>
 800e3ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e3ae:	e008      	b.n	800e3c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e3b0:	f7f7 fdc2 	bl	8005f38 <HAL_GetTick>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	1ad3      	subs	r3, r2, r3
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d901      	bls.n	800e3c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e3be:	2303      	movs	r3, #3
 800e3c0:	e280      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e3c2:	4b55      	ldr	r3, [pc, #340]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d0f0      	beq.n	800e3b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e3ce:	f7f7 fdbf 	bl	8005f50 <HAL_GetREVID>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	f241 0203 	movw	r2, #4099	; 0x1003
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d817      	bhi.n	800e40c <HAL_RCC_OscConfig+0x3ec>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a1b      	ldr	r3, [r3, #32]
 800e3e0:	2b20      	cmp	r3, #32
 800e3e2:	d108      	bne.n	800e3f6 <HAL_RCC_OscConfig+0x3d6>
 800e3e4:	4b4c      	ldr	r3, [pc, #304]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e3ec:	4a4a      	ldr	r2, [pc, #296]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e3ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e3f2:	6053      	str	r3, [r2, #4]
 800e3f4:	e02e      	b.n	800e454 <HAL_RCC_OscConfig+0x434>
 800e3f6:	4b48      	ldr	r3, [pc, #288]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	069b      	lsls	r3, r3, #26
 800e404:	4944      	ldr	r1, [pc, #272]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e406:	4313      	orrs	r3, r2
 800e408:	604b      	str	r3, [r1, #4]
 800e40a:	e023      	b.n	800e454 <HAL_RCC_OscConfig+0x434>
 800e40c:	4b42      	ldr	r3, [pc, #264]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6a1b      	ldr	r3, [r3, #32]
 800e418:	061b      	lsls	r3, r3, #24
 800e41a:	493f      	ldr	r1, [pc, #252]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e41c:	4313      	orrs	r3, r2
 800e41e:	60cb      	str	r3, [r1, #12]
 800e420:	e018      	b.n	800e454 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e422:	4b3d      	ldr	r3, [pc, #244]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a3c      	ldr	r2, [pc, #240]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e42c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e42e:	f7f7 fd83 	bl	8005f38 <HAL_GetTick>
 800e432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e434:	e008      	b.n	800e448 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e436:	f7f7 fd7f 	bl	8005f38 <HAL_GetTick>
 800e43a:	4602      	mov	r2, r0
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	2b02      	cmp	r3, #2
 800e442:	d901      	bls.n	800e448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e444:	2303      	movs	r3, #3
 800e446:	e23d      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e448:	4b33      	ldr	r3, [pc, #204]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e450:	2b00      	cmp	r3, #0
 800e452:	d1f0      	bne.n	800e436 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 0308 	and.w	r3, r3, #8
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d036      	beq.n	800e4ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	695b      	ldr	r3, [r3, #20]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d019      	beq.n	800e49c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e468:	4b2b      	ldr	r3, [pc, #172]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e46a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e46c:	4a2a      	ldr	r2, [pc, #168]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e46e:	f043 0301 	orr.w	r3, r3, #1
 800e472:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e474:	f7f7 fd60 	bl	8005f38 <HAL_GetTick>
 800e478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e47a:	e008      	b.n	800e48e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e47c:	f7f7 fd5c 	bl	8005f38 <HAL_GetTick>
 800e480:	4602      	mov	r2, r0
 800e482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	2b02      	cmp	r3, #2
 800e488:	d901      	bls.n	800e48e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e48a:	2303      	movs	r3, #3
 800e48c:	e21a      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e48e:	4b22      	ldr	r3, [pc, #136]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e492:	f003 0302 	and.w	r3, r3, #2
 800e496:	2b00      	cmp	r3, #0
 800e498:	d0f0      	beq.n	800e47c <HAL_RCC_OscConfig+0x45c>
 800e49a:	e018      	b.n	800e4ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e49c:	4b1e      	ldr	r3, [pc, #120]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4a0:	4a1d      	ldr	r2, [pc, #116]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e4a2:	f023 0301 	bic.w	r3, r3, #1
 800e4a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4a8:	f7f7 fd46 	bl	8005f38 <HAL_GetTick>
 800e4ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e4ae:	e008      	b.n	800e4c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e4b0:	f7f7 fd42 	bl	8005f38 <HAL_GetTick>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	2b02      	cmp	r3, #2
 800e4bc:	d901      	bls.n	800e4c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	e200      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e4c2:	4b15      	ldr	r3, [pc, #84]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4c6:	f003 0302 	and.w	r3, r3, #2
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1f0      	bne.n	800e4b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f003 0320 	and.w	r3, r3, #32
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d039      	beq.n	800e54e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d01c      	beq.n	800e51c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e4e2:	4b0d      	ldr	r3, [pc, #52]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a0c      	ldr	r2, [pc, #48]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e4e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e4ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e4ee:	f7f7 fd23 	bl	8005f38 <HAL_GetTick>
 800e4f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4f4:	e008      	b.n	800e508 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4f6:	f7f7 fd1f 	bl	8005f38 <HAL_GetTick>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	2b02      	cmp	r3, #2
 800e502:	d901      	bls.n	800e508 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e504:	2303      	movs	r3, #3
 800e506:	e1dd      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e508:	4b03      	ldr	r3, [pc, #12]	; (800e518 <HAL_RCC_OscConfig+0x4f8>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d0f0      	beq.n	800e4f6 <HAL_RCC_OscConfig+0x4d6>
 800e514:	e01b      	b.n	800e54e <HAL_RCC_OscConfig+0x52e>
 800e516:	bf00      	nop
 800e518:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e51c:	4b9b      	ldr	r3, [pc, #620]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a9a      	ldr	r2, [pc, #616]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e526:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e528:	f7f7 fd06 	bl	8005f38 <HAL_GetTick>
 800e52c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e52e:	e008      	b.n	800e542 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e530:	f7f7 fd02 	bl	8005f38 <HAL_GetTick>
 800e534:	4602      	mov	r2, r0
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d901      	bls.n	800e542 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e53e:	2303      	movs	r3, #3
 800e540:	e1c0      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e542:	4b92      	ldr	r3, [pc, #584]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1f0      	bne.n	800e530 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f003 0304 	and.w	r3, r3, #4
 800e556:	2b00      	cmp	r3, #0
 800e558:	f000 8081 	beq.w	800e65e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e55c:	4b8c      	ldr	r3, [pc, #560]	; (800e790 <HAL_RCC_OscConfig+0x770>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a8b      	ldr	r2, [pc, #556]	; (800e790 <HAL_RCC_OscConfig+0x770>)
 800e562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e568:	f7f7 fce6 	bl	8005f38 <HAL_GetTick>
 800e56c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e56e:	e008      	b.n	800e582 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e570:	f7f7 fce2 	bl	8005f38 <HAL_GetTick>
 800e574:	4602      	mov	r2, r0
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	2b64      	cmp	r3, #100	; 0x64
 800e57c:	d901      	bls.n	800e582 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e57e:	2303      	movs	r3, #3
 800e580:	e1a0      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e582:	4b83      	ldr	r3, [pc, #524]	; (800e790 <HAL_RCC_OscConfig+0x770>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d0f0      	beq.n	800e570 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d106      	bne.n	800e5a4 <HAL_RCC_OscConfig+0x584>
 800e596:	4b7d      	ldr	r3, [pc, #500]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59a:	4a7c      	ldr	r2, [pc, #496]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e59c:	f043 0301 	orr.w	r3, r3, #1
 800e5a0:	6713      	str	r3, [r2, #112]	; 0x70
 800e5a2:	e02d      	b.n	800e600 <HAL_RCC_OscConfig+0x5e0>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10c      	bne.n	800e5c6 <HAL_RCC_OscConfig+0x5a6>
 800e5ac:	4b77      	ldr	r3, [pc, #476]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b0:	4a76      	ldr	r2, [pc, #472]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5b2:	f023 0301 	bic.w	r3, r3, #1
 800e5b6:	6713      	str	r3, [r2, #112]	; 0x70
 800e5b8:	4b74      	ldr	r3, [pc, #464]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5bc:	4a73      	ldr	r2, [pc, #460]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5be:	f023 0304 	bic.w	r3, r3, #4
 800e5c2:	6713      	str	r3, [r2, #112]	; 0x70
 800e5c4:	e01c      	b.n	800e600 <HAL_RCC_OscConfig+0x5e0>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	2b05      	cmp	r3, #5
 800e5cc:	d10c      	bne.n	800e5e8 <HAL_RCC_OscConfig+0x5c8>
 800e5ce:	4b6f      	ldr	r3, [pc, #444]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5d2:	4a6e      	ldr	r2, [pc, #440]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5d4:	f043 0304 	orr.w	r3, r3, #4
 800e5d8:	6713      	str	r3, [r2, #112]	; 0x70
 800e5da:	4b6c      	ldr	r3, [pc, #432]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5de:	4a6b      	ldr	r2, [pc, #428]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5e0:	f043 0301 	orr.w	r3, r3, #1
 800e5e4:	6713      	str	r3, [r2, #112]	; 0x70
 800e5e6:	e00b      	b.n	800e600 <HAL_RCC_OscConfig+0x5e0>
 800e5e8:	4b68      	ldr	r3, [pc, #416]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ec:	4a67      	ldr	r2, [pc, #412]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5ee:	f023 0301 	bic.w	r3, r3, #1
 800e5f2:	6713      	str	r3, [r2, #112]	; 0x70
 800e5f4:	4b65      	ldr	r3, [pc, #404]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5f8:	4a64      	ldr	r2, [pc, #400]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e5fa:	f023 0304 	bic.w	r3, r3, #4
 800e5fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d015      	beq.n	800e634 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e608:	f7f7 fc96 	bl	8005f38 <HAL_GetTick>
 800e60c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e60e:	e00a      	b.n	800e626 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e610:	f7f7 fc92 	bl	8005f38 <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e61e:	4293      	cmp	r3, r2
 800e620:	d901      	bls.n	800e626 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e622:	2303      	movs	r3, #3
 800e624:	e14e      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e626:	4b59      	ldr	r3, [pc, #356]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e62a:	f003 0302 	and.w	r3, r3, #2
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d0ee      	beq.n	800e610 <HAL_RCC_OscConfig+0x5f0>
 800e632:	e014      	b.n	800e65e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e634:	f7f7 fc80 	bl	8005f38 <HAL_GetTick>
 800e638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e63a:	e00a      	b.n	800e652 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e63c:	f7f7 fc7c 	bl	8005f38 <HAL_GetTick>
 800e640:	4602      	mov	r2, r0
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	f241 3288 	movw	r2, #5000	; 0x1388
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d901      	bls.n	800e652 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e64e:	2303      	movs	r3, #3
 800e650:	e138      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e652:	4b4e      	ldr	r3, [pc, #312]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e656:	f003 0302 	and.w	r3, r3, #2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1ee      	bne.n	800e63c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e662:	2b00      	cmp	r3, #0
 800e664:	f000 812d 	beq.w	800e8c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e668:	4b48      	ldr	r3, [pc, #288]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e670:	2b18      	cmp	r3, #24
 800e672:	f000 80bd 	beq.w	800e7f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	f040 809e 	bne.w	800e7bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e680:	4b42      	ldr	r3, [pc, #264]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a41      	ldr	r2, [pc, #260]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e68a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e68c:	f7f7 fc54 	bl	8005f38 <HAL_GetTick>
 800e690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e692:	e008      	b.n	800e6a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e694:	f7f7 fc50 	bl	8005f38 <HAL_GetTick>
 800e698:	4602      	mov	r2, r0
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	1ad3      	subs	r3, r2, r3
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	d901      	bls.n	800e6a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	e10e      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e6a6:	4b39      	ldr	r3, [pc, #228]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1f0      	bne.n	800e694 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e6b2:	4b36      	ldr	r3, [pc, #216]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e6b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6b6:	4b37      	ldr	r3, [pc, #220]	; (800e794 <HAL_RCC_OscConfig+0x774>)
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e6c2:	0112      	lsls	r2, r2, #4
 800e6c4:	430a      	orrs	r2, r1
 800e6c6:	4931      	ldr	r1, [pc, #196]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	628b      	str	r3, [r1, #40]	; 0x28
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	025b      	lsls	r3, r3, #9
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	431a      	orrs	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	041b      	lsls	r3, r3, #16
 800e6ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e6ee:	431a      	orrs	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	061b      	lsls	r3, r3, #24
 800e6f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e6fc:	4923      	ldr	r1, [pc, #140]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e6fe:	4313      	orrs	r3, r2
 800e700:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e702:	4b22      	ldr	r3, [pc, #136]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e706:	4a21      	ldr	r2, [pc, #132]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e708:	f023 0301 	bic.w	r3, r3, #1
 800e70c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e70e:	4b1f      	ldr	r3, [pc, #124]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e712:	4b21      	ldr	r3, [pc, #132]	; (800e798 <HAL_RCC_OscConfig+0x778>)
 800e714:	4013      	ands	r3, r2
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e71a:	00d2      	lsls	r2, r2, #3
 800e71c:	491b      	ldr	r1, [pc, #108]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e71e:	4313      	orrs	r3, r2
 800e720:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e722:	4b1a      	ldr	r3, [pc, #104]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e726:	f023 020c 	bic.w	r2, r3, #12
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e72e:	4917      	ldr	r1, [pc, #92]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e730:	4313      	orrs	r3, r2
 800e732:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e734:	4b15      	ldr	r3, [pc, #84]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e738:	f023 0202 	bic.w	r2, r3, #2
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e740:	4912      	ldr	r1, [pc, #72]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e742:	4313      	orrs	r3, r2
 800e744:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e746:	4b11      	ldr	r3, [pc, #68]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e74a:	4a10      	ldr	r2, [pc, #64]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e74c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e752:	4b0e      	ldr	r3, [pc, #56]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	4a0d      	ldr	r2, [pc, #52]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e75c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e75e:	4b0b      	ldr	r3, [pc, #44]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e762:	4a0a      	ldr	r2, [pc, #40]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e76a:	4b08      	ldr	r3, [pc, #32]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76e:	4a07      	ldr	r2, [pc, #28]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e770:	f043 0301 	orr.w	r3, r3, #1
 800e774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e776:	4b05      	ldr	r3, [pc, #20]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a04      	ldr	r2, [pc, #16]	; (800e78c <HAL_RCC_OscConfig+0x76c>)
 800e77c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e782:	f7f7 fbd9 	bl	8005f38 <HAL_GetTick>
 800e786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e788:	e011      	b.n	800e7ae <HAL_RCC_OscConfig+0x78e>
 800e78a:	bf00      	nop
 800e78c:	58024400 	.word	0x58024400
 800e790:	58024800 	.word	0x58024800
 800e794:	fffffc0c 	.word	0xfffffc0c
 800e798:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e79c:	f7f7 fbcc 	bl	8005f38 <HAL_GetTick>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	1ad3      	subs	r3, r2, r3
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d901      	bls.n	800e7ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e7aa:	2303      	movs	r3, #3
 800e7ac:	e08a      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e7ae:	4b47      	ldr	r3, [pc, #284]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d0f0      	beq.n	800e79c <HAL_RCC_OscConfig+0x77c>
 800e7ba:	e082      	b.n	800e8c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e7bc:	4b43      	ldr	r3, [pc, #268]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a42      	ldr	r2, [pc, #264]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e7c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e7c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7c8:	f7f7 fbb6 	bl	8005f38 <HAL_GetTick>
 800e7cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e7ce:	e008      	b.n	800e7e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e7d0:	f7f7 fbb2 	bl	8005f38 <HAL_GetTick>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d901      	bls.n	800e7e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e7de:	2303      	movs	r3, #3
 800e7e0:	e070      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e7e2:	4b3a      	ldr	r3, [pc, #232]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1f0      	bne.n	800e7d0 <HAL_RCC_OscConfig+0x7b0>
 800e7ee:	e068      	b.n	800e8c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e7f0:	4b36      	ldr	r3, [pc, #216]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e7f6:	4b35      	ldr	r3, [pc, #212]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e800:	2b01      	cmp	r3, #1
 800e802:	d031      	beq.n	800e868 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	f003 0203 	and.w	r2, r3, #3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e80e:	429a      	cmp	r2, r3
 800e810:	d12a      	bne.n	800e868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	091b      	lsrs	r3, r3, #4
 800e816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e81e:	429a      	cmp	r2, r3
 800e820:	d122      	bne.n	800e868 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e82c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e82e:	429a      	cmp	r2, r3
 800e830:	d11a      	bne.n	800e868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	0a5b      	lsrs	r3, r3, #9
 800e836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e840:	429a      	cmp	r2, r3
 800e842:	d111      	bne.n	800e868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	0c1b      	lsrs	r3, r3, #16
 800e848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e850:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e852:	429a      	cmp	r2, r3
 800e854:	d108      	bne.n	800e868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	0e1b      	lsrs	r3, r3, #24
 800e85a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e862:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e864:	429a      	cmp	r2, r3
 800e866:	d001      	beq.n	800e86c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e868:	2301      	movs	r3, #1
 800e86a:	e02b      	b.n	800e8c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e86c:	4b17      	ldr	r3, [pc, #92]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e870:	08db      	lsrs	r3, r3, #3
 800e872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e876:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e87c:	693a      	ldr	r2, [r7, #16]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d01f      	beq.n	800e8c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e882:	4b12      	ldr	r3, [pc, #72]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e886:	4a11      	ldr	r2, [pc, #68]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e888:	f023 0301 	bic.w	r3, r3, #1
 800e88c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e88e:	f7f7 fb53 	bl	8005f38 <HAL_GetTick>
 800e892:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e894:	bf00      	nop
 800e896:	f7f7 fb4f 	bl	8005f38 <HAL_GetTick>
 800e89a:	4602      	mov	r2, r0
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d0f9      	beq.n	800e896 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e8a2:	4b0a      	ldr	r3, [pc, #40]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e8a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8a6:	4b0a      	ldr	r3, [pc, #40]	; (800e8d0 <HAL_RCC_OscConfig+0x8b0>)
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e8ae:	00d2      	lsls	r2, r2, #3
 800e8b0:	4906      	ldr	r1, [pc, #24]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ba:	4a04      	ldr	r2, [pc, #16]	; (800e8cc <HAL_RCC_OscConfig+0x8ac>)
 800e8bc:	f043 0301 	orr.w	r3, r3, #1
 800e8c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3730      	adds	r7, #48	; 0x30
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	58024400 	.word	0x58024400
 800e8d0:	ffff0007 	.word	0xffff0007

0800e8d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e19c      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e8e8:	4b8a      	ldr	r3, [pc, #552]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f003 030f 	and.w	r3, r3, #15
 800e8f0:	683a      	ldr	r2, [r7, #0]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d910      	bls.n	800e918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8f6:	4b87      	ldr	r3, [pc, #540]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f023 020f 	bic.w	r2, r3, #15
 800e8fe:	4985      	ldr	r1, [pc, #532]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	4313      	orrs	r3, r2
 800e904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e906:	4b83      	ldr	r3, [pc, #524]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f003 030f 	and.w	r3, r3, #15
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	429a      	cmp	r2, r3
 800e912:	d001      	beq.n	800e918 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e914:	2301      	movs	r3, #1
 800e916:	e184      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f003 0304 	and.w	r3, r3, #4
 800e920:	2b00      	cmp	r3, #0
 800e922:	d010      	beq.n	800e946 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	691a      	ldr	r2, [r3, #16]
 800e928:	4b7b      	ldr	r3, [pc, #492]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e930:	429a      	cmp	r2, r3
 800e932:	d908      	bls.n	800e946 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e934:	4b78      	ldr	r3, [pc, #480]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e936:	699b      	ldr	r3, [r3, #24]
 800e938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	4975      	ldr	r1, [pc, #468]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e942:	4313      	orrs	r3, r2
 800e944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f003 0308 	and.w	r3, r3, #8
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d010      	beq.n	800e974 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	695a      	ldr	r2, [r3, #20]
 800e956:	4b70      	ldr	r3, [pc, #448]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e958:	69db      	ldr	r3, [r3, #28]
 800e95a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e95e:	429a      	cmp	r2, r3
 800e960:	d908      	bls.n	800e974 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e962:	4b6d      	ldr	r3, [pc, #436]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e964:	69db      	ldr	r3, [r3, #28]
 800e966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	496a      	ldr	r1, [pc, #424]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e970:	4313      	orrs	r3, r2
 800e972:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 0310 	and.w	r3, r3, #16
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d010      	beq.n	800e9a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	699a      	ldr	r2, [r3, #24]
 800e984:	4b64      	ldr	r3, [pc, #400]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e986:	69db      	ldr	r3, [r3, #28]
 800e988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d908      	bls.n	800e9a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e990:	4b61      	ldr	r3, [pc, #388]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e992:	69db      	ldr	r3, [r3, #28]
 800e994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	495e      	ldr	r1, [pc, #376]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f003 0320 	and.w	r3, r3, #32
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d010      	beq.n	800e9d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	69da      	ldr	r2, [r3, #28]
 800e9b2:	4b59      	ldr	r3, [pc, #356]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e9b4:	6a1b      	ldr	r3, [r3, #32]
 800e9b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d908      	bls.n	800e9d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e9be:	4b56      	ldr	r3, [pc, #344]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	69db      	ldr	r3, [r3, #28]
 800e9ca:	4953      	ldr	r1, [pc, #332]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f003 0302 	and.w	r3, r3, #2
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d010      	beq.n	800e9fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	68da      	ldr	r2, [r3, #12]
 800e9e0:	4b4d      	ldr	r3, [pc, #308]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	f003 030f 	and.w	r3, r3, #15
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d908      	bls.n	800e9fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e9ec:	4b4a      	ldr	r3, [pc, #296]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e9ee:	699b      	ldr	r3, [r3, #24]
 800e9f0:	f023 020f 	bic.w	r2, r3, #15
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	4947      	ldr	r1, [pc, #284]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d055      	beq.n	800eab6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ea0a:	4b43      	ldr	r3, [pc, #268]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea0c:	699b      	ldr	r3, [r3, #24]
 800ea0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	4940      	ldr	r1, [pc, #256]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d107      	bne.n	800ea34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ea24:	4b3c      	ldr	r3, [pc, #240]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d121      	bne.n	800ea74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	e0f6      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	2b03      	cmp	r3, #3
 800ea3a:	d107      	bne.n	800ea4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ea3c:	4b36      	ldr	r3, [pc, #216]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d115      	bne.n	800ea74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e0ea      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d107      	bne.n	800ea64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ea54:	4b30      	ldr	r3, [pc, #192]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d109      	bne.n	800ea74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea60:	2301      	movs	r3, #1
 800ea62:	e0de      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea64:	4b2c      	ldr	r3, [pc, #176]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f003 0304 	and.w	r3, r3, #4
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	e0d6      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ea74:	4b28      	ldr	r3, [pc, #160]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	f023 0207 	bic.w	r2, r3, #7
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	4925      	ldr	r1, [pc, #148]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ea82:	4313      	orrs	r3, r2
 800ea84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea86:	f7f7 fa57 	bl	8005f38 <HAL_GetTick>
 800ea8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea8c:	e00a      	b.n	800eaa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea8e:	f7f7 fa53 	bl	8005f38 <HAL_GetTick>
 800ea92:	4602      	mov	r2, r0
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d901      	bls.n	800eaa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800eaa0:	2303      	movs	r3, #3
 800eaa2:	e0be      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eaa4:	4b1c      	ldr	r3, [pc, #112]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	00db      	lsls	r3, r3, #3
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d1eb      	bne.n	800ea8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f003 0302 	and.w	r3, r3, #2
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d010      	beq.n	800eae4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	68da      	ldr	r2, [r3, #12]
 800eac6:	4b14      	ldr	r3, [pc, #80]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800eac8:	699b      	ldr	r3, [r3, #24]
 800eaca:	f003 030f 	and.w	r3, r3, #15
 800eace:	429a      	cmp	r2, r3
 800ead0:	d208      	bcs.n	800eae4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ead2:	4b11      	ldr	r3, [pc, #68]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	f023 020f 	bic.w	r2, r3, #15
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	490e      	ldr	r1, [pc, #56]	; (800eb18 <HAL_RCC_ClockConfig+0x244>)
 800eae0:	4313      	orrs	r3, r2
 800eae2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eae4:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f003 030f 	and.w	r3, r3, #15
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d214      	bcs.n	800eb1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eaf2:	4b08      	ldr	r3, [pc, #32]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f023 020f 	bic.w	r2, r3, #15
 800eafa:	4906      	ldr	r1, [pc, #24]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb02:	4b04      	ldr	r3, [pc, #16]	; (800eb14 <HAL_RCC_ClockConfig+0x240>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f003 030f 	and.w	r3, r3, #15
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d005      	beq.n	800eb1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	e086      	b.n	800ec22 <HAL_RCC_ClockConfig+0x34e>
 800eb14:	52002000 	.word	0x52002000
 800eb18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f003 0304 	and.w	r3, r3, #4
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d010      	beq.n	800eb4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	691a      	ldr	r2, [r3, #16]
 800eb2c:	4b3f      	ldr	r3, [pc, #252]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d208      	bcs.n	800eb4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800eb38:	4b3c      	ldr	r3, [pc, #240]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	4939      	ldr	r1, [pc, #228]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb46:	4313      	orrs	r3, r2
 800eb48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f003 0308 	and.w	r3, r3, #8
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d010      	beq.n	800eb78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	695a      	ldr	r2, [r3, #20]
 800eb5a:	4b34      	ldr	r3, [pc, #208]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb5c:	69db      	ldr	r3, [r3, #28]
 800eb5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d208      	bcs.n	800eb78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eb66:	4b31      	ldr	r3, [pc, #196]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb68:	69db      	ldr	r3, [r3, #28]
 800eb6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	492e      	ldr	r1, [pc, #184]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb74:	4313      	orrs	r3, r2
 800eb76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f003 0310 	and.w	r3, r3, #16
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d010      	beq.n	800eba6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	699a      	ldr	r2, [r3, #24]
 800eb88:	4b28      	ldr	r3, [pc, #160]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb8a:	69db      	ldr	r3, [r3, #28]
 800eb8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d208      	bcs.n	800eba6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eb94:	4b25      	ldr	r3, [pc, #148]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eb96:	69db      	ldr	r3, [r3, #28]
 800eb98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	4922      	ldr	r1, [pc, #136]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800eba2:	4313      	orrs	r3, r2
 800eba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f003 0320 	and.w	r3, r3, #32
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d010      	beq.n	800ebd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	69da      	ldr	r2, [r3, #28]
 800ebb6:	4b1d      	ldr	r3, [pc, #116]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800ebb8:	6a1b      	ldr	r3, [r3, #32]
 800ebba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d208      	bcs.n	800ebd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ebc2:	4b1a      	ldr	r3, [pc, #104]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800ebc4:	6a1b      	ldr	r3, [r3, #32]
 800ebc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	4917      	ldr	r1, [pc, #92]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ebd4:	f000 f834 	bl	800ec40 <HAL_RCC_GetSysClockFreq>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	4b14      	ldr	r3, [pc, #80]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800ebdc:	699b      	ldr	r3, [r3, #24]
 800ebde:	0a1b      	lsrs	r3, r3, #8
 800ebe0:	f003 030f 	and.w	r3, r3, #15
 800ebe4:	4912      	ldr	r1, [pc, #72]	; (800ec30 <HAL_RCC_ClockConfig+0x35c>)
 800ebe6:	5ccb      	ldrb	r3, [r1, r3]
 800ebe8:	f003 031f 	and.w	r3, r3, #31
 800ebec:	fa22 f303 	lsr.w	r3, r2, r3
 800ebf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ebf2:	4b0e      	ldr	r3, [pc, #56]	; (800ec2c <HAL_RCC_ClockConfig+0x358>)
 800ebf4:	699b      	ldr	r3, [r3, #24]
 800ebf6:	f003 030f 	and.w	r3, r3, #15
 800ebfa:	4a0d      	ldr	r2, [pc, #52]	; (800ec30 <HAL_RCC_ClockConfig+0x35c>)
 800ebfc:	5cd3      	ldrb	r3, [r2, r3]
 800ebfe:	f003 031f 	and.w	r3, r3, #31
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	fa22 f303 	lsr.w	r3, r2, r3
 800ec08:	4a0a      	ldr	r2, [pc, #40]	; (800ec34 <HAL_RCC_ClockConfig+0x360>)
 800ec0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ec0c:	4a0a      	ldr	r2, [pc, #40]	; (800ec38 <HAL_RCC_ClockConfig+0x364>)
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ec12:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <HAL_RCC_ClockConfig+0x368>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7f5 fda6 	bl	8004768 <HAL_InitTick>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	58024400 	.word	0x58024400
 800ec30:	0801b594 	.word	0x0801b594
 800ec34:	240000c8 	.word	0x240000c8
 800ec38:	240000c4 	.word	0x240000c4
 800ec3c:	240000cc 	.word	0x240000cc

0800ec40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b089      	sub	sp, #36	; 0x24
 800ec44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec46:	4bb3      	ldr	r3, [pc, #716]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec4e:	2b18      	cmp	r3, #24
 800ec50:	f200 8155 	bhi.w	800eefe <HAL_RCC_GetSysClockFreq+0x2be>
 800ec54:	a201      	add	r2, pc, #4	; (adr r2, 800ec5c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ec56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5a:	bf00      	nop
 800ec5c:	0800ecc1 	.word	0x0800ecc1
 800ec60:	0800eeff 	.word	0x0800eeff
 800ec64:	0800eeff 	.word	0x0800eeff
 800ec68:	0800eeff 	.word	0x0800eeff
 800ec6c:	0800eeff 	.word	0x0800eeff
 800ec70:	0800eeff 	.word	0x0800eeff
 800ec74:	0800eeff 	.word	0x0800eeff
 800ec78:	0800eeff 	.word	0x0800eeff
 800ec7c:	0800ece7 	.word	0x0800ece7
 800ec80:	0800eeff 	.word	0x0800eeff
 800ec84:	0800eeff 	.word	0x0800eeff
 800ec88:	0800eeff 	.word	0x0800eeff
 800ec8c:	0800eeff 	.word	0x0800eeff
 800ec90:	0800eeff 	.word	0x0800eeff
 800ec94:	0800eeff 	.word	0x0800eeff
 800ec98:	0800eeff 	.word	0x0800eeff
 800ec9c:	0800eced 	.word	0x0800eced
 800eca0:	0800eeff 	.word	0x0800eeff
 800eca4:	0800eeff 	.word	0x0800eeff
 800eca8:	0800eeff 	.word	0x0800eeff
 800ecac:	0800eeff 	.word	0x0800eeff
 800ecb0:	0800eeff 	.word	0x0800eeff
 800ecb4:	0800eeff 	.word	0x0800eeff
 800ecb8:	0800eeff 	.word	0x0800eeff
 800ecbc:	0800ecf3 	.word	0x0800ecf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecc0:	4b94      	ldr	r3, [pc, #592]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f003 0320 	and.w	r3, r3, #32
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d009      	beq.n	800ece0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eccc:	4b91      	ldr	r3, [pc, #580]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	08db      	lsrs	r3, r3, #3
 800ecd2:	f003 0303 	and.w	r3, r3, #3
 800ecd6:	4a90      	ldr	r2, [pc, #576]	; (800ef18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ecd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ecdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ecde:	e111      	b.n	800ef04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ece0:	4b8d      	ldr	r3, [pc, #564]	; (800ef18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ece2:	61bb      	str	r3, [r7, #24]
      break;
 800ece4:	e10e      	b.n	800ef04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ece6:	4b8d      	ldr	r3, [pc, #564]	; (800ef1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ece8:	61bb      	str	r3, [r7, #24]
      break;
 800ecea:	e10b      	b.n	800ef04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ecec:	4b8c      	ldr	r3, [pc, #560]	; (800ef20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ecee:	61bb      	str	r3, [r7, #24]
      break;
 800ecf0:	e108      	b.n	800ef04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ecf2:	4b88      	ldr	r3, [pc, #544]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf6:	f003 0303 	and.w	r3, r3, #3
 800ecfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ecfc:	4b85      	ldr	r3, [pc, #532]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed00:	091b      	lsrs	r3, r3, #4
 800ed02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ed08:	4b82      	ldr	r3, [pc, #520]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0c:	f003 0301 	and.w	r3, r3, #1
 800ed10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ed12:	4b80      	ldr	r3, [pc, #512]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed16:	08db      	lsrs	r3, r3, #3
 800ed18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	fb02 f303 	mul.w	r3, r2, r3
 800ed22:	ee07 3a90 	vmov	s15, r3
 800ed26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	f000 80e1 	beq.w	800eef8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b02      	cmp	r3, #2
 800ed3a:	f000 8083 	beq.w	800ee44 <HAL_RCC_GetSysClockFreq+0x204>
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	f200 80a1 	bhi.w	800ee88 <HAL_RCC_GetSysClockFreq+0x248>
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d003      	beq.n	800ed54 <HAL_RCC_GetSysClockFreq+0x114>
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d056      	beq.n	800ee00 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ed52:	e099      	b.n	800ee88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed54:	4b6f      	ldr	r3, [pc, #444]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f003 0320 	and.w	r3, r3, #32
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d02d      	beq.n	800edbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed60:	4b6c      	ldr	r3, [pc, #432]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	08db      	lsrs	r3, r3, #3
 800ed66:	f003 0303 	and.w	r3, r3, #3
 800ed6a:	4a6b      	ldr	r2, [pc, #428]	; (800ef18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ed6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ed70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	ee07 3a90 	vmov	s15, r3
 800ed78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	ee07 3a90 	vmov	s15, r3
 800ed82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed8a:	4b62      	ldr	r3, [pc, #392]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed92:	ee07 3a90 	vmov	s15, r3
 800ed96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ef24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800edae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800edba:	e087      	b.n	800eecc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	ee07 3a90 	vmov	s15, r3
 800edc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ef28 <HAL_RCC_GetSysClockFreq+0x2e8>
 800edca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800edce:	4b51      	ldr	r3, [pc, #324]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800edd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edd6:	ee07 3a90 	vmov	s15, r3
 800edda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edde:	ed97 6a02 	vldr	s12, [r7, #8]
 800ede2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ef24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ede6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800edf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800edfe:	e065      	b.n	800eecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	ee07 3a90 	vmov	s15, r3
 800ee06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ef2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ee0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee12:	4b40      	ldr	r3, [pc, #256]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee1a:	ee07 3a90 	vmov	s15, r3
 800ee1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ef24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee42:	e043      	b.n	800eecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	ee07 3a90 	vmov	s15, r3
 800ee4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ef30 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ee52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee56:	4b2f      	ldr	r3, [pc, #188]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee5e:	ee07 3a90 	vmov	s15, r3
 800ee62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ef24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee86:	e021      	b.n	800eecc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	ee07 3a90 	vmov	s15, r3
 800ee8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee92:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ef2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ee96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee9a:	4b1e      	ldr	r3, [pc, #120]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eea2:	ee07 3a90 	vmov	s15, r3
 800eea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800eeae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ef24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eeb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eeb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eeba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800eeca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800eecc:	4b11      	ldr	r3, [pc, #68]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed0:	0a5b      	lsrs	r3, r3, #9
 800eed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eed6:	3301      	adds	r3, #1
 800eed8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	ee07 3a90 	vmov	s15, r3
 800eee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eee4:	edd7 6a07 	vldr	s13, [r7, #28]
 800eee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eeec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eef0:	ee17 3a90 	vmov	r3, s15
 800eef4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800eef6:	e005      	b.n	800ef04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800eef8:	2300      	movs	r3, #0
 800eefa:	61bb      	str	r3, [r7, #24]
      break;
 800eefc:	e002      	b.n	800ef04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800eefe:	4b07      	ldr	r3, [pc, #28]	; (800ef1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ef00:	61bb      	str	r3, [r7, #24]
      break;
 800ef02:	bf00      	nop
  }

  return sysclockfreq;
 800ef04:	69bb      	ldr	r3, [r7, #24]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3724      	adds	r7, #36	; 0x24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	58024400 	.word	0x58024400
 800ef18:	03d09000 	.word	0x03d09000
 800ef1c:	003d0900 	.word	0x003d0900
 800ef20:	017d7840 	.word	0x017d7840
 800ef24:	46000000 	.word	0x46000000
 800ef28:	4c742400 	.word	0x4c742400
 800ef2c:	4a742400 	.word	0x4a742400
 800ef30:	4bbebc20 	.word	0x4bbebc20

0800ef34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ef3a:	f7ff fe81 	bl	800ec40 <HAL_RCC_GetSysClockFreq>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	4b10      	ldr	r3, [pc, #64]	; (800ef84 <HAL_RCC_GetHCLKFreq+0x50>)
 800ef42:	699b      	ldr	r3, [r3, #24]
 800ef44:	0a1b      	lsrs	r3, r3, #8
 800ef46:	f003 030f 	and.w	r3, r3, #15
 800ef4a:	490f      	ldr	r1, [pc, #60]	; (800ef88 <HAL_RCC_GetHCLKFreq+0x54>)
 800ef4c:	5ccb      	ldrb	r3, [r1, r3]
 800ef4e:	f003 031f 	and.w	r3, r3, #31
 800ef52:	fa22 f303 	lsr.w	r3, r2, r3
 800ef56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ef58:	4b0a      	ldr	r3, [pc, #40]	; (800ef84 <HAL_RCC_GetHCLKFreq+0x50>)
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	f003 030f 	and.w	r3, r3, #15
 800ef60:	4a09      	ldr	r2, [pc, #36]	; (800ef88 <HAL_RCC_GetHCLKFreq+0x54>)
 800ef62:	5cd3      	ldrb	r3, [r2, r3]
 800ef64:	f003 031f 	and.w	r3, r3, #31
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef6e:	4a07      	ldr	r2, [pc, #28]	; (800ef8c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ef72:	4a07      	ldr	r2, [pc, #28]	; (800ef90 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ef78:	4b04      	ldr	r3, [pc, #16]	; (800ef8c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	58024400 	.word	0x58024400
 800ef88:	0801b594 	.word	0x0801b594
 800ef8c:	240000c8 	.word	0x240000c8
 800ef90:	240000c4 	.word	0x240000c4

0800ef94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ef98:	f7ff ffcc 	bl	800ef34 <HAL_RCC_GetHCLKFreq>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	4b06      	ldr	r3, [pc, #24]	; (800efb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800efa0:	69db      	ldr	r3, [r3, #28]
 800efa2:	091b      	lsrs	r3, r3, #4
 800efa4:	f003 0307 	and.w	r3, r3, #7
 800efa8:	4904      	ldr	r1, [pc, #16]	; (800efbc <HAL_RCC_GetPCLK1Freq+0x28>)
 800efaa:	5ccb      	ldrb	r3, [r1, r3]
 800efac:	f003 031f 	and.w	r3, r3, #31
 800efb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	58024400 	.word	0x58024400
 800efbc:	0801b594 	.word	0x0801b594

0800efc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800efc4:	f7ff ffb6 	bl	800ef34 <HAL_RCC_GetHCLKFreq>
 800efc8:	4602      	mov	r2, r0
 800efca:	4b06      	ldr	r3, [pc, #24]	; (800efe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	0a1b      	lsrs	r3, r3, #8
 800efd0:	f003 0307 	and.w	r3, r3, #7
 800efd4:	4904      	ldr	r1, [pc, #16]	; (800efe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800efd6:	5ccb      	ldrb	r3, [r1, r3]
 800efd8:	f003 031f 	and.w	r3, r3, #31
 800efdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	58024400 	.word	0x58024400
 800efe8:	0801b594 	.word	0x0801b594

0800efec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	223f      	movs	r2, #63	; 0x3f
 800effa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800effc:	4b1a      	ldr	r3, [pc, #104]	; (800f068 <HAL_RCC_GetClockConfig+0x7c>)
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	f003 0207 	and.w	r2, r3, #7
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800f008:	4b17      	ldr	r3, [pc, #92]	; (800f068 <HAL_RCC_GetClockConfig+0x7c>)
 800f00a:	699b      	ldr	r3, [r3, #24]
 800f00c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800f014:	4b14      	ldr	r3, [pc, #80]	; (800f068 <HAL_RCC_GetClockConfig+0x7c>)
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	f003 020f 	and.w	r2, r3, #15
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800f020:	4b11      	ldr	r3, [pc, #68]	; (800f068 <HAL_RCC_GetClockConfig+0x7c>)
 800f022:	699b      	ldr	r3, [r3, #24]
 800f024:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800f02c:	4b0e      	ldr	r3, [pc, #56]	; (800f068 <HAL_RCC_GetClockConfig+0x7c>)
 800f02e:	69db      	ldr	r3, [r3, #28]
 800f030:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800f038:	4b0b      	ldr	r3, [pc, #44]	; (800f068 <HAL_RCC_GetClockConfig+0x7c>)
 800f03a:	69db      	ldr	r3, [r3, #28]
 800f03c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800f044:	4b08      	ldr	r3, [pc, #32]	; (800f068 <HAL_RCC_GetClockConfig+0x7c>)
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f050:	4b06      	ldr	r3, [pc, #24]	; (800f06c <HAL_RCC_GetClockConfig+0x80>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f003 020f 	and.w	r2, r3, #15
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	601a      	str	r2, [r3, #0]
}
 800f05c:	bf00      	nop
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr
 800f068:	58024400 	.word	0x58024400
 800f06c:	52002000 	.word	0x52002000

0800f070 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f074:	b0ca      	sub	sp, #296	; 0x128
 800f076:	af00      	add	r7, sp, #0
 800f078:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f07c:	2300      	movs	r3, #0
 800f07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f082:	2300      	movs	r3, #0
 800f084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f090:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800f094:	2500      	movs	r5, #0
 800f096:	ea54 0305 	orrs.w	r3, r4, r5
 800f09a:	d049      	beq.n	800f130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f0a6:	d02f      	beq.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f0a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f0ac:	d828      	bhi.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f0ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0b2:	d01a      	beq.n	800f0ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f0b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0b8:	d822      	bhi.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d003      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f0be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0c2:	d007      	beq.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f0c4:	e01c      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0c6:	4bb8      	ldr	r3, [pc, #736]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ca:	4ab7      	ldr	r2, [pc, #732]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f0d2:	e01a      	b.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0d8:	3308      	adds	r3, #8
 800f0da:	2102      	movs	r1, #2
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f002 fb61 	bl	80117a4 <RCCEx_PLL2_Config>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f0e8:	e00f      	b.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ee:	3328      	adds	r3, #40	; 0x28
 800f0f0:	2102      	movs	r1, #2
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f002 fc08 	bl	8011908 <RCCEx_PLL3_Config>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f0fe:	e004      	b.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f100:	2301      	movs	r3, #1
 800f102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f106:	e000      	b.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d10a      	bne.n	800f128 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f112:	4ba5      	ldr	r3, [pc, #660]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f116:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f11e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f120:	4aa1      	ldr	r2, [pc, #644]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f122:	430b      	orrs	r3, r1
 800f124:	6513      	str	r3, [r2, #80]	; 0x50
 800f126:	e003      	b.n	800f130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f12c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800f13c:	f04f 0900 	mov.w	r9, #0
 800f140:	ea58 0309 	orrs.w	r3, r8, r9
 800f144:	d047      	beq.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f14a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f14c:	2b04      	cmp	r3, #4
 800f14e:	d82a      	bhi.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f150:	a201      	add	r2, pc, #4	; (adr r2, 800f158 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f156:	bf00      	nop
 800f158:	0800f16d 	.word	0x0800f16d
 800f15c:	0800f17b 	.word	0x0800f17b
 800f160:	0800f191 	.word	0x0800f191
 800f164:	0800f1af 	.word	0x0800f1af
 800f168:	0800f1af 	.word	0x0800f1af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f16c:	4b8e      	ldr	r3, [pc, #568]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f170:	4a8d      	ldr	r2, [pc, #564]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f178:	e01a      	b.n	800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f17e:	3308      	adds	r3, #8
 800f180:	2100      	movs	r1, #0
 800f182:	4618      	mov	r0, r3
 800f184:	f002 fb0e 	bl	80117a4 <RCCEx_PLL2_Config>
 800f188:	4603      	mov	r3, r0
 800f18a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f18e:	e00f      	b.n	800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f194:	3328      	adds	r3, #40	; 0x28
 800f196:	2100      	movs	r1, #0
 800f198:	4618      	mov	r0, r3
 800f19a:	f002 fbb5 	bl	8011908 <RCCEx_PLL3_Config>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f1a4:	e004      	b.n	800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f1ac:	e000      	b.n	800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f1ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10a      	bne.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f1b8:	4b7b      	ldr	r3, [pc, #492]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1bc:	f023 0107 	bic.w	r1, r3, #7
 800f1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1c6:	4a78      	ldr	r2, [pc, #480]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1c8:	430b      	orrs	r3, r1
 800f1ca:	6513      	str	r3, [r2, #80]	; 0x50
 800f1cc:	e003      	b.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1de:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f1e2:	f04f 0b00 	mov.w	fp, #0
 800f1e6:	ea5a 030b 	orrs.w	r3, sl, fp
 800f1ea:	d04c      	beq.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1f6:	d030      	beq.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f1f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1fc:	d829      	bhi.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f1fe:	2bc0      	cmp	r3, #192	; 0xc0
 800f200:	d02d      	beq.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f202:	2bc0      	cmp	r3, #192	; 0xc0
 800f204:	d825      	bhi.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f206:	2b80      	cmp	r3, #128	; 0x80
 800f208:	d018      	beq.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f20a:	2b80      	cmp	r3, #128	; 0x80
 800f20c:	d821      	bhi.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d002      	beq.n	800f218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f212:	2b40      	cmp	r3, #64	; 0x40
 800f214:	d007      	beq.n	800f226 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f216:	e01c      	b.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f218:	4b63      	ldr	r3, [pc, #396]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21c:	4a62      	ldr	r2, [pc, #392]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f21e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f224:	e01c      	b.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f22a:	3308      	adds	r3, #8
 800f22c:	2100      	movs	r1, #0
 800f22e:	4618      	mov	r0, r3
 800f230:	f002 fab8 	bl	80117a4 <RCCEx_PLL2_Config>
 800f234:	4603      	mov	r3, r0
 800f236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f23a:	e011      	b.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f240:	3328      	adds	r3, #40	; 0x28
 800f242:	2100      	movs	r1, #0
 800f244:	4618      	mov	r0, r3
 800f246:	f002 fb5f 	bl	8011908 <RCCEx_PLL3_Config>
 800f24a:	4603      	mov	r3, r0
 800f24c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f250:	e006      	b.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f258:	e002      	b.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f25a:	bf00      	nop
 800f25c:	e000      	b.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f25e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10a      	bne.n	800f27e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f268:	4b4f      	ldr	r3, [pc, #316]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f26c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f276:	4a4c      	ldr	r2, [pc, #304]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f278:	430b      	orrs	r3, r1
 800f27a:	6513      	str	r3, [r2, #80]	; 0x50
 800f27c:	e003      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f27e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f296:	2300      	movs	r3, #0
 800f298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f29c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	d053      	beq.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f2ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f2b2:	d035      	beq.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f2b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f2b8:	d82e      	bhi.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f2ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f2be:	d031      	beq.n	800f324 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f2c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f2c4:	d828      	bhi.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f2c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f2ca:	d01a      	beq.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f2cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f2d0:	d822      	bhi.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d003      	beq.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f2d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2da:	d007      	beq.n	800f2ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f2dc:	e01c      	b.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2de:	4b32      	ldr	r3, [pc, #200]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e2:	4a31      	ldr	r2, [pc, #196]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f2ea:	e01c      	b.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f002 fa55 	bl	80117a4 <RCCEx_PLL2_Config>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f300:	e011      	b.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f306:	3328      	adds	r3, #40	; 0x28
 800f308:	2100      	movs	r1, #0
 800f30a:	4618      	mov	r0, r3
 800f30c:	f002 fafc 	bl	8011908 <RCCEx_PLL3_Config>
 800f310:	4603      	mov	r3, r0
 800f312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f316:	e006      	b.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f318:	2301      	movs	r3, #1
 800f31a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f31e:	e002      	b.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f320:	bf00      	nop
 800f322:	e000      	b.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d10b      	bne.n	800f346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f32e:	4b1e      	ldr	r3, [pc, #120]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f332:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f33a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f33e:	4a1a      	ldr	r2, [pc, #104]	; (800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f340:	430b      	orrs	r3, r1
 800f342:	6593      	str	r3, [r2, #88]	; 0x58
 800f344:	e003      	b.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f34a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f35a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f35e:	2300      	movs	r3, #0
 800f360:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f364:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f368:	460b      	mov	r3, r1
 800f36a:	4313      	orrs	r3, r2
 800f36c:	d056      	beq.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f372:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f37a:	d038      	beq.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f37c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f380:	d831      	bhi.n	800f3e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f382:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f386:	d034      	beq.n	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f388:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f38c:	d82b      	bhi.n	800f3e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f38e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f392:	d01d      	beq.n	800f3d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f398:	d825      	bhi.n	800f3e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d006      	beq.n	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f39e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f3a2:	d00a      	beq.n	800f3ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f3a4:	e01f      	b.n	800f3e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f3a6:	bf00      	nop
 800f3a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3ac:	4ba2      	ldr	r3, [pc, #648]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b0:	4aa1      	ldr	r2, [pc, #644]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f3b8:	e01c      	b.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3be:	3308      	adds	r3, #8
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f002 f9ee 	bl	80117a4 <RCCEx_PLL2_Config>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f3ce:	e011      	b.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d4:	3328      	adds	r3, #40	; 0x28
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f002 fa95 	bl	8011908 <RCCEx_PLL3_Config>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f3e4:	e006      	b.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3ec:	e002      	b.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f3ee:	bf00      	nop
 800f3f0:	e000      	b.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f3f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d10b      	bne.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f3fc:	4b8e      	ldr	r3, [pc, #568]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f400:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f408:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f40c:	4a8a      	ldr	r2, [pc, #552]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f40e:	430b      	orrs	r3, r1
 800f410:	6593      	str	r3, [r2, #88]	; 0x58
 800f412:	e003      	b.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f428:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f42c:	2300      	movs	r3, #0
 800f42e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f432:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f436:	460b      	mov	r3, r1
 800f438:	4313      	orrs	r3, r2
 800f43a:	d03a      	beq.n	800f4b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f442:	2b30      	cmp	r3, #48	; 0x30
 800f444:	d01f      	beq.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f446:	2b30      	cmp	r3, #48	; 0x30
 800f448:	d819      	bhi.n	800f47e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f44a:	2b20      	cmp	r3, #32
 800f44c:	d00c      	beq.n	800f468 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f44e:	2b20      	cmp	r3, #32
 800f450:	d815      	bhi.n	800f47e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f452:	2b00      	cmp	r3, #0
 800f454:	d019      	beq.n	800f48a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f456:	2b10      	cmp	r3, #16
 800f458:	d111      	bne.n	800f47e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f45a:	4b77      	ldr	r3, [pc, #476]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45e:	4a76      	ldr	r2, [pc, #472]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f464:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f466:	e011      	b.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f46c:	3308      	adds	r3, #8
 800f46e:	2102      	movs	r1, #2
 800f470:	4618      	mov	r0, r3
 800f472:	f002 f997 	bl	80117a4 <RCCEx_PLL2_Config>
 800f476:	4603      	mov	r3, r0
 800f478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f47c:	e006      	b.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f484:	e002      	b.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f486:	bf00      	nop
 800f488:	e000      	b.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f48a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f48c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f490:	2b00      	cmp	r3, #0
 800f492:	d10a      	bne.n	800f4aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f494:	4b68      	ldr	r3, [pc, #416]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f498:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4a2:	4a65      	ldr	r2, [pc, #404]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4a4:	430b      	orrs	r3, r1
 800f4a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f4a8:	e003      	b.n	800f4b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f4be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f4c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	d051      	beq.n	800f576 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4dc:	d035      	beq.n	800f54a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f4de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4e2:	d82e      	bhi.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4e8:	d031      	beq.n	800f54e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f4ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4ee:	d828      	bhi.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4f4:	d01a      	beq.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f4f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4fa:	d822      	bhi.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d003      	beq.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f504:	d007      	beq.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f506:	e01c      	b.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f508:	4b4b      	ldr	r3, [pc, #300]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50c:	4a4a      	ldr	r2, [pc, #296]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f50e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f514:	e01c      	b.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f51a:	3308      	adds	r3, #8
 800f51c:	2100      	movs	r1, #0
 800f51e:	4618      	mov	r0, r3
 800f520:	f002 f940 	bl	80117a4 <RCCEx_PLL2_Config>
 800f524:	4603      	mov	r3, r0
 800f526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f52a:	e011      	b.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f530:	3328      	adds	r3, #40	; 0x28
 800f532:	2100      	movs	r1, #0
 800f534:	4618      	mov	r0, r3
 800f536:	f002 f9e7 	bl	8011908 <RCCEx_PLL3_Config>
 800f53a:	4603      	mov	r3, r0
 800f53c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f540:	e006      	b.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f548:	e002      	b.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f54a:	bf00      	nop
 800f54c:	e000      	b.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f54e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10a      	bne.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f558:	4b37      	ldr	r3, [pc, #220]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f55c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f566:	4a34      	ldr	r2, [pc, #208]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f568:	430b      	orrs	r3, r1
 800f56a:	6513      	str	r3, [r2, #80]	; 0x50
 800f56c:	e003      	b.n	800f576 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f56e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f586:	2300      	movs	r3, #0
 800f588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f58c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f590:	460b      	mov	r3, r1
 800f592:	4313      	orrs	r3, r2
 800f594:	d056      	beq.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f59a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f59c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f5a0:	d033      	beq.n	800f60a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f5a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f5a6:	d82c      	bhi.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f5a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5ac:	d02f      	beq.n	800f60e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f5ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5b2:	d826      	bhi.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f5b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5b8:	d02b      	beq.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f5ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5be:	d820      	bhi.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f5c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5c4:	d012      	beq.n	800f5ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5ca:	d81a      	bhi.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d022      	beq.n	800f616 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5d4:	d115      	bne.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5da:	3308      	adds	r3, #8
 800f5dc:	2101      	movs	r1, #1
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f002 f8e0 	bl	80117a4 <RCCEx_PLL2_Config>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f5ea:	e015      	b.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5f0:	3328      	adds	r3, #40	; 0x28
 800f5f2:	2101      	movs	r1, #1
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f002 f987 	bl	8011908 <RCCEx_PLL3_Config>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f600:	e00a      	b.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f602:	2301      	movs	r3, #1
 800f604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f608:	e006      	b.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f60a:	bf00      	nop
 800f60c:	e004      	b.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f60e:	bf00      	nop
 800f610:	e002      	b.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f612:	bf00      	nop
 800f614:	e000      	b.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f616:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10d      	bne.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f620:	4b05      	ldr	r3, [pc, #20]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f624:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f62e:	4a02      	ldr	r2, [pc, #8]	; (800f638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f630:	430b      	orrs	r3, r1
 800f632:	6513      	str	r3, [r2, #80]	; 0x50
 800f634:	e006      	b.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f636:	bf00      	nop
 800f638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f63c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f654:	2300      	movs	r3, #0
 800f656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f65a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f65e:	460b      	mov	r3, r1
 800f660:	4313      	orrs	r3, r2
 800f662:	d055      	beq.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f66c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f670:	d033      	beq.n	800f6da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f676:	d82c      	bhi.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f67c:	d02f      	beq.n	800f6de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f682:	d826      	bhi.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f684:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f688:	d02b      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f68a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f68e:	d820      	bhi.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f694:	d012      	beq.n	800f6bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f69a:	d81a      	bhi.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d022      	beq.n	800f6e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f6a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6a4:	d115      	bne.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6aa:	3308      	adds	r3, #8
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f002 f878 	bl	80117a4 <RCCEx_PLL2_Config>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f6ba:	e015      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c0:	3328      	adds	r3, #40	; 0x28
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f002 f91f 	bl	8011908 <RCCEx_PLL3_Config>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f6d0:	e00a      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6d8:	e006      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6da:	bf00      	nop
 800f6dc:	e004      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6de:	bf00      	nop
 800f6e0:	e002      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6e2:	bf00      	nop
 800f6e4:	e000      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d10b      	bne.n	800f708 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f6f0:	4ba3      	ldr	r3, [pc, #652]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f700:	4a9f      	ldr	r2, [pc, #636]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f702:	430b      	orrs	r3, r1
 800f704:	6593      	str	r3, [r2, #88]	; 0x58
 800f706:	e003      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f70c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f71c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f720:	2300      	movs	r3, #0
 800f722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f72a:	460b      	mov	r3, r1
 800f72c:	4313      	orrs	r3, r2
 800f72e:	d037      	beq.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f73a:	d00e      	beq.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f73c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f740:	d816      	bhi.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f742:	2b00      	cmp	r3, #0
 800f744:	d018      	beq.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f74a:	d111      	bne.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f74c:	4b8c      	ldr	r3, [pc, #560]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f750:	4a8b      	ldr	r2, [pc, #556]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f756:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f758:	e00f      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f75e:	3308      	adds	r3, #8
 800f760:	2101      	movs	r1, #1
 800f762:	4618      	mov	r0, r3
 800f764:	f002 f81e 	bl	80117a4 <RCCEx_PLL2_Config>
 800f768:	4603      	mov	r3, r0
 800f76a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f76e:	e004      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f776:	e000      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f77a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10a      	bne.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f782:	4b7f      	ldr	r3, [pc, #508]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f786:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f790:	4a7b      	ldr	r2, [pc, #492]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f792:	430b      	orrs	r3, r1
 800f794:	6513      	str	r3, [r2, #80]	; 0x50
 800f796:	e003      	b.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f79c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f7ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f7b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	d039      	beq.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7c6:	2b03      	cmp	r3, #3
 800f7c8:	d81c      	bhi.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f7ca:	a201      	add	r2, pc, #4	; (adr r2, 800f7d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d0:	0800f80d 	.word	0x0800f80d
 800f7d4:	0800f7e1 	.word	0x0800f7e1
 800f7d8:	0800f7ef 	.word	0x0800f7ef
 800f7dc:	0800f80d 	.word	0x0800f80d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7e0:	4b67      	ldr	r3, [pc, #412]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e4:	4a66      	ldr	r2, [pc, #408]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f7ec:	e00f      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7f2:	3308      	adds	r3, #8
 800f7f4:	2102      	movs	r1, #2
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f001 ffd4 	bl	80117a4 <RCCEx_PLL2_Config>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f802:	e004      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f804:	2301      	movs	r3, #1
 800f806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f80a:	e000      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f80e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f812:	2b00      	cmp	r3, #0
 800f814:	d10a      	bne.n	800f82c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f816:	4b5a      	ldr	r3, [pc, #360]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f81a:	f023 0103 	bic.w	r1, r3, #3
 800f81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f824:	4a56      	ldr	r2, [pc, #344]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f826:	430b      	orrs	r3, r1
 800f828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f82a:	e003      	b.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f82c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f844:	2300      	movs	r3, #0
 800f846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f84a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f84e:	460b      	mov	r3, r1
 800f850:	4313      	orrs	r3, r2
 800f852:	f000 809f 	beq.w	800f994 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f856:	4b4b      	ldr	r3, [pc, #300]	; (800f984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a4a      	ldr	r2, [pc, #296]	; (800f984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f862:	f7f6 fb69 	bl	8005f38 <HAL_GetTick>
 800f866:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f86a:	e00b      	b.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f86c:	f7f6 fb64 	bl	8005f38 <HAL_GetTick>
 800f870:	4602      	mov	r2, r0
 800f872:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f876:	1ad3      	subs	r3, r2, r3
 800f878:	2b64      	cmp	r3, #100	; 0x64
 800f87a:	d903      	bls.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f87c:	2303      	movs	r3, #3
 800f87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f882:	e005      	b.n	800f890 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f884:	4b3f      	ldr	r3, [pc, #252]	; (800f984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d0ed      	beq.n	800f86c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f894:	2b00      	cmp	r3, #0
 800f896:	d179      	bne.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f898:	4b39      	ldr	r3, [pc, #228]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f89a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8a4:	4053      	eors	r3, r2
 800f8a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d015      	beq.n	800f8da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f8ae:	4b34      	ldr	r3, [pc, #208]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f8ba:	4b31      	ldr	r3, [pc, #196]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8be:	4a30      	ldr	r2, [pc, #192]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f8c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f8c6:	4b2e      	ldr	r3, [pc, #184]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ca:	4a2d      	ldr	r2, [pc, #180]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f8d2:	4a2b      	ldr	r2, [pc, #172]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f8d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8e6:	d118      	bne.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8e8:	f7f6 fb26 	bl	8005f38 <HAL_GetTick>
 800f8ec:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f8f0:	e00d      	b.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8f2:	f7f6 fb21 	bl	8005f38 <HAL_GetTick>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f8fc:	1ad2      	subs	r2, r2, r3
 800f8fe:	f241 3388 	movw	r3, #5000	; 0x1388
 800f902:	429a      	cmp	r2, r3
 800f904:	d903      	bls.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f906:	2303      	movs	r3, #3
 800f908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f90c:	e005      	b.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f90e:	4b1c      	ldr	r3, [pc, #112]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f912:	f003 0302 	and.w	r3, r3, #2
 800f916:	2b00      	cmp	r3, #0
 800f918:	d0eb      	beq.n	800f8f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d129      	bne.n	800f976 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f92a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f92e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f932:	d10e      	bne.n	800f952 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f934:	4b12      	ldr	r3, [pc, #72]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f940:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f944:	091a      	lsrs	r2, r3, #4
 800f946:	4b10      	ldr	r3, [pc, #64]	; (800f988 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f948:	4013      	ands	r3, r2
 800f94a:	4a0d      	ldr	r2, [pc, #52]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f94c:	430b      	orrs	r3, r1
 800f94e:	6113      	str	r3, [r2, #16]
 800f950:	e005      	b.n	800f95e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f952:	4b0b      	ldr	r3, [pc, #44]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f954:	691b      	ldr	r3, [r3, #16]
 800f956:	4a0a      	ldr	r2, [pc, #40]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f958:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f95c:	6113      	str	r3, [r2, #16]
 800f95e:	4b08      	ldr	r3, [pc, #32]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f960:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f96a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f96e:	4a04      	ldr	r2, [pc, #16]	; (800f980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f970:	430b      	orrs	r3, r1
 800f972:	6713      	str	r3, [r2, #112]	; 0x70
 800f974:	e00e      	b.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f97a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f97e:	e009      	b.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f980:	58024400 	.word	0x58024400
 800f984:	58024800 	.word	0x58024800
 800f988:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f98c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99c:	f002 0301 	and.w	r3, r2, #1
 800f9a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f9aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	f000 8089 	beq.w	800fac8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9bc:	2b28      	cmp	r3, #40	; 0x28
 800f9be:	d86b      	bhi.n	800fa98 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f9c0:	a201      	add	r2, pc, #4	; (adr r2, 800f9c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c6:	bf00      	nop
 800f9c8:	0800faa1 	.word	0x0800faa1
 800f9cc:	0800fa99 	.word	0x0800fa99
 800f9d0:	0800fa99 	.word	0x0800fa99
 800f9d4:	0800fa99 	.word	0x0800fa99
 800f9d8:	0800fa99 	.word	0x0800fa99
 800f9dc:	0800fa99 	.word	0x0800fa99
 800f9e0:	0800fa99 	.word	0x0800fa99
 800f9e4:	0800fa99 	.word	0x0800fa99
 800f9e8:	0800fa6d 	.word	0x0800fa6d
 800f9ec:	0800fa99 	.word	0x0800fa99
 800f9f0:	0800fa99 	.word	0x0800fa99
 800f9f4:	0800fa99 	.word	0x0800fa99
 800f9f8:	0800fa99 	.word	0x0800fa99
 800f9fc:	0800fa99 	.word	0x0800fa99
 800fa00:	0800fa99 	.word	0x0800fa99
 800fa04:	0800fa99 	.word	0x0800fa99
 800fa08:	0800fa83 	.word	0x0800fa83
 800fa0c:	0800fa99 	.word	0x0800fa99
 800fa10:	0800fa99 	.word	0x0800fa99
 800fa14:	0800fa99 	.word	0x0800fa99
 800fa18:	0800fa99 	.word	0x0800fa99
 800fa1c:	0800fa99 	.word	0x0800fa99
 800fa20:	0800fa99 	.word	0x0800fa99
 800fa24:	0800fa99 	.word	0x0800fa99
 800fa28:	0800faa1 	.word	0x0800faa1
 800fa2c:	0800fa99 	.word	0x0800fa99
 800fa30:	0800fa99 	.word	0x0800fa99
 800fa34:	0800fa99 	.word	0x0800fa99
 800fa38:	0800fa99 	.word	0x0800fa99
 800fa3c:	0800fa99 	.word	0x0800fa99
 800fa40:	0800fa99 	.word	0x0800fa99
 800fa44:	0800fa99 	.word	0x0800fa99
 800fa48:	0800faa1 	.word	0x0800faa1
 800fa4c:	0800fa99 	.word	0x0800fa99
 800fa50:	0800fa99 	.word	0x0800fa99
 800fa54:	0800fa99 	.word	0x0800fa99
 800fa58:	0800fa99 	.word	0x0800fa99
 800fa5c:	0800fa99 	.word	0x0800fa99
 800fa60:	0800fa99 	.word	0x0800fa99
 800fa64:	0800fa99 	.word	0x0800fa99
 800fa68:	0800faa1 	.word	0x0800faa1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa70:	3308      	adds	r3, #8
 800fa72:	2101      	movs	r1, #1
 800fa74:	4618      	mov	r0, r3
 800fa76:	f001 fe95 	bl	80117a4 <RCCEx_PLL2_Config>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa80:	e00f      	b.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa86:	3328      	adds	r3, #40	; 0x28
 800fa88:	2101      	movs	r1, #1
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f001 ff3c 	bl	8011908 <RCCEx_PLL3_Config>
 800fa90:	4603      	mov	r3, r0
 800fa92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa96:	e004      	b.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa9e:	e000      	b.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800faa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800faa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d10a      	bne.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800faaa:	4bbf      	ldr	r3, [pc, #764]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800faac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800fab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fab8:	4abb      	ldr	r2, [pc, #748]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800faba:	430b      	orrs	r3, r1
 800fabc:	6553      	str	r3, [r2, #84]	; 0x54
 800fabe:	e003      	b.n	800fac8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800facc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad0:	f002 0302 	and.w	r3, r2, #2
 800fad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fad8:	2300      	movs	r3, #0
 800fada:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fade:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800fae2:	460b      	mov	r3, r1
 800fae4:	4313      	orrs	r3, r2
 800fae6:	d041      	beq.n	800fb6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800fae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faee:	2b05      	cmp	r3, #5
 800faf0:	d824      	bhi.n	800fb3c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800faf2:	a201      	add	r2, pc, #4	; (adr r2, 800faf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800faf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf8:	0800fb45 	.word	0x0800fb45
 800fafc:	0800fb11 	.word	0x0800fb11
 800fb00:	0800fb27 	.word	0x0800fb27
 800fb04:	0800fb45 	.word	0x0800fb45
 800fb08:	0800fb45 	.word	0x0800fb45
 800fb0c:	0800fb45 	.word	0x0800fb45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb14:	3308      	adds	r3, #8
 800fb16:	2101      	movs	r1, #1
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f001 fe43 	bl	80117a4 <RCCEx_PLL2_Config>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fb24:	e00f      	b.n	800fb46 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb2a:	3328      	adds	r3, #40	; 0x28
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f001 feea 	bl	8011908 <RCCEx_PLL3_Config>
 800fb34:	4603      	mov	r3, r0
 800fb36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fb3a:	e004      	b.n	800fb46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb42:	e000      	b.n	800fb46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800fb44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d10a      	bne.n	800fb64 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fb4e:	4b96      	ldr	r3, [pc, #600]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb52:	f023 0107 	bic.w	r1, r3, #7
 800fb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb5c:	4a92      	ldr	r2, [pc, #584]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb5e:	430b      	orrs	r3, r1
 800fb60:	6553      	str	r3, [r2, #84]	; 0x54
 800fb62:	e003      	b.n	800fb6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fb6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	f002 0304 	and.w	r3, r2, #4
 800fb78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800fb86:	460b      	mov	r3, r1
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	d044      	beq.n	800fc16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb94:	2b05      	cmp	r3, #5
 800fb96:	d825      	bhi.n	800fbe4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800fb98:	a201      	add	r2, pc, #4	; (adr r2, 800fba0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800fb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9e:	bf00      	nop
 800fba0:	0800fbed 	.word	0x0800fbed
 800fba4:	0800fbb9 	.word	0x0800fbb9
 800fba8:	0800fbcf 	.word	0x0800fbcf
 800fbac:	0800fbed 	.word	0x0800fbed
 800fbb0:	0800fbed 	.word	0x0800fbed
 800fbb4:	0800fbed 	.word	0x0800fbed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbbc:	3308      	adds	r3, #8
 800fbbe:	2101      	movs	r1, #1
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f001 fdef 	bl	80117a4 <RCCEx_PLL2_Config>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fbcc:	e00f      	b.n	800fbee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbd2:	3328      	adds	r3, #40	; 0x28
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f001 fe96 	bl	8011908 <RCCEx_PLL3_Config>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fbe2:	e004      	b.n	800fbee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbea:	e000      	b.n	800fbee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800fbec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d10b      	bne.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fbf6:	4b6c      	ldr	r3, [pc, #432]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbfa:	f023 0107 	bic.w	r1, r3, #7
 800fbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc06:	4a68      	ldr	r2, [pc, #416]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc08:	430b      	orrs	r3, r1
 800fc0a:	6593      	str	r3, [r2, #88]	; 0x58
 800fc0c:	e003      	b.n	800fc16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	f002 0320 	and.w	r3, r2, #32
 800fc22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fc26:	2300      	movs	r3, #0
 800fc28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fc2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fc30:	460b      	mov	r3, r1
 800fc32:	4313      	orrs	r3, r2
 800fc34:	d055      	beq.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc42:	d033      	beq.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800fc44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc48:	d82c      	bhi.n	800fca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc4e:	d02f      	beq.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800fc50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc54:	d826      	bhi.n	800fca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc5a:	d02b      	beq.n	800fcb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800fc5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc60:	d820      	bhi.n	800fca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc66:	d012      	beq.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800fc68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc6c:	d81a      	bhi.n	800fca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d022      	beq.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800fc72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc76:	d115      	bne.n	800fca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	2100      	movs	r1, #0
 800fc80:	4618      	mov	r0, r3
 800fc82:	f001 fd8f 	bl	80117a4 <RCCEx_PLL2_Config>
 800fc86:	4603      	mov	r3, r0
 800fc88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fc8c:	e015      	b.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc92:	3328      	adds	r3, #40	; 0x28
 800fc94:	2102      	movs	r1, #2
 800fc96:	4618      	mov	r0, r3
 800fc98:	f001 fe36 	bl	8011908 <RCCEx_PLL3_Config>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fca2:	e00a      	b.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fca4:	2301      	movs	r3, #1
 800fca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fcaa:	e006      	b.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fcac:	bf00      	nop
 800fcae:	e004      	b.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fcb0:	bf00      	nop
 800fcb2:	e002      	b.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fcb4:	bf00      	nop
 800fcb6:	e000      	b.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fcb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fcba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d10b      	bne.n	800fcda <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fcc2:	4b39      	ldr	r3, [pc, #228]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcc6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcd2:	4a35      	ldr	r2, [pc, #212]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fcd4:	430b      	orrs	r3, r1
 800fcd6:	6553      	str	r3, [r2, #84]	; 0x54
 800fcd8:	e003      	b.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800fcee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fcf8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	d058      	beq.n	800fdb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fd0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fd0e:	d033      	beq.n	800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800fd10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fd14:	d82c      	bhi.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd1a:	d02f      	beq.n	800fd7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800fd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd20:	d826      	bhi.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fd22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd26:	d02b      	beq.n	800fd80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800fd28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd2c:	d820      	bhi.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fd2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd32:	d012      	beq.n	800fd5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800fd34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd38:	d81a      	bhi.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d022      	beq.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fd3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd42:	d115      	bne.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd48:	3308      	adds	r3, #8
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f001 fd29 	bl	80117a4 <RCCEx_PLL2_Config>
 800fd52:	4603      	mov	r3, r0
 800fd54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fd58:	e015      	b.n	800fd86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd5e:	3328      	adds	r3, #40	; 0x28
 800fd60:	2102      	movs	r1, #2
 800fd62:	4618      	mov	r0, r3
 800fd64:	f001 fdd0 	bl	8011908 <RCCEx_PLL3_Config>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fd6e:	e00a      	b.n	800fd86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd70:	2301      	movs	r3, #1
 800fd72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fd76:	e006      	b.n	800fd86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd78:	bf00      	nop
 800fd7a:	e004      	b.n	800fd86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd7c:	bf00      	nop
 800fd7e:	e002      	b.n	800fd86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd80:	bf00      	nop
 800fd82:	e000      	b.n	800fd86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10e      	bne.n	800fdac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fd8e:	4b06      	ldr	r3, [pc, #24]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fd90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd92:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800fd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fd9e:	4a02      	ldr	r2, [pc, #8]	; (800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fda0:	430b      	orrs	r3, r1
 800fda2:	6593      	str	r3, [r2, #88]	; 0x58
 800fda4:	e006      	b.n	800fdb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800fda6:	bf00      	nop
 800fda8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fdb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800fdc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fdca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800fdce:	460b      	mov	r3, r1
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	d055      	beq.n	800fe80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fdd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fddc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fde0:	d033      	beq.n	800fe4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800fde2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fde6:	d82c      	bhi.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fde8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdec:	d02f      	beq.n	800fe4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800fdee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdf2:	d826      	bhi.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fdf4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fdf8:	d02b      	beq.n	800fe52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800fdfa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fdfe:	d820      	bhi.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fe00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe04:	d012      	beq.n	800fe2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800fe06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe0a:	d81a      	bhi.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d022      	beq.n	800fe56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800fe10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe14:	d115      	bne.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fe16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe1a:	3308      	adds	r3, #8
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f001 fcc0 	bl	80117a4 <RCCEx_PLL2_Config>
 800fe24:	4603      	mov	r3, r0
 800fe26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fe2a:	e015      	b.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fe2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe30:	3328      	adds	r3, #40	; 0x28
 800fe32:	2102      	movs	r1, #2
 800fe34:	4618      	mov	r0, r3
 800fe36:	f001 fd67 	bl	8011908 <RCCEx_PLL3_Config>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fe40:	e00a      	b.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe42:	2301      	movs	r3, #1
 800fe44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fe48:	e006      	b.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe4a:	bf00      	nop
 800fe4c:	e004      	b.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe4e:	bf00      	nop
 800fe50:	e002      	b.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe52:	bf00      	nop
 800fe54:	e000      	b.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10b      	bne.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fe60:	4ba1      	ldr	r3, [pc, #644]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe64:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fe68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fe70:	4a9d      	ldr	r2, [pc, #628]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe72:	430b      	orrs	r3, r1
 800fe74:	6593      	str	r3, [r2, #88]	; 0x58
 800fe76:	e003      	b.n	800fe80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fe80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe88:	f002 0308 	and.w	r3, r2, #8
 800fe8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe90:	2300      	movs	r3, #0
 800fe92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	d01e      	beq.n	800fede <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feac:	d10c      	bne.n	800fec8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800feae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feb2:	3328      	adds	r3, #40	; 0x28
 800feb4:	2102      	movs	r1, #2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f001 fd26 	bl	8011908 <RCCEx_PLL3_Config>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d002      	beq.n	800fec8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fec2:	2301      	movs	r3, #1
 800fec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fec8:	4b87      	ldr	r3, [pc, #540]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800feca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fecc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fed8:	4a83      	ldr	r2, [pc, #524]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800feda:	430b      	orrs	r3, r1
 800fedc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	f002 0310 	and.w	r3, r2, #16
 800feea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800feee:	2300      	movs	r3, #0
 800fef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fef4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fef8:	460b      	mov	r3, r1
 800fefa:	4313      	orrs	r3, r2
 800fefc:	d01e      	beq.n	800ff3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ff06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff0a:	d10c      	bne.n	800ff26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ff0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff10:	3328      	adds	r3, #40	; 0x28
 800ff12:	2102      	movs	r1, #2
 800ff14:	4618      	mov	r0, r3
 800ff16:	f001 fcf7 	bl	8011908 <RCCEx_PLL3_Config>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d002      	beq.n	800ff26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ff20:	2301      	movs	r3, #1
 800ff22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ff26:	4b70      	ldr	r3, [pc, #448]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ff2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ff36:	4a6c      	ldr	r2, [pc, #432]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff38:	430b      	orrs	r3, r1
 800ff3a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ff3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff44:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ff48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ff56:	460b      	mov	r3, r1
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	d03e      	beq.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ff5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff68:	d022      	beq.n	800ffb0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ff6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff6e:	d81b      	bhi.n	800ffa8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d003      	beq.n	800ff7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ff74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff78:	d00b      	beq.n	800ff92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ff7a:	e015      	b.n	800ffa8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff80:	3308      	adds	r3, #8
 800ff82:	2100      	movs	r1, #0
 800ff84:	4618      	mov	r0, r3
 800ff86:	f001 fc0d 	bl	80117a4 <RCCEx_PLL2_Config>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ff90:	e00f      	b.n	800ffb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ff92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff96:	3328      	adds	r3, #40	; 0x28
 800ff98:	2102      	movs	r1, #2
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f001 fcb4 	bl	8011908 <RCCEx_PLL3_Config>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ffa6:	e004      	b.n	800ffb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ffae:	e000      	b.n	800ffb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ffb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10b      	bne.n	800ffd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ffba:	4b4b      	ldr	r3, [pc, #300]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffbe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ffc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffca:	4a47      	ldr	r2, [pc, #284]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffcc:	430b      	orrs	r3, r1
 800ffce:	6593      	str	r3, [r2, #88]	; 0x58
 800ffd0:	e003      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ffda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ffe6:	67bb      	str	r3, [r7, #120]	; 0x78
 800ffe8:	2300      	movs	r3, #0
 800ffea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ffec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fff0:	460b      	mov	r3, r1
 800fff2:	4313      	orrs	r3, r2
 800fff4:	d03b      	beq.n	801006e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fffe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010002:	d01f      	beq.n	8010044 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8010004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010008:	d818      	bhi.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801000a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801000e:	d003      	beq.n	8010018 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8010010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010014:	d007      	beq.n	8010026 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8010016:	e011      	b.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010018:	4b33      	ldr	r3, [pc, #204]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801001a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801001c:	4a32      	ldr	r2, [pc, #200]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801001e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8010024:	e00f      	b.n	8010046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801002a:	3328      	adds	r3, #40	; 0x28
 801002c:	2101      	movs	r1, #1
 801002e:	4618      	mov	r0, r3
 8010030:	f001 fc6a 	bl	8011908 <RCCEx_PLL3_Config>
 8010034:	4603      	mov	r3, r0
 8010036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801003a:	e004      	b.n	8010046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801003c:	2301      	movs	r3, #1
 801003e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010042:	e000      	b.n	8010046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8010044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10b      	bne.n	8010066 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801004e:	4b26      	ldr	r3, [pc, #152]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010052:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801005a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801005e:	4a22      	ldr	r2, [pc, #136]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010060:	430b      	orrs	r3, r1
 8010062:	6553      	str	r3, [r2, #84]	; 0x54
 8010064:	e003      	b.n	801006e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801006a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801006e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010076:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801007a:	673b      	str	r3, [r7, #112]	; 0x70
 801007c:	2300      	movs	r3, #0
 801007e:	677b      	str	r3, [r7, #116]	; 0x74
 8010080:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010084:	460b      	mov	r3, r1
 8010086:	4313      	orrs	r3, r2
 8010088:	d034      	beq.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801008a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801008e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010090:	2b00      	cmp	r3, #0
 8010092:	d003      	beq.n	801009c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8010094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010098:	d007      	beq.n	80100aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801009a:	e011      	b.n	80100c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801009c:	4b12      	ldr	r3, [pc, #72]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801009e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a0:	4a11      	ldr	r2, [pc, #68]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80100a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80100a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80100a8:	e00e      	b.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80100aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100ae:	3308      	adds	r3, #8
 80100b0:	2102      	movs	r1, #2
 80100b2:	4618      	mov	r0, r3
 80100b4:	f001 fb76 	bl	80117a4 <RCCEx_PLL2_Config>
 80100b8:	4603      	mov	r3, r0
 80100ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80100be:	e003      	b.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80100c0:	2301      	movs	r3, #1
 80100c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80100c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d10d      	bne.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80100d0:	4b05      	ldr	r3, [pc, #20]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80100d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80100d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100de:	4a02      	ldr	r2, [pc, #8]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80100e0:	430b      	orrs	r3, r1
 80100e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80100e4:	e006      	b.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80100e6:	bf00      	nop
 80100e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80100f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80100f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8010100:	66bb      	str	r3, [r7, #104]	; 0x68
 8010102:	2300      	movs	r3, #0
 8010104:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010106:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801010a:	460b      	mov	r3, r1
 801010c:	4313      	orrs	r3, r2
 801010e:	d00c      	beq.n	801012a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010114:	3328      	adds	r3, #40	; 0x28
 8010116:	2102      	movs	r1, #2
 8010118:	4618      	mov	r0, r3
 801011a:	f001 fbf5 	bl	8011908 <RCCEx_PLL3_Config>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d002      	beq.n	801012a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8010124:	2301      	movs	r3, #1
 8010126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801012a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801012e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010132:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8010136:	663b      	str	r3, [r7, #96]	; 0x60
 8010138:	2300      	movs	r3, #0
 801013a:	667b      	str	r3, [r7, #100]	; 0x64
 801013c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8010140:	460b      	mov	r3, r1
 8010142:	4313      	orrs	r3, r2
 8010144:	d038      	beq.n	80101b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8010146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801014a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801014e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010152:	d018      	beq.n	8010186 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8010154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010158:	d811      	bhi.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801015a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801015e:	d014      	beq.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8010160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010164:	d80b      	bhi.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010166:	2b00      	cmp	r3, #0
 8010168:	d011      	beq.n	801018e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801016a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801016e:	d106      	bne.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010170:	4bc3      	ldr	r3, [pc, #780]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010174:	4ac2      	ldr	r2, [pc, #776]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801017a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801017c:	e008      	b.n	8010190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801017e:	2301      	movs	r3, #1
 8010180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010184:	e004      	b.n	8010190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010186:	bf00      	nop
 8010188:	e002      	b.n	8010190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801018a:	bf00      	nop
 801018c:	e000      	b.n	8010190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801018e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010194:	2b00      	cmp	r3, #0
 8010196:	d10b      	bne.n	80101b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010198:	4bb9      	ldr	r3, [pc, #740]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801019a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801019c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80101a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101a8:	4ab5      	ldr	r2, [pc, #724]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101aa:	430b      	orrs	r3, r1
 80101ac:	6553      	str	r3, [r2, #84]	; 0x54
 80101ae:	e003      	b.n	80101b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80101b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80101c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80101c6:	2300      	movs	r3, #0
 80101c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80101ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80101ce:	460b      	mov	r3, r1
 80101d0:	4313      	orrs	r3, r2
 80101d2:	d009      	beq.n	80101e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80101d4:	4baa      	ldr	r3, [pc, #680]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80101dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e2:	4aa7      	ldr	r2, [pc, #668]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101e4:	430b      	orrs	r3, r1
 80101e6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80101e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80101f4:	653b      	str	r3, [r7, #80]	; 0x50
 80101f6:	2300      	movs	r3, #0
 80101f8:	657b      	str	r3, [r7, #84]	; 0x54
 80101fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80101fe:	460b      	mov	r3, r1
 8010200:	4313      	orrs	r3, r2
 8010202:	d00a      	beq.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010204:	4b9e      	ldr	r3, [pc, #632]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 801020c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010210:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010214:	4a9a      	ldr	r2, [pc, #616]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010216:	430b      	orrs	r3, r1
 8010218:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801021a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801021e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010222:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8010226:	64bb      	str	r3, [r7, #72]	; 0x48
 8010228:	2300      	movs	r3, #0
 801022a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801022c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010230:	460b      	mov	r3, r1
 8010232:	4313      	orrs	r3, r2
 8010234:	d009      	beq.n	801024a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010236:	4b92      	ldr	r3, [pc, #584]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801023a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801023e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010244:	4a8e      	ldr	r2, [pc, #568]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010246:	430b      	orrs	r3, r1
 8010248:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801024a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8010256:	643b      	str	r3, [r7, #64]	; 0x40
 8010258:	2300      	movs	r3, #0
 801025a:	647b      	str	r3, [r7, #68]	; 0x44
 801025c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010260:	460b      	mov	r3, r1
 8010262:	4313      	orrs	r3, r2
 8010264:	d00e      	beq.n	8010284 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010266:	4b86      	ldr	r3, [pc, #536]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	4a85      	ldr	r2, [pc, #532]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801026c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010270:	6113      	str	r3, [r2, #16]
 8010272:	4b83      	ldr	r3, [pc, #524]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010274:	6919      	ldr	r1, [r3, #16]
 8010276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801027a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801027e:	4a80      	ldr	r2, [pc, #512]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010280:	430b      	orrs	r3, r1
 8010282:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8010290:	63bb      	str	r3, [r7, #56]	; 0x38
 8010292:	2300      	movs	r3, #0
 8010294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010296:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801029a:	460b      	mov	r3, r1
 801029c:	4313      	orrs	r3, r2
 801029e:	d009      	beq.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80102a0:	4b77      	ldr	r3, [pc, #476]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80102a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102a4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80102a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102ae:	4a74      	ldr	r2, [pc, #464]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80102b0:	430b      	orrs	r3, r1
 80102b2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80102b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102bc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80102c0:	633b      	str	r3, [r7, #48]	; 0x30
 80102c2:	2300      	movs	r3, #0
 80102c4:	637b      	str	r3, [r7, #52]	; 0x34
 80102c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80102ca:	460b      	mov	r3, r1
 80102cc:	4313      	orrs	r3, r2
 80102ce:	d00a      	beq.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80102d0:	4b6b      	ldr	r3, [pc, #428]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80102d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102d4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80102d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102e0:	4a67      	ldr	r2, [pc, #412]	; (8010480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80102e2:	430b      	orrs	r3, r1
 80102e4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80102e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ee:	2100      	movs	r1, #0
 80102f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80102fc:	460b      	mov	r3, r1
 80102fe:	4313      	orrs	r3, r2
 8010300:	d011      	beq.n	8010326 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010306:	3308      	adds	r3, #8
 8010308:	2100      	movs	r1, #0
 801030a:	4618      	mov	r0, r3
 801030c:	f001 fa4a 	bl	80117a4 <RCCEx_PLL2_Config>
 8010310:	4603      	mov	r3, r0
 8010312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801031a:	2b00      	cmp	r3, #0
 801031c:	d003      	beq.n	8010326 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801031e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010322:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032e:	2100      	movs	r1, #0
 8010330:	6239      	str	r1, [r7, #32]
 8010332:	f003 0302 	and.w	r3, r3, #2
 8010336:	627b      	str	r3, [r7, #36]	; 0x24
 8010338:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801033c:	460b      	mov	r3, r1
 801033e:	4313      	orrs	r3, r2
 8010340:	d011      	beq.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010346:	3308      	adds	r3, #8
 8010348:	2101      	movs	r1, #1
 801034a:	4618      	mov	r0, r3
 801034c:	f001 fa2a 	bl	80117a4 <RCCEx_PLL2_Config>
 8010350:	4603      	mov	r3, r0
 8010352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801035a:	2b00      	cmp	r3, #0
 801035c:	d003      	beq.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801035e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801036a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036e:	2100      	movs	r1, #0
 8010370:	61b9      	str	r1, [r7, #24]
 8010372:	f003 0304 	and.w	r3, r3, #4
 8010376:	61fb      	str	r3, [r7, #28]
 8010378:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801037c:	460b      	mov	r3, r1
 801037e:	4313      	orrs	r3, r2
 8010380:	d011      	beq.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010386:	3308      	adds	r3, #8
 8010388:	2102      	movs	r1, #2
 801038a:	4618      	mov	r0, r3
 801038c:	f001 fa0a 	bl	80117a4 <RCCEx_PLL2_Config>
 8010390:	4603      	mov	r3, r0
 8010392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801039e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80103a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	2100      	movs	r1, #0
 80103b0:	6139      	str	r1, [r7, #16]
 80103b2:	f003 0308 	and.w	r3, r3, #8
 80103b6:	617b      	str	r3, [r7, #20]
 80103b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80103bc:	460b      	mov	r3, r1
 80103be:	4313      	orrs	r3, r2
 80103c0:	d011      	beq.n	80103e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80103c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103c6:	3328      	adds	r3, #40	; 0x28
 80103c8:	2100      	movs	r1, #0
 80103ca:	4618      	mov	r0, r3
 80103cc:	f001 fa9c 	bl	8011908 <RCCEx_PLL3_Config>
 80103d0:	4603      	mov	r3, r0
 80103d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80103d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d003      	beq.n	80103e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80103e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ee:	2100      	movs	r1, #0
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	f003 0310 	and.w	r3, r3, #16
 80103f6:	60fb      	str	r3, [r7, #12]
 80103f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80103fc:	460b      	mov	r3, r1
 80103fe:	4313      	orrs	r3, r2
 8010400:	d011      	beq.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010406:	3328      	adds	r3, #40	; 0x28
 8010408:	2101      	movs	r1, #1
 801040a:	4618      	mov	r0, r3
 801040c:	f001 fa7c 	bl	8011908 <RCCEx_PLL3_Config>
 8010410:	4603      	mov	r3, r0
 8010412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801041a:	2b00      	cmp	r3, #0
 801041c:	d003      	beq.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801041e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010422:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8010426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042e:	2100      	movs	r1, #0
 8010430:	6039      	str	r1, [r7, #0]
 8010432:	f003 0320 	and.w	r3, r3, #32
 8010436:	607b      	str	r3, [r7, #4]
 8010438:	e9d7 1200 	ldrd	r1, r2, [r7]
 801043c:	460b      	mov	r3, r1
 801043e:	4313      	orrs	r3, r2
 8010440:	d011      	beq.n	8010466 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010446:	3328      	adds	r3, #40	; 0x28
 8010448:	2102      	movs	r1, #2
 801044a:	4618      	mov	r0, r3
 801044c:	f001 fa5c 	bl	8011908 <RCCEx_PLL3_Config>
 8010450:	4603      	mov	r3, r0
 8010452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801045a:	2b00      	cmp	r3, #0
 801045c:	d003      	beq.n	8010466 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801045e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8010466:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 801046a:	2b00      	cmp	r3, #0
 801046c:	d101      	bne.n	8010472 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801046e:	2300      	movs	r3, #0
 8010470:	e000      	b.n	8010474 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8010472:	2301      	movs	r3, #1
}
 8010474:	4618      	mov	r0, r3
 8010476:	f507 7794 	add.w	r7, r7, #296	; 0x128
 801047a:	46bd      	mov	sp, r7
 801047c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010480:	58024400 	.word	0x58024400

08010484 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b090      	sub	sp, #64	; 0x40
 8010488:	af00      	add	r7, sp, #0
 801048a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801048e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010492:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8010496:	430b      	orrs	r3, r1
 8010498:	f040 8094 	bne.w	80105c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801049c:	4b9e      	ldr	r3, [pc, #632]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801049e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104a0:	f003 0307 	and.w	r3, r3, #7
 80104a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80104a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a8:	2b04      	cmp	r3, #4
 80104aa:	f200 8087 	bhi.w	80105bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80104ae:	a201      	add	r2, pc, #4	; (adr r2, 80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80104b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b4:	080104c9 	.word	0x080104c9
 80104b8:	080104f1 	.word	0x080104f1
 80104bc:	08010519 	.word	0x08010519
 80104c0:	080105b5 	.word	0x080105b5
 80104c4:	08010541 	.word	0x08010541
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80104c8:	4b93      	ldr	r3, [pc, #588]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104d4:	d108      	bne.n	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80104d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104da:	4618      	mov	r0, r3
 80104dc:	f001 f810 	bl	8011500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104e4:	f000 bd45 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104e8:	2300      	movs	r3, #0
 80104ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ec:	f000 bd41 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104f0:	4b89      	ldr	r3, [pc, #548]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104fc:	d108      	bne.n	8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104fe:	f107 0318 	add.w	r3, r7, #24
 8010502:	4618      	mov	r0, r3
 8010504:	f000 fd54 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801050c:	f000 bd31 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010510:	2300      	movs	r3, #0
 8010512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010514:	f000 bd2d 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010518:	4b7f      	ldr	r3, [pc, #508]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010524:	d108      	bne.n	8010538 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010526:	f107 030c 	add.w	r3, r7, #12
 801052a:	4618      	mov	r0, r3
 801052c:	f000 fe94 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010534:	f000 bd1d 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801053c:	f000 bd19 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010540:	4b75      	ldr	r3, [pc, #468]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010548:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801054a:	4b73      	ldr	r3, [pc, #460]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f003 0304 	and.w	r3, r3, #4
 8010552:	2b04      	cmp	r3, #4
 8010554:	d10c      	bne.n	8010570 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010558:	2b00      	cmp	r3, #0
 801055a:	d109      	bne.n	8010570 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801055c:	4b6e      	ldr	r3, [pc, #440]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	08db      	lsrs	r3, r3, #3
 8010562:	f003 0303 	and.w	r3, r3, #3
 8010566:	4a6d      	ldr	r2, [pc, #436]	; (801071c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010568:	fa22 f303 	lsr.w	r3, r2, r3
 801056c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801056e:	e01f      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010570:	4b69      	ldr	r3, [pc, #420]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801057c:	d106      	bne.n	801058c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801057e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010584:	d102      	bne.n	801058c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010586:	4b66      	ldr	r3, [pc, #408]	; (8010720 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010588:	63fb      	str	r3, [r7, #60]	; 0x3c
 801058a:	e011      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801058c:	4b62      	ldr	r3, [pc, #392]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010598:	d106      	bne.n	80105a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801059a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105a0:	d102      	bne.n	80105a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80105a2:	4b60      	ldr	r3, [pc, #384]	; (8010724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80105a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105a6:	e003      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80105a8:	2300      	movs	r3, #0
 80105aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80105ac:	f000 bce1 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80105b0:	f000 bcdf 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80105b4:	4b5c      	ldr	r3, [pc, #368]	; (8010728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80105b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105b8:	f000 bcdb 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80105bc:	2300      	movs	r3, #0
 80105be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105c0:	f000 bcd7 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80105c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105c8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80105cc:	430b      	orrs	r3, r1
 80105ce:	f040 80ad 	bne.w	801072c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80105d2:	4b51      	ldr	r3, [pc, #324]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80105da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105e2:	d056      	beq.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80105e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105ea:	f200 8090 	bhi.w	801070e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80105ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f0:	2bc0      	cmp	r3, #192	; 0xc0
 80105f2:	f000 8088 	beq.w	8010706 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	2bc0      	cmp	r3, #192	; 0xc0
 80105fa:	f200 8088 	bhi.w	801070e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	2b80      	cmp	r3, #128	; 0x80
 8010602:	d032      	beq.n	801066a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010606:	2b80      	cmp	r3, #128	; 0x80
 8010608:	f200 8081 	bhi.w	801070e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060e:	2b00      	cmp	r3, #0
 8010610:	d003      	beq.n	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	2b40      	cmp	r3, #64	; 0x40
 8010616:	d014      	beq.n	8010642 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010618:	e079      	b.n	801070e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801061a:	4b3f      	ldr	r3, [pc, #252]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010626:	d108      	bne.n	801063a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801062c:	4618      	mov	r0, r3
 801062e:	f000 ff67 	bl	8011500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010636:	f000 bc9c 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801063e:	f000 bc98 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010642:	4b35      	ldr	r3, [pc, #212]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801064a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801064e:	d108      	bne.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010650:	f107 0318 	add.w	r3, r7, #24
 8010654:	4618      	mov	r0, r3
 8010656:	f000 fcab 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801065e:	f000 bc88 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010662:	2300      	movs	r3, #0
 8010664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010666:	f000 bc84 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801066a:	4b2b      	ldr	r3, [pc, #172]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010676:	d108      	bne.n	801068a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010678:	f107 030c 	add.w	r3, r7, #12
 801067c:	4618      	mov	r0, r3
 801067e:	f000 fdeb 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010686:	f000 bc74 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801068e:	f000 bc70 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010692:	4b21      	ldr	r3, [pc, #132]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801069a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801069c:	4b1e      	ldr	r3, [pc, #120]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f003 0304 	and.w	r3, r3, #4
 80106a4:	2b04      	cmp	r3, #4
 80106a6:	d10c      	bne.n	80106c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d109      	bne.n	80106c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80106ae:	4b1a      	ldr	r3, [pc, #104]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	08db      	lsrs	r3, r3, #3
 80106b4:	f003 0303 	and.w	r3, r3, #3
 80106b8:	4a18      	ldr	r2, [pc, #96]	; (801071c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80106ba:	fa22 f303 	lsr.w	r3, r2, r3
 80106be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106c0:	e01f      	b.n	8010702 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80106c2:	4b15      	ldr	r3, [pc, #84]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106ce:	d106      	bne.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80106d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106d6:	d102      	bne.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80106d8:	4b11      	ldr	r3, [pc, #68]	; (8010720 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80106da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106dc:	e011      	b.n	8010702 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80106de:	4b0e      	ldr	r3, [pc, #56]	; (8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106ea:	d106      	bne.n	80106fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80106ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106f2:	d102      	bne.n	80106fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80106f4:	4b0b      	ldr	r3, [pc, #44]	; (8010724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80106f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106f8:	e003      	b.n	8010702 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80106fa:	2300      	movs	r3, #0
 80106fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80106fe:	f000 bc38 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010702:	f000 bc36 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010706:	4b08      	ldr	r3, [pc, #32]	; (8010728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801070a:	f000 bc32 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010712:	f000 bc2e 	b.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010716:	bf00      	nop
 8010718:	58024400 	.word	0x58024400
 801071c:	03d09000 	.word	0x03d09000
 8010720:	003d0900 	.word	0x003d0900
 8010724:	017d7840 	.word	0x017d7840
 8010728:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801072c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010730:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010734:	430b      	orrs	r3, r1
 8010736:	f040 809c 	bne.w	8010872 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801073a:	4b9e      	ldr	r3, [pc, #632]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801073e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8010742:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010746:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801074a:	d054      	beq.n	80107f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010752:	f200 808b 	bhi.w	801086c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010758:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801075c:	f000 8083 	beq.w	8010866 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010762:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010766:	f200 8081 	bhi.w	801086c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801076a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010770:	d02f      	beq.n	80107d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010778:	d878      	bhi.n	801086c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	2b00      	cmp	r3, #0
 801077e:	d004      	beq.n	801078a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010786:	d012      	beq.n	80107ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010788:	e070      	b.n	801086c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801078a:	4b8a      	ldr	r3, [pc, #552]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010796:	d107      	bne.n	80107a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801079c:	4618      	mov	r0, r3
 801079e:	f000 feaf 	bl	8011500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80107a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107a6:	e3e4      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107ac:	e3e1      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107ae:	4b81      	ldr	r3, [pc, #516]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107ba:	d107      	bne.n	80107cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107bc:	f107 0318 	add.w	r3, r7, #24
 80107c0:	4618      	mov	r0, r3
 80107c2:	f000 fbf5 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80107c6:	69bb      	ldr	r3, [r7, #24]
 80107c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107ca:	e3d2      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107cc:	2300      	movs	r3, #0
 80107ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107d0:	e3cf      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80107d2:	4b78      	ldr	r3, [pc, #480]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107de:	d107      	bne.n	80107f0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107e0:	f107 030c 	add.w	r3, r7, #12
 80107e4:	4618      	mov	r0, r3
 80107e6:	f000 fd37 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107ee:	e3c0      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107f0:	2300      	movs	r3, #0
 80107f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107f4:	e3bd      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80107f6:	4b6f      	ldr	r3, [pc, #444]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80107fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010800:	4b6c      	ldr	r3, [pc, #432]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f003 0304 	and.w	r3, r3, #4
 8010808:	2b04      	cmp	r3, #4
 801080a:	d10c      	bne.n	8010826 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080e:	2b00      	cmp	r3, #0
 8010810:	d109      	bne.n	8010826 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010812:	4b68      	ldr	r3, [pc, #416]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	08db      	lsrs	r3, r3, #3
 8010818:	f003 0303 	and.w	r3, r3, #3
 801081c:	4a66      	ldr	r2, [pc, #408]	; (80109b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801081e:	fa22 f303 	lsr.w	r3, r2, r3
 8010822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010824:	e01e      	b.n	8010864 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010826:	4b63      	ldr	r3, [pc, #396]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801082e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010832:	d106      	bne.n	8010842 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801083a:	d102      	bne.n	8010842 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801083c:	4b5f      	ldr	r3, [pc, #380]	; (80109bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801083e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010840:	e010      	b.n	8010864 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010842:	4b5c      	ldr	r3, [pc, #368]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801084a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801084e:	d106      	bne.n	801085e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010856:	d102      	bne.n	801085e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010858:	4b59      	ldr	r3, [pc, #356]	; (80109c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801085a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801085c:	e002      	b.n	8010864 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010862:	e386      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010864:	e385      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010866:	4b57      	ldr	r3, [pc, #348]	; (80109c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801086a:	e382      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801086c:	2300      	movs	r3, #0
 801086e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010870:	e37f      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010876:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801087a:	430b      	orrs	r3, r1
 801087c:	f040 80a7 	bne.w	80109ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010880:	4b4c      	ldr	r3, [pc, #304]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010884:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010888:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010890:	d055      	beq.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010898:	f200 8096 	bhi.w	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801089c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80108a2:	f000 8084 	beq.w	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80108a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80108ac:	f200 808c 	bhi.w	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80108b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108b6:	d030      	beq.n	801091a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80108b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108be:	f200 8083 	bhi.w	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d004      	beq.n	80108d2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80108ce:	d012      	beq.n	80108f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80108d0:	e07a      	b.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80108d2:	4b38      	ldr	r3, [pc, #224]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108de:	d107      	bne.n	80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80108e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108e4:	4618      	mov	r0, r3
 80108e6:	f000 fe0b 	bl	8011500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80108ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108ee:	e340      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108f0:	2300      	movs	r3, #0
 80108f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108f4:	e33d      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108f6:	4b2f      	ldr	r3, [pc, #188]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010902:	d107      	bne.n	8010914 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010904:	f107 0318 	add.w	r3, r7, #24
 8010908:	4618      	mov	r0, r3
 801090a:	f000 fb51 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010912:	e32e      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010914:	2300      	movs	r3, #0
 8010916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010918:	e32b      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801091a:	4b26      	ldr	r3, [pc, #152]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010926:	d107      	bne.n	8010938 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010928:	f107 030c 	add.w	r3, r7, #12
 801092c:	4618      	mov	r0, r3
 801092e:	f000 fc93 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010936:	e31c      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010938:	2300      	movs	r3, #0
 801093a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801093c:	e319      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801093e:	4b1d      	ldr	r3, [pc, #116]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010946:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010948:	4b1a      	ldr	r3, [pc, #104]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f003 0304 	and.w	r3, r3, #4
 8010950:	2b04      	cmp	r3, #4
 8010952:	d10c      	bne.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010956:	2b00      	cmp	r3, #0
 8010958:	d109      	bne.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801095a:	4b16      	ldr	r3, [pc, #88]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	08db      	lsrs	r3, r3, #3
 8010960:	f003 0303 	and.w	r3, r3, #3
 8010964:	4a14      	ldr	r2, [pc, #80]	; (80109b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010966:	fa22 f303 	lsr.w	r3, r2, r3
 801096a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801096c:	e01e      	b.n	80109ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801096e:	4b11      	ldr	r3, [pc, #68]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801097a:	d106      	bne.n	801098a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801097c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010982:	d102      	bne.n	801098a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010984:	4b0d      	ldr	r3, [pc, #52]	; (80109bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010988:	e010      	b.n	80109ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801098a:	4b0a      	ldr	r3, [pc, #40]	; (80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010992:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010996:	d106      	bne.n	80109a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801099e:	d102      	bne.n	80109a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80109a0:	4b07      	ldr	r3, [pc, #28]	; (80109c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80109a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109a4:	e002      	b.n	80109ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80109a6:	2300      	movs	r3, #0
 80109a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80109aa:	e2e2      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80109ac:	e2e1      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80109ae:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80109b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109b2:	e2de      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80109b4:	58024400 	.word	0x58024400
 80109b8:	03d09000 	.word	0x03d09000
 80109bc:	003d0900 	.word	0x003d0900
 80109c0:	017d7840 	.word	0x017d7840
 80109c4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109cc:	e2d1      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80109ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109d2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80109d6:	430b      	orrs	r3, r1
 80109d8:	f040 809c 	bne.w	8010b14 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80109dc:	4b93      	ldr	r3, [pc, #588]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80109e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80109e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80109ec:	d054      	beq.n	8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80109ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80109f4:	f200 808b 	bhi.w	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80109fe:	f000 8083 	beq.w	8010b08 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a08:	f200 8081 	bhi.w	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a12:	d02f      	beq.n	8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a1a:	d878      	bhi.n	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d004      	beq.n	8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8010a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a28:	d012      	beq.n	8010a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010a2a:	e070      	b.n	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a2c:	4b7f      	ldr	r3, [pc, #508]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a38:	d107      	bne.n	8010a4a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 fd5e 	bl	8011500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a48:	e293      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a4e:	e290      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a50:	4b76      	ldr	r3, [pc, #472]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a5c:	d107      	bne.n	8010a6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a5e:	f107 0318 	add.w	r3, r7, #24
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 faa4 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010a68:	69bb      	ldr	r3, [r7, #24]
 8010a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a6c:	e281      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a72:	e27e      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a74:	4b6d      	ldr	r3, [pc, #436]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a80:	d107      	bne.n	8010a92 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a82:	f107 030c 	add.w	r3, r7, #12
 8010a86:	4618      	mov	r0, r3
 8010a88:	f000 fbe6 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a90:	e26f      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a92:	2300      	movs	r3, #0
 8010a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a96:	e26c      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010a98:	4b64      	ldr	r3, [pc, #400]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010aa0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010aa2:	4b62      	ldr	r3, [pc, #392]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f003 0304 	and.w	r3, r3, #4
 8010aaa:	2b04      	cmp	r3, #4
 8010aac:	d10c      	bne.n	8010ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d109      	bne.n	8010ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ab4:	4b5d      	ldr	r3, [pc, #372]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	08db      	lsrs	r3, r3, #3
 8010aba:	f003 0303 	and.w	r3, r3, #3
 8010abe:	4a5c      	ldr	r2, [pc, #368]	; (8010c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8010ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ac6:	e01e      	b.n	8010b06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010ac8:	4b58      	ldr	r3, [pc, #352]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ad4:	d106      	bne.n	8010ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010adc:	d102      	bne.n	8010ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010ade:	4b55      	ldr	r3, [pc, #340]	; (8010c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ae2:	e010      	b.n	8010b06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010ae4:	4b51      	ldr	r3, [pc, #324]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010af0:	d106      	bne.n	8010b00 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010af8:	d102      	bne.n	8010b00 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010afa:	4b4f      	ldr	r3, [pc, #316]	; (8010c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010afe:	e002      	b.n	8010b06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b00:	2300      	movs	r3, #0
 8010b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010b04:	e235      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010b06:	e234      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010b08:	4b4c      	ldr	r3, [pc, #304]	; (8010c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b0c:	e231      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b12:	e22e      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b18:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010b1c:	430b      	orrs	r3, r1
 8010b1e:	f040 808f 	bne.w	8010c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010b22:	4b42      	ldr	r3, [pc, #264]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b26:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010b2a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010b32:	d06b      	beq.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010b3a:	d874      	bhi.n	8010c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010b42:	d056      	beq.n	8010bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010b4a:	d86c      	bhi.n	8010c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010b52:	d03b      	beq.n	8010bcc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010b5a:	d864      	bhi.n	8010c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b62:	d021      	beq.n	8010ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b6a:	d85c      	bhi.n	8010c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d004      	beq.n	8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b78:	d004      	beq.n	8010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010b7a:	e054      	b.n	8010c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010b7c:	f7fe fa0a 	bl	800ef94 <HAL_RCC_GetPCLK1Freq>
 8010b80:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b82:	e1f6      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b84:	4b29      	ldr	r3, [pc, #164]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b90:	d107      	bne.n	8010ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b92:	f107 0318 	add.w	r3, r7, #24
 8010b96:	4618      	mov	r0, r3
 8010b98:	f000 fa0a 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ba0:	e1e7      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ba6:	e1e4      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ba8:	4b20      	ldr	r3, [pc, #128]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010bb4:	d107      	bne.n	8010bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bb6:	f107 030c 	add.w	r3, r7, #12
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 fb4c 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bc4:	e1d5      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bca:	e1d2      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010bcc:	4b17      	ldr	r3, [pc, #92]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f003 0304 	and.w	r3, r3, #4
 8010bd4:	2b04      	cmp	r3, #4
 8010bd6:	d109      	bne.n	8010bec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010bd8:	4b14      	ldr	r3, [pc, #80]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	08db      	lsrs	r3, r3, #3
 8010bde:	f003 0303 	and.w	r3, r3, #3
 8010be2:	4a13      	ldr	r2, [pc, #76]	; (8010c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010be4:	fa22 f303 	lsr.w	r3, r2, r3
 8010be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bea:	e1c2      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bec:	2300      	movs	r3, #0
 8010bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bf0:	e1bf      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010bf2:	4b0e      	ldr	r3, [pc, #56]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bfe:	d102      	bne.n	8010c06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010c00:	4b0c      	ldr	r3, [pc, #48]	; (8010c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c04:	e1b5      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c0a:	e1b2      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010c0c:	4b07      	ldr	r3, [pc, #28]	; (8010c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c18:	d102      	bne.n	8010c20 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010c1a:	4b07      	ldr	r3, [pc, #28]	; (8010c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c1e:	e1a8      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c24:	e1a5      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010c26:	2300      	movs	r3, #0
 8010c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c2a:	e1a2      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010c2c:	58024400 	.word	0x58024400
 8010c30:	03d09000 	.word	0x03d09000
 8010c34:	003d0900 	.word	0x003d0900
 8010c38:	017d7840 	.word	0x017d7840
 8010c3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c44:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010c48:	430b      	orrs	r3, r1
 8010c4a:	d173      	bne.n	8010d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010c4c:	4b9c      	ldr	r3, [pc, #624]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010c54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c5c:	d02f      	beq.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c64:	d863      	bhi.n	8010d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d004      	beq.n	8010c76 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c72:	d012      	beq.n	8010c9a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010c74:	e05b      	b.n	8010d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c76:	4b92      	ldr	r3, [pc, #584]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c82:	d107      	bne.n	8010c94 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c84:	f107 0318 	add.w	r3, r7, #24
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f000 f991 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010c8e:	69bb      	ldr	r3, [r7, #24]
 8010c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c92:	e16e      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c94:	2300      	movs	r3, #0
 8010c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c98:	e16b      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c9a:	4b89      	ldr	r3, [pc, #548]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ca6:	d107      	bne.n	8010cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ca8:	f107 030c 	add.w	r3, r7, #12
 8010cac:	4618      	mov	r0, r3
 8010cae:	f000 fad3 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cb6:	e15c      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cbc:	e159      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010cbe:	4b80      	ldr	r3, [pc, #512]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010cc6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010cc8:	4b7d      	ldr	r3, [pc, #500]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f003 0304 	and.w	r3, r3, #4
 8010cd0:	2b04      	cmp	r3, #4
 8010cd2:	d10c      	bne.n	8010cee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d109      	bne.n	8010cee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010cda:	4b79      	ldr	r3, [pc, #484]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	08db      	lsrs	r3, r3, #3
 8010ce0:	f003 0303 	and.w	r3, r3, #3
 8010ce4:	4a77      	ldr	r2, [pc, #476]	; (8010ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cec:	e01e      	b.n	8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010cee:	4b74      	ldr	r3, [pc, #464]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cfa:	d106      	bne.n	8010d0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d02:	d102      	bne.n	8010d0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010d04:	4b70      	ldr	r3, [pc, #448]	; (8010ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d08:	e010      	b.n	8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010d0a:	4b6d      	ldr	r3, [pc, #436]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010d16:	d106      	bne.n	8010d26 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d1e:	d102      	bne.n	8010d26 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010d20:	4b6a      	ldr	r3, [pc, #424]	; (8010ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d24:	e002      	b.n	8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010d2a:	e122      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010d2c:	e121      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d32:	e11e      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d38:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010d3c:	430b      	orrs	r3, r1
 8010d3e:	d133      	bne.n	8010da8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010d40:	4b5f      	ldr	r3, [pc, #380]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d004      	beq.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d56:	d012      	beq.n	8010d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010d58:	e023      	b.n	8010da2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d5a:	4b59      	ldr	r3, [pc, #356]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010d66:	d107      	bne.n	8010d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f000 fbc7 	bl	8011500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d76:	e0fc      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d7c:	e0f9      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d7e:	4b50      	ldr	r3, [pc, #320]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010d8a:	d107      	bne.n	8010d9c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d8c:	f107 0318 	add.w	r3, r7, #24
 8010d90:	4618      	mov	r0, r3
 8010d92:	f000 f90d 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d9a:	e0ea      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010da0:	e0e7      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010da2:	2300      	movs	r3, #0
 8010da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010da6:	e0e4      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dac:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010db0:	430b      	orrs	r3, r1
 8010db2:	f040 808d 	bne.w	8010ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010db6:	4b42      	ldr	r3, [pc, #264]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010dbe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010dc6:	d06b      	beq.n	8010ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010dce:	d874      	bhi.n	8010eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dd6:	d056      	beq.n	8010e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dde:	d86c      	bhi.n	8010eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010de6:	d03b      	beq.n	8010e60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010dee:	d864      	bhi.n	8010eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010df6:	d021      	beq.n	8010e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dfe:	d85c      	bhi.n	8010eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d004      	beq.n	8010e10 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e0c:	d004      	beq.n	8010e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010e0e:	e054      	b.n	8010eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010e10:	f000 f8b8 	bl	8010f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8010e14:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010e16:	e0ac      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010e18:	4b29      	ldr	r3, [pc, #164]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010e24:	d107      	bne.n	8010e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e26:	f107 0318 	add.w	r3, r7, #24
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f000 f8c0 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e34:	e09d      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e36:	2300      	movs	r3, #0
 8010e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e3a:	e09a      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010e3c:	4b20      	ldr	r3, [pc, #128]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e48:	d107      	bne.n	8010e5a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e4a:	f107 030c 	add.w	r3, r7, #12
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f000 fa02 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e58:	e08b      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e5e:	e088      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010e60:	4b17      	ldr	r3, [pc, #92]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f003 0304 	and.w	r3, r3, #4
 8010e68:	2b04      	cmp	r3, #4
 8010e6a:	d109      	bne.n	8010e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e6c:	4b14      	ldr	r3, [pc, #80]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	08db      	lsrs	r3, r3, #3
 8010e72:	f003 0303 	and.w	r3, r3, #3
 8010e76:	4a13      	ldr	r2, [pc, #76]	; (8010ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010e78:	fa22 f303 	lsr.w	r3, r2, r3
 8010e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e7e:	e078      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e80:	2300      	movs	r3, #0
 8010e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e84:	e075      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010e86:	4b0e      	ldr	r3, [pc, #56]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e92:	d102      	bne.n	8010e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010e94:	4b0c      	ldr	r3, [pc, #48]	; (8010ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e98:	e06b      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e9e:	e068      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010ea0:	4b07      	ldr	r3, [pc, #28]	; (8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010eac:	d102      	bne.n	8010eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010eae:	4b07      	ldr	r3, [pc, #28]	; (8010ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010eb2:	e05e      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eb8:	e05b      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ebe:	e058      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010ec0:	58024400 	.word	0x58024400
 8010ec4:	03d09000 	.word	0x03d09000
 8010ec8:	003d0900 	.word	0x003d0900
 8010ecc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ed4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010ed8:	430b      	orrs	r3, r1
 8010eda:	d148      	bne.n	8010f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010edc:	4b27      	ldr	r3, [pc, #156]	; (8010f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010ee4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010eec:	d02a      	beq.n	8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ef4:	d838      	bhi.n	8010f68 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d004      	beq.n	8010f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010f02:	d00d      	beq.n	8010f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010f04:	e030      	b.n	8010f68 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010f06:	4b1d      	ldr	r3, [pc, #116]	; (8010f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f12:	d102      	bne.n	8010f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010f14:	4b1a      	ldr	r3, [pc, #104]	; (8010f80 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f18:	e02b      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f1e:	e028      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010f20:	4b16      	ldr	r3, [pc, #88]	; (8010f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010f2c:	d107      	bne.n	8010f3e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f32:	4618      	mov	r0, r3
 8010f34:	f000 fae4 	bl	8011500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f3c:	e019      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f42:	e016      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010f44:	4b0d      	ldr	r3, [pc, #52]	; (8010f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f50:	d107      	bne.n	8010f62 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f52:	f107 0318 	add.w	r3, r7, #24
 8010f56:	4618      	mov	r0, r3
 8010f58:	f000 f82a 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f60:	e007      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f62:	2300      	movs	r3, #0
 8010f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f66:	e004      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f6c:	e001      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3740      	adds	r7, #64	; 0x40
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	58024400 	.word	0x58024400
 8010f80:	017d7840 	.word	0x017d7840

08010f84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010f88:	f7fd ffd4 	bl	800ef34 <HAL_RCC_GetHCLKFreq>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	4b06      	ldr	r3, [pc, #24]	; (8010fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010f90:	6a1b      	ldr	r3, [r3, #32]
 8010f92:	091b      	lsrs	r3, r3, #4
 8010f94:	f003 0307 	and.w	r3, r3, #7
 8010f98:	4904      	ldr	r1, [pc, #16]	; (8010fac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010f9a:	5ccb      	ldrb	r3, [r1, r3]
 8010f9c:	f003 031f 	and.w	r3, r3, #31
 8010fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	58024400 	.word	0x58024400
 8010fac:	0801b594 	.word	0x0801b594

08010fb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b089      	sub	sp, #36	; 0x24
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010fb8:	4ba1      	ldr	r3, [pc, #644]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fbc:	f003 0303 	and.w	r3, r3, #3
 8010fc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010fc2:	4b9f      	ldr	r3, [pc, #636]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fc6:	0b1b      	lsrs	r3, r3, #12
 8010fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010fcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010fce:	4b9c      	ldr	r3, [pc, #624]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd2:	091b      	lsrs	r3, r3, #4
 8010fd4:	f003 0301 	and.w	r3, r3, #1
 8010fd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010fda:	4b99      	ldr	r3, [pc, #612]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fde:	08db      	lsrs	r3, r3, #3
 8010fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fe4:	693a      	ldr	r2, [r7, #16]
 8010fe6:	fb02 f303 	mul.w	r3, r2, r3
 8010fea:	ee07 3a90 	vmov	s15, r3
 8010fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f000 8111 	beq.w	8011220 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	2b02      	cmp	r3, #2
 8011002:	f000 8083 	beq.w	801110c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	2b02      	cmp	r3, #2
 801100a:	f200 80a1 	bhi.w	8011150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801100e:	69bb      	ldr	r3, [r7, #24]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d003      	beq.n	801101c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d056      	beq.n	80110c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801101a:	e099      	b.n	8011150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801101c:	4b88      	ldr	r3, [pc, #544]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f003 0320 	and.w	r3, r3, #32
 8011024:	2b00      	cmp	r3, #0
 8011026:	d02d      	beq.n	8011084 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011028:	4b85      	ldr	r3, [pc, #532]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	08db      	lsrs	r3, r3, #3
 801102e:	f003 0303 	and.w	r3, r3, #3
 8011032:	4a84      	ldr	r2, [pc, #528]	; (8011244 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8011034:	fa22 f303 	lsr.w	r3, r2, r3
 8011038:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	ee07 3a90 	vmov	s15, r3
 8011040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	ee07 3a90 	vmov	s15, r3
 801104a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801104e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011052:	4b7b      	ldr	r3, [pc, #492]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801105a:	ee07 3a90 	vmov	s15, r3
 801105e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011062:	ed97 6a03 	vldr	s12, [r7, #12]
 8011066:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801106a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801106e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801107a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801107e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011082:	e087      	b.n	8011194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	ee07 3a90 	vmov	s15, r3
 801108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801108e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801124c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011096:	4b6a      	ldr	r3, [pc, #424]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801109a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801109e:	ee07 3a90 	vmov	s15, r3
 80110a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80110aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80110ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110c6:	e065      	b.n	8011194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	ee07 3a90 	vmov	s15, r3
 80110ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80110d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110da:	4b59      	ldr	r3, [pc, #356]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110e2:	ee07 3a90 	vmov	s15, r3
 80110e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80110ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80110f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801110a:	e043      	b.n	8011194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	ee07 3a90 	vmov	s15, r3
 8011112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011116:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801111a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801111e:	4b48      	ldr	r3, [pc, #288]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011126:	ee07 3a90 	vmov	s15, r3
 801112a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801112e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011132:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801113a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801113e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011146:	ee67 7a27 	vmul.f32	s15, s14, s15
 801114a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801114e:	e021      	b.n	8011194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	ee07 3a90 	vmov	s15, r3
 8011156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801115a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801115e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011162:	4b37      	ldr	r3, [pc, #220]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801116a:	ee07 3a90 	vmov	s15, r3
 801116e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011172:	ed97 6a03 	vldr	s12, [r7, #12]
 8011176:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801117a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801117e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801118e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011192:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011194:	4b2a      	ldr	r3, [pc, #168]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011198:	0a5b      	lsrs	r3, r3, #9
 801119a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801119e:	ee07 3a90 	vmov	s15, r3
 80111a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80111b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111ba:	ee17 2a90 	vmov	r2, s15
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80111c2:	4b1f      	ldr	r3, [pc, #124]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80111c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111c6:	0c1b      	lsrs	r3, r3, #16
 80111c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111cc:	ee07 3a90 	vmov	s15, r3
 80111d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80111e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111e8:	ee17 2a90 	vmov	r2, s15
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80111f0:	4b13      	ldr	r3, [pc, #76]	; (8011240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80111f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111f4:	0e1b      	lsrs	r3, r3, #24
 80111f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111fa:	ee07 3a90 	vmov	s15, r3
 80111fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011206:	ee37 7a87 	vadd.f32	s14, s15, s14
 801120a:	edd7 6a07 	vldr	s13, [r7, #28]
 801120e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011216:	ee17 2a90 	vmov	r2, s15
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801121e:	e008      	b.n	8011232 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2200      	movs	r2, #0
 801122a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2200      	movs	r2, #0
 8011230:	609a      	str	r2, [r3, #8]
}
 8011232:	bf00      	nop
 8011234:	3724      	adds	r7, #36	; 0x24
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr
 801123e:	bf00      	nop
 8011240:	58024400 	.word	0x58024400
 8011244:	03d09000 	.word	0x03d09000
 8011248:	46000000 	.word	0x46000000
 801124c:	4c742400 	.word	0x4c742400
 8011250:	4a742400 	.word	0x4a742400
 8011254:	4bbebc20 	.word	0x4bbebc20

08011258 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8011258:	b480      	push	{r7}
 801125a:	b089      	sub	sp, #36	; 0x24
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011260:	4ba1      	ldr	r3, [pc, #644]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011264:	f003 0303 	and.w	r3, r3, #3
 8011268:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801126a:	4b9f      	ldr	r3, [pc, #636]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801126e:	0d1b      	lsrs	r3, r3, #20
 8011270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011274:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8011276:	4b9c      	ldr	r3, [pc, #624]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127a:	0a1b      	lsrs	r3, r3, #8
 801127c:	f003 0301 	and.w	r3, r3, #1
 8011280:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8011282:	4b99      	ldr	r3, [pc, #612]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011286:	08db      	lsrs	r3, r3, #3
 8011288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801128c:	693a      	ldr	r2, [r7, #16]
 801128e:	fb02 f303 	mul.w	r3, r2, r3
 8011292:	ee07 3a90 	vmov	s15, r3
 8011296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801129a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f000 8111 	beq.w	80114c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	f000 8083 	beq.w	80113b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	f200 80a1 	bhi.w	80113f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d003      	beq.n	80112c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d056      	beq.n	8011370 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80112c2:	e099      	b.n	80113f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112c4:	4b88      	ldr	r3, [pc, #544]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f003 0320 	and.w	r3, r3, #32
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d02d      	beq.n	801132c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80112d0:	4b85      	ldr	r3, [pc, #532]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	08db      	lsrs	r3, r3, #3
 80112d6:	f003 0303 	and.w	r3, r3, #3
 80112da:	4a84      	ldr	r2, [pc, #528]	; (80114ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80112dc:	fa22 f303 	lsr.w	r3, r2, r3
 80112e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	ee07 3a90 	vmov	s15, r3
 80112e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	ee07 3a90 	vmov	s15, r3
 80112f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112fa:	4b7b      	ldr	r3, [pc, #492]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011302:	ee07 3a90 	vmov	s15, r3
 8011306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801130a:	ed97 6a03 	vldr	s12, [r7, #12]
 801130e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801131a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801131e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801132a:	e087      	b.n	801143c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801132c:	697b      	ldr	r3, [r7, #20]
 801132e:	ee07 3a90 	vmov	s15, r3
 8011332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011336:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80114f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801133a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801133e:	4b6a      	ldr	r3, [pc, #424]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011346:	ee07 3a90 	vmov	s15, r3
 801134a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801134e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011352:	eddf 5a67 	vldr	s11, [pc, #412]	; 80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801135a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801135e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011366:	ee67 7a27 	vmul.f32	s15, s14, s15
 801136a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801136e:	e065      	b.n	801143c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	ee07 3a90 	vmov	s15, r3
 8011376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801137a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80114f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801137e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011382:	4b59      	ldr	r3, [pc, #356]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801138a:	ee07 3a90 	vmov	s15, r3
 801138e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011392:	ed97 6a03 	vldr	s12, [r7, #12]
 8011396:	eddf 5a56 	vldr	s11, [pc, #344]	; 80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801139a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801139e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80113b2:	e043      	b.n	801143c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	ee07 3a90 	vmov	s15, r3
 80113ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80114fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80113c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113c6:	4b48      	ldr	r3, [pc, #288]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113ce:	ee07 3a90 	vmov	s15, r3
 80113d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80113da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80113de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80113f6:	e021      	b.n	801143c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	ee07 3a90 	vmov	s15, r3
 80113fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011402:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80114f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801140a:	4b37      	ldr	r3, [pc, #220]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801140e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011412:	ee07 3a90 	vmov	s15, r3
 8011416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801141a:	ed97 6a03 	vldr	s12, [r7, #12]
 801141e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801142a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801142e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801143a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801143c:	4b2a      	ldr	r3, [pc, #168]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011440:	0a5b      	lsrs	r3, r3, #9
 8011442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011446:	ee07 3a90 	vmov	s15, r3
 801144a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011456:	edd7 6a07 	vldr	s13, [r7, #28]
 801145a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011462:	ee17 2a90 	vmov	r2, s15
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801146a:	4b1f      	ldr	r3, [pc, #124]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801146e:	0c1b      	lsrs	r3, r3, #16
 8011470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011474:	ee07 3a90 	vmov	s15, r3
 8011478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801147c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011484:	edd7 6a07 	vldr	s13, [r7, #28]
 8011488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801148c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011490:	ee17 2a90 	vmov	r2, s15
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011498:	4b13      	ldr	r3, [pc, #76]	; (80114e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801149c:	0e1b      	lsrs	r3, r3, #24
 801149e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114a2:	ee07 3a90 	vmov	s15, r3
 80114a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80114ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80114b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80114b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114be:	ee17 2a90 	vmov	r2, s15
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80114c6:	e008      	b.n	80114da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	609a      	str	r2, [r3, #8]
}
 80114da:	bf00      	nop
 80114dc:	3724      	adds	r7, #36	; 0x24
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr
 80114e6:	bf00      	nop
 80114e8:	58024400 	.word	0x58024400
 80114ec:	03d09000 	.word	0x03d09000
 80114f0:	46000000 	.word	0x46000000
 80114f4:	4c742400 	.word	0x4c742400
 80114f8:	4a742400 	.word	0x4a742400
 80114fc:	4bbebc20 	.word	0x4bbebc20

08011500 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011500:	b480      	push	{r7}
 8011502:	b089      	sub	sp, #36	; 0x24
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011508:	4ba0      	ldr	r3, [pc, #640]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801150c:	f003 0303 	and.w	r3, r3, #3
 8011510:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8011512:	4b9e      	ldr	r3, [pc, #632]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011516:	091b      	lsrs	r3, r3, #4
 8011518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801151c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801151e:	4b9b      	ldr	r3, [pc, #620]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011522:	f003 0301 	and.w	r3, r3, #1
 8011526:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011528:	4b98      	ldr	r3, [pc, #608]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801152c:	08db      	lsrs	r3, r3, #3
 801152e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011532:	693a      	ldr	r2, [r7, #16]
 8011534:	fb02 f303 	mul.w	r3, r2, r3
 8011538:	ee07 3a90 	vmov	s15, r3
 801153c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011540:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	2b00      	cmp	r3, #0
 8011548:	f000 8111 	beq.w	801176e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	2b02      	cmp	r3, #2
 8011550:	f000 8083 	beq.w	801165a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	2b02      	cmp	r3, #2
 8011558:	f200 80a1 	bhi.w	801169e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d003      	beq.n	801156a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011562:	69bb      	ldr	r3, [r7, #24]
 8011564:	2b01      	cmp	r3, #1
 8011566:	d056      	beq.n	8011616 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011568:	e099      	b.n	801169e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801156a:	4b88      	ldr	r3, [pc, #544]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f003 0320 	and.w	r3, r3, #32
 8011572:	2b00      	cmp	r3, #0
 8011574:	d02d      	beq.n	80115d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011576:	4b85      	ldr	r3, [pc, #532]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	08db      	lsrs	r3, r3, #3
 801157c:	f003 0303 	and.w	r3, r3, #3
 8011580:	4a83      	ldr	r2, [pc, #524]	; (8011790 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011582:	fa22 f303 	lsr.w	r3, r2, r3
 8011586:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	ee07 3a90 	vmov	s15, r3
 801158e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	ee07 3a90 	vmov	s15, r3
 8011598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801159c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115a0:	4b7a      	ldr	r3, [pc, #488]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115a8:	ee07 3a90 	vmov	s15, r3
 80115ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80115b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80115b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115cc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80115d0:	e087      	b.n	80116e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	ee07 3a90 	vmov	s15, r3
 80115d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011798 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80115e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115e4:	4b69      	ldr	r3, [pc, #420]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115ec:	ee07 3a90 	vmov	s15, r3
 80115f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80115f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80115fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011614:	e065      	b.n	80116e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	ee07 3a90 	vmov	s15, r3
 801161c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011620:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801179c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011628:	4b58      	ldr	r3, [pc, #352]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801162c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011630:	ee07 3a90 	vmov	s15, r3
 8011634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011638:	ed97 6a03 	vldr	s12, [r7, #12]
 801163c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801164c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011658:	e043      	b.n	80116e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	ee07 3a90 	vmov	s15, r3
 8011660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011664:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80117a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801166c:	4b47      	ldr	r3, [pc, #284]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011674:	ee07 3a90 	vmov	s15, r3
 8011678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801167c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011680:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801168c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011698:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801169c:	e021      	b.n	80116e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	ee07 3a90 	vmov	s15, r3
 80116a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011798 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80116ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116b0:	4b36      	ldr	r3, [pc, #216]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116b8:	ee07 3a90 	vmov	s15, r3
 80116bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80116c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80116c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80116cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80116d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80116e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80116e2:	4b2a      	ldr	r3, [pc, #168]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e6:	0a5b      	lsrs	r3, r3, #9
 80116e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116ec:	ee07 3a90 	vmov	s15, r3
 80116f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8011700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011708:	ee17 2a90 	vmov	r2, s15
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011710:	4b1e      	ldr	r3, [pc, #120]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011714:	0c1b      	lsrs	r3, r3, #16
 8011716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801171a:	ee07 3a90 	vmov	s15, r3
 801171e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011726:	ee37 7a87 	vadd.f32	s14, s15, s14
 801172a:	edd7 6a07 	vldr	s13, [r7, #28]
 801172e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011736:	ee17 2a90 	vmov	r2, s15
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801173e:	4b13      	ldr	r3, [pc, #76]	; (801178c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011742:	0e1b      	lsrs	r3, r3, #24
 8011744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011748:	ee07 3a90 	vmov	s15, r3
 801174c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011758:	edd7 6a07 	vldr	s13, [r7, #28]
 801175c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011764:	ee17 2a90 	vmov	r2, s15
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801176c:	e008      	b.n	8011780 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2200      	movs	r2, #0
 801177e:	609a      	str	r2, [r3, #8]
}
 8011780:	bf00      	nop
 8011782:	3724      	adds	r7, #36	; 0x24
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr
 801178c:	58024400 	.word	0x58024400
 8011790:	03d09000 	.word	0x03d09000
 8011794:	46000000 	.word	0x46000000
 8011798:	4c742400 	.word	0x4c742400
 801179c:	4a742400 	.word	0x4a742400
 80117a0:	4bbebc20 	.word	0x4bbebc20

080117a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80117ae:	2300      	movs	r3, #0
 80117b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80117b2:	4b53      	ldr	r3, [pc, #332]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80117b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b6:	f003 0303 	and.w	r3, r3, #3
 80117ba:	2b03      	cmp	r3, #3
 80117bc:	d101      	bne.n	80117c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80117be:	2301      	movs	r3, #1
 80117c0:	e099      	b.n	80118f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80117c2:	4b4f      	ldr	r3, [pc, #316]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	4a4e      	ldr	r2, [pc, #312]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80117c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80117cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80117ce:	f7f4 fbb3 	bl	8005f38 <HAL_GetTick>
 80117d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80117d4:	e008      	b.n	80117e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80117d6:	f7f4 fbaf 	bl	8005f38 <HAL_GetTick>
 80117da:	4602      	mov	r2, r0
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	1ad3      	subs	r3, r2, r3
 80117e0:	2b02      	cmp	r3, #2
 80117e2:	d901      	bls.n	80117e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80117e4:	2303      	movs	r3, #3
 80117e6:	e086      	b.n	80118f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80117e8:	4b45      	ldr	r3, [pc, #276]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1f0      	bne.n	80117d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80117f4:	4b42      	ldr	r3, [pc, #264]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80117f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	031b      	lsls	r3, r3, #12
 8011802:	493f      	ldr	r1, [pc, #252]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011804:	4313      	orrs	r3, r2
 8011806:	628b      	str	r3, [r1, #40]	; 0x28
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	3b01      	subs	r3, #1
 801180e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	689b      	ldr	r3, [r3, #8]
 8011816:	3b01      	subs	r3, #1
 8011818:	025b      	lsls	r3, r3, #9
 801181a:	b29b      	uxth	r3, r3
 801181c:	431a      	orrs	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	3b01      	subs	r3, #1
 8011824:	041b      	lsls	r3, r3, #16
 8011826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801182a:	431a      	orrs	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	691b      	ldr	r3, [r3, #16]
 8011830:	3b01      	subs	r3, #1
 8011832:	061b      	lsls	r3, r3, #24
 8011834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011838:	4931      	ldr	r1, [pc, #196]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 801183a:	4313      	orrs	r3, r2
 801183c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801183e:	4b30      	ldr	r3, [pc, #192]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011842:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	695b      	ldr	r3, [r3, #20]
 801184a:	492d      	ldr	r1, [pc, #180]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 801184c:	4313      	orrs	r3, r2
 801184e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011850:	4b2b      	ldr	r3, [pc, #172]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011854:	f023 0220 	bic.w	r2, r3, #32
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	699b      	ldr	r3, [r3, #24]
 801185c:	4928      	ldr	r1, [pc, #160]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 801185e:	4313      	orrs	r3, r2
 8011860:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011862:	4b27      	ldr	r3, [pc, #156]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011866:	4a26      	ldr	r2, [pc, #152]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011868:	f023 0310 	bic.w	r3, r3, #16
 801186c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801186e:	4b24      	ldr	r3, [pc, #144]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011872:	4b24      	ldr	r3, [pc, #144]	; (8011904 <RCCEx_PLL2_Config+0x160>)
 8011874:	4013      	ands	r3, r2
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	69d2      	ldr	r2, [r2, #28]
 801187a:	00d2      	lsls	r2, r2, #3
 801187c:	4920      	ldr	r1, [pc, #128]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 801187e:	4313      	orrs	r3, r2
 8011880:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011882:	4b1f      	ldr	r3, [pc, #124]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011886:	4a1e      	ldr	r2, [pc, #120]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011888:	f043 0310 	orr.w	r3, r3, #16
 801188c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d106      	bne.n	80118a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011894:	4b1a      	ldr	r3, [pc, #104]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 8011896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011898:	4a19      	ldr	r2, [pc, #100]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 801189a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801189e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80118a0:	e00f      	b.n	80118c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d106      	bne.n	80118b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80118a8:	4b15      	ldr	r3, [pc, #84]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80118aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ac:	4a14      	ldr	r2, [pc, #80]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80118ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80118b4:	e005      	b.n	80118c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80118b6:	4b12      	ldr	r3, [pc, #72]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80118b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ba:	4a11      	ldr	r2, [pc, #68]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80118bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80118c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80118c2:	4b0f      	ldr	r3, [pc, #60]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	4a0e      	ldr	r2, [pc, #56]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80118c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80118cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80118ce:	f7f4 fb33 	bl	8005f38 <HAL_GetTick>
 80118d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118d4:	e008      	b.n	80118e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80118d6:	f7f4 fb2f 	bl	8005f38 <HAL_GetTick>
 80118da:	4602      	mov	r2, r0
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	d901      	bls.n	80118e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80118e4:	2303      	movs	r3, #3
 80118e6:	e006      	b.n	80118f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118e8:	4b05      	ldr	r3, [pc, #20]	; (8011900 <RCCEx_PLL2_Config+0x15c>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d0f0      	beq.n	80118d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80118f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	58024400 	.word	0x58024400
 8011904:	ffff0007 	.word	0xffff0007

08011908 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011912:	2300      	movs	r3, #0
 8011914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011916:	4b53      	ldr	r3, [pc, #332]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801191a:	f003 0303 	and.w	r3, r3, #3
 801191e:	2b03      	cmp	r3, #3
 8011920:	d101      	bne.n	8011926 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011922:	2301      	movs	r3, #1
 8011924:	e099      	b.n	8011a5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011926:	4b4f      	ldr	r3, [pc, #316]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	4a4e      	ldr	r2, [pc, #312]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 801192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011932:	f7f4 fb01 	bl	8005f38 <HAL_GetTick>
 8011936:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011938:	e008      	b.n	801194c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801193a:	f7f4 fafd 	bl	8005f38 <HAL_GetTick>
 801193e:	4602      	mov	r2, r0
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	2b02      	cmp	r3, #2
 8011946:	d901      	bls.n	801194c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011948:	2303      	movs	r3, #3
 801194a:	e086      	b.n	8011a5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801194c:	4b45      	ldr	r3, [pc, #276]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011954:	2b00      	cmp	r3, #0
 8011956:	d1f0      	bne.n	801193a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011958:	4b42      	ldr	r3, [pc, #264]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 801195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801195c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	051b      	lsls	r3, r3, #20
 8011966:	493f      	ldr	r1, [pc, #252]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011968:	4313      	orrs	r3, r2
 801196a:	628b      	str	r3, [r1, #40]	; 0x28
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	3b01      	subs	r3, #1
 8011972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	689b      	ldr	r3, [r3, #8]
 801197a:	3b01      	subs	r3, #1
 801197c:	025b      	lsls	r3, r3, #9
 801197e:	b29b      	uxth	r3, r3
 8011980:	431a      	orrs	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	3b01      	subs	r3, #1
 8011988:	041b      	lsls	r3, r3, #16
 801198a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801198e:	431a      	orrs	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	691b      	ldr	r3, [r3, #16]
 8011994:	3b01      	subs	r3, #1
 8011996:	061b      	lsls	r3, r3, #24
 8011998:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801199c:	4931      	ldr	r1, [pc, #196]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 801199e:	4313      	orrs	r3, r2
 80119a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80119a2:	4b30      	ldr	r3, [pc, #192]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	695b      	ldr	r3, [r3, #20]
 80119ae:	492d      	ldr	r1, [pc, #180]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119b0:	4313      	orrs	r3, r2
 80119b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80119b4:	4b2b      	ldr	r3, [pc, #172]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	699b      	ldr	r3, [r3, #24]
 80119c0:	4928      	ldr	r1, [pc, #160]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119c2:	4313      	orrs	r3, r2
 80119c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80119c6:	4b27      	ldr	r3, [pc, #156]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ca:	4a26      	ldr	r2, [pc, #152]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80119d2:	4b24      	ldr	r3, [pc, #144]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119d6:	4b24      	ldr	r3, [pc, #144]	; (8011a68 <RCCEx_PLL3_Config+0x160>)
 80119d8:	4013      	ands	r3, r2
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	69d2      	ldr	r2, [r2, #28]
 80119de:	00d2      	lsls	r2, r2, #3
 80119e0:	4920      	ldr	r1, [pc, #128]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119e2:	4313      	orrs	r3, r2
 80119e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80119e6:	4b1f      	ldr	r3, [pc, #124]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ea:	4a1e      	ldr	r2, [pc, #120]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d106      	bne.n	8011a06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80119f8:	4b1a      	ldr	r3, [pc, #104]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119fc:	4a19      	ldr	r2, [pc, #100]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 80119fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a04:	e00f      	b.n	8011a26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d106      	bne.n	8011a1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011a0c:	4b15      	ldr	r3, [pc, #84]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a10:	4a14      	ldr	r2, [pc, #80]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011a12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a18:	e005      	b.n	8011a26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011a1a:	4b12      	ldr	r3, [pc, #72]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a1e:	4a11      	ldr	r2, [pc, #68]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011a24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011a26:	4b0f      	ldr	r3, [pc, #60]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	4a0e      	ldr	r2, [pc, #56]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011a32:	f7f4 fa81 	bl	8005f38 <HAL_GetTick>
 8011a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011a38:	e008      	b.n	8011a4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011a3a:	f7f4 fa7d 	bl	8005f38 <HAL_GetTick>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	d901      	bls.n	8011a4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011a48:	2303      	movs	r3, #3
 8011a4a:	e006      	b.n	8011a5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011a4c:	4b05      	ldr	r3, [pc, #20]	; (8011a64 <RCCEx_PLL3_Config+0x15c>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d0f0      	beq.n	8011a3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3710      	adds	r7, #16
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	58024400 	.word	0x58024400
 8011a68:	ffff0007 	.word	0xffff0007

08011a6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a74:	2301      	movs	r3, #1
 8011a76:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d071      	beq.n	8011b62 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d106      	bne.n	8011a98 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f7f2 fa9a 	bl	8003fcc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2202      	movs	r2, #2
 8011a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	f003 0310 	and.w	r3, r3, #16
 8011aaa:	2b10      	cmp	r3, #16
 8011aac:	d050      	beq.n	8011b50 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	22ca      	movs	r2, #202	; 0xca
 8011ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2253      	movs	r2, #83	; 0x53
 8011abc:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 fa4a 	bl	8011f58 <RTC_EnterInitMode>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011ac8:	7bfb      	ldrb	r3, [r7, #15]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d124      	bne.n	8011b18 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6899      	ldr	r1, [r3, #8]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	4b24      	ldr	r3, [pc, #144]	; (8011b6c <HAL_RTC_Init+0x100>)
 8011ada:	400b      	ands	r3, r1
 8011adc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	6899      	ldr	r1, [r3, #8]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	685a      	ldr	r2, [r3, #4]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	691b      	ldr	r3, [r3, #16]
 8011aec:	431a      	orrs	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	699b      	ldr	r3, [r3, #24]
 8011af2:	431a      	orrs	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	430a      	orrs	r2, r1
 8011afa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	689b      	ldr	r3, [r3, #8]
 8011b00:	0419      	lsls	r1, r3, #16
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	68da      	ldr	r2, [r3, #12]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	430a      	orrs	r2, r1
 8011b0c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 fa56 	bl	8011fc0 <RTC_ExitInitMode>
 8011b14:	4603      	mov	r3, r0
 8011b16:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d113      	bne.n	8011b46 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f022 0203 	bic.w	r2, r2, #3
 8011b2c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	69da      	ldr	r2, [r3, #28]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	695b      	ldr	r3, [r3, #20]
 8011b3c:	431a      	orrs	r2, r3
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	430a      	orrs	r2, r1
 8011b44:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	22ff      	movs	r2, #255	; 0xff
 8011b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8011b4e:	e001      	b.n	8011b54 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011b50:	2300      	movs	r3, #0
 8011b52:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011b54:	7bfb      	ldrb	r3, [r7, #15]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d103      	bne.n	8011b62 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3710      	adds	r7, #16
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	ff8fffbf 	.word	0xff8fffbf

08011b70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b087      	sub	sp, #28
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d101      	bne.n	8011b8a <HAL_RTC_SetTime+0x1a>
 8011b86:	2302      	movs	r3, #2
 8011b88:	e089      	b.n	8011c9e <HAL_RTC_SetTime+0x12e>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2202      	movs	r2, #2
 8011b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	22ca      	movs	r2, #202	; 0xca
 8011ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2253      	movs	r2, #83	; 0x53
 8011ba8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011baa:	68f8      	ldr	r0, [r7, #12]
 8011bac:	f000 f9d4 	bl	8011f58 <RTC_EnterInitMode>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011bb4:	7cfb      	ldrb	r3, [r7, #19]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d161      	bne.n	8011c7e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d126      	bne.n	8011c0e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	689b      	ldr	r3, [r3, #8]
 8011bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d102      	bne.n	8011bd4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fa2f 	bl	801203c <RTC_ByteToBcd2>
 8011bde:	4603      	mov	r3, r0
 8011be0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	785b      	ldrb	r3, [r3, #1]
 8011be6:	4618      	mov	r0, r3
 8011be8:	f000 fa28 	bl	801203c <RTC_ByteToBcd2>
 8011bec:	4603      	mov	r3, r0
 8011bee:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bf0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	789b      	ldrb	r3, [r3, #2]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f000 fa20 	bl	801203c <RTC_ByteToBcd2>
 8011bfc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bfe:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	78db      	ldrb	r3, [r3, #3]
 8011c06:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	617b      	str	r3, [r7, #20]
 8011c0c:	e018      	b.n	8011c40 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d102      	bne.n	8011c22 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	785b      	ldrb	r3, [r3, #1]
 8011c2c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011c2e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c34:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	78db      	ldrb	r3, [r3, #3]
 8011c3a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	6979      	ldr	r1, [r7, #20]
 8011c46:	4b18      	ldr	r3, [pc, #96]	; (8011ca8 <HAL_RTC_SetTime+0x138>)
 8011c48:	400b      	ands	r3, r1
 8011c4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	689a      	ldr	r2, [r3, #8]
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011c5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	6899      	ldr	r1, [r3, #8]
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	68da      	ldr	r2, [r3, #12]
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	691b      	ldr	r3, [r3, #16]
 8011c6a:	431a      	orrs	r2, r3
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	430a      	orrs	r2, r1
 8011c72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 f9a3 	bl	8011fc0 <RTC_ExitInitMode>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	22ff      	movs	r2, #255	; 0xff
 8011c84:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011c86:	7cfb      	ldrb	r3, [r7, #19]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d103      	bne.n	8011c94 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2201      	movs	r2, #1
 8011c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2200      	movs	r2, #0
 8011c98:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011c9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	371c      	adds	r7, #28
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd90      	pop	{r4, r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	007f7f7f 	.word	0x007f7f7f

08011cac <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b086      	sub	sp, #24
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	60b9      	str	r1, [r7, #8]
 8011cb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	691b      	ldr	r3, [r3, #16]
 8011cc8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	4b22      	ldr	r3, [pc, #136]	; (8011d60 <HAL_RTC_GetTime+0xb4>)
 8011cd8:	4013      	ands	r3, r2
 8011cda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	0c1b      	lsrs	r3, r3, #16
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ce6:	b2da      	uxtb	r2, r3
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	0a1b      	lsrs	r3, r3, #8
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d04:	b2da      	uxtb	r2, r3
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	0d9b      	lsrs	r3, r3, #22
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	f003 0301 	and.w	r3, r3, #1
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d11a      	bne.n	8011d56 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	4618      	mov	r0, r3
 8011d26:	f000 f9a9 	bl	801207c <RTC_Bcd2ToByte>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	785b      	ldrb	r3, [r3, #1]
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 f9a0 	bl	801207c <RTC_Bcd2ToByte>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	461a      	mov	r2, r3
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	789b      	ldrb	r3, [r3, #2]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f000 f997 	bl	801207c <RTC_Bcd2ToByte>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	461a      	mov	r2, r3
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011d56:	2300      	movs	r3, #0
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3718      	adds	r7, #24
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	007f7f7f 	.word	0x007f7f7f

08011d64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011d64:	b590      	push	{r4, r7, lr}
 8011d66:	b087      	sub	sp, #28
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d101      	bne.n	8011d7e <HAL_RTC_SetDate+0x1a>
 8011d7a:	2302      	movs	r3, #2
 8011d7c:	e073      	b.n	8011e66 <HAL_RTC_SetDate+0x102>
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2201      	movs	r2, #1
 8011d82:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2202      	movs	r2, #2
 8011d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d10e      	bne.n	8011db2 <HAL_RTC_SetDate+0x4e>
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	785b      	ldrb	r3, [r3, #1]
 8011d98:	f003 0310 	and.w	r3, r3, #16
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d008      	beq.n	8011db2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	785b      	ldrb	r3, [r3, #1]
 8011da4:	f023 0310 	bic.w	r3, r3, #16
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	330a      	adds	r3, #10
 8011dac:	b2da      	uxtb	r2, r3
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d11c      	bne.n	8011df2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	78db      	ldrb	r3, [r3, #3]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f000 f93d 	bl	801203c <RTC_ByteToBcd2>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	785b      	ldrb	r3, [r3, #1]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f000 f936 	bl	801203c <RTC_ByteToBcd2>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011dd4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	789b      	ldrb	r3, [r3, #2]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 f92e 	bl	801203c <RTC_ByteToBcd2>
 8011de0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011de2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011dec:	4313      	orrs	r3, r2
 8011dee:	617b      	str	r3, [r7, #20]
 8011df0:	e00e      	b.n	8011e10 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	78db      	ldrb	r3, [r3, #3]
 8011df6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	785b      	ldrb	r3, [r3, #1]
 8011dfc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011dfe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011e00:	68ba      	ldr	r2, [r7, #8]
 8011e02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011e04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	22ca      	movs	r2, #202	; 0xca
 8011e16:	625a      	str	r2, [r3, #36]	; 0x24
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2253      	movs	r2, #83	; 0x53
 8011e1e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011e20:	68f8      	ldr	r0, [r7, #12]
 8011e22:	f000 f899 	bl	8011f58 <RTC_EnterInitMode>
 8011e26:	4603      	mov	r3, r0
 8011e28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011e2a:	7cfb      	ldrb	r3, [r7, #19]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10a      	bne.n	8011e46 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	6979      	ldr	r1, [r7, #20]
 8011e36:	4b0e      	ldr	r3, [pc, #56]	; (8011e70 <HAL_RTC_SetDate+0x10c>)
 8011e38:	400b      	ands	r3, r1
 8011e3a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f000 f8bf 	bl	8011fc0 <RTC_ExitInitMode>
 8011e42:	4603      	mov	r3, r0
 8011e44:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	22ff      	movs	r2, #255	; 0xff
 8011e4c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011e4e:	7cfb      	ldrb	r3, [r7, #19]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d103      	bne.n	8011e5c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2201      	movs	r2, #1
 8011e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011e64:	7cfb      	ldrb	r3, [r7, #19]


}
 8011e66:	4618      	mov	r0, r3
 8011e68:	371c      	adds	r7, #28
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd90      	pop	{r4, r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	00ffff3f 	.word	0x00ffff3f

08011e74 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b086      	sub	sp, #24
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	685a      	ldr	r2, [r3, #4]
 8011e86:	4b21      	ldr	r3, [pc, #132]	; (8011f0c <HAL_RTC_GetDate+0x98>)
 8011e88:	4013      	ands	r3, r2
 8011e8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	0c1b      	lsrs	r3, r3, #16
 8011e90:	b2da      	uxtb	r2, r3
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	0a1b      	lsrs	r3, r3, #8
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	f003 031f 	and.w	r3, r3, #31
 8011ea0:	b2da      	uxtb	r2, r3
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011eae:	b2da      	uxtb	r2, r3
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	0b5b      	lsrs	r3, r3, #13
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	f003 0307 	and.w	r3, r3, #7
 8011ebe:	b2da      	uxtb	r2, r3
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d11a      	bne.n	8011f00 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	78db      	ldrb	r3, [r3, #3]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f000 f8d4 	bl	801207c <RTC_Bcd2ToByte>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	785b      	ldrb	r3, [r3, #1]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f000 f8cb 	bl	801207c <RTC_Bcd2ToByte>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	461a      	mov	r2, r3
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	789b      	ldrb	r3, [r3, #2]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f000 f8c2 	bl	801207c <RTC_Bcd2ToByte>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	461a      	mov	r2, r3
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	00ffff3f 	.word	0x00ffff3f

08011f10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4a0d      	ldr	r2, [pc, #52]	; (8011f54 <HAL_RTC_WaitForSynchro+0x44>)
 8011f1e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011f20:	f7f4 f80a 	bl	8005f38 <HAL_GetTick>
 8011f24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011f26:	e009      	b.n	8011f3c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011f28:	f7f4 f806 	bl	8005f38 <HAL_GetTick>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f36:	d901      	bls.n	8011f3c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011f38:	2303      	movs	r3, #3
 8011f3a:	e007      	b.n	8011f4c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	f003 0320 	and.w	r3, r3, #32
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d0ee      	beq.n	8011f28 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3710      	adds	r7, #16
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	0003ff5f 	.word	0x0003ff5f

08011f58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011f60:	2300      	movs	r3, #0
 8011f62:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d120      	bne.n	8011fb4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f7a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011f7c:	f7f3 ffdc 	bl	8005f38 <HAL_GetTick>
 8011f80:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f82:	e00d      	b.n	8011fa0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011f84:	f7f3 ffd8 	bl	8005f38 <HAL_GetTick>
 8011f88:	4602      	mov	r2, r0
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f92:	d905      	bls.n	8011fa0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011f94:	2303      	movs	r3, #3
 8011f96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2203      	movs	r2, #3
 8011f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d102      	bne.n	8011fb4 <RTC_EnterInitMode+0x5c>
 8011fae:	7bfb      	ldrb	r3, [r7, #15]
 8011fb0:	2b03      	cmp	r3, #3
 8011fb2:	d1e7      	bne.n	8011f84 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
	...

08011fc0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011fcc:	4b1a      	ldr	r3, [pc, #104]	; (8012038 <RTC_ExitInitMode+0x78>)
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	4a19      	ldr	r2, [pc, #100]	; (8012038 <RTC_ExitInitMode+0x78>)
 8011fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011fd6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011fd8:	4b17      	ldr	r3, [pc, #92]	; (8012038 <RTC_ExitInitMode+0x78>)
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	f003 0320 	and.w	r3, r3, #32
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10c      	bne.n	8011ffe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f7ff ff93 	bl	8011f10 <HAL_RTC_WaitForSynchro>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d01e      	beq.n	801202e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2203      	movs	r2, #3
 8011ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011ff8:	2303      	movs	r3, #3
 8011ffa:	73fb      	strb	r3, [r7, #15]
 8011ffc:	e017      	b.n	801202e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011ffe:	4b0e      	ldr	r3, [pc, #56]	; (8012038 <RTC_ExitInitMode+0x78>)
 8012000:	689b      	ldr	r3, [r3, #8]
 8012002:	4a0d      	ldr	r2, [pc, #52]	; (8012038 <RTC_ExitInitMode+0x78>)
 8012004:	f023 0320 	bic.w	r3, r3, #32
 8012008:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7ff ff80 	bl	8011f10 <HAL_RTC_WaitForSynchro>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d005      	beq.n	8012022 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2203      	movs	r2, #3
 801201a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 801201e:	2303      	movs	r3, #3
 8012020:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012022:	4b05      	ldr	r3, [pc, #20]	; (8012038 <RTC_ExitInitMode+0x78>)
 8012024:	689b      	ldr	r3, [r3, #8]
 8012026:	4a04      	ldr	r2, [pc, #16]	; (8012038 <RTC_ExitInitMode+0x78>)
 8012028:	f043 0320 	orr.w	r3, r3, #32
 801202c:	6093      	str	r3, [r2, #8]
  }

  return status;
 801202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	58004000 	.word	0x58004000

0801203c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801203c:	b480      	push	{r7}
 801203e:	b085      	sub	sp, #20
 8012040:	af00      	add	r7, sp, #0
 8012042:	4603      	mov	r3, r0
 8012044:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8012046:	2300      	movs	r3, #0
 8012048:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 801204a:	79fb      	ldrb	r3, [r7, #7]
 801204c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 801204e:	e005      	b.n	801205c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	3301      	adds	r3, #1
 8012054:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8012056:	7afb      	ldrb	r3, [r7, #11]
 8012058:	3b0a      	subs	r3, #10
 801205a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 801205c:	7afb      	ldrb	r3, [r7, #11]
 801205e:	2b09      	cmp	r3, #9
 8012060:	d8f6      	bhi.n	8012050 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	b2db      	uxtb	r3, r3
 8012066:	011b      	lsls	r3, r3, #4
 8012068:	b2da      	uxtb	r2, r3
 801206a:	7afb      	ldrb	r3, [r7, #11]
 801206c:	4313      	orrs	r3, r2
 801206e:	b2db      	uxtb	r3, r3
}
 8012070:	4618      	mov	r0, r3
 8012072:	3714      	adds	r7, #20
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr

0801207c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	4603      	mov	r3, r0
 8012084:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8012086:	79fb      	ldrb	r3, [r7, #7]
 8012088:	091b      	lsrs	r3, r3, #4
 801208a:	b2db      	uxtb	r3, r3
 801208c:	461a      	mov	r2, r3
 801208e:	0092      	lsls	r2, r2, #2
 8012090:	4413      	add	r3, r2
 8012092:	005b      	lsls	r3, r3, #1
 8012094:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012096:	79fb      	ldrb	r3, [r7, #7]
 8012098:	f003 030f 	and.w	r3, r3, #15
 801209c:	b2da      	uxtb	r2, r3
 801209e:	7bfb      	ldrb	r3, [r7, #15]
 80120a0:	4413      	add	r3, r2
 80120a2:	b2db      	uxtb	r3, r3
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3714      	adds	r7, #20
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr

080120b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d101      	bne.n	80120c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80120be:	2301      	movs	r3, #1
 80120c0:	e10f      	b.n	80122e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2200      	movs	r2, #0
 80120c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	4a87      	ldr	r2, [pc, #540]	; (80122ec <HAL_SPI_Init+0x23c>)
 80120ce:	4293      	cmp	r3, r2
 80120d0:	d00f      	beq.n	80120f2 <HAL_SPI_Init+0x42>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	4a86      	ldr	r2, [pc, #536]	; (80122f0 <HAL_SPI_Init+0x240>)
 80120d8:	4293      	cmp	r3, r2
 80120da:	d00a      	beq.n	80120f2 <HAL_SPI_Init+0x42>
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	4a84      	ldr	r2, [pc, #528]	; (80122f4 <HAL_SPI_Init+0x244>)
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d005      	beq.n	80120f2 <HAL_SPI_Init+0x42>
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	2b0f      	cmp	r3, #15
 80120ec:	d901      	bls.n	80120f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80120ee:	2301      	movs	r3, #1
 80120f0:	e0f7      	b.n	80122e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 fd60 	bl	8012bb8 <SPI_GetPacketSize>
 80120f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	4a7b      	ldr	r2, [pc, #492]	; (80122ec <HAL_SPI_Init+0x23c>)
 8012100:	4293      	cmp	r3, r2
 8012102:	d00c      	beq.n	801211e <HAL_SPI_Init+0x6e>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	4a79      	ldr	r2, [pc, #484]	; (80122f0 <HAL_SPI_Init+0x240>)
 801210a:	4293      	cmp	r3, r2
 801210c:	d007      	beq.n	801211e <HAL_SPI_Init+0x6e>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	4a78      	ldr	r2, [pc, #480]	; (80122f4 <HAL_SPI_Init+0x244>)
 8012114:	4293      	cmp	r3, r2
 8012116:	d002      	beq.n	801211e <HAL_SPI_Init+0x6e>
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2b08      	cmp	r3, #8
 801211c:	d811      	bhi.n	8012142 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8012122:	4a72      	ldr	r2, [pc, #456]	; (80122ec <HAL_SPI_Init+0x23c>)
 8012124:	4293      	cmp	r3, r2
 8012126:	d009      	beq.n	801213c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	4a70      	ldr	r2, [pc, #448]	; (80122f0 <HAL_SPI_Init+0x240>)
 801212e:	4293      	cmp	r3, r2
 8012130:	d004      	beq.n	801213c <HAL_SPI_Init+0x8c>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	4a6f      	ldr	r2, [pc, #444]	; (80122f4 <HAL_SPI_Init+0x244>)
 8012138:	4293      	cmp	r3, r2
 801213a:	d104      	bne.n	8012146 <HAL_SPI_Init+0x96>
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	2b10      	cmp	r3, #16
 8012140:	d901      	bls.n	8012146 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8012142:	2301      	movs	r3, #1
 8012144:	e0cd      	b.n	80122e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801214c:	b2db      	uxtb	r3, r3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d106      	bne.n	8012160 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f7f2 f9ba 	bl	80044d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2202      	movs	r2, #2
 8012164:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f022 0201 	bic.w	r2, r2, #1
 8012176:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8012182:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	699b      	ldr	r3, [r3, #24]
 8012188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801218c:	d119      	bne.n	80121c2 <HAL_SPI_Init+0x112>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012196:	d103      	bne.n	80121a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801219c:	2b00      	cmp	r3, #0
 801219e:	d008      	beq.n	80121b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d10c      	bne.n	80121c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80121ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121b0:	d107      	bne.n	80121c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80121c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00f      	beq.n	80121ee <HAL_SPI_Init+0x13e>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	2b06      	cmp	r3, #6
 80121d4:	d90b      	bls.n	80121ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	430a      	orrs	r2, r1
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	e007      	b.n	80121fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80121fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	69da      	ldr	r2, [r3, #28]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012206:	431a      	orrs	r2, r3
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	431a      	orrs	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012210:	ea42 0103 	orr.w	r1, r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	68da      	ldr	r2, [r3, #12]
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	430a      	orrs	r2, r1
 801221e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012228:	431a      	orrs	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801222e:	431a      	orrs	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	699b      	ldr	r3, [r3, #24]
 8012234:	431a      	orrs	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	691b      	ldr	r3, [r3, #16]
 801223a:	431a      	orrs	r2, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	695b      	ldr	r3, [r3, #20]
 8012240:	431a      	orrs	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6a1b      	ldr	r3, [r3, #32]
 8012246:	431a      	orrs	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	431a      	orrs	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012252:	431a      	orrs	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	689b      	ldr	r3, [r3, #8]
 8012258:	431a      	orrs	r2, r3
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801225e:	ea42 0103 	orr.w	r1, r2, r3
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	430a      	orrs	r2, r1
 801226c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d113      	bne.n	801229e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012288:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801229c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f022 0201 	bic.w	r2, r2, #1
 80122ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d00a      	beq.n	80122d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	68db      	ldr	r3, [r3, #12]
 80122c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	430a      	orrs	r2, r1
 80122ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2200      	movs	r2, #0
 80122d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2201      	movs	r2, #1
 80122dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3710      	adds	r7, #16
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	40013000 	.word	0x40013000
 80122f0:	40003800 	.word	0x40003800
 80122f4:	40003c00 	.word	0x40003c00

080122f8 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	4613      	mov	r3, r2
 8012304:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801230c:	b2db      	uxtb	r3, r3
 801230e:	2b01      	cmp	r3, #1
 8012310:	d005      	beq.n	801231e <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	2200      	movs	r2, #0
 8012316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 801231a:	2302      	movs	r3, #2
 801231c:	e127      	b.n	801256e <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d002      	beq.n	801232a <HAL_SPI_Receive_DMA+0x32>
 8012324:	88fb      	ldrh	r3, [r7, #6]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d105      	bne.n	8012336 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2200      	movs	r2, #0
 801232e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8012332:	2301      	movs	r3, #1
 8012334:	e11b      	b.n	801256e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801233c:	2b01      	cmp	r3, #1
 801233e:	d101      	bne.n	8012344 <HAL_SPI_Receive_DMA+0x4c>
 8012340:	2302      	movs	r3, #2
 8012342:	e114      	b.n	801256e <HAL_SPI_Receive_DMA+0x276>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2201      	movs	r2, #1
 8012348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2204      	movs	r2, #4
 8012350:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2200      	movs	r2, #0
 8012358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	68ba      	ldr	r2, [r7, #8]
 8012360:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	88fa      	ldrh	r2, [r7, #6]
 8012366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	88fa      	ldrh	r2, [r7, #6]
 801236e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2200      	movs	r2, #0
 8012376:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2200      	movs	r2, #0
 801237c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2200      	movs	r2, #0
 801238a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8012396:	d108      	bne.n	80123aa <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80123a6:	601a      	str	r2, [r3, #0]
 80123a8:	e009      	b.n	80123be <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	68db      	ldr	r3, [r3, #12]
 80123b0:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80123bc:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	2b0f      	cmp	r3, #15
 80123c4:	d905      	bls.n	80123d2 <HAL_SPI_Receive_DMA+0xda>
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ca:	699b      	ldr	r3, [r3, #24]
 80123cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123d0:	d10f      	bne.n	80123f2 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80123d6:	2b07      	cmp	r3, #7
 80123d8:	d911      	bls.n	80123fe <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123de:	699b      	ldr	r3, [r3, #24]
 80123e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123e4:	d00b      	beq.n	80123fe <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ea:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80123ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123f0:	d005      	beq.n	80123fe <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	2200      	movs	r2, #0
 80123f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e0b7      	b.n	801256e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	689a      	ldr	r2, [r3, #8]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801240c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	2b07      	cmp	r3, #7
 8012414:	d820      	bhi.n	8012458 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801241a:	699b      	ldr	r3, [r3, #24]
 801241c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012420:	d109      	bne.n	8012436 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012428:	b29b      	uxth	r3, r3
 801242a:	3301      	adds	r3, #1
 801242c:	105b      	asrs	r3, r3, #1
 801242e:	b29a      	uxth	r2, r3
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801243a:	699b      	ldr	r3, [r3, #24]
 801243c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012440:	d11e      	bne.n	8012480 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012448:	b29b      	uxth	r3, r3
 801244a:	3303      	adds	r3, #3
 801244c:	109b      	asrs	r3, r3, #2
 801244e:	b29a      	uxth	r2, r3
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012456:	e013      	b.n	8012480 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	2b0f      	cmp	r3, #15
 801245e:	d80f      	bhi.n	8012480 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012464:	699b      	ldr	r3, [r3, #24]
 8012466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801246a:	d109      	bne.n	8012480 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012472:	b29b      	uxth	r3, r3
 8012474:	3301      	adds	r3, #1
 8012476:	105b      	asrs	r3, r3, #1
 8012478:	b29a      	uxth	r2, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012484:	4a3c      	ldr	r2, [pc, #240]	; (8012578 <HAL_SPI_Receive_DMA+0x280>)
 8012486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801248c:	4a3b      	ldr	r2, [pc, #236]	; (801257c <HAL_SPI_Receive_DMA+0x284>)
 801248e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012494:	4a3a      	ldr	r2, [pc, #232]	; (8012580 <HAL_SPI_Receive_DMA+0x288>)
 8012496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801249c:	2200      	movs	r2, #0
 801249e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	3330      	adds	r3, #48	; 0x30
 80124aa:	4619      	mov	r1, r3
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124b0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80124b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80124ba:	f7f6 f9c1 	bl	8008840 <HAL_DMA_Start_IT>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d011      	beq.n	80124e8 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124ca:	f043 0210 	orr.w	r2, r3, #16
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2201      	movs	r2, #1
 80124d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80124e4:	2301      	movs	r3, #1
 80124e6:	e042      	b.n	801256e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80124ec:	69db      	ldr	r3, [r3, #28]
 80124ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124f2:	d108      	bne.n	8012506 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	6859      	ldr	r1, [r3, #4]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	4b21      	ldr	r3, [pc, #132]	; (8012584 <HAL_SPI_Receive_DMA+0x28c>)
 8012500:	400b      	ands	r3, r1
 8012502:	6053      	str	r3, [r2, #4]
 8012504:	e009      	b.n	801251a <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	4b1d      	ldr	r3, [pc, #116]	; (8012584 <HAL_SPI_Receive_DMA+0x28c>)
 801250e:	4013      	ands	r3, r2
 8012510:	88f9      	ldrh	r1, [r7, #6]
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	6812      	ldr	r2, [r2, #0]
 8012516:	430b      	orrs	r3, r1
 8012518:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	689a      	ldr	r2, [r3, #8]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012528:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	691a      	ldr	r2, [r3, #16]
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8012538:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f042 0201 	orr.w	r2, r2, #1
 8012548:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012552:	d107      	bne.n	8012564 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012562:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2200      	movs	r2, #0
 8012568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801256c:	2300      	movs	r3, #0
}
 801256e:	4618      	mov	r0, r3
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	080129e3 	.word	0x080129e3
 801257c:	0801299d 	.word	0x0801299d
 8012580:	080129ff 	.word	0x080129ff
 8012584:	ffff0000 	.word	0xffff0000

08012588 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b08a      	sub	sp, #40	; 0x28
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	695b      	ldr	r3, [r3, #20]
 801259e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80125a0:	6a3a      	ldr	r2, [r7, #32]
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	4013      	ands	r3, r2
 80125a6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	689b      	ldr	r3, [r3, #8]
 80125ae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80125b0:	2300      	movs	r3, #0
 80125b2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80125ba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	3330      	adds	r3, #48	; 0x30
 80125c2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d010      	beq.n	80125f0 <HAL_SPI_IRQHandler+0x68>
 80125ce:	6a3b      	ldr	r3, [r7, #32]
 80125d0:	f003 0308 	and.w	r3, r3, #8
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d00b      	beq.n	80125f0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	699a      	ldr	r2, [r3, #24]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80125e6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 f9cd 	bl	8012988 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80125ee:	e192      	b.n	8012916 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d113      	bne.n	8012622 <HAL_SPI_IRQHandler+0x9a>
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	f003 0320 	and.w	r3, r3, #32
 8012600:	2b00      	cmp	r3, #0
 8012602:	d10e      	bne.n	8012622 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801260a:	2b00      	cmp	r3, #0
 801260c:	d009      	beq.n	8012622 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	4798      	blx	r3
    hspi->RxISR(hspi);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	4798      	blx	r3
    handled = 1UL;
 801261e:	2301      	movs	r3, #1
 8012620:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012628:	2b00      	cmp	r3, #0
 801262a:	d10f      	bne.n	801264c <HAL_SPI_IRQHandler+0xc4>
 801262c:	69bb      	ldr	r3, [r7, #24]
 801262e:	f003 0301 	and.w	r3, r3, #1
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00a      	beq.n	801264c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801263c:	2b00      	cmp	r3, #0
 801263e:	d105      	bne.n	801264c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	4798      	blx	r3
    handled = 1UL;
 8012648:	2301      	movs	r3, #1
 801264a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	f003 0320 	and.w	r3, r3, #32
 8012652:	2b00      	cmp	r3, #0
 8012654:	d10f      	bne.n	8012676 <HAL_SPI_IRQHandler+0xee>
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	f003 0302 	and.w	r3, r3, #2
 801265c:	2b00      	cmp	r3, #0
 801265e:	d00a      	beq.n	8012676 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012666:	2b00      	cmp	r3, #0
 8012668:	d105      	bne.n	8012676 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	4798      	blx	r3
    handled = 1UL;
 8012672:	2301      	movs	r3, #1
 8012674:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8012676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012678:	2b00      	cmp	r3, #0
 801267a:	f040 8147 	bne.w	801290c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	f003 0308 	and.w	r3, r3, #8
 8012684:	2b00      	cmp	r3, #0
 8012686:	f000 808b 	beq.w	80127a0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	699a      	ldr	r2, [r3, #24]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f042 0208 	orr.w	r2, r2, #8
 8012698:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	699a      	ldr	r2, [r3, #24]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f042 0210 	orr.w	r2, r2, #16
 80126a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	699a      	ldr	r2, [r3, #24]
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80126b8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	691a      	ldr	r2, [r3, #16]
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	f022 0208 	bic.w	r2, r2, #8
 80126c8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	689b      	ldr	r3, [r3, #8]
 80126d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d13d      	bne.n	8012754 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80126d8:	e036      	b.n	8012748 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	2b0f      	cmp	r3, #15
 80126e0:	d90b      	bls.n	80126fa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80126ec:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126f2:	1d1a      	adds	r2, r3, #4
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	665a      	str	r2, [r3, #100]	; 0x64
 80126f8:	e01d      	b.n	8012736 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	68db      	ldr	r3, [r3, #12]
 80126fe:	2b07      	cmp	r3, #7
 8012700:	d90b      	bls.n	801271a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012706:	68fa      	ldr	r2, [r7, #12]
 8012708:	8812      	ldrh	r2, [r2, #0]
 801270a:	b292      	uxth	r2, r2
 801270c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012712:	1c9a      	adds	r2, r3, #2
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	665a      	str	r2, [r3, #100]	; 0x64
 8012718:	e00d      	b.n	8012736 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012726:	7812      	ldrb	r2, [r2, #0]
 8012728:	b2d2      	uxtb	r2, r2
 801272a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012730:	1c5a      	adds	r2, r3, #1
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801273c:	b29b      	uxth	r3, r3
 801273e:	3b01      	subs	r3, #1
 8012740:	b29a      	uxth	r2, r3
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801274e:	b29b      	uxth	r3, r3
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1c2      	bne.n	80126da <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f000 f98f 	bl	8012a78 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2201      	movs	r2, #1
 801275e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012768:	2b00      	cmp	r3, #0
 801276a:	d003      	beq.n	8012774 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f000 f901 	bl	8012974 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012772:	e0d0      	b.n	8012916 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012774:	7cfb      	ldrb	r3, [r7, #19]
 8012776:	2b05      	cmp	r3, #5
 8012778:	d103      	bne.n	8012782 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f000 f8e6 	bl	801294c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012780:	e0c6      	b.n	8012910 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012782:	7cfb      	ldrb	r3, [r7, #19]
 8012784:	2b04      	cmp	r3, #4
 8012786:	d103      	bne.n	8012790 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 f8d5 	bl	8012938 <HAL_SPI_RxCpltCallback>
    return;
 801278e:	e0bf      	b.n	8012910 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012790:	7cfb      	ldrb	r3, [r7, #19]
 8012792:	2b03      	cmp	r3, #3
 8012794:	f040 80bc 	bne.w	8012910 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 f8c3 	bl	8012924 <HAL_SPI_TxCpltCallback>
    return;
 801279e:	e0b7      	b.n	8012910 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	f000 80b5 	beq.w	8012916 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00f      	beq.n	80127d6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127bc:	f043 0204 	orr.w	r2, r3, #4
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	699a      	ldr	r2, [r3, #24]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80127d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80127d6:	69bb      	ldr	r3, [r7, #24]
 80127d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d00f      	beq.n	8012800 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127e6:	f043 0201 	orr.w	r2, r3, #1
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	699a      	ldr	r2, [r3, #24]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80127fe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00f      	beq.n	801282a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012810:	f043 0208 	orr.w	r2, r3, #8
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	699a      	ldr	r2, [r3, #24]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012828:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801282a:	69bb      	ldr	r3, [r7, #24]
 801282c:	f003 0320 	and.w	r3, r3, #32
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00f      	beq.n	8012854 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801283a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	699a      	ldr	r2, [r3, #24]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f042 0220 	orr.w	r2, r2, #32
 8012852:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801285a:	2b00      	cmp	r3, #0
 801285c:	d05a      	beq.n	8012914 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f022 0201 	bic.w	r2, r2, #1
 801286c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	6919      	ldr	r1, [r3, #16]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	4b28      	ldr	r3, [pc, #160]	; (801291c <HAL_SPI_IRQHandler+0x394>)
 801287a:	400b      	ands	r3, r1
 801287c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012884:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012888:	d138      	bne.n	80128fc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	689a      	ldr	r2, [r3, #8]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012898:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d013      	beq.n	80128ca <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128a6:	4a1e      	ldr	r2, [pc, #120]	; (8012920 <HAL_SPI_IRQHandler+0x398>)
 80128a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7f6 fd4e 	bl	8009350 <HAL_DMA_Abort_IT>
 80128b4:	4603      	mov	r3, r0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d007      	beq.n	80128ca <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d020      	beq.n	8012914 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128d6:	4a12      	ldr	r2, [pc, #72]	; (8012920 <HAL_SPI_IRQHandler+0x398>)
 80128d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128de:	4618      	mov	r0, r3
 80128e0:	f7f6 fd36 	bl	8009350 <HAL_DMA_Abort_IT>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d014      	beq.n	8012914 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80128fa:	e00b      	b.n	8012914 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2201      	movs	r2, #1
 8012900:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f000 f835 	bl	8012974 <HAL_SPI_ErrorCallback>
    return;
 801290a:	e003      	b.n	8012914 <HAL_SPI_IRQHandler+0x38c>
    return;
 801290c:	bf00      	nop
 801290e:	e002      	b.n	8012916 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012910:	bf00      	nop
 8012912:	e000      	b.n	8012916 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012914:	bf00      	nop
  }
}
 8012916:	3728      	adds	r7, #40	; 0x28
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	fffffc94 	.word	0xfffffc94
 8012920:	08012a45 	.word	0x08012a45

08012924 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012940:	bf00      	nop
 8012942:	370c      	adds	r7, #12
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr

0801294c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801294c:	b480      	push	{r7}
 801294e:	b083      	sub	sp, #12
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012954:	bf00      	nop
 8012956:	370c      	adds	r7, #12
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012968:	bf00      	nop
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801297c:	bf00      	nop
 801297e:	370c      	adds	r7, #12
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr

08012988 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012988:	b480      	push	{r7}
 801298a:	b083      	sub	sp, #12
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012990:	bf00      	nop
 8012992:	370c      	adds	r7, #12
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129a8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b07      	cmp	r3, #7
 80129b4:	d011      	beq.n	80129da <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129ba:	69db      	ldr	r3, [r3, #28]
 80129bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80129c0:	d103      	bne.n	80129ca <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80129c2:	68f8      	ldr	r0, [r7, #12]
 80129c4:	f7ff ffb8 	bl	8012938 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80129c8:	e007      	b.n	80129da <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	691a      	ldr	r2, [r3, #16]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	f042 0208 	orr.w	r2, r2, #8
 80129d8:	611a      	str	r2, [r3, #16]
}
 80129da:	bf00      	nop
 80129dc:	3710      	adds	r7, #16
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b084      	sub	sp, #16
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ee:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7ff ffb5 	bl	8012960 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80129f6:	bf00      	nop
 80129f8:	3710      	adds	r7, #16
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b084      	sub	sp, #16
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a0a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7f7 fe1d 	bl	800a64c <HAL_DMA_GetError>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b02      	cmp	r3, #2
 8012a16:	d011      	beq.n	8012a3c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012a18:	68f8      	ldr	r0, [r7, #12]
 8012a1a:	f000 f82d 	bl	8012a78 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a24:	f043 0210 	orr.w	r2, r3, #16
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2201      	movs	r2, #1
 8012a32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012a36:	68f8      	ldr	r0, [r7, #12]
 8012a38:	f7ff ff9c 	bl	8012974 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012a3c:	bf00      	nop
 8012a3e:	3710      	adds	r7, #16
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2200      	movs	r2, #0
 8012a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2201      	movs	r2, #1
 8012a66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	f7ff ff82 	bl	8012974 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012a70:	bf00      	nop
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	695b      	ldr	r3, [r3, #20]
 8012a86:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	699a      	ldr	r2, [r3, #24]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f042 0208 	orr.w	r2, r2, #8
 8012a96:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	699a      	ldr	r2, [r3, #24]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f042 0210 	orr.w	r2, r2, #16
 8012aa6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	f022 0201 	bic.w	r2, r2, #1
 8012ab6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	6919      	ldr	r1, [r3, #16]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	4b3c      	ldr	r3, [pc, #240]	; (8012bb4 <SPI_CloseTransfer+0x13c>)
 8012ac4:	400b      	ands	r3, r1
 8012ac6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	689a      	ldr	r2, [r3, #8]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012ad6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	2b04      	cmp	r3, #4
 8012ae2:	d014      	beq.n	8012b0e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f003 0320 	and.w	r3, r3, #32
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d00f      	beq.n	8012b0e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012af4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	699a      	ldr	r2, [r3, #24]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f042 0220 	orr.w	r2, r2, #32
 8012b0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	2b03      	cmp	r3, #3
 8012b18:	d014      	beq.n	8012b44 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d00f      	beq.n	8012b44 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b2a:	f043 0204 	orr.w	r2, r3, #4
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	699a      	ldr	r2, [r3, #24]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012b42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00f      	beq.n	8012b6e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b54:	f043 0201 	orr.w	r2, r3, #1
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	699a      	ldr	r2, [r3, #24]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00f      	beq.n	8012b98 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b7e:	f043 0208 	orr.w	r2, r3, #8
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	699a      	ldr	r2, [r3, #24]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012ba8:	bf00      	nop
 8012baa:	3714      	adds	r7, #20
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr
 8012bb4:	fffffc90 	.word	0xfffffc90

08012bb8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bc4:	095b      	lsrs	r3, r3, #5
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	3307      	adds	r3, #7
 8012bd6:	08db      	lsrs	r3, r3, #3
 8012bd8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	68fa      	ldr	r2, [r7, #12]
 8012bde:	fb02 f303 	mul.w	r3, r2, r3
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3714      	adds	r7, #20
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr

08012bee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012bee:	b580      	push	{r7, lr}
 8012bf0:	b082      	sub	sp, #8
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d101      	bne.n	8012c00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	e049      	b.n	8012c94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d106      	bne.n	8012c1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f7f2 f969 	bl	8004eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2202      	movs	r2, #2
 8012c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681a      	ldr	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	3304      	adds	r3, #4
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	4610      	mov	r0, r2
 8012c2e:	f000 fe7d 	bl	801392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2201      	movs	r2, #1
 8012c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2201      	movs	r2, #1
 8012c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2201      	movs	r2, #1
 8012c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2201      	movs	r2, #1
 8012c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2201      	movs	r2, #1
 8012c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2201      	movs	r2, #1
 8012c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2201      	movs	r2, #1
 8012c86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012c92:	2300      	movs	r3, #0
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3708      	adds	r7, #8
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	2b01      	cmp	r3, #1
 8012cae:	d001      	beq.n	8012cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e054      	b.n	8012d5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2202      	movs	r2, #2
 8012cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	68da      	ldr	r2, [r3, #12]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f042 0201 	orr.w	r2, r2, #1
 8012cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4a26      	ldr	r2, [pc, #152]	; (8012d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d022      	beq.n	8012d1c <HAL_TIM_Base_Start_IT+0x80>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012cde:	d01d      	beq.n	8012d1c <HAL_TIM_Base_Start_IT+0x80>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	4a22      	ldr	r2, [pc, #136]	; (8012d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8012ce6:	4293      	cmp	r3, r2
 8012ce8:	d018      	beq.n	8012d1c <HAL_TIM_Base_Start_IT+0x80>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	4a21      	ldr	r2, [pc, #132]	; (8012d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8012cf0:	4293      	cmp	r3, r2
 8012cf2:	d013      	beq.n	8012d1c <HAL_TIM_Base_Start_IT+0x80>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	4a1f      	ldr	r2, [pc, #124]	; (8012d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	d00e      	beq.n	8012d1c <HAL_TIM_Base_Start_IT+0x80>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4a1e      	ldr	r2, [pc, #120]	; (8012d7c <HAL_TIM_Base_Start_IT+0xe0>)
 8012d04:	4293      	cmp	r3, r2
 8012d06:	d009      	beq.n	8012d1c <HAL_TIM_Base_Start_IT+0x80>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	4a1c      	ldr	r2, [pc, #112]	; (8012d80 <HAL_TIM_Base_Start_IT+0xe4>)
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d004      	beq.n	8012d1c <HAL_TIM_Base_Start_IT+0x80>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4a1b      	ldr	r2, [pc, #108]	; (8012d84 <HAL_TIM_Base_Start_IT+0xe8>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d115      	bne.n	8012d48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	689a      	ldr	r2, [r3, #8]
 8012d22:	4b19      	ldr	r3, [pc, #100]	; (8012d88 <HAL_TIM_Base_Start_IT+0xec>)
 8012d24:	4013      	ands	r3, r2
 8012d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2b06      	cmp	r3, #6
 8012d2c:	d015      	beq.n	8012d5a <HAL_TIM_Base_Start_IT+0xbe>
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d34:	d011      	beq.n	8012d5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f042 0201 	orr.w	r2, r2, #1
 8012d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d46:	e008      	b.n	8012d5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f042 0201 	orr.w	r2, r2, #1
 8012d56:	601a      	str	r2, [r3, #0]
 8012d58:	e000      	b.n	8012d5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3714      	adds	r7, #20
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	40010000 	.word	0x40010000
 8012d70:	40000400 	.word	0x40000400
 8012d74:	40000800 	.word	0x40000800
 8012d78:	40000c00 	.word	0x40000c00
 8012d7c:	40010400 	.word	0x40010400
 8012d80:	40001800 	.word	0x40001800
 8012d84:	40014000 	.word	0x40014000
 8012d88:	00010007 	.word	0x00010007

08012d8c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d96:	2300      	movs	r3, #0
 8012d98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d109      	bne.n	8012db4 <HAL_TIM_OC_Start_IT+0x28>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012da6:	b2db      	uxtb	r3, r3
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	bf14      	ite	ne
 8012dac:	2301      	movne	r3, #1
 8012dae:	2300      	moveq	r3, #0
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	e03c      	b.n	8012e2e <HAL_TIM_OC_Start_IT+0xa2>
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	2b04      	cmp	r3, #4
 8012db8:	d109      	bne.n	8012dce <HAL_TIM_OC_Start_IT+0x42>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	bf14      	ite	ne
 8012dc6:	2301      	movne	r3, #1
 8012dc8:	2300      	moveq	r3, #0
 8012dca:	b2db      	uxtb	r3, r3
 8012dcc:	e02f      	b.n	8012e2e <HAL_TIM_OC_Start_IT+0xa2>
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	2b08      	cmp	r3, #8
 8012dd2:	d109      	bne.n	8012de8 <HAL_TIM_OC_Start_IT+0x5c>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	bf14      	ite	ne
 8012de0:	2301      	movne	r3, #1
 8012de2:	2300      	moveq	r3, #0
 8012de4:	b2db      	uxtb	r3, r3
 8012de6:	e022      	b.n	8012e2e <HAL_TIM_OC_Start_IT+0xa2>
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	2b0c      	cmp	r3, #12
 8012dec:	d109      	bne.n	8012e02 <HAL_TIM_OC_Start_IT+0x76>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	bf14      	ite	ne
 8012dfa:	2301      	movne	r3, #1
 8012dfc:	2300      	moveq	r3, #0
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	e015      	b.n	8012e2e <HAL_TIM_OC_Start_IT+0xa2>
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	2b10      	cmp	r3, #16
 8012e06:	d109      	bne.n	8012e1c <HAL_TIM_OC_Start_IT+0x90>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	bf14      	ite	ne
 8012e14:	2301      	movne	r3, #1
 8012e16:	2300      	moveq	r3, #0
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	e008      	b.n	8012e2e <HAL_TIM_OC_Start_IT+0xa2>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	bf14      	ite	ne
 8012e28:	2301      	movne	r3, #1
 8012e2a:	2300      	moveq	r3, #0
 8012e2c:	b2db      	uxtb	r3, r3
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d001      	beq.n	8012e36 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012e32:	2301      	movs	r3, #1
 8012e34:	e0ec      	b.n	8013010 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d104      	bne.n	8012e46 <HAL_TIM_OC_Start_IT+0xba>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2202      	movs	r2, #2
 8012e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012e44:	e023      	b.n	8012e8e <HAL_TIM_OC_Start_IT+0x102>
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b04      	cmp	r3, #4
 8012e4a:	d104      	bne.n	8012e56 <HAL_TIM_OC_Start_IT+0xca>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2202      	movs	r2, #2
 8012e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012e54:	e01b      	b.n	8012e8e <HAL_TIM_OC_Start_IT+0x102>
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	2b08      	cmp	r3, #8
 8012e5a:	d104      	bne.n	8012e66 <HAL_TIM_OC_Start_IT+0xda>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2202      	movs	r2, #2
 8012e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012e64:	e013      	b.n	8012e8e <HAL_TIM_OC_Start_IT+0x102>
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	2b0c      	cmp	r3, #12
 8012e6a:	d104      	bne.n	8012e76 <HAL_TIM_OC_Start_IT+0xea>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2202      	movs	r2, #2
 8012e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012e74:	e00b      	b.n	8012e8e <HAL_TIM_OC_Start_IT+0x102>
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	2b10      	cmp	r3, #16
 8012e7a:	d104      	bne.n	8012e86 <HAL_TIM_OC_Start_IT+0xfa>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2202      	movs	r2, #2
 8012e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012e84:	e003      	b.n	8012e8e <HAL_TIM_OC_Start_IT+0x102>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2202      	movs	r2, #2
 8012e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	2b0c      	cmp	r3, #12
 8012e92:	d841      	bhi.n	8012f18 <HAL_TIM_OC_Start_IT+0x18c>
 8012e94:	a201      	add	r2, pc, #4	; (adr r2, 8012e9c <HAL_TIM_OC_Start_IT+0x110>)
 8012e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e9a:	bf00      	nop
 8012e9c:	08012ed1 	.word	0x08012ed1
 8012ea0:	08012f19 	.word	0x08012f19
 8012ea4:	08012f19 	.word	0x08012f19
 8012ea8:	08012f19 	.word	0x08012f19
 8012eac:	08012ee3 	.word	0x08012ee3
 8012eb0:	08012f19 	.word	0x08012f19
 8012eb4:	08012f19 	.word	0x08012f19
 8012eb8:	08012f19 	.word	0x08012f19
 8012ebc:	08012ef5 	.word	0x08012ef5
 8012ec0:	08012f19 	.word	0x08012f19
 8012ec4:	08012f19 	.word	0x08012f19
 8012ec8:	08012f19 	.word	0x08012f19
 8012ecc:	08012f07 	.word	0x08012f07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	68da      	ldr	r2, [r3, #12]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f042 0202 	orr.w	r2, r2, #2
 8012ede:	60da      	str	r2, [r3, #12]
      break;
 8012ee0:	e01d      	b.n	8012f1e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	68da      	ldr	r2, [r3, #12]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f042 0204 	orr.w	r2, r2, #4
 8012ef0:	60da      	str	r2, [r3, #12]
      break;
 8012ef2:	e014      	b.n	8012f1e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	68da      	ldr	r2, [r3, #12]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f042 0208 	orr.w	r2, r2, #8
 8012f02:	60da      	str	r2, [r3, #12]
      break;
 8012f04:	e00b      	b.n	8012f1e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	68da      	ldr	r2, [r3, #12]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	f042 0210 	orr.w	r2, r2, #16
 8012f14:	60da      	str	r2, [r3, #12]
      break;
 8012f16:	e002      	b.n	8012f1e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012f18:	2301      	movs	r3, #1
 8012f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8012f1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f1e:	7bfb      	ldrb	r3, [r7, #15]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d174      	bne.n	801300e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2201      	movs	r2, #1
 8012f2a:	6839      	ldr	r1, [r7, #0]
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f001 f917 	bl	8014160 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	4a38      	ldr	r2, [pc, #224]	; (8013018 <HAL_TIM_OC_Start_IT+0x28c>)
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	d013      	beq.n	8012f64 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4a36      	ldr	r2, [pc, #216]	; (801301c <HAL_TIM_OC_Start_IT+0x290>)
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d00e      	beq.n	8012f64 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	4a35      	ldr	r2, [pc, #212]	; (8013020 <HAL_TIM_OC_Start_IT+0x294>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d009      	beq.n	8012f64 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4a33      	ldr	r2, [pc, #204]	; (8013024 <HAL_TIM_OC_Start_IT+0x298>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d004      	beq.n	8012f64 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	4a32      	ldr	r2, [pc, #200]	; (8013028 <HAL_TIM_OC_Start_IT+0x29c>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	d101      	bne.n	8012f68 <HAL_TIM_OC_Start_IT+0x1dc>
 8012f64:	2301      	movs	r3, #1
 8012f66:	e000      	b.n	8012f6a <HAL_TIM_OC_Start_IT+0x1de>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d007      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4a25      	ldr	r2, [pc, #148]	; (8013018 <HAL_TIM_OC_Start_IT+0x28c>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d022      	beq.n	8012fce <HAL_TIM_OC_Start_IT+0x242>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f90:	d01d      	beq.n	8012fce <HAL_TIM_OC_Start_IT+0x242>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4a25      	ldr	r2, [pc, #148]	; (801302c <HAL_TIM_OC_Start_IT+0x2a0>)
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d018      	beq.n	8012fce <HAL_TIM_OC_Start_IT+0x242>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a23      	ldr	r2, [pc, #140]	; (8013030 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d013      	beq.n	8012fce <HAL_TIM_OC_Start_IT+0x242>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4a22      	ldr	r2, [pc, #136]	; (8013034 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d00e      	beq.n	8012fce <HAL_TIM_OC_Start_IT+0x242>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a19      	ldr	r2, [pc, #100]	; (801301c <HAL_TIM_OC_Start_IT+0x290>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d009      	beq.n	8012fce <HAL_TIM_OC_Start_IT+0x242>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4a1e      	ldr	r2, [pc, #120]	; (8013038 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d004      	beq.n	8012fce <HAL_TIM_OC_Start_IT+0x242>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	4a15      	ldr	r2, [pc, #84]	; (8013020 <HAL_TIM_OC_Start_IT+0x294>)
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	d115      	bne.n	8012ffa <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	689a      	ldr	r2, [r3, #8]
 8012fd4:	4b19      	ldr	r3, [pc, #100]	; (801303c <HAL_TIM_OC_Start_IT+0x2b0>)
 8012fd6:	4013      	ands	r3, r2
 8012fd8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	2b06      	cmp	r3, #6
 8012fde:	d015      	beq.n	801300c <HAL_TIM_OC_Start_IT+0x280>
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fe6:	d011      	beq.n	801300c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f042 0201 	orr.w	r2, r2, #1
 8012ff6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ff8:	e008      	b.n	801300c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	681a      	ldr	r2, [r3, #0]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	f042 0201 	orr.w	r2, r2, #1
 8013008:	601a      	str	r2, [r3, #0]
 801300a:	e000      	b.n	801300e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801300c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013010:	4618      	mov	r0, r3
 8013012:	3710      	adds	r7, #16
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	40010000 	.word	0x40010000
 801301c:	40010400 	.word	0x40010400
 8013020:	40014000 	.word	0x40014000
 8013024:	40014400 	.word	0x40014400
 8013028:	40014800 	.word	0x40014800
 801302c:	40000400 	.word	0x40000400
 8013030:	40000800 	.word	0x40000800
 8013034:	40000c00 	.word	0x40000c00
 8013038:	40001800 	.word	0x40001800
 801303c:	00010007 	.word	0x00010007

08013040 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b084      	sub	sp, #16
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	2b0c      	cmp	r3, #12
 8013052:	d841      	bhi.n	80130d8 <HAL_TIM_OC_Stop_IT+0x98>
 8013054:	a201      	add	r2, pc, #4	; (adr r2, 801305c <HAL_TIM_OC_Stop_IT+0x1c>)
 8013056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801305a:	bf00      	nop
 801305c:	08013091 	.word	0x08013091
 8013060:	080130d9 	.word	0x080130d9
 8013064:	080130d9 	.word	0x080130d9
 8013068:	080130d9 	.word	0x080130d9
 801306c:	080130a3 	.word	0x080130a3
 8013070:	080130d9 	.word	0x080130d9
 8013074:	080130d9 	.word	0x080130d9
 8013078:	080130d9 	.word	0x080130d9
 801307c:	080130b5 	.word	0x080130b5
 8013080:	080130d9 	.word	0x080130d9
 8013084:	080130d9 	.word	0x080130d9
 8013088:	080130d9 	.word	0x080130d9
 801308c:	080130c7 	.word	0x080130c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	68da      	ldr	r2, [r3, #12]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f022 0202 	bic.w	r2, r2, #2
 801309e:	60da      	str	r2, [r3, #12]
      break;
 80130a0:	e01d      	b.n	80130de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	68da      	ldr	r2, [r3, #12]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f022 0204 	bic.w	r2, r2, #4
 80130b0:	60da      	str	r2, [r3, #12]
      break;
 80130b2:	e014      	b.n	80130de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	68da      	ldr	r2, [r3, #12]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f022 0208 	bic.w	r2, r2, #8
 80130c2:	60da      	str	r2, [r3, #12]
      break;
 80130c4:	e00b      	b.n	80130de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	68da      	ldr	r2, [r3, #12]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f022 0210 	bic.w	r2, r2, #16
 80130d4:	60da      	str	r2, [r3, #12]
      break;
 80130d6:	e002      	b.n	80130de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80130d8:	2301      	movs	r3, #1
 80130da:	73fb      	strb	r3, [r7, #15]
      break;
 80130dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80130de:	7bfb      	ldrb	r3, [r7, #15]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	f040 8081 	bne.w	80131e8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	2200      	movs	r2, #0
 80130ec:	6839      	ldr	r1, [r7, #0]
 80130ee:	4618      	mov	r0, r3
 80130f0:	f001 f836 	bl	8014160 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4a3e      	ldr	r2, [pc, #248]	; (80131f4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d013      	beq.n	8013126 <HAL_TIM_OC_Stop_IT+0xe6>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4a3d      	ldr	r2, [pc, #244]	; (80131f8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d00e      	beq.n	8013126 <HAL_TIM_OC_Stop_IT+0xe6>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a3b      	ldr	r2, [pc, #236]	; (80131fc <HAL_TIM_OC_Stop_IT+0x1bc>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d009      	beq.n	8013126 <HAL_TIM_OC_Stop_IT+0xe6>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4a3a      	ldr	r2, [pc, #232]	; (8013200 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d004      	beq.n	8013126 <HAL_TIM_OC_Stop_IT+0xe6>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a38      	ldr	r2, [pc, #224]	; (8013204 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d101      	bne.n	801312a <HAL_TIM_OC_Stop_IT+0xea>
 8013126:	2301      	movs	r3, #1
 8013128:	e000      	b.n	801312c <HAL_TIM_OC_Stop_IT+0xec>
 801312a:	2300      	movs	r3, #0
 801312c:	2b00      	cmp	r3, #0
 801312e:	d017      	beq.n	8013160 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	6a1a      	ldr	r2, [r3, #32]
 8013136:	f241 1311 	movw	r3, #4369	; 0x1111
 801313a:	4013      	ands	r3, r2
 801313c:	2b00      	cmp	r3, #0
 801313e:	d10f      	bne.n	8013160 <HAL_TIM_OC_Stop_IT+0x120>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	6a1a      	ldr	r2, [r3, #32]
 8013146:	f240 4344 	movw	r3, #1092	; 0x444
 801314a:	4013      	ands	r3, r2
 801314c:	2b00      	cmp	r3, #0
 801314e:	d107      	bne.n	8013160 <HAL_TIM_OC_Stop_IT+0x120>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801315e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	6a1a      	ldr	r2, [r3, #32]
 8013166:	f241 1311 	movw	r3, #4369	; 0x1111
 801316a:	4013      	ands	r3, r2
 801316c:	2b00      	cmp	r3, #0
 801316e:	d10f      	bne.n	8013190 <HAL_TIM_OC_Stop_IT+0x150>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	6a1a      	ldr	r2, [r3, #32]
 8013176:	f240 4344 	movw	r3, #1092	; 0x444
 801317a:	4013      	ands	r3, r2
 801317c:	2b00      	cmp	r3, #0
 801317e:	d107      	bne.n	8013190 <HAL_TIM_OC_Stop_IT+0x150>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f022 0201 	bic.w	r2, r2, #1
 801318e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d104      	bne.n	80131a0 <HAL_TIM_OC_Stop_IT+0x160>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2201      	movs	r2, #1
 801319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801319e:	e023      	b.n	80131e8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	2b04      	cmp	r3, #4
 80131a4:	d104      	bne.n	80131b0 <HAL_TIM_OC_Stop_IT+0x170>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2201      	movs	r2, #1
 80131aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80131ae:	e01b      	b.n	80131e8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	2b08      	cmp	r3, #8
 80131b4:	d104      	bne.n	80131c0 <HAL_TIM_OC_Stop_IT+0x180>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2201      	movs	r2, #1
 80131ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80131be:	e013      	b.n	80131e8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	2b0c      	cmp	r3, #12
 80131c4:	d104      	bne.n	80131d0 <HAL_TIM_OC_Stop_IT+0x190>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2201      	movs	r2, #1
 80131ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80131ce:	e00b      	b.n	80131e8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	2b10      	cmp	r3, #16
 80131d4:	d104      	bne.n	80131e0 <HAL_TIM_OC_Stop_IT+0x1a0>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2201      	movs	r2, #1
 80131da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80131de:	e003      	b.n	80131e8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2201      	movs	r2, #1
 80131e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80131e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3710      	adds	r7, #16
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	40010000 	.word	0x40010000
 80131f8:	40010400 	.word	0x40010400
 80131fc:	40014000 	.word	0x40014000
 8013200:	40014400 	.word	0x40014400
 8013204:	40014800 	.word	0x40014800

08013208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013216:	2301      	movs	r3, #1
 8013218:	e049      	b.n	80132ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013220:	b2db      	uxtb	r3, r3
 8013222:	2b00      	cmp	r3, #0
 8013224:	d106      	bne.n	8013234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2200      	movs	r2, #0
 801322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f000 f841 	bl	80132b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2202      	movs	r2, #2
 8013238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	3304      	adds	r3, #4
 8013244:	4619      	mov	r1, r3
 8013246:	4610      	mov	r0, r2
 8013248:	f000 fb70 	bl	801392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2201      	movs	r2, #1
 8013250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2201      	movs	r2, #1
 8013258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2201      	movs	r2, #1
 8013260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2201      	movs	r2, #1
 8013268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2201      	movs	r2, #1
 8013278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2201      	movs	r2, #1
 8013280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2201      	movs	r2, #1
 8013288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2201      	movs	r2, #1
 8013290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2201      	movs	r2, #1
 8013298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2201      	movs	r2, #1
 80132a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2201      	movs	r2, #1
 80132a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3708      	adds	r7, #8
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80132b6:	b480      	push	{r7}
 80132b8:	b083      	sub	sp, #12
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80132be:	bf00      	nop
 80132c0:	370c      	adds	r7, #12
 80132c2:	46bd      	mov	sp, r7
 80132c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c8:	4770      	bx	lr

080132ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b084      	sub	sp, #16
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	691b      	ldr	r3, [r3, #16]
 80132e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	f003 0302 	and.w	r3, r3, #2
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d020      	beq.n	801332e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	f003 0302 	and.w	r3, r3, #2
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d01b      	beq.n	801332e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f06f 0202 	mvn.w	r2, #2
 80132fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2201      	movs	r2, #1
 8013304:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	699b      	ldr	r3, [r3, #24]
 801330c:	f003 0303 	and.w	r3, r3, #3
 8013310:	2b00      	cmp	r3, #0
 8013312:	d003      	beq.n	801331c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f000 faeb 	bl	80138f0 <HAL_TIM_IC_CaptureCallback>
 801331a:	e005      	b.n	8013328 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f7ef fd09 	bl	8002d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f000 faee 	bl	8013904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2200      	movs	r2, #0
 801332c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	f003 0304 	and.w	r3, r3, #4
 8013334:	2b00      	cmp	r3, #0
 8013336:	d020      	beq.n	801337a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f003 0304 	and.w	r3, r3, #4
 801333e:	2b00      	cmp	r3, #0
 8013340:	d01b      	beq.n	801337a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f06f 0204 	mvn.w	r2, #4
 801334a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2202      	movs	r2, #2
 8013350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	699b      	ldr	r3, [r3, #24]
 8013358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801335c:	2b00      	cmp	r3, #0
 801335e:	d003      	beq.n	8013368 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f000 fac5 	bl	80138f0 <HAL_TIM_IC_CaptureCallback>
 8013366:	e005      	b.n	8013374 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7ef fce3 	bl	8002d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 fac8 	bl	8013904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	f003 0308 	and.w	r3, r3, #8
 8013380:	2b00      	cmp	r3, #0
 8013382:	d020      	beq.n	80133c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	f003 0308 	and.w	r3, r3, #8
 801338a:	2b00      	cmp	r3, #0
 801338c:	d01b      	beq.n	80133c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f06f 0208 	mvn.w	r2, #8
 8013396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2204      	movs	r2, #4
 801339c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	69db      	ldr	r3, [r3, #28]
 80133a4:	f003 0303 	and.w	r3, r3, #3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d003      	beq.n	80133b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 fa9f 	bl	80138f0 <HAL_TIM_IC_CaptureCallback>
 80133b2:	e005      	b.n	80133c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7ef fcbd 	bl	8002d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f000 faa2 	bl	8013904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2200      	movs	r2, #0
 80133c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	f003 0310 	and.w	r3, r3, #16
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d020      	beq.n	8013412 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	f003 0310 	and.w	r3, r3, #16
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d01b      	beq.n	8013412 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f06f 0210 	mvn.w	r2, #16
 80133e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2208      	movs	r2, #8
 80133e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	69db      	ldr	r3, [r3, #28]
 80133f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d003      	beq.n	8013400 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f000 fa79 	bl	80138f0 <HAL_TIM_IC_CaptureCallback>
 80133fe:	e005      	b.n	801340c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7ef fc97 	bl	8002d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f000 fa7c 	bl	8013904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2200      	movs	r2, #0
 8013410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	f003 0301 	and.w	r3, r3, #1
 8013418:	2b00      	cmp	r3, #0
 801341a:	d00c      	beq.n	8013436 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	f003 0301 	and.w	r3, r3, #1
 8013422:	2b00      	cmp	r3, #0
 8013424:	d007      	beq.n	8013436 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	f06f 0201 	mvn.w	r2, #1
 801342e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7f0 fb55 	bl	8003ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801343c:	2b00      	cmp	r3, #0
 801343e:	d104      	bne.n	801344a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013446:	2b00      	cmp	r3, #0
 8013448:	d00c      	beq.n	8013464 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013450:	2b00      	cmp	r3, #0
 8013452:	d007      	beq.n	8013464 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 801345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f000 ffba 	bl	80143d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801346a:	2b00      	cmp	r3, #0
 801346c:	d00c      	beq.n	8013488 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013474:	2b00      	cmp	r3, #0
 8013476:	d007      	beq.n	8013488 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f000 ffb2 	bl	80143ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801348e:	2b00      	cmp	r3, #0
 8013490:	d00c      	beq.n	80134ac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013498:	2b00      	cmp	r3, #0
 801349a:	d007      	beq.n	80134ac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80134a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f000 fa36 	bl	8013918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	f003 0320 	and.w	r3, r3, #32
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d00c      	beq.n	80134d0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	f003 0320 	and.w	r3, r3, #32
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d007      	beq.n	80134d0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f06f 0220 	mvn.w	r2, #32
 80134c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f000 ff7a 	bl	80143c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80134d0:	bf00      	nop
 80134d2:	3710      	adds	r7, #16
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80134e4:	2300      	movs	r3, #0
 80134e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80134ee:	2b01      	cmp	r3, #1
 80134f0:	d101      	bne.n	80134f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80134f2:	2302      	movs	r3, #2
 80134f4:	e0ff      	b.n	80136f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2201      	movs	r2, #1
 80134fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2b14      	cmp	r3, #20
 8013502:	f200 80f0 	bhi.w	80136e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013506:	a201      	add	r2, pc, #4	; (adr r2, 801350c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801350c:	08013561 	.word	0x08013561
 8013510:	080136e7 	.word	0x080136e7
 8013514:	080136e7 	.word	0x080136e7
 8013518:	080136e7 	.word	0x080136e7
 801351c:	080135a1 	.word	0x080135a1
 8013520:	080136e7 	.word	0x080136e7
 8013524:	080136e7 	.word	0x080136e7
 8013528:	080136e7 	.word	0x080136e7
 801352c:	080135e3 	.word	0x080135e3
 8013530:	080136e7 	.word	0x080136e7
 8013534:	080136e7 	.word	0x080136e7
 8013538:	080136e7 	.word	0x080136e7
 801353c:	08013623 	.word	0x08013623
 8013540:	080136e7 	.word	0x080136e7
 8013544:	080136e7 	.word	0x080136e7
 8013548:	080136e7 	.word	0x080136e7
 801354c:	08013665 	.word	0x08013665
 8013550:	080136e7 	.word	0x080136e7
 8013554:	080136e7 	.word	0x080136e7
 8013558:	080136e7 	.word	0x080136e7
 801355c:	080136a5 	.word	0x080136a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	68b9      	ldr	r1, [r7, #8]
 8013566:	4618      	mov	r0, r3
 8013568:	f000 fa86 	bl	8013a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	699a      	ldr	r2, [r3, #24]
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f042 0208 	orr.w	r2, r2, #8
 801357a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	699a      	ldr	r2, [r3, #24]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f022 0204 	bic.w	r2, r2, #4
 801358a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	6999      	ldr	r1, [r3, #24]
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	691a      	ldr	r2, [r3, #16]
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	430a      	orrs	r2, r1
 801359c:	619a      	str	r2, [r3, #24]
      break;
 801359e:	e0a5      	b.n	80136ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	68b9      	ldr	r1, [r7, #8]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f000 faf6 	bl	8013b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	699a      	ldr	r2, [r3, #24]
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80135ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	699a      	ldr	r2, [r3, #24]
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80135ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	6999      	ldr	r1, [r3, #24]
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	691b      	ldr	r3, [r3, #16]
 80135d6:	021a      	lsls	r2, r3, #8
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	430a      	orrs	r2, r1
 80135de:	619a      	str	r2, [r3, #24]
      break;
 80135e0:	e084      	b.n	80136ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	68b9      	ldr	r1, [r7, #8]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 fb5f 	bl	8013cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	69da      	ldr	r2, [r3, #28]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	f042 0208 	orr.w	r2, r2, #8
 80135fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	69da      	ldr	r2, [r3, #28]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f022 0204 	bic.w	r2, r2, #4
 801360c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	69d9      	ldr	r1, [r3, #28]
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	691a      	ldr	r2, [r3, #16]
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	430a      	orrs	r2, r1
 801361e:	61da      	str	r2, [r3, #28]
      break;
 8013620:	e064      	b.n	80136ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	68b9      	ldr	r1, [r7, #8]
 8013628:	4618      	mov	r0, r3
 801362a:	f000 fbc7 	bl	8013dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	69da      	ldr	r2, [r3, #28]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801363c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	69da      	ldr	r2, [r3, #28]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801364c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	69d9      	ldr	r1, [r3, #28]
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	691b      	ldr	r3, [r3, #16]
 8013658:	021a      	lsls	r2, r3, #8
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	430a      	orrs	r2, r1
 8013660:	61da      	str	r2, [r3, #28]
      break;
 8013662:	e043      	b.n	80136ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	68b9      	ldr	r1, [r7, #8]
 801366a:	4618      	mov	r0, r3
 801366c:	f000 fc10 	bl	8013e90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f042 0208 	orr.w	r2, r2, #8
 801367e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f022 0204 	bic.w	r2, r2, #4
 801368e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	691a      	ldr	r2, [r3, #16]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	430a      	orrs	r2, r1
 80136a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80136a2:	e023      	b.n	80136ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	68b9      	ldr	r1, [r7, #8]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f000 fc54 	bl	8013f58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80136be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80136ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	691b      	ldr	r3, [r3, #16]
 80136da:	021a      	lsls	r2, r3, #8
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	430a      	orrs	r2, r1
 80136e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80136e4:	e002      	b.n	80136ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80136e6:	2301      	movs	r3, #1
 80136e8:	75fb      	strb	r3, [r7, #23]
      break;
 80136ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80136f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3718      	adds	r7, #24
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop

08013700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801370a:	2300      	movs	r3, #0
 801370c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013714:	2b01      	cmp	r3, #1
 8013716:	d101      	bne.n	801371c <HAL_TIM_ConfigClockSource+0x1c>
 8013718:	2302      	movs	r3, #2
 801371a:	e0dc      	b.n	80138d6 <HAL_TIM_ConfigClockSource+0x1d6>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2201      	movs	r2, #1
 8013720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2202      	movs	r2, #2
 8013728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013734:	68ba      	ldr	r2, [r7, #8]
 8013736:	4b6a      	ldr	r3, [pc, #424]	; (80138e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013738:	4013      	ands	r3, r2
 801373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	68ba      	ldr	r2, [r7, #8]
 801374a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	4a64      	ldr	r2, [pc, #400]	; (80138e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013752:	4293      	cmp	r3, r2
 8013754:	f000 80a9 	beq.w	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 8013758:	4a62      	ldr	r2, [pc, #392]	; (80138e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801375a:	4293      	cmp	r3, r2
 801375c:	f200 80ae 	bhi.w	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 8013760:	4a61      	ldr	r2, [pc, #388]	; (80138e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013762:	4293      	cmp	r3, r2
 8013764:	f000 80a1 	beq.w	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 8013768:	4a5f      	ldr	r2, [pc, #380]	; (80138e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801376a:	4293      	cmp	r3, r2
 801376c:	f200 80a6 	bhi.w	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 8013770:	4a5e      	ldr	r2, [pc, #376]	; (80138ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8013772:	4293      	cmp	r3, r2
 8013774:	f000 8099 	beq.w	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 8013778:	4a5c      	ldr	r2, [pc, #368]	; (80138ec <HAL_TIM_ConfigClockSource+0x1ec>)
 801377a:	4293      	cmp	r3, r2
 801377c:	f200 809e 	bhi.w	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 8013780:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013784:	f000 8091 	beq.w	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 8013788:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801378c:	f200 8096 	bhi.w	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 8013790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013794:	f000 8089 	beq.w	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 8013798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801379c:	f200 808e 	bhi.w	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80137a4:	d03e      	beq.n	8013824 <HAL_TIM_ConfigClockSource+0x124>
 80137a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80137aa:	f200 8087 	bhi.w	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137b2:	f000 8086 	beq.w	80138c2 <HAL_TIM_ConfigClockSource+0x1c2>
 80137b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137ba:	d87f      	bhi.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137bc:	2b70      	cmp	r3, #112	; 0x70
 80137be:	d01a      	beq.n	80137f6 <HAL_TIM_ConfigClockSource+0xf6>
 80137c0:	2b70      	cmp	r3, #112	; 0x70
 80137c2:	d87b      	bhi.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137c4:	2b60      	cmp	r3, #96	; 0x60
 80137c6:	d050      	beq.n	801386a <HAL_TIM_ConfigClockSource+0x16a>
 80137c8:	2b60      	cmp	r3, #96	; 0x60
 80137ca:	d877      	bhi.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137cc:	2b50      	cmp	r3, #80	; 0x50
 80137ce:	d03c      	beq.n	801384a <HAL_TIM_ConfigClockSource+0x14a>
 80137d0:	2b50      	cmp	r3, #80	; 0x50
 80137d2:	d873      	bhi.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137d4:	2b40      	cmp	r3, #64	; 0x40
 80137d6:	d058      	beq.n	801388a <HAL_TIM_ConfigClockSource+0x18a>
 80137d8:	2b40      	cmp	r3, #64	; 0x40
 80137da:	d86f      	bhi.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137dc:	2b30      	cmp	r3, #48	; 0x30
 80137de:	d064      	beq.n	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 80137e0:	2b30      	cmp	r3, #48	; 0x30
 80137e2:	d86b      	bhi.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137e4:	2b20      	cmp	r3, #32
 80137e6:	d060      	beq.n	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 80137e8:	2b20      	cmp	r3, #32
 80137ea:	d867      	bhi.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d05c      	beq.n	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 80137f0:	2b10      	cmp	r3, #16
 80137f2:	d05a      	beq.n	80138aa <HAL_TIM_ConfigClockSource+0x1aa>
 80137f4:	e062      	b.n	80138bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6818      	ldr	r0, [r3, #0]
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	6899      	ldr	r1, [r3, #8]
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	685a      	ldr	r2, [r3, #4]
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	f000 fc8b 	bl	8014120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	689b      	ldr	r3, [r3, #8]
 8013810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	68ba      	ldr	r2, [r7, #8]
 8013820:	609a      	str	r2, [r3, #8]
      break;
 8013822:	e04f      	b.n	80138c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6818      	ldr	r0, [r3, #0]
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	6899      	ldr	r1, [r3, #8]
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	685a      	ldr	r2, [r3, #4]
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	f000 fc74 	bl	8014120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	689a      	ldr	r2, [r3, #8]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013846:	609a      	str	r2, [r3, #8]
      break;
 8013848:	e03c      	b.n	80138c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6818      	ldr	r0, [r3, #0]
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	6859      	ldr	r1, [r3, #4]
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	461a      	mov	r2, r3
 8013858:	f000 fbe4 	bl	8014024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2150      	movs	r1, #80	; 0x50
 8013862:	4618      	mov	r0, r3
 8013864:	f000 fc3e 	bl	80140e4 <TIM_ITRx_SetConfig>
      break;
 8013868:	e02c      	b.n	80138c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6818      	ldr	r0, [r3, #0]
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	6859      	ldr	r1, [r3, #4]
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	68db      	ldr	r3, [r3, #12]
 8013876:	461a      	mov	r2, r3
 8013878:	f000 fc03 	bl	8014082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	2160      	movs	r1, #96	; 0x60
 8013882:	4618      	mov	r0, r3
 8013884:	f000 fc2e 	bl	80140e4 <TIM_ITRx_SetConfig>
      break;
 8013888:	e01c      	b.n	80138c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6818      	ldr	r0, [r3, #0]
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	6859      	ldr	r1, [r3, #4]
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	461a      	mov	r2, r3
 8013898:	f000 fbc4 	bl	8014024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2140      	movs	r1, #64	; 0x40
 80138a2:	4618      	mov	r0, r3
 80138a4:	f000 fc1e 	bl	80140e4 <TIM_ITRx_SetConfig>
      break;
 80138a8:	e00c      	b.n	80138c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	4619      	mov	r1, r3
 80138b4:	4610      	mov	r0, r2
 80138b6:	f000 fc15 	bl	80140e4 <TIM_ITRx_SetConfig>
      break;
 80138ba:	e003      	b.n	80138c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80138bc:	2301      	movs	r3, #1
 80138be:	73fb      	strb	r3, [r7, #15]
      break;
 80138c0:	e000      	b.n	80138c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80138c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2201      	movs	r2, #1
 80138c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2200      	movs	r2, #0
 80138d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80138d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	ffceff88 	.word	0xffceff88
 80138e4:	00100040 	.word	0x00100040
 80138e8:	00100030 	.word	0x00100030
 80138ec:	00100020 	.word	0x00100020

080138f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80138f0:	b480      	push	{r7}
 80138f2:	b083      	sub	sp, #12
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80138f8:	bf00      	nop
 80138fa:	370c      	adds	r7, #12
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr

08013904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801390c:	bf00      	nop
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr

08013918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013918:	b480      	push	{r7}
 801391a:	b083      	sub	sp, #12
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013920:	bf00      	nop
 8013922:	370c      	adds	r7, #12
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr

0801392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801392c:	b480      	push	{r7}
 801392e:	b085      	sub	sp, #20
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	4a46      	ldr	r2, [pc, #280]	; (8013a58 <TIM_Base_SetConfig+0x12c>)
 8013940:	4293      	cmp	r3, r2
 8013942:	d013      	beq.n	801396c <TIM_Base_SetConfig+0x40>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801394a:	d00f      	beq.n	801396c <TIM_Base_SetConfig+0x40>
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4a43      	ldr	r2, [pc, #268]	; (8013a5c <TIM_Base_SetConfig+0x130>)
 8013950:	4293      	cmp	r3, r2
 8013952:	d00b      	beq.n	801396c <TIM_Base_SetConfig+0x40>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	4a42      	ldr	r2, [pc, #264]	; (8013a60 <TIM_Base_SetConfig+0x134>)
 8013958:	4293      	cmp	r3, r2
 801395a:	d007      	beq.n	801396c <TIM_Base_SetConfig+0x40>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	4a41      	ldr	r2, [pc, #260]	; (8013a64 <TIM_Base_SetConfig+0x138>)
 8013960:	4293      	cmp	r3, r2
 8013962:	d003      	beq.n	801396c <TIM_Base_SetConfig+0x40>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	4a40      	ldr	r2, [pc, #256]	; (8013a68 <TIM_Base_SetConfig+0x13c>)
 8013968:	4293      	cmp	r3, r2
 801396a:	d108      	bne.n	801397e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	4313      	orrs	r3, r2
 801397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4a35      	ldr	r2, [pc, #212]	; (8013a58 <TIM_Base_SetConfig+0x12c>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d01f      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801398c:	d01b      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4a32      	ldr	r2, [pc, #200]	; (8013a5c <TIM_Base_SetConfig+0x130>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d017      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4a31      	ldr	r2, [pc, #196]	; (8013a60 <TIM_Base_SetConfig+0x134>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d013      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4a30      	ldr	r2, [pc, #192]	; (8013a64 <TIM_Base_SetConfig+0x138>)
 80139a2:	4293      	cmp	r3, r2
 80139a4:	d00f      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4a2f      	ldr	r2, [pc, #188]	; (8013a68 <TIM_Base_SetConfig+0x13c>)
 80139aa:	4293      	cmp	r3, r2
 80139ac:	d00b      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4a2e      	ldr	r2, [pc, #184]	; (8013a6c <TIM_Base_SetConfig+0x140>)
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d007      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4a2d      	ldr	r2, [pc, #180]	; (8013a70 <TIM_Base_SetConfig+0x144>)
 80139ba:	4293      	cmp	r3, r2
 80139bc:	d003      	beq.n	80139c6 <TIM_Base_SetConfig+0x9a>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4a2c      	ldr	r2, [pc, #176]	; (8013a74 <TIM_Base_SetConfig+0x148>)
 80139c2:	4293      	cmp	r3, r2
 80139c4:	d108      	bne.n	80139d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80139cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	695b      	ldr	r3, [r3, #20]
 80139e2:	4313      	orrs	r3, r2
 80139e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	689a      	ldr	r2, [r3, #8]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	4a16      	ldr	r2, [pc, #88]	; (8013a58 <TIM_Base_SetConfig+0x12c>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d00f      	beq.n	8013a24 <TIM_Base_SetConfig+0xf8>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	4a18      	ldr	r2, [pc, #96]	; (8013a68 <TIM_Base_SetConfig+0x13c>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d00b      	beq.n	8013a24 <TIM_Base_SetConfig+0xf8>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	4a17      	ldr	r2, [pc, #92]	; (8013a6c <TIM_Base_SetConfig+0x140>)
 8013a10:	4293      	cmp	r3, r2
 8013a12:	d007      	beq.n	8013a24 <TIM_Base_SetConfig+0xf8>
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	4a16      	ldr	r2, [pc, #88]	; (8013a70 <TIM_Base_SetConfig+0x144>)
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d003      	beq.n	8013a24 <TIM_Base_SetConfig+0xf8>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	4a15      	ldr	r2, [pc, #84]	; (8013a74 <TIM_Base_SetConfig+0x148>)
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d103      	bne.n	8013a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	691a      	ldr	r2, [r3, #16]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2201      	movs	r2, #1
 8013a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	691b      	ldr	r3, [r3, #16]
 8013a36:	f003 0301 	and.w	r3, r3, #1
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d105      	bne.n	8013a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	691b      	ldr	r3, [r3, #16]
 8013a42:	f023 0201 	bic.w	r2, r3, #1
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	611a      	str	r2, [r3, #16]
  }
}
 8013a4a:	bf00      	nop
 8013a4c:	3714      	adds	r7, #20
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr
 8013a56:	bf00      	nop
 8013a58:	40010000 	.word	0x40010000
 8013a5c:	40000400 	.word	0x40000400
 8013a60:	40000800 	.word	0x40000800
 8013a64:	40000c00 	.word	0x40000c00
 8013a68:	40010400 	.word	0x40010400
 8013a6c:	40014000 	.word	0x40014000
 8013a70:	40014400 	.word	0x40014400
 8013a74:	40014800 	.word	0x40014800

08013a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b087      	sub	sp, #28
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6a1b      	ldr	r3, [r3, #32]
 8013a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6a1b      	ldr	r3, [r3, #32]
 8013a8c:	f023 0201 	bic.w	r2, r3, #1
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	699b      	ldr	r3, [r3, #24]
 8013a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	4b37      	ldr	r3, [pc, #220]	; (8013b80 <TIM_OC1_SetConfig+0x108>)
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f023 0303 	bic.w	r3, r3, #3
 8013aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	f023 0302 	bic.w	r3, r3, #2
 8013ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	689b      	ldr	r3, [r3, #8]
 8013ac6:	697a      	ldr	r2, [r7, #20]
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	4a2d      	ldr	r2, [pc, #180]	; (8013b84 <TIM_OC1_SetConfig+0x10c>)
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	d00f      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	4a2c      	ldr	r2, [pc, #176]	; (8013b88 <TIM_OC1_SetConfig+0x110>)
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d00b      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	4a2b      	ldr	r2, [pc, #172]	; (8013b8c <TIM_OC1_SetConfig+0x114>)
 8013ae0:	4293      	cmp	r3, r2
 8013ae2:	d007      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	4a2a      	ldr	r2, [pc, #168]	; (8013b90 <TIM_OC1_SetConfig+0x118>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d003      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	4a29      	ldr	r2, [pc, #164]	; (8013b94 <TIM_OC1_SetConfig+0x11c>)
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d10c      	bne.n	8013b0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	f023 0308 	bic.w	r3, r3, #8
 8013afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	697a      	ldr	r2, [r7, #20]
 8013b02:	4313      	orrs	r3, r2
 8013b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	f023 0304 	bic.w	r3, r3, #4
 8013b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	4a1c      	ldr	r2, [pc, #112]	; (8013b84 <TIM_OC1_SetConfig+0x10c>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d00f      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4a1b      	ldr	r2, [pc, #108]	; (8013b88 <TIM_OC1_SetConfig+0x110>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d00b      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4a1a      	ldr	r2, [pc, #104]	; (8013b8c <TIM_OC1_SetConfig+0x114>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d007      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	4a19      	ldr	r2, [pc, #100]	; (8013b90 <TIM_OC1_SetConfig+0x118>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d003      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4a18      	ldr	r2, [pc, #96]	; (8013b94 <TIM_OC1_SetConfig+0x11c>)
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d111      	bne.n	8013b5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	695b      	ldr	r3, [r3, #20]
 8013b4a:	693a      	ldr	r2, [r7, #16]
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	699b      	ldr	r3, [r3, #24]
 8013b54:	693a      	ldr	r2, [r7, #16]
 8013b56:	4313      	orrs	r3, r2
 8013b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	693a      	ldr	r2, [r7, #16]
 8013b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	685a      	ldr	r2, [r3, #4]
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	697a      	ldr	r2, [r7, #20]
 8013b72:	621a      	str	r2, [r3, #32]
}
 8013b74:	bf00      	nop
 8013b76:	371c      	adds	r7, #28
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr
 8013b80:	fffeff8f 	.word	0xfffeff8f
 8013b84:	40010000 	.word	0x40010000
 8013b88:	40010400 	.word	0x40010400
 8013b8c:	40014000 	.word	0x40014000
 8013b90:	40014400 	.word	0x40014400
 8013b94:	40014800 	.word	0x40014800

08013b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b087      	sub	sp, #28
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6a1b      	ldr	r3, [r3, #32]
 8013ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6a1b      	ldr	r3, [r3, #32]
 8013bac:	f023 0210 	bic.w	r2, r3, #16
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	699b      	ldr	r3, [r3, #24]
 8013bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	4b34      	ldr	r3, [pc, #208]	; (8013c94 <TIM_OC2_SetConfig+0xfc>)
 8013bc4:	4013      	ands	r3, r2
 8013bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	021b      	lsls	r3, r3, #8
 8013bd6:	68fa      	ldr	r2, [r7, #12]
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	f023 0320 	bic.w	r3, r3, #32
 8013be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	689b      	ldr	r3, [r3, #8]
 8013be8:	011b      	lsls	r3, r3, #4
 8013bea:	697a      	ldr	r2, [r7, #20]
 8013bec:	4313      	orrs	r3, r2
 8013bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	4a29      	ldr	r2, [pc, #164]	; (8013c98 <TIM_OC2_SetConfig+0x100>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d003      	beq.n	8013c00 <TIM_OC2_SetConfig+0x68>
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	4a28      	ldr	r2, [pc, #160]	; (8013c9c <TIM_OC2_SetConfig+0x104>)
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d10d      	bne.n	8013c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	011b      	lsls	r3, r3, #4
 8013c0e:	697a      	ldr	r2, [r7, #20]
 8013c10:	4313      	orrs	r3, r2
 8013c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	4a1e      	ldr	r2, [pc, #120]	; (8013c98 <TIM_OC2_SetConfig+0x100>)
 8013c20:	4293      	cmp	r3, r2
 8013c22:	d00f      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	4a1d      	ldr	r2, [pc, #116]	; (8013c9c <TIM_OC2_SetConfig+0x104>)
 8013c28:	4293      	cmp	r3, r2
 8013c2a:	d00b      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	4a1c      	ldr	r2, [pc, #112]	; (8013ca0 <TIM_OC2_SetConfig+0x108>)
 8013c30:	4293      	cmp	r3, r2
 8013c32:	d007      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	4a1b      	ldr	r2, [pc, #108]	; (8013ca4 <TIM_OC2_SetConfig+0x10c>)
 8013c38:	4293      	cmp	r3, r2
 8013c3a:	d003      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	4a1a      	ldr	r2, [pc, #104]	; (8013ca8 <TIM_OC2_SetConfig+0x110>)
 8013c40:	4293      	cmp	r3, r2
 8013c42:	d113      	bne.n	8013c6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	009b      	lsls	r3, r3, #2
 8013c5a:	693a      	ldr	r2, [r7, #16]
 8013c5c:	4313      	orrs	r3, r2
 8013c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	699b      	ldr	r3, [r3, #24]
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	693a      	ldr	r2, [r7, #16]
 8013c68:	4313      	orrs	r3, r2
 8013c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	693a      	ldr	r2, [r7, #16]
 8013c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	685a      	ldr	r2, [r3, #4]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	697a      	ldr	r2, [r7, #20]
 8013c84:	621a      	str	r2, [r3, #32]
}
 8013c86:	bf00      	nop
 8013c88:	371c      	adds	r7, #28
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c90:	4770      	bx	lr
 8013c92:	bf00      	nop
 8013c94:	feff8fff 	.word	0xfeff8fff
 8013c98:	40010000 	.word	0x40010000
 8013c9c:	40010400 	.word	0x40010400
 8013ca0:	40014000 	.word	0x40014000
 8013ca4:	40014400 	.word	0x40014400
 8013ca8:	40014800 	.word	0x40014800

08013cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b087      	sub	sp, #28
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6a1b      	ldr	r3, [r3, #32]
 8013cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6a1b      	ldr	r3, [r3, #32]
 8013cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	69db      	ldr	r3, [r3, #28]
 8013cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	4b33      	ldr	r3, [pc, #204]	; (8013da4 <TIM_OC3_SetConfig+0xf8>)
 8013cd8:	4013      	ands	r3, r2
 8013cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f023 0303 	bic.w	r3, r3, #3
 8013ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	4313      	orrs	r3, r2
 8013cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	689b      	ldr	r3, [r3, #8]
 8013cfa:	021b      	lsls	r3, r3, #8
 8013cfc:	697a      	ldr	r2, [r7, #20]
 8013cfe:	4313      	orrs	r3, r2
 8013d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	4a28      	ldr	r2, [pc, #160]	; (8013da8 <TIM_OC3_SetConfig+0xfc>)
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d003      	beq.n	8013d12 <TIM_OC3_SetConfig+0x66>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4a27      	ldr	r2, [pc, #156]	; (8013dac <TIM_OC3_SetConfig+0x100>)
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	d10d      	bne.n	8013d2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	68db      	ldr	r3, [r3, #12]
 8013d1e:	021b      	lsls	r3, r3, #8
 8013d20:	697a      	ldr	r2, [r7, #20]
 8013d22:	4313      	orrs	r3, r2
 8013d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4a1d      	ldr	r2, [pc, #116]	; (8013da8 <TIM_OC3_SetConfig+0xfc>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d00f      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4a1c      	ldr	r2, [pc, #112]	; (8013dac <TIM_OC3_SetConfig+0x100>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d00b      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	4a1b      	ldr	r2, [pc, #108]	; (8013db0 <TIM_OC3_SetConfig+0x104>)
 8013d42:	4293      	cmp	r3, r2
 8013d44:	d007      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4a1a      	ldr	r2, [pc, #104]	; (8013db4 <TIM_OC3_SetConfig+0x108>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d003      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4a19      	ldr	r2, [pc, #100]	; (8013db8 <TIM_OC3_SetConfig+0x10c>)
 8013d52:	4293      	cmp	r3, r2
 8013d54:	d113      	bne.n	8013d7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	695b      	ldr	r3, [r3, #20]
 8013d6a:	011b      	lsls	r3, r3, #4
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	699b      	ldr	r3, [r3, #24]
 8013d76:	011b      	lsls	r3, r3, #4
 8013d78:	693a      	ldr	r2, [r7, #16]
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	693a      	ldr	r2, [r7, #16]
 8013d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	68fa      	ldr	r2, [r7, #12]
 8013d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	685a      	ldr	r2, [r3, #4]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	697a      	ldr	r2, [r7, #20]
 8013d96:	621a      	str	r2, [r3, #32]
}
 8013d98:	bf00      	nop
 8013d9a:	371c      	adds	r7, #28
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr
 8013da4:	fffeff8f 	.word	0xfffeff8f
 8013da8:	40010000 	.word	0x40010000
 8013dac:	40010400 	.word	0x40010400
 8013db0:	40014000 	.word	0x40014000
 8013db4:	40014400 	.word	0x40014400
 8013db8:	40014800 	.word	0x40014800

08013dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b087      	sub	sp, #28
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6a1b      	ldr	r3, [r3, #32]
 8013dca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6a1b      	ldr	r3, [r3, #32]
 8013dd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	69db      	ldr	r3, [r3, #28]
 8013de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	4b24      	ldr	r3, [pc, #144]	; (8013e78 <TIM_OC4_SetConfig+0xbc>)
 8013de8:	4013      	ands	r3, r2
 8013dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	021b      	lsls	r3, r3, #8
 8013dfa:	68fa      	ldr	r2, [r7, #12]
 8013dfc:	4313      	orrs	r3, r2
 8013dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	689b      	ldr	r3, [r3, #8]
 8013e0c:	031b      	lsls	r3, r3, #12
 8013e0e:	693a      	ldr	r2, [r7, #16]
 8013e10:	4313      	orrs	r3, r2
 8013e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4a19      	ldr	r2, [pc, #100]	; (8013e7c <TIM_OC4_SetConfig+0xc0>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d00f      	beq.n	8013e3c <TIM_OC4_SetConfig+0x80>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	4a18      	ldr	r2, [pc, #96]	; (8013e80 <TIM_OC4_SetConfig+0xc4>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d00b      	beq.n	8013e3c <TIM_OC4_SetConfig+0x80>
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	4a17      	ldr	r2, [pc, #92]	; (8013e84 <TIM_OC4_SetConfig+0xc8>)
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	d007      	beq.n	8013e3c <TIM_OC4_SetConfig+0x80>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	4a16      	ldr	r2, [pc, #88]	; (8013e88 <TIM_OC4_SetConfig+0xcc>)
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d003      	beq.n	8013e3c <TIM_OC4_SetConfig+0x80>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4a15      	ldr	r2, [pc, #84]	; (8013e8c <TIM_OC4_SetConfig+0xd0>)
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d109      	bne.n	8013e50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	695b      	ldr	r3, [r3, #20]
 8013e48:	019b      	lsls	r3, r3, #6
 8013e4a:	697a      	ldr	r2, [r7, #20]
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	697a      	ldr	r2, [r7, #20]
 8013e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	68fa      	ldr	r2, [r7, #12]
 8013e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	685a      	ldr	r2, [r3, #4]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	693a      	ldr	r2, [r7, #16]
 8013e68:	621a      	str	r2, [r3, #32]
}
 8013e6a:	bf00      	nop
 8013e6c:	371c      	adds	r7, #28
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop
 8013e78:	feff8fff 	.word	0xfeff8fff
 8013e7c:	40010000 	.word	0x40010000
 8013e80:	40010400 	.word	0x40010400
 8013e84:	40014000 	.word	0x40014000
 8013e88:	40014400 	.word	0x40014400
 8013e8c:	40014800 	.word	0x40014800

08013e90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b087      	sub	sp, #28
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6a1b      	ldr	r3, [r3, #32]
 8013e9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6a1b      	ldr	r3, [r3, #32]
 8013ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	4b21      	ldr	r3, [pc, #132]	; (8013f40 <TIM_OC5_SetConfig+0xb0>)
 8013ebc:	4013      	ands	r3, r2
 8013ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	041b      	lsls	r3, r3, #16
 8013ed8:	693a      	ldr	r2, [r7, #16]
 8013eda:	4313      	orrs	r3, r2
 8013edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	4a18      	ldr	r2, [pc, #96]	; (8013f44 <TIM_OC5_SetConfig+0xb4>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d00f      	beq.n	8013f06 <TIM_OC5_SetConfig+0x76>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4a17      	ldr	r2, [pc, #92]	; (8013f48 <TIM_OC5_SetConfig+0xb8>)
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d00b      	beq.n	8013f06 <TIM_OC5_SetConfig+0x76>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	4a16      	ldr	r2, [pc, #88]	; (8013f4c <TIM_OC5_SetConfig+0xbc>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d007      	beq.n	8013f06 <TIM_OC5_SetConfig+0x76>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	4a15      	ldr	r2, [pc, #84]	; (8013f50 <TIM_OC5_SetConfig+0xc0>)
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d003      	beq.n	8013f06 <TIM_OC5_SetConfig+0x76>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	4a14      	ldr	r2, [pc, #80]	; (8013f54 <TIM_OC5_SetConfig+0xc4>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d109      	bne.n	8013f1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	695b      	ldr	r3, [r3, #20]
 8013f12:	021b      	lsls	r3, r3, #8
 8013f14:	697a      	ldr	r2, [r7, #20]
 8013f16:	4313      	orrs	r3, r2
 8013f18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	697a      	ldr	r2, [r7, #20]
 8013f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	68fa      	ldr	r2, [r7, #12]
 8013f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	685a      	ldr	r2, [r3, #4]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	693a      	ldr	r2, [r7, #16]
 8013f32:	621a      	str	r2, [r3, #32]
}
 8013f34:	bf00      	nop
 8013f36:	371c      	adds	r7, #28
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr
 8013f40:	fffeff8f 	.word	0xfffeff8f
 8013f44:	40010000 	.word	0x40010000
 8013f48:	40010400 	.word	0x40010400
 8013f4c:	40014000 	.word	0x40014000
 8013f50:	40014400 	.word	0x40014400
 8013f54:	40014800 	.word	0x40014800

08013f58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b087      	sub	sp, #28
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6a1b      	ldr	r3, [r3, #32]
 8013f66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6a1b      	ldr	r3, [r3, #32]
 8013f6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013f80:	68fa      	ldr	r2, [r7, #12]
 8013f82:	4b22      	ldr	r3, [pc, #136]	; (801400c <TIM_OC6_SetConfig+0xb4>)
 8013f84:	4013      	ands	r3, r2
 8013f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	021b      	lsls	r3, r3, #8
 8013f8e:	68fa      	ldr	r2, [r7, #12]
 8013f90:	4313      	orrs	r3, r2
 8013f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	051b      	lsls	r3, r3, #20
 8013fa2:	693a      	ldr	r2, [r7, #16]
 8013fa4:	4313      	orrs	r3, r2
 8013fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	4a19      	ldr	r2, [pc, #100]	; (8014010 <TIM_OC6_SetConfig+0xb8>)
 8013fac:	4293      	cmp	r3, r2
 8013fae:	d00f      	beq.n	8013fd0 <TIM_OC6_SetConfig+0x78>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	4a18      	ldr	r2, [pc, #96]	; (8014014 <TIM_OC6_SetConfig+0xbc>)
 8013fb4:	4293      	cmp	r3, r2
 8013fb6:	d00b      	beq.n	8013fd0 <TIM_OC6_SetConfig+0x78>
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	4a17      	ldr	r2, [pc, #92]	; (8014018 <TIM_OC6_SetConfig+0xc0>)
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d007      	beq.n	8013fd0 <TIM_OC6_SetConfig+0x78>
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	4a16      	ldr	r2, [pc, #88]	; (801401c <TIM_OC6_SetConfig+0xc4>)
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d003      	beq.n	8013fd0 <TIM_OC6_SetConfig+0x78>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	4a15      	ldr	r2, [pc, #84]	; (8014020 <TIM_OC6_SetConfig+0xc8>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d109      	bne.n	8013fe4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	695b      	ldr	r3, [r3, #20]
 8013fdc:	029b      	lsls	r3, r3, #10
 8013fde:	697a      	ldr	r2, [r7, #20]
 8013fe0:	4313      	orrs	r3, r2
 8013fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	697a      	ldr	r2, [r7, #20]
 8013fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	68fa      	ldr	r2, [r7, #12]
 8013fee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	685a      	ldr	r2, [r3, #4]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	693a      	ldr	r2, [r7, #16]
 8013ffc:	621a      	str	r2, [r3, #32]
}
 8013ffe:	bf00      	nop
 8014000:	371c      	adds	r7, #28
 8014002:	46bd      	mov	sp, r7
 8014004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop
 801400c:	feff8fff 	.word	0xfeff8fff
 8014010:	40010000 	.word	0x40010000
 8014014:	40010400 	.word	0x40010400
 8014018:	40014000 	.word	0x40014000
 801401c:	40014400 	.word	0x40014400
 8014020:	40014800 	.word	0x40014800

08014024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014024:	b480      	push	{r7}
 8014026:	b087      	sub	sp, #28
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	6a1b      	ldr	r3, [r3, #32]
 8014034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	6a1b      	ldr	r3, [r3, #32]
 801403a:	f023 0201 	bic.w	r2, r3, #1
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	699b      	ldr	r3, [r3, #24]
 8014046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801404e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	011b      	lsls	r3, r3, #4
 8014054:	693a      	ldr	r2, [r7, #16]
 8014056:	4313      	orrs	r3, r2
 8014058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	f023 030a 	bic.w	r3, r3, #10
 8014060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014062:	697a      	ldr	r2, [r7, #20]
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	4313      	orrs	r3, r2
 8014068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	693a      	ldr	r2, [r7, #16]
 801406e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	697a      	ldr	r2, [r7, #20]
 8014074:	621a      	str	r2, [r3, #32]
}
 8014076:	bf00      	nop
 8014078:	371c      	adds	r7, #28
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr

08014082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014082:	b480      	push	{r7}
 8014084:	b087      	sub	sp, #28
 8014086:	af00      	add	r7, sp, #0
 8014088:	60f8      	str	r0, [r7, #12]
 801408a:	60b9      	str	r1, [r7, #8]
 801408c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	6a1b      	ldr	r3, [r3, #32]
 8014092:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	6a1b      	ldr	r3, [r3, #32]
 8014098:	f023 0210 	bic.w	r2, r3, #16
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	699b      	ldr	r3, [r3, #24]
 80140a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80140ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	031b      	lsls	r3, r3, #12
 80140b2:	693a      	ldr	r2, [r7, #16]
 80140b4:	4313      	orrs	r3, r2
 80140b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80140be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	011b      	lsls	r3, r3, #4
 80140c4:	697a      	ldr	r2, [r7, #20]
 80140c6:	4313      	orrs	r3, r2
 80140c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	693a      	ldr	r2, [r7, #16]
 80140ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	697a      	ldr	r2, [r7, #20]
 80140d4:	621a      	str	r2, [r3, #32]
}
 80140d6:	bf00      	nop
 80140d8:	371c      	adds	r7, #28
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr
	...

080140e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80140e4:	b480      	push	{r7}
 80140e6:	b085      	sub	sp, #20
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	689b      	ldr	r3, [r3, #8]
 80140f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80140f4:	68fa      	ldr	r2, [r7, #12]
 80140f6:	4b09      	ldr	r3, [pc, #36]	; (801411c <TIM_ITRx_SetConfig+0x38>)
 80140f8:	4013      	ands	r3, r2
 80140fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80140fc:	683a      	ldr	r2, [r7, #0]
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	4313      	orrs	r3, r2
 8014102:	f043 0307 	orr.w	r3, r3, #7
 8014106:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	68fa      	ldr	r2, [r7, #12]
 801410c:	609a      	str	r2, [r3, #8]
}
 801410e:	bf00      	nop
 8014110:	3714      	adds	r7, #20
 8014112:	46bd      	mov	sp, r7
 8014114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014118:	4770      	bx	lr
 801411a:	bf00      	nop
 801411c:	ffcfff8f 	.word	0xffcfff8f

08014120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014120:	b480      	push	{r7}
 8014122:	b087      	sub	sp, #28
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	607a      	str	r2, [r7, #4]
 801412c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	689b      	ldr	r3, [r3, #8]
 8014132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801413a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	021a      	lsls	r2, r3, #8
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	431a      	orrs	r2, r3
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	4313      	orrs	r3, r2
 8014148:	697a      	ldr	r2, [r7, #20]
 801414a:	4313      	orrs	r3, r2
 801414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	697a      	ldr	r2, [r7, #20]
 8014152:	609a      	str	r2, [r3, #8]
}
 8014154:	bf00      	nop
 8014156:	371c      	adds	r7, #28
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014160:	b480      	push	{r7}
 8014162:	b087      	sub	sp, #28
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	f003 031f 	and.w	r3, r3, #31
 8014172:	2201      	movs	r2, #1
 8014174:	fa02 f303 	lsl.w	r3, r2, r3
 8014178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	6a1a      	ldr	r2, [r3, #32]
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	43db      	mvns	r3, r3
 8014182:	401a      	ands	r2, r3
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	6a1a      	ldr	r2, [r3, #32]
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	f003 031f 	and.w	r3, r3, #31
 8014192:	6879      	ldr	r1, [r7, #4]
 8014194:	fa01 f303 	lsl.w	r3, r1, r3
 8014198:	431a      	orrs	r2, r3
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	621a      	str	r2, [r3, #32]
}
 801419e:	bf00      	nop
 80141a0:	371c      	adds	r7, #28
 80141a2:	46bd      	mov	sp, r7
 80141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a8:	4770      	bx	lr
	...

080141ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80141ac:	b480      	push	{r7}
 80141ae:	b085      	sub	sp, #20
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d101      	bne.n	80141c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80141c0:	2302      	movs	r3, #2
 80141c2:	e06d      	b.n	80142a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2201      	movs	r2, #1
 80141c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2202      	movs	r2, #2
 80141d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	4a30      	ldr	r2, [pc, #192]	; (80142ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d004      	beq.n	80141f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4a2f      	ldr	r2, [pc, #188]	; (80142b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d108      	bne.n	801420a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80141fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	68fa      	ldr	r2, [r7, #12]
 8014206:	4313      	orrs	r3, r2
 8014208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	4313      	orrs	r3, r2
 801421a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	68fa      	ldr	r2, [r7, #12]
 8014222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4a20      	ldr	r2, [pc, #128]	; (80142ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d022      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014236:	d01d      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4a1d      	ldr	r2, [pc, #116]	; (80142b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801423e:	4293      	cmp	r3, r2
 8014240:	d018      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a1c      	ldr	r2, [pc, #112]	; (80142b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014248:	4293      	cmp	r3, r2
 801424a:	d013      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4a1a      	ldr	r2, [pc, #104]	; (80142bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d00e      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	4a15      	ldr	r2, [pc, #84]	; (80142b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801425c:	4293      	cmp	r3, r2
 801425e:	d009      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a16      	ldr	r2, [pc, #88]	; (80142c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d004      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4a15      	ldr	r2, [pc, #84]	; (80142c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014270:	4293      	cmp	r3, r2
 8014272:	d10c      	bne.n	801428e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801427a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	689b      	ldr	r3, [r3, #8]
 8014280:	68ba      	ldr	r2, [r7, #8]
 8014282:	4313      	orrs	r3, r2
 8014284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	68ba      	ldr	r2, [r7, #8]
 801428c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2201      	movs	r2, #1
 8014292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2200      	movs	r2, #0
 801429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3714      	adds	r7, #20
 80142a4:	46bd      	mov	sp, r7
 80142a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142aa:	4770      	bx	lr
 80142ac:	40010000 	.word	0x40010000
 80142b0:	40010400 	.word	0x40010400
 80142b4:	40000400 	.word	0x40000400
 80142b8:	40000800 	.word	0x40000800
 80142bc:	40000c00 	.word	0x40000c00
 80142c0:	40001800 	.word	0x40001800
 80142c4:	40014000 	.word	0x40014000

080142c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80142d2:	2300      	movs	r3, #0
 80142d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d101      	bne.n	80142e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80142e0:	2302      	movs	r3, #2
 80142e2:	e065      	b.n	80143b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2201      	movs	r2, #1
 80142e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	4313      	orrs	r3, r2
 80142f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	689b      	ldr	r3, [r3, #8]
 8014304:	4313      	orrs	r3, r2
 8014306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	4313      	orrs	r3, r2
 8014314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4313      	orrs	r3, r2
 8014322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	691b      	ldr	r3, [r3, #16]
 801432e:	4313      	orrs	r3, r2
 8014330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	695b      	ldr	r3, [r3, #20]
 801433c:	4313      	orrs	r3, r2
 801433e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801434a:	4313      	orrs	r3, r2
 801434c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	699b      	ldr	r3, [r3, #24]
 8014358:	041b      	lsls	r3, r3, #16
 801435a:	4313      	orrs	r3, r2
 801435c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	4a16      	ldr	r2, [pc, #88]	; (80143bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014364:	4293      	cmp	r3, r2
 8014366:	d004      	beq.n	8014372 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4a14      	ldr	r2, [pc, #80]	; (80143c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801436e:	4293      	cmp	r3, r2
 8014370:	d115      	bne.n	801439e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801437c:	051b      	lsls	r3, r3, #20
 801437e:	4313      	orrs	r3, r2
 8014380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	69db      	ldr	r3, [r3, #28]
 801438c:	4313      	orrs	r3, r2
 801438e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	6a1b      	ldr	r3, [r3, #32]
 801439a:	4313      	orrs	r3, r2
 801439c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	68fa      	ldr	r2, [r7, #12]
 80143a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80143ae:	2300      	movs	r3, #0
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3714      	adds	r7, #20
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr
 80143bc:	40010000 	.word	0x40010000
 80143c0:	40010400 	.word	0x40010400

080143c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80143cc:	bf00      	nop
 80143ce:	370c      	adds	r7, #12
 80143d0:	46bd      	mov	sp, r7
 80143d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d6:	4770      	bx	lr

080143d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80143e0:	bf00      	nop
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr

080143ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80143f4:	bf00      	nop
 80143f6:	370c      	adds	r7, #12
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr

08014400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d101      	bne.n	8014412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801440e:	2301      	movs	r3, #1
 8014410:	e042      	b.n	8014498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014418:	2b00      	cmp	r3, #0
 801441a:	d106      	bne.n	801442a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2200      	movs	r2, #0
 8014420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f7f1 f8d7 	bl	80055d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2224      	movs	r2, #36	; 0x24
 801442e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	f022 0201 	bic.w	r2, r2, #1
 8014440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014446:	2b00      	cmp	r3, #0
 8014448:	d002      	beq.n	8014450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f001 fbc2 	bl	8015bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f000 fe57 	bl	8015104 <UART_SetConfig>
 8014456:	4603      	mov	r3, r0
 8014458:	2b01      	cmp	r3, #1
 801445a:	d101      	bne.n	8014460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801445c:	2301      	movs	r3, #1
 801445e:	e01b      	b.n	8014498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	685a      	ldr	r2, [r3, #4]
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801446e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	689a      	ldr	r2, [r3, #8]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801447e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f042 0201 	orr.w	r2, r2, #1
 801448e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f001 fc41 	bl	8015d18 <UART_CheckIdleState>
 8014496:	4603      	mov	r3, r0
}
 8014498:	4618      	mov	r0, r3
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b08a      	sub	sp, #40	; 0x28
 80144a4:	af02      	add	r7, sp, #8
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	603b      	str	r3, [r7, #0]
 80144ac:	4613      	mov	r3, r2
 80144ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144b6:	2b20      	cmp	r3, #32
 80144b8:	d17b      	bne.n	80145b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d002      	beq.n	80144c6 <HAL_UART_Transmit+0x26>
 80144c0:	88fb      	ldrh	r3, [r7, #6]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d101      	bne.n	80144ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80144c6:	2301      	movs	r3, #1
 80144c8:	e074      	b.n	80145b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	2200      	movs	r2, #0
 80144ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	2221      	movs	r2, #33	; 0x21
 80144d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80144da:	f7f1 fd2d 	bl	8005f38 <HAL_GetTick>
 80144de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	88fa      	ldrh	r2, [r7, #6]
 80144e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	88fa      	ldrh	r2, [r7, #6]
 80144ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	689b      	ldr	r3, [r3, #8]
 80144f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80144f8:	d108      	bne.n	801450c <HAL_UART_Transmit+0x6c>
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	691b      	ldr	r3, [r3, #16]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d104      	bne.n	801450c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014502:	2300      	movs	r3, #0
 8014504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	61bb      	str	r3, [r7, #24]
 801450a:	e003      	b.n	8014514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014510:	2300      	movs	r3, #0
 8014512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014514:	e030      	b.n	8014578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	9300      	str	r3, [sp, #0]
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	2200      	movs	r2, #0
 801451e:	2180      	movs	r1, #128	; 0x80
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f001 fca3 	bl	8015e6c <UART_WaitOnFlagUntilTimeout>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d005      	beq.n	8014538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2220      	movs	r2, #32
 8014530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8014534:	2303      	movs	r3, #3
 8014536:	e03d      	b.n	80145b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d10b      	bne.n	8014556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	881b      	ldrh	r3, [r3, #0]
 8014542:	461a      	mov	r2, r3
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801454c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801454e:	69bb      	ldr	r3, [r7, #24]
 8014550:	3302      	adds	r3, #2
 8014552:	61bb      	str	r3, [r7, #24]
 8014554:	e007      	b.n	8014566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	781a      	ldrb	r2, [r3, #0]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014560:	69fb      	ldr	r3, [r7, #28]
 8014562:	3301      	adds	r3, #1
 8014564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801456c:	b29b      	uxth	r3, r3
 801456e:	3b01      	subs	r3, #1
 8014570:	b29a      	uxth	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801457e:	b29b      	uxth	r3, r3
 8014580:	2b00      	cmp	r3, #0
 8014582:	d1c8      	bne.n	8014516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	9300      	str	r3, [sp, #0]
 8014588:	697b      	ldr	r3, [r7, #20]
 801458a:	2200      	movs	r2, #0
 801458c:	2140      	movs	r1, #64	; 0x40
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f001 fc6c 	bl	8015e6c <UART_WaitOnFlagUntilTimeout>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d005      	beq.n	80145a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2220      	movs	r2, #32
 801459e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80145a2:	2303      	movs	r3, #3
 80145a4:	e006      	b.n	80145b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	2220      	movs	r2, #32
 80145aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80145ae:	2300      	movs	r3, #0
 80145b0:	e000      	b.n	80145b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80145b2:	2302      	movs	r3, #2
  }
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3720      	adds	r7, #32
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b08a      	sub	sp, #40	; 0x28
 80145c0:	af02      	add	r7, sp, #8
 80145c2:	60f8      	str	r0, [r7, #12]
 80145c4:	60b9      	str	r1, [r7, #8]
 80145c6:	603b      	str	r3, [r7, #0]
 80145c8:	4613      	mov	r3, r2
 80145ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145d2:	2b20      	cmp	r3, #32
 80145d4:	f040 80b5 	bne.w	8014742 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d002      	beq.n	80145e4 <HAL_UART_Receive+0x28>
 80145de:	88fb      	ldrh	r3, [r7, #6]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d101      	bne.n	80145e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80145e4:	2301      	movs	r3, #1
 80145e6:	e0ad      	b.n	8014744 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2200      	movs	r2, #0
 80145ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	2222      	movs	r2, #34	; 0x22
 80145f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2200      	movs	r2, #0
 80145fc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80145fe:	f7f1 fc9b 	bl	8005f38 <HAL_GetTick>
 8014602:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	88fa      	ldrh	r2, [r7, #6]
 8014608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	88fa      	ldrh	r2, [r7, #6]
 8014610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801461c:	d10e      	bne.n	801463c <HAL_UART_Receive+0x80>
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	691b      	ldr	r3, [r3, #16]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d105      	bne.n	8014632 <HAL_UART_Receive+0x76>
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f240 12ff 	movw	r2, #511	; 0x1ff
 801462c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014630:	e02d      	b.n	801468e <HAL_UART_Receive+0xd2>
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	22ff      	movs	r2, #255	; 0xff
 8014636:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801463a:	e028      	b.n	801468e <HAL_UART_Receive+0xd2>
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	689b      	ldr	r3, [r3, #8]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d10d      	bne.n	8014660 <HAL_UART_Receive+0xa4>
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	691b      	ldr	r3, [r3, #16]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d104      	bne.n	8014656 <HAL_UART_Receive+0x9a>
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	22ff      	movs	r2, #255	; 0xff
 8014650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014654:	e01b      	b.n	801468e <HAL_UART_Receive+0xd2>
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	227f      	movs	r2, #127	; 0x7f
 801465a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801465e:	e016      	b.n	801468e <HAL_UART_Receive+0xd2>
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	689b      	ldr	r3, [r3, #8]
 8014664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014668:	d10d      	bne.n	8014686 <HAL_UART_Receive+0xca>
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d104      	bne.n	801467c <HAL_UART_Receive+0xc0>
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	227f      	movs	r2, #127	; 0x7f
 8014676:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801467a:	e008      	b.n	801468e <HAL_UART_Receive+0xd2>
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	223f      	movs	r2, #63	; 0x3f
 8014680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014684:	e003      	b.n	801468e <HAL_UART_Receive+0xd2>
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2200      	movs	r2, #0
 801468a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014694:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	689b      	ldr	r3, [r3, #8]
 801469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801469e:	d108      	bne.n	80146b2 <HAL_UART_Receive+0xf6>
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	691b      	ldr	r3, [r3, #16]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d104      	bne.n	80146b2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80146a8:	2300      	movs	r3, #0
 80146aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	61bb      	str	r3, [r7, #24]
 80146b0:	e003      	b.n	80146ba <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80146b6:	2300      	movs	r3, #0
 80146b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80146ba:	e036      	b.n	801472a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	9300      	str	r3, [sp, #0]
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	2200      	movs	r2, #0
 80146c4:	2120      	movs	r1, #32
 80146c6:	68f8      	ldr	r0, [r7, #12]
 80146c8:	f001 fbd0 	bl	8015e6c <UART_WaitOnFlagUntilTimeout>
 80146cc:	4603      	mov	r3, r0
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d005      	beq.n	80146de <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	2220      	movs	r2, #32
 80146d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80146da:	2303      	movs	r3, #3
 80146dc:	e032      	b.n	8014744 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d10c      	bne.n	80146fe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	8a7b      	ldrh	r3, [r7, #18]
 80146ee:	4013      	ands	r3, r2
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	69bb      	ldr	r3, [r7, #24]
 80146f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	3302      	adds	r3, #2
 80146fa:	61bb      	str	r3, [r7, #24]
 80146fc:	e00c      	b.n	8014718 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014704:	b2da      	uxtb	r2, r3
 8014706:	8a7b      	ldrh	r3, [r7, #18]
 8014708:	b2db      	uxtb	r3, r3
 801470a:	4013      	ands	r3, r2
 801470c:	b2da      	uxtb	r2, r3
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	3301      	adds	r3, #1
 8014716:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801471e:	b29b      	uxth	r3, r3
 8014720:	3b01      	subs	r3, #1
 8014722:	b29a      	uxth	r2, r3
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014730:	b29b      	uxth	r3, r3
 8014732:	2b00      	cmp	r3, #0
 8014734:	d1c2      	bne.n	80146bc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2220      	movs	r2, #32
 801473a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801473e:	2300      	movs	r3, #0
 8014740:	e000      	b.n	8014744 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8014742:	2302      	movs	r3, #2
  }
}
 8014744:	4618      	mov	r0, r3
 8014746:	3720      	adds	r7, #32
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08a      	sub	sp, #40	; 0x28
 8014750:	af00      	add	r7, sp, #0
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	4613      	mov	r3, r2
 8014758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014760:	2b20      	cmp	r3, #32
 8014762:	d137      	bne.n	80147d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d002      	beq.n	8014770 <HAL_UART_Receive_IT+0x24>
 801476a:	88fb      	ldrh	r3, [r7, #6]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d101      	bne.n	8014774 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014770:	2301      	movs	r3, #1
 8014772:	e030      	b.n	80147d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2200      	movs	r2, #0
 8014778:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	4a18      	ldr	r2, [pc, #96]	; (80147e0 <HAL_UART_Receive_IT+0x94>)
 8014780:	4293      	cmp	r3, r2
 8014782:	d01f      	beq.n	80147c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801478e:	2b00      	cmp	r3, #0
 8014790:	d018      	beq.n	80147c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	e853 3f00 	ldrex	r3, [r3]
 801479e:	613b      	str	r3, [r7, #16]
   return(result);
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80147a6:	627b      	str	r3, [r7, #36]	; 0x24
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	461a      	mov	r2, r3
 80147ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b0:	623b      	str	r3, [r7, #32]
 80147b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147b4:	69f9      	ldr	r1, [r7, #28]
 80147b6:	6a3a      	ldr	r2, [r7, #32]
 80147b8:	e841 2300 	strex	r3, r2, [r1]
 80147bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d1e6      	bne.n	8014792 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80147c4:	88fb      	ldrh	r3, [r7, #6]
 80147c6:	461a      	mov	r2, r3
 80147c8:	68b9      	ldr	r1, [r7, #8]
 80147ca:	68f8      	ldr	r0, [r7, #12]
 80147cc:	f001 fbbc 	bl	8015f48 <UART_Start_Receive_IT>
 80147d0:	4603      	mov	r3, r0
 80147d2:	e000      	b.n	80147d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80147d4:	2302      	movs	r3, #2
  }
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3728      	adds	r7, #40	; 0x28
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	58000c00 	.word	0x58000c00

080147e4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b09a      	sub	sp, #104	; 0x68
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147f4:	e853 3f00 	ldrex	r3, [r3]
 80147f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80147fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014800:	667b      	str	r3, [r7, #100]	; 0x64
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	461a      	mov	r2, r3
 8014808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801480a:	657b      	str	r3, [r7, #84]	; 0x54
 801480c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801480e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014812:	e841 2300 	strex	r3, r2, [r1]
 8014816:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801481a:	2b00      	cmp	r3, #0
 801481c:	d1e6      	bne.n	80147ec <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	3308      	adds	r3, #8
 8014824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014828:	e853 3f00 	ldrex	r3, [r3]
 801482c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801482e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014830:	4b46      	ldr	r3, [pc, #280]	; (801494c <HAL_UART_AbortReceive+0x168>)
 8014832:	4013      	ands	r3, r2
 8014834:	663b      	str	r3, [r7, #96]	; 0x60
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	3308      	adds	r3, #8
 801483c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801483e:	643a      	str	r2, [r7, #64]	; 0x40
 8014840:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014846:	e841 2300 	strex	r3, r2, [r1]
 801484a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484e:	2b00      	cmp	r3, #0
 8014850:	d1e5      	bne.n	801481e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014856:	2b01      	cmp	r3, #1
 8014858:	d118      	bne.n	801488c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014860:	6a3b      	ldr	r3, [r7, #32]
 8014862:	e853 3f00 	ldrex	r3, [r3]
 8014866:	61fb      	str	r3, [r7, #28]
   return(result);
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	f023 0310 	bic.w	r3, r3, #16
 801486e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	461a      	mov	r2, r3
 8014876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014878:	62fb      	str	r3, [r7, #44]	; 0x2c
 801487a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801487c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801487e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014880:	e841 2300 	strex	r3, r2, [r1]
 8014884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014888:	2b00      	cmp	r3, #0
 801488a:	d1e6      	bne.n	801485a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	689b      	ldr	r3, [r3, #8]
 8014892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014896:	2b40      	cmp	r3, #64	; 0x40
 8014898:	d13b      	bne.n	8014912 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	3308      	adds	r3, #8
 80148a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	e853 3f00 	ldrex	r3, [r3]
 80148a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80148b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	3308      	adds	r3, #8
 80148b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80148ba:	61ba      	str	r2, [r7, #24]
 80148bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148be:	6979      	ldr	r1, [r7, #20]
 80148c0:	69ba      	ldr	r2, [r7, #24]
 80148c2:	e841 2300 	strex	r3, r2, [r1]
 80148c6:	613b      	str	r3, [r7, #16]
   return(result);
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d1e5      	bne.n	801489a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d01c      	beq.n	8014912 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148de:	2200      	movs	r2, #0
 80148e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7f4 fa13 	bl	8008d14 <HAL_DMA_Abort>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d00e      	beq.n	8014912 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7f5 fea6 	bl	800a64c <HAL_DMA_GetError>
 8014900:	4603      	mov	r3, r0
 8014902:	2b20      	cmp	r3, #32
 8014904:	d105      	bne.n	8014912 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2210      	movs	r2, #16
 801490a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801490e:	2303      	movs	r3, #3
 8014910:	e017      	b.n	8014942 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2200      	movs	r2, #0
 8014916:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	220f      	movs	r2, #15
 8014920:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	699a      	ldr	r2, [r3, #24]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f042 0208 	orr.w	r2, r2, #8
 8014930:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2220      	movs	r2, #32
 8014936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2200      	movs	r2, #0
 801493e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014940:	2300      	movs	r3, #0
}
 8014942:	4618      	mov	r0, r3
 8014944:	3768      	adds	r7, #104	; 0x68
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	effffffe 	.word	0xeffffffe

08014950 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b0ba      	sub	sp, #232	; 0xe8
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	69db      	ldr	r3, [r3, #28]
 801495e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	689b      	ldr	r3, [r3, #8]
 8014972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014976:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801497a:	f640 030f 	movw	r3, #2063	; 0x80f
 801497e:	4013      	ands	r3, r2
 8014980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014988:	2b00      	cmp	r3, #0
 801498a:	d11b      	bne.n	80149c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014990:	f003 0320 	and.w	r3, r3, #32
 8014994:	2b00      	cmp	r3, #0
 8014996:	d015      	beq.n	80149c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801499c:	f003 0320 	and.w	r3, r3, #32
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d105      	bne.n	80149b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80149a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d009      	beq.n	80149c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	f000 8377 	beq.w	80150a8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	4798      	blx	r3
      }
      return;
 80149c2:	e371      	b.n	80150a8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80149c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f000 8123 	beq.w	8014c14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80149ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80149d2:	4b8d      	ldr	r3, [pc, #564]	; (8014c08 <HAL_UART_IRQHandler+0x2b8>)
 80149d4:	4013      	ands	r3, r2
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d106      	bne.n	80149e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80149da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80149de:	4b8b      	ldr	r3, [pc, #556]	; (8014c0c <HAL_UART_IRQHandler+0x2bc>)
 80149e0:	4013      	ands	r3, r2
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	f000 8116 	beq.w	8014c14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80149e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149ec:	f003 0301 	and.w	r3, r3, #1
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d011      	beq.n	8014a18 <HAL_UART_IRQHandler+0xc8>
 80149f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80149f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00b      	beq.n	8014a18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2201      	movs	r2, #1
 8014a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a0e:	f043 0201 	orr.w	r2, r3, #1
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a1c:	f003 0302 	and.w	r3, r3, #2
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d011      	beq.n	8014a48 <HAL_UART_IRQHandler+0xf8>
 8014a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a28:	f003 0301 	and.w	r3, r3, #1
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d00b      	beq.n	8014a48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2202      	movs	r2, #2
 8014a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a3e:	f043 0204 	orr.w	r2, r3, #4
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a4c:	f003 0304 	and.w	r3, r3, #4
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d011      	beq.n	8014a78 <HAL_UART_IRQHandler+0x128>
 8014a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a58:	f003 0301 	and.w	r3, r3, #1
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00b      	beq.n	8014a78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2204      	movs	r2, #4
 8014a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a6e:	f043 0202 	orr.w	r2, r3, #2
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a7c:	f003 0308 	and.w	r3, r3, #8
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d017      	beq.n	8014ab4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a88:	f003 0320 	and.w	r3, r3, #32
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d105      	bne.n	8014a9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014a90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a94:	4b5c      	ldr	r3, [pc, #368]	; (8014c08 <HAL_UART_IRQHandler+0x2b8>)
 8014a96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00b      	beq.n	8014ab4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	2208      	movs	r2, #8
 8014aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014aaa:	f043 0208 	orr.w	r2, r3, #8
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d012      	beq.n	8014ae6 <HAL_UART_IRQHandler+0x196>
 8014ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d00c      	beq.n	8014ae6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014adc:	f043 0220 	orr.w	r2, r3, #32
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	f000 82dd 	beq.w	80150ac <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014af6:	f003 0320 	and.w	r3, r3, #32
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d013      	beq.n	8014b26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b02:	f003 0320 	and.w	r3, r3, #32
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d105      	bne.n	8014b16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d007      	beq.n	8014b26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d003      	beq.n	8014b26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	689b      	ldr	r3, [r3, #8]
 8014b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b3a:	2b40      	cmp	r3, #64	; 0x40
 8014b3c:	d005      	beq.n	8014b4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d054      	beq.n	8014bf4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f001 fb1e 	bl	801618c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	689b      	ldr	r3, [r3, #8]
 8014b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b5a:	2b40      	cmp	r3, #64	; 0x40
 8014b5c:	d146      	bne.n	8014bec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	3308      	adds	r3, #8
 8014b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014b6c:	e853 3f00 	ldrex	r3, [r3]
 8014b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	3308      	adds	r3, #8
 8014b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014b9a:	e841 2300 	strex	r3, r2, [r1]
 8014b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d1d9      	bne.n	8014b5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d017      	beq.n	8014be4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bba:	4a15      	ldr	r2, [pc, #84]	; (8014c10 <HAL_UART_IRQHandler+0x2c0>)
 8014bbc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f4 fbc3 	bl	8009350 <HAL_DMA_Abort_IT>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d019      	beq.n	8014c04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014bde:	4610      	mov	r0, r2
 8014be0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014be2:	e00f      	b.n	8014c04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f000 fa77 	bl	80150d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bea:	e00b      	b.n	8014c04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f000 fa73 	bl	80150d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bf2:	e007      	b.n	8014c04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 fa6f 	bl	80150d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014c02:	e253      	b.n	80150ac <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014c04:	bf00      	nop
    return;
 8014c06:	e251      	b.n	80150ac <HAL_UART_IRQHandler+0x75c>
 8014c08:	10000001 	.word	0x10000001
 8014c0c:	04000120 	.word	0x04000120
 8014c10:	08016259 	.word	0x08016259

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	f040 81e7 	bne.w	8014fec <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c22:	f003 0310 	and.w	r3, r3, #16
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	f000 81e0 	beq.w	8014fec <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c30:	f003 0310 	and.w	r3, r3, #16
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f000 81d9 	beq.w	8014fec <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2210      	movs	r2, #16
 8014c40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	689b      	ldr	r3, [r3, #8]
 8014c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c4c:	2b40      	cmp	r3, #64	; 0x40
 8014c4e:	f040 8151 	bne.w	8014ef4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	4a96      	ldr	r2, [pc, #600]	; (8014eb4 <HAL_UART_IRQHandler+0x564>)
 8014c5c:	4293      	cmp	r3, r2
 8014c5e:	d068      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4a93      	ldr	r2, [pc, #588]	; (8014eb8 <HAL_UART_IRQHandler+0x568>)
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	d061      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	4a91      	ldr	r2, [pc, #580]	; (8014ebc <HAL_UART_IRQHandler+0x56c>)
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d05a      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	4a8e      	ldr	r2, [pc, #568]	; (8014ec0 <HAL_UART_IRQHandler+0x570>)
 8014c86:	4293      	cmp	r3, r2
 8014c88:	d053      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	4a8c      	ldr	r2, [pc, #560]	; (8014ec4 <HAL_UART_IRQHandler+0x574>)
 8014c94:	4293      	cmp	r3, r2
 8014c96:	d04c      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4a89      	ldr	r2, [pc, #548]	; (8014ec8 <HAL_UART_IRQHandler+0x578>)
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d045      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	4a87      	ldr	r2, [pc, #540]	; (8014ecc <HAL_UART_IRQHandler+0x57c>)
 8014cb0:	4293      	cmp	r3, r2
 8014cb2:	d03e      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4a84      	ldr	r2, [pc, #528]	; (8014ed0 <HAL_UART_IRQHandler+0x580>)
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d037      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	4a82      	ldr	r2, [pc, #520]	; (8014ed4 <HAL_UART_IRQHandler+0x584>)
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	d030      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	4a7f      	ldr	r2, [pc, #508]	; (8014ed8 <HAL_UART_IRQHandler+0x588>)
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	d029      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	4a7d      	ldr	r2, [pc, #500]	; (8014edc <HAL_UART_IRQHandler+0x58c>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d022      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	4a7a      	ldr	r2, [pc, #488]	; (8014ee0 <HAL_UART_IRQHandler+0x590>)
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	d01b      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a78      	ldr	r2, [pc, #480]	; (8014ee4 <HAL_UART_IRQHandler+0x594>)
 8014d04:	4293      	cmp	r3, r2
 8014d06:	d014      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	4a75      	ldr	r2, [pc, #468]	; (8014ee8 <HAL_UART_IRQHandler+0x598>)
 8014d12:	4293      	cmp	r3, r2
 8014d14:	d00d      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4a73      	ldr	r2, [pc, #460]	; (8014eec <HAL_UART_IRQHandler+0x59c>)
 8014d20:	4293      	cmp	r3, r2
 8014d22:	d006      	beq.n	8014d32 <HAL_UART_IRQHandler+0x3e2>
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	4a70      	ldr	r2, [pc, #448]	; (8014ef0 <HAL_UART_IRQHandler+0x5a0>)
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	d106      	bne.n	8014d40 <HAL_UART_IRQHandler+0x3f0>
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	685b      	ldr	r3, [r3, #4]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	e005      	b.n	8014d4c <HAL_UART_IRQHandler+0x3fc>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	685b      	ldr	r3, [r3, #4]
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014d50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f000 81ab 	beq.w	80150b0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014d60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d64:	429a      	cmp	r2, r3
 8014d66:	f080 81a3 	bcs.w	80150b0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d7a:	69db      	ldr	r3, [r3, #28]
 8014d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d80:	f000 8087 	beq.w	8014e92 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014d90:	e853 3f00 	ldrex	r3, [r3]
 8014d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	461a      	mov	r2, r3
 8014daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014db2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014db6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014dba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014dbe:	e841 2300 	strex	r3, r2, [r1]
 8014dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d1da      	bne.n	8014d84 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	3308      	adds	r3, #8
 8014dd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dd8:	e853 3f00 	ldrex	r3, [r3]
 8014ddc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014de0:	f023 0301 	bic.w	r3, r3, #1
 8014de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	3308      	adds	r3, #8
 8014dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014df2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014df6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014df8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014dfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014dfe:	e841 2300 	strex	r3, r2, [r1]
 8014e02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d1e1      	bne.n	8014dce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	3308      	adds	r3, #8
 8014e10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e14:	e853 3f00 	ldrex	r3, [r3]
 8014e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	3308      	adds	r3, #8
 8014e2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014e2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014e30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014e36:	e841 2300 	strex	r3, r2, [r1]
 8014e3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d1e3      	bne.n	8014e0a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2220      	movs	r2, #32
 8014e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e58:	e853 3f00 	ldrex	r3, [r3]
 8014e5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e60:	f023 0310 	bic.w	r3, r3, #16
 8014e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e72:	65bb      	str	r3, [r7, #88]	; 0x58
 8014e74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014e78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e7a:	e841 2300 	strex	r3, r2, [r1]
 8014e7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d1e4      	bne.n	8014e50 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7f3 ff41 	bl	8008d14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2202      	movs	r2, #2
 8014e96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ea4:	b29b      	uxth	r3, r3
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	4619      	mov	r1, r3
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f000 f91d 	bl	80150ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014eb2:	e0fd      	b.n	80150b0 <HAL_UART_IRQHandler+0x760>
 8014eb4:	40020010 	.word	0x40020010
 8014eb8:	40020028 	.word	0x40020028
 8014ebc:	40020040 	.word	0x40020040
 8014ec0:	40020058 	.word	0x40020058
 8014ec4:	40020070 	.word	0x40020070
 8014ec8:	40020088 	.word	0x40020088
 8014ecc:	400200a0 	.word	0x400200a0
 8014ed0:	400200b8 	.word	0x400200b8
 8014ed4:	40020410 	.word	0x40020410
 8014ed8:	40020428 	.word	0x40020428
 8014edc:	40020440 	.word	0x40020440
 8014ee0:	40020458 	.word	0x40020458
 8014ee4:	40020470 	.word	0x40020470
 8014ee8:	40020488 	.word	0x40020488
 8014eec:	400204a0 	.word	0x400204a0
 8014ef0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	1ad3      	subs	r3, r2, r3
 8014f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f000 80cf 	beq.w	80150b4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	f000 80ca 	beq.w	80150b4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f28:	e853 3f00 	ldrex	r3, [r3]
 8014f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014f42:	647b      	str	r3, [r7, #68]	; 0x44
 8014f44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f4a:	e841 2300 	strex	r3, r2, [r1]
 8014f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d1e4      	bne.n	8014f20 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	3308      	adds	r3, #8
 8014f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f60:	e853 3f00 	ldrex	r3, [r3]
 8014f64:	623b      	str	r3, [r7, #32]
   return(result);
 8014f66:	6a3a      	ldr	r2, [r7, #32]
 8014f68:	4b55      	ldr	r3, [pc, #340]	; (80150c0 <HAL_UART_IRQHandler+0x770>)
 8014f6a:	4013      	ands	r3, r2
 8014f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	3308      	adds	r3, #8
 8014f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014f7a:	633a      	str	r2, [r7, #48]	; 0x30
 8014f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f82:	e841 2300 	strex	r3, r2, [r1]
 8014f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d1e3      	bne.n	8014f56 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2220      	movs	r2, #32
 8014f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	e853 3f00 	ldrex	r3, [r3]
 8014fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	f023 0310 	bic.w	r3, r3, #16
 8014fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014fc4:	61fb      	str	r3, [r7, #28]
 8014fc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fc8:	69b9      	ldr	r1, [r7, #24]
 8014fca:	69fa      	ldr	r2, [r7, #28]
 8014fcc:	e841 2300 	strex	r3, r2, [r1]
 8014fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d1e4      	bne.n	8014fa2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2202      	movs	r2, #2
 8014fdc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014fde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014fe2:	4619      	mov	r1, r3
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f000 f881 	bl	80150ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014fea:	e063      	b.n	80150b4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d00e      	beq.n	8015016 <HAL_UART_IRQHandler+0x6c6>
 8014ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015000:	2b00      	cmp	r3, #0
 8015002:	d008      	beq.n	8015016 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801500c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f001 fe80 	bl	8016d14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015014:	e051      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8015016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801501e:	2b00      	cmp	r3, #0
 8015020:	d014      	beq.n	801504c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8015022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801502a:	2b00      	cmp	r3, #0
 801502c:	d105      	bne.n	801503a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801502e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015036:	2b00      	cmp	r3, #0
 8015038:	d008      	beq.n	801504c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801503e:	2b00      	cmp	r3, #0
 8015040:	d03a      	beq.n	80150b8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	4798      	blx	r3
    }
    return;
 801504a:	e035      	b.n	80150b8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015054:	2b00      	cmp	r3, #0
 8015056:	d009      	beq.n	801506c <HAL_UART_IRQHandler+0x71c>
 8015058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015060:	2b00      	cmp	r3, #0
 8015062:	d003      	beq.n	801506c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f001 f90d 	bl	8016284 <UART_EndTransmit_IT>
    return;
 801506a:	e026      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015074:	2b00      	cmp	r3, #0
 8015076:	d009      	beq.n	801508c <HAL_UART_IRQHandler+0x73c>
 8015078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801507c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015080:	2b00      	cmp	r3, #0
 8015082:	d003      	beq.n	801508c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f001 fe59 	bl	8016d3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801508a:	e016      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015094:	2b00      	cmp	r3, #0
 8015096:	d010      	beq.n	80150ba <HAL_UART_IRQHandler+0x76a>
 8015098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801509c:	2b00      	cmp	r3, #0
 801509e:	da0c      	bge.n	80150ba <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f001 fe41 	bl	8016d28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80150a6:	e008      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
      return;
 80150a8:	bf00      	nop
 80150aa:	e006      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
    return;
 80150ac:	bf00      	nop
 80150ae:	e004      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
      return;
 80150b0:	bf00      	nop
 80150b2:	e002      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
      return;
 80150b4:	bf00      	nop
 80150b6:	e000      	b.n	80150ba <HAL_UART_IRQHandler+0x76a>
    return;
 80150b8:	bf00      	nop
  }
}
 80150ba:	37e8      	adds	r7, #232	; 0xe8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	effffffe 	.word	0xeffffffe

080150c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80150c4:	b480      	push	{r7}
 80150c6:	b083      	sub	sp, #12
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80150cc:	bf00      	nop
 80150ce:	370c      	adds	r7, #12
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr

080150d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80150d8:	b480      	push	{r7}
 80150da:	b083      	sub	sp, #12
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80150e0:	bf00      	nop
 80150e2:	370c      	adds	r7, #12
 80150e4:	46bd      	mov	sp, r7
 80150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ea:	4770      	bx	lr

080150ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80150ec:	b480      	push	{r7}
 80150ee:	b083      	sub	sp, #12
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	460b      	mov	r3, r1
 80150f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80150f8:	bf00      	nop
 80150fa:	370c      	adds	r7, #12
 80150fc:	46bd      	mov	sp, r7
 80150fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015102:	4770      	bx	lr

08015104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015108:	b092      	sub	sp, #72	; 0x48
 801510a:	af00      	add	r7, sp, #0
 801510c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801510e:	2300      	movs	r3, #0
 8015110:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	689a      	ldr	r2, [r3, #8]
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	691b      	ldr	r3, [r3, #16]
 801511c:	431a      	orrs	r2, r3
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	695b      	ldr	r3, [r3, #20]
 8015122:	431a      	orrs	r2, r3
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	69db      	ldr	r3, [r3, #28]
 8015128:	4313      	orrs	r3, r2
 801512a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801512c:	697b      	ldr	r3, [r7, #20]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	681a      	ldr	r2, [r3, #0]
 8015132:	4bbe      	ldr	r3, [pc, #760]	; (801542c <UART_SetConfig+0x328>)
 8015134:	4013      	ands	r3, r2
 8015136:	697a      	ldr	r2, [r7, #20]
 8015138:	6812      	ldr	r2, [r2, #0]
 801513a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801513c:	430b      	orrs	r3, r1
 801513e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	68da      	ldr	r2, [r3, #12]
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	430a      	orrs	r2, r1
 8015154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	699b      	ldr	r3, [r3, #24]
 801515a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4ab3      	ldr	r2, [pc, #716]	; (8015430 <UART_SetConfig+0x32c>)
 8015162:	4293      	cmp	r3, r2
 8015164:	d004      	beq.n	8015170 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	6a1b      	ldr	r3, [r3, #32]
 801516a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801516c:	4313      	orrs	r3, r2
 801516e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	689a      	ldr	r2, [r3, #8]
 8015176:	4baf      	ldr	r3, [pc, #700]	; (8015434 <UART_SetConfig+0x330>)
 8015178:	4013      	ands	r3, r2
 801517a:	697a      	ldr	r2, [r7, #20]
 801517c:	6812      	ldr	r2, [r2, #0]
 801517e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015180:	430b      	orrs	r3, r1
 8015182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801518a:	f023 010f 	bic.w	r1, r3, #15
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	430a      	orrs	r2, r1
 8015198:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	4aa6      	ldr	r2, [pc, #664]	; (8015438 <UART_SetConfig+0x334>)
 80151a0:	4293      	cmp	r3, r2
 80151a2:	d177      	bne.n	8015294 <UART_SetConfig+0x190>
 80151a4:	4ba5      	ldr	r3, [pc, #660]	; (801543c <UART_SetConfig+0x338>)
 80151a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80151ac:	2b28      	cmp	r3, #40	; 0x28
 80151ae:	d86d      	bhi.n	801528c <UART_SetConfig+0x188>
 80151b0:	a201      	add	r2, pc, #4	; (adr r2, 80151b8 <UART_SetConfig+0xb4>)
 80151b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151b6:	bf00      	nop
 80151b8:	0801525d 	.word	0x0801525d
 80151bc:	0801528d 	.word	0x0801528d
 80151c0:	0801528d 	.word	0x0801528d
 80151c4:	0801528d 	.word	0x0801528d
 80151c8:	0801528d 	.word	0x0801528d
 80151cc:	0801528d 	.word	0x0801528d
 80151d0:	0801528d 	.word	0x0801528d
 80151d4:	0801528d 	.word	0x0801528d
 80151d8:	08015265 	.word	0x08015265
 80151dc:	0801528d 	.word	0x0801528d
 80151e0:	0801528d 	.word	0x0801528d
 80151e4:	0801528d 	.word	0x0801528d
 80151e8:	0801528d 	.word	0x0801528d
 80151ec:	0801528d 	.word	0x0801528d
 80151f0:	0801528d 	.word	0x0801528d
 80151f4:	0801528d 	.word	0x0801528d
 80151f8:	0801526d 	.word	0x0801526d
 80151fc:	0801528d 	.word	0x0801528d
 8015200:	0801528d 	.word	0x0801528d
 8015204:	0801528d 	.word	0x0801528d
 8015208:	0801528d 	.word	0x0801528d
 801520c:	0801528d 	.word	0x0801528d
 8015210:	0801528d 	.word	0x0801528d
 8015214:	0801528d 	.word	0x0801528d
 8015218:	08015275 	.word	0x08015275
 801521c:	0801528d 	.word	0x0801528d
 8015220:	0801528d 	.word	0x0801528d
 8015224:	0801528d 	.word	0x0801528d
 8015228:	0801528d 	.word	0x0801528d
 801522c:	0801528d 	.word	0x0801528d
 8015230:	0801528d 	.word	0x0801528d
 8015234:	0801528d 	.word	0x0801528d
 8015238:	0801527d 	.word	0x0801527d
 801523c:	0801528d 	.word	0x0801528d
 8015240:	0801528d 	.word	0x0801528d
 8015244:	0801528d 	.word	0x0801528d
 8015248:	0801528d 	.word	0x0801528d
 801524c:	0801528d 	.word	0x0801528d
 8015250:	0801528d 	.word	0x0801528d
 8015254:	0801528d 	.word	0x0801528d
 8015258:	08015285 	.word	0x08015285
 801525c:	2301      	movs	r3, #1
 801525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015262:	e222      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015264:	2304      	movs	r3, #4
 8015266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801526a:	e21e      	b.n	80156aa <UART_SetConfig+0x5a6>
 801526c:	2308      	movs	r3, #8
 801526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015272:	e21a      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015274:	2310      	movs	r3, #16
 8015276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801527a:	e216      	b.n	80156aa <UART_SetConfig+0x5a6>
 801527c:	2320      	movs	r3, #32
 801527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015282:	e212      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015284:	2340      	movs	r3, #64	; 0x40
 8015286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801528a:	e20e      	b.n	80156aa <UART_SetConfig+0x5a6>
 801528c:	2380      	movs	r3, #128	; 0x80
 801528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015292:	e20a      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4a69      	ldr	r2, [pc, #420]	; (8015440 <UART_SetConfig+0x33c>)
 801529a:	4293      	cmp	r3, r2
 801529c:	d130      	bne.n	8015300 <UART_SetConfig+0x1fc>
 801529e:	4b67      	ldr	r3, [pc, #412]	; (801543c <UART_SetConfig+0x338>)
 80152a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152a2:	f003 0307 	and.w	r3, r3, #7
 80152a6:	2b05      	cmp	r3, #5
 80152a8:	d826      	bhi.n	80152f8 <UART_SetConfig+0x1f4>
 80152aa:	a201      	add	r2, pc, #4	; (adr r2, 80152b0 <UART_SetConfig+0x1ac>)
 80152ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b0:	080152c9 	.word	0x080152c9
 80152b4:	080152d1 	.word	0x080152d1
 80152b8:	080152d9 	.word	0x080152d9
 80152bc:	080152e1 	.word	0x080152e1
 80152c0:	080152e9 	.word	0x080152e9
 80152c4:	080152f1 	.word	0x080152f1
 80152c8:	2300      	movs	r3, #0
 80152ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ce:	e1ec      	b.n	80156aa <UART_SetConfig+0x5a6>
 80152d0:	2304      	movs	r3, #4
 80152d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152d6:	e1e8      	b.n	80156aa <UART_SetConfig+0x5a6>
 80152d8:	2308      	movs	r3, #8
 80152da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152de:	e1e4      	b.n	80156aa <UART_SetConfig+0x5a6>
 80152e0:	2310      	movs	r3, #16
 80152e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152e6:	e1e0      	b.n	80156aa <UART_SetConfig+0x5a6>
 80152e8:	2320      	movs	r3, #32
 80152ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ee:	e1dc      	b.n	80156aa <UART_SetConfig+0x5a6>
 80152f0:	2340      	movs	r3, #64	; 0x40
 80152f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152f6:	e1d8      	b.n	80156aa <UART_SetConfig+0x5a6>
 80152f8:	2380      	movs	r3, #128	; 0x80
 80152fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152fe:	e1d4      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	4a4f      	ldr	r2, [pc, #316]	; (8015444 <UART_SetConfig+0x340>)
 8015306:	4293      	cmp	r3, r2
 8015308:	d130      	bne.n	801536c <UART_SetConfig+0x268>
 801530a:	4b4c      	ldr	r3, [pc, #304]	; (801543c <UART_SetConfig+0x338>)
 801530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801530e:	f003 0307 	and.w	r3, r3, #7
 8015312:	2b05      	cmp	r3, #5
 8015314:	d826      	bhi.n	8015364 <UART_SetConfig+0x260>
 8015316:	a201      	add	r2, pc, #4	; (adr r2, 801531c <UART_SetConfig+0x218>)
 8015318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801531c:	08015335 	.word	0x08015335
 8015320:	0801533d 	.word	0x0801533d
 8015324:	08015345 	.word	0x08015345
 8015328:	0801534d 	.word	0x0801534d
 801532c:	08015355 	.word	0x08015355
 8015330:	0801535d 	.word	0x0801535d
 8015334:	2300      	movs	r3, #0
 8015336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801533a:	e1b6      	b.n	80156aa <UART_SetConfig+0x5a6>
 801533c:	2304      	movs	r3, #4
 801533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015342:	e1b2      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015344:	2308      	movs	r3, #8
 8015346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801534a:	e1ae      	b.n	80156aa <UART_SetConfig+0x5a6>
 801534c:	2310      	movs	r3, #16
 801534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015352:	e1aa      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015354:	2320      	movs	r3, #32
 8015356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801535a:	e1a6      	b.n	80156aa <UART_SetConfig+0x5a6>
 801535c:	2340      	movs	r3, #64	; 0x40
 801535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015362:	e1a2      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015364:	2380      	movs	r3, #128	; 0x80
 8015366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801536a:	e19e      	b.n	80156aa <UART_SetConfig+0x5a6>
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	4a35      	ldr	r2, [pc, #212]	; (8015448 <UART_SetConfig+0x344>)
 8015372:	4293      	cmp	r3, r2
 8015374:	d130      	bne.n	80153d8 <UART_SetConfig+0x2d4>
 8015376:	4b31      	ldr	r3, [pc, #196]	; (801543c <UART_SetConfig+0x338>)
 8015378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801537a:	f003 0307 	and.w	r3, r3, #7
 801537e:	2b05      	cmp	r3, #5
 8015380:	d826      	bhi.n	80153d0 <UART_SetConfig+0x2cc>
 8015382:	a201      	add	r2, pc, #4	; (adr r2, 8015388 <UART_SetConfig+0x284>)
 8015384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015388:	080153a1 	.word	0x080153a1
 801538c:	080153a9 	.word	0x080153a9
 8015390:	080153b1 	.word	0x080153b1
 8015394:	080153b9 	.word	0x080153b9
 8015398:	080153c1 	.word	0x080153c1
 801539c:	080153c9 	.word	0x080153c9
 80153a0:	2300      	movs	r3, #0
 80153a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153a6:	e180      	b.n	80156aa <UART_SetConfig+0x5a6>
 80153a8:	2304      	movs	r3, #4
 80153aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ae:	e17c      	b.n	80156aa <UART_SetConfig+0x5a6>
 80153b0:	2308      	movs	r3, #8
 80153b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153b6:	e178      	b.n	80156aa <UART_SetConfig+0x5a6>
 80153b8:	2310      	movs	r3, #16
 80153ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153be:	e174      	b.n	80156aa <UART_SetConfig+0x5a6>
 80153c0:	2320      	movs	r3, #32
 80153c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153c6:	e170      	b.n	80156aa <UART_SetConfig+0x5a6>
 80153c8:	2340      	movs	r3, #64	; 0x40
 80153ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ce:	e16c      	b.n	80156aa <UART_SetConfig+0x5a6>
 80153d0:	2380      	movs	r3, #128	; 0x80
 80153d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153d6:	e168      	b.n	80156aa <UART_SetConfig+0x5a6>
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4a1b      	ldr	r2, [pc, #108]	; (801544c <UART_SetConfig+0x348>)
 80153de:	4293      	cmp	r3, r2
 80153e0:	d142      	bne.n	8015468 <UART_SetConfig+0x364>
 80153e2:	4b16      	ldr	r3, [pc, #88]	; (801543c <UART_SetConfig+0x338>)
 80153e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153e6:	f003 0307 	and.w	r3, r3, #7
 80153ea:	2b05      	cmp	r3, #5
 80153ec:	d838      	bhi.n	8015460 <UART_SetConfig+0x35c>
 80153ee:	a201      	add	r2, pc, #4	; (adr r2, 80153f4 <UART_SetConfig+0x2f0>)
 80153f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153f4:	0801540d 	.word	0x0801540d
 80153f8:	08015415 	.word	0x08015415
 80153fc:	0801541d 	.word	0x0801541d
 8015400:	08015425 	.word	0x08015425
 8015404:	08015451 	.word	0x08015451
 8015408:	08015459 	.word	0x08015459
 801540c:	2300      	movs	r3, #0
 801540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015412:	e14a      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015414:	2304      	movs	r3, #4
 8015416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801541a:	e146      	b.n	80156aa <UART_SetConfig+0x5a6>
 801541c:	2308      	movs	r3, #8
 801541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015422:	e142      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015424:	2310      	movs	r3, #16
 8015426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801542a:	e13e      	b.n	80156aa <UART_SetConfig+0x5a6>
 801542c:	cfff69f3 	.word	0xcfff69f3
 8015430:	58000c00 	.word	0x58000c00
 8015434:	11fff4ff 	.word	0x11fff4ff
 8015438:	40011000 	.word	0x40011000
 801543c:	58024400 	.word	0x58024400
 8015440:	40004400 	.word	0x40004400
 8015444:	40004800 	.word	0x40004800
 8015448:	40004c00 	.word	0x40004c00
 801544c:	40005000 	.word	0x40005000
 8015450:	2320      	movs	r3, #32
 8015452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015456:	e128      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015458:	2340      	movs	r3, #64	; 0x40
 801545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801545e:	e124      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015460:	2380      	movs	r3, #128	; 0x80
 8015462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015466:	e120      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	4acb      	ldr	r2, [pc, #812]	; (801579c <UART_SetConfig+0x698>)
 801546e:	4293      	cmp	r3, r2
 8015470:	d176      	bne.n	8015560 <UART_SetConfig+0x45c>
 8015472:	4bcb      	ldr	r3, [pc, #812]	; (80157a0 <UART_SetConfig+0x69c>)
 8015474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801547a:	2b28      	cmp	r3, #40	; 0x28
 801547c:	d86c      	bhi.n	8015558 <UART_SetConfig+0x454>
 801547e:	a201      	add	r2, pc, #4	; (adr r2, 8015484 <UART_SetConfig+0x380>)
 8015480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015484:	08015529 	.word	0x08015529
 8015488:	08015559 	.word	0x08015559
 801548c:	08015559 	.word	0x08015559
 8015490:	08015559 	.word	0x08015559
 8015494:	08015559 	.word	0x08015559
 8015498:	08015559 	.word	0x08015559
 801549c:	08015559 	.word	0x08015559
 80154a0:	08015559 	.word	0x08015559
 80154a4:	08015531 	.word	0x08015531
 80154a8:	08015559 	.word	0x08015559
 80154ac:	08015559 	.word	0x08015559
 80154b0:	08015559 	.word	0x08015559
 80154b4:	08015559 	.word	0x08015559
 80154b8:	08015559 	.word	0x08015559
 80154bc:	08015559 	.word	0x08015559
 80154c0:	08015559 	.word	0x08015559
 80154c4:	08015539 	.word	0x08015539
 80154c8:	08015559 	.word	0x08015559
 80154cc:	08015559 	.word	0x08015559
 80154d0:	08015559 	.word	0x08015559
 80154d4:	08015559 	.word	0x08015559
 80154d8:	08015559 	.word	0x08015559
 80154dc:	08015559 	.word	0x08015559
 80154e0:	08015559 	.word	0x08015559
 80154e4:	08015541 	.word	0x08015541
 80154e8:	08015559 	.word	0x08015559
 80154ec:	08015559 	.word	0x08015559
 80154f0:	08015559 	.word	0x08015559
 80154f4:	08015559 	.word	0x08015559
 80154f8:	08015559 	.word	0x08015559
 80154fc:	08015559 	.word	0x08015559
 8015500:	08015559 	.word	0x08015559
 8015504:	08015549 	.word	0x08015549
 8015508:	08015559 	.word	0x08015559
 801550c:	08015559 	.word	0x08015559
 8015510:	08015559 	.word	0x08015559
 8015514:	08015559 	.word	0x08015559
 8015518:	08015559 	.word	0x08015559
 801551c:	08015559 	.word	0x08015559
 8015520:	08015559 	.word	0x08015559
 8015524:	08015551 	.word	0x08015551
 8015528:	2301      	movs	r3, #1
 801552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801552e:	e0bc      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015530:	2304      	movs	r3, #4
 8015532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015536:	e0b8      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015538:	2308      	movs	r3, #8
 801553a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801553e:	e0b4      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015540:	2310      	movs	r3, #16
 8015542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015546:	e0b0      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015548:	2320      	movs	r3, #32
 801554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801554e:	e0ac      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015550:	2340      	movs	r3, #64	; 0x40
 8015552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015556:	e0a8      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015558:	2380      	movs	r3, #128	; 0x80
 801555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801555e:	e0a4      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	4a8f      	ldr	r2, [pc, #572]	; (80157a4 <UART_SetConfig+0x6a0>)
 8015566:	4293      	cmp	r3, r2
 8015568:	d130      	bne.n	80155cc <UART_SetConfig+0x4c8>
 801556a:	4b8d      	ldr	r3, [pc, #564]	; (80157a0 <UART_SetConfig+0x69c>)
 801556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801556e:	f003 0307 	and.w	r3, r3, #7
 8015572:	2b05      	cmp	r3, #5
 8015574:	d826      	bhi.n	80155c4 <UART_SetConfig+0x4c0>
 8015576:	a201      	add	r2, pc, #4	; (adr r2, 801557c <UART_SetConfig+0x478>)
 8015578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801557c:	08015595 	.word	0x08015595
 8015580:	0801559d 	.word	0x0801559d
 8015584:	080155a5 	.word	0x080155a5
 8015588:	080155ad 	.word	0x080155ad
 801558c:	080155b5 	.word	0x080155b5
 8015590:	080155bd 	.word	0x080155bd
 8015594:	2300      	movs	r3, #0
 8015596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801559a:	e086      	b.n	80156aa <UART_SetConfig+0x5a6>
 801559c:	2304      	movs	r3, #4
 801559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155a2:	e082      	b.n	80156aa <UART_SetConfig+0x5a6>
 80155a4:	2308      	movs	r3, #8
 80155a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155aa:	e07e      	b.n	80156aa <UART_SetConfig+0x5a6>
 80155ac:	2310      	movs	r3, #16
 80155ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155b2:	e07a      	b.n	80156aa <UART_SetConfig+0x5a6>
 80155b4:	2320      	movs	r3, #32
 80155b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ba:	e076      	b.n	80156aa <UART_SetConfig+0x5a6>
 80155bc:	2340      	movs	r3, #64	; 0x40
 80155be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155c2:	e072      	b.n	80156aa <UART_SetConfig+0x5a6>
 80155c4:	2380      	movs	r3, #128	; 0x80
 80155c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ca:	e06e      	b.n	80156aa <UART_SetConfig+0x5a6>
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	4a75      	ldr	r2, [pc, #468]	; (80157a8 <UART_SetConfig+0x6a4>)
 80155d2:	4293      	cmp	r3, r2
 80155d4:	d130      	bne.n	8015638 <UART_SetConfig+0x534>
 80155d6:	4b72      	ldr	r3, [pc, #456]	; (80157a0 <UART_SetConfig+0x69c>)
 80155d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155da:	f003 0307 	and.w	r3, r3, #7
 80155de:	2b05      	cmp	r3, #5
 80155e0:	d826      	bhi.n	8015630 <UART_SetConfig+0x52c>
 80155e2:	a201      	add	r2, pc, #4	; (adr r2, 80155e8 <UART_SetConfig+0x4e4>)
 80155e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155e8:	08015601 	.word	0x08015601
 80155ec:	08015609 	.word	0x08015609
 80155f0:	08015611 	.word	0x08015611
 80155f4:	08015619 	.word	0x08015619
 80155f8:	08015621 	.word	0x08015621
 80155fc:	08015629 	.word	0x08015629
 8015600:	2300      	movs	r3, #0
 8015602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015606:	e050      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015608:	2304      	movs	r3, #4
 801560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801560e:	e04c      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015610:	2308      	movs	r3, #8
 8015612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015616:	e048      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015618:	2310      	movs	r3, #16
 801561a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801561e:	e044      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015620:	2320      	movs	r3, #32
 8015622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015626:	e040      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015628:	2340      	movs	r3, #64	; 0x40
 801562a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801562e:	e03c      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015630:	2380      	movs	r3, #128	; 0x80
 8015632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015636:	e038      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4a5b      	ldr	r2, [pc, #364]	; (80157ac <UART_SetConfig+0x6a8>)
 801563e:	4293      	cmp	r3, r2
 8015640:	d130      	bne.n	80156a4 <UART_SetConfig+0x5a0>
 8015642:	4b57      	ldr	r3, [pc, #348]	; (80157a0 <UART_SetConfig+0x69c>)
 8015644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015646:	f003 0307 	and.w	r3, r3, #7
 801564a:	2b05      	cmp	r3, #5
 801564c:	d826      	bhi.n	801569c <UART_SetConfig+0x598>
 801564e:	a201      	add	r2, pc, #4	; (adr r2, 8015654 <UART_SetConfig+0x550>)
 8015650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015654:	0801566d 	.word	0x0801566d
 8015658:	08015675 	.word	0x08015675
 801565c:	0801567d 	.word	0x0801567d
 8015660:	08015685 	.word	0x08015685
 8015664:	0801568d 	.word	0x0801568d
 8015668:	08015695 	.word	0x08015695
 801566c:	2302      	movs	r3, #2
 801566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015672:	e01a      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015674:	2304      	movs	r3, #4
 8015676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801567a:	e016      	b.n	80156aa <UART_SetConfig+0x5a6>
 801567c:	2308      	movs	r3, #8
 801567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015682:	e012      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015684:	2310      	movs	r3, #16
 8015686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801568a:	e00e      	b.n	80156aa <UART_SetConfig+0x5a6>
 801568c:	2320      	movs	r3, #32
 801568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015692:	e00a      	b.n	80156aa <UART_SetConfig+0x5a6>
 8015694:	2340      	movs	r3, #64	; 0x40
 8015696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801569a:	e006      	b.n	80156aa <UART_SetConfig+0x5a6>
 801569c:	2380      	movs	r3, #128	; 0x80
 801569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156a2:	e002      	b.n	80156aa <UART_SetConfig+0x5a6>
 80156a4:	2380      	movs	r3, #128	; 0x80
 80156a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	4a3f      	ldr	r2, [pc, #252]	; (80157ac <UART_SetConfig+0x6a8>)
 80156b0:	4293      	cmp	r3, r2
 80156b2:	f040 80f8 	bne.w	80158a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80156b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80156ba:	2b20      	cmp	r3, #32
 80156bc:	dc46      	bgt.n	801574c <UART_SetConfig+0x648>
 80156be:	2b02      	cmp	r3, #2
 80156c0:	f2c0 8082 	blt.w	80157c8 <UART_SetConfig+0x6c4>
 80156c4:	3b02      	subs	r3, #2
 80156c6:	2b1e      	cmp	r3, #30
 80156c8:	d87e      	bhi.n	80157c8 <UART_SetConfig+0x6c4>
 80156ca:	a201      	add	r2, pc, #4	; (adr r2, 80156d0 <UART_SetConfig+0x5cc>)
 80156cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156d0:	08015753 	.word	0x08015753
 80156d4:	080157c9 	.word	0x080157c9
 80156d8:	0801575b 	.word	0x0801575b
 80156dc:	080157c9 	.word	0x080157c9
 80156e0:	080157c9 	.word	0x080157c9
 80156e4:	080157c9 	.word	0x080157c9
 80156e8:	0801576b 	.word	0x0801576b
 80156ec:	080157c9 	.word	0x080157c9
 80156f0:	080157c9 	.word	0x080157c9
 80156f4:	080157c9 	.word	0x080157c9
 80156f8:	080157c9 	.word	0x080157c9
 80156fc:	080157c9 	.word	0x080157c9
 8015700:	080157c9 	.word	0x080157c9
 8015704:	080157c9 	.word	0x080157c9
 8015708:	0801577b 	.word	0x0801577b
 801570c:	080157c9 	.word	0x080157c9
 8015710:	080157c9 	.word	0x080157c9
 8015714:	080157c9 	.word	0x080157c9
 8015718:	080157c9 	.word	0x080157c9
 801571c:	080157c9 	.word	0x080157c9
 8015720:	080157c9 	.word	0x080157c9
 8015724:	080157c9 	.word	0x080157c9
 8015728:	080157c9 	.word	0x080157c9
 801572c:	080157c9 	.word	0x080157c9
 8015730:	080157c9 	.word	0x080157c9
 8015734:	080157c9 	.word	0x080157c9
 8015738:	080157c9 	.word	0x080157c9
 801573c:	080157c9 	.word	0x080157c9
 8015740:	080157c9 	.word	0x080157c9
 8015744:	080157c9 	.word	0x080157c9
 8015748:	080157bb 	.word	0x080157bb
 801574c:	2b40      	cmp	r3, #64	; 0x40
 801574e:	d037      	beq.n	80157c0 <UART_SetConfig+0x6bc>
 8015750:	e03a      	b.n	80157c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8015752:	f7fb fc17 	bl	8010f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8015756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015758:	e03c      	b.n	80157d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801575a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801575e:	4618      	mov	r0, r3
 8015760:	f7fb fc26 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015768:	e034      	b.n	80157d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801576a:	f107 0318 	add.w	r3, r7, #24
 801576e:	4618      	mov	r0, r3
 8015770:	f7fb fd72 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015778:	e02c      	b.n	80157d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801577a:	4b09      	ldr	r3, [pc, #36]	; (80157a0 <UART_SetConfig+0x69c>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	f003 0320 	and.w	r3, r3, #32
 8015782:	2b00      	cmp	r3, #0
 8015784:	d016      	beq.n	80157b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015786:	4b06      	ldr	r3, [pc, #24]	; (80157a0 <UART_SetConfig+0x69c>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	08db      	lsrs	r3, r3, #3
 801578c:	f003 0303 	and.w	r3, r3, #3
 8015790:	4a07      	ldr	r2, [pc, #28]	; (80157b0 <UART_SetConfig+0x6ac>)
 8015792:	fa22 f303 	lsr.w	r3, r2, r3
 8015796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015798:	e01c      	b.n	80157d4 <UART_SetConfig+0x6d0>
 801579a:	bf00      	nop
 801579c:	40011400 	.word	0x40011400
 80157a0:	58024400 	.word	0x58024400
 80157a4:	40007800 	.word	0x40007800
 80157a8:	40007c00 	.word	0x40007c00
 80157ac:	58000c00 	.word	0x58000c00
 80157b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80157b4:	4b9d      	ldr	r3, [pc, #628]	; (8015a2c <UART_SetConfig+0x928>)
 80157b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157b8:	e00c      	b.n	80157d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80157ba:	4b9d      	ldr	r3, [pc, #628]	; (8015a30 <UART_SetConfig+0x92c>)
 80157bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157be:	e009      	b.n	80157d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80157c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80157c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157c6:	e005      	b.n	80157d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80157c8:	2300      	movs	r3, #0
 80157ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80157cc:	2301      	movs	r3, #1
 80157ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80157d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80157d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	f000 81de 	beq.w	8015b98 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e0:	4a94      	ldr	r2, [pc, #592]	; (8015a34 <UART_SetConfig+0x930>)
 80157e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80157e6:	461a      	mov	r2, r3
 80157e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80157ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	685a      	ldr	r2, [r3, #4]
 80157f4:	4613      	mov	r3, r2
 80157f6:	005b      	lsls	r3, r3, #1
 80157f8:	4413      	add	r3, r2
 80157fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d305      	bcc.n	801580c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	685b      	ldr	r3, [r3, #4]
 8015804:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015808:	429a      	cmp	r2, r3
 801580a:	d903      	bls.n	8015814 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801580c:	2301      	movs	r3, #1
 801580e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015812:	e1c1      	b.n	8015b98 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015816:	2200      	movs	r2, #0
 8015818:	60bb      	str	r3, [r7, #8]
 801581a:	60fa      	str	r2, [r7, #12]
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015820:	4a84      	ldr	r2, [pc, #528]	; (8015a34 <UART_SetConfig+0x930>)
 8015822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015826:	b29b      	uxth	r3, r3
 8015828:	2200      	movs	r2, #0
 801582a:	603b      	str	r3, [r7, #0]
 801582c:	607a      	str	r2, [r7, #4]
 801582e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015836:	f7ea fd53 	bl	80002e0 <__aeabi_uldivmod>
 801583a:	4602      	mov	r2, r0
 801583c:	460b      	mov	r3, r1
 801583e:	4610      	mov	r0, r2
 8015840:	4619      	mov	r1, r3
 8015842:	f04f 0200 	mov.w	r2, #0
 8015846:	f04f 0300 	mov.w	r3, #0
 801584a:	020b      	lsls	r3, r1, #8
 801584c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015850:	0202      	lsls	r2, r0, #8
 8015852:	6979      	ldr	r1, [r7, #20]
 8015854:	6849      	ldr	r1, [r1, #4]
 8015856:	0849      	lsrs	r1, r1, #1
 8015858:	2000      	movs	r0, #0
 801585a:	460c      	mov	r4, r1
 801585c:	4605      	mov	r5, r0
 801585e:	eb12 0804 	adds.w	r8, r2, r4
 8015862:	eb43 0905 	adc.w	r9, r3, r5
 8015866:	697b      	ldr	r3, [r7, #20]
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	469a      	mov	sl, r3
 801586e:	4693      	mov	fp, r2
 8015870:	4652      	mov	r2, sl
 8015872:	465b      	mov	r3, fp
 8015874:	4640      	mov	r0, r8
 8015876:	4649      	mov	r1, r9
 8015878:	f7ea fd32 	bl	80002e0 <__aeabi_uldivmod>
 801587c:	4602      	mov	r2, r0
 801587e:	460b      	mov	r3, r1
 8015880:	4613      	mov	r3, r2
 8015882:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801588a:	d308      	bcc.n	801589e <UART_SetConfig+0x79a>
 801588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801588e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015892:	d204      	bcs.n	801589e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801589a:	60da      	str	r2, [r3, #12]
 801589c:	e17c      	b.n	8015b98 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801589e:	2301      	movs	r3, #1
 80158a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80158a4:	e178      	b.n	8015b98 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	69db      	ldr	r3, [r3, #28]
 80158aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158ae:	f040 80c5 	bne.w	8015a3c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80158b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80158b6:	2b20      	cmp	r3, #32
 80158b8:	dc48      	bgt.n	801594c <UART_SetConfig+0x848>
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	db7b      	blt.n	80159b6 <UART_SetConfig+0x8b2>
 80158be:	2b20      	cmp	r3, #32
 80158c0:	d879      	bhi.n	80159b6 <UART_SetConfig+0x8b2>
 80158c2:	a201      	add	r2, pc, #4	; (adr r2, 80158c8 <UART_SetConfig+0x7c4>)
 80158c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158c8:	08015953 	.word	0x08015953
 80158cc:	0801595b 	.word	0x0801595b
 80158d0:	080159b7 	.word	0x080159b7
 80158d4:	080159b7 	.word	0x080159b7
 80158d8:	08015963 	.word	0x08015963
 80158dc:	080159b7 	.word	0x080159b7
 80158e0:	080159b7 	.word	0x080159b7
 80158e4:	080159b7 	.word	0x080159b7
 80158e8:	08015973 	.word	0x08015973
 80158ec:	080159b7 	.word	0x080159b7
 80158f0:	080159b7 	.word	0x080159b7
 80158f4:	080159b7 	.word	0x080159b7
 80158f8:	080159b7 	.word	0x080159b7
 80158fc:	080159b7 	.word	0x080159b7
 8015900:	080159b7 	.word	0x080159b7
 8015904:	080159b7 	.word	0x080159b7
 8015908:	08015983 	.word	0x08015983
 801590c:	080159b7 	.word	0x080159b7
 8015910:	080159b7 	.word	0x080159b7
 8015914:	080159b7 	.word	0x080159b7
 8015918:	080159b7 	.word	0x080159b7
 801591c:	080159b7 	.word	0x080159b7
 8015920:	080159b7 	.word	0x080159b7
 8015924:	080159b7 	.word	0x080159b7
 8015928:	080159b7 	.word	0x080159b7
 801592c:	080159b7 	.word	0x080159b7
 8015930:	080159b7 	.word	0x080159b7
 8015934:	080159b7 	.word	0x080159b7
 8015938:	080159b7 	.word	0x080159b7
 801593c:	080159b7 	.word	0x080159b7
 8015940:	080159b7 	.word	0x080159b7
 8015944:	080159b7 	.word	0x080159b7
 8015948:	080159a9 	.word	0x080159a9
 801594c:	2b40      	cmp	r3, #64	; 0x40
 801594e:	d02e      	beq.n	80159ae <UART_SetConfig+0x8aa>
 8015950:	e031      	b.n	80159b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015952:	f7f9 fb1f 	bl	800ef94 <HAL_RCC_GetPCLK1Freq>
 8015956:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015958:	e033      	b.n	80159c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801595a:	f7f9 fb31 	bl	800efc0 <HAL_RCC_GetPCLK2Freq>
 801595e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015960:	e02f      	b.n	80159c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015966:	4618      	mov	r0, r3
 8015968:	f7fb fb22 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015970:	e027      	b.n	80159c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015972:	f107 0318 	add.w	r3, r7, #24
 8015976:	4618      	mov	r0, r3
 8015978:	f7fb fc6e 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801597c:	69fb      	ldr	r3, [r7, #28]
 801597e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015980:	e01f      	b.n	80159c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015982:	4b2d      	ldr	r3, [pc, #180]	; (8015a38 <UART_SetConfig+0x934>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f003 0320 	and.w	r3, r3, #32
 801598a:	2b00      	cmp	r3, #0
 801598c:	d009      	beq.n	80159a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801598e:	4b2a      	ldr	r3, [pc, #168]	; (8015a38 <UART_SetConfig+0x934>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	08db      	lsrs	r3, r3, #3
 8015994:	f003 0303 	and.w	r3, r3, #3
 8015998:	4a24      	ldr	r2, [pc, #144]	; (8015a2c <UART_SetConfig+0x928>)
 801599a:	fa22 f303 	lsr.w	r3, r2, r3
 801599e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80159a0:	e00f      	b.n	80159c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80159a2:	4b22      	ldr	r3, [pc, #136]	; (8015a2c <UART_SetConfig+0x928>)
 80159a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80159a6:	e00c      	b.n	80159c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80159a8:	4b21      	ldr	r3, [pc, #132]	; (8015a30 <UART_SetConfig+0x92c>)
 80159aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80159ac:	e009      	b.n	80159c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80159ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80159b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80159b4:	e005      	b.n	80159c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80159b6:	2300      	movs	r3, #0
 80159b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80159ba:	2301      	movs	r3, #1
 80159bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80159c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80159c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	f000 80e7 	beq.w	8015b98 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ce:	4a19      	ldr	r2, [pc, #100]	; (8015a34 <UART_SetConfig+0x930>)
 80159d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159d4:	461a      	mov	r2, r3
 80159d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80159dc:	005a      	lsls	r2, r3, #1
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	085b      	lsrs	r3, r3, #1
 80159e4:	441a      	add	r2, r3
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80159ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80159f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159f2:	2b0f      	cmp	r3, #15
 80159f4:	d916      	bls.n	8015a24 <UART_SetConfig+0x920>
 80159f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159fc:	d212      	bcs.n	8015a24 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80159fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a00:	b29b      	uxth	r3, r3
 8015a02:	f023 030f 	bic.w	r3, r3, #15
 8015a06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a0a:	085b      	lsrs	r3, r3, #1
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	f003 0307 	and.w	r3, r3, #7
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a16:	4313      	orrs	r3, r2
 8015a18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015a1a:	697b      	ldr	r3, [r7, #20]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015a20:	60da      	str	r2, [r3, #12]
 8015a22:	e0b9      	b.n	8015b98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015a24:	2301      	movs	r3, #1
 8015a26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015a2a:	e0b5      	b.n	8015b98 <UART_SetConfig+0xa94>
 8015a2c:	03d09000 	.word	0x03d09000
 8015a30:	003d0900 	.word	0x003d0900
 8015a34:	0801b5ac 	.word	0x0801b5ac
 8015a38:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015a3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015a40:	2b20      	cmp	r3, #32
 8015a42:	dc49      	bgt.n	8015ad8 <UART_SetConfig+0x9d4>
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	db7c      	blt.n	8015b42 <UART_SetConfig+0xa3e>
 8015a48:	2b20      	cmp	r3, #32
 8015a4a:	d87a      	bhi.n	8015b42 <UART_SetConfig+0xa3e>
 8015a4c:	a201      	add	r2, pc, #4	; (adr r2, 8015a54 <UART_SetConfig+0x950>)
 8015a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a52:	bf00      	nop
 8015a54:	08015adf 	.word	0x08015adf
 8015a58:	08015ae7 	.word	0x08015ae7
 8015a5c:	08015b43 	.word	0x08015b43
 8015a60:	08015b43 	.word	0x08015b43
 8015a64:	08015aef 	.word	0x08015aef
 8015a68:	08015b43 	.word	0x08015b43
 8015a6c:	08015b43 	.word	0x08015b43
 8015a70:	08015b43 	.word	0x08015b43
 8015a74:	08015aff 	.word	0x08015aff
 8015a78:	08015b43 	.word	0x08015b43
 8015a7c:	08015b43 	.word	0x08015b43
 8015a80:	08015b43 	.word	0x08015b43
 8015a84:	08015b43 	.word	0x08015b43
 8015a88:	08015b43 	.word	0x08015b43
 8015a8c:	08015b43 	.word	0x08015b43
 8015a90:	08015b43 	.word	0x08015b43
 8015a94:	08015b0f 	.word	0x08015b0f
 8015a98:	08015b43 	.word	0x08015b43
 8015a9c:	08015b43 	.word	0x08015b43
 8015aa0:	08015b43 	.word	0x08015b43
 8015aa4:	08015b43 	.word	0x08015b43
 8015aa8:	08015b43 	.word	0x08015b43
 8015aac:	08015b43 	.word	0x08015b43
 8015ab0:	08015b43 	.word	0x08015b43
 8015ab4:	08015b43 	.word	0x08015b43
 8015ab8:	08015b43 	.word	0x08015b43
 8015abc:	08015b43 	.word	0x08015b43
 8015ac0:	08015b43 	.word	0x08015b43
 8015ac4:	08015b43 	.word	0x08015b43
 8015ac8:	08015b43 	.word	0x08015b43
 8015acc:	08015b43 	.word	0x08015b43
 8015ad0:	08015b43 	.word	0x08015b43
 8015ad4:	08015b35 	.word	0x08015b35
 8015ad8:	2b40      	cmp	r3, #64	; 0x40
 8015ada:	d02e      	beq.n	8015b3a <UART_SetConfig+0xa36>
 8015adc:	e031      	b.n	8015b42 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015ade:	f7f9 fa59 	bl	800ef94 <HAL_RCC_GetPCLK1Freq>
 8015ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015ae4:	e033      	b.n	8015b4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015ae6:	f7f9 fa6b 	bl	800efc0 <HAL_RCC_GetPCLK2Freq>
 8015aea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015aec:	e02f      	b.n	8015b4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7fb fa5c 	bl	8010fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015afc:	e027      	b.n	8015b4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015afe:	f107 0318 	add.w	r3, r7, #24
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fb fba8 	bl	8011258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015b08:	69fb      	ldr	r3, [r7, #28]
 8015b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b0c:	e01f      	b.n	8015b4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015b0e:	4b2d      	ldr	r3, [pc, #180]	; (8015bc4 <UART_SetConfig+0xac0>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	f003 0320 	and.w	r3, r3, #32
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d009      	beq.n	8015b2e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015b1a:	4b2a      	ldr	r3, [pc, #168]	; (8015bc4 <UART_SetConfig+0xac0>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	08db      	lsrs	r3, r3, #3
 8015b20:	f003 0303 	and.w	r3, r3, #3
 8015b24:	4a28      	ldr	r2, [pc, #160]	; (8015bc8 <UART_SetConfig+0xac4>)
 8015b26:	fa22 f303 	lsr.w	r3, r2, r3
 8015b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015b2c:	e00f      	b.n	8015b4e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015b2e:	4b26      	ldr	r3, [pc, #152]	; (8015bc8 <UART_SetConfig+0xac4>)
 8015b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b32:	e00c      	b.n	8015b4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015b34:	4b25      	ldr	r3, [pc, #148]	; (8015bcc <UART_SetConfig+0xac8>)
 8015b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b38:	e009      	b.n	8015b4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b40:	e005      	b.n	8015b4e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015b42:	2300      	movs	r3, #0
 8015b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015b46:	2301      	movs	r3, #1
 8015b48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015b4c:	bf00      	nop
    }

    if (pclk != 0U)
 8015b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d021      	beq.n	8015b98 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b58:	4a1d      	ldr	r2, [pc, #116]	; (8015bd0 <UART_SetConfig+0xacc>)
 8015b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b5e:	461a      	mov	r2, r3
 8015b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b62:	fbb3 f2f2 	udiv	r2, r3, r2
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	085b      	lsrs	r3, r3, #1
 8015b6c:	441a      	add	r2, r3
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	685b      	ldr	r3, [r3, #4]
 8015b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b7a:	2b0f      	cmp	r3, #15
 8015b7c:	d909      	bls.n	8015b92 <UART_SetConfig+0xa8e>
 8015b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b84:	d205      	bcs.n	8015b92 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b88:	b29a      	uxth	r2, r3
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	60da      	str	r2, [r3, #12]
 8015b90:	e002      	b.n	8015b98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015b92:	2301      	movs	r3, #1
 8015b94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	2200      	movs	r2, #0
 8015bac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015bb4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3748      	adds	r7, #72	; 0x48
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015bc2:	bf00      	nop
 8015bc4:	58024400 	.word	0x58024400
 8015bc8:	03d09000 	.word	0x03d09000
 8015bcc:	003d0900 	.word	0x003d0900
 8015bd0:	0801b5ac 	.word	0x0801b5ac

08015bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015be0:	f003 0308 	and.w	r3, r3, #8
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d00a      	beq.n	8015bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	430a      	orrs	r2, r1
 8015bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c02:	f003 0301 	and.w	r3, r3, #1
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d00a      	beq.n	8015c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	430a      	orrs	r2, r1
 8015c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c24:	f003 0302 	and.w	r3, r3, #2
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d00a      	beq.n	8015c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	430a      	orrs	r2, r1
 8015c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c46:	f003 0304 	and.w	r3, r3, #4
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d00a      	beq.n	8015c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	430a      	orrs	r2, r1
 8015c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c68:	f003 0310 	and.w	r3, r3, #16
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00a      	beq.n	8015c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	689b      	ldr	r3, [r3, #8]
 8015c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	430a      	orrs	r2, r1
 8015c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c8a:	f003 0320 	and.w	r3, r3, #32
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00a      	beq.n	8015ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	689b      	ldr	r3, [r3, #8]
 8015c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	430a      	orrs	r2, r1
 8015ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d01a      	beq.n	8015cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	685b      	ldr	r3, [r3, #4]
 8015cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	430a      	orrs	r2, r1
 8015cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015cd2:	d10a      	bne.n	8015cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	430a      	orrs	r2, r1
 8015ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d00a      	beq.n	8015d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	430a      	orrs	r2, r1
 8015d0a:	605a      	str	r2, [r3, #4]
  }
}
 8015d0c:	bf00      	nop
 8015d0e:	370c      	adds	r7, #12
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr

08015d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b098      	sub	sp, #96	; 0x60
 8015d1c:	af02      	add	r7, sp, #8
 8015d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2200      	movs	r2, #0
 8015d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015d28:	f7f0 f906 	bl	8005f38 <HAL_GetTick>
 8015d2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	f003 0308 	and.w	r3, r3, #8
 8015d38:	2b08      	cmp	r3, #8
 8015d3a:	d12f      	bne.n	8015d9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015d40:	9300      	str	r3, [sp, #0]
 8015d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d44:	2200      	movs	r2, #0
 8015d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 f88e 	bl	8015e6c <UART_WaitOnFlagUntilTimeout>
 8015d50:	4603      	mov	r3, r0
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d022      	beq.n	8015d9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d5e:	e853 3f00 	ldrex	r3, [r3]
 8015d62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	461a      	mov	r2, r3
 8015d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d74:	647b      	str	r3, [r7, #68]	; 0x44
 8015d76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d7c:	e841 2300 	strex	r3, r2, [r1]
 8015d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d1e6      	bne.n	8015d56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2220      	movs	r2, #32
 8015d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2200      	movs	r2, #0
 8015d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015d98:	2303      	movs	r3, #3
 8015d9a:	e063      	b.n	8015e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f003 0304 	and.w	r3, r3, #4
 8015da6:	2b04      	cmp	r3, #4
 8015da8:	d149      	bne.n	8015e3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015daa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015db2:	2200      	movs	r2, #0
 8015db4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f000 f857 	bl	8015e6c <UART_WaitOnFlagUntilTimeout>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d03c      	beq.n	8015e3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dcc:	e853 3f00 	ldrex	r3, [r3]
 8015dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8015dd2:	6a3b      	ldr	r3, [r7, #32]
 8015dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	461a      	mov	r2, r3
 8015de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015de2:	633b      	str	r3, [r7, #48]	; 0x30
 8015de4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dea:	e841 2300 	strex	r3, r2, [r1]
 8015dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d1e6      	bne.n	8015dc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	3308      	adds	r3, #8
 8015dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	e853 3f00 	ldrex	r3, [r3]
 8015e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	f023 0301 	bic.w	r3, r3, #1
 8015e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	3308      	adds	r3, #8
 8015e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e16:	61fa      	str	r2, [r7, #28]
 8015e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e1a:	69b9      	ldr	r1, [r7, #24]
 8015e1c:	69fa      	ldr	r2, [r7, #28]
 8015e1e:	e841 2300 	strex	r3, r2, [r1]
 8015e22:	617b      	str	r3, [r7, #20]
   return(result);
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d1e5      	bne.n	8015df6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2220      	movs	r2, #32
 8015e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2200      	movs	r2, #0
 8015e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015e3a:	2303      	movs	r3, #3
 8015e3c:	e012      	b.n	8015e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2220      	movs	r2, #32
 8015e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2220      	movs	r2, #32
 8015e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2200      	movs	r2, #0
 8015e52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2200      	movs	r2, #0
 8015e58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015e62:	2300      	movs	r3, #0
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	3758      	adds	r7, #88	; 0x58
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b084      	sub	sp, #16
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	60b9      	str	r1, [r7, #8]
 8015e76:	603b      	str	r3, [r7, #0]
 8015e78:	4613      	mov	r3, r2
 8015e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015e7c:	e04f      	b.n	8015f1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015e7e:	69bb      	ldr	r3, [r7, #24]
 8015e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e84:	d04b      	beq.n	8015f1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015e86:	f7f0 f857 	bl	8005f38 <HAL_GetTick>
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	1ad3      	subs	r3, r2, r3
 8015e90:	69ba      	ldr	r2, [r7, #24]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d302      	bcc.n	8015e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8015e96:	69bb      	ldr	r3, [r7, #24]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d101      	bne.n	8015ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015e9c:	2303      	movs	r3, #3
 8015e9e:	e04e      	b.n	8015f3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	f003 0304 	and.w	r3, r3, #4
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d037      	beq.n	8015f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	2b80      	cmp	r3, #128	; 0x80
 8015eb2:	d034      	beq.n	8015f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	2b40      	cmp	r3, #64	; 0x40
 8015eb8:	d031      	beq.n	8015f1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	69db      	ldr	r3, [r3, #28]
 8015ec0:	f003 0308 	and.w	r3, r3, #8
 8015ec4:	2b08      	cmp	r3, #8
 8015ec6:	d110      	bne.n	8015eea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2208      	movs	r2, #8
 8015ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015ed0:	68f8      	ldr	r0, [r7, #12]
 8015ed2:	f000 f95b 	bl	801618c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2208      	movs	r2, #8
 8015eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	e029      	b.n	8015f3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	69db      	ldr	r3, [r3, #28]
 8015ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ef8:	d111      	bne.n	8015f1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015f04:	68f8      	ldr	r0, [r7, #12]
 8015f06:	f000 f941 	bl	801618c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	2220      	movs	r2, #32
 8015f0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	2200      	movs	r2, #0
 8015f16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015f1a:	2303      	movs	r3, #3
 8015f1c:	e00f      	b.n	8015f3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	69da      	ldr	r2, [r3, #28]
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	4013      	ands	r3, r2
 8015f28:	68ba      	ldr	r2, [r7, #8]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	bf0c      	ite	eq
 8015f2e:	2301      	moveq	r3, #1
 8015f30:	2300      	movne	r3, #0
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	461a      	mov	r2, r3
 8015f36:	79fb      	ldrb	r3, [r7, #7]
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d0a0      	beq.n	8015e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015f3c:	2300      	movs	r3, #0
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3710      	adds	r7, #16
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}
	...

08015f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b0a3      	sub	sp, #140	; 0x8c
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	60b9      	str	r1, [r7, #8]
 8015f52:	4613      	mov	r3, r2
 8015f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	68ba      	ldr	r2, [r7, #8]
 8015f5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	88fa      	ldrh	r2, [r7, #6]
 8015f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	88fa      	ldrh	r2, [r7, #6]
 8015f68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	689b      	ldr	r3, [r3, #8]
 8015f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f7a:	d10e      	bne.n	8015f9a <UART_Start_Receive_IT+0x52>
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	691b      	ldr	r3, [r3, #16]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d105      	bne.n	8015f90 <UART_Start_Receive_IT+0x48>
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f8e:	e02d      	b.n	8015fec <UART_Start_Receive_IT+0xa4>
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	22ff      	movs	r2, #255	; 0xff
 8015f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f98:	e028      	b.n	8015fec <UART_Start_Receive_IT+0xa4>
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	689b      	ldr	r3, [r3, #8]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d10d      	bne.n	8015fbe <UART_Start_Receive_IT+0x76>
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	691b      	ldr	r3, [r3, #16]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d104      	bne.n	8015fb4 <UART_Start_Receive_IT+0x6c>
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	22ff      	movs	r2, #255	; 0xff
 8015fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015fb2:	e01b      	b.n	8015fec <UART_Start_Receive_IT+0xa4>
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	227f      	movs	r2, #127	; 0x7f
 8015fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015fbc:	e016      	b.n	8015fec <UART_Start_Receive_IT+0xa4>
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	689b      	ldr	r3, [r3, #8]
 8015fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015fc6:	d10d      	bne.n	8015fe4 <UART_Start_Receive_IT+0x9c>
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	691b      	ldr	r3, [r3, #16]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d104      	bne.n	8015fda <UART_Start_Receive_IT+0x92>
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	227f      	movs	r2, #127	; 0x7f
 8015fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015fd8:	e008      	b.n	8015fec <UART_Start_Receive_IT+0xa4>
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	223f      	movs	r2, #63	; 0x3f
 8015fde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015fe2:	e003      	b.n	8015fec <UART_Start_Receive_IT+0xa4>
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	2222      	movs	r2, #34	; 0x22
 8015ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	3308      	adds	r3, #8
 8016002:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016006:	e853 3f00 	ldrex	r3, [r3]
 801600a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801600c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801600e:	f043 0301 	orr.w	r3, r3, #1
 8016012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	3308      	adds	r3, #8
 801601c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016020:	673a      	str	r2, [r7, #112]	; 0x70
 8016022:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016024:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016028:	e841 2300 	strex	r3, r2, [r1]
 801602c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801602e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016030:	2b00      	cmp	r3, #0
 8016032:	d1e3      	bne.n	8015ffc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801603c:	d14f      	bne.n	80160de <UART_Start_Receive_IT+0x196>
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016044:	88fa      	ldrh	r2, [r7, #6]
 8016046:	429a      	cmp	r2, r3
 8016048:	d349      	bcc.n	80160de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	689b      	ldr	r3, [r3, #8]
 801604e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016052:	d107      	bne.n	8016064 <UART_Start_Receive_IT+0x11c>
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	691b      	ldr	r3, [r3, #16]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d103      	bne.n	8016064 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	4a47      	ldr	r2, [pc, #284]	; (801617c <UART_Start_Receive_IT+0x234>)
 8016060:	675a      	str	r2, [r3, #116]	; 0x74
 8016062:	e002      	b.n	801606a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	4a46      	ldr	r2, [pc, #280]	; (8016180 <UART_Start_Receive_IT+0x238>)
 8016068:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	691b      	ldr	r3, [r3, #16]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d01a      	beq.n	80160a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801607a:	e853 3f00 	ldrex	r3, [r3]
 801607e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	461a      	mov	r2, r3
 8016090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016096:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016098:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801609a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801609c:	e841 2300 	strex	r3, r2, [r1]
 80160a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80160a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d1e4      	bne.n	8016072 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	3308      	adds	r3, #8
 80160ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160b2:	e853 3f00 	ldrex	r3, [r3]
 80160b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80160b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80160be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	3308      	adds	r3, #8
 80160c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80160c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80160ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80160ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80160d0:	e841 2300 	strex	r3, r2, [r1]
 80160d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80160d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d1e5      	bne.n	80160a8 <UART_Start_Receive_IT+0x160>
 80160dc:	e046      	b.n	801616c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	689b      	ldr	r3, [r3, #8]
 80160e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160e6:	d107      	bne.n	80160f8 <UART_Start_Receive_IT+0x1b0>
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	691b      	ldr	r3, [r3, #16]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d103      	bne.n	80160f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	4a24      	ldr	r2, [pc, #144]	; (8016184 <UART_Start_Receive_IT+0x23c>)
 80160f4:	675a      	str	r2, [r3, #116]	; 0x74
 80160f6:	e002      	b.n	80160fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	4a23      	ldr	r2, [pc, #140]	; (8016188 <UART_Start_Receive_IT+0x240>)
 80160fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	691b      	ldr	r3, [r3, #16]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d019      	beq.n	801613a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610e:	e853 3f00 	ldrex	r3, [r3]
 8016112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016116:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801611a:	677b      	str	r3, [r7, #116]	; 0x74
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	461a      	mov	r2, r3
 8016122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016124:	637b      	str	r3, [r7, #52]	; 0x34
 8016126:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801612a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801612c:	e841 2300 	strex	r3, r2, [r1]
 8016130:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016134:	2b00      	cmp	r3, #0
 8016136:	d1e6      	bne.n	8016106 <UART_Start_Receive_IT+0x1be>
 8016138:	e018      	b.n	801616c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016140:	697b      	ldr	r3, [r7, #20]
 8016142:	e853 3f00 	ldrex	r3, [r3]
 8016146:	613b      	str	r3, [r7, #16]
   return(result);
 8016148:	693b      	ldr	r3, [r7, #16]
 801614a:	f043 0320 	orr.w	r3, r3, #32
 801614e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	461a      	mov	r2, r3
 8016156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016158:	623b      	str	r3, [r7, #32]
 801615a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801615c:	69f9      	ldr	r1, [r7, #28]
 801615e:	6a3a      	ldr	r2, [r7, #32]
 8016160:	e841 2300 	strex	r3, r2, [r1]
 8016164:	61bb      	str	r3, [r7, #24]
   return(result);
 8016166:	69bb      	ldr	r3, [r7, #24]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d1e6      	bne.n	801613a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801616c:	2300      	movs	r3, #0
}
 801616e:	4618      	mov	r0, r3
 8016170:	378c      	adds	r7, #140	; 0x8c
 8016172:	46bd      	mov	sp, r7
 8016174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016178:	4770      	bx	lr
 801617a:	bf00      	nop
 801617c:	080169ad 	.word	0x080169ad
 8016180:	0801664d 	.word	0x0801664d
 8016184:	08016495 	.word	0x08016495
 8016188:	080162dd 	.word	0x080162dd

0801618c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801618c:	b480      	push	{r7}
 801618e:	b095      	sub	sp, #84	; 0x54
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801619c:	e853 3f00 	ldrex	r3, [r3]
 80161a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80161a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80161a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	461a      	mov	r2, r3
 80161b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161b2:	643b      	str	r3, [r7, #64]	; 0x40
 80161b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80161b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80161ba:	e841 2300 	strex	r3, r2, [r1]
 80161be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80161c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d1e6      	bne.n	8016194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	3308      	adds	r3, #8
 80161cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161ce:	6a3b      	ldr	r3, [r7, #32]
 80161d0:	e853 3f00 	ldrex	r3, [r3]
 80161d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80161d6:	69fa      	ldr	r2, [r7, #28]
 80161d8:	4b1e      	ldr	r3, [pc, #120]	; (8016254 <UART_EndRxTransfer+0xc8>)
 80161da:	4013      	ands	r3, r2
 80161dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	3308      	adds	r3, #8
 80161e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80161e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80161e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80161ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161ee:	e841 2300 	strex	r3, r2, [r1]
 80161f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80161f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d1e5      	bne.n	80161c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161fe:	2b01      	cmp	r3, #1
 8016200:	d118      	bne.n	8016234 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	e853 3f00 	ldrex	r3, [r3]
 801620e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	f023 0310 	bic.w	r3, r3, #16
 8016216:	647b      	str	r3, [r7, #68]	; 0x44
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	461a      	mov	r2, r3
 801621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016220:	61bb      	str	r3, [r7, #24]
 8016222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016224:	6979      	ldr	r1, [r7, #20]
 8016226:	69ba      	ldr	r2, [r7, #24]
 8016228:	e841 2300 	strex	r3, r2, [r1]
 801622c:	613b      	str	r3, [r7, #16]
   return(result);
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d1e6      	bne.n	8016202 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2220      	movs	r2, #32
 8016238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2200      	movs	r2, #0
 8016240:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2200      	movs	r2, #0
 8016246:	675a      	str	r2, [r3, #116]	; 0x74
}
 8016248:	bf00      	nop
 801624a:	3754      	adds	r7, #84	; 0x54
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr
 8016254:	effffffe 	.word	0xeffffffe

08016258 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b084      	sub	sp, #16
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	2200      	movs	r2, #0
 801626a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	2200      	movs	r2, #0
 8016272:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	f7fe ff2e 	bl	80150d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801627c:	bf00      	nop
 801627e:	3710      	adds	r7, #16
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b088      	sub	sp, #32
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	e853 3f00 	ldrex	r3, [r3]
 8016298:	60bb      	str	r3, [r7, #8]
   return(result);
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80162a0:	61fb      	str	r3, [r7, #28]
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	461a      	mov	r2, r3
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	61bb      	str	r3, [r7, #24]
 80162ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ae:	6979      	ldr	r1, [r7, #20]
 80162b0:	69ba      	ldr	r2, [r7, #24]
 80162b2:	e841 2300 	strex	r3, r2, [r1]
 80162b6:	613b      	str	r3, [r7, #16]
   return(result);
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d1e6      	bne.n	801628c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2220      	movs	r2, #32
 80162c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2200      	movs	r2, #0
 80162ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f7fe fef9 	bl	80150c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80162d2:	bf00      	nop
 80162d4:	3720      	adds	r7, #32
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
	...

080162dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b09c      	sub	sp, #112	; 0x70
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80162f4:	2b22      	cmp	r3, #34	; 0x22
 80162f6:	f040 80be 	bne.w	8016476 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016300:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016304:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016308:	b2d9      	uxtb	r1, r3
 801630a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801630e:	b2da      	uxtb	r2, r3
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016314:	400a      	ands	r2, r1
 8016316:	b2d2      	uxtb	r2, r2
 8016318:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801631e:	1c5a      	adds	r2, r3, #1
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801632a:	b29b      	uxth	r3, r3
 801632c:	3b01      	subs	r3, #1
 801632e:	b29a      	uxth	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801633c:	b29b      	uxth	r3, r3
 801633e:	2b00      	cmp	r3, #0
 8016340:	f040 80a1 	bne.w	8016486 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801634c:	e853 3f00 	ldrex	r3, [r3]
 8016350:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016358:	66bb      	str	r3, [r7, #104]	; 0x68
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	461a      	mov	r2, r3
 8016360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016362:	65bb      	str	r3, [r7, #88]	; 0x58
 8016364:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016366:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801636a:	e841 2300 	strex	r3, r2, [r1]
 801636e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016372:	2b00      	cmp	r3, #0
 8016374:	d1e6      	bne.n	8016344 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	3308      	adds	r3, #8
 801637c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016380:	e853 3f00 	ldrex	r3, [r3]
 8016384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016388:	f023 0301 	bic.w	r3, r3, #1
 801638c:	667b      	str	r3, [r7, #100]	; 0x64
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	3308      	adds	r3, #8
 8016394:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016396:	647a      	str	r2, [r7, #68]	; 0x44
 8016398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801639a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801639c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801639e:	e841 2300 	strex	r3, r2, [r1]
 80163a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80163a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d1e5      	bne.n	8016376 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2220      	movs	r2, #32
 80163ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2200      	movs	r2, #0
 80163b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2200      	movs	r2, #0
 80163bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	4a33      	ldr	r2, [pc, #204]	; (8016490 <UART_RxISR_8BIT+0x1b4>)
 80163c4:	4293      	cmp	r3, r2
 80163c6:	d01f      	beq.n	8016408 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d018      	beq.n	8016408 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163de:	e853 3f00 	ldrex	r3, [r3]
 80163e2:	623b      	str	r3, [r7, #32]
   return(result);
 80163e4:	6a3b      	ldr	r3, [r7, #32]
 80163e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80163ea:	663b      	str	r3, [r7, #96]	; 0x60
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	461a      	mov	r2, r3
 80163f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80163f4:	633b      	str	r3, [r7, #48]	; 0x30
 80163f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163fc:	e841 2300 	strex	r3, r2, [r1]
 8016400:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016404:	2b00      	cmp	r3, #0
 8016406:	d1e6      	bne.n	80163d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801640c:	2b01      	cmp	r3, #1
 801640e:	d12e      	bne.n	801646e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2200      	movs	r2, #0
 8016414:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	e853 3f00 	ldrex	r3, [r3]
 8016422:	60fb      	str	r3, [r7, #12]
   return(result);
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	f023 0310 	bic.w	r3, r3, #16
 801642a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	461a      	mov	r2, r3
 8016432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016434:	61fb      	str	r3, [r7, #28]
 8016436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016438:	69b9      	ldr	r1, [r7, #24]
 801643a:	69fa      	ldr	r2, [r7, #28]
 801643c:	e841 2300 	strex	r3, r2, [r1]
 8016440:	617b      	str	r3, [r7, #20]
   return(result);
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d1e6      	bne.n	8016416 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	69db      	ldr	r3, [r3, #28]
 801644e:	f003 0310 	and.w	r3, r3, #16
 8016452:	2b10      	cmp	r3, #16
 8016454:	d103      	bne.n	801645e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	2210      	movs	r2, #16
 801645c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016464:	4619      	mov	r1, r3
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f7fe fe40 	bl	80150ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801646c:	e00b      	b.n	8016486 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f7ec fcbc 	bl	8002dec <HAL_UART_RxCpltCallback>
}
 8016474:	e007      	b.n	8016486 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	699a      	ldr	r2, [r3, #24]
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	f042 0208 	orr.w	r2, r2, #8
 8016484:	619a      	str	r2, [r3, #24]
}
 8016486:	bf00      	nop
 8016488:	3770      	adds	r7, #112	; 0x70
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	58000c00 	.word	0x58000c00

08016494 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b09c      	sub	sp, #112	; 0x70
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80164ac:	2b22      	cmp	r3, #34	; 0x22
 80164ae:	f040 80be 	bne.w	801662e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80164c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80164c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80164ca:	4013      	ands	r3, r2
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164d6:	1c9a      	adds	r2, r3, #2
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	3b01      	subs	r3, #1
 80164e6:	b29a      	uxth	r2, r3
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164f4:	b29b      	uxth	r3, r3
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	f040 80a1 	bne.w	801663e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016504:	e853 3f00 	ldrex	r3, [r3]
 8016508:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801650a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801650c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016510:	667b      	str	r3, [r7, #100]	; 0x64
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	461a      	mov	r2, r3
 8016518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801651a:	657b      	str	r3, [r7, #84]	; 0x54
 801651c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801651e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016522:	e841 2300 	strex	r3, r2, [r1]
 8016526:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801652a:	2b00      	cmp	r3, #0
 801652c:	d1e6      	bne.n	80164fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	3308      	adds	r3, #8
 8016534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016538:	e853 3f00 	ldrex	r3, [r3]
 801653c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016540:	f023 0301 	bic.w	r3, r3, #1
 8016544:	663b      	str	r3, [r7, #96]	; 0x60
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	3308      	adds	r3, #8
 801654c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801654e:	643a      	str	r2, [r7, #64]	; 0x40
 8016550:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016556:	e841 2300 	strex	r3, r2, [r1]
 801655a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801655e:	2b00      	cmp	r3, #0
 8016560:	d1e5      	bne.n	801652e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2220      	movs	r2, #32
 8016566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2200      	movs	r2, #0
 8016574:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	4a33      	ldr	r2, [pc, #204]	; (8016648 <UART_RxISR_16BIT+0x1b4>)
 801657c:	4293      	cmp	r3, r2
 801657e:	d01f      	beq.n	80165c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801658a:	2b00      	cmp	r3, #0
 801658c:	d018      	beq.n	80165c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016594:	6a3b      	ldr	r3, [r7, #32]
 8016596:	e853 3f00 	ldrex	r3, [r3]
 801659a:	61fb      	str	r3, [r7, #28]
   return(result);
 801659c:	69fb      	ldr	r3, [r7, #28]
 801659e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80165a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	461a      	mov	r2, r3
 80165aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80165ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165b4:	e841 2300 	strex	r3, r2, [r1]
 80165b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80165ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d1e6      	bne.n	801658e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165c4:	2b01      	cmp	r3, #1
 80165c6:	d12e      	bne.n	8016626 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	e853 3f00 	ldrex	r3, [r3]
 80165da:	60bb      	str	r3, [r7, #8]
   return(result);
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	f023 0310 	bic.w	r3, r3, #16
 80165e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	461a      	mov	r2, r3
 80165ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80165ec:	61bb      	str	r3, [r7, #24]
 80165ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165f0:	6979      	ldr	r1, [r7, #20]
 80165f2:	69ba      	ldr	r2, [r7, #24]
 80165f4:	e841 2300 	strex	r3, r2, [r1]
 80165f8:	613b      	str	r3, [r7, #16]
   return(result);
 80165fa:	693b      	ldr	r3, [r7, #16]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d1e6      	bne.n	80165ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	69db      	ldr	r3, [r3, #28]
 8016606:	f003 0310 	and.w	r3, r3, #16
 801660a:	2b10      	cmp	r3, #16
 801660c:	d103      	bne.n	8016616 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	2210      	movs	r2, #16
 8016614:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801661c:	4619      	mov	r1, r3
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7fe fd64 	bl	80150ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016624:	e00b      	b.n	801663e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f7ec fbe0 	bl	8002dec <HAL_UART_RxCpltCallback>
}
 801662c:	e007      	b.n	801663e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	699a      	ldr	r2, [r3, #24]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f042 0208 	orr.w	r2, r2, #8
 801663c:	619a      	str	r2, [r3, #24]
}
 801663e:	bf00      	nop
 8016640:	3770      	adds	r7, #112	; 0x70
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	58000c00 	.word	0x58000c00

0801664c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b0ac      	sub	sp, #176	; 0xb0
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801665a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	69db      	ldr	r3, [r3, #28]
 8016664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	689b      	ldr	r3, [r3, #8]
 8016678:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016682:	2b22      	cmp	r3, #34	; 0x22
 8016684:	f040 8180 	bne.w	8016988 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801668e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016692:	e123      	b.n	80168dc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801669a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801669e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80166a2:	b2d9      	uxtb	r1, r3
 80166a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80166a8:	b2da      	uxtb	r2, r3
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166ae:	400a      	ands	r2, r1
 80166b0:	b2d2      	uxtb	r2, r2
 80166b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166b8:	1c5a      	adds	r2, r3, #1
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	3b01      	subs	r3, #1
 80166c8:	b29a      	uxth	r2, r3
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	69db      	ldr	r3, [r3, #28]
 80166d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80166da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166de:	f003 0307 	and.w	r3, r3, #7
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d053      	beq.n	801678e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80166e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166ea:	f003 0301 	and.w	r3, r3, #1
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d011      	beq.n	8016716 <UART_RxISR_8BIT_FIFOEN+0xca>
 80166f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80166f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d00b      	beq.n	8016716 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	2201      	movs	r2, #1
 8016704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801670c:	f043 0201 	orr.w	r2, r3, #1
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801671a:	f003 0302 	and.w	r3, r3, #2
 801671e:	2b00      	cmp	r3, #0
 8016720:	d011      	beq.n	8016746 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8016722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016726:	f003 0301 	and.w	r3, r3, #1
 801672a:	2b00      	cmp	r3, #0
 801672c:	d00b      	beq.n	8016746 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	2202      	movs	r2, #2
 8016734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801673c:	f043 0204 	orr.w	r2, r3, #4
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801674a:	f003 0304 	and.w	r3, r3, #4
 801674e:	2b00      	cmp	r3, #0
 8016750:	d011      	beq.n	8016776 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016756:	f003 0301 	and.w	r3, r3, #1
 801675a:	2b00      	cmp	r3, #0
 801675c:	d00b      	beq.n	8016776 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2204      	movs	r2, #4
 8016764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801676c:	f043 0202 	orr.w	r2, r3, #2
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801677c:	2b00      	cmp	r3, #0
 801677e:	d006      	beq.n	801678e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7fe fca9 	bl	80150d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	2200      	movs	r2, #0
 801678a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016794:	b29b      	uxth	r3, r3
 8016796:	2b00      	cmp	r3, #0
 8016798:	f040 80a0 	bne.w	80168dc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80167a4:	e853 3f00 	ldrex	r3, [r3]
 80167a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80167aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	461a      	mov	r2, r3
 80167ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80167be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80167c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80167c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80167c6:	e841 2300 	strex	r3, r2, [r1]
 80167ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80167cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d1e4      	bne.n	801679c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	3308      	adds	r3, #8
 80167d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167dc:	e853 3f00 	ldrex	r3, [r3]
 80167e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80167e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80167e4:	4b6e      	ldr	r3, [pc, #440]	; (80169a0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80167e6:	4013      	ands	r3, r2
 80167e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	3308      	adds	r3, #8
 80167f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80167f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80167f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80167fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80167fe:	e841 2300 	strex	r3, r2, [r1]
 8016802:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016806:	2b00      	cmp	r3, #0
 8016808:	d1e3      	bne.n	80167d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2220      	movs	r2, #32
 801680e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	2200      	movs	r2, #0
 8016816:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2200      	movs	r2, #0
 801681c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	4a60      	ldr	r2, [pc, #384]	; (80169a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8016824:	4293      	cmp	r3, r2
 8016826:	d021      	beq.n	801686c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016832:	2b00      	cmp	r3, #0
 8016834:	d01a      	beq.n	801686c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801683c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801683e:	e853 3f00 	ldrex	r3, [r3]
 8016842:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801684a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	461a      	mov	r2, r3
 8016854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016858:	657b      	str	r3, [r7, #84]	; 0x54
 801685a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801685c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801685e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016860:	e841 2300 	strex	r3, r2, [r1]
 8016864:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016868:	2b00      	cmp	r3, #0
 801686a:	d1e4      	bne.n	8016836 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016870:	2b01      	cmp	r3, #1
 8016872:	d130      	bne.n	80168d6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2200      	movs	r2, #0
 8016878:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016882:	e853 3f00 	ldrex	r3, [r3]
 8016886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688a:	f023 0310 	bic.w	r3, r3, #16
 801688e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	461a      	mov	r2, r3
 8016898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801689c:	643b      	str	r3, [r7, #64]	; 0x40
 801689e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80168a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80168a4:	e841 2300 	strex	r3, r2, [r1]
 80168a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80168aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d1e4      	bne.n	801687a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	69db      	ldr	r3, [r3, #28]
 80168b6:	f003 0310 	and.w	r3, r3, #16
 80168ba:	2b10      	cmp	r3, #16
 80168bc:	d103      	bne.n	80168c6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	2210      	movs	r2, #16
 80168c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80168cc:	4619      	mov	r1, r3
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f7fe fc0c 	bl	80150ec <HAL_UARTEx_RxEventCallback>
 80168d4:	e002      	b.n	80168dc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f7ec fa88 	bl	8002dec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80168dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d006      	beq.n	80168f2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80168e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168e8:	f003 0320 	and.w	r3, r3, #32
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	f47f aed1 	bne.w	8016694 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80168f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80168fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016900:	2b00      	cmp	r3, #0
 8016902:	d049      	beq.n	8016998 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801690a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801690e:	429a      	cmp	r2, r3
 8016910:	d242      	bcs.n	8016998 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	3308      	adds	r3, #8
 8016918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801691a:	6a3b      	ldr	r3, [r7, #32]
 801691c:	e853 3f00 	ldrex	r3, [r3]
 8016920:	61fb      	str	r3, [r7, #28]
   return(result);
 8016922:	69fb      	ldr	r3, [r7, #28]
 8016924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	3308      	adds	r3, #8
 8016932:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801693a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801693c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801693e:	e841 2300 	strex	r3, r2, [r1]
 8016942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016946:	2b00      	cmp	r3, #0
 8016948:	d1e3      	bne.n	8016912 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	4a16      	ldr	r2, [pc, #88]	; (80169a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801694e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	e853 3f00 	ldrex	r3, [r3]
 801695c:	60bb      	str	r3, [r7, #8]
   return(result);
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	f043 0320 	orr.w	r3, r3, #32
 8016964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	461a      	mov	r2, r3
 801696e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016972:	61bb      	str	r3, [r7, #24]
 8016974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016976:	6979      	ldr	r1, [r7, #20]
 8016978:	69ba      	ldr	r2, [r7, #24]
 801697a:	e841 2300 	strex	r3, r2, [r1]
 801697e:	613b      	str	r3, [r7, #16]
   return(result);
 8016980:	693b      	ldr	r3, [r7, #16]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d1e4      	bne.n	8016950 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016986:	e007      	b.n	8016998 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	699a      	ldr	r2, [r3, #24]
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	f042 0208 	orr.w	r2, r2, #8
 8016996:	619a      	str	r2, [r3, #24]
}
 8016998:	bf00      	nop
 801699a:	37b0      	adds	r7, #176	; 0xb0
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}
 80169a0:	effffffe 	.word	0xeffffffe
 80169a4:	58000c00 	.word	0x58000c00
 80169a8:	080162dd 	.word	0x080162dd

080169ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b0ae      	sub	sp, #184	; 0xb8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80169ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	69db      	ldr	r3, [r3, #28]
 80169c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	689b      	ldr	r3, [r3, #8]
 80169d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80169e2:	2b22      	cmp	r3, #34	; 0x22
 80169e4:	f040 8184 	bne.w	8016cf0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80169ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80169f2:	e127      	b.n	8016c44 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8016a06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016a0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016a0e:	4013      	ands	r3, r2
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016a16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a1c:	1c9a      	adds	r2, r3, #2
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	3b01      	subs	r3, #1
 8016a2c:	b29a      	uxth	r2, r3
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	69db      	ldr	r3, [r3, #28]
 8016a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a42:	f003 0307 	and.w	r3, r3, #7
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d053      	beq.n	8016af2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a4e:	f003 0301 	and.w	r3, r3, #1
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d011      	beq.n	8016a7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8016a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d00b      	beq.n	8016a7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	2201      	movs	r2, #1
 8016a68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a70:	f043 0201 	orr.w	r2, r3, #1
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a7e:	f003 0302 	and.w	r3, r3, #2
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d011      	beq.n	8016aaa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a8a:	f003 0301 	and.w	r3, r3, #1
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d00b      	beq.n	8016aaa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	2202      	movs	r2, #2
 8016a98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016aa0:	f043 0204 	orr.w	r2, r3, #4
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016aae:	f003 0304 	and.w	r3, r3, #4
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d011      	beq.n	8016ada <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016aba:	f003 0301 	and.w	r3, r3, #1
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d00b      	beq.n	8016ada <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	2204      	movs	r2, #4
 8016ac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ad0:	f043 0202 	orr.w	r2, r3, #2
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d006      	beq.n	8016af2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016ae4:	6878      	ldr	r0, [r7, #4]
 8016ae6:	f7fe faf7 	bl	80150d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2200      	movs	r2, #0
 8016aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016af8:	b29b      	uxth	r3, r3
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	f040 80a2 	bne.w	8016c44 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b08:	e853 3f00 	ldrex	r3, [r3]
 8016b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016b26:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016b2e:	e841 2300 	strex	r3, r2, [r1]
 8016b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d1e2      	bne.n	8016b00 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	3308      	adds	r3, #8
 8016b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016b44:	e853 3f00 	ldrex	r3, [r3]
 8016b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016b4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016b4c:	4b6e      	ldr	r3, [pc, #440]	; (8016d08 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016b4e:	4013      	ands	r3, r2
 8016b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	3308      	adds	r3, #8
 8016b5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016b66:	e841 2300 	strex	r3, r2, [r1]
 8016b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d1e3      	bne.n	8016b3a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2220      	movs	r2, #32
 8016b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2200      	movs	r2, #0
 8016b84:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	4a60      	ldr	r2, [pc, #384]	; (8016d0c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016b8c:	4293      	cmp	r3, r2
 8016b8e:	d021      	beq.n	8016bd4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d01a      	beq.n	8016bd4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ba6:	e853 3f00 	ldrex	r3, [r3]
 8016baa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	461a      	mov	r2, r3
 8016bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016bc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8016bc2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016bc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016bc8:	e841 2300 	strex	r3, r2, [r1]
 8016bcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d1e4      	bne.n	8016b9e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bd8:	2b01      	cmp	r3, #1
 8016bda:	d130      	bne.n	8016c3e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2200      	movs	r2, #0
 8016be0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bea:	e853 3f00 	ldrex	r3, [r3]
 8016bee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bf2:	f023 0310 	bic.w	r3, r3, #16
 8016bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	461a      	mov	r2, r3
 8016c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016c04:	647b      	str	r3, [r7, #68]	; 0x44
 8016c06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c0c:	e841 2300 	strex	r3, r2, [r1]
 8016c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d1e4      	bne.n	8016be2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	69db      	ldr	r3, [r3, #28]
 8016c1e:	f003 0310 	and.w	r3, r3, #16
 8016c22:	2b10      	cmp	r3, #16
 8016c24:	d103      	bne.n	8016c2e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	2210      	movs	r2, #16
 8016c2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016c34:	4619      	mov	r1, r3
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f7fe fa58 	bl	80150ec <HAL_UARTEx_RxEventCallback>
 8016c3c:	e002      	b.n	8016c44 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7ec f8d4 	bl	8002dec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016c44:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d006      	beq.n	8016c5a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016c50:	f003 0320 	and.w	r3, r3, #32
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f47f aecd 	bne.w	80169f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016c60:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016c64:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d049      	beq.n	8016d00 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c72:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d242      	bcs.n	8016d00 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	3308      	adds	r3, #8
 8016c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c84:	e853 3f00 	ldrex	r3, [r3]
 8016c88:	623b      	str	r3, [r7, #32]
   return(result);
 8016c8a:	6a3b      	ldr	r3, [r7, #32]
 8016c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	3308      	adds	r3, #8
 8016c9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8016ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ca6:	e841 2300 	strex	r3, r2, [r1]
 8016caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d1e3      	bne.n	8016c7a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	4a16      	ldr	r2, [pc, #88]	; (8016d10 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016cb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	e853 3f00 	ldrex	r3, [r3]
 8016cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	f043 0320 	orr.w	r3, r3, #32
 8016ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016cda:	61fb      	str	r3, [r7, #28]
 8016cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cde:	69b9      	ldr	r1, [r7, #24]
 8016ce0:	69fa      	ldr	r2, [r7, #28]
 8016ce2:	e841 2300 	strex	r3, r2, [r1]
 8016ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1e4      	bne.n	8016cb8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016cee:	e007      	b.n	8016d00 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	699a      	ldr	r2, [r3, #24]
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	f042 0208 	orr.w	r2, r2, #8
 8016cfe:	619a      	str	r2, [r3, #24]
}
 8016d00:	bf00      	nop
 8016d02:	37b8      	adds	r7, #184	; 0xb8
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	effffffe 	.word	0xeffffffe
 8016d0c:	58000c00 	.word	0x58000c00
 8016d10:	08016495 	.word	0x08016495

08016d14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b083      	sub	sp, #12
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016d1c:	bf00      	nop
 8016d1e:	370c      	adds	r7, #12
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr

08016d28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016d28:	b480      	push	{r7}
 8016d2a:	b083      	sub	sp, #12
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016d30:	bf00      	nop
 8016d32:	370c      	adds	r7, #12
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr

08016d3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	b083      	sub	sp, #12
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016d44:	bf00      	nop
 8016d46:	370c      	adds	r7, #12
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4e:	4770      	bx	lr

08016d50 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016d50:	b480      	push	{r7}
 8016d52:	b089      	sub	sp, #36	; 0x24
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d101      	bne.n	8016d66 <HAL_UARTEx_EnableStopMode+0x16>
 8016d62:	2302      	movs	r3, #2
 8016d64:	e021      	b.n	8016daa <HAL_UARTEx_EnableStopMode+0x5a>
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	2201      	movs	r2, #1
 8016d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	e853 3f00 	ldrex	r3, [r3]
 8016d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	f043 0302 	orr.w	r3, r3, #2
 8016d82:	61fb      	str	r3, [r7, #28]
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	461a      	mov	r2, r3
 8016d8a:	69fb      	ldr	r3, [r7, #28]
 8016d8c:	61bb      	str	r3, [r7, #24]
 8016d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d90:	6979      	ldr	r1, [r7, #20]
 8016d92:	69ba      	ldr	r2, [r7, #24]
 8016d94:	e841 2300 	strex	r3, r2, [r1]
 8016d98:	613b      	str	r3, [r7, #16]
   return(result);
 8016d9a:	693b      	ldr	r3, [r7, #16]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d1e6      	bne.n	8016d6e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2200      	movs	r2, #0
 8016da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016da8:	2300      	movs	r3, #0
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3724      	adds	r7, #36	; 0x24
 8016dae:	46bd      	mov	sp, r7
 8016db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db4:	4770      	bx	lr

08016db6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b084      	sub	sp, #16
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016dc4:	2b01      	cmp	r3, #1
 8016dc6:	d101      	bne.n	8016dcc <HAL_UARTEx_EnableFifoMode+0x16>
 8016dc8:	2302      	movs	r3, #2
 8016dca:	e02b      	b.n	8016e24 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2201      	movs	r2, #1
 8016dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2224      	movs	r2, #36	; 0x24
 8016dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	f022 0201 	bic.w	r2, r2, #1
 8016df2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016dfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016e02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	68fa      	ldr	r2, [r7, #12]
 8016e0a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f000 f8c3 	bl	8016f98 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2220      	movs	r2, #32
 8016e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016e22:	2300      	movs	r3, #0
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3710      	adds	r7, #16
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b085      	sub	sp, #20
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016e3a:	2b01      	cmp	r3, #1
 8016e3c:	d101      	bne.n	8016e42 <HAL_UARTEx_DisableFifoMode+0x16>
 8016e3e:	2302      	movs	r3, #2
 8016e40:	e027      	b.n	8016e92 <HAL_UARTEx_DisableFifoMode+0x66>
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2201      	movs	r2, #1
 8016e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2224      	movs	r2, #36	; 0x24
 8016e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	681a      	ldr	r2, [r3, #0]
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	f022 0201 	bic.w	r2, r2, #1
 8016e68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016e70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	2200      	movs	r2, #0
 8016e76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	68fa      	ldr	r2, [r7, #12]
 8016e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2220      	movs	r2, #32
 8016e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016e90:	2300      	movs	r3, #0
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	3714      	adds	r7, #20
 8016e96:	46bd      	mov	sp, r7
 8016e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9c:	4770      	bx	lr

08016e9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016e9e:	b580      	push	{r7, lr}
 8016ea0:	b084      	sub	sp, #16
 8016ea2:	af00      	add	r7, sp, #0
 8016ea4:	6078      	str	r0, [r7, #4]
 8016ea6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d101      	bne.n	8016eb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016eb2:	2302      	movs	r3, #2
 8016eb4:	e02d      	b.n	8016f12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2201      	movs	r2, #1
 8016eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2224      	movs	r2, #36	; 0x24
 8016ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	681a      	ldr	r2, [r3, #0]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	f022 0201 	bic.w	r2, r2, #1
 8016edc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	689b      	ldr	r3, [r3, #8]
 8016ee4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	683a      	ldr	r2, [r7, #0]
 8016eee:	430a      	orrs	r2, r1
 8016ef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f000 f850 	bl	8016f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	68fa      	ldr	r2, [r7, #12]
 8016efe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	2220      	movs	r2, #32
 8016f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016f10:	2300      	movs	r3, #0
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3710      	adds	r7, #16
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}

08016f1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016f1a:	b580      	push	{r7, lr}
 8016f1c:	b084      	sub	sp, #16
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	6078      	str	r0, [r7, #4]
 8016f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016f2a:	2b01      	cmp	r3, #1
 8016f2c:	d101      	bne.n	8016f32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016f2e:	2302      	movs	r3, #2
 8016f30:	e02d      	b.n	8016f8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	2201      	movs	r2, #1
 8016f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	2224      	movs	r2, #36	; 0x24
 8016f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	681a      	ldr	r2, [r3, #0]
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	f022 0201 	bic.w	r2, r2, #1
 8016f58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	689b      	ldr	r3, [r3, #8]
 8016f60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	683a      	ldr	r2, [r7, #0]
 8016f6a:	430a      	orrs	r2, r1
 8016f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016f6e:	6878      	ldr	r0, [r7, #4]
 8016f70:	f000 f812 	bl	8016f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	68fa      	ldr	r2, [r7, #12]
 8016f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2220      	movs	r2, #32
 8016f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2200      	movs	r2, #0
 8016f88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016f8c:	2300      	movs	r3, #0
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3710      	adds	r7, #16
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
	...

08016f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016f98:	b480      	push	{r7}
 8016f9a:	b085      	sub	sp, #20
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d108      	bne.n	8016fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	2201      	movs	r2, #1
 8016fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2201      	movs	r2, #1
 8016fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016fb8:	e031      	b.n	801701e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016fba:	2310      	movs	r3, #16
 8016fbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016fbe:	2310      	movs	r3, #16
 8016fc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	689b      	ldr	r3, [r3, #8]
 8016fc8:	0e5b      	lsrs	r3, r3, #25
 8016fca:	b2db      	uxtb	r3, r3
 8016fcc:	f003 0307 	and.w	r3, r3, #7
 8016fd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	689b      	ldr	r3, [r3, #8]
 8016fd8:	0f5b      	lsrs	r3, r3, #29
 8016fda:	b2db      	uxtb	r3, r3
 8016fdc:	f003 0307 	and.w	r3, r3, #7
 8016fe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016fe2:	7bbb      	ldrb	r3, [r7, #14]
 8016fe4:	7b3a      	ldrb	r2, [r7, #12]
 8016fe6:	4911      	ldr	r1, [pc, #68]	; (801702c <UARTEx_SetNbDataToProcess+0x94>)
 8016fe8:	5c8a      	ldrb	r2, [r1, r2]
 8016fea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016fee:	7b3a      	ldrb	r2, [r7, #12]
 8016ff0:	490f      	ldr	r1, [pc, #60]	; (8017030 <UARTEx_SetNbDataToProcess+0x98>)
 8016ff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ff8:	b29a      	uxth	r2, r3
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017000:	7bfb      	ldrb	r3, [r7, #15]
 8017002:	7b7a      	ldrb	r2, [r7, #13]
 8017004:	4909      	ldr	r1, [pc, #36]	; (801702c <UARTEx_SetNbDataToProcess+0x94>)
 8017006:	5c8a      	ldrb	r2, [r1, r2]
 8017008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801700c:	7b7a      	ldrb	r2, [r7, #13]
 801700e:	4908      	ldr	r1, [pc, #32]	; (8017030 <UARTEx_SetNbDataToProcess+0x98>)
 8017010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017012:	fb93 f3f2 	sdiv	r3, r3, r2
 8017016:	b29a      	uxth	r2, r3
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801701e:	bf00      	nop
 8017020:	3714      	adds	r7, #20
 8017022:	46bd      	mov	sp, r7
 8017024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017028:	4770      	bx	lr
 801702a:	bf00      	nop
 801702c:	0801b5c4 	.word	0x0801b5c4
 8017030:	0801b5cc 	.word	0x0801b5cc

08017034 <__NVIC_SetPriority>:
{
 8017034:	b480      	push	{r7}
 8017036:	b083      	sub	sp, #12
 8017038:	af00      	add	r7, sp, #0
 801703a:	4603      	mov	r3, r0
 801703c:	6039      	str	r1, [r7, #0]
 801703e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017044:	2b00      	cmp	r3, #0
 8017046:	db0a      	blt.n	801705e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017048:	683b      	ldr	r3, [r7, #0]
 801704a:	b2da      	uxtb	r2, r3
 801704c:	490c      	ldr	r1, [pc, #48]	; (8017080 <__NVIC_SetPriority+0x4c>)
 801704e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017052:	0112      	lsls	r2, r2, #4
 8017054:	b2d2      	uxtb	r2, r2
 8017056:	440b      	add	r3, r1
 8017058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801705c:	e00a      	b.n	8017074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	b2da      	uxtb	r2, r3
 8017062:	4908      	ldr	r1, [pc, #32]	; (8017084 <__NVIC_SetPriority+0x50>)
 8017064:	88fb      	ldrh	r3, [r7, #6]
 8017066:	f003 030f 	and.w	r3, r3, #15
 801706a:	3b04      	subs	r3, #4
 801706c:	0112      	lsls	r2, r2, #4
 801706e:	b2d2      	uxtb	r2, r2
 8017070:	440b      	add	r3, r1
 8017072:	761a      	strb	r2, [r3, #24]
}
 8017074:	bf00      	nop
 8017076:	370c      	adds	r7, #12
 8017078:	46bd      	mov	sp, r7
 801707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707e:	4770      	bx	lr
 8017080:	e000e100 	.word	0xe000e100
 8017084:	e000ed00 	.word	0xe000ed00

08017088 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017088:	b580      	push	{r7, lr}
 801708a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801708c:	4b05      	ldr	r3, [pc, #20]	; (80170a4 <SysTick_Handler+0x1c>)
 801708e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017090:	f002 faa0 	bl	80195d4 <xTaskGetSchedulerState>
 8017094:	4603      	mov	r3, r0
 8017096:	2b01      	cmp	r3, #1
 8017098:	d001      	beq.n	801709e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801709a:	f003 f8bd 	bl	801a218 <xPortSysTickHandler>
  }
}
 801709e:	bf00      	nop
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	e000e010 	.word	0xe000e010

080170a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80170a8:	b580      	push	{r7, lr}
 80170aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80170ac:	2100      	movs	r1, #0
 80170ae:	f06f 0004 	mvn.w	r0, #4
 80170b2:	f7ff ffbf 	bl	8017034 <__NVIC_SetPriority>
#endif
}
 80170b6:	bf00      	nop
 80170b8:	bd80      	pop	{r7, pc}
	...

080170bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80170bc:	b480      	push	{r7}
 80170be:	b083      	sub	sp, #12
 80170c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170c2:	f3ef 8305 	mrs	r3, IPSR
 80170c6:	603b      	str	r3, [r7, #0]
  return(result);
 80170c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d003      	beq.n	80170d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80170ce:	f06f 0305 	mvn.w	r3, #5
 80170d2:	607b      	str	r3, [r7, #4]
 80170d4:	e00c      	b.n	80170f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80170d6:	4b0a      	ldr	r3, [pc, #40]	; (8017100 <osKernelInitialize+0x44>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d105      	bne.n	80170ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80170de:	4b08      	ldr	r3, [pc, #32]	; (8017100 <osKernelInitialize+0x44>)
 80170e0:	2201      	movs	r2, #1
 80170e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80170e4:	2300      	movs	r3, #0
 80170e6:	607b      	str	r3, [r7, #4]
 80170e8:	e002      	b.n	80170f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80170ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80170f0:	687b      	ldr	r3, [r7, #4]
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	370c      	adds	r7, #12
 80170f6:	46bd      	mov	sp, r7
 80170f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fc:	4770      	bx	lr
 80170fe:	bf00      	nop
 8017100:	2400201c 	.word	0x2400201c

08017104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801710a:	f3ef 8305 	mrs	r3, IPSR
 801710e:	603b      	str	r3, [r7, #0]
  return(result);
 8017110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017112:	2b00      	cmp	r3, #0
 8017114:	d003      	beq.n	801711e <osKernelStart+0x1a>
    stat = osErrorISR;
 8017116:	f06f 0305 	mvn.w	r3, #5
 801711a:	607b      	str	r3, [r7, #4]
 801711c:	e010      	b.n	8017140 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801711e:	4b0b      	ldr	r3, [pc, #44]	; (801714c <osKernelStart+0x48>)
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	2b01      	cmp	r3, #1
 8017124:	d109      	bne.n	801713a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017126:	f7ff ffbf 	bl	80170a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801712a:	4b08      	ldr	r3, [pc, #32]	; (801714c <osKernelStart+0x48>)
 801712c:	2202      	movs	r2, #2
 801712e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017130:	f001 fd54 	bl	8018bdc <vTaskStartScheduler>
      stat = osOK;
 8017134:	2300      	movs	r3, #0
 8017136:	607b      	str	r3, [r7, #4]
 8017138:	e002      	b.n	8017140 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801713a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801713e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017140:	687b      	ldr	r3, [r7, #4]
}
 8017142:	4618      	mov	r0, r3
 8017144:	3708      	adds	r7, #8
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
 801714a:	bf00      	nop
 801714c:	2400201c 	.word	0x2400201c

08017150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017150:	b580      	push	{r7, lr}
 8017152:	b08e      	sub	sp, #56	; 0x38
 8017154:	af04      	add	r7, sp, #16
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	60b9      	str	r1, [r7, #8]
 801715a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801715c:	2300      	movs	r3, #0
 801715e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017160:	f3ef 8305 	mrs	r3, IPSR
 8017164:	617b      	str	r3, [r7, #20]
  return(result);
 8017166:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017168:	2b00      	cmp	r3, #0
 801716a:	d17e      	bne.n	801726a <osThreadNew+0x11a>
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d07b      	beq.n	801726a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017172:	2380      	movs	r3, #128	; 0x80
 8017174:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017176:	2318      	movs	r3, #24
 8017178:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801717a:	2300      	movs	r3, #0
 801717c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801717e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017182:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d045      	beq.n	8017216 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d002      	beq.n	8017198 <osThreadNew+0x48>
        name = attr->name;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	699b      	ldr	r3, [r3, #24]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d002      	beq.n	80171a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	699b      	ldr	r3, [r3, #24]
 80171a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80171a6:	69fb      	ldr	r3, [r7, #28]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d008      	beq.n	80171be <osThreadNew+0x6e>
 80171ac:	69fb      	ldr	r3, [r7, #28]
 80171ae:	2b38      	cmp	r3, #56	; 0x38
 80171b0:	d805      	bhi.n	80171be <osThreadNew+0x6e>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	f003 0301 	and.w	r3, r3, #1
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d001      	beq.n	80171c2 <osThreadNew+0x72>
        return (NULL);
 80171be:	2300      	movs	r3, #0
 80171c0:	e054      	b.n	801726c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	695b      	ldr	r3, [r3, #20]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d003      	beq.n	80171d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	695b      	ldr	r3, [r3, #20]
 80171ce:	089b      	lsrs	r3, r3, #2
 80171d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	689b      	ldr	r3, [r3, #8]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d00e      	beq.n	80171f8 <osThreadNew+0xa8>
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	68db      	ldr	r3, [r3, #12]
 80171de:	2b5b      	cmp	r3, #91	; 0x5b
 80171e0:	d90a      	bls.n	80171f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d006      	beq.n	80171f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	695b      	ldr	r3, [r3, #20]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d002      	beq.n	80171f8 <osThreadNew+0xa8>
        mem = 1;
 80171f2:	2301      	movs	r3, #1
 80171f4:	61bb      	str	r3, [r7, #24]
 80171f6:	e010      	b.n	801721a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	689b      	ldr	r3, [r3, #8]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d10c      	bne.n	801721a <osThreadNew+0xca>
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	68db      	ldr	r3, [r3, #12]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d108      	bne.n	801721a <osThreadNew+0xca>
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	691b      	ldr	r3, [r3, #16]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d104      	bne.n	801721a <osThreadNew+0xca>
          mem = 0;
 8017210:	2300      	movs	r3, #0
 8017212:	61bb      	str	r3, [r7, #24]
 8017214:	e001      	b.n	801721a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017216:	2300      	movs	r3, #0
 8017218:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801721a:	69bb      	ldr	r3, [r7, #24]
 801721c:	2b01      	cmp	r3, #1
 801721e:	d110      	bne.n	8017242 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017228:	9202      	str	r2, [sp, #8]
 801722a:	9301      	str	r3, [sp, #4]
 801722c:	69fb      	ldr	r3, [r7, #28]
 801722e:	9300      	str	r3, [sp, #0]
 8017230:	68bb      	ldr	r3, [r7, #8]
 8017232:	6a3a      	ldr	r2, [r7, #32]
 8017234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017236:	68f8      	ldr	r0, [r7, #12]
 8017238:	f001 f9f4 	bl	8018624 <xTaskCreateStatic>
 801723c:	4603      	mov	r3, r0
 801723e:	613b      	str	r3, [r7, #16]
 8017240:	e013      	b.n	801726a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017242:	69bb      	ldr	r3, [r7, #24]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d110      	bne.n	801726a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017248:	6a3b      	ldr	r3, [r7, #32]
 801724a:	b29a      	uxth	r2, r3
 801724c:	f107 0310 	add.w	r3, r7, #16
 8017250:	9301      	str	r3, [sp, #4]
 8017252:	69fb      	ldr	r3, [r7, #28]
 8017254:	9300      	str	r3, [sp, #0]
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801725a:	68f8      	ldr	r0, [r7, #12]
 801725c:	f001 fa3f 	bl	80186de <xTaskCreate>
 8017260:	4603      	mov	r3, r0
 8017262:	2b01      	cmp	r3, #1
 8017264:	d001      	beq.n	801726a <osThreadNew+0x11a>
            hTask = NULL;
 8017266:	2300      	movs	r3, #0
 8017268:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801726a:	693b      	ldr	r3, [r7, #16]
}
 801726c:	4618      	mov	r0, r3
 801726e:	3728      	adds	r7, #40	; 0x28
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}

08017274 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8017274:	b480      	push	{r7}
 8017276:	b083      	sub	sp, #12
 8017278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801727a:	f3ef 8305 	mrs	r3, IPSR
 801727e:	603b      	str	r3, [r7, #0]
  return(result);
 8017280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017282:	2b00      	cmp	r3, #0
 8017284:	d003      	beq.n	801728e <osThreadYield+0x1a>
    stat = osErrorISR;
 8017286:	f06f 0305 	mvn.w	r3, #5
 801728a:	607b      	str	r3, [r7, #4]
 801728c:	e009      	b.n	80172a2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801728e:	2300      	movs	r3, #0
 8017290:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8017292:	4b07      	ldr	r3, [pc, #28]	; (80172b0 <osThreadYield+0x3c>)
 8017294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017298:	601a      	str	r2, [r3, #0]
 801729a:	f3bf 8f4f 	dsb	sy
 801729e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80172a2:	687b      	ldr	r3, [r7, #4]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	370c      	adds	r7, #12
 80172a8:	46bd      	mov	sp, r7
 80172aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ae:	4770      	bx	lr
 80172b0:	e000ed04 	.word	0xe000ed04

080172b4 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b086      	sub	sp, #24
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172c0:	f3ef 8305 	mrs	r3, IPSR
 80172c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80172c6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d003      	beq.n	80172d4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80172cc:	f06f 0305 	mvn.w	r3, #5
 80172d0:	617b      	str	r3, [r7, #20]
 80172d2:	e00b      	b.n	80172ec <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80172d4:	693b      	ldr	r3, [r7, #16]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d103      	bne.n	80172e2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80172da:	f06f 0303 	mvn.w	r3, #3
 80172de:	617b      	str	r3, [r7, #20]
 80172e0:	e004      	b.n	80172ec <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80172e2:	2300      	movs	r3, #0
 80172e4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80172e6:	6938      	ldr	r0, [r7, #16]
 80172e8:	f001 fb72 	bl	80189d0 <vTaskSuspend>
  }

  return (stat);
 80172ec:	697b      	ldr	r3, [r7, #20]
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3718      	adds	r7, #24
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80172f6:	b580      	push	{r7, lr}
 80172f8:	b086      	sub	sp, #24
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017302:	f3ef 8305 	mrs	r3, IPSR
 8017306:	60fb      	str	r3, [r7, #12]
  return(result);
 8017308:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801730a:	2b00      	cmp	r3, #0
 801730c:	d003      	beq.n	8017316 <osThreadResume+0x20>
    stat = osErrorISR;
 801730e:	f06f 0305 	mvn.w	r3, #5
 8017312:	617b      	str	r3, [r7, #20]
 8017314:	e00b      	b.n	801732e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d103      	bne.n	8017324 <osThreadResume+0x2e>
    stat = osErrorParameter;
 801731c:	f06f 0303 	mvn.w	r3, #3
 8017320:	617b      	str	r3, [r7, #20]
 8017322:	e004      	b.n	801732e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8017324:	2300      	movs	r3, #0
 8017326:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8017328:	6938      	ldr	r0, [r7, #16]
 801732a:	f001 fbf9 	bl	8018b20 <vTaskResume>
  }

  return (stat);
 801732e:	697b      	ldr	r3, [r7, #20]
}
 8017330:	4618      	mov	r0, r3
 8017332:	3718      	adds	r7, #24
 8017334:	46bd      	mov	sp, r7
 8017336:	bd80      	pop	{r7, pc}

08017338 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017338:	b580      	push	{r7, lr}
 801733a:	b084      	sub	sp, #16
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017340:	f3ef 8305 	mrs	r3, IPSR
 8017344:	60bb      	str	r3, [r7, #8]
  return(result);
 8017346:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017348:	2b00      	cmp	r3, #0
 801734a:	d003      	beq.n	8017354 <osDelay+0x1c>
    stat = osErrorISR;
 801734c:	f06f 0305 	mvn.w	r3, #5
 8017350:	60fb      	str	r3, [r7, #12]
 8017352:	e007      	b.n	8017364 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017354:	2300      	movs	r3, #0
 8017356:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d002      	beq.n	8017364 <osDelay+0x2c>
      vTaskDelay(ticks);
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f001 fb02 	bl	8018968 <vTaskDelay>
    }
  }

  return (stat);
 8017364:	68fb      	ldr	r3, [r7, #12]
}
 8017366:	4618      	mov	r0, r3
 8017368:	3710      	adds	r7, #16
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}

0801736e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801736e:	b580      	push	{r7, lr}
 8017370:	b086      	sub	sp, #24
 8017372:	af00      	add	r7, sp, #0
 8017374:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8017376:	2300      	movs	r3, #0
 8017378:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801737a:	f3ef 8305 	mrs	r3, IPSR
 801737e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017380:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8017382:	2b00      	cmp	r3, #0
 8017384:	d12d      	bne.n	80173e2 <osEventFlagsNew+0x74>
    mem = -1;
 8017386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801738a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d015      	beq.n	80173be <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	689b      	ldr	r3, [r3, #8]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d006      	beq.n	80173a8 <osEventFlagsNew+0x3a>
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	68db      	ldr	r3, [r3, #12]
 801739e:	2b1f      	cmp	r3, #31
 80173a0:	d902      	bls.n	80173a8 <osEventFlagsNew+0x3a>
        mem = 1;
 80173a2:	2301      	movs	r3, #1
 80173a4:	613b      	str	r3, [r7, #16]
 80173a6:	e00c      	b.n	80173c2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	689b      	ldr	r3, [r3, #8]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d108      	bne.n	80173c2 <osEventFlagsNew+0x54>
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	68db      	ldr	r3, [r3, #12]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d104      	bne.n	80173c2 <osEventFlagsNew+0x54>
          mem = 0;
 80173b8:	2300      	movs	r3, #0
 80173ba:	613b      	str	r3, [r7, #16]
 80173bc:	e001      	b.n	80173c2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80173be:	2300      	movs	r3, #0
 80173c0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80173c2:	693b      	ldr	r3, [r7, #16]
 80173c4:	2b01      	cmp	r3, #1
 80173c6:	d106      	bne.n	80173d6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	689b      	ldr	r3, [r3, #8]
 80173cc:	4618      	mov	r0, r3
 80173ce:	f000 f91d 	bl	801760c <xEventGroupCreateStatic>
 80173d2:	6178      	str	r0, [r7, #20]
 80173d4:	e005      	b.n	80173e2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80173d6:	693b      	ldr	r3, [r7, #16]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d102      	bne.n	80173e2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80173dc:	f000 f94d 	bl	801767a <xEventGroupCreate>
 80173e0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80173e2:	697b      	ldr	r3, [r7, #20]
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3718      	adds	r7, #24
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b086      	sub	sp, #24
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d004      	beq.n	801740a <osEventFlagsSet+0x1e>
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017406:	2b00      	cmp	r3, #0
 8017408:	d003      	beq.n	8017412 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801740a:	f06f 0303 	mvn.w	r3, #3
 801740e:	617b      	str	r3, [r7, #20]
 8017410:	e028      	b.n	8017464 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017412:	f3ef 8305 	mrs	r3, IPSR
 8017416:	60fb      	str	r3, [r7, #12]
  return(result);
 8017418:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801741a:	2b00      	cmp	r3, #0
 801741c:	d01d      	beq.n	801745a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801741e:	2300      	movs	r3, #0
 8017420:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8017422:	f107 0308 	add.w	r3, r7, #8
 8017426:	461a      	mov	r2, r3
 8017428:	6839      	ldr	r1, [r7, #0]
 801742a:	6938      	ldr	r0, [r7, #16]
 801742c:	f000 fb46 	bl	8017abc <xEventGroupSetBitsFromISR>
 8017430:	4603      	mov	r3, r0
 8017432:	2b00      	cmp	r3, #0
 8017434:	d103      	bne.n	801743e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8017436:	f06f 0302 	mvn.w	r3, #2
 801743a:	617b      	str	r3, [r7, #20]
 801743c:	e012      	b.n	8017464 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8017442:	68bb      	ldr	r3, [r7, #8]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d00d      	beq.n	8017464 <osEventFlagsSet+0x78>
 8017448:	4b09      	ldr	r3, [pc, #36]	; (8017470 <osEventFlagsSet+0x84>)
 801744a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801744e:	601a      	str	r2, [r3, #0]
 8017450:	f3bf 8f4f 	dsb	sy
 8017454:	f3bf 8f6f 	isb	sy
 8017458:	e004      	b.n	8017464 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801745a:	6839      	ldr	r1, [r7, #0]
 801745c:	6938      	ldr	r0, [r7, #16]
 801745e:	f000 fa65 	bl	801792c <xEventGroupSetBits>
 8017462:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8017464:	697b      	ldr	r3, [r7, #20]
}
 8017466:	4618      	mov	r0, r3
 8017468:	3718      	adds	r7, #24
 801746a:	46bd      	mov	sp, r7
 801746c:	bd80      	pop	{r7, pc}
 801746e:	bf00      	nop
 8017470:	e000ed04 	.word	0xe000ed04

08017474 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8017474:	b580      	push	{r7, lr}
 8017476:	b086      	sub	sp, #24
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
 801747c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d004      	beq.n	8017492 <osEventFlagsClear+0x1e>
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801748e:	2b00      	cmp	r3, #0
 8017490:	d003      	beq.n	801749a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017492:	f06f 0303 	mvn.w	r3, #3
 8017496:	617b      	str	r3, [r7, #20]
 8017498:	e019      	b.n	80174ce <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801749a:	f3ef 8305 	mrs	r3, IPSR
 801749e:	60fb      	str	r3, [r7, #12]
  return(result);
 80174a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d00e      	beq.n	80174c4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80174a6:	6938      	ldr	r0, [r7, #16]
 80174a8:	f000 fa1c 	bl	80178e4 <xEventGroupGetBitsFromISR>
 80174ac:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80174ae:	6839      	ldr	r1, [r7, #0]
 80174b0:	6938      	ldr	r0, [r7, #16]
 80174b2:	f000 fa03 	bl	80178bc <xEventGroupClearBitsFromISR>
 80174b6:	4603      	mov	r3, r0
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d108      	bne.n	80174ce <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80174bc:	f06f 0302 	mvn.w	r3, #2
 80174c0:	617b      	str	r3, [r7, #20]
 80174c2:	e004      	b.n	80174ce <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80174c4:	6839      	ldr	r1, [r7, #0]
 80174c6:	6938      	ldr	r0, [r7, #16]
 80174c8:	f000 f9c0 	bl	801784c <xEventGroupClearBits>
 80174cc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80174ce:	697b      	ldr	r3, [r7, #20]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3718      	adds	r7, #24
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80174d8:	b580      	push	{r7, lr}
 80174da:	b08c      	sub	sp, #48	; 0x30
 80174dc:	af02      	add	r7, sp, #8
 80174de:	60f8      	str	r0, [r7, #12]
 80174e0:	60b9      	str	r1, [r7, #8]
 80174e2:	607a      	str	r2, [r7, #4]
 80174e4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80174ea:	69bb      	ldr	r3, [r7, #24]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d004      	beq.n	80174fa <osEventFlagsWait+0x22>
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d003      	beq.n	8017502 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80174fa:	f06f 0303 	mvn.w	r3, #3
 80174fe:	61fb      	str	r3, [r7, #28]
 8017500:	e04b      	b.n	801759a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017502:	f3ef 8305 	mrs	r3, IPSR
 8017506:	617b      	str	r3, [r7, #20]
  return(result);
 8017508:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801750a:	2b00      	cmp	r3, #0
 801750c:	d003      	beq.n	8017516 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801750e:	f06f 0305 	mvn.w	r3, #5
 8017512:	61fb      	str	r3, [r7, #28]
 8017514:	e041      	b.n	801759a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	f003 0301 	and.w	r3, r3, #1
 801751c:	2b00      	cmp	r3, #0
 801751e:	d002      	beq.n	8017526 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8017520:	2301      	movs	r3, #1
 8017522:	627b      	str	r3, [r7, #36]	; 0x24
 8017524:	e001      	b.n	801752a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8017526:	2300      	movs	r3, #0
 8017528:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	f003 0302 	and.w	r3, r3, #2
 8017530:	2b00      	cmp	r3, #0
 8017532:	d002      	beq.n	801753a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8017534:	2300      	movs	r3, #0
 8017536:	623b      	str	r3, [r7, #32]
 8017538:	e001      	b.n	801753e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801753a:	2301      	movs	r3, #1
 801753c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801753e:	683b      	ldr	r3, [r7, #0]
 8017540:	9300      	str	r3, [sp, #0]
 8017542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017544:	6a3a      	ldr	r2, [r7, #32]
 8017546:	68b9      	ldr	r1, [r7, #8]
 8017548:	69b8      	ldr	r0, [r7, #24]
 801754a:	f000 f8b1 	bl	80176b0 <xEventGroupWaitBits>
 801754e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	f003 0301 	and.w	r3, r3, #1
 8017556:	2b00      	cmp	r3, #0
 8017558:	d010      	beq.n	801757c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801755a:	68ba      	ldr	r2, [r7, #8]
 801755c:	69fb      	ldr	r3, [r7, #28]
 801755e:	4013      	ands	r3, r2
 8017560:	68ba      	ldr	r2, [r7, #8]
 8017562:	429a      	cmp	r2, r3
 8017564:	d019      	beq.n	801759a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d003      	beq.n	8017574 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801756c:	f06f 0301 	mvn.w	r3, #1
 8017570:	61fb      	str	r3, [r7, #28]
 8017572:	e012      	b.n	801759a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017574:	f06f 0302 	mvn.w	r3, #2
 8017578:	61fb      	str	r3, [r7, #28]
 801757a:	e00e      	b.n	801759a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801757c:	68ba      	ldr	r2, [r7, #8]
 801757e:	69fb      	ldr	r3, [r7, #28]
 8017580:	4013      	ands	r3, r2
 8017582:	2b00      	cmp	r3, #0
 8017584:	d109      	bne.n	801759a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d003      	beq.n	8017594 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801758c:	f06f 0301 	mvn.w	r3, #1
 8017590:	61fb      	str	r3, [r7, #28]
 8017592:	e002      	b.n	801759a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017594:	f06f 0302 	mvn.w	r3, #2
 8017598:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801759a:	69fb      	ldr	r3, [r7, #28]
}
 801759c:	4618      	mov	r0, r3
 801759e:	3728      	adds	r7, #40	; 0x28
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}

080175a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80175a4:	b480      	push	{r7}
 80175a6:	b085      	sub	sp, #20
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	4a07      	ldr	r2, [pc, #28]	; (80175d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80175b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	4a06      	ldr	r2, [pc, #24]	; (80175d4 <vApplicationGetIdleTaskMemory+0x30>)
 80175ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2280      	movs	r2, #128	; 0x80
 80175c0:	601a      	str	r2, [r3, #0]
}
 80175c2:	bf00      	nop
 80175c4:	3714      	adds	r7, #20
 80175c6:	46bd      	mov	sp, r7
 80175c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175cc:	4770      	bx	lr
 80175ce:	bf00      	nop
 80175d0:	24002020 	.word	0x24002020
 80175d4:	2400207c 	.word	0x2400207c

080175d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80175d8:	b480      	push	{r7}
 80175da:	b085      	sub	sp, #20
 80175dc:	af00      	add	r7, sp, #0
 80175de:	60f8      	str	r0, [r7, #12]
 80175e0:	60b9      	str	r1, [r7, #8]
 80175e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	4a07      	ldr	r2, [pc, #28]	; (8017604 <vApplicationGetTimerTaskMemory+0x2c>)
 80175e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80175ea:	68bb      	ldr	r3, [r7, #8]
 80175ec:	4a06      	ldr	r2, [pc, #24]	; (8017608 <vApplicationGetTimerTaskMemory+0x30>)
 80175ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80175f6:	601a      	str	r2, [r3, #0]
}
 80175f8:	bf00      	nop
 80175fa:	3714      	adds	r7, #20
 80175fc:	46bd      	mov	sp, r7
 80175fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017602:	4770      	bx	lr
 8017604:	2400227c 	.word	0x2400227c
 8017608:	240022d8 	.word	0x240022d8

0801760c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801760c:	b580      	push	{r7, lr}
 801760e:	b086      	sub	sp, #24
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d10a      	bne.n	8017630 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801761e:	f383 8811 	msr	BASEPRI, r3
 8017622:	f3bf 8f6f 	isb	sy
 8017626:	f3bf 8f4f 	dsb	sy
 801762a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801762c:	bf00      	nop
 801762e:	e7fe      	b.n	801762e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8017630:	2320      	movs	r3, #32
 8017632:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	2b20      	cmp	r3, #32
 8017638:	d00a      	beq.n	8017650 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801763e:	f383 8811 	msr	BASEPRI, r3
 8017642:	f3bf 8f6f 	isb	sy
 8017646:	f3bf 8f4f 	dsb	sy
 801764a:	60fb      	str	r3, [r7, #12]
}
 801764c:	bf00      	nop
 801764e:	e7fe      	b.n	801764e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d00a      	beq.n	8017670 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	2200      	movs	r2, #0
 801765e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	3304      	adds	r3, #4
 8017664:	4618      	mov	r0, r3
 8017666:	f000 fa3d 	bl	8017ae4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801766a:	697b      	ldr	r3, [r7, #20]
 801766c:	2201      	movs	r2, #1
 801766e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017670:	697b      	ldr	r3, [r7, #20]
	}
 8017672:	4618      	mov	r0, r3
 8017674:	3718      	adds	r7, #24
 8017676:	46bd      	mov	sp, r7
 8017678:	bd80      	pop	{r7, pc}

0801767a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801767a:	b580      	push	{r7, lr}
 801767c:	b082      	sub	sp, #8
 801767e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017680:	2020      	movs	r0, #32
 8017682:	f002 fe59 	bl	801a338 <pvPortMalloc>
 8017686:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d00a      	beq.n	80176a4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	2200      	movs	r2, #0
 8017692:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	3304      	adds	r3, #4
 8017698:	4618      	mov	r0, r3
 801769a:	f000 fa23 	bl	8017ae4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2200      	movs	r2, #0
 80176a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80176a4:	687b      	ldr	r3, [r7, #4]
	}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3708      	adds	r7, #8
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
	...

080176b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b090      	sub	sp, #64	; 0x40
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
 80176bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80176c2:	2300      	movs	r3, #0
 80176c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80176c6:	2300      	movs	r3, #0
 80176c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d10a      	bne.n	80176e6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80176d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d4:	f383 8811 	msr	BASEPRI, r3
 80176d8:	f3bf 8f6f 	isb	sy
 80176dc:	f3bf 8f4f 	dsb	sy
 80176e0:	623b      	str	r3, [r7, #32]
}
 80176e2:	bf00      	nop
 80176e4:	e7fe      	b.n	80176e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d00a      	beq.n	8017706 <xEventGroupWaitBits+0x56>
	__asm volatile
 80176f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f4:	f383 8811 	msr	BASEPRI, r3
 80176f8:	f3bf 8f6f 	isb	sy
 80176fc:	f3bf 8f4f 	dsb	sy
 8017700:	61fb      	str	r3, [r7, #28]
}
 8017702:	bf00      	nop
 8017704:	e7fe      	b.n	8017704 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d10a      	bne.n	8017722 <xEventGroupWaitBits+0x72>
	__asm volatile
 801770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017710:	f383 8811 	msr	BASEPRI, r3
 8017714:	f3bf 8f6f 	isb	sy
 8017718:	f3bf 8f4f 	dsb	sy
 801771c:	61bb      	str	r3, [r7, #24]
}
 801771e:	bf00      	nop
 8017720:	e7fe      	b.n	8017720 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017722:	f001 ff57 	bl	80195d4 <xTaskGetSchedulerState>
 8017726:	4603      	mov	r3, r0
 8017728:	2b00      	cmp	r3, #0
 801772a:	d102      	bne.n	8017732 <xEventGroupWaitBits+0x82>
 801772c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801772e:	2b00      	cmp	r3, #0
 8017730:	d101      	bne.n	8017736 <xEventGroupWaitBits+0x86>
 8017732:	2301      	movs	r3, #1
 8017734:	e000      	b.n	8017738 <xEventGroupWaitBits+0x88>
 8017736:	2300      	movs	r3, #0
 8017738:	2b00      	cmp	r3, #0
 801773a:	d10a      	bne.n	8017752 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017740:	f383 8811 	msr	BASEPRI, r3
 8017744:	f3bf 8f6f 	isb	sy
 8017748:	f3bf 8f4f 	dsb	sy
 801774c:	617b      	str	r3, [r7, #20]
}
 801774e:	bf00      	nop
 8017750:	e7fe      	b.n	8017750 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017752:	f001 faa9 	bl	8018ca8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801775c:	683a      	ldr	r2, [r7, #0]
 801775e:	68b9      	ldr	r1, [r7, #8]
 8017760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017762:	f000 f988 	bl	8017a76 <prvTestWaitCondition>
 8017766:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776a:	2b00      	cmp	r3, #0
 801776c:	d00e      	beq.n	801778c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017770:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017772:	2300      	movs	r3, #0
 8017774:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d028      	beq.n	80177ce <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801777e:	681a      	ldr	r2, [r3, #0]
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	43db      	mvns	r3, r3
 8017784:	401a      	ands	r2, r3
 8017786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017788:	601a      	str	r2, [r3, #0]
 801778a:	e020      	b.n	80177ce <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801778c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801778e:	2b00      	cmp	r3, #0
 8017790:	d104      	bne.n	801779c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017794:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017796:	2301      	movs	r3, #1
 8017798:	633b      	str	r3, [r7, #48]	; 0x30
 801779a:	e018      	b.n	80177ce <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d003      	beq.n	80177aa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80177a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80177a8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d003      	beq.n	80177b8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80177b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80177b6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80177b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177ba:	1d18      	adds	r0, r3, #4
 80177bc:	68ba      	ldr	r2, [r7, #8]
 80177be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177c0:	4313      	orrs	r3, r2
 80177c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80177c4:	4619      	mov	r1, r3
 80177c6:	f001 fc7d 	bl	80190c4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80177ca:	2300      	movs	r3, #0
 80177cc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80177ce:	f001 fa79 	bl	8018cc4 <xTaskResumeAll>
 80177d2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80177d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d031      	beq.n	801783e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80177da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d107      	bne.n	80177f0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80177e0:	4b19      	ldr	r3, [pc, #100]	; (8017848 <xEventGroupWaitBits+0x198>)
 80177e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177e6:	601a      	str	r2, [r3, #0]
 80177e8:	f3bf 8f4f 	dsb	sy
 80177ec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80177f0:	f001 ff7c 	bl	80196ec <uxTaskResetEventItemValue>
 80177f4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80177f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d11a      	bne.n	8017836 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017800:	f002 fc78 	bl	801a0f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801780a:	683a      	ldr	r2, [r7, #0]
 801780c:	68b9      	ldr	r1, [r7, #8]
 801780e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017810:	f000 f931 	bl	8017a76 <prvTestWaitCondition>
 8017814:	4603      	mov	r3, r0
 8017816:	2b00      	cmp	r3, #0
 8017818:	d009      	beq.n	801782e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d006      	beq.n	801782e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	43db      	mvns	r3, r3
 8017828:	401a      	ands	r2, r3
 801782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801782c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801782e:	2301      	movs	r3, #1
 8017830:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017832:	f002 fc8f 	bl	801a154 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017838:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801783c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801783e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017840:	4618      	mov	r0, r3
 8017842:	3740      	adds	r7, #64	; 0x40
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}
 8017848:	e000ed04 	.word	0xe000ed04

0801784c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b086      	sub	sp, #24
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
 8017854:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d10a      	bne.n	8017876 <xEventGroupClearBits+0x2a>
	__asm volatile
 8017860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017864:	f383 8811 	msr	BASEPRI, r3
 8017868:	f3bf 8f6f 	isb	sy
 801786c:	f3bf 8f4f 	dsb	sy
 8017870:	60fb      	str	r3, [r7, #12]
}
 8017872:	bf00      	nop
 8017874:	e7fe      	b.n	8017874 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801787c:	2b00      	cmp	r3, #0
 801787e:	d00a      	beq.n	8017896 <xEventGroupClearBits+0x4a>
	__asm volatile
 8017880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017884:	f383 8811 	msr	BASEPRI, r3
 8017888:	f3bf 8f6f 	isb	sy
 801788c:	f3bf 8f4f 	dsb	sy
 8017890:	60bb      	str	r3, [r7, #8]
}
 8017892:	bf00      	nop
 8017894:	e7fe      	b.n	8017894 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017896:	f002 fc2d 	bl	801a0f4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80178a0:	697b      	ldr	r3, [r7, #20]
 80178a2:	681a      	ldr	r2, [r3, #0]
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	43db      	mvns	r3, r3
 80178a8:	401a      	ands	r2, r3
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80178ae:	f002 fc51 	bl	801a154 <vPortExitCritical>

	return uxReturn;
 80178b2:	693b      	ldr	r3, [r7, #16]
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3718      	adds	r7, #24
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}

080178bc <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b084      	sub	sp, #16
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80178c6:	2300      	movs	r3, #0
 80178c8:	683a      	ldr	r2, [r7, #0]
 80178ca:	6879      	ldr	r1, [r7, #4]
 80178cc:	4804      	ldr	r0, [pc, #16]	; (80178e0 <xEventGroupClearBitsFromISR+0x24>)
 80178ce:	f002 fac7 	bl	8019e60 <xTimerPendFunctionCallFromISR>
 80178d2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80178d4:	68fb      	ldr	r3, [r7, #12]
	}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3710      	adds	r7, #16
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	08017a5d 	.word	0x08017a5d

080178e4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80178e4:	b480      	push	{r7}
 80178e6:	b089      	sub	sp, #36	; 0x24
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80178f0:	f3ef 8211 	mrs	r2, BASEPRI
 80178f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178f8:	f383 8811 	msr	BASEPRI, r3
 80178fc:	f3bf 8f6f 	isb	sy
 8017900:	f3bf 8f4f 	dsb	sy
 8017904:	60fa      	str	r2, [r7, #12]
 8017906:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017908:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801790a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801790c:	69fb      	ldr	r3, [r7, #28]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	617b      	str	r3, [r7, #20]
 8017912:	69bb      	ldr	r3, [r7, #24]
 8017914:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801791c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801791e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017920:	4618      	mov	r0, r3
 8017922:	3724      	adds	r7, #36	; 0x24
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr

0801792c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b08e      	sub	sp, #56	; 0x38
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
 8017934:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017936:	2300      	movs	r3, #0
 8017938:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801793e:	2300      	movs	r3, #0
 8017940:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d10a      	bne.n	801795e <xEventGroupSetBits+0x32>
	__asm volatile
 8017948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801794c:	f383 8811 	msr	BASEPRI, r3
 8017950:	f3bf 8f6f 	isb	sy
 8017954:	f3bf 8f4f 	dsb	sy
 8017958:	613b      	str	r3, [r7, #16]
}
 801795a:	bf00      	nop
 801795c:	e7fe      	b.n	801795c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017964:	2b00      	cmp	r3, #0
 8017966:	d00a      	beq.n	801797e <xEventGroupSetBits+0x52>
	__asm volatile
 8017968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801796c:	f383 8811 	msr	BASEPRI, r3
 8017970:	f3bf 8f6f 	isb	sy
 8017974:	f3bf 8f4f 	dsb	sy
 8017978:	60fb      	str	r3, [r7, #12]
}
 801797a:	bf00      	nop
 801797c:	e7fe      	b.n	801797c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017980:	3304      	adds	r3, #4
 8017982:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017986:	3308      	adds	r3, #8
 8017988:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801798a:	f001 f98d 	bl	8018ca8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017990:	68db      	ldr	r3, [r3, #12]
 8017992:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017996:	681a      	ldr	r2, [r3, #0]
 8017998:	683b      	ldr	r3, [r7, #0]
 801799a:	431a      	orrs	r2, r3
 801799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801799e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80179a0:	e03c      	b.n	8017a1c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80179a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179a4:	685b      	ldr	r3, [r3, #4]
 80179a6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80179a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80179ae:	2300      	movs	r3, #0
 80179b0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80179b2:	69bb      	ldr	r3, [r7, #24]
 80179b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80179b8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80179ba:	69bb      	ldr	r3, [r7, #24]
 80179bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80179c0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d108      	bne.n	80179de <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80179cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ce:	681a      	ldr	r2, [r3, #0]
 80179d0:	69bb      	ldr	r3, [r7, #24]
 80179d2:	4013      	ands	r3, r2
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d00b      	beq.n	80179f0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80179d8:	2301      	movs	r3, #1
 80179da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179dc:	e008      	b.n	80179f0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80179de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e0:	681a      	ldr	r2, [r3, #0]
 80179e2:	69bb      	ldr	r3, [r7, #24]
 80179e4:	4013      	ands	r3, r2
 80179e6:	69ba      	ldr	r2, [r7, #24]
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d101      	bne.n	80179f0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80179ec:	2301      	movs	r3, #1
 80179ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80179f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d010      	beq.n	8017a18 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80179f6:	697b      	ldr	r3, [r7, #20]
 80179f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d003      	beq.n	8017a08 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a02:	69bb      	ldr	r3, [r7, #24]
 8017a04:	4313      	orrs	r3, r2
 8017a06:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017a10:	4619      	mov	r1, r3
 8017a12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017a14:	f001 fc22 	bl	801925c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017a18:	69fb      	ldr	r3, [r7, #28]
 8017a1a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8017a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a1e:	6a3b      	ldr	r3, [r7, #32]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d1be      	bne.n	80179a2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a26:	681a      	ldr	r2, [r3, #0]
 8017a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2a:	43db      	mvns	r3, r3
 8017a2c:	401a      	ands	r2, r3
 8017a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a30:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017a32:	f001 f947 	bl	8018cc4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a38:	681b      	ldr	r3, [r3, #0]
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	3738      	adds	r7, #56	; 0x38
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}

08017a42 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017a42:	b580      	push	{r7, lr}
 8017a44:	b082      	sub	sp, #8
 8017a46:	af00      	add	r7, sp, #0
 8017a48:	6078      	str	r0, [r7, #4]
 8017a4a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017a4c:	6839      	ldr	r1, [r7, #0]
 8017a4e:	6878      	ldr	r0, [r7, #4]
 8017a50:	f7ff ff6c 	bl	801792c <xEventGroupSetBits>
}
 8017a54:	bf00      	nop
 8017a56:	3708      	adds	r7, #8
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}

08017a5c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017a66:	6839      	ldr	r1, [r7, #0]
 8017a68:	6878      	ldr	r0, [r7, #4]
 8017a6a:	f7ff feef 	bl	801784c <xEventGroupClearBits>
}
 8017a6e:	bf00      	nop
 8017a70:	3708      	adds	r7, #8
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}

08017a76 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017a76:	b480      	push	{r7}
 8017a78:	b087      	sub	sp, #28
 8017a7a:	af00      	add	r7, sp, #0
 8017a7c:	60f8      	str	r0, [r7, #12]
 8017a7e:	60b9      	str	r1, [r7, #8]
 8017a80:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017a82:	2300      	movs	r3, #0
 8017a84:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d107      	bne.n	8017a9c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017a8c:	68fa      	ldr	r2, [r7, #12]
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	4013      	ands	r3, r2
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d00a      	beq.n	8017aac <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017a96:	2301      	movs	r3, #1
 8017a98:	617b      	str	r3, [r7, #20]
 8017a9a:	e007      	b.n	8017aac <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017a9c:	68fa      	ldr	r2, [r7, #12]
 8017a9e:	68bb      	ldr	r3, [r7, #8]
 8017aa0:	4013      	ands	r3, r2
 8017aa2:	68ba      	ldr	r2, [r7, #8]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d101      	bne.n	8017aac <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017aac:	697b      	ldr	r3, [r7, #20]
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	371c      	adds	r7, #28
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab8:	4770      	bx	lr
	...

08017abc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b086      	sub	sp, #24
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	60f8      	str	r0, [r7, #12]
 8017ac4:	60b9      	str	r1, [r7, #8]
 8017ac6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	68ba      	ldr	r2, [r7, #8]
 8017acc:	68f9      	ldr	r1, [r7, #12]
 8017ace:	4804      	ldr	r0, [pc, #16]	; (8017ae0 <xEventGroupSetBitsFromISR+0x24>)
 8017ad0:	f002 f9c6 	bl	8019e60 <xTimerPendFunctionCallFromISR>
 8017ad4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017ad6:	697b      	ldr	r3, [r7, #20]
	}
 8017ad8:	4618      	mov	r0, r3
 8017ada:	3718      	adds	r7, #24
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	08017a43 	.word	0x08017a43

08017ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017ae4:	b480      	push	{r7}
 8017ae6:	b083      	sub	sp, #12
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	f103 0208 	add.w	r2, r3, #8
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f103 0208 	add.w	r2, r3, #8
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	f103 0208 	add.w	r2, r3, #8
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	2200      	movs	r2, #0
 8017b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017b18:	bf00      	nop
 8017b1a:	370c      	adds	r7, #12
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b22:	4770      	bx	lr

08017b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017b24:	b480      	push	{r7}
 8017b26:	b083      	sub	sp, #12
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017b32:	bf00      	nop
 8017b34:	370c      	adds	r7, #12
 8017b36:	46bd      	mov	sp, r7
 8017b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3c:	4770      	bx	lr

08017b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017b3e:	b480      	push	{r7}
 8017b40:	b085      	sub	sp, #20
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	6078      	str	r0, [r7, #4]
 8017b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017b4e:	683b      	ldr	r3, [r7, #0]
 8017b50:	68fa      	ldr	r2, [r7, #12]
 8017b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	689a      	ldr	r2, [r3, #8]
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	689b      	ldr	r3, [r3, #8]
 8017b60:	683a      	ldr	r2, [r7, #0]
 8017b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	683a      	ldr	r2, [r7, #0]
 8017b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	1c5a      	adds	r2, r3, #1
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	601a      	str	r2, [r3, #0]
}
 8017b7a:	bf00      	nop
 8017b7c:	3714      	adds	r7, #20
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b84:	4770      	bx	lr

08017b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017b86:	b480      	push	{r7}
 8017b88:	b085      	sub	sp, #20
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	6078      	str	r0, [r7, #4]
 8017b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017b90:	683b      	ldr	r3, [r7, #0]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b9c:	d103      	bne.n	8017ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	691b      	ldr	r3, [r3, #16]
 8017ba2:	60fb      	str	r3, [r7, #12]
 8017ba4:	e00c      	b.n	8017bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	3308      	adds	r3, #8
 8017baa:	60fb      	str	r3, [r7, #12]
 8017bac:	e002      	b.n	8017bb4 <vListInsert+0x2e>
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	685b      	ldr	r3, [r3, #4]
 8017bb2:	60fb      	str	r3, [r7, #12]
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	685b      	ldr	r3, [r3, #4]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	68ba      	ldr	r2, [r7, #8]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d2f6      	bcs.n	8017bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	685a      	ldr	r2, [r3, #4]
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	685b      	ldr	r3, [r3, #4]
 8017bcc:	683a      	ldr	r2, [r7, #0]
 8017bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	683a      	ldr	r2, [r7, #0]
 8017bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	687a      	ldr	r2, [r7, #4]
 8017be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	1c5a      	adds	r2, r3, #1
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	601a      	str	r2, [r3, #0]
}
 8017bec:	bf00      	nop
 8017bee:	3714      	adds	r7, #20
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf6:	4770      	bx	lr

08017bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017bf8:	b480      	push	{r7}
 8017bfa:	b085      	sub	sp, #20
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	691b      	ldr	r3, [r3, #16]
 8017c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	685b      	ldr	r3, [r3, #4]
 8017c0a:	687a      	ldr	r2, [r7, #4]
 8017c0c:	6892      	ldr	r2, [r2, #8]
 8017c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	689b      	ldr	r3, [r3, #8]
 8017c14:	687a      	ldr	r2, [r7, #4]
 8017c16:	6852      	ldr	r2, [r2, #4]
 8017c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	687a      	ldr	r2, [r7, #4]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d103      	bne.n	8017c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	689a      	ldr	r2, [r3, #8]
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2200      	movs	r2, #0
 8017c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	1e5a      	subs	r2, r3, #1
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	681b      	ldr	r3, [r3, #0]
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	3714      	adds	r7, #20
 8017c44:	46bd      	mov	sp, r7
 8017c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4a:	4770      	bx	lr

08017c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d10a      	bne.n	8017c76 <xQueueGenericReset+0x2a>
	__asm volatile
 8017c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c64:	f383 8811 	msr	BASEPRI, r3
 8017c68:	f3bf 8f6f 	isb	sy
 8017c6c:	f3bf 8f4f 	dsb	sy
 8017c70:	60bb      	str	r3, [r7, #8]
}
 8017c72:	bf00      	nop
 8017c74:	e7fe      	b.n	8017c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017c76:	f002 fa3d 	bl	801a0f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	681a      	ldr	r2, [r3, #0]
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c82:	68f9      	ldr	r1, [r7, #12]
 8017c84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017c86:	fb01 f303 	mul.w	r3, r1, r3
 8017c8a:	441a      	add	r2, r3
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	2200      	movs	r2, #0
 8017c94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	681a      	ldr	r2, [r3, #0]
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ca6:	3b01      	subs	r3, #1
 8017ca8:	68f9      	ldr	r1, [r7, #12]
 8017caa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017cac:	fb01 f303 	mul.w	r3, r1, r3
 8017cb0:	441a      	add	r2, r3
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	22ff      	movs	r2, #255	; 0xff
 8017cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	22ff      	movs	r2, #255	; 0xff
 8017cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d114      	bne.n	8017cf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	691b      	ldr	r3, [r3, #16]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d01a      	beq.n	8017d0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	3310      	adds	r3, #16
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f001 fa5b 	bl	8019194 <xTaskRemoveFromEventList>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d012      	beq.n	8017d0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017ce4:	4b0c      	ldr	r3, [pc, #48]	; (8017d18 <xQueueGenericReset+0xcc>)
 8017ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cea:	601a      	str	r2, [r3, #0]
 8017cec:	f3bf 8f4f 	dsb	sy
 8017cf0:	f3bf 8f6f 	isb	sy
 8017cf4:	e009      	b.n	8017d0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	3310      	adds	r3, #16
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7ff fef2 	bl	8017ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	3324      	adds	r3, #36	; 0x24
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7ff feed 	bl	8017ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017d0a:	f002 fa23 	bl	801a154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017d0e:	2301      	movs	r3, #1
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	3710      	adds	r7, #16
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}
 8017d18:	e000ed04 	.word	0xe000ed04

08017d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b08e      	sub	sp, #56	; 0x38
 8017d20:	af02      	add	r7, sp, #8
 8017d22:	60f8      	str	r0, [r7, #12]
 8017d24:	60b9      	str	r1, [r7, #8]
 8017d26:	607a      	str	r2, [r7, #4]
 8017d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d10a      	bne.n	8017d46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d34:	f383 8811 	msr	BASEPRI, r3
 8017d38:	f3bf 8f6f 	isb	sy
 8017d3c:	f3bf 8f4f 	dsb	sy
 8017d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017d42:	bf00      	nop
 8017d44:	e7fe      	b.n	8017d44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d10a      	bne.n	8017d62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d50:	f383 8811 	msr	BASEPRI, r3
 8017d54:	f3bf 8f6f 	isb	sy
 8017d58:	f3bf 8f4f 	dsb	sy
 8017d5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017d5e:	bf00      	nop
 8017d60:	e7fe      	b.n	8017d60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d002      	beq.n	8017d6e <xQueueGenericCreateStatic+0x52>
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d001      	beq.n	8017d72 <xQueueGenericCreateStatic+0x56>
 8017d6e:	2301      	movs	r3, #1
 8017d70:	e000      	b.n	8017d74 <xQueueGenericCreateStatic+0x58>
 8017d72:	2300      	movs	r3, #0
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d10a      	bne.n	8017d8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d7c:	f383 8811 	msr	BASEPRI, r3
 8017d80:	f3bf 8f6f 	isb	sy
 8017d84:	f3bf 8f4f 	dsb	sy
 8017d88:	623b      	str	r3, [r7, #32]
}
 8017d8a:	bf00      	nop
 8017d8c:	e7fe      	b.n	8017d8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d102      	bne.n	8017d9a <xQueueGenericCreateStatic+0x7e>
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d101      	bne.n	8017d9e <xQueueGenericCreateStatic+0x82>
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	e000      	b.n	8017da0 <xQueueGenericCreateStatic+0x84>
 8017d9e:	2300      	movs	r3, #0
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d10a      	bne.n	8017dba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017da8:	f383 8811 	msr	BASEPRI, r3
 8017dac:	f3bf 8f6f 	isb	sy
 8017db0:	f3bf 8f4f 	dsb	sy
 8017db4:	61fb      	str	r3, [r7, #28]
}
 8017db6:	bf00      	nop
 8017db8:	e7fe      	b.n	8017db8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017dba:	2350      	movs	r3, #80	; 0x50
 8017dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017dbe:	697b      	ldr	r3, [r7, #20]
 8017dc0:	2b50      	cmp	r3, #80	; 0x50
 8017dc2:	d00a      	beq.n	8017dda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dc8:	f383 8811 	msr	BASEPRI, r3
 8017dcc:	f3bf 8f6f 	isb	sy
 8017dd0:	f3bf 8f4f 	dsb	sy
 8017dd4:	61bb      	str	r3, [r7, #24]
}
 8017dd6:	bf00      	nop
 8017dd8:	e7fe      	b.n	8017dd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017dda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d00d      	beq.n	8017e02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de8:	2201      	movs	r2, #1
 8017dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017dee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df4:	9300      	str	r3, [sp, #0]
 8017df6:	4613      	mov	r3, r2
 8017df8:	687a      	ldr	r2, [r7, #4]
 8017dfa:	68b9      	ldr	r1, [r7, #8]
 8017dfc:	68f8      	ldr	r0, [r7, #12]
 8017dfe:	f000 f805 	bl	8017e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017e04:	4618      	mov	r0, r3
 8017e06:	3730      	adds	r7, #48	; 0x30
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b084      	sub	sp, #16
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
 8017e18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d103      	bne.n	8017e28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017e20:	69bb      	ldr	r3, [r7, #24]
 8017e22:	69ba      	ldr	r2, [r7, #24]
 8017e24:	601a      	str	r2, [r3, #0]
 8017e26:	e002      	b.n	8017e2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017e28:	69bb      	ldr	r3, [r7, #24]
 8017e2a:	687a      	ldr	r2, [r7, #4]
 8017e2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017e2e:	69bb      	ldr	r3, [r7, #24]
 8017e30:	68fa      	ldr	r2, [r7, #12]
 8017e32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017e34:	69bb      	ldr	r3, [r7, #24]
 8017e36:	68ba      	ldr	r2, [r7, #8]
 8017e38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017e3a:	2101      	movs	r1, #1
 8017e3c:	69b8      	ldr	r0, [r7, #24]
 8017e3e:	f7ff ff05 	bl	8017c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017e42:	69bb      	ldr	r3, [r7, #24]
 8017e44:	78fa      	ldrb	r2, [r7, #3]
 8017e46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017e4a:	bf00      	nop
 8017e4c:	3710      	adds	r7, #16
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bd80      	pop	{r7, pc}
	...

08017e54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b08e      	sub	sp, #56	; 0x38
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	60f8      	str	r0, [r7, #12]
 8017e5c:	60b9      	str	r1, [r7, #8]
 8017e5e:	607a      	str	r2, [r7, #4]
 8017e60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017e62:	2300      	movs	r3, #0
 8017e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d10a      	bne.n	8017e86 <xQueueGenericSend+0x32>
	__asm volatile
 8017e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e74:	f383 8811 	msr	BASEPRI, r3
 8017e78:	f3bf 8f6f 	isb	sy
 8017e7c:	f3bf 8f4f 	dsb	sy
 8017e80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017e82:	bf00      	nop
 8017e84:	e7fe      	b.n	8017e84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e86:	68bb      	ldr	r3, [r7, #8]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d103      	bne.n	8017e94 <xQueueGenericSend+0x40>
 8017e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d101      	bne.n	8017e98 <xQueueGenericSend+0x44>
 8017e94:	2301      	movs	r3, #1
 8017e96:	e000      	b.n	8017e9a <xQueueGenericSend+0x46>
 8017e98:	2300      	movs	r3, #0
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d10a      	bne.n	8017eb4 <xQueueGenericSend+0x60>
	__asm volatile
 8017e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ea2:	f383 8811 	msr	BASEPRI, r3
 8017ea6:	f3bf 8f6f 	isb	sy
 8017eaa:	f3bf 8f4f 	dsb	sy
 8017eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017eb0:	bf00      	nop
 8017eb2:	e7fe      	b.n	8017eb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	2b02      	cmp	r3, #2
 8017eb8:	d103      	bne.n	8017ec2 <xQueueGenericSend+0x6e>
 8017eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ebe:	2b01      	cmp	r3, #1
 8017ec0:	d101      	bne.n	8017ec6 <xQueueGenericSend+0x72>
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	e000      	b.n	8017ec8 <xQueueGenericSend+0x74>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d10a      	bne.n	8017ee2 <xQueueGenericSend+0x8e>
	__asm volatile
 8017ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ed0:	f383 8811 	msr	BASEPRI, r3
 8017ed4:	f3bf 8f6f 	isb	sy
 8017ed8:	f3bf 8f4f 	dsb	sy
 8017edc:	623b      	str	r3, [r7, #32]
}
 8017ede:	bf00      	nop
 8017ee0:	e7fe      	b.n	8017ee0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017ee2:	f001 fb77 	bl	80195d4 <xTaskGetSchedulerState>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d102      	bne.n	8017ef2 <xQueueGenericSend+0x9e>
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d101      	bne.n	8017ef6 <xQueueGenericSend+0xa2>
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	e000      	b.n	8017ef8 <xQueueGenericSend+0xa4>
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d10a      	bne.n	8017f12 <xQueueGenericSend+0xbe>
	__asm volatile
 8017efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f00:	f383 8811 	msr	BASEPRI, r3
 8017f04:	f3bf 8f6f 	isb	sy
 8017f08:	f3bf 8f4f 	dsb	sy
 8017f0c:	61fb      	str	r3, [r7, #28]
}
 8017f0e:	bf00      	nop
 8017f10:	e7fe      	b.n	8017f10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017f12:	f002 f8ef 	bl	801a0f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d302      	bcc.n	8017f28 <xQueueGenericSend+0xd4>
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	2b02      	cmp	r3, #2
 8017f26:	d129      	bne.n	8017f7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017f28:	683a      	ldr	r2, [r7, #0]
 8017f2a:	68b9      	ldr	r1, [r7, #8]
 8017f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f2e:	f000 fa0b 	bl	8018348 <prvCopyDataToQueue>
 8017f32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d010      	beq.n	8017f5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3e:	3324      	adds	r3, #36	; 0x24
 8017f40:	4618      	mov	r0, r3
 8017f42:	f001 f927 	bl	8019194 <xTaskRemoveFromEventList>
 8017f46:	4603      	mov	r3, r0
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d013      	beq.n	8017f74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017f4c:	4b3f      	ldr	r3, [pc, #252]	; (801804c <xQueueGenericSend+0x1f8>)
 8017f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f52:	601a      	str	r2, [r3, #0]
 8017f54:	f3bf 8f4f 	dsb	sy
 8017f58:	f3bf 8f6f 	isb	sy
 8017f5c:	e00a      	b.n	8017f74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d007      	beq.n	8017f74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017f64:	4b39      	ldr	r3, [pc, #228]	; (801804c <xQueueGenericSend+0x1f8>)
 8017f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f6a:	601a      	str	r2, [r3, #0]
 8017f6c:	f3bf 8f4f 	dsb	sy
 8017f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017f74:	f002 f8ee 	bl	801a154 <vPortExitCritical>
				return pdPASS;
 8017f78:	2301      	movs	r3, #1
 8017f7a:	e063      	b.n	8018044 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d103      	bne.n	8017f8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017f82:	f002 f8e7 	bl	801a154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017f86:	2300      	movs	r3, #0
 8017f88:	e05c      	b.n	8018044 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d106      	bne.n	8017f9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017f90:	f107 0314 	add.w	r3, r7, #20
 8017f94:	4618      	mov	r0, r3
 8017f96:	f001 f9c3 	bl	8019320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017f9e:	f002 f8d9 	bl	801a154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017fa2:	f000 fe81 	bl	8018ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017fa6:	f002 f8a5 	bl	801a0f4 <vPortEnterCritical>
 8017faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017fb0:	b25b      	sxtb	r3, r3
 8017fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fb6:	d103      	bne.n	8017fc0 <xQueueGenericSend+0x16c>
 8017fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fba:	2200      	movs	r2, #0
 8017fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017fc6:	b25b      	sxtb	r3, r3
 8017fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fcc:	d103      	bne.n	8017fd6 <xQueueGenericSend+0x182>
 8017fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017fd6:	f002 f8bd 	bl	801a154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017fda:	1d3a      	adds	r2, r7, #4
 8017fdc:	f107 0314 	add.w	r3, r7, #20
 8017fe0:	4611      	mov	r1, r2
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f001 f9b2 	bl	801934c <xTaskCheckForTimeOut>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d124      	bne.n	8018038 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ff0:	f000 faa2 	bl	8018538 <prvIsQueueFull>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d018      	beq.n	801802c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ffc:	3310      	adds	r3, #16
 8017ffe:	687a      	ldr	r2, [r7, #4]
 8018000:	4611      	mov	r1, r2
 8018002:	4618      	mov	r0, r3
 8018004:	f001 f83a 	bl	801907c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801800a:	f000 fa2d 	bl	8018468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801800e:	f000 fe59 	bl	8018cc4 <xTaskResumeAll>
 8018012:	4603      	mov	r3, r0
 8018014:	2b00      	cmp	r3, #0
 8018016:	f47f af7c 	bne.w	8017f12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801801a:	4b0c      	ldr	r3, [pc, #48]	; (801804c <xQueueGenericSend+0x1f8>)
 801801c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018020:	601a      	str	r2, [r3, #0]
 8018022:	f3bf 8f4f 	dsb	sy
 8018026:	f3bf 8f6f 	isb	sy
 801802a:	e772      	b.n	8017f12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801802c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801802e:	f000 fa1b 	bl	8018468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018032:	f000 fe47 	bl	8018cc4 <xTaskResumeAll>
 8018036:	e76c      	b.n	8017f12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801803a:	f000 fa15 	bl	8018468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801803e:	f000 fe41 	bl	8018cc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018044:	4618      	mov	r0, r3
 8018046:	3738      	adds	r7, #56	; 0x38
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}
 801804c:	e000ed04 	.word	0xe000ed04

08018050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b090      	sub	sp, #64	; 0x40
 8018054:	af00      	add	r7, sp, #0
 8018056:	60f8      	str	r0, [r7, #12]
 8018058:	60b9      	str	r1, [r7, #8]
 801805a:	607a      	str	r2, [r7, #4]
 801805c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8018062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10a      	bne.n	801807e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8018068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801806c:	f383 8811 	msr	BASEPRI, r3
 8018070:	f3bf 8f6f 	isb	sy
 8018074:	f3bf 8f4f 	dsb	sy
 8018078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801807a:	bf00      	nop
 801807c:	e7fe      	b.n	801807c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801807e:	68bb      	ldr	r3, [r7, #8]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d103      	bne.n	801808c <xQueueGenericSendFromISR+0x3c>
 8018084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018088:	2b00      	cmp	r3, #0
 801808a:	d101      	bne.n	8018090 <xQueueGenericSendFromISR+0x40>
 801808c:	2301      	movs	r3, #1
 801808e:	e000      	b.n	8018092 <xQueueGenericSendFromISR+0x42>
 8018090:	2300      	movs	r3, #0
 8018092:	2b00      	cmp	r3, #0
 8018094:	d10a      	bne.n	80180ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8018096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801809a:	f383 8811 	msr	BASEPRI, r3
 801809e:	f3bf 8f6f 	isb	sy
 80180a2:	f3bf 8f4f 	dsb	sy
 80180a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80180a8:	bf00      	nop
 80180aa:	e7fe      	b.n	80180aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	2b02      	cmp	r3, #2
 80180b0:	d103      	bne.n	80180ba <xQueueGenericSendFromISR+0x6a>
 80180b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180b6:	2b01      	cmp	r3, #1
 80180b8:	d101      	bne.n	80180be <xQueueGenericSendFromISR+0x6e>
 80180ba:	2301      	movs	r3, #1
 80180bc:	e000      	b.n	80180c0 <xQueueGenericSendFromISR+0x70>
 80180be:	2300      	movs	r3, #0
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d10a      	bne.n	80180da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80180c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180c8:	f383 8811 	msr	BASEPRI, r3
 80180cc:	f3bf 8f6f 	isb	sy
 80180d0:	f3bf 8f4f 	dsb	sy
 80180d4:	623b      	str	r3, [r7, #32]
}
 80180d6:	bf00      	nop
 80180d8:	e7fe      	b.n	80180d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80180da:	f002 f8ed 	bl	801a2b8 <vPortValidateInterruptPriority>
	__asm volatile
 80180de:	f3ef 8211 	mrs	r2, BASEPRI
 80180e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e6:	f383 8811 	msr	BASEPRI, r3
 80180ea:	f3bf 8f6f 	isb	sy
 80180ee:	f3bf 8f4f 	dsb	sy
 80180f2:	61fa      	str	r2, [r7, #28]
 80180f4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80180f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80180f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80180fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018102:	429a      	cmp	r2, r3
 8018104:	d302      	bcc.n	801810c <xQueueGenericSendFromISR+0xbc>
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	2b02      	cmp	r3, #2
 801810a:	d12f      	bne.n	801816c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801810e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801811a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801811c:	683a      	ldr	r2, [r7, #0]
 801811e:	68b9      	ldr	r1, [r7, #8]
 8018120:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018122:	f000 f911 	bl	8018348 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018126:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801812a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801812e:	d112      	bne.n	8018156 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018134:	2b00      	cmp	r3, #0
 8018136:	d016      	beq.n	8018166 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801813a:	3324      	adds	r3, #36	; 0x24
 801813c:	4618      	mov	r0, r3
 801813e:	f001 f829 	bl	8019194 <xTaskRemoveFromEventList>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	d00e      	beq.n	8018166 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d00b      	beq.n	8018166 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2201      	movs	r2, #1
 8018152:	601a      	str	r2, [r3, #0]
 8018154:	e007      	b.n	8018166 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018156:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801815a:	3301      	adds	r3, #1
 801815c:	b2db      	uxtb	r3, r3
 801815e:	b25a      	sxtb	r2, r3
 8018160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018166:	2301      	movs	r3, #1
 8018168:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801816a:	e001      	b.n	8018170 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801816c:	2300      	movs	r3, #0
 801816e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018172:	617b      	str	r3, [r7, #20]
	__asm volatile
 8018174:	697b      	ldr	r3, [r7, #20]
 8018176:	f383 8811 	msr	BASEPRI, r3
}
 801817a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801817e:	4618      	mov	r0, r3
 8018180:	3740      	adds	r7, #64	; 0x40
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}
	...

08018188 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b08c      	sub	sp, #48	; 0x30
 801818c:	af00      	add	r7, sp, #0
 801818e:	60f8      	str	r0, [r7, #12]
 8018190:	60b9      	str	r1, [r7, #8]
 8018192:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018194:	2300      	movs	r3, #0
 8018196:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d10a      	bne.n	80181b8 <xQueueReceive+0x30>
	__asm volatile
 80181a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a6:	f383 8811 	msr	BASEPRI, r3
 80181aa:	f3bf 8f6f 	isb	sy
 80181ae:	f3bf 8f4f 	dsb	sy
 80181b2:	623b      	str	r3, [r7, #32]
}
 80181b4:	bf00      	nop
 80181b6:	e7fe      	b.n	80181b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d103      	bne.n	80181c6 <xQueueReceive+0x3e>
 80181be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d101      	bne.n	80181ca <xQueueReceive+0x42>
 80181c6:	2301      	movs	r3, #1
 80181c8:	e000      	b.n	80181cc <xQueueReceive+0x44>
 80181ca:	2300      	movs	r3, #0
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d10a      	bne.n	80181e6 <xQueueReceive+0x5e>
	__asm volatile
 80181d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181d4:	f383 8811 	msr	BASEPRI, r3
 80181d8:	f3bf 8f6f 	isb	sy
 80181dc:	f3bf 8f4f 	dsb	sy
 80181e0:	61fb      	str	r3, [r7, #28]
}
 80181e2:	bf00      	nop
 80181e4:	e7fe      	b.n	80181e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80181e6:	f001 f9f5 	bl	80195d4 <xTaskGetSchedulerState>
 80181ea:	4603      	mov	r3, r0
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d102      	bne.n	80181f6 <xQueueReceive+0x6e>
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d101      	bne.n	80181fa <xQueueReceive+0x72>
 80181f6:	2301      	movs	r3, #1
 80181f8:	e000      	b.n	80181fc <xQueueReceive+0x74>
 80181fa:	2300      	movs	r3, #0
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d10a      	bne.n	8018216 <xQueueReceive+0x8e>
	__asm volatile
 8018200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018204:	f383 8811 	msr	BASEPRI, r3
 8018208:	f3bf 8f6f 	isb	sy
 801820c:	f3bf 8f4f 	dsb	sy
 8018210:	61bb      	str	r3, [r7, #24]
}
 8018212:	bf00      	nop
 8018214:	e7fe      	b.n	8018214 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018216:	f001 ff6d 	bl	801a0f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801821e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018222:	2b00      	cmp	r3, #0
 8018224:	d01f      	beq.n	8018266 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018226:	68b9      	ldr	r1, [r7, #8]
 8018228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801822a:	f000 f8f7 	bl	801841c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018230:	1e5a      	subs	r2, r3, #1
 8018232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018234:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018238:	691b      	ldr	r3, [r3, #16]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d00f      	beq.n	801825e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018240:	3310      	adds	r3, #16
 8018242:	4618      	mov	r0, r3
 8018244:	f000 ffa6 	bl	8019194 <xTaskRemoveFromEventList>
 8018248:	4603      	mov	r3, r0
 801824a:	2b00      	cmp	r3, #0
 801824c:	d007      	beq.n	801825e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801824e:	4b3d      	ldr	r3, [pc, #244]	; (8018344 <xQueueReceive+0x1bc>)
 8018250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018254:	601a      	str	r2, [r3, #0]
 8018256:	f3bf 8f4f 	dsb	sy
 801825a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801825e:	f001 ff79 	bl	801a154 <vPortExitCritical>
				return pdPASS;
 8018262:	2301      	movs	r3, #1
 8018264:	e069      	b.n	801833a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d103      	bne.n	8018274 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801826c:	f001 ff72 	bl	801a154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018270:	2300      	movs	r3, #0
 8018272:	e062      	b.n	801833a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018276:	2b00      	cmp	r3, #0
 8018278:	d106      	bne.n	8018288 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801827a:	f107 0310 	add.w	r3, r7, #16
 801827e:	4618      	mov	r0, r3
 8018280:	f001 f84e 	bl	8019320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018284:	2301      	movs	r3, #1
 8018286:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018288:	f001 ff64 	bl	801a154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801828c:	f000 fd0c 	bl	8018ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018290:	f001 ff30 	bl	801a0f4 <vPortEnterCritical>
 8018294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801829a:	b25b      	sxtb	r3, r3
 801829c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182a0:	d103      	bne.n	80182aa <xQueueReceive+0x122>
 80182a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182a4:	2200      	movs	r2, #0
 80182a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80182aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80182b0:	b25b      	sxtb	r3, r3
 80182b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182b6:	d103      	bne.n	80182c0 <xQueueReceive+0x138>
 80182b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ba:	2200      	movs	r2, #0
 80182bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80182c0:	f001 ff48 	bl	801a154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80182c4:	1d3a      	adds	r2, r7, #4
 80182c6:	f107 0310 	add.w	r3, r7, #16
 80182ca:	4611      	mov	r1, r2
 80182cc:	4618      	mov	r0, r3
 80182ce:	f001 f83d 	bl	801934c <xTaskCheckForTimeOut>
 80182d2:	4603      	mov	r3, r0
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d123      	bne.n	8018320 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182da:	f000 f917 	bl	801850c <prvIsQueueEmpty>
 80182de:	4603      	mov	r3, r0
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d017      	beq.n	8018314 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80182e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e6:	3324      	adds	r3, #36	; 0x24
 80182e8:	687a      	ldr	r2, [r7, #4]
 80182ea:	4611      	mov	r1, r2
 80182ec:	4618      	mov	r0, r3
 80182ee:	f000 fec5 	bl	801907c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80182f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182f4:	f000 f8b8 	bl	8018468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80182f8:	f000 fce4 	bl	8018cc4 <xTaskResumeAll>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d189      	bne.n	8018216 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8018302:	4b10      	ldr	r3, [pc, #64]	; (8018344 <xQueueReceive+0x1bc>)
 8018304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018308:	601a      	str	r2, [r3, #0]
 801830a:	f3bf 8f4f 	dsb	sy
 801830e:	f3bf 8f6f 	isb	sy
 8018312:	e780      	b.n	8018216 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018316:	f000 f8a7 	bl	8018468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801831a:	f000 fcd3 	bl	8018cc4 <xTaskResumeAll>
 801831e:	e77a      	b.n	8018216 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018322:	f000 f8a1 	bl	8018468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018326:	f000 fccd 	bl	8018cc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801832a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801832c:	f000 f8ee 	bl	801850c <prvIsQueueEmpty>
 8018330:	4603      	mov	r3, r0
 8018332:	2b00      	cmp	r3, #0
 8018334:	f43f af6f 	beq.w	8018216 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018338:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801833a:	4618      	mov	r0, r3
 801833c:	3730      	adds	r7, #48	; 0x30
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}
 8018342:	bf00      	nop
 8018344:	e000ed04 	.word	0xe000ed04

08018348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b086      	sub	sp, #24
 801834c:	af00      	add	r7, sp, #0
 801834e:	60f8      	str	r0, [r7, #12]
 8018350:	60b9      	str	r1, [r7, #8]
 8018352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018354:	2300      	movs	r3, #0
 8018356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801835c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018362:	2b00      	cmp	r3, #0
 8018364:	d10d      	bne.n	8018382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d14d      	bne.n	801840a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	689b      	ldr	r3, [r3, #8]
 8018372:	4618      	mov	r0, r3
 8018374:	f001 f94c 	bl	8019610 <xTaskPriorityDisinherit>
 8018378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	2200      	movs	r2, #0
 801837e:	609a      	str	r2, [r3, #8]
 8018380:	e043      	b.n	801840a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d119      	bne.n	80183bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	6858      	ldr	r0, [r3, #4]
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018390:	461a      	mov	r2, r3
 8018392:	68b9      	ldr	r1, [r7, #8]
 8018394:	f002 f9e4 	bl	801a760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	685a      	ldr	r2, [r3, #4]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183a0:	441a      	add	r2, r3
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	685a      	ldr	r2, [r3, #4]
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	689b      	ldr	r3, [r3, #8]
 80183ae:	429a      	cmp	r2, r3
 80183b0:	d32b      	bcc.n	801840a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	681a      	ldr	r2, [r3, #0]
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	605a      	str	r2, [r3, #4]
 80183ba:	e026      	b.n	801840a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	68d8      	ldr	r0, [r3, #12]
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183c4:	461a      	mov	r2, r3
 80183c6:	68b9      	ldr	r1, [r7, #8]
 80183c8:	f002 f9ca 	bl	801a760 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	68da      	ldr	r2, [r3, #12]
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183d4:	425b      	negs	r3, r3
 80183d6:	441a      	add	r2, r3
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	68da      	ldr	r2, [r3, #12]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d207      	bcs.n	80183f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	689a      	ldr	r2, [r3, #8]
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183f0:	425b      	negs	r3, r3
 80183f2:	441a      	add	r2, r3
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2b02      	cmp	r3, #2
 80183fc:	d105      	bne.n	801840a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80183fe:	693b      	ldr	r3, [r7, #16]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d002      	beq.n	801840a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	3b01      	subs	r3, #1
 8018408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801840a:	693b      	ldr	r3, [r7, #16]
 801840c:	1c5a      	adds	r2, r3, #1
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018412:	697b      	ldr	r3, [r7, #20]
}
 8018414:	4618      	mov	r0, r3
 8018416:	3718      	adds	r7, #24
 8018418:	46bd      	mov	sp, r7
 801841a:	bd80      	pop	{r7, pc}

0801841c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b082      	sub	sp, #8
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801842a:	2b00      	cmp	r3, #0
 801842c:	d018      	beq.n	8018460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	68da      	ldr	r2, [r3, #12]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018436:	441a      	add	r2, r3
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	68da      	ldr	r2, [r3, #12]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	689b      	ldr	r3, [r3, #8]
 8018444:	429a      	cmp	r2, r3
 8018446:	d303      	bcc.n	8018450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	681a      	ldr	r2, [r3, #0]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	68d9      	ldr	r1, [r3, #12]
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018458:	461a      	mov	r2, r3
 801845a:	6838      	ldr	r0, [r7, #0]
 801845c:	f002 f980 	bl	801a760 <memcpy>
	}
}
 8018460:	bf00      	nop
 8018462:	3708      	adds	r7, #8
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}

08018468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018468:	b580      	push	{r7, lr}
 801846a:	b084      	sub	sp, #16
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018470:	f001 fe40 	bl	801a0f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801847a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801847c:	e011      	b.n	80184a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018482:	2b00      	cmp	r3, #0
 8018484:	d012      	beq.n	80184ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	3324      	adds	r3, #36	; 0x24
 801848a:	4618      	mov	r0, r3
 801848c:	f000 fe82 	bl	8019194 <xTaskRemoveFromEventList>
 8018490:	4603      	mov	r3, r0
 8018492:	2b00      	cmp	r3, #0
 8018494:	d001      	beq.n	801849a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018496:	f000 ffbb 	bl	8019410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801849a:	7bfb      	ldrb	r3, [r7, #15]
 801849c:	3b01      	subs	r3, #1
 801849e:	b2db      	uxtb	r3, r3
 80184a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80184a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	dce9      	bgt.n	801847e <prvUnlockQueue+0x16>
 80184aa:	e000      	b.n	80184ae <prvUnlockQueue+0x46>
					break;
 80184ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	22ff      	movs	r2, #255	; 0xff
 80184b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80184b6:	f001 fe4d 	bl	801a154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80184ba:	f001 fe1b 	bl	801a0f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80184c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184c6:	e011      	b.n	80184ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	691b      	ldr	r3, [r3, #16]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d012      	beq.n	80184f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	3310      	adds	r3, #16
 80184d4:	4618      	mov	r0, r3
 80184d6:	f000 fe5d 	bl	8019194 <xTaskRemoveFromEventList>
 80184da:	4603      	mov	r3, r0
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d001      	beq.n	80184e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80184e0:	f000 ff96 	bl	8019410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80184e4:	7bbb      	ldrb	r3, [r7, #14]
 80184e6:	3b01      	subs	r3, #1
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	dce9      	bgt.n	80184c8 <prvUnlockQueue+0x60>
 80184f4:	e000      	b.n	80184f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80184f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	22ff      	movs	r2, #255	; 0xff
 80184fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018500:	f001 fe28 	bl	801a154 <vPortExitCritical>
}
 8018504:	bf00      	nop
 8018506:	3710      	adds	r7, #16
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}

0801850c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b084      	sub	sp, #16
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018514:	f001 fdee 	bl	801a0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801851c:	2b00      	cmp	r3, #0
 801851e:	d102      	bne.n	8018526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018520:	2301      	movs	r3, #1
 8018522:	60fb      	str	r3, [r7, #12]
 8018524:	e001      	b.n	801852a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018526:	2300      	movs	r3, #0
 8018528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801852a:	f001 fe13 	bl	801a154 <vPortExitCritical>

	return xReturn;
 801852e:	68fb      	ldr	r3, [r7, #12]
}
 8018530:	4618      	mov	r0, r3
 8018532:	3710      	adds	r7, #16
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}

08018538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b084      	sub	sp, #16
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018540:	f001 fdd8 	bl	801a0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801854c:	429a      	cmp	r2, r3
 801854e:	d102      	bne.n	8018556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018550:	2301      	movs	r3, #1
 8018552:	60fb      	str	r3, [r7, #12]
 8018554:	e001      	b.n	801855a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018556:	2300      	movs	r3, #0
 8018558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801855a:	f001 fdfb 	bl	801a154 <vPortExitCritical>

	return xReturn;
 801855e:	68fb      	ldr	r3, [r7, #12]
}
 8018560:	4618      	mov	r0, r3
 8018562:	3710      	adds	r7, #16
 8018564:	46bd      	mov	sp, r7
 8018566:	bd80      	pop	{r7, pc}

08018568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018568:	b480      	push	{r7}
 801856a:	b085      	sub	sp, #20
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018572:	2300      	movs	r3, #0
 8018574:	60fb      	str	r3, [r7, #12]
 8018576:	e014      	b.n	80185a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018578:	4a0f      	ldr	r2, [pc, #60]	; (80185b8 <vQueueAddToRegistry+0x50>)
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10b      	bne.n	801859c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018584:	490c      	ldr	r1, [pc, #48]	; (80185b8 <vQueueAddToRegistry+0x50>)
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	683a      	ldr	r2, [r7, #0]
 801858a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801858e:	4a0a      	ldr	r2, [pc, #40]	; (80185b8 <vQueueAddToRegistry+0x50>)
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	00db      	lsls	r3, r3, #3
 8018594:	4413      	add	r3, r2
 8018596:	687a      	ldr	r2, [r7, #4]
 8018598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801859a:	e006      	b.n	80185aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	3301      	adds	r3, #1
 80185a0:	60fb      	str	r3, [r7, #12]
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	2b07      	cmp	r3, #7
 80185a6:	d9e7      	bls.n	8018578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80185a8:	bf00      	nop
 80185aa:	bf00      	nop
 80185ac:	3714      	adds	r7, #20
 80185ae:	46bd      	mov	sp, r7
 80185b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b4:	4770      	bx	lr
 80185b6:	bf00      	nop
 80185b8:	240026d8 	.word	0x240026d8

080185bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	60b9      	str	r1, [r7, #8]
 80185c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80185cc:	f001 fd92 	bl	801a0f4 <vPortEnterCritical>
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185d6:	b25b      	sxtb	r3, r3
 80185d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80185dc:	d103      	bne.n	80185e6 <vQueueWaitForMessageRestricted+0x2a>
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	2200      	movs	r2, #0
 80185e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80185ec:	b25b      	sxtb	r3, r3
 80185ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80185f2:	d103      	bne.n	80185fc <vQueueWaitForMessageRestricted+0x40>
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	2200      	movs	r2, #0
 80185f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80185fc:	f001 fdaa 	bl	801a154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018604:	2b00      	cmp	r3, #0
 8018606:	d106      	bne.n	8018616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	3324      	adds	r3, #36	; 0x24
 801860c:	687a      	ldr	r2, [r7, #4]
 801860e:	68b9      	ldr	r1, [r7, #8]
 8018610:	4618      	mov	r0, r3
 8018612:	f000 fd93 	bl	801913c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018616:	6978      	ldr	r0, [r7, #20]
 8018618:	f7ff ff26 	bl	8018468 <prvUnlockQueue>
	}
 801861c:	bf00      	nop
 801861e:	3718      	adds	r7, #24
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}

08018624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018624:	b580      	push	{r7, lr}
 8018626:	b08e      	sub	sp, #56	; 0x38
 8018628:	af04      	add	r7, sp, #16
 801862a:	60f8      	str	r0, [r7, #12]
 801862c:	60b9      	str	r1, [r7, #8]
 801862e:	607a      	str	r2, [r7, #4]
 8018630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018634:	2b00      	cmp	r3, #0
 8018636:	d10a      	bne.n	801864e <xTaskCreateStatic+0x2a>
	__asm volatile
 8018638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801863c:	f383 8811 	msr	BASEPRI, r3
 8018640:	f3bf 8f6f 	isb	sy
 8018644:	f3bf 8f4f 	dsb	sy
 8018648:	623b      	str	r3, [r7, #32]
}
 801864a:	bf00      	nop
 801864c:	e7fe      	b.n	801864c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018650:	2b00      	cmp	r3, #0
 8018652:	d10a      	bne.n	801866a <xTaskCreateStatic+0x46>
	__asm volatile
 8018654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018658:	f383 8811 	msr	BASEPRI, r3
 801865c:	f3bf 8f6f 	isb	sy
 8018660:	f3bf 8f4f 	dsb	sy
 8018664:	61fb      	str	r3, [r7, #28]
}
 8018666:	bf00      	nop
 8018668:	e7fe      	b.n	8018668 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801866a:	235c      	movs	r3, #92	; 0x5c
 801866c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801866e:	693b      	ldr	r3, [r7, #16]
 8018670:	2b5c      	cmp	r3, #92	; 0x5c
 8018672:	d00a      	beq.n	801868a <xTaskCreateStatic+0x66>
	__asm volatile
 8018674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018678:	f383 8811 	msr	BASEPRI, r3
 801867c:	f3bf 8f6f 	isb	sy
 8018680:	f3bf 8f4f 	dsb	sy
 8018684:	61bb      	str	r3, [r7, #24]
}
 8018686:	bf00      	nop
 8018688:	e7fe      	b.n	8018688 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801868a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801868e:	2b00      	cmp	r3, #0
 8018690:	d01e      	beq.n	80186d0 <xTaskCreateStatic+0xac>
 8018692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018694:	2b00      	cmp	r3, #0
 8018696:	d01b      	beq.n	80186d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801869a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801869e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80186a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80186a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186a4:	2202      	movs	r2, #2
 80186a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80186aa:	2300      	movs	r3, #0
 80186ac:	9303      	str	r3, [sp, #12]
 80186ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186b0:	9302      	str	r3, [sp, #8]
 80186b2:	f107 0314 	add.w	r3, r7, #20
 80186b6:	9301      	str	r3, [sp, #4]
 80186b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	683b      	ldr	r3, [r7, #0]
 80186be:	687a      	ldr	r2, [r7, #4]
 80186c0:	68b9      	ldr	r1, [r7, #8]
 80186c2:	68f8      	ldr	r0, [r7, #12]
 80186c4:	f000 f850 	bl	8018768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80186c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186ca:	f000 f8dd 	bl	8018888 <prvAddNewTaskToReadyList>
 80186ce:	e001      	b.n	80186d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80186d0:	2300      	movs	r3, #0
 80186d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80186d4:	697b      	ldr	r3, [r7, #20]
	}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3728      	adds	r7, #40	; 0x28
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}

080186de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80186de:	b580      	push	{r7, lr}
 80186e0:	b08c      	sub	sp, #48	; 0x30
 80186e2:	af04      	add	r7, sp, #16
 80186e4:	60f8      	str	r0, [r7, #12]
 80186e6:	60b9      	str	r1, [r7, #8]
 80186e8:	603b      	str	r3, [r7, #0]
 80186ea:	4613      	mov	r3, r2
 80186ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80186ee:	88fb      	ldrh	r3, [r7, #6]
 80186f0:	009b      	lsls	r3, r3, #2
 80186f2:	4618      	mov	r0, r3
 80186f4:	f001 fe20 	bl	801a338 <pvPortMalloc>
 80186f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d00e      	beq.n	801871e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018700:	205c      	movs	r0, #92	; 0x5c
 8018702:	f001 fe19 	bl	801a338 <pvPortMalloc>
 8018706:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018708:	69fb      	ldr	r3, [r7, #28]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d003      	beq.n	8018716 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801870e:	69fb      	ldr	r3, [r7, #28]
 8018710:	697a      	ldr	r2, [r7, #20]
 8018712:	631a      	str	r2, [r3, #48]	; 0x30
 8018714:	e005      	b.n	8018722 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018716:	6978      	ldr	r0, [r7, #20]
 8018718:	f001 feda 	bl	801a4d0 <vPortFree>
 801871c:	e001      	b.n	8018722 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801871e:	2300      	movs	r3, #0
 8018720:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018722:	69fb      	ldr	r3, [r7, #28]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d017      	beq.n	8018758 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018728:	69fb      	ldr	r3, [r7, #28]
 801872a:	2200      	movs	r2, #0
 801872c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018730:	88fa      	ldrh	r2, [r7, #6]
 8018732:	2300      	movs	r3, #0
 8018734:	9303      	str	r3, [sp, #12]
 8018736:	69fb      	ldr	r3, [r7, #28]
 8018738:	9302      	str	r3, [sp, #8]
 801873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801873c:	9301      	str	r3, [sp, #4]
 801873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018740:	9300      	str	r3, [sp, #0]
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	68b9      	ldr	r1, [r7, #8]
 8018746:	68f8      	ldr	r0, [r7, #12]
 8018748:	f000 f80e 	bl	8018768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801874c:	69f8      	ldr	r0, [r7, #28]
 801874e:	f000 f89b 	bl	8018888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018752:	2301      	movs	r3, #1
 8018754:	61bb      	str	r3, [r7, #24]
 8018756:	e002      	b.n	801875e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801875c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801875e:	69bb      	ldr	r3, [r7, #24]
	}
 8018760:	4618      	mov	r0, r3
 8018762:	3720      	adds	r7, #32
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b088      	sub	sp, #32
 801876c:	af00      	add	r7, sp, #0
 801876e:	60f8      	str	r0, [r7, #12]
 8018770:	60b9      	str	r1, [r7, #8]
 8018772:	607a      	str	r2, [r7, #4]
 8018774:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018778:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	009b      	lsls	r3, r3, #2
 801877e:	461a      	mov	r2, r3
 8018780:	21a5      	movs	r1, #165	; 0xa5
 8018782:	f001 fffb 	bl	801a77c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801878a:	6879      	ldr	r1, [r7, #4]
 801878c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018790:	440b      	add	r3, r1
 8018792:	009b      	lsls	r3, r3, #2
 8018794:	4413      	add	r3, r2
 8018796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018798:	69bb      	ldr	r3, [r7, #24]
 801879a:	f023 0307 	bic.w	r3, r3, #7
 801879e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80187a0:	69bb      	ldr	r3, [r7, #24]
 80187a2:	f003 0307 	and.w	r3, r3, #7
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d00a      	beq.n	80187c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80187aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187ae:	f383 8811 	msr	BASEPRI, r3
 80187b2:	f3bf 8f6f 	isb	sy
 80187b6:	f3bf 8f4f 	dsb	sy
 80187ba:	617b      	str	r3, [r7, #20]
}
 80187bc:	bf00      	nop
 80187be:	e7fe      	b.n	80187be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d01f      	beq.n	8018806 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80187c6:	2300      	movs	r3, #0
 80187c8:	61fb      	str	r3, [r7, #28]
 80187ca:	e012      	b.n	80187f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80187cc:	68ba      	ldr	r2, [r7, #8]
 80187ce:	69fb      	ldr	r3, [r7, #28]
 80187d0:	4413      	add	r3, r2
 80187d2:	7819      	ldrb	r1, [r3, #0]
 80187d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187d6:	69fb      	ldr	r3, [r7, #28]
 80187d8:	4413      	add	r3, r2
 80187da:	3334      	adds	r3, #52	; 0x34
 80187dc:	460a      	mov	r2, r1
 80187de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80187e0:	68ba      	ldr	r2, [r7, #8]
 80187e2:	69fb      	ldr	r3, [r7, #28]
 80187e4:	4413      	add	r3, r2
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d006      	beq.n	80187fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80187ec:	69fb      	ldr	r3, [r7, #28]
 80187ee:	3301      	adds	r3, #1
 80187f0:	61fb      	str	r3, [r7, #28]
 80187f2:	69fb      	ldr	r3, [r7, #28]
 80187f4:	2b0f      	cmp	r3, #15
 80187f6:	d9e9      	bls.n	80187cc <prvInitialiseNewTask+0x64>
 80187f8:	e000      	b.n	80187fc <prvInitialiseNewTask+0x94>
			{
				break;
 80187fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80187fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fe:	2200      	movs	r2, #0
 8018800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018804:	e003      	b.n	801880e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018808:	2200      	movs	r2, #0
 801880a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018810:	2b37      	cmp	r3, #55	; 0x37
 8018812:	d901      	bls.n	8018818 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018814:	2337      	movs	r3, #55	; 0x37
 8018816:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801881c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018822:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018826:	2200      	movs	r2, #0
 8018828:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801882c:	3304      	adds	r3, #4
 801882e:	4618      	mov	r0, r3
 8018830:	f7ff f978 	bl	8017b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018836:	3318      	adds	r3, #24
 8018838:	4618      	mov	r0, r3
 801883a:	f7ff f973 	bl	8017b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018846:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801884c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018852:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018856:	2200      	movs	r2, #0
 8018858:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801885c:	2200      	movs	r2, #0
 801885e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018862:	683a      	ldr	r2, [r7, #0]
 8018864:	68f9      	ldr	r1, [r7, #12]
 8018866:	69b8      	ldr	r0, [r7, #24]
 8018868:	f001 fb1a 	bl	8019ea0 <pxPortInitialiseStack>
 801886c:	4602      	mov	r2, r0
 801886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018870:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018874:	2b00      	cmp	r3, #0
 8018876:	d002      	beq.n	801887e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801887a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801887c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801887e:	bf00      	nop
 8018880:	3720      	adds	r7, #32
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}
	...

08018888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b082      	sub	sp, #8
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018890:	f001 fc30 	bl	801a0f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018894:	4b2d      	ldr	r3, [pc, #180]	; (801894c <prvAddNewTaskToReadyList+0xc4>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	3301      	adds	r3, #1
 801889a:	4a2c      	ldr	r2, [pc, #176]	; (801894c <prvAddNewTaskToReadyList+0xc4>)
 801889c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801889e:	4b2c      	ldr	r3, [pc, #176]	; (8018950 <prvAddNewTaskToReadyList+0xc8>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d109      	bne.n	80188ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80188a6:	4a2a      	ldr	r2, [pc, #168]	; (8018950 <prvAddNewTaskToReadyList+0xc8>)
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80188ac:	4b27      	ldr	r3, [pc, #156]	; (801894c <prvAddNewTaskToReadyList+0xc4>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d110      	bne.n	80188d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80188b4:	f000 fdd0 	bl	8019458 <prvInitialiseTaskLists>
 80188b8:	e00d      	b.n	80188d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80188ba:	4b26      	ldr	r3, [pc, #152]	; (8018954 <prvAddNewTaskToReadyList+0xcc>)
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d109      	bne.n	80188d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80188c2:	4b23      	ldr	r3, [pc, #140]	; (8018950 <prvAddNewTaskToReadyList+0xc8>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d802      	bhi.n	80188d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80188d0:	4a1f      	ldr	r2, [pc, #124]	; (8018950 <prvAddNewTaskToReadyList+0xc8>)
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80188d6:	4b20      	ldr	r3, [pc, #128]	; (8018958 <prvAddNewTaskToReadyList+0xd0>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	3301      	adds	r3, #1
 80188dc:	4a1e      	ldr	r2, [pc, #120]	; (8018958 <prvAddNewTaskToReadyList+0xd0>)
 80188de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80188e0:	4b1d      	ldr	r3, [pc, #116]	; (8018958 <prvAddNewTaskToReadyList+0xd0>)
 80188e2:	681a      	ldr	r2, [r3, #0]
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188ec:	4b1b      	ldr	r3, [pc, #108]	; (801895c <prvAddNewTaskToReadyList+0xd4>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d903      	bls.n	80188fc <prvAddNewTaskToReadyList+0x74>
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f8:	4a18      	ldr	r2, [pc, #96]	; (801895c <prvAddNewTaskToReadyList+0xd4>)
 80188fa:	6013      	str	r3, [r2, #0]
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018900:	4613      	mov	r3, r2
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	4413      	add	r3, r2
 8018906:	009b      	lsls	r3, r3, #2
 8018908:	4a15      	ldr	r2, [pc, #84]	; (8018960 <prvAddNewTaskToReadyList+0xd8>)
 801890a:	441a      	add	r2, r3
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	3304      	adds	r3, #4
 8018910:	4619      	mov	r1, r3
 8018912:	4610      	mov	r0, r2
 8018914:	f7ff f913 	bl	8017b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018918:	f001 fc1c 	bl	801a154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801891c:	4b0d      	ldr	r3, [pc, #52]	; (8018954 <prvAddNewTaskToReadyList+0xcc>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d00e      	beq.n	8018942 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018924:	4b0a      	ldr	r3, [pc, #40]	; (8018950 <prvAddNewTaskToReadyList+0xc8>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801892e:	429a      	cmp	r2, r3
 8018930:	d207      	bcs.n	8018942 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018932:	4b0c      	ldr	r3, [pc, #48]	; (8018964 <prvAddNewTaskToReadyList+0xdc>)
 8018934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018938:	601a      	str	r2, [r3, #0]
 801893a:	f3bf 8f4f 	dsb	sy
 801893e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018942:	bf00      	nop
 8018944:	3708      	adds	r7, #8
 8018946:	46bd      	mov	sp, r7
 8018948:	bd80      	pop	{r7, pc}
 801894a:	bf00      	nop
 801894c:	24002bec 	.word	0x24002bec
 8018950:	24002718 	.word	0x24002718
 8018954:	24002bf8 	.word	0x24002bf8
 8018958:	24002c08 	.word	0x24002c08
 801895c:	24002bf4 	.word	0x24002bf4
 8018960:	2400271c 	.word	0x2400271c
 8018964:	e000ed04 	.word	0xe000ed04

08018968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018970:	2300      	movs	r3, #0
 8018972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d017      	beq.n	80189aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801897a:	4b13      	ldr	r3, [pc, #76]	; (80189c8 <vTaskDelay+0x60>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d00a      	beq.n	8018998 <vTaskDelay+0x30>
	__asm volatile
 8018982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018986:	f383 8811 	msr	BASEPRI, r3
 801898a:	f3bf 8f6f 	isb	sy
 801898e:	f3bf 8f4f 	dsb	sy
 8018992:	60bb      	str	r3, [r7, #8]
}
 8018994:	bf00      	nop
 8018996:	e7fe      	b.n	8018996 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018998:	f000 f986 	bl	8018ca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801899c:	2100      	movs	r1, #0
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	f000 febc 	bl	801971c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80189a4:	f000 f98e 	bl	8018cc4 <xTaskResumeAll>
 80189a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d107      	bne.n	80189c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80189b0:	4b06      	ldr	r3, [pc, #24]	; (80189cc <vTaskDelay+0x64>)
 80189b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189b6:	601a      	str	r2, [r3, #0]
 80189b8:	f3bf 8f4f 	dsb	sy
 80189bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80189c0:	bf00      	nop
 80189c2:	3710      	adds	r7, #16
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}
 80189c8:	24002c14 	.word	0x24002c14
 80189cc:	e000ed04 	.word	0xe000ed04

080189d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b084      	sub	sp, #16
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80189d8:	f001 fb8c 	bl	801a0f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d102      	bne.n	80189e8 <vTaskSuspend+0x18>
 80189e2:	4b30      	ldr	r3, [pc, #192]	; (8018aa4 <vTaskSuspend+0xd4>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	e000      	b.n	80189ea <vTaskSuspend+0x1a>
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	3304      	adds	r3, #4
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7ff f901 	bl	8017bf8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d004      	beq.n	8018a08 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	3318      	adds	r3, #24
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7ff f8f8 	bl	8017bf8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	3304      	adds	r3, #4
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	4826      	ldr	r0, [pc, #152]	; (8018aa8 <vTaskSuspend+0xd8>)
 8018a10:	f7ff f895 	bl	8017b3e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018a1a:	b2db      	uxtb	r3, r3
 8018a1c:	2b01      	cmp	r3, #1
 8018a1e:	d103      	bne.n	8018a28 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	2200      	movs	r2, #0
 8018a24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018a28:	f001 fb94 	bl	801a154 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018a2c:	4b1f      	ldr	r3, [pc, #124]	; (8018aac <vTaskSuspend+0xdc>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d005      	beq.n	8018a40 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018a34:	f001 fb5e 	bl	801a0f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018a38:	f000 fdac 	bl	8019594 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018a3c:	f001 fb8a 	bl	801a154 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018a40:	4b18      	ldr	r3, [pc, #96]	; (8018aa4 <vTaskSuspend+0xd4>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	68fa      	ldr	r2, [r7, #12]
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d127      	bne.n	8018a9a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8018a4a:	4b18      	ldr	r3, [pc, #96]	; (8018aac <vTaskSuspend+0xdc>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d017      	beq.n	8018a82 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018a52:	4b17      	ldr	r3, [pc, #92]	; (8018ab0 <vTaskSuspend+0xe0>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d00a      	beq.n	8018a70 <vTaskSuspend+0xa0>
	__asm volatile
 8018a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a5e:	f383 8811 	msr	BASEPRI, r3
 8018a62:	f3bf 8f6f 	isb	sy
 8018a66:	f3bf 8f4f 	dsb	sy
 8018a6a:	60bb      	str	r3, [r7, #8]
}
 8018a6c:	bf00      	nop
 8018a6e:	e7fe      	b.n	8018a6e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8018a70:	4b10      	ldr	r3, [pc, #64]	; (8018ab4 <vTaskSuspend+0xe4>)
 8018a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a76:	601a      	str	r2, [r3, #0]
 8018a78:	f3bf 8f4f 	dsb	sy
 8018a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a80:	e00b      	b.n	8018a9a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018a82:	4b09      	ldr	r3, [pc, #36]	; (8018aa8 <vTaskSuspend+0xd8>)
 8018a84:	681a      	ldr	r2, [r3, #0]
 8018a86:	4b0c      	ldr	r3, [pc, #48]	; (8018ab8 <vTaskSuspend+0xe8>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	429a      	cmp	r2, r3
 8018a8c:	d103      	bne.n	8018a96 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8018a8e:	4b05      	ldr	r3, [pc, #20]	; (8018aa4 <vTaskSuspend+0xd4>)
 8018a90:	2200      	movs	r2, #0
 8018a92:	601a      	str	r2, [r3, #0]
	}
 8018a94:	e001      	b.n	8018a9a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8018a96:	f000 fa85 	bl	8018fa4 <vTaskSwitchContext>
	}
 8018a9a:	bf00      	nop
 8018a9c:	3710      	adds	r7, #16
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	24002718 	.word	0x24002718
 8018aa8:	24002bd8 	.word	0x24002bd8
 8018aac:	24002bf8 	.word	0x24002bf8
 8018ab0:	24002c14 	.word	0x24002c14
 8018ab4:	e000ed04 	.word	0xe000ed04
 8018ab8:	24002bec 	.word	0x24002bec

08018abc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018abc:	b480      	push	{r7}
 8018abe:	b087      	sub	sp, #28
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d10a      	bne.n	8018ae8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad6:	f383 8811 	msr	BASEPRI, r3
 8018ada:	f3bf 8f6f 	isb	sy
 8018ade:	f3bf 8f4f 	dsb	sy
 8018ae2:	60fb      	str	r3, [r7, #12]
}
 8018ae4:	bf00      	nop
 8018ae6:	e7fe      	b.n	8018ae6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018ae8:	693b      	ldr	r3, [r7, #16]
 8018aea:	695b      	ldr	r3, [r3, #20]
 8018aec:	4a0a      	ldr	r2, [pc, #40]	; (8018b18 <prvTaskIsTaskSuspended+0x5c>)
 8018aee:	4293      	cmp	r3, r2
 8018af0:	d10a      	bne.n	8018b08 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018af2:	693b      	ldr	r3, [r7, #16]
 8018af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018af6:	4a09      	ldr	r2, [pc, #36]	; (8018b1c <prvTaskIsTaskSuspended+0x60>)
 8018af8:	4293      	cmp	r3, r2
 8018afa:	d005      	beq.n	8018b08 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018afc:	693b      	ldr	r3, [r7, #16]
 8018afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d101      	bne.n	8018b08 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018b04:	2301      	movs	r3, #1
 8018b06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018b08:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	371c      	adds	r7, #28
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b14:	4770      	bx	lr
 8018b16:	bf00      	nop
 8018b18:	24002bd8 	.word	0x24002bd8
 8018b1c:	24002bac 	.word	0x24002bac

08018b20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b084      	sub	sp, #16
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d10a      	bne.n	8018b48 <vTaskResume+0x28>
	__asm volatile
 8018b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b36:	f383 8811 	msr	BASEPRI, r3
 8018b3a:	f3bf 8f6f 	isb	sy
 8018b3e:	f3bf 8f4f 	dsb	sy
 8018b42:	60bb      	str	r3, [r7, #8]
}
 8018b44:	bf00      	nop
 8018b46:	e7fe      	b.n	8018b46 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018b48:	4b20      	ldr	r3, [pc, #128]	; (8018bcc <vTaskResume+0xac>)
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	d038      	beq.n	8018bc4 <vTaskResume+0xa4>
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d035      	beq.n	8018bc4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8018b58:	f001 facc 	bl	801a0f4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018b5c:	68f8      	ldr	r0, [r7, #12]
 8018b5e:	f7ff ffad 	bl	8018abc <prvTaskIsTaskSuspended>
 8018b62:	4603      	mov	r3, r0
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d02b      	beq.n	8018bc0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	3304      	adds	r3, #4
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f7ff f843 	bl	8017bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b76:	4b16      	ldr	r3, [pc, #88]	; (8018bd0 <vTaskResume+0xb0>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d903      	bls.n	8018b86 <vTaskResume+0x66>
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b82:	4a13      	ldr	r2, [pc, #76]	; (8018bd0 <vTaskResume+0xb0>)
 8018b84:	6013      	str	r3, [r2, #0]
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	009b      	lsls	r3, r3, #2
 8018b8e:	4413      	add	r3, r2
 8018b90:	009b      	lsls	r3, r3, #2
 8018b92:	4a10      	ldr	r2, [pc, #64]	; (8018bd4 <vTaskResume+0xb4>)
 8018b94:	441a      	add	r2, r3
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	3304      	adds	r3, #4
 8018b9a:	4619      	mov	r1, r3
 8018b9c:	4610      	mov	r0, r2
 8018b9e:	f7fe ffce 	bl	8017b3e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ba6:	4b09      	ldr	r3, [pc, #36]	; (8018bcc <vTaskResume+0xac>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bac:	429a      	cmp	r2, r3
 8018bae:	d307      	bcc.n	8018bc0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018bb0:	4b09      	ldr	r3, [pc, #36]	; (8018bd8 <vTaskResume+0xb8>)
 8018bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bb6:	601a      	str	r2, [r3, #0]
 8018bb8:	f3bf 8f4f 	dsb	sy
 8018bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018bc0:	f001 fac8 	bl	801a154 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018bc4:	bf00      	nop
 8018bc6:	3710      	adds	r7, #16
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	24002718 	.word	0x24002718
 8018bd0:	24002bf4 	.word	0x24002bf4
 8018bd4:	2400271c 	.word	0x2400271c
 8018bd8:	e000ed04 	.word	0xe000ed04

08018bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b08a      	sub	sp, #40	; 0x28
 8018be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018be2:	2300      	movs	r3, #0
 8018be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018be6:	2300      	movs	r3, #0
 8018be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018bea:	463a      	mov	r2, r7
 8018bec:	1d39      	adds	r1, r7, #4
 8018bee:	f107 0308 	add.w	r3, r7, #8
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f7fe fcd6 	bl	80175a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018bf8:	6839      	ldr	r1, [r7, #0]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	68ba      	ldr	r2, [r7, #8]
 8018bfe:	9202      	str	r2, [sp, #8]
 8018c00:	9301      	str	r3, [sp, #4]
 8018c02:	2300      	movs	r3, #0
 8018c04:	9300      	str	r3, [sp, #0]
 8018c06:	2300      	movs	r3, #0
 8018c08:	460a      	mov	r2, r1
 8018c0a:	4921      	ldr	r1, [pc, #132]	; (8018c90 <vTaskStartScheduler+0xb4>)
 8018c0c:	4821      	ldr	r0, [pc, #132]	; (8018c94 <vTaskStartScheduler+0xb8>)
 8018c0e:	f7ff fd09 	bl	8018624 <xTaskCreateStatic>
 8018c12:	4603      	mov	r3, r0
 8018c14:	4a20      	ldr	r2, [pc, #128]	; (8018c98 <vTaskStartScheduler+0xbc>)
 8018c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018c18:	4b1f      	ldr	r3, [pc, #124]	; (8018c98 <vTaskStartScheduler+0xbc>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d002      	beq.n	8018c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018c20:	2301      	movs	r3, #1
 8018c22:	617b      	str	r3, [r7, #20]
 8018c24:	e001      	b.n	8018c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018c26:	2300      	movs	r3, #0
 8018c28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018c2a:	697b      	ldr	r3, [r7, #20]
 8018c2c:	2b01      	cmp	r3, #1
 8018c2e:	d102      	bne.n	8018c36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018c30:	f000 fdc8 	bl	80197c4 <xTimerCreateTimerTask>
 8018c34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	2b01      	cmp	r3, #1
 8018c3a:	d116      	bne.n	8018c6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8018c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c40:	f383 8811 	msr	BASEPRI, r3
 8018c44:	f3bf 8f6f 	isb	sy
 8018c48:	f3bf 8f4f 	dsb	sy
 8018c4c:	613b      	str	r3, [r7, #16]
}
 8018c4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018c50:	4b12      	ldr	r3, [pc, #72]	; (8018c9c <vTaskStartScheduler+0xc0>)
 8018c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018c58:	4b11      	ldr	r3, [pc, #68]	; (8018ca0 <vTaskStartScheduler+0xc4>)
 8018c5a:	2201      	movs	r2, #1
 8018c5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018c5e:	4b11      	ldr	r3, [pc, #68]	; (8018ca4 <vTaskStartScheduler+0xc8>)
 8018c60:	2200      	movs	r2, #0
 8018c62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018c64:	f001 f9a4 	bl	8019fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018c68:	e00e      	b.n	8018c88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018c6a:	697b      	ldr	r3, [r7, #20]
 8018c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c70:	d10a      	bne.n	8018c88 <vTaskStartScheduler+0xac>
	__asm volatile
 8018c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c76:	f383 8811 	msr	BASEPRI, r3
 8018c7a:	f3bf 8f6f 	isb	sy
 8018c7e:	f3bf 8f4f 	dsb	sy
 8018c82:	60fb      	str	r3, [r7, #12]
}
 8018c84:	bf00      	nop
 8018c86:	e7fe      	b.n	8018c86 <vTaskStartScheduler+0xaa>
}
 8018c88:	bf00      	nop
 8018c8a:	3718      	adds	r7, #24
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	0801b3f0 	.word	0x0801b3f0
 8018c94:	08019429 	.word	0x08019429
 8018c98:	24002c10 	.word	0x24002c10
 8018c9c:	24002c0c 	.word	0x24002c0c
 8018ca0:	24002bf8 	.word	0x24002bf8
 8018ca4:	24002bf0 	.word	0x24002bf0

08018ca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018ca8:	b480      	push	{r7}
 8018caa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018cac:	4b04      	ldr	r3, [pc, #16]	; (8018cc0 <vTaskSuspendAll+0x18>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	3301      	adds	r3, #1
 8018cb2:	4a03      	ldr	r2, [pc, #12]	; (8018cc0 <vTaskSuspendAll+0x18>)
 8018cb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018cb6:	bf00      	nop
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cbe:	4770      	bx	lr
 8018cc0:	24002c14 	.word	0x24002c14

08018cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b084      	sub	sp, #16
 8018cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018cd2:	4b42      	ldr	r3, [pc, #264]	; (8018ddc <xTaskResumeAll+0x118>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d10a      	bne.n	8018cf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8018cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cde:	f383 8811 	msr	BASEPRI, r3
 8018ce2:	f3bf 8f6f 	isb	sy
 8018ce6:	f3bf 8f4f 	dsb	sy
 8018cea:	603b      	str	r3, [r7, #0]
}
 8018cec:	bf00      	nop
 8018cee:	e7fe      	b.n	8018cee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018cf0:	f001 fa00 	bl	801a0f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018cf4:	4b39      	ldr	r3, [pc, #228]	; (8018ddc <xTaskResumeAll+0x118>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	3b01      	subs	r3, #1
 8018cfa:	4a38      	ldr	r2, [pc, #224]	; (8018ddc <xTaskResumeAll+0x118>)
 8018cfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018cfe:	4b37      	ldr	r3, [pc, #220]	; (8018ddc <xTaskResumeAll+0x118>)
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d162      	bne.n	8018dcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018d06:	4b36      	ldr	r3, [pc, #216]	; (8018de0 <xTaskResumeAll+0x11c>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d05e      	beq.n	8018dcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d0e:	e02f      	b.n	8018d70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d10:	4b34      	ldr	r3, [pc, #208]	; (8018de4 <xTaskResumeAll+0x120>)
 8018d12:	68db      	ldr	r3, [r3, #12]
 8018d14:	68db      	ldr	r3, [r3, #12]
 8018d16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	3318      	adds	r3, #24
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f7fe ff6b 	bl	8017bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	3304      	adds	r3, #4
 8018d26:	4618      	mov	r0, r3
 8018d28:	f7fe ff66 	bl	8017bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d30:	4b2d      	ldr	r3, [pc, #180]	; (8018de8 <xTaskResumeAll+0x124>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	429a      	cmp	r2, r3
 8018d36:	d903      	bls.n	8018d40 <xTaskResumeAll+0x7c>
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d3c:	4a2a      	ldr	r2, [pc, #168]	; (8018de8 <xTaskResumeAll+0x124>)
 8018d3e:	6013      	str	r3, [r2, #0]
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d44:	4613      	mov	r3, r2
 8018d46:	009b      	lsls	r3, r3, #2
 8018d48:	4413      	add	r3, r2
 8018d4a:	009b      	lsls	r3, r3, #2
 8018d4c:	4a27      	ldr	r2, [pc, #156]	; (8018dec <xTaskResumeAll+0x128>)
 8018d4e:	441a      	add	r2, r3
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	3304      	adds	r3, #4
 8018d54:	4619      	mov	r1, r3
 8018d56:	4610      	mov	r0, r2
 8018d58:	f7fe fef1 	bl	8017b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d60:	4b23      	ldr	r3, [pc, #140]	; (8018df0 <xTaskResumeAll+0x12c>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d66:	429a      	cmp	r2, r3
 8018d68:	d302      	bcc.n	8018d70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018d6a:	4b22      	ldr	r3, [pc, #136]	; (8018df4 <xTaskResumeAll+0x130>)
 8018d6c:	2201      	movs	r2, #1
 8018d6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d70:	4b1c      	ldr	r3, [pc, #112]	; (8018de4 <xTaskResumeAll+0x120>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d1cb      	bne.n	8018d10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d001      	beq.n	8018d82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018d7e:	f000 fc09 	bl	8019594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018d82:	4b1d      	ldr	r3, [pc, #116]	; (8018df8 <xTaskResumeAll+0x134>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d010      	beq.n	8018db0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018d8e:	f000 f847 	bl	8018e20 <xTaskIncrementTick>
 8018d92:	4603      	mov	r3, r0
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d002      	beq.n	8018d9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018d98:	4b16      	ldr	r3, [pc, #88]	; (8018df4 <xTaskResumeAll+0x130>)
 8018d9a:	2201      	movs	r2, #1
 8018d9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	3b01      	subs	r3, #1
 8018da2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d1f1      	bne.n	8018d8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018daa:	4b13      	ldr	r3, [pc, #76]	; (8018df8 <xTaskResumeAll+0x134>)
 8018dac:	2200      	movs	r2, #0
 8018dae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018db0:	4b10      	ldr	r3, [pc, #64]	; (8018df4 <xTaskResumeAll+0x130>)
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d009      	beq.n	8018dcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018db8:	2301      	movs	r3, #1
 8018dba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018dbc:	4b0f      	ldr	r3, [pc, #60]	; (8018dfc <xTaskResumeAll+0x138>)
 8018dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dc2:	601a      	str	r2, [r3, #0]
 8018dc4:	f3bf 8f4f 	dsb	sy
 8018dc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018dcc:	f001 f9c2 	bl	801a154 <vPortExitCritical>

	return xAlreadyYielded;
 8018dd0:	68bb      	ldr	r3, [r7, #8]
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	3710      	adds	r7, #16
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd80      	pop	{r7, pc}
 8018dda:	bf00      	nop
 8018ddc:	24002c14 	.word	0x24002c14
 8018de0:	24002bec 	.word	0x24002bec
 8018de4:	24002bac 	.word	0x24002bac
 8018de8:	24002bf4 	.word	0x24002bf4
 8018dec:	2400271c 	.word	0x2400271c
 8018df0:	24002718 	.word	0x24002718
 8018df4:	24002c00 	.word	0x24002c00
 8018df8:	24002bfc 	.word	0x24002bfc
 8018dfc:	e000ed04 	.word	0xe000ed04

08018e00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018e00:	b480      	push	{r7}
 8018e02:	b083      	sub	sp, #12
 8018e04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018e06:	4b05      	ldr	r3, [pc, #20]	; (8018e1c <xTaskGetTickCount+0x1c>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018e0c:	687b      	ldr	r3, [r7, #4]
}
 8018e0e:	4618      	mov	r0, r3
 8018e10:	370c      	adds	r7, #12
 8018e12:	46bd      	mov	sp, r7
 8018e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e18:	4770      	bx	lr
 8018e1a:	bf00      	nop
 8018e1c:	24002bf0 	.word	0x24002bf0

08018e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b086      	sub	sp, #24
 8018e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018e26:	2300      	movs	r3, #0
 8018e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e2a:	4b53      	ldr	r3, [pc, #332]	; (8018f78 <xTaskIncrementTick+0x158>)
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	f040 8095 	bne.w	8018f5e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018e34:	4b51      	ldr	r3, [pc, #324]	; (8018f7c <xTaskIncrementTick+0x15c>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	3301      	adds	r3, #1
 8018e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018e3c:	4a4f      	ldr	r2, [pc, #316]	; (8018f7c <xTaskIncrementTick+0x15c>)
 8018e3e:	693b      	ldr	r3, [r7, #16]
 8018e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018e42:	693b      	ldr	r3, [r7, #16]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d120      	bne.n	8018e8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018e48:	4b4d      	ldr	r3, [pc, #308]	; (8018f80 <xTaskIncrementTick+0x160>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d00a      	beq.n	8018e68 <xTaskIncrementTick+0x48>
	__asm volatile
 8018e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e56:	f383 8811 	msr	BASEPRI, r3
 8018e5a:	f3bf 8f6f 	isb	sy
 8018e5e:	f3bf 8f4f 	dsb	sy
 8018e62:	603b      	str	r3, [r7, #0]
}
 8018e64:	bf00      	nop
 8018e66:	e7fe      	b.n	8018e66 <xTaskIncrementTick+0x46>
 8018e68:	4b45      	ldr	r3, [pc, #276]	; (8018f80 <xTaskIncrementTick+0x160>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	60fb      	str	r3, [r7, #12]
 8018e6e:	4b45      	ldr	r3, [pc, #276]	; (8018f84 <xTaskIncrementTick+0x164>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	4a43      	ldr	r2, [pc, #268]	; (8018f80 <xTaskIncrementTick+0x160>)
 8018e74:	6013      	str	r3, [r2, #0]
 8018e76:	4a43      	ldr	r2, [pc, #268]	; (8018f84 <xTaskIncrementTick+0x164>)
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	6013      	str	r3, [r2, #0]
 8018e7c:	4b42      	ldr	r3, [pc, #264]	; (8018f88 <xTaskIncrementTick+0x168>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	3301      	adds	r3, #1
 8018e82:	4a41      	ldr	r2, [pc, #260]	; (8018f88 <xTaskIncrementTick+0x168>)
 8018e84:	6013      	str	r3, [r2, #0]
 8018e86:	f000 fb85 	bl	8019594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018e8a:	4b40      	ldr	r3, [pc, #256]	; (8018f8c <xTaskIncrementTick+0x16c>)
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	693a      	ldr	r2, [r7, #16]
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d349      	bcc.n	8018f28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e94:	4b3a      	ldr	r3, [pc, #232]	; (8018f80 <xTaskIncrementTick+0x160>)
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d104      	bne.n	8018ea8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e9e:	4b3b      	ldr	r3, [pc, #236]	; (8018f8c <xTaskIncrementTick+0x16c>)
 8018ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ea4:	601a      	str	r2, [r3, #0]
					break;
 8018ea6:	e03f      	b.n	8018f28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ea8:	4b35      	ldr	r3, [pc, #212]	; (8018f80 <xTaskIncrementTick+0x160>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	68db      	ldr	r3, [r3, #12]
 8018eae:	68db      	ldr	r3, [r3, #12]
 8018eb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018eb2:	68bb      	ldr	r3, [r7, #8]
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018eb8:	693a      	ldr	r2, [r7, #16]
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d203      	bcs.n	8018ec8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018ec0:	4a32      	ldr	r2, [pc, #200]	; (8018f8c <xTaskIncrementTick+0x16c>)
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018ec6:	e02f      	b.n	8018f28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	3304      	adds	r3, #4
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7fe fe93 	bl	8017bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d004      	beq.n	8018ee4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	3318      	adds	r3, #24
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f7fe fe8a 	bl	8017bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ee8:	4b29      	ldr	r3, [pc, #164]	; (8018f90 <xTaskIncrementTick+0x170>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	429a      	cmp	r2, r3
 8018eee:	d903      	bls.n	8018ef8 <xTaskIncrementTick+0xd8>
 8018ef0:	68bb      	ldr	r3, [r7, #8]
 8018ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ef4:	4a26      	ldr	r2, [pc, #152]	; (8018f90 <xTaskIncrementTick+0x170>)
 8018ef6:	6013      	str	r3, [r2, #0]
 8018ef8:	68bb      	ldr	r3, [r7, #8]
 8018efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018efc:	4613      	mov	r3, r2
 8018efe:	009b      	lsls	r3, r3, #2
 8018f00:	4413      	add	r3, r2
 8018f02:	009b      	lsls	r3, r3, #2
 8018f04:	4a23      	ldr	r2, [pc, #140]	; (8018f94 <xTaskIncrementTick+0x174>)
 8018f06:	441a      	add	r2, r3
 8018f08:	68bb      	ldr	r3, [r7, #8]
 8018f0a:	3304      	adds	r3, #4
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	4610      	mov	r0, r2
 8018f10:	f7fe fe15 	bl	8017b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f18:	4b1f      	ldr	r3, [pc, #124]	; (8018f98 <xTaskIncrementTick+0x178>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d3b8      	bcc.n	8018e94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018f22:	2301      	movs	r3, #1
 8018f24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018f26:	e7b5      	b.n	8018e94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018f28:	4b1b      	ldr	r3, [pc, #108]	; (8018f98 <xTaskIncrementTick+0x178>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f2e:	4919      	ldr	r1, [pc, #100]	; (8018f94 <xTaskIncrementTick+0x174>)
 8018f30:	4613      	mov	r3, r2
 8018f32:	009b      	lsls	r3, r3, #2
 8018f34:	4413      	add	r3, r2
 8018f36:	009b      	lsls	r3, r3, #2
 8018f38:	440b      	add	r3, r1
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	2b01      	cmp	r3, #1
 8018f3e:	d901      	bls.n	8018f44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018f40:	2301      	movs	r3, #1
 8018f42:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018f44:	4b15      	ldr	r3, [pc, #84]	; (8018f9c <xTaskIncrementTick+0x17c>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d101      	bne.n	8018f50 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018f4c:	f7e9 fabe 	bl	80024cc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018f50:	4b13      	ldr	r3, [pc, #76]	; (8018fa0 <xTaskIncrementTick+0x180>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d009      	beq.n	8018f6c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018f58:	2301      	movs	r3, #1
 8018f5a:	617b      	str	r3, [r7, #20]
 8018f5c:	e006      	b.n	8018f6c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018f5e:	4b0f      	ldr	r3, [pc, #60]	; (8018f9c <xTaskIncrementTick+0x17c>)
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	3301      	adds	r3, #1
 8018f64:	4a0d      	ldr	r2, [pc, #52]	; (8018f9c <xTaskIncrementTick+0x17c>)
 8018f66:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018f68:	f7e9 fab0 	bl	80024cc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018f6c:	697b      	ldr	r3, [r7, #20]
}
 8018f6e:	4618      	mov	r0, r3
 8018f70:	3718      	adds	r7, #24
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}
 8018f76:	bf00      	nop
 8018f78:	24002c14 	.word	0x24002c14
 8018f7c:	24002bf0 	.word	0x24002bf0
 8018f80:	24002ba4 	.word	0x24002ba4
 8018f84:	24002ba8 	.word	0x24002ba8
 8018f88:	24002c04 	.word	0x24002c04
 8018f8c:	24002c0c 	.word	0x24002c0c
 8018f90:	24002bf4 	.word	0x24002bf4
 8018f94:	2400271c 	.word	0x2400271c
 8018f98:	24002718 	.word	0x24002718
 8018f9c:	24002bfc 	.word	0x24002bfc
 8018fa0:	24002c00 	.word	0x24002c00

08018fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b084      	sub	sp, #16
 8018fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018faa:	4b2f      	ldr	r3, [pc, #188]	; (8019068 <vTaskSwitchContext+0xc4>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d003      	beq.n	8018fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018fb2:	4b2e      	ldr	r3, [pc, #184]	; (801906c <vTaskSwitchContext+0xc8>)
 8018fb4:	2201      	movs	r2, #1
 8018fb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018fb8:	e052      	b.n	8019060 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018fba:	4b2c      	ldr	r3, [pc, #176]	; (801906c <vTaskSwitchContext+0xc8>)
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018fc0:	4b2b      	ldr	r3, [pc, #172]	; (8019070 <vTaskSwitchContext+0xcc>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	681a      	ldr	r2, [r3, #0]
 8018fc6:	4b2a      	ldr	r3, [pc, #168]	; (8019070 <vTaskSwitchContext+0xcc>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fcc:	429a      	cmp	r2, r3
 8018fce:	d808      	bhi.n	8018fe2 <vTaskSwitchContext+0x3e>
 8018fd0:	4b27      	ldr	r3, [pc, #156]	; (8019070 <vTaskSwitchContext+0xcc>)
 8018fd2:	681a      	ldr	r2, [r3, #0]
 8018fd4:	4b26      	ldr	r3, [pc, #152]	; (8019070 <vTaskSwitchContext+0xcc>)
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	3334      	adds	r3, #52	; 0x34
 8018fda:	4619      	mov	r1, r3
 8018fdc:	4610      	mov	r0, r2
 8018fde:	f7e9 fa83 	bl	80024e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018fe2:	4b24      	ldr	r3, [pc, #144]	; (8019074 <vTaskSwitchContext+0xd0>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	60fb      	str	r3, [r7, #12]
 8018fe8:	e010      	b.n	801900c <vTaskSwitchContext+0x68>
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d10a      	bne.n	8019006 <vTaskSwitchContext+0x62>
	__asm volatile
 8018ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ff4:	f383 8811 	msr	BASEPRI, r3
 8018ff8:	f3bf 8f6f 	isb	sy
 8018ffc:	f3bf 8f4f 	dsb	sy
 8019000:	607b      	str	r3, [r7, #4]
}
 8019002:	bf00      	nop
 8019004:	e7fe      	b.n	8019004 <vTaskSwitchContext+0x60>
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	3b01      	subs	r3, #1
 801900a:	60fb      	str	r3, [r7, #12]
 801900c:	491a      	ldr	r1, [pc, #104]	; (8019078 <vTaskSwitchContext+0xd4>)
 801900e:	68fa      	ldr	r2, [r7, #12]
 8019010:	4613      	mov	r3, r2
 8019012:	009b      	lsls	r3, r3, #2
 8019014:	4413      	add	r3, r2
 8019016:	009b      	lsls	r3, r3, #2
 8019018:	440b      	add	r3, r1
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d0e4      	beq.n	8018fea <vTaskSwitchContext+0x46>
 8019020:	68fa      	ldr	r2, [r7, #12]
 8019022:	4613      	mov	r3, r2
 8019024:	009b      	lsls	r3, r3, #2
 8019026:	4413      	add	r3, r2
 8019028:	009b      	lsls	r3, r3, #2
 801902a:	4a13      	ldr	r2, [pc, #76]	; (8019078 <vTaskSwitchContext+0xd4>)
 801902c:	4413      	add	r3, r2
 801902e:	60bb      	str	r3, [r7, #8]
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	685b      	ldr	r3, [r3, #4]
 8019034:	685a      	ldr	r2, [r3, #4]
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	605a      	str	r2, [r3, #4]
 801903a:	68bb      	ldr	r3, [r7, #8]
 801903c:	685a      	ldr	r2, [r3, #4]
 801903e:	68bb      	ldr	r3, [r7, #8]
 8019040:	3308      	adds	r3, #8
 8019042:	429a      	cmp	r2, r3
 8019044:	d104      	bne.n	8019050 <vTaskSwitchContext+0xac>
 8019046:	68bb      	ldr	r3, [r7, #8]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	685a      	ldr	r2, [r3, #4]
 801904c:	68bb      	ldr	r3, [r7, #8]
 801904e:	605a      	str	r2, [r3, #4]
 8019050:	68bb      	ldr	r3, [r7, #8]
 8019052:	685b      	ldr	r3, [r3, #4]
 8019054:	68db      	ldr	r3, [r3, #12]
 8019056:	4a06      	ldr	r2, [pc, #24]	; (8019070 <vTaskSwitchContext+0xcc>)
 8019058:	6013      	str	r3, [r2, #0]
 801905a:	4a06      	ldr	r2, [pc, #24]	; (8019074 <vTaskSwitchContext+0xd0>)
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	6013      	str	r3, [r2, #0]
}
 8019060:	bf00      	nop
 8019062:	3710      	adds	r7, #16
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}
 8019068:	24002c14 	.word	0x24002c14
 801906c:	24002c00 	.word	0x24002c00
 8019070:	24002718 	.word	0x24002718
 8019074:	24002bf4 	.word	0x24002bf4
 8019078:	2400271c 	.word	0x2400271c

0801907c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b084      	sub	sp, #16
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d10a      	bne.n	80190a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019090:	f383 8811 	msr	BASEPRI, r3
 8019094:	f3bf 8f6f 	isb	sy
 8019098:	f3bf 8f4f 	dsb	sy
 801909c:	60fb      	str	r3, [r7, #12]
}
 801909e:	bf00      	nop
 80190a0:	e7fe      	b.n	80190a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190a2:	4b07      	ldr	r3, [pc, #28]	; (80190c0 <vTaskPlaceOnEventList+0x44>)
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	3318      	adds	r3, #24
 80190a8:	4619      	mov	r1, r3
 80190aa:	6878      	ldr	r0, [r7, #4]
 80190ac:	f7fe fd6b 	bl	8017b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80190b0:	2101      	movs	r1, #1
 80190b2:	6838      	ldr	r0, [r7, #0]
 80190b4:	f000 fb32 	bl	801971c <prvAddCurrentTaskToDelayedList>
}
 80190b8:	bf00      	nop
 80190ba:	3710      	adds	r7, #16
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	24002718 	.word	0x24002718

080190c4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b086      	sub	sp, #24
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	60f8      	str	r0, [r7, #12]
 80190cc:	60b9      	str	r1, [r7, #8]
 80190ce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d10a      	bne.n	80190ec <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80190d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190da:	f383 8811 	msr	BASEPRI, r3
 80190de:	f3bf 8f6f 	isb	sy
 80190e2:	f3bf 8f4f 	dsb	sy
 80190e6:	617b      	str	r3, [r7, #20]
}
 80190e8:	bf00      	nop
 80190ea:	e7fe      	b.n	80190ea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80190ec:	4b11      	ldr	r3, [pc, #68]	; (8019134 <vTaskPlaceOnUnorderedEventList+0x70>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d10a      	bne.n	801910a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80190f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190f8:	f383 8811 	msr	BASEPRI, r3
 80190fc:	f3bf 8f6f 	isb	sy
 8019100:	f3bf 8f4f 	dsb	sy
 8019104:	613b      	str	r3, [r7, #16]
}
 8019106:	bf00      	nop
 8019108:	e7fe      	b.n	8019108 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801910a:	4b0b      	ldr	r3, [pc, #44]	; (8019138 <vTaskPlaceOnUnorderedEventList+0x74>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	68ba      	ldr	r2, [r7, #8]
 8019110:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8019114:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019116:	4b08      	ldr	r3, [pc, #32]	; (8019138 <vTaskPlaceOnUnorderedEventList+0x74>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	3318      	adds	r3, #24
 801911c:	4619      	mov	r1, r3
 801911e:	68f8      	ldr	r0, [r7, #12]
 8019120:	f7fe fd0d 	bl	8017b3e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019124:	2101      	movs	r1, #1
 8019126:	6878      	ldr	r0, [r7, #4]
 8019128:	f000 faf8 	bl	801971c <prvAddCurrentTaskToDelayedList>
}
 801912c:	bf00      	nop
 801912e:	3718      	adds	r7, #24
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}
 8019134:	24002c14 	.word	0x24002c14
 8019138:	24002718 	.word	0x24002718

0801913c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801913c:	b580      	push	{r7, lr}
 801913e:	b086      	sub	sp, #24
 8019140:	af00      	add	r7, sp, #0
 8019142:	60f8      	str	r0, [r7, #12]
 8019144:	60b9      	str	r1, [r7, #8]
 8019146:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d10a      	bne.n	8019164 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019152:	f383 8811 	msr	BASEPRI, r3
 8019156:	f3bf 8f6f 	isb	sy
 801915a:	f3bf 8f4f 	dsb	sy
 801915e:	617b      	str	r3, [r7, #20]
}
 8019160:	bf00      	nop
 8019162:	e7fe      	b.n	8019162 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019164:	4b0a      	ldr	r3, [pc, #40]	; (8019190 <vTaskPlaceOnEventListRestricted+0x54>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	3318      	adds	r3, #24
 801916a:	4619      	mov	r1, r3
 801916c:	68f8      	ldr	r0, [r7, #12]
 801916e:	f7fe fce6 	bl	8017b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d002      	beq.n	801917e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801917c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801917e:	6879      	ldr	r1, [r7, #4]
 8019180:	68b8      	ldr	r0, [r7, #8]
 8019182:	f000 facb 	bl	801971c <prvAddCurrentTaskToDelayedList>
	}
 8019186:	bf00      	nop
 8019188:	3718      	adds	r7, #24
 801918a:	46bd      	mov	sp, r7
 801918c:	bd80      	pop	{r7, pc}
 801918e:	bf00      	nop
 8019190:	24002718 	.word	0x24002718

08019194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b086      	sub	sp, #24
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	68db      	ldr	r3, [r3, #12]
 80191a0:	68db      	ldr	r3, [r3, #12]
 80191a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80191a4:	693b      	ldr	r3, [r7, #16]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d10a      	bne.n	80191c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80191aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ae:	f383 8811 	msr	BASEPRI, r3
 80191b2:	f3bf 8f6f 	isb	sy
 80191b6:	f3bf 8f4f 	dsb	sy
 80191ba:	60fb      	str	r3, [r7, #12]
}
 80191bc:	bf00      	nop
 80191be:	e7fe      	b.n	80191be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80191c0:	693b      	ldr	r3, [r7, #16]
 80191c2:	3318      	adds	r3, #24
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7fe fd17 	bl	8017bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80191ca:	4b1e      	ldr	r3, [pc, #120]	; (8019244 <xTaskRemoveFromEventList+0xb0>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d11d      	bne.n	801920e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80191d2:	693b      	ldr	r3, [r7, #16]
 80191d4:	3304      	adds	r3, #4
 80191d6:	4618      	mov	r0, r3
 80191d8:	f7fe fd0e 	bl	8017bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80191dc:	693b      	ldr	r3, [r7, #16]
 80191de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191e0:	4b19      	ldr	r3, [pc, #100]	; (8019248 <xTaskRemoveFromEventList+0xb4>)
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	429a      	cmp	r2, r3
 80191e6:	d903      	bls.n	80191f0 <xTaskRemoveFromEventList+0x5c>
 80191e8:	693b      	ldr	r3, [r7, #16]
 80191ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191ec:	4a16      	ldr	r2, [pc, #88]	; (8019248 <xTaskRemoveFromEventList+0xb4>)
 80191ee:	6013      	str	r3, [r2, #0]
 80191f0:	693b      	ldr	r3, [r7, #16]
 80191f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191f4:	4613      	mov	r3, r2
 80191f6:	009b      	lsls	r3, r3, #2
 80191f8:	4413      	add	r3, r2
 80191fa:	009b      	lsls	r3, r3, #2
 80191fc:	4a13      	ldr	r2, [pc, #76]	; (801924c <xTaskRemoveFromEventList+0xb8>)
 80191fe:	441a      	add	r2, r3
 8019200:	693b      	ldr	r3, [r7, #16]
 8019202:	3304      	adds	r3, #4
 8019204:	4619      	mov	r1, r3
 8019206:	4610      	mov	r0, r2
 8019208:	f7fe fc99 	bl	8017b3e <vListInsertEnd>
 801920c:	e005      	b.n	801921a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801920e:	693b      	ldr	r3, [r7, #16]
 8019210:	3318      	adds	r3, #24
 8019212:	4619      	mov	r1, r3
 8019214:	480e      	ldr	r0, [pc, #56]	; (8019250 <xTaskRemoveFromEventList+0xbc>)
 8019216:	f7fe fc92 	bl	8017b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801921a:	693b      	ldr	r3, [r7, #16]
 801921c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801921e:	4b0d      	ldr	r3, [pc, #52]	; (8019254 <xTaskRemoveFromEventList+0xc0>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019224:	429a      	cmp	r2, r3
 8019226:	d905      	bls.n	8019234 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019228:	2301      	movs	r3, #1
 801922a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801922c:	4b0a      	ldr	r3, [pc, #40]	; (8019258 <xTaskRemoveFromEventList+0xc4>)
 801922e:	2201      	movs	r2, #1
 8019230:	601a      	str	r2, [r3, #0]
 8019232:	e001      	b.n	8019238 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8019234:	2300      	movs	r3, #0
 8019236:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019238:	697b      	ldr	r3, [r7, #20]
}
 801923a:	4618      	mov	r0, r3
 801923c:	3718      	adds	r7, #24
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}
 8019242:	bf00      	nop
 8019244:	24002c14 	.word	0x24002c14
 8019248:	24002bf4 	.word	0x24002bf4
 801924c:	2400271c 	.word	0x2400271c
 8019250:	24002bac 	.word	0x24002bac
 8019254:	24002718 	.word	0x24002718
 8019258:	24002c00 	.word	0x24002c00

0801925c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b086      	sub	sp, #24
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
 8019264:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8019266:	4b29      	ldr	r3, [pc, #164]	; (801930c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d10a      	bne.n	8019284 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019272:	f383 8811 	msr	BASEPRI, r3
 8019276:	f3bf 8f6f 	isb	sy
 801927a:	f3bf 8f4f 	dsb	sy
 801927e:	613b      	str	r3, [r7, #16]
}
 8019280:	bf00      	nop
 8019282:	e7fe      	b.n	8019282 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	68db      	ldr	r3, [r3, #12]
 8019292:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8019294:	697b      	ldr	r3, [r7, #20]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d10a      	bne.n	80192b0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801929e:	f383 8811 	msr	BASEPRI, r3
 80192a2:	f3bf 8f6f 	isb	sy
 80192a6:	f3bf 8f4f 	dsb	sy
 80192aa:	60fb      	str	r3, [r7, #12]
}
 80192ac:	bf00      	nop
 80192ae:	e7fe      	b.n	80192ae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f7fe fca1 	bl	8017bf8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80192b6:	697b      	ldr	r3, [r7, #20]
 80192b8:	3304      	adds	r3, #4
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7fe fc9c 	bl	8017bf8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192c4:	4b12      	ldr	r3, [pc, #72]	; (8019310 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	429a      	cmp	r2, r3
 80192ca:	d903      	bls.n	80192d4 <vTaskRemoveFromUnorderedEventList+0x78>
 80192cc:	697b      	ldr	r3, [r7, #20]
 80192ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192d0:	4a0f      	ldr	r2, [pc, #60]	; (8019310 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80192d2:	6013      	str	r3, [r2, #0]
 80192d4:	697b      	ldr	r3, [r7, #20]
 80192d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192d8:	4613      	mov	r3, r2
 80192da:	009b      	lsls	r3, r3, #2
 80192dc:	4413      	add	r3, r2
 80192de:	009b      	lsls	r3, r3, #2
 80192e0:	4a0c      	ldr	r2, [pc, #48]	; (8019314 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80192e2:	441a      	add	r2, r3
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	3304      	adds	r3, #4
 80192e8:	4619      	mov	r1, r3
 80192ea:	4610      	mov	r0, r2
 80192ec:	f7fe fc27 	bl	8017b3e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80192f0:	697b      	ldr	r3, [r7, #20]
 80192f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192f4:	4b08      	ldr	r3, [pc, #32]	; (8019318 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192fa:	429a      	cmp	r2, r3
 80192fc:	d902      	bls.n	8019304 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80192fe:	4b07      	ldr	r3, [pc, #28]	; (801931c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8019300:	2201      	movs	r2, #1
 8019302:	601a      	str	r2, [r3, #0]
	}
}
 8019304:	bf00      	nop
 8019306:	3718      	adds	r7, #24
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}
 801930c:	24002c14 	.word	0x24002c14
 8019310:	24002bf4 	.word	0x24002bf4
 8019314:	2400271c 	.word	0x2400271c
 8019318:	24002718 	.word	0x24002718
 801931c:	24002c00 	.word	0x24002c00

08019320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019320:	b480      	push	{r7}
 8019322:	b083      	sub	sp, #12
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019328:	4b06      	ldr	r3, [pc, #24]	; (8019344 <vTaskInternalSetTimeOutState+0x24>)
 801932a:	681a      	ldr	r2, [r3, #0]
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019330:	4b05      	ldr	r3, [pc, #20]	; (8019348 <vTaskInternalSetTimeOutState+0x28>)
 8019332:	681a      	ldr	r2, [r3, #0]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	605a      	str	r2, [r3, #4]
}
 8019338:	bf00      	nop
 801933a:	370c      	adds	r7, #12
 801933c:	46bd      	mov	sp, r7
 801933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019342:	4770      	bx	lr
 8019344:	24002c04 	.word	0x24002c04
 8019348:	24002bf0 	.word	0x24002bf0

0801934c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b088      	sub	sp, #32
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
 8019354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d10a      	bne.n	8019372 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019360:	f383 8811 	msr	BASEPRI, r3
 8019364:	f3bf 8f6f 	isb	sy
 8019368:	f3bf 8f4f 	dsb	sy
 801936c:	613b      	str	r3, [r7, #16]
}
 801936e:	bf00      	nop
 8019370:	e7fe      	b.n	8019370 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d10a      	bne.n	801938e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801937c:	f383 8811 	msr	BASEPRI, r3
 8019380:	f3bf 8f6f 	isb	sy
 8019384:	f3bf 8f4f 	dsb	sy
 8019388:	60fb      	str	r3, [r7, #12]
}
 801938a:	bf00      	nop
 801938c:	e7fe      	b.n	801938c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801938e:	f000 feb1 	bl	801a0f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019392:	4b1d      	ldr	r3, [pc, #116]	; (8019408 <xTaskCheckForTimeOut+0xbc>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	685b      	ldr	r3, [r3, #4]
 801939c:	69ba      	ldr	r2, [r7, #24]
 801939e:	1ad3      	subs	r3, r2, r3
 80193a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80193aa:	d102      	bne.n	80193b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80193ac:	2300      	movs	r3, #0
 80193ae:	61fb      	str	r3, [r7, #28]
 80193b0:	e023      	b.n	80193fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	681a      	ldr	r2, [r3, #0]
 80193b6:	4b15      	ldr	r3, [pc, #84]	; (801940c <xTaskCheckForTimeOut+0xc0>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d007      	beq.n	80193ce <xTaskCheckForTimeOut+0x82>
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	685b      	ldr	r3, [r3, #4]
 80193c2:	69ba      	ldr	r2, [r7, #24]
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d302      	bcc.n	80193ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80193c8:	2301      	movs	r3, #1
 80193ca:	61fb      	str	r3, [r7, #28]
 80193cc:	e015      	b.n	80193fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	697a      	ldr	r2, [r7, #20]
 80193d4:	429a      	cmp	r2, r3
 80193d6:	d20b      	bcs.n	80193f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	697b      	ldr	r3, [r7, #20]
 80193de:	1ad2      	subs	r2, r2, r3
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f7ff ff9b 	bl	8019320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80193ea:	2300      	movs	r3, #0
 80193ec:	61fb      	str	r3, [r7, #28]
 80193ee:	e004      	b.n	80193fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	2200      	movs	r2, #0
 80193f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80193f6:	2301      	movs	r3, #1
 80193f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80193fa:	f000 feab 	bl	801a154 <vPortExitCritical>

	return xReturn;
 80193fe:	69fb      	ldr	r3, [r7, #28]
}
 8019400:	4618      	mov	r0, r3
 8019402:	3720      	adds	r7, #32
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}
 8019408:	24002bf0 	.word	0x24002bf0
 801940c:	24002c04 	.word	0x24002c04

08019410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019410:	b480      	push	{r7}
 8019412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019414:	4b03      	ldr	r3, [pc, #12]	; (8019424 <vTaskMissedYield+0x14>)
 8019416:	2201      	movs	r2, #1
 8019418:	601a      	str	r2, [r3, #0]
}
 801941a:	bf00      	nop
 801941c:	46bd      	mov	sp, r7
 801941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019422:	4770      	bx	lr
 8019424:	24002c00 	.word	0x24002c00

08019428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019430:	f000 f852 	bl	80194d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019434:	4b06      	ldr	r3, [pc, #24]	; (8019450 <prvIdleTask+0x28>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	2b01      	cmp	r3, #1
 801943a:	d9f9      	bls.n	8019430 <prvIdleTask+0x8>
			{
				taskYIELD();
 801943c:	4b05      	ldr	r3, [pc, #20]	; (8019454 <prvIdleTask+0x2c>)
 801943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019442:	601a      	str	r2, [r3, #0]
 8019444:	f3bf 8f4f 	dsb	sy
 8019448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801944c:	e7f0      	b.n	8019430 <prvIdleTask+0x8>
 801944e:	bf00      	nop
 8019450:	2400271c 	.word	0x2400271c
 8019454:	e000ed04 	.word	0xe000ed04

08019458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801945e:	2300      	movs	r3, #0
 8019460:	607b      	str	r3, [r7, #4]
 8019462:	e00c      	b.n	801947e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019464:	687a      	ldr	r2, [r7, #4]
 8019466:	4613      	mov	r3, r2
 8019468:	009b      	lsls	r3, r3, #2
 801946a:	4413      	add	r3, r2
 801946c:	009b      	lsls	r3, r3, #2
 801946e:	4a12      	ldr	r2, [pc, #72]	; (80194b8 <prvInitialiseTaskLists+0x60>)
 8019470:	4413      	add	r3, r2
 8019472:	4618      	mov	r0, r3
 8019474:	f7fe fb36 	bl	8017ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	3301      	adds	r3, #1
 801947c:	607b      	str	r3, [r7, #4]
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	2b37      	cmp	r3, #55	; 0x37
 8019482:	d9ef      	bls.n	8019464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019484:	480d      	ldr	r0, [pc, #52]	; (80194bc <prvInitialiseTaskLists+0x64>)
 8019486:	f7fe fb2d 	bl	8017ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801948a:	480d      	ldr	r0, [pc, #52]	; (80194c0 <prvInitialiseTaskLists+0x68>)
 801948c:	f7fe fb2a 	bl	8017ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019490:	480c      	ldr	r0, [pc, #48]	; (80194c4 <prvInitialiseTaskLists+0x6c>)
 8019492:	f7fe fb27 	bl	8017ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019496:	480c      	ldr	r0, [pc, #48]	; (80194c8 <prvInitialiseTaskLists+0x70>)
 8019498:	f7fe fb24 	bl	8017ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801949c:	480b      	ldr	r0, [pc, #44]	; (80194cc <prvInitialiseTaskLists+0x74>)
 801949e:	f7fe fb21 	bl	8017ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80194a2:	4b0b      	ldr	r3, [pc, #44]	; (80194d0 <prvInitialiseTaskLists+0x78>)
 80194a4:	4a05      	ldr	r2, [pc, #20]	; (80194bc <prvInitialiseTaskLists+0x64>)
 80194a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80194a8:	4b0a      	ldr	r3, [pc, #40]	; (80194d4 <prvInitialiseTaskLists+0x7c>)
 80194aa:	4a05      	ldr	r2, [pc, #20]	; (80194c0 <prvInitialiseTaskLists+0x68>)
 80194ac:	601a      	str	r2, [r3, #0]
}
 80194ae:	bf00      	nop
 80194b0:	3708      	adds	r7, #8
 80194b2:	46bd      	mov	sp, r7
 80194b4:	bd80      	pop	{r7, pc}
 80194b6:	bf00      	nop
 80194b8:	2400271c 	.word	0x2400271c
 80194bc:	24002b7c 	.word	0x24002b7c
 80194c0:	24002b90 	.word	0x24002b90
 80194c4:	24002bac 	.word	0x24002bac
 80194c8:	24002bc0 	.word	0x24002bc0
 80194cc:	24002bd8 	.word	0x24002bd8
 80194d0:	24002ba4 	.word	0x24002ba4
 80194d4:	24002ba8 	.word	0x24002ba8

080194d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b082      	sub	sp, #8
 80194dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194de:	e019      	b.n	8019514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80194e0:	f000 fe08 	bl	801a0f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194e4:	4b10      	ldr	r3, [pc, #64]	; (8019528 <prvCheckTasksWaitingTermination+0x50>)
 80194e6:	68db      	ldr	r3, [r3, #12]
 80194e8:	68db      	ldr	r3, [r3, #12]
 80194ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	3304      	adds	r3, #4
 80194f0:	4618      	mov	r0, r3
 80194f2:	f7fe fb81 	bl	8017bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80194f6:	4b0d      	ldr	r3, [pc, #52]	; (801952c <prvCheckTasksWaitingTermination+0x54>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	3b01      	subs	r3, #1
 80194fc:	4a0b      	ldr	r2, [pc, #44]	; (801952c <prvCheckTasksWaitingTermination+0x54>)
 80194fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019500:	4b0b      	ldr	r3, [pc, #44]	; (8019530 <prvCheckTasksWaitingTermination+0x58>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	3b01      	subs	r3, #1
 8019506:	4a0a      	ldr	r2, [pc, #40]	; (8019530 <prvCheckTasksWaitingTermination+0x58>)
 8019508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801950a:	f000 fe23 	bl	801a154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801950e:	6878      	ldr	r0, [r7, #4]
 8019510:	f000 f810 	bl	8019534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019514:	4b06      	ldr	r3, [pc, #24]	; (8019530 <prvCheckTasksWaitingTermination+0x58>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d1e1      	bne.n	80194e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801951c:	bf00      	nop
 801951e:	bf00      	nop
 8019520:	3708      	adds	r7, #8
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}
 8019526:	bf00      	nop
 8019528:	24002bc0 	.word	0x24002bc0
 801952c:	24002bec 	.word	0x24002bec
 8019530:	24002bd4 	.word	0x24002bd4

08019534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019534:	b580      	push	{r7, lr}
 8019536:	b084      	sub	sp, #16
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019542:	2b00      	cmp	r3, #0
 8019544:	d108      	bne.n	8019558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801954a:	4618      	mov	r0, r3
 801954c:	f000 ffc0 	bl	801a4d0 <vPortFree>
				vPortFree( pxTCB );
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f000 ffbd 	bl	801a4d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019556:	e018      	b.n	801958a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801955e:	2b01      	cmp	r3, #1
 8019560:	d103      	bne.n	801956a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019562:	6878      	ldr	r0, [r7, #4]
 8019564:	f000 ffb4 	bl	801a4d0 <vPortFree>
	}
 8019568:	e00f      	b.n	801958a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019570:	2b02      	cmp	r3, #2
 8019572:	d00a      	beq.n	801958a <prvDeleteTCB+0x56>
	__asm volatile
 8019574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019578:	f383 8811 	msr	BASEPRI, r3
 801957c:	f3bf 8f6f 	isb	sy
 8019580:	f3bf 8f4f 	dsb	sy
 8019584:	60fb      	str	r3, [r7, #12]
}
 8019586:	bf00      	nop
 8019588:	e7fe      	b.n	8019588 <prvDeleteTCB+0x54>
	}
 801958a:	bf00      	nop
 801958c:	3710      	adds	r7, #16
 801958e:	46bd      	mov	sp, r7
 8019590:	bd80      	pop	{r7, pc}
	...

08019594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019594:	b480      	push	{r7}
 8019596:	b083      	sub	sp, #12
 8019598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801959a:	4b0c      	ldr	r3, [pc, #48]	; (80195cc <prvResetNextTaskUnblockTime+0x38>)
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d104      	bne.n	80195ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80195a4:	4b0a      	ldr	r3, [pc, #40]	; (80195d0 <prvResetNextTaskUnblockTime+0x3c>)
 80195a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80195aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80195ac:	e008      	b.n	80195c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195ae:	4b07      	ldr	r3, [pc, #28]	; (80195cc <prvResetNextTaskUnblockTime+0x38>)
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	68db      	ldr	r3, [r3, #12]
 80195b4:	68db      	ldr	r3, [r3, #12]
 80195b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	4a04      	ldr	r2, [pc, #16]	; (80195d0 <prvResetNextTaskUnblockTime+0x3c>)
 80195be:	6013      	str	r3, [r2, #0]
}
 80195c0:	bf00      	nop
 80195c2:	370c      	adds	r7, #12
 80195c4:	46bd      	mov	sp, r7
 80195c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ca:	4770      	bx	lr
 80195cc:	24002ba4 	.word	0x24002ba4
 80195d0:	24002c0c 	.word	0x24002c0c

080195d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80195d4:	b480      	push	{r7}
 80195d6:	b083      	sub	sp, #12
 80195d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80195da:	4b0b      	ldr	r3, [pc, #44]	; (8019608 <xTaskGetSchedulerState+0x34>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d102      	bne.n	80195e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80195e2:	2301      	movs	r3, #1
 80195e4:	607b      	str	r3, [r7, #4]
 80195e6:	e008      	b.n	80195fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80195e8:	4b08      	ldr	r3, [pc, #32]	; (801960c <xTaskGetSchedulerState+0x38>)
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d102      	bne.n	80195f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80195f0:	2302      	movs	r3, #2
 80195f2:	607b      	str	r3, [r7, #4]
 80195f4:	e001      	b.n	80195fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80195f6:	2300      	movs	r3, #0
 80195f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80195fa:	687b      	ldr	r3, [r7, #4]
	}
 80195fc:	4618      	mov	r0, r3
 80195fe:	370c      	adds	r7, #12
 8019600:	46bd      	mov	sp, r7
 8019602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019606:	4770      	bx	lr
 8019608:	24002bf8 	.word	0x24002bf8
 801960c:	24002c14 	.word	0x24002c14

08019610 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019610:	b580      	push	{r7, lr}
 8019612:	b086      	sub	sp, #24
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801961c:	2300      	movs	r3, #0
 801961e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d056      	beq.n	80196d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019626:	4b2e      	ldr	r3, [pc, #184]	; (80196e0 <xTaskPriorityDisinherit+0xd0>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	693a      	ldr	r2, [r7, #16]
 801962c:	429a      	cmp	r2, r3
 801962e:	d00a      	beq.n	8019646 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019634:	f383 8811 	msr	BASEPRI, r3
 8019638:	f3bf 8f6f 	isb	sy
 801963c:	f3bf 8f4f 	dsb	sy
 8019640:	60fb      	str	r3, [r7, #12]
}
 8019642:	bf00      	nop
 8019644:	e7fe      	b.n	8019644 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019646:	693b      	ldr	r3, [r7, #16]
 8019648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801964a:	2b00      	cmp	r3, #0
 801964c:	d10a      	bne.n	8019664 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019652:	f383 8811 	msr	BASEPRI, r3
 8019656:	f3bf 8f6f 	isb	sy
 801965a:	f3bf 8f4f 	dsb	sy
 801965e:	60bb      	str	r3, [r7, #8]
}
 8019660:	bf00      	nop
 8019662:	e7fe      	b.n	8019662 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019664:	693b      	ldr	r3, [r7, #16]
 8019666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019668:	1e5a      	subs	r2, r3, #1
 801966a:	693b      	ldr	r3, [r7, #16]
 801966c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801966e:	693b      	ldr	r3, [r7, #16]
 8019670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019672:	693b      	ldr	r3, [r7, #16]
 8019674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019676:	429a      	cmp	r2, r3
 8019678:	d02c      	beq.n	80196d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801967a:	693b      	ldr	r3, [r7, #16]
 801967c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801967e:	2b00      	cmp	r3, #0
 8019680:	d128      	bne.n	80196d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019682:	693b      	ldr	r3, [r7, #16]
 8019684:	3304      	adds	r3, #4
 8019686:	4618      	mov	r0, r3
 8019688:	f7fe fab6 	bl	8017bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801968c:	693b      	ldr	r3, [r7, #16]
 801968e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019690:	693b      	ldr	r3, [r7, #16]
 8019692:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019694:	693b      	ldr	r3, [r7, #16]
 8019696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019698:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80196a0:	693b      	ldr	r3, [r7, #16]
 80196a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196a4:	4b0f      	ldr	r3, [pc, #60]	; (80196e4 <xTaskPriorityDisinherit+0xd4>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d903      	bls.n	80196b4 <xTaskPriorityDisinherit+0xa4>
 80196ac:	693b      	ldr	r3, [r7, #16]
 80196ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196b0:	4a0c      	ldr	r2, [pc, #48]	; (80196e4 <xTaskPriorityDisinherit+0xd4>)
 80196b2:	6013      	str	r3, [r2, #0]
 80196b4:	693b      	ldr	r3, [r7, #16]
 80196b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196b8:	4613      	mov	r3, r2
 80196ba:	009b      	lsls	r3, r3, #2
 80196bc:	4413      	add	r3, r2
 80196be:	009b      	lsls	r3, r3, #2
 80196c0:	4a09      	ldr	r2, [pc, #36]	; (80196e8 <xTaskPriorityDisinherit+0xd8>)
 80196c2:	441a      	add	r2, r3
 80196c4:	693b      	ldr	r3, [r7, #16]
 80196c6:	3304      	adds	r3, #4
 80196c8:	4619      	mov	r1, r3
 80196ca:	4610      	mov	r0, r2
 80196cc:	f7fe fa37 	bl	8017b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80196d0:	2301      	movs	r3, #1
 80196d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80196d4:	697b      	ldr	r3, [r7, #20]
	}
 80196d6:	4618      	mov	r0, r3
 80196d8:	3718      	adds	r7, #24
 80196da:	46bd      	mov	sp, r7
 80196dc:	bd80      	pop	{r7, pc}
 80196de:	bf00      	nop
 80196e0:	24002718 	.word	0x24002718
 80196e4:	24002bf4 	.word	0x24002bf4
 80196e8:	2400271c 	.word	0x2400271c

080196ec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80196ec:	b480      	push	{r7}
 80196ee:	b083      	sub	sp, #12
 80196f0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80196f2:	4b09      	ldr	r3, [pc, #36]	; (8019718 <uxTaskResetEventItemValue+0x2c>)
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	699b      	ldr	r3, [r3, #24]
 80196f8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196fa:	4b07      	ldr	r3, [pc, #28]	; (8019718 <uxTaskResetEventItemValue+0x2c>)
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019700:	4b05      	ldr	r3, [pc, #20]	; (8019718 <uxTaskResetEventItemValue+0x2c>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8019708:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801970a:	687b      	ldr	r3, [r7, #4]
}
 801970c:	4618      	mov	r0, r3
 801970e:	370c      	adds	r7, #12
 8019710:	46bd      	mov	sp, r7
 8019712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019716:	4770      	bx	lr
 8019718:	24002718 	.word	0x24002718

0801971c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b084      	sub	sp, #16
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019726:	4b21      	ldr	r3, [pc, #132]	; (80197ac <prvAddCurrentTaskToDelayedList+0x90>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801972c:	4b20      	ldr	r3, [pc, #128]	; (80197b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	3304      	adds	r3, #4
 8019732:	4618      	mov	r0, r3
 8019734:	f7fe fa60 	bl	8017bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801973e:	d10a      	bne.n	8019756 <prvAddCurrentTaskToDelayedList+0x3a>
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d007      	beq.n	8019756 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019746:	4b1a      	ldr	r3, [pc, #104]	; (80197b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	3304      	adds	r3, #4
 801974c:	4619      	mov	r1, r3
 801974e:	4819      	ldr	r0, [pc, #100]	; (80197b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8019750:	f7fe f9f5 	bl	8017b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019754:	e026      	b.n	80197a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019756:	68fa      	ldr	r2, [r7, #12]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	4413      	add	r3, r2
 801975c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801975e:	4b14      	ldr	r3, [pc, #80]	; (80197b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	68ba      	ldr	r2, [r7, #8]
 8019764:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019766:	68ba      	ldr	r2, [r7, #8]
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	429a      	cmp	r2, r3
 801976c:	d209      	bcs.n	8019782 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801976e:	4b12      	ldr	r3, [pc, #72]	; (80197b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019770:	681a      	ldr	r2, [r3, #0]
 8019772:	4b0f      	ldr	r3, [pc, #60]	; (80197b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	3304      	adds	r3, #4
 8019778:	4619      	mov	r1, r3
 801977a:	4610      	mov	r0, r2
 801977c:	f7fe fa03 	bl	8017b86 <vListInsert>
}
 8019780:	e010      	b.n	80197a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019782:	4b0e      	ldr	r3, [pc, #56]	; (80197bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8019784:	681a      	ldr	r2, [r3, #0]
 8019786:	4b0a      	ldr	r3, [pc, #40]	; (80197b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	3304      	adds	r3, #4
 801978c:	4619      	mov	r1, r3
 801978e:	4610      	mov	r0, r2
 8019790:	f7fe f9f9 	bl	8017b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019794:	4b0a      	ldr	r3, [pc, #40]	; (80197c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	68ba      	ldr	r2, [r7, #8]
 801979a:	429a      	cmp	r2, r3
 801979c:	d202      	bcs.n	80197a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801979e:	4a08      	ldr	r2, [pc, #32]	; (80197c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	6013      	str	r3, [r2, #0]
}
 80197a4:	bf00      	nop
 80197a6:	3710      	adds	r7, #16
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}
 80197ac:	24002bf0 	.word	0x24002bf0
 80197b0:	24002718 	.word	0x24002718
 80197b4:	24002bd8 	.word	0x24002bd8
 80197b8:	24002ba8 	.word	0x24002ba8
 80197bc:	24002ba4 	.word	0x24002ba4
 80197c0:	24002c0c 	.word	0x24002c0c

080197c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b08a      	sub	sp, #40	; 0x28
 80197c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80197ca:	2300      	movs	r3, #0
 80197cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80197ce:	f000 fb07 	bl	8019de0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80197d2:	4b1c      	ldr	r3, [pc, #112]	; (8019844 <xTimerCreateTimerTask+0x80>)
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d021      	beq.n	801981e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80197da:	2300      	movs	r3, #0
 80197dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80197de:	2300      	movs	r3, #0
 80197e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80197e2:	1d3a      	adds	r2, r7, #4
 80197e4:	f107 0108 	add.w	r1, r7, #8
 80197e8:	f107 030c 	add.w	r3, r7, #12
 80197ec:	4618      	mov	r0, r3
 80197ee:	f7fd fef3 	bl	80175d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80197f2:	6879      	ldr	r1, [r7, #4]
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	68fa      	ldr	r2, [r7, #12]
 80197f8:	9202      	str	r2, [sp, #8]
 80197fa:	9301      	str	r3, [sp, #4]
 80197fc:	2302      	movs	r3, #2
 80197fe:	9300      	str	r3, [sp, #0]
 8019800:	2300      	movs	r3, #0
 8019802:	460a      	mov	r2, r1
 8019804:	4910      	ldr	r1, [pc, #64]	; (8019848 <xTimerCreateTimerTask+0x84>)
 8019806:	4811      	ldr	r0, [pc, #68]	; (801984c <xTimerCreateTimerTask+0x88>)
 8019808:	f7fe ff0c 	bl	8018624 <xTaskCreateStatic>
 801980c:	4603      	mov	r3, r0
 801980e:	4a10      	ldr	r2, [pc, #64]	; (8019850 <xTimerCreateTimerTask+0x8c>)
 8019810:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019812:	4b0f      	ldr	r3, [pc, #60]	; (8019850 <xTimerCreateTimerTask+0x8c>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d001      	beq.n	801981e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801981a:	2301      	movs	r3, #1
 801981c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801981e:	697b      	ldr	r3, [r7, #20]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d10a      	bne.n	801983a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019828:	f383 8811 	msr	BASEPRI, r3
 801982c:	f3bf 8f6f 	isb	sy
 8019830:	f3bf 8f4f 	dsb	sy
 8019834:	613b      	str	r3, [r7, #16]
}
 8019836:	bf00      	nop
 8019838:	e7fe      	b.n	8019838 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801983a:	697b      	ldr	r3, [r7, #20]
}
 801983c:	4618      	mov	r0, r3
 801983e:	3718      	adds	r7, #24
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}
 8019844:	24002c48 	.word	0x24002c48
 8019848:	0801b3f8 	.word	0x0801b3f8
 801984c:	08019989 	.word	0x08019989
 8019850:	24002c4c 	.word	0x24002c4c

08019854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b08a      	sub	sp, #40	; 0x28
 8019858:	af00      	add	r7, sp, #0
 801985a:	60f8      	str	r0, [r7, #12]
 801985c:	60b9      	str	r1, [r7, #8]
 801985e:	607a      	str	r2, [r7, #4]
 8019860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019862:	2300      	movs	r3, #0
 8019864:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d10a      	bne.n	8019882 <xTimerGenericCommand+0x2e>
	__asm volatile
 801986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019870:	f383 8811 	msr	BASEPRI, r3
 8019874:	f3bf 8f6f 	isb	sy
 8019878:	f3bf 8f4f 	dsb	sy
 801987c:	623b      	str	r3, [r7, #32]
}
 801987e:	bf00      	nop
 8019880:	e7fe      	b.n	8019880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019882:	4b1a      	ldr	r3, [pc, #104]	; (80198ec <xTimerGenericCommand+0x98>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d02a      	beq.n	80198e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801988a:	68bb      	ldr	r3, [r7, #8]
 801988c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	2b05      	cmp	r3, #5
 801989a:	dc18      	bgt.n	80198ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801989c:	f7ff fe9a 	bl	80195d4 <xTaskGetSchedulerState>
 80198a0:	4603      	mov	r3, r0
 80198a2:	2b02      	cmp	r3, #2
 80198a4:	d109      	bne.n	80198ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80198a6:	4b11      	ldr	r3, [pc, #68]	; (80198ec <xTimerGenericCommand+0x98>)
 80198a8:	6818      	ldr	r0, [r3, #0]
 80198aa:	f107 0110 	add.w	r1, r7, #16
 80198ae:	2300      	movs	r3, #0
 80198b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198b2:	f7fe facf 	bl	8017e54 <xQueueGenericSend>
 80198b6:	6278      	str	r0, [r7, #36]	; 0x24
 80198b8:	e012      	b.n	80198e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80198ba:	4b0c      	ldr	r3, [pc, #48]	; (80198ec <xTimerGenericCommand+0x98>)
 80198bc:	6818      	ldr	r0, [r3, #0]
 80198be:	f107 0110 	add.w	r1, r7, #16
 80198c2:	2300      	movs	r3, #0
 80198c4:	2200      	movs	r2, #0
 80198c6:	f7fe fac5 	bl	8017e54 <xQueueGenericSend>
 80198ca:	6278      	str	r0, [r7, #36]	; 0x24
 80198cc:	e008      	b.n	80198e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80198ce:	4b07      	ldr	r3, [pc, #28]	; (80198ec <xTimerGenericCommand+0x98>)
 80198d0:	6818      	ldr	r0, [r3, #0]
 80198d2:	f107 0110 	add.w	r1, r7, #16
 80198d6:	2300      	movs	r3, #0
 80198d8:	683a      	ldr	r2, [r7, #0]
 80198da:	f7fe fbb9 	bl	8018050 <xQueueGenericSendFromISR>
 80198de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80198e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80198e2:	4618      	mov	r0, r3
 80198e4:	3728      	adds	r7, #40	; 0x28
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}
 80198ea:	bf00      	nop
 80198ec:	24002c48 	.word	0x24002c48

080198f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b088      	sub	sp, #32
 80198f4:	af02      	add	r7, sp, #8
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198fa:	4b22      	ldr	r3, [pc, #136]	; (8019984 <prvProcessExpiredTimer+0x94>)
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	68db      	ldr	r3, [r3, #12]
 8019900:	68db      	ldr	r3, [r3, #12]
 8019902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019904:	697b      	ldr	r3, [r7, #20]
 8019906:	3304      	adds	r3, #4
 8019908:	4618      	mov	r0, r3
 801990a:	f7fe f975 	bl	8017bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801990e:	697b      	ldr	r3, [r7, #20]
 8019910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019914:	f003 0304 	and.w	r3, r3, #4
 8019918:	2b00      	cmp	r3, #0
 801991a:	d022      	beq.n	8019962 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801991c:	697b      	ldr	r3, [r7, #20]
 801991e:	699a      	ldr	r2, [r3, #24]
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	18d1      	adds	r1, r2, r3
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	683a      	ldr	r2, [r7, #0]
 8019928:	6978      	ldr	r0, [r7, #20]
 801992a:	f000 f8d1 	bl	8019ad0 <prvInsertTimerInActiveList>
 801992e:	4603      	mov	r3, r0
 8019930:	2b00      	cmp	r3, #0
 8019932:	d01f      	beq.n	8019974 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019934:	2300      	movs	r3, #0
 8019936:	9300      	str	r3, [sp, #0]
 8019938:	2300      	movs	r3, #0
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	2100      	movs	r1, #0
 801993e:	6978      	ldr	r0, [r7, #20]
 8019940:	f7ff ff88 	bl	8019854 <xTimerGenericCommand>
 8019944:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019946:	693b      	ldr	r3, [r7, #16]
 8019948:	2b00      	cmp	r3, #0
 801994a:	d113      	bne.n	8019974 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019950:	f383 8811 	msr	BASEPRI, r3
 8019954:	f3bf 8f6f 	isb	sy
 8019958:	f3bf 8f4f 	dsb	sy
 801995c:	60fb      	str	r3, [r7, #12]
}
 801995e:	bf00      	nop
 8019960:	e7fe      	b.n	8019960 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019968:	f023 0301 	bic.w	r3, r3, #1
 801996c:	b2da      	uxtb	r2, r3
 801996e:	697b      	ldr	r3, [r7, #20]
 8019970:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	6a1b      	ldr	r3, [r3, #32]
 8019978:	6978      	ldr	r0, [r7, #20]
 801997a:	4798      	blx	r3
}
 801997c:	bf00      	nop
 801997e:	3718      	adds	r7, #24
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}
 8019984:	24002c40 	.word	0x24002c40

08019988 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b084      	sub	sp, #16
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019990:	f107 0308 	add.w	r3, r7, #8
 8019994:	4618      	mov	r0, r3
 8019996:	f000 f857 	bl	8019a48 <prvGetNextExpireTime>
 801999a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	4619      	mov	r1, r3
 80199a0:	68f8      	ldr	r0, [r7, #12]
 80199a2:	f000 f803 	bl	80199ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80199a6:	f000 f8d5 	bl	8019b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80199aa:	e7f1      	b.n	8019990 <prvTimerTask+0x8>

080199ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b084      	sub	sp, #16
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
 80199b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80199b6:	f7ff f977 	bl	8018ca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80199ba:	f107 0308 	add.w	r3, r7, #8
 80199be:	4618      	mov	r0, r3
 80199c0:	f000 f866 	bl	8019a90 <prvSampleTimeNow>
 80199c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80199c6:	68bb      	ldr	r3, [r7, #8]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d130      	bne.n	8019a2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d10a      	bne.n	80199e8 <prvProcessTimerOrBlockTask+0x3c>
 80199d2:	687a      	ldr	r2, [r7, #4]
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	429a      	cmp	r2, r3
 80199d8:	d806      	bhi.n	80199e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80199da:	f7ff f973 	bl	8018cc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80199de:	68f9      	ldr	r1, [r7, #12]
 80199e0:	6878      	ldr	r0, [r7, #4]
 80199e2:	f7ff ff85 	bl	80198f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80199e6:	e024      	b.n	8019a32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80199e8:	683b      	ldr	r3, [r7, #0]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d008      	beq.n	8019a00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80199ee:	4b13      	ldr	r3, [pc, #76]	; (8019a3c <prvProcessTimerOrBlockTask+0x90>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d101      	bne.n	80199fc <prvProcessTimerOrBlockTask+0x50>
 80199f8:	2301      	movs	r3, #1
 80199fa:	e000      	b.n	80199fe <prvProcessTimerOrBlockTask+0x52>
 80199fc:	2300      	movs	r3, #0
 80199fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019a00:	4b0f      	ldr	r3, [pc, #60]	; (8019a40 <prvProcessTimerOrBlockTask+0x94>)
 8019a02:	6818      	ldr	r0, [r3, #0]
 8019a04:	687a      	ldr	r2, [r7, #4]
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	1ad3      	subs	r3, r2, r3
 8019a0a:	683a      	ldr	r2, [r7, #0]
 8019a0c:	4619      	mov	r1, r3
 8019a0e:	f7fe fdd5 	bl	80185bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019a12:	f7ff f957 	bl	8018cc4 <xTaskResumeAll>
 8019a16:	4603      	mov	r3, r0
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d10a      	bne.n	8019a32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019a1c:	4b09      	ldr	r3, [pc, #36]	; (8019a44 <prvProcessTimerOrBlockTask+0x98>)
 8019a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a22:	601a      	str	r2, [r3, #0]
 8019a24:	f3bf 8f4f 	dsb	sy
 8019a28:	f3bf 8f6f 	isb	sy
}
 8019a2c:	e001      	b.n	8019a32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019a2e:	f7ff f949 	bl	8018cc4 <xTaskResumeAll>
}
 8019a32:	bf00      	nop
 8019a34:	3710      	adds	r7, #16
 8019a36:	46bd      	mov	sp, r7
 8019a38:	bd80      	pop	{r7, pc}
 8019a3a:	bf00      	nop
 8019a3c:	24002c44 	.word	0x24002c44
 8019a40:	24002c48 	.word	0x24002c48
 8019a44:	e000ed04 	.word	0xe000ed04

08019a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b085      	sub	sp, #20
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019a50:	4b0e      	ldr	r3, [pc, #56]	; (8019a8c <prvGetNextExpireTime+0x44>)
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d101      	bne.n	8019a5e <prvGetNextExpireTime+0x16>
 8019a5a:	2201      	movs	r2, #1
 8019a5c:	e000      	b.n	8019a60 <prvGetNextExpireTime+0x18>
 8019a5e:	2200      	movs	r2, #0
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d105      	bne.n	8019a78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019a6c:	4b07      	ldr	r3, [pc, #28]	; (8019a8c <prvGetNextExpireTime+0x44>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	68db      	ldr	r3, [r3, #12]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	60fb      	str	r3, [r7, #12]
 8019a76:	e001      	b.n	8019a7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019a78:	2300      	movs	r3, #0
 8019a7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
}
 8019a7e:	4618      	mov	r0, r3
 8019a80:	3714      	adds	r7, #20
 8019a82:	46bd      	mov	sp, r7
 8019a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a88:	4770      	bx	lr
 8019a8a:	bf00      	nop
 8019a8c:	24002c40 	.word	0x24002c40

08019a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b084      	sub	sp, #16
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019a98:	f7ff f9b2 	bl	8018e00 <xTaskGetTickCount>
 8019a9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019a9e:	4b0b      	ldr	r3, [pc, #44]	; (8019acc <prvSampleTimeNow+0x3c>)
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	68fa      	ldr	r2, [r7, #12]
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	d205      	bcs.n	8019ab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019aa8:	f000 f936 	bl	8019d18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	2201      	movs	r2, #1
 8019ab0:	601a      	str	r2, [r3, #0]
 8019ab2:	e002      	b.n	8019aba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019aba:	4a04      	ldr	r2, [pc, #16]	; (8019acc <prvSampleTimeNow+0x3c>)
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019ac0:	68fb      	ldr	r3, [r7, #12]
}
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	3710      	adds	r7, #16
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}
 8019aca:	bf00      	nop
 8019acc:	24002c50 	.word	0x24002c50

08019ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b086      	sub	sp, #24
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	60f8      	str	r0, [r7, #12]
 8019ad8:	60b9      	str	r1, [r7, #8]
 8019ada:	607a      	str	r2, [r7, #4]
 8019adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019ade:	2300      	movs	r3, #0
 8019ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	68ba      	ldr	r2, [r7, #8]
 8019ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	68fa      	ldr	r2, [r7, #12]
 8019aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019aee:	68ba      	ldr	r2, [r7, #8]
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	429a      	cmp	r2, r3
 8019af4:	d812      	bhi.n	8019b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019af6:	687a      	ldr	r2, [r7, #4]
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	1ad2      	subs	r2, r2, r3
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	699b      	ldr	r3, [r3, #24]
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d302      	bcc.n	8019b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019b04:	2301      	movs	r3, #1
 8019b06:	617b      	str	r3, [r7, #20]
 8019b08:	e01b      	b.n	8019b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019b0a:	4b10      	ldr	r3, [pc, #64]	; (8019b4c <prvInsertTimerInActiveList+0x7c>)
 8019b0c:	681a      	ldr	r2, [r3, #0]
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	3304      	adds	r3, #4
 8019b12:	4619      	mov	r1, r3
 8019b14:	4610      	mov	r0, r2
 8019b16:	f7fe f836 	bl	8017b86 <vListInsert>
 8019b1a:	e012      	b.n	8019b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019b1c:	687a      	ldr	r2, [r7, #4]
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	429a      	cmp	r2, r3
 8019b22:	d206      	bcs.n	8019b32 <prvInsertTimerInActiveList+0x62>
 8019b24:	68ba      	ldr	r2, [r7, #8]
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d302      	bcc.n	8019b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	617b      	str	r3, [r7, #20]
 8019b30:	e007      	b.n	8019b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019b32:	4b07      	ldr	r3, [pc, #28]	; (8019b50 <prvInsertTimerInActiveList+0x80>)
 8019b34:	681a      	ldr	r2, [r3, #0]
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	3304      	adds	r3, #4
 8019b3a:	4619      	mov	r1, r3
 8019b3c:	4610      	mov	r0, r2
 8019b3e:	f7fe f822 	bl	8017b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019b42:	697b      	ldr	r3, [r7, #20]
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	3718      	adds	r7, #24
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}
 8019b4c:	24002c44 	.word	0x24002c44
 8019b50:	24002c40 	.word	0x24002c40

08019b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019b54:	b580      	push	{r7, lr}
 8019b56:	b08e      	sub	sp, #56	; 0x38
 8019b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019b5a:	e0ca      	b.n	8019cf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	da18      	bge.n	8019b94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019b62:	1d3b      	adds	r3, r7, #4
 8019b64:	3304      	adds	r3, #4
 8019b66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d10a      	bne.n	8019b84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b72:	f383 8811 	msr	BASEPRI, r3
 8019b76:	f3bf 8f6f 	isb	sy
 8019b7a:	f3bf 8f4f 	dsb	sy
 8019b7e:	61fb      	str	r3, [r7, #28]
}
 8019b80:	bf00      	nop
 8019b82:	e7fe      	b.n	8019b82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b8a:	6850      	ldr	r0, [r2, #4]
 8019b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b8e:	6892      	ldr	r2, [r2, #8]
 8019b90:	4611      	mov	r1, r2
 8019b92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	f2c0 80aa 	blt.w	8019cf0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba2:	695b      	ldr	r3, [r3, #20]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d004      	beq.n	8019bb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019baa:	3304      	adds	r3, #4
 8019bac:	4618      	mov	r0, r3
 8019bae:	f7fe f823 	bl	8017bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019bb2:	463b      	mov	r3, r7
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7ff ff6b 	bl	8019a90 <prvSampleTimeNow>
 8019bba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	2b09      	cmp	r3, #9
 8019bc0:	f200 8097 	bhi.w	8019cf2 <prvProcessReceivedCommands+0x19e>
 8019bc4:	a201      	add	r2, pc, #4	; (adr r2, 8019bcc <prvProcessReceivedCommands+0x78>)
 8019bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bca:	bf00      	nop
 8019bcc:	08019bf5 	.word	0x08019bf5
 8019bd0:	08019bf5 	.word	0x08019bf5
 8019bd4:	08019bf5 	.word	0x08019bf5
 8019bd8:	08019c69 	.word	0x08019c69
 8019bdc:	08019c7d 	.word	0x08019c7d
 8019be0:	08019cc7 	.word	0x08019cc7
 8019be4:	08019bf5 	.word	0x08019bf5
 8019be8:	08019bf5 	.word	0x08019bf5
 8019bec:	08019c69 	.word	0x08019c69
 8019bf0:	08019c7d 	.word	0x08019c7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bfa:	f043 0301 	orr.w	r3, r3, #1
 8019bfe:	b2da      	uxtb	r2, r3
 8019c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019c06:	68ba      	ldr	r2, [r7, #8]
 8019c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0a:	699b      	ldr	r3, [r3, #24]
 8019c0c:	18d1      	adds	r1, r2, r3
 8019c0e:	68bb      	ldr	r3, [r7, #8]
 8019c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c14:	f7ff ff5c 	bl	8019ad0 <prvInsertTimerInActiveList>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d069      	beq.n	8019cf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c20:	6a1b      	ldr	r3, [r3, #32]
 8019c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c2c:	f003 0304 	and.w	r3, r3, #4
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d05e      	beq.n	8019cf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019c34:	68ba      	ldr	r2, [r7, #8]
 8019c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c38:	699b      	ldr	r3, [r3, #24]
 8019c3a:	441a      	add	r2, r3
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	9300      	str	r3, [sp, #0]
 8019c40:	2300      	movs	r3, #0
 8019c42:	2100      	movs	r1, #0
 8019c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c46:	f7ff fe05 	bl	8019854 <xTimerGenericCommand>
 8019c4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019c4c:	6a3b      	ldr	r3, [r7, #32]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d14f      	bne.n	8019cf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c56:	f383 8811 	msr	BASEPRI, r3
 8019c5a:	f3bf 8f6f 	isb	sy
 8019c5e:	f3bf 8f4f 	dsb	sy
 8019c62:	61bb      	str	r3, [r7, #24]
}
 8019c64:	bf00      	nop
 8019c66:	e7fe      	b.n	8019c66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c6e:	f023 0301 	bic.w	r3, r3, #1
 8019c72:	b2da      	uxtb	r2, r3
 8019c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019c7a:	e03a      	b.n	8019cf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c82:	f043 0301 	orr.w	r3, r3, #1
 8019c86:	b2da      	uxtb	r2, r3
 8019c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019c8e:	68ba      	ldr	r2, [r7, #8]
 8019c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c96:	699b      	ldr	r3, [r3, #24]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d10a      	bne.n	8019cb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ca0:	f383 8811 	msr	BASEPRI, r3
 8019ca4:	f3bf 8f6f 	isb	sy
 8019ca8:	f3bf 8f4f 	dsb	sy
 8019cac:	617b      	str	r3, [r7, #20]
}
 8019cae:	bf00      	nop
 8019cb0:	e7fe      	b.n	8019cb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb4:	699a      	ldr	r2, [r3, #24]
 8019cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb8:	18d1      	adds	r1, r2, r3
 8019cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cc0:	f7ff ff06 	bl	8019ad0 <prvInsertTimerInActiveList>
					break;
 8019cc4:	e015      	b.n	8019cf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ccc:	f003 0302 	and.w	r3, r3, #2
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d103      	bne.n	8019cdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cd6:	f000 fbfb 	bl	801a4d0 <vPortFree>
 8019cda:	e00a      	b.n	8019cf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ce2:	f023 0301 	bic.w	r3, r3, #1
 8019ce6:	b2da      	uxtb	r2, r3
 8019ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019cee:	e000      	b.n	8019cf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019cf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019cf2:	4b08      	ldr	r3, [pc, #32]	; (8019d14 <prvProcessReceivedCommands+0x1c0>)
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	1d39      	adds	r1, r7, #4
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f7fe fa44 	bl	8018188 <xQueueReceive>
 8019d00:	4603      	mov	r3, r0
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	f47f af2a 	bne.w	8019b5c <prvProcessReceivedCommands+0x8>
	}
}
 8019d08:	bf00      	nop
 8019d0a:	bf00      	nop
 8019d0c:	3730      	adds	r7, #48	; 0x30
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	bd80      	pop	{r7, pc}
 8019d12:	bf00      	nop
 8019d14:	24002c48 	.word	0x24002c48

08019d18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b088      	sub	sp, #32
 8019d1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019d1e:	e048      	b.n	8019db2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019d20:	4b2d      	ldr	r3, [pc, #180]	; (8019dd8 <prvSwitchTimerLists+0xc0>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	68db      	ldr	r3, [r3, #12]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d2a:	4b2b      	ldr	r3, [pc, #172]	; (8019dd8 <prvSwitchTimerLists+0xc0>)
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	68db      	ldr	r3, [r3, #12]
 8019d30:	68db      	ldr	r3, [r3, #12]
 8019d32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	3304      	adds	r3, #4
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f7fd ff5d 	bl	8017bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	6a1b      	ldr	r3, [r3, #32]
 8019d42:	68f8      	ldr	r0, [r7, #12]
 8019d44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d4c:	f003 0304 	and.w	r3, r3, #4
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d02e      	beq.n	8019db2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	699b      	ldr	r3, [r3, #24]
 8019d58:	693a      	ldr	r2, [r7, #16]
 8019d5a:	4413      	add	r3, r2
 8019d5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019d5e:	68ba      	ldr	r2, [r7, #8]
 8019d60:	693b      	ldr	r3, [r7, #16]
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d90e      	bls.n	8019d84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	68ba      	ldr	r2, [r7, #8]
 8019d6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	68fa      	ldr	r2, [r7, #12]
 8019d70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d72:	4b19      	ldr	r3, [pc, #100]	; (8019dd8 <prvSwitchTimerLists+0xc0>)
 8019d74:	681a      	ldr	r2, [r3, #0]
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	3304      	adds	r3, #4
 8019d7a:	4619      	mov	r1, r3
 8019d7c:	4610      	mov	r0, r2
 8019d7e:	f7fd ff02 	bl	8017b86 <vListInsert>
 8019d82:	e016      	b.n	8019db2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d84:	2300      	movs	r3, #0
 8019d86:	9300      	str	r3, [sp, #0]
 8019d88:	2300      	movs	r3, #0
 8019d8a:	693a      	ldr	r2, [r7, #16]
 8019d8c:	2100      	movs	r1, #0
 8019d8e:	68f8      	ldr	r0, [r7, #12]
 8019d90:	f7ff fd60 	bl	8019854 <xTimerGenericCommand>
 8019d94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d10a      	bne.n	8019db2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019da0:	f383 8811 	msr	BASEPRI, r3
 8019da4:	f3bf 8f6f 	isb	sy
 8019da8:	f3bf 8f4f 	dsb	sy
 8019dac:	603b      	str	r3, [r7, #0]
}
 8019dae:	bf00      	nop
 8019db0:	e7fe      	b.n	8019db0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019db2:	4b09      	ldr	r3, [pc, #36]	; (8019dd8 <prvSwitchTimerLists+0xc0>)
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d1b1      	bne.n	8019d20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019dbc:	4b06      	ldr	r3, [pc, #24]	; (8019dd8 <prvSwitchTimerLists+0xc0>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019dc2:	4b06      	ldr	r3, [pc, #24]	; (8019ddc <prvSwitchTimerLists+0xc4>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	4a04      	ldr	r2, [pc, #16]	; (8019dd8 <prvSwitchTimerLists+0xc0>)
 8019dc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019dca:	4a04      	ldr	r2, [pc, #16]	; (8019ddc <prvSwitchTimerLists+0xc4>)
 8019dcc:	697b      	ldr	r3, [r7, #20]
 8019dce:	6013      	str	r3, [r2, #0]
}
 8019dd0:	bf00      	nop
 8019dd2:	3718      	adds	r7, #24
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}
 8019dd8:	24002c40 	.word	0x24002c40
 8019ddc:	24002c44 	.word	0x24002c44

08019de0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b082      	sub	sp, #8
 8019de4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019de6:	f000 f985 	bl	801a0f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019dea:	4b15      	ldr	r3, [pc, #84]	; (8019e40 <prvCheckForValidListAndQueue+0x60>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d120      	bne.n	8019e34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019df2:	4814      	ldr	r0, [pc, #80]	; (8019e44 <prvCheckForValidListAndQueue+0x64>)
 8019df4:	f7fd fe76 	bl	8017ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019df8:	4813      	ldr	r0, [pc, #76]	; (8019e48 <prvCheckForValidListAndQueue+0x68>)
 8019dfa:	f7fd fe73 	bl	8017ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019dfe:	4b13      	ldr	r3, [pc, #76]	; (8019e4c <prvCheckForValidListAndQueue+0x6c>)
 8019e00:	4a10      	ldr	r2, [pc, #64]	; (8019e44 <prvCheckForValidListAndQueue+0x64>)
 8019e02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019e04:	4b12      	ldr	r3, [pc, #72]	; (8019e50 <prvCheckForValidListAndQueue+0x70>)
 8019e06:	4a10      	ldr	r2, [pc, #64]	; (8019e48 <prvCheckForValidListAndQueue+0x68>)
 8019e08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	9300      	str	r3, [sp, #0]
 8019e0e:	4b11      	ldr	r3, [pc, #68]	; (8019e54 <prvCheckForValidListAndQueue+0x74>)
 8019e10:	4a11      	ldr	r2, [pc, #68]	; (8019e58 <prvCheckForValidListAndQueue+0x78>)
 8019e12:	2110      	movs	r1, #16
 8019e14:	200a      	movs	r0, #10
 8019e16:	f7fd ff81 	bl	8017d1c <xQueueGenericCreateStatic>
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	4a08      	ldr	r2, [pc, #32]	; (8019e40 <prvCheckForValidListAndQueue+0x60>)
 8019e1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019e20:	4b07      	ldr	r3, [pc, #28]	; (8019e40 <prvCheckForValidListAndQueue+0x60>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d005      	beq.n	8019e34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019e28:	4b05      	ldr	r3, [pc, #20]	; (8019e40 <prvCheckForValidListAndQueue+0x60>)
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	490b      	ldr	r1, [pc, #44]	; (8019e5c <prvCheckForValidListAndQueue+0x7c>)
 8019e2e:	4618      	mov	r0, r3
 8019e30:	f7fe fb9a 	bl	8018568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019e34:	f000 f98e 	bl	801a154 <vPortExitCritical>
}
 8019e38:	bf00      	nop
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}
 8019e3e:	bf00      	nop
 8019e40:	24002c48 	.word	0x24002c48
 8019e44:	24002c18 	.word	0x24002c18
 8019e48:	24002c2c 	.word	0x24002c2c
 8019e4c:	24002c40 	.word	0x24002c40
 8019e50:	24002c44 	.word	0x24002c44
 8019e54:	24002cf4 	.word	0x24002cf4
 8019e58:	24002c54 	.word	0x24002c54
 8019e5c:	0801b400 	.word	0x0801b400

08019e60 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b08a      	sub	sp, #40	; 0x28
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	60f8      	str	r0, [r7, #12]
 8019e68:	60b9      	str	r1, [r7, #8]
 8019e6a:	607a      	str	r2, [r7, #4]
 8019e6c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019e6e:	f06f 0301 	mvn.w	r3, #1
 8019e72:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019e78:	68bb      	ldr	r3, [r7, #8]
 8019e7a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019e80:	4b06      	ldr	r3, [pc, #24]	; (8019e9c <xTimerPendFunctionCallFromISR+0x3c>)
 8019e82:	6818      	ldr	r0, [r3, #0]
 8019e84:	f107 0114 	add.w	r1, r7, #20
 8019e88:	2300      	movs	r3, #0
 8019e8a:	683a      	ldr	r2, [r7, #0]
 8019e8c:	f7fe f8e0 	bl	8018050 <xQueueGenericSendFromISR>
 8019e90:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019e94:	4618      	mov	r0, r3
 8019e96:	3728      	adds	r7, #40	; 0x28
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}
 8019e9c:	24002c48 	.word	0x24002c48

08019ea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019ea0:	b480      	push	{r7}
 8019ea2:	b085      	sub	sp, #20
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	60f8      	str	r0, [r7, #12]
 8019ea8:	60b9      	str	r1, [r7, #8]
 8019eaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	3b04      	subs	r3, #4
 8019eb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	3b04      	subs	r3, #4
 8019ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	f023 0201 	bic.w	r2, r3, #1
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	3b04      	subs	r3, #4
 8019ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019ed0:	4a0c      	ldr	r2, [pc, #48]	; (8019f04 <pxPortInitialiseStack+0x64>)
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	3b14      	subs	r3, #20
 8019eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019edc:	687a      	ldr	r2, [r7, #4]
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	3b04      	subs	r3, #4
 8019ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	f06f 0202 	mvn.w	r2, #2
 8019eee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	3b20      	subs	r3, #32
 8019ef4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019ef6:	68fb      	ldr	r3, [r7, #12]
}
 8019ef8:	4618      	mov	r0, r3
 8019efa:	3714      	adds	r7, #20
 8019efc:	46bd      	mov	sp, r7
 8019efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f02:	4770      	bx	lr
 8019f04:	08019f09 	.word	0x08019f09

08019f08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019f08:	b480      	push	{r7}
 8019f0a:	b085      	sub	sp, #20
 8019f0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019f12:	4b12      	ldr	r3, [pc, #72]	; (8019f5c <prvTaskExitError+0x54>)
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f1a:	d00a      	beq.n	8019f32 <prvTaskExitError+0x2a>
	__asm volatile
 8019f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f20:	f383 8811 	msr	BASEPRI, r3
 8019f24:	f3bf 8f6f 	isb	sy
 8019f28:	f3bf 8f4f 	dsb	sy
 8019f2c:	60fb      	str	r3, [r7, #12]
}
 8019f2e:	bf00      	nop
 8019f30:	e7fe      	b.n	8019f30 <prvTaskExitError+0x28>
	__asm volatile
 8019f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f36:	f383 8811 	msr	BASEPRI, r3
 8019f3a:	f3bf 8f6f 	isb	sy
 8019f3e:	f3bf 8f4f 	dsb	sy
 8019f42:	60bb      	str	r3, [r7, #8]
}
 8019f44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019f46:	bf00      	nop
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d0fc      	beq.n	8019f48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019f4e:	bf00      	nop
 8019f50:	bf00      	nop
 8019f52:	3714      	adds	r7, #20
 8019f54:	46bd      	mov	sp, r7
 8019f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5a:	4770      	bx	lr
 8019f5c:	240000d4 	.word	0x240000d4

08019f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019f60:	4b07      	ldr	r3, [pc, #28]	; (8019f80 <pxCurrentTCBConst2>)
 8019f62:	6819      	ldr	r1, [r3, #0]
 8019f64:	6808      	ldr	r0, [r1, #0]
 8019f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f6a:	f380 8809 	msr	PSP, r0
 8019f6e:	f3bf 8f6f 	isb	sy
 8019f72:	f04f 0000 	mov.w	r0, #0
 8019f76:	f380 8811 	msr	BASEPRI, r0
 8019f7a:	4770      	bx	lr
 8019f7c:	f3af 8000 	nop.w

08019f80 <pxCurrentTCBConst2>:
 8019f80:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019f84:	bf00      	nop
 8019f86:	bf00      	nop

08019f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019f88:	4808      	ldr	r0, [pc, #32]	; (8019fac <prvPortStartFirstTask+0x24>)
 8019f8a:	6800      	ldr	r0, [r0, #0]
 8019f8c:	6800      	ldr	r0, [r0, #0]
 8019f8e:	f380 8808 	msr	MSP, r0
 8019f92:	f04f 0000 	mov.w	r0, #0
 8019f96:	f380 8814 	msr	CONTROL, r0
 8019f9a:	b662      	cpsie	i
 8019f9c:	b661      	cpsie	f
 8019f9e:	f3bf 8f4f 	dsb	sy
 8019fa2:	f3bf 8f6f 	isb	sy
 8019fa6:	df00      	svc	0
 8019fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019faa:	bf00      	nop
 8019fac:	e000ed08 	.word	0xe000ed08

08019fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b086      	sub	sp, #24
 8019fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019fb6:	4b46      	ldr	r3, [pc, #280]	; (801a0d0 <xPortStartScheduler+0x120>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	4a46      	ldr	r2, [pc, #280]	; (801a0d4 <xPortStartScheduler+0x124>)
 8019fbc:	4293      	cmp	r3, r2
 8019fbe:	d10a      	bne.n	8019fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8019fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fc4:	f383 8811 	msr	BASEPRI, r3
 8019fc8:	f3bf 8f6f 	isb	sy
 8019fcc:	f3bf 8f4f 	dsb	sy
 8019fd0:	613b      	str	r3, [r7, #16]
}
 8019fd2:	bf00      	nop
 8019fd4:	e7fe      	b.n	8019fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019fd6:	4b3e      	ldr	r3, [pc, #248]	; (801a0d0 <xPortStartScheduler+0x120>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	4a3f      	ldr	r2, [pc, #252]	; (801a0d8 <xPortStartScheduler+0x128>)
 8019fdc:	4293      	cmp	r3, r2
 8019fde:	d10a      	bne.n	8019ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8019fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fe4:	f383 8811 	msr	BASEPRI, r3
 8019fe8:	f3bf 8f6f 	isb	sy
 8019fec:	f3bf 8f4f 	dsb	sy
 8019ff0:	60fb      	str	r3, [r7, #12]
}
 8019ff2:	bf00      	nop
 8019ff4:	e7fe      	b.n	8019ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019ff6:	4b39      	ldr	r3, [pc, #228]	; (801a0dc <xPortStartScheduler+0x12c>)
 8019ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019ffa:	697b      	ldr	r3, [r7, #20]
 8019ffc:	781b      	ldrb	r3, [r3, #0]
 8019ffe:	b2db      	uxtb	r3, r3
 801a000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a002:	697b      	ldr	r3, [r7, #20]
 801a004:	22ff      	movs	r2, #255	; 0xff
 801a006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a008:	697b      	ldr	r3, [r7, #20]
 801a00a:	781b      	ldrb	r3, [r3, #0]
 801a00c:	b2db      	uxtb	r3, r3
 801a00e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a010:	78fb      	ldrb	r3, [r7, #3]
 801a012:	b2db      	uxtb	r3, r3
 801a014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a018:	b2da      	uxtb	r2, r3
 801a01a:	4b31      	ldr	r3, [pc, #196]	; (801a0e0 <xPortStartScheduler+0x130>)
 801a01c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a01e:	4b31      	ldr	r3, [pc, #196]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a020:	2207      	movs	r2, #7
 801a022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a024:	e009      	b.n	801a03a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a026:	4b2f      	ldr	r3, [pc, #188]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	3b01      	subs	r3, #1
 801a02c:	4a2d      	ldr	r2, [pc, #180]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a02e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a030:	78fb      	ldrb	r3, [r7, #3]
 801a032:	b2db      	uxtb	r3, r3
 801a034:	005b      	lsls	r3, r3, #1
 801a036:	b2db      	uxtb	r3, r3
 801a038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a03a:	78fb      	ldrb	r3, [r7, #3]
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a042:	2b80      	cmp	r3, #128	; 0x80
 801a044:	d0ef      	beq.n	801a026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a046:	4b27      	ldr	r3, [pc, #156]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	f1c3 0307 	rsb	r3, r3, #7
 801a04e:	2b04      	cmp	r3, #4
 801a050:	d00a      	beq.n	801a068 <xPortStartScheduler+0xb8>
	__asm volatile
 801a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a056:	f383 8811 	msr	BASEPRI, r3
 801a05a:	f3bf 8f6f 	isb	sy
 801a05e:	f3bf 8f4f 	dsb	sy
 801a062:	60bb      	str	r3, [r7, #8]
}
 801a064:	bf00      	nop
 801a066:	e7fe      	b.n	801a066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a068:	4b1e      	ldr	r3, [pc, #120]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	021b      	lsls	r3, r3, #8
 801a06e:	4a1d      	ldr	r2, [pc, #116]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a072:	4b1c      	ldr	r3, [pc, #112]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a07a:	4a1a      	ldr	r2, [pc, #104]	; (801a0e4 <xPortStartScheduler+0x134>)
 801a07c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	b2da      	uxtb	r2, r3
 801a082:	697b      	ldr	r3, [r7, #20]
 801a084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a086:	4b18      	ldr	r3, [pc, #96]	; (801a0e8 <xPortStartScheduler+0x138>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	4a17      	ldr	r2, [pc, #92]	; (801a0e8 <xPortStartScheduler+0x138>)
 801a08c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a092:	4b15      	ldr	r3, [pc, #84]	; (801a0e8 <xPortStartScheduler+0x138>)
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	4a14      	ldr	r2, [pc, #80]	; (801a0e8 <xPortStartScheduler+0x138>)
 801a098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a09c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a09e:	f000 f8dd 	bl	801a25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a0a2:	4b12      	ldr	r3, [pc, #72]	; (801a0ec <xPortStartScheduler+0x13c>)
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a0a8:	f000 f8fc 	bl	801a2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a0ac:	4b10      	ldr	r3, [pc, #64]	; (801a0f0 <xPortStartScheduler+0x140>)
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	4a0f      	ldr	r2, [pc, #60]	; (801a0f0 <xPortStartScheduler+0x140>)
 801a0b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a0b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a0b8:	f7ff ff66 	bl	8019f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a0bc:	f7fe ff72 	bl	8018fa4 <vTaskSwitchContext>
	prvTaskExitError();
 801a0c0:	f7ff ff22 	bl	8019f08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a0c4:	2300      	movs	r3, #0
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	3718      	adds	r7, #24
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	bd80      	pop	{r7, pc}
 801a0ce:	bf00      	nop
 801a0d0:	e000ed00 	.word	0xe000ed00
 801a0d4:	410fc271 	.word	0x410fc271
 801a0d8:	410fc270 	.word	0x410fc270
 801a0dc:	e000e400 	.word	0xe000e400
 801a0e0:	24002d44 	.word	0x24002d44
 801a0e4:	24002d48 	.word	0x24002d48
 801a0e8:	e000ed20 	.word	0xe000ed20
 801a0ec:	240000d4 	.word	0x240000d4
 801a0f0:	e000ef34 	.word	0xe000ef34

0801a0f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a0f4:	b480      	push	{r7}
 801a0f6:	b083      	sub	sp, #12
 801a0f8:	af00      	add	r7, sp, #0
	__asm volatile
 801a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0fe:	f383 8811 	msr	BASEPRI, r3
 801a102:	f3bf 8f6f 	isb	sy
 801a106:	f3bf 8f4f 	dsb	sy
 801a10a:	607b      	str	r3, [r7, #4]
}
 801a10c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a10e:	4b0f      	ldr	r3, [pc, #60]	; (801a14c <vPortEnterCritical+0x58>)
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	3301      	adds	r3, #1
 801a114:	4a0d      	ldr	r2, [pc, #52]	; (801a14c <vPortEnterCritical+0x58>)
 801a116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a118:	4b0c      	ldr	r3, [pc, #48]	; (801a14c <vPortEnterCritical+0x58>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	2b01      	cmp	r3, #1
 801a11e:	d10f      	bne.n	801a140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a120:	4b0b      	ldr	r3, [pc, #44]	; (801a150 <vPortEnterCritical+0x5c>)
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	b2db      	uxtb	r3, r3
 801a126:	2b00      	cmp	r3, #0
 801a128:	d00a      	beq.n	801a140 <vPortEnterCritical+0x4c>
	__asm volatile
 801a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a12e:	f383 8811 	msr	BASEPRI, r3
 801a132:	f3bf 8f6f 	isb	sy
 801a136:	f3bf 8f4f 	dsb	sy
 801a13a:	603b      	str	r3, [r7, #0]
}
 801a13c:	bf00      	nop
 801a13e:	e7fe      	b.n	801a13e <vPortEnterCritical+0x4a>
	}
}
 801a140:	bf00      	nop
 801a142:	370c      	adds	r7, #12
 801a144:	46bd      	mov	sp, r7
 801a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14a:	4770      	bx	lr
 801a14c:	240000d4 	.word	0x240000d4
 801a150:	e000ed04 	.word	0xe000ed04

0801a154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a154:	b480      	push	{r7}
 801a156:	b083      	sub	sp, #12
 801a158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a15a:	4b12      	ldr	r3, [pc, #72]	; (801a1a4 <vPortExitCritical+0x50>)
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d10a      	bne.n	801a178 <vPortExitCritical+0x24>
	__asm volatile
 801a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a166:	f383 8811 	msr	BASEPRI, r3
 801a16a:	f3bf 8f6f 	isb	sy
 801a16e:	f3bf 8f4f 	dsb	sy
 801a172:	607b      	str	r3, [r7, #4]
}
 801a174:	bf00      	nop
 801a176:	e7fe      	b.n	801a176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a178:	4b0a      	ldr	r3, [pc, #40]	; (801a1a4 <vPortExitCritical+0x50>)
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	3b01      	subs	r3, #1
 801a17e:	4a09      	ldr	r2, [pc, #36]	; (801a1a4 <vPortExitCritical+0x50>)
 801a180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a182:	4b08      	ldr	r3, [pc, #32]	; (801a1a4 <vPortExitCritical+0x50>)
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d105      	bne.n	801a196 <vPortExitCritical+0x42>
 801a18a:	2300      	movs	r3, #0
 801a18c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	f383 8811 	msr	BASEPRI, r3
}
 801a194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a196:	bf00      	nop
 801a198:	370c      	adds	r7, #12
 801a19a:	46bd      	mov	sp, r7
 801a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a0:	4770      	bx	lr
 801a1a2:	bf00      	nop
 801a1a4:	240000d4 	.word	0x240000d4
	...

0801a1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a1b0:	f3ef 8009 	mrs	r0, PSP
 801a1b4:	f3bf 8f6f 	isb	sy
 801a1b8:	4b15      	ldr	r3, [pc, #84]	; (801a210 <pxCurrentTCBConst>)
 801a1ba:	681a      	ldr	r2, [r3, #0]
 801a1bc:	f01e 0f10 	tst.w	lr, #16
 801a1c0:	bf08      	it	eq
 801a1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1ca:	6010      	str	r0, [r2, #0]
 801a1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a1d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a1d4:	f380 8811 	msr	BASEPRI, r0
 801a1d8:	f3bf 8f4f 	dsb	sy
 801a1dc:	f3bf 8f6f 	isb	sy
 801a1e0:	f7fe fee0 	bl	8018fa4 <vTaskSwitchContext>
 801a1e4:	f04f 0000 	mov.w	r0, #0
 801a1e8:	f380 8811 	msr	BASEPRI, r0
 801a1ec:	bc09      	pop	{r0, r3}
 801a1ee:	6819      	ldr	r1, [r3, #0]
 801a1f0:	6808      	ldr	r0, [r1, #0]
 801a1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f6:	f01e 0f10 	tst.w	lr, #16
 801a1fa:	bf08      	it	eq
 801a1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a200:	f380 8809 	msr	PSP, r0
 801a204:	f3bf 8f6f 	isb	sy
 801a208:	4770      	bx	lr
 801a20a:	bf00      	nop
 801a20c:	f3af 8000 	nop.w

0801a210 <pxCurrentTCBConst>:
 801a210:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a214:	bf00      	nop
 801a216:	bf00      	nop

0801a218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a218:	b580      	push	{r7, lr}
 801a21a:	b082      	sub	sp, #8
 801a21c:	af00      	add	r7, sp, #0
	__asm volatile
 801a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a222:	f383 8811 	msr	BASEPRI, r3
 801a226:	f3bf 8f6f 	isb	sy
 801a22a:	f3bf 8f4f 	dsb	sy
 801a22e:	607b      	str	r3, [r7, #4]
}
 801a230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a232:	f7fe fdf5 	bl	8018e20 <xTaskIncrementTick>
 801a236:	4603      	mov	r3, r0
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d003      	beq.n	801a244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a23c:	4b06      	ldr	r3, [pc, #24]	; (801a258 <xPortSysTickHandler+0x40>)
 801a23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a242:	601a      	str	r2, [r3, #0]
 801a244:	2300      	movs	r3, #0
 801a246:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	f383 8811 	msr	BASEPRI, r3
}
 801a24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a250:	bf00      	nop
 801a252:	3708      	adds	r7, #8
 801a254:	46bd      	mov	sp, r7
 801a256:	bd80      	pop	{r7, pc}
 801a258:	e000ed04 	.word	0xe000ed04

0801a25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a25c:	b480      	push	{r7}
 801a25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a260:	4b0b      	ldr	r3, [pc, #44]	; (801a290 <vPortSetupTimerInterrupt+0x34>)
 801a262:	2200      	movs	r2, #0
 801a264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a266:	4b0b      	ldr	r3, [pc, #44]	; (801a294 <vPortSetupTimerInterrupt+0x38>)
 801a268:	2200      	movs	r2, #0
 801a26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a26c:	4b0a      	ldr	r3, [pc, #40]	; (801a298 <vPortSetupTimerInterrupt+0x3c>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	4a0a      	ldr	r2, [pc, #40]	; (801a29c <vPortSetupTimerInterrupt+0x40>)
 801a272:	fba2 2303 	umull	r2, r3, r2, r3
 801a276:	099b      	lsrs	r3, r3, #6
 801a278:	4a09      	ldr	r2, [pc, #36]	; (801a2a0 <vPortSetupTimerInterrupt+0x44>)
 801a27a:	3b01      	subs	r3, #1
 801a27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a27e:	4b04      	ldr	r3, [pc, #16]	; (801a290 <vPortSetupTimerInterrupt+0x34>)
 801a280:	2207      	movs	r2, #7
 801a282:	601a      	str	r2, [r3, #0]
}
 801a284:	bf00      	nop
 801a286:	46bd      	mov	sp, r7
 801a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28c:	4770      	bx	lr
 801a28e:	bf00      	nop
 801a290:	e000e010 	.word	0xe000e010
 801a294:	e000e018 	.word	0xe000e018
 801a298:	240000c4 	.word	0x240000c4
 801a29c:	10624dd3 	.word	0x10624dd3
 801a2a0:	e000e014 	.word	0xe000e014

0801a2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a2b4 <vPortEnableVFP+0x10>
 801a2a8:	6801      	ldr	r1, [r0, #0]
 801a2aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a2ae:	6001      	str	r1, [r0, #0]
 801a2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a2b2:	bf00      	nop
 801a2b4:	e000ed88 	.word	0xe000ed88

0801a2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a2b8:	b480      	push	{r7}
 801a2ba:	b085      	sub	sp, #20
 801a2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a2be:	f3ef 8305 	mrs	r3, IPSR
 801a2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	2b0f      	cmp	r3, #15
 801a2c8:	d914      	bls.n	801a2f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a2ca:	4a17      	ldr	r2, [pc, #92]	; (801a328 <vPortValidateInterruptPriority+0x70>)
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	4413      	add	r3, r2
 801a2d0:	781b      	ldrb	r3, [r3, #0]
 801a2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a2d4:	4b15      	ldr	r3, [pc, #84]	; (801a32c <vPortValidateInterruptPriority+0x74>)
 801a2d6:	781b      	ldrb	r3, [r3, #0]
 801a2d8:	7afa      	ldrb	r2, [r7, #11]
 801a2da:	429a      	cmp	r2, r3
 801a2dc:	d20a      	bcs.n	801a2f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2e2:	f383 8811 	msr	BASEPRI, r3
 801a2e6:	f3bf 8f6f 	isb	sy
 801a2ea:	f3bf 8f4f 	dsb	sy
 801a2ee:	607b      	str	r3, [r7, #4]
}
 801a2f0:	bf00      	nop
 801a2f2:	e7fe      	b.n	801a2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a2f4:	4b0e      	ldr	r3, [pc, #56]	; (801a330 <vPortValidateInterruptPriority+0x78>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a2fc:	4b0d      	ldr	r3, [pc, #52]	; (801a334 <vPortValidateInterruptPriority+0x7c>)
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	429a      	cmp	r2, r3
 801a302:	d90a      	bls.n	801a31a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a308:	f383 8811 	msr	BASEPRI, r3
 801a30c:	f3bf 8f6f 	isb	sy
 801a310:	f3bf 8f4f 	dsb	sy
 801a314:	603b      	str	r3, [r7, #0]
}
 801a316:	bf00      	nop
 801a318:	e7fe      	b.n	801a318 <vPortValidateInterruptPriority+0x60>
	}
 801a31a:	bf00      	nop
 801a31c:	3714      	adds	r7, #20
 801a31e:	46bd      	mov	sp, r7
 801a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a324:	4770      	bx	lr
 801a326:	bf00      	nop
 801a328:	e000e3f0 	.word	0xe000e3f0
 801a32c:	24002d44 	.word	0x24002d44
 801a330:	e000ed0c 	.word	0xe000ed0c
 801a334:	24002d48 	.word	0x24002d48

0801a338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b08a      	sub	sp, #40	; 0x28
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a340:	2300      	movs	r3, #0
 801a342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a344:	f7fe fcb0 	bl	8018ca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a348:	4b5b      	ldr	r3, [pc, #364]	; (801a4b8 <pvPortMalloc+0x180>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d101      	bne.n	801a354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a350:	f000 f920 	bl	801a594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a354:	4b59      	ldr	r3, [pc, #356]	; (801a4bc <pvPortMalloc+0x184>)
 801a356:	681a      	ldr	r2, [r3, #0]
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	4013      	ands	r3, r2
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	f040 8093 	bne.w	801a488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d01d      	beq.n	801a3a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a368:	2208      	movs	r2, #8
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	4413      	add	r3, r2
 801a36e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f003 0307 	and.w	r3, r3, #7
 801a376:	2b00      	cmp	r3, #0
 801a378:	d014      	beq.n	801a3a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	f023 0307 	bic.w	r3, r3, #7
 801a380:	3308      	adds	r3, #8
 801a382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f003 0307 	and.w	r3, r3, #7
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d00a      	beq.n	801a3a4 <pvPortMalloc+0x6c>
	__asm volatile
 801a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a392:	f383 8811 	msr	BASEPRI, r3
 801a396:	f3bf 8f6f 	isb	sy
 801a39a:	f3bf 8f4f 	dsb	sy
 801a39e:	617b      	str	r3, [r7, #20]
}
 801a3a0:	bf00      	nop
 801a3a2:	e7fe      	b.n	801a3a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d06e      	beq.n	801a488 <pvPortMalloc+0x150>
 801a3aa:	4b45      	ldr	r3, [pc, #276]	; (801a4c0 <pvPortMalloc+0x188>)
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	687a      	ldr	r2, [r7, #4]
 801a3b0:	429a      	cmp	r2, r3
 801a3b2:	d869      	bhi.n	801a488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a3b4:	4b43      	ldr	r3, [pc, #268]	; (801a4c4 <pvPortMalloc+0x18c>)
 801a3b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a3b8:	4b42      	ldr	r3, [pc, #264]	; (801a4c4 <pvPortMalloc+0x18c>)
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a3be:	e004      	b.n	801a3ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3cc:	685b      	ldr	r3, [r3, #4]
 801a3ce:	687a      	ldr	r2, [r7, #4]
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	d903      	bls.n	801a3dc <pvPortMalloc+0xa4>
 801a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d1f1      	bne.n	801a3c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a3dc:	4b36      	ldr	r3, [pc, #216]	; (801a4b8 <pvPortMalloc+0x180>)
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	d050      	beq.n	801a488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a3e6:	6a3b      	ldr	r3, [r7, #32]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	2208      	movs	r2, #8
 801a3ec:	4413      	add	r3, r2
 801a3ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f2:	681a      	ldr	r2, [r3, #0]
 801a3f4:	6a3b      	ldr	r3, [r7, #32]
 801a3f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3fa:	685a      	ldr	r2, [r3, #4]
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	1ad2      	subs	r2, r2, r3
 801a400:	2308      	movs	r3, #8
 801a402:	005b      	lsls	r3, r3, #1
 801a404:	429a      	cmp	r2, r3
 801a406:	d91f      	bls.n	801a448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	4413      	add	r3, r2
 801a40e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a410:	69bb      	ldr	r3, [r7, #24]
 801a412:	f003 0307 	and.w	r3, r3, #7
 801a416:	2b00      	cmp	r3, #0
 801a418:	d00a      	beq.n	801a430 <pvPortMalloc+0xf8>
	__asm volatile
 801a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a41e:	f383 8811 	msr	BASEPRI, r3
 801a422:	f3bf 8f6f 	isb	sy
 801a426:	f3bf 8f4f 	dsb	sy
 801a42a:	613b      	str	r3, [r7, #16]
}
 801a42c:	bf00      	nop
 801a42e:	e7fe      	b.n	801a42e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a432:	685a      	ldr	r2, [r3, #4]
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	1ad2      	subs	r2, r2, r3
 801a438:	69bb      	ldr	r3, [r7, #24]
 801a43a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a43e:	687a      	ldr	r2, [r7, #4]
 801a440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a442:	69b8      	ldr	r0, [r7, #24]
 801a444:	f000 f908 	bl	801a658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a448:	4b1d      	ldr	r3, [pc, #116]	; (801a4c0 <pvPortMalloc+0x188>)
 801a44a:	681a      	ldr	r2, [r3, #0]
 801a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44e:	685b      	ldr	r3, [r3, #4]
 801a450:	1ad3      	subs	r3, r2, r3
 801a452:	4a1b      	ldr	r2, [pc, #108]	; (801a4c0 <pvPortMalloc+0x188>)
 801a454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a456:	4b1a      	ldr	r3, [pc, #104]	; (801a4c0 <pvPortMalloc+0x188>)
 801a458:	681a      	ldr	r2, [r3, #0]
 801a45a:	4b1b      	ldr	r3, [pc, #108]	; (801a4c8 <pvPortMalloc+0x190>)
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	429a      	cmp	r2, r3
 801a460:	d203      	bcs.n	801a46a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a462:	4b17      	ldr	r3, [pc, #92]	; (801a4c0 <pvPortMalloc+0x188>)
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	4a18      	ldr	r2, [pc, #96]	; (801a4c8 <pvPortMalloc+0x190>)
 801a468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a46c:	685a      	ldr	r2, [r3, #4]
 801a46e:	4b13      	ldr	r3, [pc, #76]	; (801a4bc <pvPortMalloc+0x184>)
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	431a      	orrs	r2, r3
 801a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a47a:	2200      	movs	r2, #0
 801a47c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a47e:	4b13      	ldr	r3, [pc, #76]	; (801a4cc <pvPortMalloc+0x194>)
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	3301      	adds	r3, #1
 801a484:	4a11      	ldr	r2, [pc, #68]	; (801a4cc <pvPortMalloc+0x194>)
 801a486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a488:	f7fe fc1c 	bl	8018cc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a48c:	69fb      	ldr	r3, [r7, #28]
 801a48e:	f003 0307 	and.w	r3, r3, #7
 801a492:	2b00      	cmp	r3, #0
 801a494:	d00a      	beq.n	801a4ac <pvPortMalloc+0x174>
	__asm volatile
 801a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a49a:	f383 8811 	msr	BASEPRI, r3
 801a49e:	f3bf 8f6f 	isb	sy
 801a4a2:	f3bf 8f4f 	dsb	sy
 801a4a6:	60fb      	str	r3, [r7, #12]
}
 801a4a8:	bf00      	nop
 801a4aa:	e7fe      	b.n	801a4aa <pvPortMalloc+0x172>
	return pvReturn;
 801a4ac:	69fb      	ldr	r3, [r7, #28]
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	3728      	adds	r7, #40	; 0x28
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}
 801a4b6:	bf00      	nop
 801a4b8:	24006954 	.word	0x24006954
 801a4bc:	24006968 	.word	0x24006968
 801a4c0:	24006958 	.word	0x24006958
 801a4c4:	2400694c 	.word	0x2400694c
 801a4c8:	2400695c 	.word	0x2400695c
 801a4cc:	24006960 	.word	0x24006960

0801a4d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b086      	sub	sp, #24
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d04d      	beq.n	801a57e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a4e2:	2308      	movs	r3, #8
 801a4e4:	425b      	negs	r3, r3
 801a4e6:	697a      	ldr	r2, [r7, #20]
 801a4e8:	4413      	add	r3, r2
 801a4ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a4ec:	697b      	ldr	r3, [r7, #20]
 801a4ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a4f0:	693b      	ldr	r3, [r7, #16]
 801a4f2:	685a      	ldr	r2, [r3, #4]
 801a4f4:	4b24      	ldr	r3, [pc, #144]	; (801a588 <vPortFree+0xb8>)
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	4013      	ands	r3, r2
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d10a      	bne.n	801a514 <vPortFree+0x44>
	__asm volatile
 801a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a502:	f383 8811 	msr	BASEPRI, r3
 801a506:	f3bf 8f6f 	isb	sy
 801a50a:	f3bf 8f4f 	dsb	sy
 801a50e:	60fb      	str	r3, [r7, #12]
}
 801a510:	bf00      	nop
 801a512:	e7fe      	b.n	801a512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a514:	693b      	ldr	r3, [r7, #16]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d00a      	beq.n	801a532 <vPortFree+0x62>
	__asm volatile
 801a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a520:	f383 8811 	msr	BASEPRI, r3
 801a524:	f3bf 8f6f 	isb	sy
 801a528:	f3bf 8f4f 	dsb	sy
 801a52c:	60bb      	str	r3, [r7, #8]
}
 801a52e:	bf00      	nop
 801a530:	e7fe      	b.n	801a530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a532:	693b      	ldr	r3, [r7, #16]
 801a534:	685a      	ldr	r2, [r3, #4]
 801a536:	4b14      	ldr	r3, [pc, #80]	; (801a588 <vPortFree+0xb8>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	4013      	ands	r3, r2
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d01e      	beq.n	801a57e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a540:	693b      	ldr	r3, [r7, #16]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d11a      	bne.n	801a57e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a548:	693b      	ldr	r3, [r7, #16]
 801a54a:	685a      	ldr	r2, [r3, #4]
 801a54c:	4b0e      	ldr	r3, [pc, #56]	; (801a588 <vPortFree+0xb8>)
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	43db      	mvns	r3, r3
 801a552:	401a      	ands	r2, r3
 801a554:	693b      	ldr	r3, [r7, #16]
 801a556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a558:	f7fe fba6 	bl	8018ca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a55c:	693b      	ldr	r3, [r7, #16]
 801a55e:	685a      	ldr	r2, [r3, #4]
 801a560:	4b0a      	ldr	r3, [pc, #40]	; (801a58c <vPortFree+0xbc>)
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	4413      	add	r3, r2
 801a566:	4a09      	ldr	r2, [pc, #36]	; (801a58c <vPortFree+0xbc>)
 801a568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a56a:	6938      	ldr	r0, [r7, #16]
 801a56c:	f000 f874 	bl	801a658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a570:	4b07      	ldr	r3, [pc, #28]	; (801a590 <vPortFree+0xc0>)
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	3301      	adds	r3, #1
 801a576:	4a06      	ldr	r2, [pc, #24]	; (801a590 <vPortFree+0xc0>)
 801a578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a57a:	f7fe fba3 	bl	8018cc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a57e:	bf00      	nop
 801a580:	3718      	adds	r7, #24
 801a582:	46bd      	mov	sp, r7
 801a584:	bd80      	pop	{r7, pc}
 801a586:	bf00      	nop
 801a588:	24006968 	.word	0x24006968
 801a58c:	24006958 	.word	0x24006958
 801a590:	24006964 	.word	0x24006964

0801a594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a594:	b480      	push	{r7}
 801a596:	b085      	sub	sp, #20
 801a598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a59a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a59e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a5a0:	4b27      	ldr	r3, [pc, #156]	; (801a640 <prvHeapInit+0xac>)
 801a5a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	f003 0307 	and.w	r3, r3, #7
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d00c      	beq.n	801a5c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	3307      	adds	r3, #7
 801a5b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	f023 0307 	bic.w	r3, r3, #7
 801a5ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a5bc:	68ba      	ldr	r2, [r7, #8]
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	1ad3      	subs	r3, r2, r3
 801a5c2:	4a1f      	ldr	r2, [pc, #124]	; (801a640 <prvHeapInit+0xac>)
 801a5c4:	4413      	add	r3, r2
 801a5c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a5cc:	4a1d      	ldr	r2, [pc, #116]	; (801a644 <prvHeapInit+0xb0>)
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a5d2:	4b1c      	ldr	r3, [pc, #112]	; (801a644 <prvHeapInit+0xb0>)
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	68ba      	ldr	r2, [r7, #8]
 801a5dc:	4413      	add	r3, r2
 801a5de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a5e0:	2208      	movs	r2, #8
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	1a9b      	subs	r3, r3, r2
 801a5e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	f023 0307 	bic.w	r3, r3, #7
 801a5ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	4a15      	ldr	r2, [pc, #84]	; (801a648 <prvHeapInit+0xb4>)
 801a5f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a5f6:	4b14      	ldr	r3, [pc, #80]	; (801a648 <prvHeapInit+0xb4>)
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a5fe:	4b12      	ldr	r3, [pc, #72]	; (801a648 <prvHeapInit+0xb4>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	2200      	movs	r2, #0
 801a604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	68fa      	ldr	r2, [r7, #12]
 801a60e:	1ad2      	subs	r2, r2, r3
 801a610:	683b      	ldr	r3, [r7, #0]
 801a612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a614:	4b0c      	ldr	r3, [pc, #48]	; (801a648 <prvHeapInit+0xb4>)
 801a616:	681a      	ldr	r2, [r3, #0]
 801a618:	683b      	ldr	r3, [r7, #0]
 801a61a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a61c:	683b      	ldr	r3, [r7, #0]
 801a61e:	685b      	ldr	r3, [r3, #4]
 801a620:	4a0a      	ldr	r2, [pc, #40]	; (801a64c <prvHeapInit+0xb8>)
 801a622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	685b      	ldr	r3, [r3, #4]
 801a628:	4a09      	ldr	r2, [pc, #36]	; (801a650 <prvHeapInit+0xbc>)
 801a62a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a62c:	4b09      	ldr	r3, [pc, #36]	; (801a654 <prvHeapInit+0xc0>)
 801a62e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a632:	601a      	str	r2, [r3, #0]
}
 801a634:	bf00      	nop
 801a636:	3714      	adds	r7, #20
 801a638:	46bd      	mov	sp, r7
 801a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a63e:	4770      	bx	lr
 801a640:	24002d4c 	.word	0x24002d4c
 801a644:	2400694c 	.word	0x2400694c
 801a648:	24006954 	.word	0x24006954
 801a64c:	2400695c 	.word	0x2400695c
 801a650:	24006958 	.word	0x24006958
 801a654:	24006968 	.word	0x24006968

0801a658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a658:	b480      	push	{r7}
 801a65a:	b085      	sub	sp, #20
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a660:	4b28      	ldr	r3, [pc, #160]	; (801a704 <prvInsertBlockIntoFreeList+0xac>)
 801a662:	60fb      	str	r3, [r7, #12]
 801a664:	e002      	b.n	801a66c <prvInsertBlockIntoFreeList+0x14>
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	60fb      	str	r3, [r7, #12]
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	687a      	ldr	r2, [r7, #4]
 801a672:	429a      	cmp	r2, r3
 801a674:	d8f7      	bhi.n	801a666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	685b      	ldr	r3, [r3, #4]
 801a67e:	68ba      	ldr	r2, [r7, #8]
 801a680:	4413      	add	r3, r2
 801a682:	687a      	ldr	r2, [r7, #4]
 801a684:	429a      	cmp	r2, r3
 801a686:	d108      	bne.n	801a69a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	685a      	ldr	r2, [r3, #4]
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	685b      	ldr	r3, [r3, #4]
 801a690:	441a      	add	r2, r3
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	68ba      	ldr	r2, [r7, #8]
 801a6a4:	441a      	add	r2, r3
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	429a      	cmp	r2, r3
 801a6ac:	d118      	bne.n	801a6e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	681a      	ldr	r2, [r3, #0]
 801a6b2:	4b15      	ldr	r3, [pc, #84]	; (801a708 <prvInsertBlockIntoFreeList+0xb0>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	429a      	cmp	r2, r3
 801a6b8:	d00d      	beq.n	801a6d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	685a      	ldr	r2, [r3, #4]
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	685b      	ldr	r3, [r3, #4]
 801a6c4:	441a      	add	r2, r3
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	681a      	ldr	r2, [r3, #0]
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	601a      	str	r2, [r3, #0]
 801a6d4:	e008      	b.n	801a6e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a6d6:	4b0c      	ldr	r3, [pc, #48]	; (801a708 <prvInsertBlockIntoFreeList+0xb0>)
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	601a      	str	r2, [r3, #0]
 801a6de:	e003      	b.n	801a6e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	681a      	ldr	r2, [r3, #0]
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a6e8:	68fa      	ldr	r2, [r7, #12]
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	429a      	cmp	r2, r3
 801a6ee:	d002      	beq.n	801a6f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	687a      	ldr	r2, [r7, #4]
 801a6f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a6f6:	bf00      	nop
 801a6f8:	3714      	adds	r7, #20
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a700:	4770      	bx	lr
 801a702:	bf00      	nop
 801a704:	2400694c 	.word	0x2400694c
 801a708:	24006954 	.word	0x24006954

0801a70c <__errno>:
 801a70c:	4b01      	ldr	r3, [pc, #4]	; (801a714 <__errno+0x8>)
 801a70e:	6818      	ldr	r0, [r3, #0]
 801a710:	4770      	bx	lr
 801a712:	bf00      	nop
 801a714:	240000d8 	.word	0x240000d8

0801a718 <__libc_init_array>:
 801a718:	b570      	push	{r4, r5, r6, lr}
 801a71a:	4d0d      	ldr	r5, [pc, #52]	; (801a750 <__libc_init_array+0x38>)
 801a71c:	4c0d      	ldr	r4, [pc, #52]	; (801a754 <__libc_init_array+0x3c>)
 801a71e:	1b64      	subs	r4, r4, r5
 801a720:	10a4      	asrs	r4, r4, #2
 801a722:	2600      	movs	r6, #0
 801a724:	42a6      	cmp	r6, r4
 801a726:	d109      	bne.n	801a73c <__libc_init_array+0x24>
 801a728:	4d0b      	ldr	r5, [pc, #44]	; (801a758 <__libc_init_array+0x40>)
 801a72a:	4c0c      	ldr	r4, [pc, #48]	; (801a75c <__libc_init_array+0x44>)
 801a72c:	f000 fd2c 	bl	801b188 <_init>
 801a730:	1b64      	subs	r4, r4, r5
 801a732:	10a4      	asrs	r4, r4, #2
 801a734:	2600      	movs	r6, #0
 801a736:	42a6      	cmp	r6, r4
 801a738:	d105      	bne.n	801a746 <__libc_init_array+0x2e>
 801a73a:	bd70      	pop	{r4, r5, r6, pc}
 801a73c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a740:	4798      	blx	r3
 801a742:	3601      	adds	r6, #1
 801a744:	e7ee      	b.n	801a724 <__libc_init_array+0xc>
 801a746:	f855 3b04 	ldr.w	r3, [r5], #4
 801a74a:	4798      	blx	r3
 801a74c:	3601      	adds	r6, #1
 801a74e:	e7f2      	b.n	801a736 <__libc_init_array+0x1e>
 801a750:	0801b640 	.word	0x0801b640
 801a754:	0801b640 	.word	0x0801b640
 801a758:	0801b640 	.word	0x0801b640
 801a75c:	0801b644 	.word	0x0801b644

0801a760 <memcpy>:
 801a760:	440a      	add	r2, r1
 801a762:	4291      	cmp	r1, r2
 801a764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a768:	d100      	bne.n	801a76c <memcpy+0xc>
 801a76a:	4770      	bx	lr
 801a76c:	b510      	push	{r4, lr}
 801a76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a772:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a776:	4291      	cmp	r1, r2
 801a778:	d1f9      	bne.n	801a76e <memcpy+0xe>
 801a77a:	bd10      	pop	{r4, pc}

0801a77c <memset>:
 801a77c:	4402      	add	r2, r0
 801a77e:	4603      	mov	r3, r0
 801a780:	4293      	cmp	r3, r2
 801a782:	d100      	bne.n	801a786 <memset+0xa>
 801a784:	4770      	bx	lr
 801a786:	f803 1b01 	strb.w	r1, [r3], #1
 801a78a:	e7f9      	b.n	801a780 <memset+0x4>

0801a78c <_puts_r>:
 801a78c:	b570      	push	{r4, r5, r6, lr}
 801a78e:	460e      	mov	r6, r1
 801a790:	4605      	mov	r5, r0
 801a792:	b118      	cbz	r0, 801a79c <_puts_r+0x10>
 801a794:	6983      	ldr	r3, [r0, #24]
 801a796:	b90b      	cbnz	r3, 801a79c <_puts_r+0x10>
 801a798:	f000 fa48 	bl	801ac2c <__sinit>
 801a79c:	69ab      	ldr	r3, [r5, #24]
 801a79e:	68ac      	ldr	r4, [r5, #8]
 801a7a0:	b913      	cbnz	r3, 801a7a8 <_puts_r+0x1c>
 801a7a2:	4628      	mov	r0, r5
 801a7a4:	f000 fa42 	bl	801ac2c <__sinit>
 801a7a8:	4b2c      	ldr	r3, [pc, #176]	; (801a85c <_puts_r+0xd0>)
 801a7aa:	429c      	cmp	r4, r3
 801a7ac:	d120      	bne.n	801a7f0 <_puts_r+0x64>
 801a7ae:	686c      	ldr	r4, [r5, #4]
 801a7b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a7b2:	07db      	lsls	r3, r3, #31
 801a7b4:	d405      	bmi.n	801a7c2 <_puts_r+0x36>
 801a7b6:	89a3      	ldrh	r3, [r4, #12]
 801a7b8:	0598      	lsls	r0, r3, #22
 801a7ba:	d402      	bmi.n	801a7c2 <_puts_r+0x36>
 801a7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7be:	f000 fad3 	bl	801ad68 <__retarget_lock_acquire_recursive>
 801a7c2:	89a3      	ldrh	r3, [r4, #12]
 801a7c4:	0719      	lsls	r1, r3, #28
 801a7c6:	d51d      	bpl.n	801a804 <_puts_r+0x78>
 801a7c8:	6923      	ldr	r3, [r4, #16]
 801a7ca:	b1db      	cbz	r3, 801a804 <_puts_r+0x78>
 801a7cc:	3e01      	subs	r6, #1
 801a7ce:	68a3      	ldr	r3, [r4, #8]
 801a7d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a7d4:	3b01      	subs	r3, #1
 801a7d6:	60a3      	str	r3, [r4, #8]
 801a7d8:	bb39      	cbnz	r1, 801a82a <_puts_r+0x9e>
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	da38      	bge.n	801a850 <_puts_r+0xc4>
 801a7de:	4622      	mov	r2, r4
 801a7e0:	210a      	movs	r1, #10
 801a7e2:	4628      	mov	r0, r5
 801a7e4:	f000 f848 	bl	801a878 <__swbuf_r>
 801a7e8:	3001      	adds	r0, #1
 801a7ea:	d011      	beq.n	801a810 <_puts_r+0x84>
 801a7ec:	250a      	movs	r5, #10
 801a7ee:	e011      	b.n	801a814 <_puts_r+0x88>
 801a7f0:	4b1b      	ldr	r3, [pc, #108]	; (801a860 <_puts_r+0xd4>)
 801a7f2:	429c      	cmp	r4, r3
 801a7f4:	d101      	bne.n	801a7fa <_puts_r+0x6e>
 801a7f6:	68ac      	ldr	r4, [r5, #8]
 801a7f8:	e7da      	b.n	801a7b0 <_puts_r+0x24>
 801a7fa:	4b1a      	ldr	r3, [pc, #104]	; (801a864 <_puts_r+0xd8>)
 801a7fc:	429c      	cmp	r4, r3
 801a7fe:	bf08      	it	eq
 801a800:	68ec      	ldreq	r4, [r5, #12]
 801a802:	e7d5      	b.n	801a7b0 <_puts_r+0x24>
 801a804:	4621      	mov	r1, r4
 801a806:	4628      	mov	r0, r5
 801a808:	f000 f888 	bl	801a91c <__swsetup_r>
 801a80c:	2800      	cmp	r0, #0
 801a80e:	d0dd      	beq.n	801a7cc <_puts_r+0x40>
 801a810:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a816:	07da      	lsls	r2, r3, #31
 801a818:	d405      	bmi.n	801a826 <_puts_r+0x9a>
 801a81a:	89a3      	ldrh	r3, [r4, #12]
 801a81c:	059b      	lsls	r3, r3, #22
 801a81e:	d402      	bmi.n	801a826 <_puts_r+0x9a>
 801a820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a822:	f000 faa2 	bl	801ad6a <__retarget_lock_release_recursive>
 801a826:	4628      	mov	r0, r5
 801a828:	bd70      	pop	{r4, r5, r6, pc}
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	da04      	bge.n	801a838 <_puts_r+0xac>
 801a82e:	69a2      	ldr	r2, [r4, #24]
 801a830:	429a      	cmp	r2, r3
 801a832:	dc06      	bgt.n	801a842 <_puts_r+0xb6>
 801a834:	290a      	cmp	r1, #10
 801a836:	d004      	beq.n	801a842 <_puts_r+0xb6>
 801a838:	6823      	ldr	r3, [r4, #0]
 801a83a:	1c5a      	adds	r2, r3, #1
 801a83c:	6022      	str	r2, [r4, #0]
 801a83e:	7019      	strb	r1, [r3, #0]
 801a840:	e7c5      	b.n	801a7ce <_puts_r+0x42>
 801a842:	4622      	mov	r2, r4
 801a844:	4628      	mov	r0, r5
 801a846:	f000 f817 	bl	801a878 <__swbuf_r>
 801a84a:	3001      	adds	r0, #1
 801a84c:	d1bf      	bne.n	801a7ce <_puts_r+0x42>
 801a84e:	e7df      	b.n	801a810 <_puts_r+0x84>
 801a850:	6823      	ldr	r3, [r4, #0]
 801a852:	250a      	movs	r5, #10
 801a854:	1c5a      	adds	r2, r3, #1
 801a856:	6022      	str	r2, [r4, #0]
 801a858:	701d      	strb	r5, [r3, #0]
 801a85a:	e7db      	b.n	801a814 <_puts_r+0x88>
 801a85c:	0801b5f8 	.word	0x0801b5f8
 801a860:	0801b618 	.word	0x0801b618
 801a864:	0801b5d8 	.word	0x0801b5d8

0801a868 <puts>:
 801a868:	4b02      	ldr	r3, [pc, #8]	; (801a874 <puts+0xc>)
 801a86a:	4601      	mov	r1, r0
 801a86c:	6818      	ldr	r0, [r3, #0]
 801a86e:	f7ff bf8d 	b.w	801a78c <_puts_r>
 801a872:	bf00      	nop
 801a874:	240000d8 	.word	0x240000d8

0801a878 <__swbuf_r>:
 801a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a87a:	460e      	mov	r6, r1
 801a87c:	4614      	mov	r4, r2
 801a87e:	4605      	mov	r5, r0
 801a880:	b118      	cbz	r0, 801a88a <__swbuf_r+0x12>
 801a882:	6983      	ldr	r3, [r0, #24]
 801a884:	b90b      	cbnz	r3, 801a88a <__swbuf_r+0x12>
 801a886:	f000 f9d1 	bl	801ac2c <__sinit>
 801a88a:	4b21      	ldr	r3, [pc, #132]	; (801a910 <__swbuf_r+0x98>)
 801a88c:	429c      	cmp	r4, r3
 801a88e:	d12b      	bne.n	801a8e8 <__swbuf_r+0x70>
 801a890:	686c      	ldr	r4, [r5, #4]
 801a892:	69a3      	ldr	r3, [r4, #24]
 801a894:	60a3      	str	r3, [r4, #8]
 801a896:	89a3      	ldrh	r3, [r4, #12]
 801a898:	071a      	lsls	r2, r3, #28
 801a89a:	d52f      	bpl.n	801a8fc <__swbuf_r+0x84>
 801a89c:	6923      	ldr	r3, [r4, #16]
 801a89e:	b36b      	cbz	r3, 801a8fc <__swbuf_r+0x84>
 801a8a0:	6923      	ldr	r3, [r4, #16]
 801a8a2:	6820      	ldr	r0, [r4, #0]
 801a8a4:	1ac0      	subs	r0, r0, r3
 801a8a6:	6963      	ldr	r3, [r4, #20]
 801a8a8:	b2f6      	uxtb	r6, r6
 801a8aa:	4283      	cmp	r3, r0
 801a8ac:	4637      	mov	r7, r6
 801a8ae:	dc04      	bgt.n	801a8ba <__swbuf_r+0x42>
 801a8b0:	4621      	mov	r1, r4
 801a8b2:	4628      	mov	r0, r5
 801a8b4:	f000 f926 	bl	801ab04 <_fflush_r>
 801a8b8:	bb30      	cbnz	r0, 801a908 <__swbuf_r+0x90>
 801a8ba:	68a3      	ldr	r3, [r4, #8]
 801a8bc:	3b01      	subs	r3, #1
 801a8be:	60a3      	str	r3, [r4, #8]
 801a8c0:	6823      	ldr	r3, [r4, #0]
 801a8c2:	1c5a      	adds	r2, r3, #1
 801a8c4:	6022      	str	r2, [r4, #0]
 801a8c6:	701e      	strb	r6, [r3, #0]
 801a8c8:	6963      	ldr	r3, [r4, #20]
 801a8ca:	3001      	adds	r0, #1
 801a8cc:	4283      	cmp	r3, r0
 801a8ce:	d004      	beq.n	801a8da <__swbuf_r+0x62>
 801a8d0:	89a3      	ldrh	r3, [r4, #12]
 801a8d2:	07db      	lsls	r3, r3, #31
 801a8d4:	d506      	bpl.n	801a8e4 <__swbuf_r+0x6c>
 801a8d6:	2e0a      	cmp	r6, #10
 801a8d8:	d104      	bne.n	801a8e4 <__swbuf_r+0x6c>
 801a8da:	4621      	mov	r1, r4
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f000 f911 	bl	801ab04 <_fflush_r>
 801a8e2:	b988      	cbnz	r0, 801a908 <__swbuf_r+0x90>
 801a8e4:	4638      	mov	r0, r7
 801a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8e8:	4b0a      	ldr	r3, [pc, #40]	; (801a914 <__swbuf_r+0x9c>)
 801a8ea:	429c      	cmp	r4, r3
 801a8ec:	d101      	bne.n	801a8f2 <__swbuf_r+0x7a>
 801a8ee:	68ac      	ldr	r4, [r5, #8]
 801a8f0:	e7cf      	b.n	801a892 <__swbuf_r+0x1a>
 801a8f2:	4b09      	ldr	r3, [pc, #36]	; (801a918 <__swbuf_r+0xa0>)
 801a8f4:	429c      	cmp	r4, r3
 801a8f6:	bf08      	it	eq
 801a8f8:	68ec      	ldreq	r4, [r5, #12]
 801a8fa:	e7ca      	b.n	801a892 <__swbuf_r+0x1a>
 801a8fc:	4621      	mov	r1, r4
 801a8fe:	4628      	mov	r0, r5
 801a900:	f000 f80c 	bl	801a91c <__swsetup_r>
 801a904:	2800      	cmp	r0, #0
 801a906:	d0cb      	beq.n	801a8a0 <__swbuf_r+0x28>
 801a908:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a90c:	e7ea      	b.n	801a8e4 <__swbuf_r+0x6c>
 801a90e:	bf00      	nop
 801a910:	0801b5f8 	.word	0x0801b5f8
 801a914:	0801b618 	.word	0x0801b618
 801a918:	0801b5d8 	.word	0x0801b5d8

0801a91c <__swsetup_r>:
 801a91c:	4b32      	ldr	r3, [pc, #200]	; (801a9e8 <__swsetup_r+0xcc>)
 801a91e:	b570      	push	{r4, r5, r6, lr}
 801a920:	681d      	ldr	r5, [r3, #0]
 801a922:	4606      	mov	r6, r0
 801a924:	460c      	mov	r4, r1
 801a926:	b125      	cbz	r5, 801a932 <__swsetup_r+0x16>
 801a928:	69ab      	ldr	r3, [r5, #24]
 801a92a:	b913      	cbnz	r3, 801a932 <__swsetup_r+0x16>
 801a92c:	4628      	mov	r0, r5
 801a92e:	f000 f97d 	bl	801ac2c <__sinit>
 801a932:	4b2e      	ldr	r3, [pc, #184]	; (801a9ec <__swsetup_r+0xd0>)
 801a934:	429c      	cmp	r4, r3
 801a936:	d10f      	bne.n	801a958 <__swsetup_r+0x3c>
 801a938:	686c      	ldr	r4, [r5, #4]
 801a93a:	89a3      	ldrh	r3, [r4, #12]
 801a93c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a940:	0719      	lsls	r1, r3, #28
 801a942:	d42c      	bmi.n	801a99e <__swsetup_r+0x82>
 801a944:	06dd      	lsls	r5, r3, #27
 801a946:	d411      	bmi.n	801a96c <__swsetup_r+0x50>
 801a948:	2309      	movs	r3, #9
 801a94a:	6033      	str	r3, [r6, #0]
 801a94c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a950:	81a3      	strh	r3, [r4, #12]
 801a952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a956:	e03e      	b.n	801a9d6 <__swsetup_r+0xba>
 801a958:	4b25      	ldr	r3, [pc, #148]	; (801a9f0 <__swsetup_r+0xd4>)
 801a95a:	429c      	cmp	r4, r3
 801a95c:	d101      	bne.n	801a962 <__swsetup_r+0x46>
 801a95e:	68ac      	ldr	r4, [r5, #8]
 801a960:	e7eb      	b.n	801a93a <__swsetup_r+0x1e>
 801a962:	4b24      	ldr	r3, [pc, #144]	; (801a9f4 <__swsetup_r+0xd8>)
 801a964:	429c      	cmp	r4, r3
 801a966:	bf08      	it	eq
 801a968:	68ec      	ldreq	r4, [r5, #12]
 801a96a:	e7e6      	b.n	801a93a <__swsetup_r+0x1e>
 801a96c:	0758      	lsls	r0, r3, #29
 801a96e:	d512      	bpl.n	801a996 <__swsetup_r+0x7a>
 801a970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a972:	b141      	cbz	r1, 801a986 <__swsetup_r+0x6a>
 801a974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a978:	4299      	cmp	r1, r3
 801a97a:	d002      	beq.n	801a982 <__swsetup_r+0x66>
 801a97c:	4630      	mov	r0, r6
 801a97e:	f000 fa5b 	bl	801ae38 <_free_r>
 801a982:	2300      	movs	r3, #0
 801a984:	6363      	str	r3, [r4, #52]	; 0x34
 801a986:	89a3      	ldrh	r3, [r4, #12]
 801a988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a98c:	81a3      	strh	r3, [r4, #12]
 801a98e:	2300      	movs	r3, #0
 801a990:	6063      	str	r3, [r4, #4]
 801a992:	6923      	ldr	r3, [r4, #16]
 801a994:	6023      	str	r3, [r4, #0]
 801a996:	89a3      	ldrh	r3, [r4, #12]
 801a998:	f043 0308 	orr.w	r3, r3, #8
 801a99c:	81a3      	strh	r3, [r4, #12]
 801a99e:	6923      	ldr	r3, [r4, #16]
 801a9a0:	b94b      	cbnz	r3, 801a9b6 <__swsetup_r+0x9a>
 801a9a2:	89a3      	ldrh	r3, [r4, #12]
 801a9a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a9a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a9ac:	d003      	beq.n	801a9b6 <__swsetup_r+0x9a>
 801a9ae:	4621      	mov	r1, r4
 801a9b0:	4630      	mov	r0, r6
 801a9b2:	f000 fa01 	bl	801adb8 <__smakebuf_r>
 801a9b6:	89a0      	ldrh	r0, [r4, #12]
 801a9b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a9bc:	f010 0301 	ands.w	r3, r0, #1
 801a9c0:	d00a      	beq.n	801a9d8 <__swsetup_r+0xbc>
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	60a3      	str	r3, [r4, #8]
 801a9c6:	6963      	ldr	r3, [r4, #20]
 801a9c8:	425b      	negs	r3, r3
 801a9ca:	61a3      	str	r3, [r4, #24]
 801a9cc:	6923      	ldr	r3, [r4, #16]
 801a9ce:	b943      	cbnz	r3, 801a9e2 <__swsetup_r+0xc6>
 801a9d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a9d4:	d1ba      	bne.n	801a94c <__swsetup_r+0x30>
 801a9d6:	bd70      	pop	{r4, r5, r6, pc}
 801a9d8:	0781      	lsls	r1, r0, #30
 801a9da:	bf58      	it	pl
 801a9dc:	6963      	ldrpl	r3, [r4, #20]
 801a9de:	60a3      	str	r3, [r4, #8]
 801a9e0:	e7f4      	b.n	801a9cc <__swsetup_r+0xb0>
 801a9e2:	2000      	movs	r0, #0
 801a9e4:	e7f7      	b.n	801a9d6 <__swsetup_r+0xba>
 801a9e6:	bf00      	nop
 801a9e8:	240000d8 	.word	0x240000d8
 801a9ec:	0801b5f8 	.word	0x0801b5f8
 801a9f0:	0801b618 	.word	0x0801b618
 801a9f4:	0801b5d8 	.word	0x0801b5d8

0801a9f8 <__sflush_r>:
 801a9f8:	898a      	ldrh	r2, [r1, #12]
 801a9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9fe:	4605      	mov	r5, r0
 801aa00:	0710      	lsls	r0, r2, #28
 801aa02:	460c      	mov	r4, r1
 801aa04:	d458      	bmi.n	801aab8 <__sflush_r+0xc0>
 801aa06:	684b      	ldr	r3, [r1, #4]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	dc05      	bgt.n	801aa18 <__sflush_r+0x20>
 801aa0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	dc02      	bgt.n	801aa18 <__sflush_r+0x20>
 801aa12:	2000      	movs	r0, #0
 801aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa1a:	2e00      	cmp	r6, #0
 801aa1c:	d0f9      	beq.n	801aa12 <__sflush_r+0x1a>
 801aa1e:	2300      	movs	r3, #0
 801aa20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aa24:	682f      	ldr	r7, [r5, #0]
 801aa26:	602b      	str	r3, [r5, #0]
 801aa28:	d032      	beq.n	801aa90 <__sflush_r+0x98>
 801aa2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aa2c:	89a3      	ldrh	r3, [r4, #12]
 801aa2e:	075a      	lsls	r2, r3, #29
 801aa30:	d505      	bpl.n	801aa3e <__sflush_r+0x46>
 801aa32:	6863      	ldr	r3, [r4, #4]
 801aa34:	1ac0      	subs	r0, r0, r3
 801aa36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aa38:	b10b      	cbz	r3, 801aa3e <__sflush_r+0x46>
 801aa3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa3c:	1ac0      	subs	r0, r0, r3
 801aa3e:	2300      	movs	r3, #0
 801aa40:	4602      	mov	r2, r0
 801aa42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa44:	6a21      	ldr	r1, [r4, #32]
 801aa46:	4628      	mov	r0, r5
 801aa48:	47b0      	blx	r6
 801aa4a:	1c43      	adds	r3, r0, #1
 801aa4c:	89a3      	ldrh	r3, [r4, #12]
 801aa4e:	d106      	bne.n	801aa5e <__sflush_r+0x66>
 801aa50:	6829      	ldr	r1, [r5, #0]
 801aa52:	291d      	cmp	r1, #29
 801aa54:	d82c      	bhi.n	801aab0 <__sflush_r+0xb8>
 801aa56:	4a2a      	ldr	r2, [pc, #168]	; (801ab00 <__sflush_r+0x108>)
 801aa58:	40ca      	lsrs	r2, r1
 801aa5a:	07d6      	lsls	r6, r2, #31
 801aa5c:	d528      	bpl.n	801aab0 <__sflush_r+0xb8>
 801aa5e:	2200      	movs	r2, #0
 801aa60:	6062      	str	r2, [r4, #4]
 801aa62:	04d9      	lsls	r1, r3, #19
 801aa64:	6922      	ldr	r2, [r4, #16]
 801aa66:	6022      	str	r2, [r4, #0]
 801aa68:	d504      	bpl.n	801aa74 <__sflush_r+0x7c>
 801aa6a:	1c42      	adds	r2, r0, #1
 801aa6c:	d101      	bne.n	801aa72 <__sflush_r+0x7a>
 801aa6e:	682b      	ldr	r3, [r5, #0]
 801aa70:	b903      	cbnz	r3, 801aa74 <__sflush_r+0x7c>
 801aa72:	6560      	str	r0, [r4, #84]	; 0x54
 801aa74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa76:	602f      	str	r7, [r5, #0]
 801aa78:	2900      	cmp	r1, #0
 801aa7a:	d0ca      	beq.n	801aa12 <__sflush_r+0x1a>
 801aa7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa80:	4299      	cmp	r1, r3
 801aa82:	d002      	beq.n	801aa8a <__sflush_r+0x92>
 801aa84:	4628      	mov	r0, r5
 801aa86:	f000 f9d7 	bl	801ae38 <_free_r>
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	6360      	str	r0, [r4, #52]	; 0x34
 801aa8e:	e7c1      	b.n	801aa14 <__sflush_r+0x1c>
 801aa90:	6a21      	ldr	r1, [r4, #32]
 801aa92:	2301      	movs	r3, #1
 801aa94:	4628      	mov	r0, r5
 801aa96:	47b0      	blx	r6
 801aa98:	1c41      	adds	r1, r0, #1
 801aa9a:	d1c7      	bne.n	801aa2c <__sflush_r+0x34>
 801aa9c:	682b      	ldr	r3, [r5, #0]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d0c4      	beq.n	801aa2c <__sflush_r+0x34>
 801aaa2:	2b1d      	cmp	r3, #29
 801aaa4:	d001      	beq.n	801aaaa <__sflush_r+0xb2>
 801aaa6:	2b16      	cmp	r3, #22
 801aaa8:	d101      	bne.n	801aaae <__sflush_r+0xb6>
 801aaaa:	602f      	str	r7, [r5, #0]
 801aaac:	e7b1      	b.n	801aa12 <__sflush_r+0x1a>
 801aaae:	89a3      	ldrh	r3, [r4, #12]
 801aab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aab4:	81a3      	strh	r3, [r4, #12]
 801aab6:	e7ad      	b.n	801aa14 <__sflush_r+0x1c>
 801aab8:	690f      	ldr	r7, [r1, #16]
 801aaba:	2f00      	cmp	r7, #0
 801aabc:	d0a9      	beq.n	801aa12 <__sflush_r+0x1a>
 801aabe:	0793      	lsls	r3, r2, #30
 801aac0:	680e      	ldr	r6, [r1, #0]
 801aac2:	bf08      	it	eq
 801aac4:	694b      	ldreq	r3, [r1, #20]
 801aac6:	600f      	str	r7, [r1, #0]
 801aac8:	bf18      	it	ne
 801aaca:	2300      	movne	r3, #0
 801aacc:	eba6 0807 	sub.w	r8, r6, r7
 801aad0:	608b      	str	r3, [r1, #8]
 801aad2:	f1b8 0f00 	cmp.w	r8, #0
 801aad6:	dd9c      	ble.n	801aa12 <__sflush_r+0x1a>
 801aad8:	6a21      	ldr	r1, [r4, #32]
 801aada:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aadc:	4643      	mov	r3, r8
 801aade:	463a      	mov	r2, r7
 801aae0:	4628      	mov	r0, r5
 801aae2:	47b0      	blx	r6
 801aae4:	2800      	cmp	r0, #0
 801aae6:	dc06      	bgt.n	801aaf6 <__sflush_r+0xfe>
 801aae8:	89a3      	ldrh	r3, [r4, #12]
 801aaea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aaee:	81a3      	strh	r3, [r4, #12]
 801aaf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aaf4:	e78e      	b.n	801aa14 <__sflush_r+0x1c>
 801aaf6:	4407      	add	r7, r0
 801aaf8:	eba8 0800 	sub.w	r8, r8, r0
 801aafc:	e7e9      	b.n	801aad2 <__sflush_r+0xda>
 801aafe:	bf00      	nop
 801ab00:	20400001 	.word	0x20400001

0801ab04 <_fflush_r>:
 801ab04:	b538      	push	{r3, r4, r5, lr}
 801ab06:	690b      	ldr	r3, [r1, #16]
 801ab08:	4605      	mov	r5, r0
 801ab0a:	460c      	mov	r4, r1
 801ab0c:	b913      	cbnz	r3, 801ab14 <_fflush_r+0x10>
 801ab0e:	2500      	movs	r5, #0
 801ab10:	4628      	mov	r0, r5
 801ab12:	bd38      	pop	{r3, r4, r5, pc}
 801ab14:	b118      	cbz	r0, 801ab1e <_fflush_r+0x1a>
 801ab16:	6983      	ldr	r3, [r0, #24]
 801ab18:	b90b      	cbnz	r3, 801ab1e <_fflush_r+0x1a>
 801ab1a:	f000 f887 	bl	801ac2c <__sinit>
 801ab1e:	4b14      	ldr	r3, [pc, #80]	; (801ab70 <_fflush_r+0x6c>)
 801ab20:	429c      	cmp	r4, r3
 801ab22:	d11b      	bne.n	801ab5c <_fflush_r+0x58>
 801ab24:	686c      	ldr	r4, [r5, #4]
 801ab26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d0ef      	beq.n	801ab0e <_fflush_r+0xa>
 801ab2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ab30:	07d0      	lsls	r0, r2, #31
 801ab32:	d404      	bmi.n	801ab3e <_fflush_r+0x3a>
 801ab34:	0599      	lsls	r1, r3, #22
 801ab36:	d402      	bmi.n	801ab3e <_fflush_r+0x3a>
 801ab38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab3a:	f000 f915 	bl	801ad68 <__retarget_lock_acquire_recursive>
 801ab3e:	4628      	mov	r0, r5
 801ab40:	4621      	mov	r1, r4
 801ab42:	f7ff ff59 	bl	801a9f8 <__sflush_r>
 801ab46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab48:	07da      	lsls	r2, r3, #31
 801ab4a:	4605      	mov	r5, r0
 801ab4c:	d4e0      	bmi.n	801ab10 <_fflush_r+0xc>
 801ab4e:	89a3      	ldrh	r3, [r4, #12]
 801ab50:	059b      	lsls	r3, r3, #22
 801ab52:	d4dd      	bmi.n	801ab10 <_fflush_r+0xc>
 801ab54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab56:	f000 f908 	bl	801ad6a <__retarget_lock_release_recursive>
 801ab5a:	e7d9      	b.n	801ab10 <_fflush_r+0xc>
 801ab5c:	4b05      	ldr	r3, [pc, #20]	; (801ab74 <_fflush_r+0x70>)
 801ab5e:	429c      	cmp	r4, r3
 801ab60:	d101      	bne.n	801ab66 <_fflush_r+0x62>
 801ab62:	68ac      	ldr	r4, [r5, #8]
 801ab64:	e7df      	b.n	801ab26 <_fflush_r+0x22>
 801ab66:	4b04      	ldr	r3, [pc, #16]	; (801ab78 <_fflush_r+0x74>)
 801ab68:	429c      	cmp	r4, r3
 801ab6a:	bf08      	it	eq
 801ab6c:	68ec      	ldreq	r4, [r5, #12]
 801ab6e:	e7da      	b.n	801ab26 <_fflush_r+0x22>
 801ab70:	0801b5f8 	.word	0x0801b5f8
 801ab74:	0801b618 	.word	0x0801b618
 801ab78:	0801b5d8 	.word	0x0801b5d8

0801ab7c <std>:
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	b510      	push	{r4, lr}
 801ab80:	4604      	mov	r4, r0
 801ab82:	e9c0 3300 	strd	r3, r3, [r0]
 801ab86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab8a:	6083      	str	r3, [r0, #8]
 801ab8c:	8181      	strh	r1, [r0, #12]
 801ab8e:	6643      	str	r3, [r0, #100]	; 0x64
 801ab90:	81c2      	strh	r2, [r0, #14]
 801ab92:	6183      	str	r3, [r0, #24]
 801ab94:	4619      	mov	r1, r3
 801ab96:	2208      	movs	r2, #8
 801ab98:	305c      	adds	r0, #92	; 0x5c
 801ab9a:	f7ff fdef 	bl	801a77c <memset>
 801ab9e:	4b05      	ldr	r3, [pc, #20]	; (801abb4 <std+0x38>)
 801aba0:	6263      	str	r3, [r4, #36]	; 0x24
 801aba2:	4b05      	ldr	r3, [pc, #20]	; (801abb8 <std+0x3c>)
 801aba4:	62a3      	str	r3, [r4, #40]	; 0x28
 801aba6:	4b05      	ldr	r3, [pc, #20]	; (801abbc <std+0x40>)
 801aba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801abaa:	4b05      	ldr	r3, [pc, #20]	; (801abc0 <std+0x44>)
 801abac:	6224      	str	r4, [r4, #32]
 801abae:	6323      	str	r3, [r4, #48]	; 0x30
 801abb0:	bd10      	pop	{r4, pc}
 801abb2:	bf00      	nop
 801abb4:	0801b019 	.word	0x0801b019
 801abb8:	0801b03b 	.word	0x0801b03b
 801abbc:	0801b073 	.word	0x0801b073
 801abc0:	0801b097 	.word	0x0801b097

0801abc4 <_cleanup_r>:
 801abc4:	4901      	ldr	r1, [pc, #4]	; (801abcc <_cleanup_r+0x8>)
 801abc6:	f000 b8af 	b.w	801ad28 <_fwalk_reent>
 801abca:	bf00      	nop
 801abcc:	0801ab05 	.word	0x0801ab05

0801abd0 <__sfmoreglue>:
 801abd0:	b570      	push	{r4, r5, r6, lr}
 801abd2:	2268      	movs	r2, #104	; 0x68
 801abd4:	1e4d      	subs	r5, r1, #1
 801abd6:	4355      	muls	r5, r2
 801abd8:	460e      	mov	r6, r1
 801abda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801abde:	f000 f997 	bl	801af10 <_malloc_r>
 801abe2:	4604      	mov	r4, r0
 801abe4:	b140      	cbz	r0, 801abf8 <__sfmoreglue+0x28>
 801abe6:	2100      	movs	r1, #0
 801abe8:	e9c0 1600 	strd	r1, r6, [r0]
 801abec:	300c      	adds	r0, #12
 801abee:	60a0      	str	r0, [r4, #8]
 801abf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801abf4:	f7ff fdc2 	bl	801a77c <memset>
 801abf8:	4620      	mov	r0, r4
 801abfa:	bd70      	pop	{r4, r5, r6, pc}

0801abfc <__sfp_lock_acquire>:
 801abfc:	4801      	ldr	r0, [pc, #4]	; (801ac04 <__sfp_lock_acquire+0x8>)
 801abfe:	f000 b8b3 	b.w	801ad68 <__retarget_lock_acquire_recursive>
 801ac02:	bf00      	nop
 801ac04:	2400696d 	.word	0x2400696d

0801ac08 <__sfp_lock_release>:
 801ac08:	4801      	ldr	r0, [pc, #4]	; (801ac10 <__sfp_lock_release+0x8>)
 801ac0a:	f000 b8ae 	b.w	801ad6a <__retarget_lock_release_recursive>
 801ac0e:	bf00      	nop
 801ac10:	2400696d 	.word	0x2400696d

0801ac14 <__sinit_lock_acquire>:
 801ac14:	4801      	ldr	r0, [pc, #4]	; (801ac1c <__sinit_lock_acquire+0x8>)
 801ac16:	f000 b8a7 	b.w	801ad68 <__retarget_lock_acquire_recursive>
 801ac1a:	bf00      	nop
 801ac1c:	2400696e 	.word	0x2400696e

0801ac20 <__sinit_lock_release>:
 801ac20:	4801      	ldr	r0, [pc, #4]	; (801ac28 <__sinit_lock_release+0x8>)
 801ac22:	f000 b8a2 	b.w	801ad6a <__retarget_lock_release_recursive>
 801ac26:	bf00      	nop
 801ac28:	2400696e 	.word	0x2400696e

0801ac2c <__sinit>:
 801ac2c:	b510      	push	{r4, lr}
 801ac2e:	4604      	mov	r4, r0
 801ac30:	f7ff fff0 	bl	801ac14 <__sinit_lock_acquire>
 801ac34:	69a3      	ldr	r3, [r4, #24]
 801ac36:	b11b      	cbz	r3, 801ac40 <__sinit+0x14>
 801ac38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac3c:	f7ff bff0 	b.w	801ac20 <__sinit_lock_release>
 801ac40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ac44:	6523      	str	r3, [r4, #80]	; 0x50
 801ac46:	4b13      	ldr	r3, [pc, #76]	; (801ac94 <__sinit+0x68>)
 801ac48:	4a13      	ldr	r2, [pc, #76]	; (801ac98 <__sinit+0x6c>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	62a2      	str	r2, [r4, #40]	; 0x28
 801ac4e:	42a3      	cmp	r3, r4
 801ac50:	bf04      	itt	eq
 801ac52:	2301      	moveq	r3, #1
 801ac54:	61a3      	streq	r3, [r4, #24]
 801ac56:	4620      	mov	r0, r4
 801ac58:	f000 f820 	bl	801ac9c <__sfp>
 801ac5c:	6060      	str	r0, [r4, #4]
 801ac5e:	4620      	mov	r0, r4
 801ac60:	f000 f81c 	bl	801ac9c <__sfp>
 801ac64:	60a0      	str	r0, [r4, #8]
 801ac66:	4620      	mov	r0, r4
 801ac68:	f000 f818 	bl	801ac9c <__sfp>
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	60e0      	str	r0, [r4, #12]
 801ac70:	2104      	movs	r1, #4
 801ac72:	6860      	ldr	r0, [r4, #4]
 801ac74:	f7ff ff82 	bl	801ab7c <std>
 801ac78:	68a0      	ldr	r0, [r4, #8]
 801ac7a:	2201      	movs	r2, #1
 801ac7c:	2109      	movs	r1, #9
 801ac7e:	f7ff ff7d 	bl	801ab7c <std>
 801ac82:	68e0      	ldr	r0, [r4, #12]
 801ac84:	2202      	movs	r2, #2
 801ac86:	2112      	movs	r1, #18
 801ac88:	f7ff ff78 	bl	801ab7c <std>
 801ac8c:	2301      	movs	r3, #1
 801ac8e:	61a3      	str	r3, [r4, #24]
 801ac90:	e7d2      	b.n	801ac38 <__sinit+0xc>
 801ac92:	bf00      	nop
 801ac94:	0801b5d4 	.word	0x0801b5d4
 801ac98:	0801abc5 	.word	0x0801abc5

0801ac9c <__sfp>:
 801ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac9e:	4607      	mov	r7, r0
 801aca0:	f7ff ffac 	bl	801abfc <__sfp_lock_acquire>
 801aca4:	4b1e      	ldr	r3, [pc, #120]	; (801ad20 <__sfp+0x84>)
 801aca6:	681e      	ldr	r6, [r3, #0]
 801aca8:	69b3      	ldr	r3, [r6, #24]
 801acaa:	b913      	cbnz	r3, 801acb2 <__sfp+0x16>
 801acac:	4630      	mov	r0, r6
 801acae:	f7ff ffbd 	bl	801ac2c <__sinit>
 801acb2:	3648      	adds	r6, #72	; 0x48
 801acb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801acb8:	3b01      	subs	r3, #1
 801acba:	d503      	bpl.n	801acc4 <__sfp+0x28>
 801acbc:	6833      	ldr	r3, [r6, #0]
 801acbe:	b30b      	cbz	r3, 801ad04 <__sfp+0x68>
 801acc0:	6836      	ldr	r6, [r6, #0]
 801acc2:	e7f7      	b.n	801acb4 <__sfp+0x18>
 801acc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801acc8:	b9d5      	cbnz	r5, 801ad00 <__sfp+0x64>
 801acca:	4b16      	ldr	r3, [pc, #88]	; (801ad24 <__sfp+0x88>)
 801accc:	60e3      	str	r3, [r4, #12]
 801acce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801acd2:	6665      	str	r5, [r4, #100]	; 0x64
 801acd4:	f000 f847 	bl	801ad66 <__retarget_lock_init_recursive>
 801acd8:	f7ff ff96 	bl	801ac08 <__sfp_lock_release>
 801acdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ace0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ace4:	6025      	str	r5, [r4, #0]
 801ace6:	61a5      	str	r5, [r4, #24]
 801ace8:	2208      	movs	r2, #8
 801acea:	4629      	mov	r1, r5
 801acec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801acf0:	f7ff fd44 	bl	801a77c <memset>
 801acf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801acf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801acfc:	4620      	mov	r0, r4
 801acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad00:	3468      	adds	r4, #104	; 0x68
 801ad02:	e7d9      	b.n	801acb8 <__sfp+0x1c>
 801ad04:	2104      	movs	r1, #4
 801ad06:	4638      	mov	r0, r7
 801ad08:	f7ff ff62 	bl	801abd0 <__sfmoreglue>
 801ad0c:	4604      	mov	r4, r0
 801ad0e:	6030      	str	r0, [r6, #0]
 801ad10:	2800      	cmp	r0, #0
 801ad12:	d1d5      	bne.n	801acc0 <__sfp+0x24>
 801ad14:	f7ff ff78 	bl	801ac08 <__sfp_lock_release>
 801ad18:	230c      	movs	r3, #12
 801ad1a:	603b      	str	r3, [r7, #0]
 801ad1c:	e7ee      	b.n	801acfc <__sfp+0x60>
 801ad1e:	bf00      	nop
 801ad20:	0801b5d4 	.word	0x0801b5d4
 801ad24:	ffff0001 	.word	0xffff0001

0801ad28 <_fwalk_reent>:
 801ad28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad2c:	4606      	mov	r6, r0
 801ad2e:	4688      	mov	r8, r1
 801ad30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ad34:	2700      	movs	r7, #0
 801ad36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ad3a:	f1b9 0901 	subs.w	r9, r9, #1
 801ad3e:	d505      	bpl.n	801ad4c <_fwalk_reent+0x24>
 801ad40:	6824      	ldr	r4, [r4, #0]
 801ad42:	2c00      	cmp	r4, #0
 801ad44:	d1f7      	bne.n	801ad36 <_fwalk_reent+0xe>
 801ad46:	4638      	mov	r0, r7
 801ad48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad4c:	89ab      	ldrh	r3, [r5, #12]
 801ad4e:	2b01      	cmp	r3, #1
 801ad50:	d907      	bls.n	801ad62 <_fwalk_reent+0x3a>
 801ad52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad56:	3301      	adds	r3, #1
 801ad58:	d003      	beq.n	801ad62 <_fwalk_reent+0x3a>
 801ad5a:	4629      	mov	r1, r5
 801ad5c:	4630      	mov	r0, r6
 801ad5e:	47c0      	blx	r8
 801ad60:	4307      	orrs	r7, r0
 801ad62:	3568      	adds	r5, #104	; 0x68
 801ad64:	e7e9      	b.n	801ad3a <_fwalk_reent+0x12>

0801ad66 <__retarget_lock_init_recursive>:
 801ad66:	4770      	bx	lr

0801ad68 <__retarget_lock_acquire_recursive>:
 801ad68:	4770      	bx	lr

0801ad6a <__retarget_lock_release_recursive>:
 801ad6a:	4770      	bx	lr

0801ad6c <__swhatbuf_r>:
 801ad6c:	b570      	push	{r4, r5, r6, lr}
 801ad6e:	460e      	mov	r6, r1
 801ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad74:	2900      	cmp	r1, #0
 801ad76:	b096      	sub	sp, #88	; 0x58
 801ad78:	4614      	mov	r4, r2
 801ad7a:	461d      	mov	r5, r3
 801ad7c:	da08      	bge.n	801ad90 <__swhatbuf_r+0x24>
 801ad7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad82:	2200      	movs	r2, #0
 801ad84:	602a      	str	r2, [r5, #0]
 801ad86:	061a      	lsls	r2, r3, #24
 801ad88:	d410      	bmi.n	801adac <__swhatbuf_r+0x40>
 801ad8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad8e:	e00e      	b.n	801adae <__swhatbuf_r+0x42>
 801ad90:	466a      	mov	r2, sp
 801ad92:	f000 f9a7 	bl	801b0e4 <_fstat_r>
 801ad96:	2800      	cmp	r0, #0
 801ad98:	dbf1      	blt.n	801ad7e <__swhatbuf_r+0x12>
 801ad9a:	9a01      	ldr	r2, [sp, #4]
 801ad9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ada0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ada4:	425a      	negs	r2, r3
 801ada6:	415a      	adcs	r2, r3
 801ada8:	602a      	str	r2, [r5, #0]
 801adaa:	e7ee      	b.n	801ad8a <__swhatbuf_r+0x1e>
 801adac:	2340      	movs	r3, #64	; 0x40
 801adae:	2000      	movs	r0, #0
 801adb0:	6023      	str	r3, [r4, #0]
 801adb2:	b016      	add	sp, #88	; 0x58
 801adb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801adb8 <__smakebuf_r>:
 801adb8:	898b      	ldrh	r3, [r1, #12]
 801adba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801adbc:	079d      	lsls	r5, r3, #30
 801adbe:	4606      	mov	r6, r0
 801adc0:	460c      	mov	r4, r1
 801adc2:	d507      	bpl.n	801add4 <__smakebuf_r+0x1c>
 801adc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801adc8:	6023      	str	r3, [r4, #0]
 801adca:	6123      	str	r3, [r4, #16]
 801adcc:	2301      	movs	r3, #1
 801adce:	6163      	str	r3, [r4, #20]
 801add0:	b002      	add	sp, #8
 801add2:	bd70      	pop	{r4, r5, r6, pc}
 801add4:	ab01      	add	r3, sp, #4
 801add6:	466a      	mov	r2, sp
 801add8:	f7ff ffc8 	bl	801ad6c <__swhatbuf_r>
 801addc:	9900      	ldr	r1, [sp, #0]
 801adde:	4605      	mov	r5, r0
 801ade0:	4630      	mov	r0, r6
 801ade2:	f000 f895 	bl	801af10 <_malloc_r>
 801ade6:	b948      	cbnz	r0, 801adfc <__smakebuf_r+0x44>
 801ade8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adec:	059a      	lsls	r2, r3, #22
 801adee:	d4ef      	bmi.n	801add0 <__smakebuf_r+0x18>
 801adf0:	f023 0303 	bic.w	r3, r3, #3
 801adf4:	f043 0302 	orr.w	r3, r3, #2
 801adf8:	81a3      	strh	r3, [r4, #12]
 801adfa:	e7e3      	b.n	801adc4 <__smakebuf_r+0xc>
 801adfc:	4b0d      	ldr	r3, [pc, #52]	; (801ae34 <__smakebuf_r+0x7c>)
 801adfe:	62b3      	str	r3, [r6, #40]	; 0x28
 801ae00:	89a3      	ldrh	r3, [r4, #12]
 801ae02:	6020      	str	r0, [r4, #0]
 801ae04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ae08:	81a3      	strh	r3, [r4, #12]
 801ae0a:	9b00      	ldr	r3, [sp, #0]
 801ae0c:	6163      	str	r3, [r4, #20]
 801ae0e:	9b01      	ldr	r3, [sp, #4]
 801ae10:	6120      	str	r0, [r4, #16]
 801ae12:	b15b      	cbz	r3, 801ae2c <__smakebuf_r+0x74>
 801ae14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae18:	4630      	mov	r0, r6
 801ae1a:	f000 f975 	bl	801b108 <_isatty_r>
 801ae1e:	b128      	cbz	r0, 801ae2c <__smakebuf_r+0x74>
 801ae20:	89a3      	ldrh	r3, [r4, #12]
 801ae22:	f023 0303 	bic.w	r3, r3, #3
 801ae26:	f043 0301 	orr.w	r3, r3, #1
 801ae2a:	81a3      	strh	r3, [r4, #12]
 801ae2c:	89a0      	ldrh	r0, [r4, #12]
 801ae2e:	4305      	orrs	r5, r0
 801ae30:	81a5      	strh	r5, [r4, #12]
 801ae32:	e7cd      	b.n	801add0 <__smakebuf_r+0x18>
 801ae34:	0801abc5 	.word	0x0801abc5

0801ae38 <_free_r>:
 801ae38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae3a:	2900      	cmp	r1, #0
 801ae3c:	d044      	beq.n	801aec8 <_free_r+0x90>
 801ae3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae42:	9001      	str	r0, [sp, #4]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	f1a1 0404 	sub.w	r4, r1, #4
 801ae4a:	bfb8      	it	lt
 801ae4c:	18e4      	addlt	r4, r4, r3
 801ae4e:	f000 f97d 	bl	801b14c <__malloc_lock>
 801ae52:	4a1e      	ldr	r2, [pc, #120]	; (801aecc <_free_r+0x94>)
 801ae54:	9801      	ldr	r0, [sp, #4]
 801ae56:	6813      	ldr	r3, [r2, #0]
 801ae58:	b933      	cbnz	r3, 801ae68 <_free_r+0x30>
 801ae5a:	6063      	str	r3, [r4, #4]
 801ae5c:	6014      	str	r4, [r2, #0]
 801ae5e:	b003      	add	sp, #12
 801ae60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae64:	f000 b978 	b.w	801b158 <__malloc_unlock>
 801ae68:	42a3      	cmp	r3, r4
 801ae6a:	d908      	bls.n	801ae7e <_free_r+0x46>
 801ae6c:	6825      	ldr	r5, [r4, #0]
 801ae6e:	1961      	adds	r1, r4, r5
 801ae70:	428b      	cmp	r3, r1
 801ae72:	bf01      	itttt	eq
 801ae74:	6819      	ldreq	r1, [r3, #0]
 801ae76:	685b      	ldreq	r3, [r3, #4]
 801ae78:	1949      	addeq	r1, r1, r5
 801ae7a:	6021      	streq	r1, [r4, #0]
 801ae7c:	e7ed      	b.n	801ae5a <_free_r+0x22>
 801ae7e:	461a      	mov	r2, r3
 801ae80:	685b      	ldr	r3, [r3, #4]
 801ae82:	b10b      	cbz	r3, 801ae88 <_free_r+0x50>
 801ae84:	42a3      	cmp	r3, r4
 801ae86:	d9fa      	bls.n	801ae7e <_free_r+0x46>
 801ae88:	6811      	ldr	r1, [r2, #0]
 801ae8a:	1855      	adds	r5, r2, r1
 801ae8c:	42a5      	cmp	r5, r4
 801ae8e:	d10b      	bne.n	801aea8 <_free_r+0x70>
 801ae90:	6824      	ldr	r4, [r4, #0]
 801ae92:	4421      	add	r1, r4
 801ae94:	1854      	adds	r4, r2, r1
 801ae96:	42a3      	cmp	r3, r4
 801ae98:	6011      	str	r1, [r2, #0]
 801ae9a:	d1e0      	bne.n	801ae5e <_free_r+0x26>
 801ae9c:	681c      	ldr	r4, [r3, #0]
 801ae9e:	685b      	ldr	r3, [r3, #4]
 801aea0:	6053      	str	r3, [r2, #4]
 801aea2:	4421      	add	r1, r4
 801aea4:	6011      	str	r1, [r2, #0]
 801aea6:	e7da      	b.n	801ae5e <_free_r+0x26>
 801aea8:	d902      	bls.n	801aeb0 <_free_r+0x78>
 801aeaa:	230c      	movs	r3, #12
 801aeac:	6003      	str	r3, [r0, #0]
 801aeae:	e7d6      	b.n	801ae5e <_free_r+0x26>
 801aeb0:	6825      	ldr	r5, [r4, #0]
 801aeb2:	1961      	adds	r1, r4, r5
 801aeb4:	428b      	cmp	r3, r1
 801aeb6:	bf04      	itt	eq
 801aeb8:	6819      	ldreq	r1, [r3, #0]
 801aeba:	685b      	ldreq	r3, [r3, #4]
 801aebc:	6063      	str	r3, [r4, #4]
 801aebe:	bf04      	itt	eq
 801aec0:	1949      	addeq	r1, r1, r5
 801aec2:	6021      	streq	r1, [r4, #0]
 801aec4:	6054      	str	r4, [r2, #4]
 801aec6:	e7ca      	b.n	801ae5e <_free_r+0x26>
 801aec8:	b003      	add	sp, #12
 801aeca:	bd30      	pop	{r4, r5, pc}
 801aecc:	24006970 	.word	0x24006970

0801aed0 <sbrk_aligned>:
 801aed0:	b570      	push	{r4, r5, r6, lr}
 801aed2:	4e0e      	ldr	r6, [pc, #56]	; (801af0c <sbrk_aligned+0x3c>)
 801aed4:	460c      	mov	r4, r1
 801aed6:	6831      	ldr	r1, [r6, #0]
 801aed8:	4605      	mov	r5, r0
 801aeda:	b911      	cbnz	r1, 801aee2 <sbrk_aligned+0x12>
 801aedc:	f000 f88c 	bl	801aff8 <_sbrk_r>
 801aee0:	6030      	str	r0, [r6, #0]
 801aee2:	4621      	mov	r1, r4
 801aee4:	4628      	mov	r0, r5
 801aee6:	f000 f887 	bl	801aff8 <_sbrk_r>
 801aeea:	1c43      	adds	r3, r0, #1
 801aeec:	d00a      	beq.n	801af04 <sbrk_aligned+0x34>
 801aeee:	1cc4      	adds	r4, r0, #3
 801aef0:	f024 0403 	bic.w	r4, r4, #3
 801aef4:	42a0      	cmp	r0, r4
 801aef6:	d007      	beq.n	801af08 <sbrk_aligned+0x38>
 801aef8:	1a21      	subs	r1, r4, r0
 801aefa:	4628      	mov	r0, r5
 801aefc:	f000 f87c 	bl	801aff8 <_sbrk_r>
 801af00:	3001      	adds	r0, #1
 801af02:	d101      	bne.n	801af08 <sbrk_aligned+0x38>
 801af04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801af08:	4620      	mov	r0, r4
 801af0a:	bd70      	pop	{r4, r5, r6, pc}
 801af0c:	24006974 	.word	0x24006974

0801af10 <_malloc_r>:
 801af10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af14:	1ccd      	adds	r5, r1, #3
 801af16:	f025 0503 	bic.w	r5, r5, #3
 801af1a:	3508      	adds	r5, #8
 801af1c:	2d0c      	cmp	r5, #12
 801af1e:	bf38      	it	cc
 801af20:	250c      	movcc	r5, #12
 801af22:	2d00      	cmp	r5, #0
 801af24:	4607      	mov	r7, r0
 801af26:	db01      	blt.n	801af2c <_malloc_r+0x1c>
 801af28:	42a9      	cmp	r1, r5
 801af2a:	d905      	bls.n	801af38 <_malloc_r+0x28>
 801af2c:	230c      	movs	r3, #12
 801af2e:	603b      	str	r3, [r7, #0]
 801af30:	2600      	movs	r6, #0
 801af32:	4630      	mov	r0, r6
 801af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af38:	4e2e      	ldr	r6, [pc, #184]	; (801aff4 <_malloc_r+0xe4>)
 801af3a:	f000 f907 	bl	801b14c <__malloc_lock>
 801af3e:	6833      	ldr	r3, [r6, #0]
 801af40:	461c      	mov	r4, r3
 801af42:	bb34      	cbnz	r4, 801af92 <_malloc_r+0x82>
 801af44:	4629      	mov	r1, r5
 801af46:	4638      	mov	r0, r7
 801af48:	f7ff ffc2 	bl	801aed0 <sbrk_aligned>
 801af4c:	1c43      	adds	r3, r0, #1
 801af4e:	4604      	mov	r4, r0
 801af50:	d14d      	bne.n	801afee <_malloc_r+0xde>
 801af52:	6834      	ldr	r4, [r6, #0]
 801af54:	4626      	mov	r6, r4
 801af56:	2e00      	cmp	r6, #0
 801af58:	d140      	bne.n	801afdc <_malloc_r+0xcc>
 801af5a:	6823      	ldr	r3, [r4, #0]
 801af5c:	4631      	mov	r1, r6
 801af5e:	4638      	mov	r0, r7
 801af60:	eb04 0803 	add.w	r8, r4, r3
 801af64:	f000 f848 	bl	801aff8 <_sbrk_r>
 801af68:	4580      	cmp	r8, r0
 801af6a:	d13a      	bne.n	801afe2 <_malloc_r+0xd2>
 801af6c:	6821      	ldr	r1, [r4, #0]
 801af6e:	3503      	adds	r5, #3
 801af70:	1a6d      	subs	r5, r5, r1
 801af72:	f025 0503 	bic.w	r5, r5, #3
 801af76:	3508      	adds	r5, #8
 801af78:	2d0c      	cmp	r5, #12
 801af7a:	bf38      	it	cc
 801af7c:	250c      	movcc	r5, #12
 801af7e:	4629      	mov	r1, r5
 801af80:	4638      	mov	r0, r7
 801af82:	f7ff ffa5 	bl	801aed0 <sbrk_aligned>
 801af86:	3001      	adds	r0, #1
 801af88:	d02b      	beq.n	801afe2 <_malloc_r+0xd2>
 801af8a:	6823      	ldr	r3, [r4, #0]
 801af8c:	442b      	add	r3, r5
 801af8e:	6023      	str	r3, [r4, #0]
 801af90:	e00e      	b.n	801afb0 <_malloc_r+0xa0>
 801af92:	6822      	ldr	r2, [r4, #0]
 801af94:	1b52      	subs	r2, r2, r5
 801af96:	d41e      	bmi.n	801afd6 <_malloc_r+0xc6>
 801af98:	2a0b      	cmp	r2, #11
 801af9a:	d916      	bls.n	801afca <_malloc_r+0xba>
 801af9c:	1961      	adds	r1, r4, r5
 801af9e:	42a3      	cmp	r3, r4
 801afa0:	6025      	str	r5, [r4, #0]
 801afa2:	bf18      	it	ne
 801afa4:	6059      	strne	r1, [r3, #4]
 801afa6:	6863      	ldr	r3, [r4, #4]
 801afa8:	bf08      	it	eq
 801afaa:	6031      	streq	r1, [r6, #0]
 801afac:	5162      	str	r2, [r4, r5]
 801afae:	604b      	str	r3, [r1, #4]
 801afb0:	4638      	mov	r0, r7
 801afb2:	f104 060b 	add.w	r6, r4, #11
 801afb6:	f000 f8cf 	bl	801b158 <__malloc_unlock>
 801afba:	f026 0607 	bic.w	r6, r6, #7
 801afbe:	1d23      	adds	r3, r4, #4
 801afc0:	1af2      	subs	r2, r6, r3
 801afc2:	d0b6      	beq.n	801af32 <_malloc_r+0x22>
 801afc4:	1b9b      	subs	r3, r3, r6
 801afc6:	50a3      	str	r3, [r4, r2]
 801afc8:	e7b3      	b.n	801af32 <_malloc_r+0x22>
 801afca:	6862      	ldr	r2, [r4, #4]
 801afcc:	42a3      	cmp	r3, r4
 801afce:	bf0c      	ite	eq
 801afd0:	6032      	streq	r2, [r6, #0]
 801afd2:	605a      	strne	r2, [r3, #4]
 801afd4:	e7ec      	b.n	801afb0 <_malloc_r+0xa0>
 801afd6:	4623      	mov	r3, r4
 801afd8:	6864      	ldr	r4, [r4, #4]
 801afda:	e7b2      	b.n	801af42 <_malloc_r+0x32>
 801afdc:	4634      	mov	r4, r6
 801afde:	6876      	ldr	r6, [r6, #4]
 801afe0:	e7b9      	b.n	801af56 <_malloc_r+0x46>
 801afe2:	230c      	movs	r3, #12
 801afe4:	603b      	str	r3, [r7, #0]
 801afe6:	4638      	mov	r0, r7
 801afe8:	f000 f8b6 	bl	801b158 <__malloc_unlock>
 801afec:	e7a1      	b.n	801af32 <_malloc_r+0x22>
 801afee:	6025      	str	r5, [r4, #0]
 801aff0:	e7de      	b.n	801afb0 <_malloc_r+0xa0>
 801aff2:	bf00      	nop
 801aff4:	24006970 	.word	0x24006970

0801aff8 <_sbrk_r>:
 801aff8:	b538      	push	{r3, r4, r5, lr}
 801affa:	4d06      	ldr	r5, [pc, #24]	; (801b014 <_sbrk_r+0x1c>)
 801affc:	2300      	movs	r3, #0
 801affe:	4604      	mov	r4, r0
 801b000:	4608      	mov	r0, r1
 801b002:	602b      	str	r3, [r5, #0]
 801b004:	f7e9 fd90 	bl	8004b28 <_sbrk>
 801b008:	1c43      	adds	r3, r0, #1
 801b00a:	d102      	bne.n	801b012 <_sbrk_r+0x1a>
 801b00c:	682b      	ldr	r3, [r5, #0]
 801b00e:	b103      	cbz	r3, 801b012 <_sbrk_r+0x1a>
 801b010:	6023      	str	r3, [r4, #0]
 801b012:	bd38      	pop	{r3, r4, r5, pc}
 801b014:	24006978 	.word	0x24006978

0801b018 <__sread>:
 801b018:	b510      	push	{r4, lr}
 801b01a:	460c      	mov	r4, r1
 801b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b020:	f000 f8a0 	bl	801b164 <_read_r>
 801b024:	2800      	cmp	r0, #0
 801b026:	bfab      	itete	ge
 801b028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b02a:	89a3      	ldrhlt	r3, [r4, #12]
 801b02c:	181b      	addge	r3, r3, r0
 801b02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b032:	bfac      	ite	ge
 801b034:	6563      	strge	r3, [r4, #84]	; 0x54
 801b036:	81a3      	strhlt	r3, [r4, #12]
 801b038:	bd10      	pop	{r4, pc}

0801b03a <__swrite>:
 801b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b03e:	461f      	mov	r7, r3
 801b040:	898b      	ldrh	r3, [r1, #12]
 801b042:	05db      	lsls	r3, r3, #23
 801b044:	4605      	mov	r5, r0
 801b046:	460c      	mov	r4, r1
 801b048:	4616      	mov	r6, r2
 801b04a:	d505      	bpl.n	801b058 <__swrite+0x1e>
 801b04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b050:	2302      	movs	r3, #2
 801b052:	2200      	movs	r2, #0
 801b054:	f000 f868 	bl	801b128 <_lseek_r>
 801b058:	89a3      	ldrh	r3, [r4, #12]
 801b05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b062:	81a3      	strh	r3, [r4, #12]
 801b064:	4632      	mov	r2, r6
 801b066:	463b      	mov	r3, r7
 801b068:	4628      	mov	r0, r5
 801b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b06e:	f000 b817 	b.w	801b0a0 <_write_r>

0801b072 <__sseek>:
 801b072:	b510      	push	{r4, lr}
 801b074:	460c      	mov	r4, r1
 801b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b07a:	f000 f855 	bl	801b128 <_lseek_r>
 801b07e:	1c43      	adds	r3, r0, #1
 801b080:	89a3      	ldrh	r3, [r4, #12]
 801b082:	bf15      	itete	ne
 801b084:	6560      	strne	r0, [r4, #84]	; 0x54
 801b086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b08e:	81a3      	strheq	r3, [r4, #12]
 801b090:	bf18      	it	ne
 801b092:	81a3      	strhne	r3, [r4, #12]
 801b094:	bd10      	pop	{r4, pc}

0801b096 <__sclose>:
 801b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b09a:	f000 b813 	b.w	801b0c4 <_close_r>
	...

0801b0a0 <_write_r>:
 801b0a0:	b538      	push	{r3, r4, r5, lr}
 801b0a2:	4d07      	ldr	r5, [pc, #28]	; (801b0c0 <_write_r+0x20>)
 801b0a4:	4604      	mov	r4, r0
 801b0a6:	4608      	mov	r0, r1
 801b0a8:	4611      	mov	r1, r2
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	602a      	str	r2, [r5, #0]
 801b0ae:	461a      	mov	r2, r3
 801b0b0:	f7e9 fce9 	bl	8004a86 <_write>
 801b0b4:	1c43      	adds	r3, r0, #1
 801b0b6:	d102      	bne.n	801b0be <_write_r+0x1e>
 801b0b8:	682b      	ldr	r3, [r5, #0]
 801b0ba:	b103      	cbz	r3, 801b0be <_write_r+0x1e>
 801b0bc:	6023      	str	r3, [r4, #0]
 801b0be:	bd38      	pop	{r3, r4, r5, pc}
 801b0c0:	24006978 	.word	0x24006978

0801b0c4 <_close_r>:
 801b0c4:	b538      	push	{r3, r4, r5, lr}
 801b0c6:	4d06      	ldr	r5, [pc, #24]	; (801b0e0 <_close_r+0x1c>)
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	4604      	mov	r4, r0
 801b0cc:	4608      	mov	r0, r1
 801b0ce:	602b      	str	r3, [r5, #0]
 801b0d0:	f7e9 fcf5 	bl	8004abe <_close>
 801b0d4:	1c43      	adds	r3, r0, #1
 801b0d6:	d102      	bne.n	801b0de <_close_r+0x1a>
 801b0d8:	682b      	ldr	r3, [r5, #0]
 801b0da:	b103      	cbz	r3, 801b0de <_close_r+0x1a>
 801b0dc:	6023      	str	r3, [r4, #0]
 801b0de:	bd38      	pop	{r3, r4, r5, pc}
 801b0e0:	24006978 	.word	0x24006978

0801b0e4 <_fstat_r>:
 801b0e4:	b538      	push	{r3, r4, r5, lr}
 801b0e6:	4d07      	ldr	r5, [pc, #28]	; (801b104 <_fstat_r+0x20>)
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	4604      	mov	r4, r0
 801b0ec:	4608      	mov	r0, r1
 801b0ee:	4611      	mov	r1, r2
 801b0f0:	602b      	str	r3, [r5, #0]
 801b0f2:	f7e9 fcf0 	bl	8004ad6 <_fstat>
 801b0f6:	1c43      	adds	r3, r0, #1
 801b0f8:	d102      	bne.n	801b100 <_fstat_r+0x1c>
 801b0fa:	682b      	ldr	r3, [r5, #0]
 801b0fc:	b103      	cbz	r3, 801b100 <_fstat_r+0x1c>
 801b0fe:	6023      	str	r3, [r4, #0]
 801b100:	bd38      	pop	{r3, r4, r5, pc}
 801b102:	bf00      	nop
 801b104:	24006978 	.word	0x24006978

0801b108 <_isatty_r>:
 801b108:	b538      	push	{r3, r4, r5, lr}
 801b10a:	4d06      	ldr	r5, [pc, #24]	; (801b124 <_isatty_r+0x1c>)
 801b10c:	2300      	movs	r3, #0
 801b10e:	4604      	mov	r4, r0
 801b110:	4608      	mov	r0, r1
 801b112:	602b      	str	r3, [r5, #0]
 801b114:	f7e9 fcef 	bl	8004af6 <_isatty>
 801b118:	1c43      	adds	r3, r0, #1
 801b11a:	d102      	bne.n	801b122 <_isatty_r+0x1a>
 801b11c:	682b      	ldr	r3, [r5, #0]
 801b11e:	b103      	cbz	r3, 801b122 <_isatty_r+0x1a>
 801b120:	6023      	str	r3, [r4, #0]
 801b122:	bd38      	pop	{r3, r4, r5, pc}
 801b124:	24006978 	.word	0x24006978

0801b128 <_lseek_r>:
 801b128:	b538      	push	{r3, r4, r5, lr}
 801b12a:	4d07      	ldr	r5, [pc, #28]	; (801b148 <_lseek_r+0x20>)
 801b12c:	4604      	mov	r4, r0
 801b12e:	4608      	mov	r0, r1
 801b130:	4611      	mov	r1, r2
 801b132:	2200      	movs	r2, #0
 801b134:	602a      	str	r2, [r5, #0]
 801b136:	461a      	mov	r2, r3
 801b138:	f7e9 fce8 	bl	8004b0c <_lseek>
 801b13c:	1c43      	adds	r3, r0, #1
 801b13e:	d102      	bne.n	801b146 <_lseek_r+0x1e>
 801b140:	682b      	ldr	r3, [r5, #0]
 801b142:	b103      	cbz	r3, 801b146 <_lseek_r+0x1e>
 801b144:	6023      	str	r3, [r4, #0]
 801b146:	bd38      	pop	{r3, r4, r5, pc}
 801b148:	24006978 	.word	0x24006978

0801b14c <__malloc_lock>:
 801b14c:	4801      	ldr	r0, [pc, #4]	; (801b154 <__malloc_lock+0x8>)
 801b14e:	f7ff be0b 	b.w	801ad68 <__retarget_lock_acquire_recursive>
 801b152:	bf00      	nop
 801b154:	2400696c 	.word	0x2400696c

0801b158 <__malloc_unlock>:
 801b158:	4801      	ldr	r0, [pc, #4]	; (801b160 <__malloc_unlock+0x8>)
 801b15a:	f7ff be06 	b.w	801ad6a <__retarget_lock_release_recursive>
 801b15e:	bf00      	nop
 801b160:	2400696c 	.word	0x2400696c

0801b164 <_read_r>:
 801b164:	b538      	push	{r3, r4, r5, lr}
 801b166:	4d07      	ldr	r5, [pc, #28]	; (801b184 <_read_r+0x20>)
 801b168:	4604      	mov	r4, r0
 801b16a:	4608      	mov	r0, r1
 801b16c:	4611      	mov	r1, r2
 801b16e:	2200      	movs	r2, #0
 801b170:	602a      	str	r2, [r5, #0]
 801b172:	461a      	mov	r2, r3
 801b174:	f7e9 fc6a 	bl	8004a4c <_read>
 801b178:	1c43      	adds	r3, r0, #1
 801b17a:	d102      	bne.n	801b182 <_read_r+0x1e>
 801b17c:	682b      	ldr	r3, [r5, #0]
 801b17e:	b103      	cbz	r3, 801b182 <_read_r+0x1e>
 801b180:	6023      	str	r3, [r4, #0]
 801b182:	bd38      	pop	{r3, r4, r5, pc}
 801b184:	24006978 	.word	0x24006978

0801b188 <_init>:
 801b188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b18a:	bf00      	nop
 801b18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b18e:	bc08      	pop	{r3}
 801b190:	469e      	mov	lr, r3
 801b192:	4770      	bx	lr

0801b194 <_fini>:
 801b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b196:	bf00      	nop
 801b198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b19a:	bc08      	pop	{r3}
 801b19c:	469e      	mov	lr, r3
 801b19e:	4770      	bx	lr
