
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08016340  08016340  00026340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016720  08016720  00026720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016728  08016728  00026728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801672c  0801672c  0002672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08016730  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  08016830  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  08016830  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000327ef  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548e  00000000  00000000  0006291d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a90  00000000  00000000  0006c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003094c  00000000  00000000  00074298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194535  00000000  00000000  000a4be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00239119  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abe4  00000000  00000000  0023916c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016328 	.word	0x08016328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016328 	.word	0x08016328

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 f866 	bl	80126cc <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 f85b 	bl	80126cc <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 f850 	bl	80126cc <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f015 faca 	bl	8015bc8 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	240004e8 	.word	0x240004e8
 8000640:	24000b3c 	.word	0x24000b3c
 8000644:	24000534 	.word	0x24000534
 8000648:	24000580 	.word	0x24000580
 800064c:	08016390 	.word	0x08016390

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00f fb29 	bl	800fcb4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83c8 	bhi.w	8000e00 <HAL_UART_RxCpltCallback+0x7b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000c03 	.word	0x08000c03
 80006a0:	08000c27 	.word	0x08000c27
 80006a4:	08000c43 	.word	0x08000c43
 80006a8:	08000c5f 	.word	0x08000c5f
 80006ac:	08000ca9 	.word	0x08000ca9
 80006b0:	08000da5 	.word	0x08000da5
 80006b4:	08000dd5 	.word	0x08000dd5
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c19 	.word	0x08000c19
 80006e4:	08000c35 	.word	0x08000c35
 80006e8:	08000c51 	.word	0x08000c51
 80006ec:	08000c6d 	.word	0x08000c6d
 80006f0:	08000ce5 	.word	0x08000ce5
 80006f4:	08000dcd 	.word	0x08000dcd
 80006f8:	08000e01 	.word	0x08000e01
 80006fc:	08000e01 	.word	0x08000e01
 8000700:	08000e01 	.word	0x08000e01
 8000704:	08000e01 	.word	0x08000e01
 8000708:	08000e01 	.word	0x08000e01
 800070c:	08000e01 	.word	0x08000e01
 8000710:	08000e01 	.word	0x08000e01
 8000714:	08000e01 	.word	0x08000e01
 8000718:	08000e01 	.word	0x08000e01
 800071c:	08000e01 	.word	0x08000e01
 8000720:	08000e01 	.word	0x08000e01
 8000724:	08000e01 	.word	0x08000e01
 8000728:	08000e01 	.word	0x08000e01
 800072c:	08000e01 	.word	0x08000e01
 8000730:	08000e01 	.word	0x08000e01
 8000734:	08000e01 	.word	0x08000e01
 8000738:	08000e01 	.word	0x08000e01
 800073c:	08000e01 	.word	0x08000e01
 8000740:	08000e01 	.word	0x08000e01
 8000744:	08000e01 	.word	0x08000e01
 8000748:	08000e01 	.word	0x08000e01
 800074c:	08000e01 	.word	0x08000e01
 8000750:	08000e01 	.word	0x08000e01
 8000754:	08000e01 	.word	0x08000e01
 8000758:	08000e01 	.word	0x08000e01
 800075c:	08000e01 	.word	0x08000e01
 8000760:	08000e01 	.word	0x08000e01
 8000764:	08000e01 	.word	0x08000e01
 8000768:	08000e01 	.word	0x08000e01
 800076c:	08000e01 	.word	0x08000e01
 8000770:	08000e01 	.word	0x08000e01
 8000774:	08000e01 	.word	0x08000e01
 8000778:	08000e01 	.word	0x08000e01
 800077c:	08000e01 	.word	0x08000e01
 8000780:	08000e01 	.word	0x08000e01
 8000784:	08000e01 	.word	0x08000e01
 8000788:	08000e01 	.word	0x08000e01
 800078c:	08000e01 	.word	0x08000e01
 8000790:	08000e01 	.word	0x08000e01
 8000794:	08000e01 	.word	0x08000e01
 8000798:	08000e01 	.word	0x08000e01
 800079c:	08000e01 	.word	0x08000e01
 80007a0:	08000e01 	.word	0x08000e01
 80007a4:	08000e01 	.word	0x08000e01
 80007a8:	08000e01 	.word	0x08000e01
 80007ac:	08000e01 	.word	0x08000e01
 80007b0:	08000e01 	.word	0x08000e01
 80007b4:	08000e01 	.word	0x08000e01
 80007b8:	08000e01 	.word	0x08000e01
 80007bc:	08000e01 	.word	0x08000e01
 80007c0:	08000e01 	.word	0x08000e01
 80007c4:	08000e01 	.word	0x08000e01
 80007c8:	08000e01 	.word	0x08000e01
 80007cc:	08000e01 	.word	0x08000e01
 80007d0:	08000e01 	.word	0x08000e01
 80007d4:	08000e01 	.word	0x08000e01
 80007d8:	08000e01 	.word	0x08000e01
 80007dc:	08000e01 	.word	0x08000e01
 80007e0:	08000e01 	.word	0x08000e01
 80007e4:	08000e01 	.word	0x08000e01
 80007e8:	08000e01 	.word	0x08000e01
 80007ec:	08000e01 	.word	0x08000e01
 80007f0:	08000e01 	.word	0x08000e01
 80007f4:	08000e01 	.word	0x08000e01
 80007f8:	08000e01 	.word	0x08000e01
 80007fc:	08000e01 	.word	0x08000e01
 8000800:	08000e01 	.word	0x08000e01
 8000804:	08000e01 	.word	0x08000e01
 8000808:	08000e01 	.word	0x08000e01
 800080c:	08000e01 	.word	0x08000e01
 8000810:	08000e01 	.word	0x08000e01
 8000814:	08000e01 	.word	0x08000e01
 8000818:	08000e01 	.word	0x08000e01
 800081c:	08000e01 	.word	0x08000e01
 8000820:	08000e01 	.word	0x08000e01
 8000824:	08000e01 	.word	0x08000e01
 8000828:	08000e01 	.word	0x08000e01
 800082c:	08000e01 	.word	0x08000e01
 8000830:	08000e01 	.word	0x08000e01
 8000834:	08000e01 	.word	0x08000e01
 8000838:	08000e01 	.word	0x08000e01
 800083c:	08000e01 	.word	0x08000e01
 8000840:	08000e01 	.word	0x08000e01
 8000844:	08000e01 	.word	0x08000e01
 8000848:	08000e01 	.word	0x08000e01
 800084c:	08000e01 	.word	0x08000e01
 8000850:	08000e01 	.word	0x08000e01
 8000854:	08000e01 	.word	0x08000e01
 8000858:	08000e01 	.word	0x08000e01
 800085c:	08000e01 	.word	0x08000e01
 8000860:	08000e01 	.word	0x08000e01
 8000864:	08000e01 	.word	0x08000e01
 8000868:	08000e01 	.word	0x08000e01
 800086c:	08000e01 	.word	0x08000e01
 8000870:	08000e01 	.word	0x08000e01
 8000874:	08000e01 	.word	0x08000e01
 8000878:	08000e01 	.word	0x08000e01
 800087c:	08000e01 	.word	0x08000e01
 8000880:	08000e01 	.word	0x08000e01
 8000884:	08000e01 	.word	0x08000e01
 8000888:	08000e01 	.word	0x08000e01
 800088c:	08000e01 	.word	0x08000e01
 8000890:	08000e01 	.word	0x08000e01
 8000894:	08000e01 	.word	0x08000e01
 8000898:	08000e01 	.word	0x08000e01
 800089c:	08000e01 	.word	0x08000e01
 80008a0:	08000e01 	.word	0x08000e01
 80008a4:	08000e01 	.word	0x08000e01
 80008a8:	08000e01 	.word	0x08000e01
 80008ac:	08000e01 	.word	0x08000e01
 80008b0:	08000e01 	.word	0x08000e01
 80008b4:	08000e01 	.word	0x08000e01
 80008b8:	08000e01 	.word	0x08000e01
 80008bc:	08000e01 	.word	0x08000e01
 80008c0:	08000e01 	.word	0x08000e01
 80008c4:	08000e01 	.word	0x08000e01
 80008c8:	08000e01 	.word	0x08000e01
 80008cc:	08000e01 	.word	0x08000e01
 80008d0:	08000e01 	.word	0x08000e01
 80008d4:	08000e01 	.word	0x08000e01
 80008d8:	08000e01 	.word	0x08000e01
 80008dc:	08000e01 	.word	0x08000e01
 80008e0:	08000e01 	.word	0x08000e01
 80008e4:	08000e01 	.word	0x08000e01
 80008e8:	08000e01 	.word	0x08000e01
 80008ec:	08000e01 	.word	0x08000e01
 80008f0:	08000e01 	.word	0x08000e01
 80008f4:	08000e01 	.word	0x08000e01
 80008f8:	08000e01 	.word	0x08000e01
 80008fc:	08000e01 	.word	0x08000e01
 8000900:	08000e01 	.word	0x08000e01
 8000904:	08000e01 	.word	0x08000e01
 8000908:	08000e01 	.word	0x08000e01
 800090c:	08000e01 	.word	0x08000e01
 8000910:	08000e01 	.word	0x08000e01
 8000914:	08000e01 	.word	0x08000e01
 8000918:	08000e01 	.word	0x08000e01
 800091c:	08000e01 	.word	0x08000e01
 8000920:	08000e01 	.word	0x08000e01
 8000924:	08000e01 	.word	0x08000e01
 8000928:	08000e01 	.word	0x08000e01
 800092c:	08000e01 	.word	0x08000e01
 8000930:	08000e01 	.word	0x08000e01
 8000934:	08000e01 	.word	0x08000e01
 8000938:	08000e01 	.word	0x08000e01
 800093c:	08000e01 	.word	0x08000e01
 8000940:	08000e01 	.word	0x08000e01
 8000944:	08000e01 	.word	0x08000e01
 8000948:	08000e01 	.word	0x08000e01
 800094c:	08000e01 	.word	0x08000e01
 8000950:	08000e01 	.word	0x08000e01
 8000954:	08000e01 	.word	0x08000e01
 8000958:	08000e01 	.word	0x08000e01
 800095c:	08000e01 	.word	0x08000e01
 8000960:	08000e01 	.word	0x08000e01
 8000964:	08000e01 	.word	0x08000e01
 8000968:	08000e01 	.word	0x08000e01
 800096c:	08000e01 	.word	0x08000e01
 8000970:	08000e01 	.word	0x08000e01
 8000974:	08000e01 	.word	0x08000e01
 8000978:	08000e01 	.word	0x08000e01
 800097c:	08000e01 	.word	0x08000e01
 8000980:	08000e01 	.word	0x08000e01
 8000984:	08000e01 	.word	0x08000e01
 8000988:	08000e01 	.word	0x08000e01
 800098c:	08000e01 	.word	0x08000e01
 8000990:	08000e01 	.word	0x08000e01
 8000994:	08000e01 	.word	0x08000e01
 8000998:	08000e01 	.word	0x08000e01
 800099c:	08000e01 	.word	0x08000e01
 80009a0:	08000e01 	.word	0x08000e01
 80009a4:	08000e01 	.word	0x08000e01
 80009a8:	08000e01 	.word	0x08000e01
 80009ac:	08000e01 	.word	0x08000e01
 80009b0:	08000e01 	.word	0x08000e01
 80009b4:	08000e01 	.word	0x08000e01
 80009b8:	08000def 	.word	0x08000def
 80009bc:	08000e01 	.word	0x08000e01
 80009c0:	08000e01 	.word	0x08000e01
 80009c4:	08000e01 	.word	0x08000e01
 80009c8:	08000e01 	.word	0x08000e01
 80009cc:	08000e01 	.word	0x08000e01
 80009d0:	08000e01 	.word	0x08000e01
 80009d4:	08000e01 	.word	0x08000e01
 80009d8:	08000e01 	.word	0x08000e01
 80009dc:	08000e01 	.word	0x08000e01
 80009e0:	08000e01 	.word	0x08000e01
 80009e4:	08000e01 	.word	0x08000e01
 80009e8:	08000e01 	.word	0x08000e01
 80009ec:	08000e01 	.word	0x08000e01
 80009f0:	08000e01 	.word	0x08000e01
 80009f4:	08000e01 	.word	0x08000e01
 80009f8:	08000ddd 	.word	0x08000ddd
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f015 f8e3 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f007 ffe7 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000a0e:	e202      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f015 f8d9 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f007 ffdd 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000a22:	e1f8      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
 8000a24:	24000b40 	.word	0x24000b40
 8000a28:	240005cc 	.word	0x240005cc
 8000a2c:	080163a8 	.word	0x080163a8
 8000a30:	58020400 	.word	0x58020400
 8000a34:	080163b0 	.word	0x080163b0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b5      	ldr	r0, [pc, #724]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a3a:	f015 f8c5 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb5      	ldr	r3, [pc, #724]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 ffc9 	bl	80089dc <HAL_GPIO_WritePin>

		break;
 8000a4a:	e1e4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b2      	ldr	r0, [pc, #712]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a4e:	f015 f8bb 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4bb0      	ldr	r3, [pc, #704]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 ffbf 	bl	80089dc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bad      	ldr	r3, [pc, #692]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f007 ffb9 	bl	80089dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4bac      	ldr	r3, [pc, #688]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 ffb2 	bl	80089dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4ba8      	ldr	r3, [pc, #672]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 ffab 	bl	80089dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba5      	ldr	r3, [pc, #660]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 ffa4 	bl	80089dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba1      	ldr	r3, [pc, #644]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 ff9e 	bl	80089dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4b9e      	ldr	r3, [pc, #632]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 ff98 	bl	80089dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 ff91 	bl	80089dc <HAL_GPIO_WritePin>

		break;
 8000aba:	e1ac      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	4898      	ldr	r0, [pc, #608]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000abe:	f015 f883 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b96      	ldr	r3, [pc, #600]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 ff86 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000ad0:	e1a1      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4894      	ldr	r0, [pc, #592]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000ad4:	f015 f878 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b90      	ldr	r3, [pc, #576]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 ff7b 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000ae6:	e196      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	488f      	ldr	r0, [pc, #572]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aea:	f015 f86d 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8b      	ldr	r3, [pc, #556]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 ff71 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000afa:	e18c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488b      	ldr	r0, [pc, #556]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000afe:	f015 f863 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 ff67 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000b0e:	e182      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	4887      	ldr	r0, [pc, #540]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b12:	f015 f859 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b81      	ldr	r3, [pc, #516]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 ff5d 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000b22:	e178      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4883      	ldr	r0, [pc, #524]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b26:	f015 f84f 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 ff53 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000b36:	e16e      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	487f      	ldr	r0, [pc, #508]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b3a:	f015 f845 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b77      	ldr	r3, [pc, #476]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 ff48 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000b4c:	e163      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487b      	ldr	r0, [pc, #492]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b50:	f015 f83a 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 ff3d 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000b62:	e158      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4876      	ldr	r0, [pc, #472]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b66:	f015 f82f 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 ff32 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000b78:	e14d      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4872      	ldr	r0, [pc, #456]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b7c:	f015 f824 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 ff27 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000b8e:	e142      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	486d      	ldr	r0, [pc, #436]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b92:	f015 f819 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b61      	ldr	r3, [pc, #388]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 ff1c 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000ba4:	e137      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	4869      	ldr	r0, [pc, #420]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000ba8:	f015 f80e 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 ff11 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000bba:	e12c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4864      	ldr	r0, [pc, #400]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	f015 f803 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 ff07 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000bce:	e122      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	4860      	ldr	r0, [pc, #384]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000bd2:	f014 fff9 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 fefd 	bl	80089dc <HAL_GPIO_WritePin>
		break;
 8000be2:	e118      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485c      	ldr	r0, [pc, #368]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000be6:	f014 ffef 	bl	8015bc8 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000bea:	485c      	ldr	r0, [pc, #368]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bec:	f00d fa46 	bl	800e07c <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	485a      	ldr	r0, [pc, #360]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000bfc:	f004 fb5e 	bl	80052bc <HAL_DAC_Start_DMA>
		break;
 8000c00:	e109      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c02:	4859      	ldr	r0, [pc, #356]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000c04:	f014 ffe0 	bl	8015bc8 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000c08:	4854      	ldr	r0, [pc, #336]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000c0a:	f00d faa7 	bl	800e15c <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4854      	ldr	r0, [pc, #336]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c12:	f004 fc13 	bl	800543c <HAL_DAC_Stop_DMA>
		break;
 8000c16:	e0fe      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c18:	4854      	ldr	r0, [pc, #336]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c1a:	f014 ffd5 	bl	8015bc8 <puts>
		ERPA_ON = 1;
 8000c1e:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
		break;
 8000c24:	e0f7      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c26:	4853      	ldr	r0, [pc, #332]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c28:	f014 ffce 	bl	8015bc8 <puts>
		ERPA_ON = 0;
 8000c2c:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e0f0      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c34:	4850      	ldr	r0, [pc, #320]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c36:	f014 ffc7 	bl	8015bc8 <puts>
		PMT_ON = 1;
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		break;
 8000c40:	e0e9      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c42:	484f      	ldr	r0, [pc, #316]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c44:	f014 ffc0 	bl	8015bc8 <puts>
		PMT_ON = 0;
 8000c48:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e0e2      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c52:	f014 ffb9 	bl	8015bc8 <puts>
		HK_ON = 1;
 8000c56:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		break;
 8000c5c:	e0db      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c5e:	484b      	ldr	r0, [pc, #300]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c60:	f014 ffb2 	bl	8015bc8 <puts>
		HK_ON = 0;
 8000c64:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
		break;
 8000c6a:	e0d4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000c6c:	4848      	ldr	r0, [pc, #288]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c6e:	f014 ffab 	bl	8015bc8 <puts>
		if (step < 17) {
 8000c72:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	f200 80c6 	bhi.w	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
			step+=2;
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c86:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4832      	ldr	r0, [pc, #200]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c9a:	f004 fc72 	bl	8005582 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4830      	ldr	r0, [pc, #192]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000ca2:	f004 fab3 	bl	800520c <HAL_DAC_Start>
		}
		break;
 8000ca6:	e0af      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000ca8:	483b      	ldr	r0, [pc, #236]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000caa:	f014 ff8d 	bl	8015bc8 <puts>
		if (step > 3) {
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	f240 80aa 	bls.w	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
			step-=2;
 8000cb8:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4823      	ldr	r0, [pc, #140]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cd6:	f004 fc54 	bl	8005582 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cde:	f004 fa95 	bl	800520c <HAL_DAC_Start>
		}
		break;
 8000ce2:	e093      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ce4:	482d      	ldr	r0, [pc, #180]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000ce6:	f014 ff6f 	bl	8015bc8 <puts>
		if (cadence <= 50000){
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 808c 	bhi.w	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
			cadence *= 2;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d00:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000d0c:	e080      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
 8000d0e:	bf00      	nop
 8000d10:	080163bc 	.word	0x080163bc
 8000d14:	58020400 	.word	0x58020400
 8000d18:	080163c8 	.word	0x080163c8
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	080163d4 	.word	0x080163d4
 8000d24:	080163e0 	.word	0x080163e0
 8000d28:	080163f0 	.word	0x080163f0
 8000d2c:	080163fc 	.word	0x080163fc
 8000d30:	08016408 	.word	0x08016408
 8000d34:	08016414 	.word	0x08016414
 8000d38:	08016424 	.word	0x08016424
 8000d3c:	08016430 	.word	0x08016430
 8000d40:	0801643c 	.word	0x0801643c
 8000d44:	08016448 	.word	0x08016448
 8000d48:	08016454 	.word	0x08016454
 8000d4c:	08016464 	.word	0x08016464
 8000d50:	08016474 	.word	0x08016474
 8000d54:	08016480 	.word	0x08016480
 8000d58:	08016490 	.word	0x08016490
 8000d5c:	24000534 	.word	0x24000534
 8000d60:	24000008 	.word	0x24000008
 8000d64:	240002d4 	.word	0x240002d4
 8000d68:	080164a0 	.word	0x080164a0
 8000d6c:	080164b0 	.word	0x080164b0
 8000d70:	24000b37 	.word	0x24000b37
 8000d74:	080164b8 	.word	0x080164b8
 8000d78:	080164c4 	.word	0x080164c4
 8000d7c:	24000b36 	.word	0x24000b36
 8000d80:	080164cc 	.word	0x080164cc
 8000d84:	080164d4 	.word	0x080164d4
 8000d88:	24000b38 	.word	0x24000b38
 8000d8c:	080164dc 	.word	0x080164dc
 8000d90:	080164e4 	.word	0x080164e4
 8000d94:	24000004 	.word	0x24000004
 8000d98:	080164ec 	.word	0x080164ec
 8000d9c:	080164f8 	.word	0x080164f8
 8000da0:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000da4:	481e      	ldr	r0, [pc, #120]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000da6:	f014 ff0f 	bl	8015bc8 <puts>
		if (cadence >= 6250){
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f641 0269 	movw	r2, #6249	; 0x1869
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d92e      	bls.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
			cadence /= 2;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dbe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dca:	e023      	b.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000dcc:	4816      	ldr	r0, [pc, #88]	; (8000e28 <HAL_UART_RxCpltCallback+0x7d8>)
 8000dce:	f014 fefb 	bl	8015bc8 <puts>
		// TODO: Exit stop mode
		break;
 8000dd2:	e020      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x7dc>)
 8000dd6:	f014 fef7 	bl	8015bc8 <puts>
		// TODO: Enter stop mode
		break;
 8000dda:	e01c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <HAL_UART_RxCpltCallback+0x7e0>)
 8000dde:	f014 fef3 	bl	8015bc8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_RxCpltCallback+0x7e4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f012 ff5a 	bl	8013ca0 <xTaskResumeFromISR>
		break;
 8000dec:	e013      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <HAL_UART_RxCpltCallback+0x7e8>)
 8000df0:	f014 feea 	bl	8015bc8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_RxCpltCallback+0x7ec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f012 ff51 	bl	8013ca0 <xTaskResumeFromISR>
		break;
 8000dfe:	e00a      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	default:{
		printf("Unknown Command\n");
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <HAL_UART_RxCpltCallback+0x7f0>)
 8000e02:	f014 fee1 	bl	8015bc8 <puts>
		break;
 8000e06:	e006      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e08:	bf00      	nop
 8000e0a:	e004      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e0c:	bf00      	nop
 8000e0e:	e002      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e14:	bf00      	nop
	}
	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	08016504 	.word	0x08016504
 8000e24:	24000000 	.word	0x24000000
 8000e28:	08016510 	.word	0x08016510
 8000e2c:	08016520 	.word	0x08016520
 8000e30:	08016530 	.word	0x08016530
 8000e34:	24000670 	.word	0x24000670
 8000e38:	0801653c 	.word	0x0801653c
 8000e3c:	240008d0 	.word	0x240008d0
 8000e40:	08016548 	.word	0x08016548

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f002 fc4c 	bl	80036e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f89e 	bl	8000f8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e50:	f000 f94e 	bl	80010f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 fea0 	bl	8001b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 fe6e 	bl	8001b38 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e5c:	f000 fdd2 	bl	8001a04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e60:	f000 fe1e 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e64:	f000 fb5a 	bl	800151c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e68:	f000 fc50 	bl	800170c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e6c:	f000 fd54 	bl	8001918 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e70:	f000 fca4 	bl	80017bc <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e74:	f000 fa8e 	bl	8001394 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000e78:	f000 f96a 	bl	8001150 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e7c:	f000 fb1c 	bl	80014b8 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000e80:	f000 fbec 	bl	800165c <MX_SPI1_Init>
  MX_RTC_Init();
 8000e84:	f000 fb8c 	bl	80015a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000e88:	f001 f848 	bl	8001f1c <handshake>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <main+0x52>
	{
		Error_Handler();
 8000e92:	f001 fd4b 	bl	800292c <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4825      	ldr	r0, [pc, #148]	; (8000f30 <main+0xec>)
 8000e9a:	f00d f9ff 	bl	800e29c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4824      	ldr	r0, [pc, #144]	; (8000f34 <main+0xf0>)
 8000ea2:	f00d f9fb 	bl	800e29c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <main+0xf4>)
 8000eaa:	f00d f9f7 	bl	800e29c <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eae:	f011 fa95 	bl	80123dc <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <main+0xf8>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4822      	ldr	r0, [pc, #136]	; (8000f40 <main+0xfc>)
 8000eb8:	f011 fada 	bl	8012470 <osThreadNew>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <main+0x100>)
 8000ec0:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <main+0x104>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4821      	ldr	r0, [pc, #132]	; (8000f4c <main+0x108>)
 8000ec8:	f011 fad2 	bl	8012470 <osThreadNew>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <main+0x10c>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ed2:	4a20      	ldr	r2, [pc, #128]	; (8000f54 <main+0x110>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4820      	ldr	r0, [pc, #128]	; (8000f58 <main+0x114>)
 8000ed8:	f011 faca 	bl	8012470 <osThreadNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <main+0x118>)
 8000ee0:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <main+0x11c>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <main+0x120>)
 8000ee8:	f011 fac2 	bl	8012470 <osThreadNew>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <main+0x124>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <main+0x128>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <main+0x12c>)
 8000ef8:	f011 faba 	bl	8012470 <osThreadNew>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <main+0x130>)
 8000f00:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <main+0x134>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	481d      	ldr	r0, [pc, #116]	; (8000f7c <main+0x138>)
 8000f08:	f011 fab2 	bl	8012470 <osThreadNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <main+0x13c>)
 8000f10:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f011 fb9a 	bl	801264c <osEventFlagsNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <main+0x140>)
 8000f1c:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f1e:	f001 f88b 	bl	8002038 <system_setup>
	printf("Starting kernal...\n");
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <main+0x144>)
 8000f24:	f014 fe50 	bl	8015bc8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f28:	f011 fa7c 	bl	8012424 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f2c:	e7fe      	b.n	8000f2c <main+0xe8>
 8000f2e:	bf00      	nop
 8000f30:	240004e8 	.word	0x240004e8
 8000f34:	24000534 	.word	0x24000534
 8000f38:	24000580 	.word	0x24000580
 8000f3c:	080165a4 	.word	0x080165a4
 8000f40:	080026c9 	.word	0x080026c9
 8000f44:	24000660 	.word	0x24000660
 8000f48:	080165c8 	.word	0x080165c8
 8000f4c:	0800270d 	.word	0x0800270d
 8000f50:	24000664 	.word	0x24000664
 8000f54:	080165ec 	.word	0x080165ec
 8000f58:	08002751 	.word	0x08002751
 8000f5c:	24000668 	.word	0x24000668
 8000f60:	08016610 	.word	0x08016610
 8000f64:	08002795 	.word	0x08002795
 8000f68:	2400066c 	.word	0x2400066c
 8000f6c:	08016634 	.word	0x08016634
 8000f70:	080027b9 	.word	0x080027b9
 8000f74:	24000670 	.word	0x24000670
 8000f78:	08016658 	.word	0x08016658
 8000f7c:	08002861 	.word	0x08002861
 8000f80:	240008d0 	.word	0x240008d0
 8000f84:	24000b3c 	.word	0x24000b3c
 8000f88:	08016558 	.word	0x08016558

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09e      	sub	sp, #120	; 0x78
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	224c      	movs	r2, #76	; 0x4c
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f014 fcbe 	bl	801591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f014 fcb7 	bl	801591c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f008 fb3a 	bl	8009628 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <SystemClock_Config+0x158>)
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <SystemClock_Config+0x158>)
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc4:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <SystemClock_Config+0x158>)
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd8:	6193      	str	r3, [r2, #24]
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe6:	bf00      	nop
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <SystemClock_Config+0x15c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff4:	d1f8      	bne.n	8000fe8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <SystemClock_Config+0x160>)
 8000ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ffc:	4a3b      	ldr	r2, [pc, #236]	; (80010ec <SystemClock_Config+0x160>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <SystemClock_Config+0x160>)
 8001008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <SystemClock_Config+0x15c>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <SystemClock_Config+0x15c>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <SystemClock_Config+0x15c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <SystemClock_Config+0x158>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	4a2c      	ldr	r2, [pc, #176]	; (80010e4 <SystemClock_Config+0x158>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	62d3      	str	r3, [r2, #44]	; 0x2c
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <SystemClock_Config+0x158>)
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001046:	bf00      	nop
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <SystemClock_Config+0x15c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001054:	d1f8      	bne.n	8001048 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001056:	230a      	movs	r3, #10
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800105a:	2301      	movs	r3, #1
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106a:	2300      	movs	r3, #0
 800106c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800106e:	2304      	movs	r3, #4
 8001070:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001072:	233c      	movs	r3, #60	; 0x3c
 8001074:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800107a:	2314      	movs	r3, #20
 800107c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001082:	230c      	movs	r3, #12
 8001084:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001086:	2300      	movs	r3, #0
 8001088:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4618      	mov	r0, r3
 8001094:	f008 fb02 	bl	800969c <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800109e:	f001 fc45 	bl	800292c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	233f      	movs	r3, #63	; 0x3f
 80010a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2303      	movs	r3, #3
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010ae:	2308      	movs	r3, #8
 80010b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2104      	movs	r1, #4
 80010ca:	4618      	mov	r0, r3
 80010cc:	f008 ff40 	bl	8009f50 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80010d6:	f001 fc29 	bl	800292c <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3778      	adds	r7, #120	; 0x78
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	58000400 	.word	0x58000400
 80010e8:	58024800 	.word	0x58024800
 80010ec:	58024400 	.word	0x58024400

080010f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0b0      	sub	sp, #192	; 0xc0
 80010f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f014 fc0d 	bl	801591c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800110e:	2304      	movs	r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001112:	2309      	movs	r3, #9
 8001114:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001116:	2304      	movs	r3, #4
 8001118:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001122:	23c0      	movs	r3, #192	; 0xc0
 8001124:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001126:	2320      	movs	r3, #32
 8001128:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800112a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4618      	mov	r0, r3
 800113a:	f009 fad7 	bl	800a6ec <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001144:	f001 fbf2 	bl	800292c <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	37c0      	adds	r7, #192	; 0xc0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001174:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <MX_ADC1_Init+0x210>)
 8001176:	4a7b      	ldr	r2, [pc, #492]	; (8001364 <MX_ADC1_Init+0x214>)
 8001178:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <MX_ADC1_Init+0x210>)
 800117c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001180:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <MX_ADC1_Init+0x210>)
 8001184:	2208      	movs	r2, #8
 8001186:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <MX_ADC1_Init+0x210>)
 800118a:	2201      	movs	r2, #1
 800118c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b74      	ldr	r3, [pc, #464]	; (8001360 <MX_ADC1_Init+0x210>)
 8001190:	2204      	movs	r2, #4
 8001192:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001194:	4b72      	ldr	r3, [pc, #456]	; (8001360 <MX_ADC1_Init+0x210>)
 8001196:	2200      	movs	r2, #0
 8001198:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119a:	4b71      	ldr	r3, [pc, #452]	; (8001360 <MX_ADC1_Init+0x210>)
 800119c:	2201      	movs	r2, #1
 800119e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011a0:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <MX_ADC1_Init+0x210>)
 80011a2:	220b      	movs	r2, #11
 80011a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <MX_ADC1_Init+0x210>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <MX_ADC1_Init+0x210>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011b8:	4b69      	ldr	r3, [pc, #420]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011be:	4b68      	ldr	r3, [pc, #416]	; (8001360 <MX_ADC1_Init+0x210>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <MX_ADC1_Init+0x210>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011cc:	4b64      	ldr	r3, [pc, #400]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d4:	4862      	ldr	r0, [pc, #392]	; (8001360 <MX_ADC1_Init+0x210>)
 80011d6:	f002 fd11 	bl	8003bfc <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011e0:	f001 fba4 	bl	800292c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	485c      	ldr	r0, [pc, #368]	; (8001360 <MX_ADC1_Init+0x210>)
 80011f0:	f003 fe2c 	bl	8004e4c <HAL_ADCEx_MultiModeConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011fa:	f001 fb97 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <MX_ADC1_Init+0x218>)
 8001200:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001202:	2306      	movs	r3, #6
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001206:	2307      	movs	r3, #7
 8001208:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001210:	2304      	movs	r3, #4
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	484f      	ldr	r0, [pc, #316]	; (8001360 <MX_ADC1_Init+0x210>)
 8001222:	f002 ff6f 	bl	8004104 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800122c:	f001 fb7e 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001230:	4b4e      	ldr	r3, [pc, #312]	; (800136c <MX_ADC1_Init+0x21c>)
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001234:	230c      	movs	r3, #12
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4848      	ldr	r0, [pc, #288]	; (8001360 <MX_ADC1_Init+0x210>)
 800123e:	f002 ff61 	bl	8004104 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001248:	f001 fb70 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <MX_ADC1_Init+0x220>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001250:	2312      	movs	r3, #18
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4841      	ldr	r0, [pc, #260]	; (8001360 <MX_ADC1_Init+0x210>)
 800125a:	f002 ff53 	bl	8004104 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001264:	f001 fb62 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <MX_ADC1_Init+0x224>)
 800126a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800126c:	2318      	movs	r3, #24
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	483a      	ldr	r0, [pc, #232]	; (8001360 <MX_ADC1_Init+0x210>)
 8001276:	f002 ff45 	bl	8004104 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001280:	f001 fb54 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001284:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <MX_ADC1_Init+0x228>)
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4833      	ldr	r0, [pc, #204]	; (8001360 <MX_ADC1_Init+0x210>)
 8001294:	f002 ff36 	bl	8004104 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800129e:	f001 fb45 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <MX_ADC1_Init+0x22c>)
 80012a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012a6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <MX_ADC1_Init+0x210>)
 80012b2:	f002 ff27 	bl	8004104 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012bc:	f001 fb36 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <MX_ADC1_Init+0x230>)
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012c4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4824      	ldr	r0, [pc, #144]	; (8001360 <MX_ADC1_Init+0x210>)
 80012d0:	f002 ff18 	bl	8004104 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012da:	f001 fb27 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_ADC1_Init+0x234>)
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012e2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	481c      	ldr	r0, [pc, #112]	; (8001360 <MX_ADC1_Init+0x210>)
 80012ee:	f002 ff09 	bl	8004104 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012f8:	f001 fb18 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_ADC1_Init+0x238>)
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001300:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4815      	ldr	r0, [pc, #84]	; (8001360 <MX_ADC1_Init+0x210>)
 800130c:	f002 fefa 	bl	8004104 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001316:	f001 fb09 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_ADC1_Init+0x23c>)
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800131e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_ADC1_Init+0x210>)
 800132a:	f002 feeb 	bl	8004104 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001334:	f001 fafa 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_ADC1_Init+0x240>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800133c:	f240 2306 	movw	r3, #518	; 0x206
 8001340:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_ADC1_Init+0x210>)
 8001348:	f002 fedc 	bl	8004104 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001352:	f001 faeb 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2400011c 	.word	0x2400011c
 8001364:	40022000 	.word	0x40022000
 8001368:	0c900008 	.word	0x0c900008
 800136c:	10c00010 	.word	0x10c00010
 8001370:	14f00020 	.word	0x14f00020
 8001374:	1d500080 	.word	0x1d500080
 8001378:	21800100 	.word	0x21800100
 800137c:	25b00200 	.word	0x25b00200
 8001380:	2a000400 	.word	0x2a000400
 8001384:	2e300800 	.word	0x2e300800
 8001388:	3ac04000 	.word	0x3ac04000
 800138c:	3ef08000 	.word	0x3ef08000
 8001390:	47520000 	.word	0x47520000

08001394 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013ac:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <MX_ADC3_Init+0x114>)
 80013b0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013b4:	2208      	movs	r2, #8
 80013b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b8:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013ca:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013d0:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013d8:	2200      	movs	r2, #0
 80013da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ea:	2203      	movs	r2, #3
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001406:	f002 fbf9 	bl	8003bfc <HAL_ADC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001410:	f001 fa8c 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_ADC3_Init+0x118>)
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001418:	2306      	movs	r3, #6
 800141a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800141c:	2307      	movs	r3, #7
 800141e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001420:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001424:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001426:	2304      	movs	r3, #4
 8001428:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001438:	f002 fe64 	bl	8004104 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001442:	f001 fa73 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_ADC3_Init+0x11c>)
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800144a:	230c      	movs	r3, #12
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001454:	f002 fe56 	bl	8004104 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800145e:	f001 fa65 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001466:	2312      	movs	r3, #18
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001470:	f002 fe48 	bl	8004104 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800147a:	f001 fa57 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_ADC3_Init+0x120>)
 8001480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001482:	2318      	movs	r3, #24
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_ADC3_Init+0x110>)
 800148c:	f002 fe3a 	bl	8004104 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001496:	f001 fa49 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	24000180 	.word	0x24000180
 80014a8:	58026000 	.word	0x58026000
 80014ac:	cb840000 	.word	0xcb840000
 80014b0:	cfb80000 	.word	0xcfb80000
 80014b4:	04300002 	.word	0x04300002

080014b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2224      	movs	r2, #36	; 0x24
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f014 fa29 	bl	801591c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_DAC1_Init+0x60>)
 80014ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014d2:	f003 fe79 	bl	80051c8 <HAL_DAC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014dc:	f001 fa26 	bl	800292c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014e4:	230a      	movs	r3, #10
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014fc:	f004 f894 	bl	8005628 <HAL_DAC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001506:	f001 fa11 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	240002d4 	.word	0x240002d4
 8001518:	40007400 	.word	0x40007400

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_I2C1_Init+0x78>)
 8001522:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <MX_I2C1_Init+0x7c>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_I2C1_Init+0x78>)
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <MX_I2C1_Init+0x80>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_I2C1_Init+0x78>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_I2C1_Init+0x78>)
 8001534:	2201      	movs	r2, #1
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_I2C1_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_I2C1_Init+0x78>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_I2C1_Init+0x78>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C1_Init+0x78>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_I2C1_Init+0x78>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <MX_I2C1_Init+0x78>)
 8001558:	f007 fa5a 	bl	8008a10 <HAL_I2C_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001562:	f001 f9e3 	bl	800292c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <MX_I2C1_Init+0x78>)
 800156a:	f007 ffa1 	bl	80094b0 <HAL_I2CEx_ConfigAnalogFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001574:	f001 f9da 	bl	800292c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_I2C1_Init+0x78>)
 800157c:	f007 ffe3 	bl	8009546 <HAL_I2CEx_ConfigDigitalFilter>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001586:	f001 f9d1 	bl	800292c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800158a:	2001      	movs	r0, #1
 800158c:	f008 f828 	bl	80095e0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	24000360 	.word	0x24000360
 8001598:	40005400 	.word	0x40005400
 800159c:	0050174f 	.word	0x0050174f

080015a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_RTC_Init+0xb4>)
 80015ba:	4a27      	ldr	r2, [pc, #156]	; (8001658 <MX_RTC_Init+0xb8>)
 80015bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <MX_RTC_Init+0xb4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_RTC_Init+0xb4>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_RTC_Init+0xb4>)
 80015cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_RTC_Init+0xb4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MX_RTC_Init+0xb4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_RTC_Init+0xb4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_RTC_Init+0xb4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015ea:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_RTC_Init+0xb4>)
 80015ec:	f00b fd7c 	bl	800d0e8 <HAL_RTC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015f6:	f001 f999 	bl	800292c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015fe:	2300      	movs	r3, #0
 8001600:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001602:	2300      	movs	r3, #0
 8001604:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2201      	movs	r2, #1
 8001612:	4619      	mov	r1, r3
 8001614:	480f      	ldr	r0, [pc, #60]	; (8001654 <MX_RTC_Init+0xb4>)
 8001616:	f00b fde9 	bl	800d1ec <HAL_RTC_SetTime>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001620:	f001 f984 	bl	800292c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001624:	2305      	movs	r3, #5
 8001626:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001628:	2305      	movs	r3, #5
 800162a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 800162c:	2331      	movs	r3, #49	; 0x31
 800162e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001630:	2324      	movs	r3, #36	; 0x24
 8001632:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2201      	movs	r2, #1
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_RTC_Init+0xb4>)
 800163c:	f00b fed0 	bl	800d3e0 <HAL_RTC_SetDate>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001646:	f001 f971 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	240003b4 	.word	0x240003b4
 8001658:	58004000 	.word	0x58004000

0800165c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001662:	4a29      	ldr	r2, [pc, #164]	; (8001708 <MX_SPI1_Init+0xac>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001670:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001674:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001678:	220f      	movs	r2, #15
 800167a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_SPI1_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_SPI1_Init+0xa8>)
 800168a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800168e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001692:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_SPI1_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016f0:	f00c f81c 	bl	800d72c <HAL_SPI_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80016fa:	f001 f917 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	240003d8 	.word	0x240003d8
 8001708:	40013000 	.word	0x40013000

0800170c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <MX_SPI2_Init+0xac>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800171c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001720:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001724:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001728:	220f      	movs	r2, #15
 800172a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800173a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800173e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001742:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001746:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_SPI2_Init+0xa8>)
 80017a0:	f00b ffc4 	bl	800d72c <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017aa:	f001 f8bf 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000460 	.word	0x24000460
 80017b8:	40003800 	.word	0x40003800

080017bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09a      	sub	sp, #104	; 0x68
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	222c      	movs	r2, #44	; 0x2c
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f014 f890 	bl	801591c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017fc:	4b44      	ldr	r3, [pc, #272]	; (8001910 <MX_TIM1_Init+0x154>)
 80017fe:	4a45      	ldr	r2, [pc, #276]	; (8001914 <MX_TIM1_Init+0x158>)
 8001800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <MX_TIM1_Init+0x154>)
 8001804:	22ef      	movs	r2, #239	; 0xef
 8001806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <MX_TIM1_Init+0x154>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <MX_TIM1_Init+0x154>)
 8001810:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <MX_TIM1_Init+0x154>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800181c:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <MX_TIM1_Init+0x154>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <MX_TIM1_Init+0x154>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001828:	4839      	ldr	r0, [pc, #228]	; (8001910 <MX_TIM1_Init+0x154>)
 800182a:	f00c fbd0 	bl	800dfce <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001834:	f001 f87a 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001842:	4619      	mov	r1, r3
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <MX_TIM1_Init+0x154>)
 8001846:	f00d fa0f 	bl	800ec68 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001850:	f001 f86c 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001854:	482e      	ldr	r0, [pc, #184]	; (8001910 <MX_TIM1_Init+0x154>)
 8001856:	f00c fe7b 	bl	800e550 <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001860:	f001 f864 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001874:	4619      	mov	r1, r3
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <MX_TIM1_Init+0x154>)
 8001878:	f00d ff4c 	bl	800f714 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001882:	f001 f853 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001886:	2360      	movs	r3, #96	; 0x60
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800188a:	f240 13df 	movw	r3, #479	; 0x1df
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a8:	2200      	movs	r2, #0
 80018aa:	4619      	mov	r1, r3
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM1_Init+0x154>)
 80018ae:	f00d f8c7 	bl	800ea40 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018b8:	f001 f838 	bl	800292c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM1_Init+0x154>)
 80018f2:	f00d ff9d 	bl	800f830 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018fc:	f001 f816 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM1_Init+0x154>)
 8001902:	f001 fba1 	bl	8003048 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3768      	adds	r7, #104	; 0x68
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	240004e8 	.word	0x240004e8
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800194c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001954:	22ef      	movs	r2, #239	; 0xef
 8001956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001960:	f640 4234 	movw	r2, #3124	; 0xc34
 8001964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001972:	4823      	ldr	r0, [pc, #140]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001974:	f00c fb2b 	bl	800dfce <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800197e:	f000 ffd5 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198c:	4619      	mov	r1, r3
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001990:	f00d f96a 	bl	800ec68 <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800199a:	f000 ffc7 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019a0:	f00c fdd6 	bl	800e550 <HAL_TIM_PWM_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019aa:	f000 ffbf 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ae:	2320      	movs	r3, #32
 80019b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4810      	ldr	r0, [pc, #64]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019be:	f00d fea9 	bl	800f714 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c8:	f000 ffb0 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	220c      	movs	r2, #12
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019e4:	f00d f82c 	bl	800ea40 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019ee:	f000 ff9d 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019f4:	f001 fb28 	bl	8003048 <HAL_TIM_MspPostInit>

}
 80019f8:	bf00      	nop
 80019fa:	3738      	adds	r7, #56	; 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000534 	.word	0x24000534

08001a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <MX_TIM3_Init+0x98>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a2a:	22ef      	movs	r2, #239	; 0xef
 8001a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a4a:	f00c fac0 	bl	800dfce <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a54:	f000 ff6a 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a66:	f00d f8ff 	bl	800ec68 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a70:	f000 ff5c 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a82:	f00d fe47 	bl	800f714 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a8c:	f000 ff4e 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	24000580 	.word	0x24000580
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <MX_USART1_UART_Init+0x94>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aac:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aea:	f00d ff3d 	bl	800f968 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001af4:	f000 ff1a 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001afc:	f010 fb5f 	bl	80121be <HAL_UARTEx_SetTxFifoThreshold>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b06:	f000 ff11 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b0e:	f010 fb94 	bl	801223a <HAL_UARTEx_SetRxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f000 ff08 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b1e:	f010 fb15 	bl	801214c <HAL_UARTEx_DisableFifoMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b28:	f000 ff00 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	240005cc 	.word	0x240005cc
 8001b34:	40011000 	.word	0x40011000

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	200b      	movs	r0, #11
 8001b62:	f003 fb09 	bl	8005178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b66:	200b      	movs	r0, #11
 8001b68:	f003 fb20 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2105      	movs	r1, #5
 8001b70:	200c      	movs	r0, #12
 8001b72:	f003 fb01 	bl	8005178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b76:	200c      	movs	r0, #12
 8001b78:	f003 fb18 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	2010      	movs	r0, #16
 8001b82:	f003 faf9 	bl	8005178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b86:	2010      	movs	r0, #16
 8001b88:	f003 fb10 	bl	80051ac <HAL_NVIC_EnableIRQ>

}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c2c:	4815      	ldr	r0, [pc, #84]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c2e:	f006 fed5 	bl	80089dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2164      	movs	r1, #100	; 0x64
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c38:	f006 fed0 	bl	80089dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c3c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c56:	f006 fcf9 	bl	800864c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c5a:	2364      	movs	r3, #100	; 0x64
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c72:	f006 fceb 	bl	800864c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58020800 	.word	0x58020800
 8001c88:	58020400 	.word	0x58020400

08001c8c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001c96:	2300      	movs	r3, #0
 8001c98:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	f107 0208 	add.w	r2, r7, #8
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	4817      	ldr	r0, [pc, #92]	; (8001d08 <poll_i2c_sensor+0x7c>)
 8001cac:	f006 ff4c 	bl	8008b48 <HAL_I2C_Master_Transmit>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001cb4:	7b7b      	ldrb	r3, [r7, #13]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001cba:	4814      	ldr	r0, [pc, #80]	; (8001d0c <poll_i2c_sensor+0x80>)
 8001cbc:	f013 ff84 	bl	8015bc8 <puts>
 8001cc0:	e01c      	b.n	8001cfc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	f107 0208 	add.w	r2, r7, #8
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <poll_i2c_sensor+0x7c>)
 8001cd4:	f007 f850 	bl	8008d78 <HAL_I2C_Master_Receive>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ce2:	480b      	ldr	r0, [pc, #44]	; (8001d10 <poll_i2c_sensor+0x84>)
 8001ce4:	f013 ff70 	bl	8015bc8 <puts>
 8001ce8:	e008      	b.n	8001cfc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001cea:	7a3b      	ldrb	r3, [r7, #8]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001cf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cf4:	7a7a      	ldrb	r2, [r7, #9]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	10db      	asrs	r3, r3, #3
 8001cfa:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	24000360 	.word	0x24000360
 8001d0c:	0801656c 	.word	0x0801656c
 8001d10:	0801657c 	.word	0x0801657c

08001d14 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d1c:	f107 010c 	add.w	r1, r7, #12
 8001d20:	2301      	movs	r3, #1
 8001d22:	2201      	movs	r2, #1
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <receive_pmt_spi+0x44>)
 8001d26:	f00b fe25 	bl	800d974 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d2e:	7b7b      	ldrb	r3, [r7, #13]
 8001d30:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <receive_pmt_spi+0x44>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <receive_pmt_spi+0x44>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d40:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7bba      	ldrb	r2, [r7, #14]
 8001d46:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	701a      	strb	r2, [r3, #0]
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	240003d8 	.word	0x240003d8

08001d5c <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d64:	f107 010c 	add.w	r1, r7, #12
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <receive_erpa_spi+0x44>)
 8001d6e:	f00b fe01 	bl	800d974 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d76:	7b7b      	ldrb	r3, [r7, #13]
 8001d78:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <receive_erpa_spi+0x44>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <receive_erpa_spi+0x44>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d88:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7bba      	ldrb	r2, [r7, #14]
 8001d8e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3301      	adds	r3, #1
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	701a      	strb	r2, [r3, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	24000460 	.word	0x24000460

08001da4 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <receive_erpa_adc+0x30>)
 8001dae:	885b      	ldrh	r3, [r3, #2]
 8001db0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <receive_erpa_adc+0x30>)
 8001db4:	895b      	ldrh	r3, [r3, #10]
 8001db6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	89fa      	ldrh	r2, [r7, #14]
 8001dbc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	89ba      	ldrh	r2, [r7, #12]
 8001dc4:	801a      	strh	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	24000bc0 	.word	0x24000bc0

08001dd8 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001de0:	2390      	movs	r3, #144	; 0x90
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff52 	bl	8001c8c <poll_i2c_sensor>
 8001de8:	4603      	mov	r3, r0
 8001dea:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001dec:	2394      	movs	r3, #148	; 0x94
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff4c 	bl	8001c8c <poll_i2c_sensor>
 8001df4:	4603      	mov	r3, r0
 8001df6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001df8:	2392      	movs	r3, #146	; 0x92
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff46 	bl	8001c8c <poll_i2c_sensor>
 8001e00:	4603      	mov	r3, r0
 8001e02:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001e04:	2396      	movs	r3, #150	; 0x96
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff40 	bl	8001c8c <poll_i2c_sensor>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	89fa      	ldrh	r2, [r7, #14]
 8001e14:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	89ba      	ldrh	r2, [r7, #12]
 8001e1c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	897a      	ldrh	r2, [r7, #10]
 8001e24:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3306      	adds	r3, #6
 8001e2a:	893a      	ldrh	r2, [r7, #8]
 8001e2c:	801a      	strh	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e42:	8a9b      	ldrh	r3, [r3, #20]
 8001e44:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e48:	8a1b      	ldrh	r3, [r3, #16]
 8001e4a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e54:	8a5b      	ldrh	r3, [r3, #18]
 8001e56:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e5a:	889b      	ldrh	r3, [r3, #4]
 8001e5c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e60:	88db      	ldrh	r3, [r3, #6]
 8001e62:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e66:	89db      	ldrh	r3, [r3, #14]
 8001e68:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e6c:	891b      	ldrh	r3, [r3, #8]
 8001e6e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <receive_hk_adc1+0x90>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8bfa      	ldrh	r2, [r7, #30]
 8001e7a:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	8bba      	ldrh	r2, [r7, #28]
 8001e82:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	8b7a      	ldrh	r2, [r7, #26]
 8001e8a:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3306      	adds	r3, #6
 8001e90:	8b3a      	ldrh	r2, [r7, #24]
 8001e92:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3308      	adds	r3, #8
 8001e98:	8afa      	ldrh	r2, [r7, #22]
 8001e9a:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	330a      	adds	r3, #10
 8001ea0:	8aba      	ldrh	r2, [r7, #20]
 8001ea2:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	8a7a      	ldrh	r2, [r7, #18]
 8001eaa:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	330e      	adds	r3, #14
 8001eb0:	8a3a      	ldrh	r2, [r7, #16]
 8001eb2:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	801a      	strh	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3724      	adds	r7, #36	; 0x24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	24000bc0 	.word	0x24000bc0

08001ecc <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <receive_hk_adc3+0x4c>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <receive_hk_adc3+0x4c>)
 8001edc:	885b      	ldrh	r3, [r3, #2]
 8001ede:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <receive_hk_adc3+0x4c>)
 8001ee2:	889b      	ldrh	r3, [r3, #4]
 8001ee4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <receive_hk_adc3+0x4c>)
 8001ee8:	88db      	ldrh	r3, [r3, #6]
 8001eea:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	89fa      	ldrh	r2, [r7, #14]
 8001ef0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	89ba      	ldrh	r2, [r7, #12]
 8001ef8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	897a      	ldrh	r2, [r7, #10]
 8001f00:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3306      	adds	r3, #6
 8001f06:	893a      	ldrh	r2, [r7, #8]
 8001f08:	801a      	strh	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	24000be0 	.word	0x24000be0

08001f1c <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b090      	sub	sp, #64	; 0x40
 8001f20:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f22:	230a      	movs	r3, #10
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f26:	f107 011c 	add.w	r1, r7, #28
 8001f2a:	2364      	movs	r3, #100	; 0x64
 8001f2c:	2209      	movs	r2, #9
 8001f2e:	4840      	ldr	r0, [pc, #256]	; (8002030 <handshake+0x114>)
 8001f30:	f00d fdf8 	bl	800fb24 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f34:	7f3b      	ldrb	r3, [r7, #28]
 8001f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	d1f1      	bne.n	8001f26 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001f42:	7f7b      	ldrb	r3, [r7, #29]
 8001f44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001f48:	7fbb      	ldrb	r3, [r7, #30]
 8001f4a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001f54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001f5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f68:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001f80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f84:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001f86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f8a:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001f8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f90:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001f92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f96:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001f98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f9c:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001f9e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001fa2:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001fa4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fa6:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4820      	ldr	r0, [pc, #128]	; (8002034 <handshake+0x118>)
 8001fb2:	f00b fa15 	bl	800d3e0 <HAL_RTC_SetDate>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001fbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <handshake+0xac>
	{
		Error_Handler();
 8001fc4:	f000 fcb2 	bl	800292c <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4819      	ldr	r0, [pc, #100]	; (8002034 <handshake+0x118>)
 8001fd0:	f00b f90c 	bl	800d1ec <HAL_RTC_SetTime>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001fda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <handshake+0xca>
	{
		Error_Handler();
 8001fe2:	f000 fca3 	bl	800292c <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001fe6:	23fa      	movs	r3, #250	; 0xfa
 8001fe8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002008:	e009      	b.n	800201e <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 800200a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800200e:	2364      	movs	r3, #100	; 0x64
 8002010:	2205      	movs	r2, #5
 8002012:	4807      	ldr	r0, [pc, #28]	; (8002030 <handshake+0x114>)
 8002014:	f00d fcf8 	bl	800fa08 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8002018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201a:	3301      	adds	r3, #1
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002022:	429a      	cmp	r2, r3
 8002024:	dbf1      	blt.n	800200a <handshake+0xee>
	}

	return 1;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3740      	adds	r7, #64	; 0x40
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	240005cc 	.word	0x240005cc
 8002034:	240003b4 	.word	0x240003b4

08002038 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 800203c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002040:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002046:	210c      	movs	r1, #12
 8002048:	4818      	ldr	r0, [pc, #96]	; (80020ac <system_setup+0x74>)
 800204a:	f00c fae3 	bl	800e614 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800204e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002056:	4816      	ldr	r0, [pc, #88]	; (80020b0 <system_setup+0x78>)
 8002058:	f002 fe94 	bl	8004d84 <HAL_ADCEx_Calibration_Start>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8002062:	f000 fc63 	bl	800292c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002066:	220b      	movs	r2, #11
 8002068:	4912      	ldr	r1, [pc, #72]	; (80020b4 <system_setup+0x7c>)
 800206a:	4811      	ldr	r0, [pc, #68]	; (80020b0 <system_setup+0x78>)
 800206c:	f001 ff68 	bl	8003f40 <HAL_ADC_Start_DMA>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002076:	f000 fc59 	bl	800292c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800207a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800207e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <system_setup+0x80>)
 8002084:	f002 fe7e 	bl	8004d84 <HAL_ADCEx_Calibration_Start>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 800208e:	f000 fc4d 	bl	800292c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002092:	2204      	movs	r2, #4
 8002094:	4909      	ldr	r1, [pc, #36]	; (80020bc <system_setup+0x84>)
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <system_setup+0x80>)
 8002098:	f001 ff52 	bl	8003f40 <HAL_ADC_Start_DMA>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020a2:	f000 fc43 	bl	800292c <Error_Handler>
	}
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	24000534 	.word	0x24000534
 80020b0:	2400011c 	.word	0x2400011c
 80020b4:	24000bc0 	.word	0x24000bc0
 80020b8:	24000180 	.word	0x24000180
 80020bc:	24000be0 	.word	0x24000be0

080020c0 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	481d      	ldr	r0, [pc, #116]	; (8002148 <getTimestamp+0x88>)
 80020d2:	f00b f929 	bl	800d328 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	481a      	ldr	r0, [pc, #104]	; (8002148 <getTimestamp+0x88>)
 80020e0:	f00b fa06 	bl	800d4f0 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ea:	fb03 f202 	mul.w	r2, r3, r2
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <getTimestamp+0x88>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3301      	adds	r3, #1
 8002106:	7b7a      	ldrb	r2, [r7, #13]
 8002108:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3302      	adds	r3, #2
 800210e:	7bba      	ldrb	r2, [r7, #14]
 8002110:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3303      	adds	r3, #3
 8002116:	7c3a      	ldrb	r2, [r7, #16]
 8002118:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	7c7a      	ldrb	r2, [r7, #17]
 8002120:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3305      	adds	r3, #5
 8002126:	7cba      	ldrb	r2, [r7, #18]
 8002128:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	0a1a      	lsrs	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3306      	adds	r3, #6
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3307      	adds	r3, #7
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]

}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	240003b4 	.word	0x240003b4

0800214c <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002152:	bf00      	nop
 8002154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002158:	483a      	ldr	r0, [pc, #232]	; (8002244 <sample_pmt+0xf8>)
 800215a:	f006 fc27 	bl	80089ac <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f7      	bne.n	8002154 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002164:	200e      	movs	r0, #14
 8002166:	f013 fbbb 	bl	80158e0 <malloc>
 800216a:	4603      	mov	r3, r0
 800216c:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800216e:	2002      	movs	r0, #2
 8002170:	f013 fbb6 	bl	80158e0 <malloc>
 8002174:	4603      	mov	r3, r0
 8002176:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002178:	2008      	movs	r0, #8
 800217a:	f013 fbb1 	bl	80158e0 <malloc>
 800217e:	4603      	mov	r3, r0
 8002180:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff9c 	bl	80020c0 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002188:	68b8      	ldr	r0, [r7, #8]
 800218a:	f7ff fdc3 	bl	8001d14 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	22bb      	movs	r2, #187	; 0xbb
 8002192:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	22bb      	movs	r2, #187	; 0xbb
 800219a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <sample_pmt+0xfc>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3302      	adds	r3, #2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <sample_pmt+0xfc>)
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3303      	adds	r3, #3
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3304      	adds	r3, #4
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3305      	adds	r3, #5
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	7852      	ldrb	r2, [r2, #1]
 80021ca:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3306      	adds	r3, #6
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	7812      	ldrb	r2, [r2, #0]
 80021d4:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3307      	adds	r3, #7
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	7852      	ldrb	r2, [r2, #1]
 80021de:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3308      	adds	r3, #8
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	7892      	ldrb	r2, [r2, #2]
 80021e8:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3309      	adds	r3, #9
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	78d2      	ldrb	r2, [r2, #3]
 80021f2:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	330a      	adds	r3, #10
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	7912      	ldrb	r2, [r2, #4]
 80021fc:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	330b      	adds	r3, #11
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	7952      	ldrb	r2, [r2, #5]
 8002206:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	330c      	adds	r3, #12
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	7992      	ldrb	r2, [r2, #6]
 8002210:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	330d      	adds	r3, #13
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	79d2      	ldrb	r2, [r2, #7]
 800221a:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 1);
 800221c:	2301      	movs	r3, #1
 800221e:	220e      	movs	r2, #14
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	480a      	ldr	r0, [pc, #40]	; (800224c <sample_pmt+0x100>)
 8002224:	f00d fbf0 	bl	800fa08 <HAL_UART_Transmit>
	free(buffer);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f013 fb61 	bl	80158f0 <free>
	free(pmt_spi);
 800222e:	68b8      	ldr	r0, [r7, #8]
 8002230:	f013 fb5e 	bl	80158f0 <free>
	free(timestamp);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f013 fb5b 	bl	80158f0 <free>
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	58020000 	.word	0x58020000
 8002248:	24000b30 	.word	0x24000b30
 800224c:	240005cc 	.word	0x240005cc

08002250 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002256:	bf00      	nop
 8002258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225c:	484e      	ldr	r0, [pc, #312]	; (8002398 <sample_erpa+0x148>)
 800225e:	f006 fba5 	bl	80089ac <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f7      	bne.n	8002258 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002268:	2012      	movs	r0, #18
 800226a:	f013 fb39 	bl	80158e0 <malloc>
 800226e:	4603      	mov	r3, r0
 8002270:	60fb      	str	r3, [r7, #12]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8002272:	2002      	movs	r0, #2
 8002274:	f013 fb34 	bl	80158e0 <malloc>
 8002278:	4603      	mov	r3, r0
 800227a:	60bb      	str	r3, [r7, #8]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 800227c:	2004      	movs	r0, #4
 800227e:	f013 fb2f 	bl	80158e0 <malloc>
 8002282:	4603      	mov	r3, r0
 8002284:	607b      	str	r3, [r7, #4]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002286:	2008      	movs	r0, #8
 8002288:	f013 fb2a 	bl	80158e0 <malloc>
 800228c:	4603      	mov	r3, r0
 800228e:	603b      	str	r3, [r7, #0]
	getTimestamp(timestamp);
 8002290:	6838      	ldr	r0, [r7, #0]
 8002292:	f7ff ff15 	bl	80020c0 <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7ff fd60 	bl	8001d5c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fd81 	bl	8001da4 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	22aa      	movs	r2, #170	; 0xaa
 80022a6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	22aa      	movs	r2, #170	; 0xaa
 80022ae:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <sample_erpa+0x14c>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3302      	adds	r3, #2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <sample_erpa+0x14c>)
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3303      	adds	r3, #3
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3304      	adds	r3, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3305      	adds	r3, #5
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3302      	adds	r3, #2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3306      	adds	r3, #6
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3302      	adds	r3, #2
 80022fe:	881a      	ldrh	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3307      	adds	r3, #7
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3308      	adds	r3, #8
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3309      	adds	r3, #9
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	7852      	ldrb	r2, [r2, #1]
 800231a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	330a      	adds	r3, #10
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	330b      	adds	r3, #11
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	7852      	ldrb	r2, [r2, #1]
 800232e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	330c      	adds	r3, #12
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	7892      	ldrb	r2, [r2, #2]
 8002338:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	330d      	adds	r3, #13
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	78d2      	ldrb	r2, [r2, #3]
 8002342:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	330e      	adds	r3, #14
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	7912      	ldrb	r2, [r2, #4]
 800234c:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	330f      	adds	r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	7952      	ldrb	r2, [r2, #5]
 8002356:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3310      	adds	r3, #16
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	7992      	ldrb	r2, [r2, #6]
 8002360:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3311      	adds	r3, #17
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	79d2      	ldrb	r2, [r2, #7]
 800236a:	701a      	strb	r2, [r3, #0]



	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 1);
 800236c:	2301      	movs	r3, #1
 800236e:	2212      	movs	r2, #18
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	480b      	ldr	r0, [pc, #44]	; (80023a0 <sample_erpa+0x150>)
 8002374:	f00d fb48 	bl	800fa08 <HAL_UART_Transmit>
	free(buffer);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f013 fab9 	bl	80158f0 <free>
	free(erpa_spi);
 800237e:	68b8      	ldr	r0, [r7, #8]
 8002380:	f013 fab6 	bl	80158f0 <free>
	free(erpa_adc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f013 fab3 	bl	80158f0 <free>
	free(timestamp);
 800238a:	6838      	ldr	r0, [r7, #0]
 800238c:	f013 fab0 	bl	80158f0 <free>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	58020400 	.word	0x58020400
 800239c:	24000b32 	.word	0x24000b32
 80023a0:	240005cc 	.word	0x240005cc

080023a4 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80023aa:	202e      	movs	r0, #46	; 0x2e
 80023ac:	f013 fa98 	bl	80158e0 <malloc>
 80023b0:	4603      	mov	r3, r0
 80023b2:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 80023b4:	2008      	movs	r0, #8
 80023b6:	f013 fa93 	bl	80158e0 <malloc>
 80023ba:	4603      	mov	r3, r0
 80023bc:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 80023be:	2012      	movs	r0, #18
 80023c0:	f013 fa8e 	bl	80158e0 <malloc>
 80023c4:	4603      	mov	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80023c8:	2008      	movs	r0, #8
 80023ca:	f013 fa89 	bl	80158e0 <malloc>
 80023ce:	4603      	mov	r3, r0
 80023d0:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80023d2:	2008      	movs	r0, #8
 80023d4:	f013 fa84 	bl	80158e0 <malloc>
 80023d8:	4603      	mov	r3, r0
 80023da:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fe6f 	bl	80020c0 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	receive_hk_i2c(hk_i2c);
 80023e2:	6938      	ldr	r0, [r7, #16]
 80023e4:	f7ff fcf8 	bl	8001dd8 <receive_hk_i2c>
	receive_hk_adc1(hk_adc1);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff fd25 	bl	8001e38 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f7ff fd6c 	bl	8001ecc <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	22cc      	movs	r2, #204	; 0xcc
 80023f8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	22cc      	movs	r2, #204	; 0xcc
 8002400:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002402:	4ba6      	ldr	r3, [pc, #664]	; (800269c <sample_hk+0x2f8>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	b29a      	uxth	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3302      	adds	r3, #2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002412:	4ba2      	ldr	r3, [pc, #648]	; (800269c <sample_hk+0x2f8>)
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3303      	adds	r3, #3
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3302      	adds	r3, #2
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b29a      	uxth	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3304      	adds	r3, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3302      	adds	r3, #2
 8002434:	881a      	ldrh	r2, [r3, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3305      	adds	r3, #5
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	b29a      	uxth	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3306      	adds	r3, #6
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	881a      	ldrh	r2, [r3, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3307      	adds	r3, #7
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002460:	121a      	asrs	r2, r3, #8
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3308      	adds	r3, #8
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3309      	adds	r3, #9
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	3302      	adds	r3, #2
 800247c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002480:	121a      	asrs	r2, r3, #8
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	330a      	adds	r3, #10
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	3302      	adds	r3, #2
 800248e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	330b      	adds	r3, #11
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3304      	adds	r3, #4
 800249e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a2:	121a      	asrs	r2, r3, #8
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	330c      	adds	r3, #12
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	3304      	adds	r3, #4
 80024b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	330d      	adds	r3, #13
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	3306      	adds	r3, #6
 80024c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c4:	121a      	asrs	r2, r3, #8
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	330e      	adds	r3, #14
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	3306      	adds	r3, #6
 80024d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	330f      	adds	r3, #15
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3310      	adds	r3, #16
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	881a      	ldrh	r2, [r3, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3311      	adds	r3, #17
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3302      	adds	r3, #2
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29a      	uxth	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3312      	adds	r3, #18
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3302      	adds	r3, #2
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3313      	adds	r3, #19
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	b29a      	uxth	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3314      	adds	r3, #20
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3304      	adds	r3, #4
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3315      	adds	r3, #21
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3306      	adds	r3, #6
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	b29a      	uxth	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3316      	adds	r3, #22
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3306      	adds	r3, #6
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3317      	adds	r3, #23
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	330c      	adds	r3, #12
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b29a      	uxth	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3318      	adds	r3, #24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	330c      	adds	r3, #12
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3319      	adds	r3, #25
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3306      	adds	r3, #6
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	b29a      	uxth	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	331a      	adds	r3, #26
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3306      	adds	r3, #6
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	331b      	adds	r3, #27
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3304      	adds	r3, #4
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	331c      	adds	r3, #28
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	3304      	adds	r3, #4
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	331d      	adds	r3, #29
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	330e      	adds	r3, #14
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	331e      	adds	r3, #30
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	330e      	adds	r3, #14
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	331f      	adds	r3, #31
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3310      	adds	r3, #16
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3320      	adds	r3, #32
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3310      	adds	r3, #16
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3321      	adds	r3, #33	; 0x21
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3308      	adds	r3, #8
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b29a      	uxth	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3322      	adds	r3, #34	; 0x22
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3308      	adds	r3, #8
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3323      	adds	r3, #35	; 0x23
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	330a      	adds	r3, #10
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	b29a      	uxth	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3324      	adds	r3, #36	; 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	330a      	adds	r3, #10
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3325      	adds	r3, #37	; 0x25
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3326      	adds	r3, #38	; 0x26
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3327      	adds	r3, #39	; 0x27
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	7852      	ldrb	r2, [r2, #1]
 800264c:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3328      	adds	r3, #40	; 0x28
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	7892      	ldrb	r2, [r2, #2]
 8002656:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3329      	adds	r3, #41	; 0x29
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	78d2      	ldrb	r2, [r2, #3]
 8002660:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	332a      	adds	r3, #42	; 0x2a
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	7912      	ldrb	r2, [r2, #4]
 800266a:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	332b      	adds	r3, #43	; 0x2b
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	7952      	ldrb	r2, [r2, #5]
 8002674:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	332c      	adds	r3, #44	; 0x2c
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	7992      	ldrb	r2, [r2, #6]
 800267e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	332d      	adds	r3, #45	; 0x2d
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	79d2      	ldrb	r2, [r2, #7]
 8002688:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 1);
 800268a:	2301      	movs	r3, #1
 800268c:	222e      	movs	r2, #46	; 0x2e
 800268e:	6979      	ldr	r1, [r7, #20]
 8002690:	4803      	ldr	r0, [pc, #12]	; (80026a0 <sample_hk+0x2fc>)
 8002692:	f00d f9b9 	bl	800fa08 <HAL_UART_Transmit>
	free(buffer);
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	e004      	b.n	80026a4 <sample_hk+0x300>
 800269a:	bf00      	nop
 800269c:	24000b34 	.word	0x24000b34
 80026a0:	240005cc 	.word	0x240005cc
 80026a4:	f013 f924 	bl	80158f0 <free>
	free(hk_i2c);
 80026a8:	6938      	ldr	r0, [r7, #16]
 80026aa:	f013 f921 	bl	80158f0 <free>
	free(hk_adc1);
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f013 f91e 	bl	80158f0 <free>
	free(hk_adc3);
 80026b4:	68b8      	ldr	r0, [r7, #8]
 80026b6:	f013 f91b 	bl	80158f0 <free>
	free(timestamp);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f013 f918 	bl	80158f0 <free>
}
 80026c0:	bf00      	nop
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <PMT_init+0x38>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d8:	2200      	movs	r2, #0
 80026da:	2101      	movs	r1, #1
 80026dc:	f010 f83a 	bl	8012754 <osEventFlagsWait>
		if(PMT_ON){
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <PMT_init+0x3c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <PMT_init+0x30>
			sample_pmt();
 80026e8:	f7ff fd30 	bl	800214c <sample_pmt>
			pmt_seq++;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <PMT_init+0x40>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <PMT_init+0x40>)
 80026f6:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80026f8:	f00f ff4c 	bl	8012594 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026fc:	e7e8      	b.n	80026d0 <PMT_init+0x8>
 80026fe:	bf00      	nop
 8002700:	24000b3c 	.word	0x24000b3c
 8002704:	24000b36 	.word	0x24000b36
 8002708:	24000b30 	.word	0x24000b30

0800270c <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <ERPA_init+0x38>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271c:	2200      	movs	r2, #0
 800271e:	2102      	movs	r1, #2
 8002720:	f010 f818 	bl	8012754 <osEventFlagsWait>
		if (ERPA_ON)
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <ERPA_init+0x3c>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <ERPA_init+0x30>
		{
			sample_erpa();
 800272c:	f7ff fd90 	bl	8002250 <sample_erpa>
			erpa_seq++;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <ERPA_init+0x40>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <ERPA_init+0x40>)
 800273a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800273c:	f00f ff2a 	bl	8012594 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002740:	e7e8      	b.n	8002714 <ERPA_init+0x8>
 8002742:	bf00      	nop
 8002744:	24000b3c 	.word	0x24000b3c
 8002748:	24000b37 	.word	0x24000b37
 800274c:	24000b32 	.word	0x24000b32

08002750 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HK_init+0x38>)
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002760:	2200      	movs	r2, #0
 8002762:	2104      	movs	r1, #4
 8002764:	f00f fff6 	bl	8012754 <osEventFlagsWait>
		if(HK_ON)
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HK_init+0x3c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HK_init+0x30>
		{
			sample_hk();
 8002770:	f7ff fe18 	bl	80023a4 <sample_hk>
			hk_seq++;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HK_init+0x40>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HK_init+0x40>)
 800277e:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002780:	f00f ff08 	bl	8012594 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002784:	e7e8      	b.n	8002758 <HK_init+0x8>
 8002786:	bf00      	nop
 8002788:	24000b3c 	.word	0x24000b3c
 800278c:	24000b38 	.word	0x24000b38
 8002790:	24000b34 	.word	0x24000b34

08002794 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800279c:	2201      	movs	r2, #1
 800279e:	4904      	ldr	r1, [pc, #16]	; (80027b0 <UART_RX_init+0x1c>)
 80027a0:	4804      	ldr	r0, [pc, #16]	; (80027b4 <UART_RX_init+0x20>)
 80027a2:	f00d fa87 	bl	800fcb4 <HAL_UART_Receive_IT>
		osDelay(5);
 80027a6:	2005      	movs	r0, #5
 80027a8:	f00f ff35 	bl	8012616 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80027ac:	e7f6      	b.n	800279c <UART_RX_init+0x8>
 80027ae:	bf00      	nop
 80027b0:	24000b40 	.word	0x24000b40
 80027b4:	240005cc 	.word	0x240005cc

080027b8 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <GPIO_on_init+0x9c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00f ff05 	bl	80125d4 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <GPIO_on_init+0xa0>)
 80027cc:	2104      	movs	r1, #4
 80027ce:	2201      	movs	r2, #1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f006 f903 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 80027d6:	2064      	movs	r0, #100	; 0x64
 80027d8:	f00f ff1d 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <GPIO_on_init+0xa0>)
 80027de:	2120      	movs	r1, #32
 80027e0:	2201      	movs	r2, #1
 80027e2:	4618      	mov	r0, r3
 80027e4:	f006 f8fa 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 80027e8:	2064      	movs	r0, #100	; 0x64
 80027ea:	f00f ff14 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <GPIO_on_init+0xa4>)
 80027f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f4:	2201      	movs	r2, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f006 f8f0 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 80027fc:	2064      	movs	r0, #100	; 0x64
 80027fe:	f00f ff0a 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <GPIO_on_init+0xa4>)
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	2201      	movs	r2, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f006 f8e7 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 800280e:	2064      	movs	r0, #100	; 0x64
 8002810:	f00f ff01 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <GPIO_on_init+0xa4>)
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	2201      	movs	r2, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f006 f8de 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 8002820:	2064      	movs	r0, #100	; 0x64
 8002822:	f00f fef8 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <GPIO_on_init+0xa4>)
 8002828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800282c:	2201      	movs	r2, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f006 f8d4 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 8002834:	2064      	movs	r0, #100	; 0x64
 8002836:	f00f feee 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <GPIO_on_init+0xa4>)
 800283c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002840:	2201      	movs	r2, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f006 f8ca 	bl	80089dc <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <GPIO_on_init+0x9c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f00f fec1 	bl	80125d4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002852:	e7ba      	b.n	80027ca <GPIO_on_init+0x12>
 8002854:	24000670 	.word	0x24000670
 8002858:	58020400 	.word	0x58020400
 800285c:	58020800 	.word	0x58020800

08002860 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <GPIO_off_init+0x9c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f00f feb1 	bl	80125d4 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <GPIO_off_init+0xa0>)
 8002874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002878:	2200      	movs	r2, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f006 f8ae 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 8002880:	2064      	movs	r0, #100	; 0x64
 8002882:	f00f fec8 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <GPIO_off_init+0xa0>)
 8002888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288c:	2200      	movs	r2, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f006 f8a4 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 8002894:	2064      	movs	r0, #100	; 0x64
 8002896:	f00f febe 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <GPIO_off_init+0xa0>)
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	2200      	movs	r2, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f006 f89b 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 80028a6:	2064      	movs	r0, #100	; 0x64
 80028a8:	f00f feb5 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <GPIO_off_init+0xa0>)
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	2200      	movs	r2, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f006 f892 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 80028b8:	2064      	movs	r0, #100	; 0x64
 80028ba:	f00f feac 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <GPIO_off_init+0xa0>)
 80028c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c4:	2200      	movs	r2, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 f888 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 80028cc:	2064      	movs	r0, #100	; 0x64
 80028ce:	f00f fea2 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <GPIO_off_init+0xa4>)
 80028d4:	2120      	movs	r1, #32
 80028d6:	2200      	movs	r2, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f006 f87f 	bl	80089dc <HAL_GPIO_WritePin>
		osDelay(100);
 80028de:	2064      	movs	r0, #100	; 0x64
 80028e0:	f00f fe99 	bl	8012616 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <GPIO_off_init+0xa4>)
 80028e6:	2104      	movs	r1, #4
 80028e8:	2200      	movs	r2, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f006 f876 	bl	80089dc <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 80028f0:	4b02      	ldr	r3, [pc, #8]	; (80028fc <GPIO_off_init+0x9c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00f fe6d 	bl	80125d4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80028fa:	e7ba      	b.n	8002872 <GPIO_off_init+0x12>
 80028fc:	240008d0 	.word	0x240008d0
 8002900:	58020800 	.word	0x58020800
 8002904:	58020400 	.word	0x58020400

08002908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800291a:	f000 ff1f 	bl	800375c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40001000 	.word	0x40001000

0800292c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002934:	e7fe      	b.n	8002934 <Error_Handler+0x8>
	...

08002938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_MspInit+0x38>)
 8002940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <HAL_MspInit+0x38>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_MspInit+0x38>)
 8002950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	210f      	movs	r1, #15
 8002960:	f06f 0001 	mvn.w	r0, #1
 8002964:	f002 fc08 	bl	8005178 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	58024400 	.word	0x58024400

08002974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08e      	sub	sp, #56	; 0x38
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a7b      	ldr	r2, [pc, #492]	; (8002b80 <HAL_ADC_MspInit+0x20c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	f040 8091 	bne.w	8002aba <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002998:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 800299a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800299e:	4a79      	ldr	r2, [pc, #484]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029a0:	f043 0320 	orr.w	r3, r3, #32
 80029a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029a8:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	4a71      	ldr	r2, [pc, #452]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c6:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	4b6b      	ldr	r3, [pc, #428]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	4a6a      	ldr	r2, [pc, #424]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e4:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	4a62      	ldr	r2, [pc, #392]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002a10:	2333      	movs	r3, #51	; 0x33
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a14:	2303      	movs	r3, #3
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	4859      	ldr	r0, [pc, #356]	; (8002b88 <HAL_ADC_MspInit+0x214>)
 8002a24:	f005 fe12 	bl	800864c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002a28:	23ce      	movs	r3, #206	; 0xce
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4854      	ldr	r0, [pc, #336]	; (8002b8c <HAL_ADC_MspInit+0x218>)
 8002a3c:	f005 fe06 	bl	800864c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a40:	2303      	movs	r3, #3
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a44:	2303      	movs	r3, #3
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a50:	4619      	mov	r1, r3
 8002a52:	484f      	ldr	r0, [pc, #316]	; (8002b90 <HAL_ADC_MspInit+0x21c>)
 8002a54:	f005 fdfa 	bl	800864c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002a58:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a5a:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_ADC_MspInit+0x224>)
 8002a5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a5e:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a60:	2209      	movs	r2, #9
 8002a62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a80:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a88:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a90:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a96:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a9c:	483d      	ldr	r0, [pc, #244]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002a9e:	f002 ff99 	bl	80059d4 <HAL_DMA_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002aa8:	f7ff ff40 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a39      	ldr	r2, [pc, #228]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ab2:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <HAL_ADC_MspInit+0x220>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ab8:	e05e      	b.n	8002b78 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <HAL_ADC_MspInit+0x228>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d159      	bne.n	8002b78 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 8002acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_ADC_MspInit+0x210>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002b00:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002b04:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002b08:	f000 fe54 	bl	80037b4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002b0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b10:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b14:	f000 fe4e 	bl	80037b4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002b18:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b1a:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_ADC_MspInit+0x230>)
 8002b1c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b20:	2273      	movs	r2, #115	; 0x73
 8002b22:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b36:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b3e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b46:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b5c:	4810      	ldr	r0, [pc, #64]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b5e:	f002 ff39 	bl	80059d4 <HAL_DMA_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002b68:	f7ff fee0 	bl	800292c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_ADC_MspInit+0x22c>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b78:	bf00      	nop
 8002b7a:	3738      	adds	r7, #56	; 0x38
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40022000 	.word	0x40022000
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58020800 	.word	0x58020800
 8002b8c:	58020000 	.word	0x58020000
 8002b90:	58020400 	.word	0x58020400
 8002b94:	240001e4 	.word	0x240001e4
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	58026000 	.word	0x58026000
 8002ba0:	2400025c 	.word	0x2400025c
 8002ba4:	40020028 	.word	0x40020028

08002ba8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_DAC_MspInit+0xf0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d161      	bne.n	8002c8e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_DAC_MspInit+0xf4>)
 8002bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bd0:	4a32      	ldr	r2, [pc, #200]	; (8002c9c <HAL_DAC_MspInit+0xf4>)
 8002bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_DAC_MspInit+0xf4>)
 8002bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_DAC_MspInit+0xf4>)
 8002bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bee:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <HAL_DAC_MspInit+0xf4>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <HAL_DAC_MspInit+0xf4>)
 8002bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c06:	2310      	movs	r3, #16
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	4821      	ldr	r0, [pc, #132]	; (8002ca0 <HAL_DAC_MspInit+0xf8>)
 8002c1a:	f005 fd17 	bl	800864c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c20:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <HAL_DAC_MspInit+0x100>)
 8002c22:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002c24:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c26:	2243      	movs	r2, #67	; 0x43
 8002c28:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c44:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c4c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c54:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002c62:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c64:	f002 feb6 	bl	80059d4 <HAL_DMA_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002c6e:	f7ff fe5d 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_DAC_MspInit+0xfc>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2105      	movs	r1, #5
 8002c82:	2036      	movs	r0, #54	; 0x36
 8002c84:	f002 fa78 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c88:	2036      	movs	r0, #54	; 0x36
 8002c8a:	f002 fa8f 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002c8e:	bf00      	nop
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40007400 	.word	0x40007400
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	58020000 	.word	0x58020000
 8002ca4:	240002e8 	.word	0x240002e8
 8002ca8:	40020088 	.word	0x40020088

08002cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0ba      	sub	sp, #232	; 0xe8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	22c0      	movs	r2, #192	; 0xc0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f012 fe25 	bl	801591c <memset>
  if(hi2c->Instance==I2C1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <HAL_I2C_MspInit+0xc8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d146      	bne.n	8002d6a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002cdc:	f04f 0208 	mov.w	r2, #8
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f007 fcfa 	bl	800a6ec <HAL_RCCEx_PeriphCLKConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002cfe:	f7ff fe15 	bl	800292c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_I2C_MspInit+0xcc>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d08:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_I2C_MspInit+0xcc>)
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_I2C_MspInit+0xcc>)
 8002d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d28:	2312      	movs	r3, #18
 8002d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d44:	4619      	mov	r1, r3
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <HAL_I2C_MspInit+0xd0>)
 8002d48:	f005 fc80 	bl	800864c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_I2C_MspInit+0xcc>)
 8002d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <HAL_I2C_MspInit+0xcc>)
 8002d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_I2C_MspInit+0xcc>)
 8002d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	37e8      	adds	r7, #232	; 0xe8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40005400 	.word	0x40005400
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	58020400 	.word	0x58020400

08002d80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b0b2      	sub	sp, #200	; 0xc8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d88:	f107 0308 	add.w	r3, r7, #8
 8002d8c:	22c0      	movs	r2, #192	; 0xc0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f012 fdc3 	bl	801591c <memset>
  if(hrtc->Instance==RTC)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_RTC_MspInit+0x5c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d119      	bne.n	8002dd4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002da0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	4618      	mov	r0, r3
 8002dba:	f007 fc97 	bl	800a6ec <HAL_RCCEx_PeriphCLKConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002dc4:	f7ff fdb2 	bl	800292c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RTC_MspInit+0x60>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_RTC_MspInit+0x60>)
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dd4:	bf00      	nop
 8002dd6:	37c8      	adds	r7, #200	; 0xc8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	58004000 	.word	0x58004000
 8002de0:	58024400 	.word	0x58024400

08002de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b0bc      	sub	sp, #240	; 0xf0
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dfc:	f107 0318 	add.w	r3, r7, #24
 8002e00:	22c0      	movs	r2, #192	; 0xc0
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f012 fd89 	bl	801591c <memset>
  if(hspi->Instance==SPI1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4c      	ldr	r2, [pc, #304]	; (8002f40 <HAL_SPI_MspInit+0x15c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d145      	bne.n	8002ea0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e24:	f107 0318 	add.w	r3, r7, #24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f007 fc5f 	bl	800a6ec <HAL_RCCEx_PeriphCLKConfig>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e34:	f7ff fd7a 	bl	800292c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e38:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e3e:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e48:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5c:	4a39      	ldr	r2, [pc, #228]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002e74:	2318      	movs	r3, #24
 8002e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e8c:	2305      	movs	r3, #5
 8002e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e96:	4619      	mov	r1, r3
 8002e98:	482b      	ldr	r0, [pc, #172]	; (8002f48 <HAL_SPI_MspInit+0x164>)
 8002e9a:	f005 fbd7 	bl	800864c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e9e:	e04a      	b.n	8002f36 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_SPI_MspInit+0x168>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d145      	bne.n	8002f36 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002eaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eba:	f107 0318 	add.w	r3, r7, #24
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f007 fc14 	bl	800a6ec <HAL_RCCEx_PeriphCLKConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002eca:	f7ff fd2f 	bl	800292c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_SPI_MspInit+0x160>)
 8002efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f0a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f24:	2305      	movs	r3, #5
 8002f26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4805      	ldr	r0, [pc, #20]	; (8002f48 <HAL_SPI_MspInit+0x164>)
 8002f32:	f005 fb8b 	bl	800864c <HAL_GPIO_Init>
}
 8002f36:	bf00      	nop
 8002f38:	37f0      	adds	r7, #240	; 0xf0
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40013000 	.word	0x40013000
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58020400 	.word	0x58020400
 8002f4c:	40003800 	.word	0x40003800

08002f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	; (800303c <HAL_TIM_Base_MspInit+0xec>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d12f      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8002f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f68:	4a35      	ldr	r2, [pc, #212]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f72:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8002f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2105      	movs	r1, #5
 8002f84:	2018      	movs	r0, #24
 8002f86:	f002 f8f7 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002f8a:	2018      	movs	r0, #24
 8002f8c:	f002 f90e 	bl	80051ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2105      	movs	r1, #5
 8002f94:	2019      	movs	r0, #25
 8002f96:	f002 f8ef 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f9a:	2019      	movs	r0, #25
 8002f9c:	f002 f906 	bl	80051ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	201a      	movs	r0, #26
 8002fa6:	f002 f8e7 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002faa:	201a      	movs	r0, #26
 8002fac:	f002 f8fe 	bl	80051ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2105      	movs	r1, #5
 8002fb4:	201b      	movs	r0, #27
 8002fb6:	f002 f8df 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002fba:	201b      	movs	r0, #27
 8002fbc:	f002 f8f6 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fc0:	e038      	b.n	8003034 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d117      	bne.n	8002ffc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8002fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8002fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2105      	movs	r1, #5
 8002fee:	201c      	movs	r0, #28
 8002ff0:	f002 f8c2 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ff4:	201c      	movs	r0, #28
 8002ff6:	f002 f8d9 	bl	80051ac <HAL_NVIC_EnableIRQ>
}
 8002ffa:	e01b      	b.n	8003034 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a10      	ldr	r2, [pc, #64]	; (8003044 <HAL_TIM_Base_MspInit+0xf4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d116      	bne.n	8003034 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8003008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800300c:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8003018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	2105      	movs	r1, #5
 8003028:	201d      	movs	r0, #29
 800302a:	f002 f8a5 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800302e:	201d      	movs	r0, #29
 8003030:	f002 f8bc 	bl	80051ac <HAL_NVIC_EnableIRQ>
}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40010000 	.word	0x40010000
 8003040:	58024400 	.word	0x58024400
 8003044:	40000400 	.word	0x40000400

08003048 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_TIM_MspPostInit+0xb8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d120      	bne.n	80030ac <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_TIM_MspPostInit+0xbc>)
 800306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003070:	4a24      	ldr	r2, [pc, #144]	; (8003104 <HAL_TIM_MspPostInit+0xbc>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_TIM_MspPostInit+0xbc>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800309a:	2301      	movs	r3, #1
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	4818      	ldr	r0, [pc, #96]	; (8003108 <HAL_TIM_MspPostInit+0xc0>)
 80030a6:	f005 fad1 	bl	800864c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030aa:	e024      	b.n	80030f6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d11f      	bne.n	80030f6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_TIM_MspPostInit+0xbc>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030bc:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_TIM_MspPostInit+0xbc>)
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_TIM_MspPostInit+0xbc>)
 80030c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030e6:	2301      	movs	r3, #1
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	4806      	ldr	r0, [pc, #24]	; (800310c <HAL_TIM_MspPostInit+0xc4>)
 80030f2:	f005 faab 	bl	800864c <HAL_GPIO_Init>
}
 80030f6:	bf00      	nop
 80030f8:	3728      	adds	r7, #40	; 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	58024400 	.word	0x58024400
 8003108:	58020000 	.word	0x58020000
 800310c:	58020400 	.word	0x58020400

08003110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b0ba      	sub	sp, #232	; 0xe8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	22c0      	movs	r2, #192	; 0xc0
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f012 fbf3 	bl	801591c <memset>
  if(huart->Instance==USART1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_UART_MspInit+0xd8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d14e      	bne.n	80031de <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003140:	f04f 0201 	mov.w	r2, #1
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003152:	f107 0310 	add.w	r3, r7, #16
 8003156:	4618      	mov	r0, r3
 8003158:	f007 fac8 	bl	800a6ec <HAL_RCCEx_PeriphCLKConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003162:	f7ff fbe3 	bl	800292c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_UART_MspInit+0xdc>)
 8003168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800316c:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <HAL_UART_MspInit+0xdc>)
 800316e:	f043 0310 	orr.w	r3, r3, #16
 8003172:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_UART_MspInit+0xdc>)
 8003178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_UART_MspInit+0xdc>)
 8003186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800318a:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_UART_MspInit+0xdc>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_UART_MspInit+0xdc>)
 8003196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031bc:	2307      	movs	r3, #7
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031c6:	4619      	mov	r1, r3
 80031c8:	4809      	ldr	r0, [pc, #36]	; (80031f0 <HAL_UART_MspInit+0xe0>)
 80031ca:	f005 fa3f 	bl	800864c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2105      	movs	r1, #5
 80031d2:	2025      	movs	r0, #37	; 0x25
 80031d4:	f001 ffd0 	bl	8005178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d8:	2025      	movs	r0, #37	; 0x25
 80031da:	f001 ffe7 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031de:	bf00      	nop
 80031e0:	37e8      	adds	r7, #232	; 0xe8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40011000 	.word	0x40011000
 80031ec:	58024400 	.word	0x58024400
 80031f0:	58020000 	.word	0x58020000

080031f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b090      	sub	sp, #64	; 0x40
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	d827      	bhi.n	8003252 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003202:	2200      	movs	r2, #0
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	2036      	movs	r0, #54	; 0x36
 8003208:	f001 ffb6 	bl	8005178 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800320c:	2036      	movs	r0, #54	; 0x36
 800320e:	f001 ffcd 	bl	80051ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_InitTick+0xc4>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_InitTick+0xc8>)
 800321a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800321e:	4a27      	ldr	r2, [pc, #156]	; (80032bc <HAL_InitTick+0xc8>)
 8003220:	f043 0310 	orr.w	r3, r3, #16
 8003224:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003228:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_InitTick+0xc8>)
 800322a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003236:	f107 0210 	add.w	r2, r7, #16
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f007 fa11 	bl	800a668 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <HAL_InitTick+0x6a>
 8003250:	e001      	b.n	8003256 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e02b      	b.n	80032ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003256:	f007 f9db 	bl	800a610 <HAL_RCC_GetPCLK1Freq>
 800325a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800325c:	e004      	b.n	8003268 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800325e:	f007 f9d7 	bl	800a610 <HAL_RCC_GetPCLK1Freq>
 8003262:	4603      	mov	r3, r0
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <HAL_InitTick+0xcc>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	0c9b      	lsrs	r3, r3, #18
 8003272:	3b01      	subs	r3, #1
 8003274:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_InitTick+0xd0>)
 8003278:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <HAL_InitTick+0xd4>)
 800327a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_InitTick+0xd0>)
 800327e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003282:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003284:	4a0f      	ldr	r2, [pc, #60]	; (80032c4 <HAL_InitTick+0xd0>)
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_InitTick+0xd0>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_InitTick+0xd0>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003296:	480b      	ldr	r0, [pc, #44]	; (80032c4 <HAL_InitTick+0xd0>)
 8003298:	f00a fe99 	bl	800dfce <HAL_TIM_Base_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80032a2:	4808      	ldr	r0, [pc, #32]	; (80032c4 <HAL_InitTick+0xd0>)
 80032a4:	f00a ff82 	bl	800e1ac <HAL_TIM_Base_Start_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	e000      	b.n	80032ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3740      	adds	r7, #64	; 0x40
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	24000090 	.word	0x24000090
 80032bc:	58024400 	.word	0x58024400
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	24000be8 	.word	0x24000be8
 80032c8:	40001000 	.word	0x40001000

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80032d0:	e7fe      	b.n	80032d0 <NMI_Handler+0x4>

080032d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <HardFault_Handler+0x4>

080032d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <MemManage_Handler+0x4>

080032de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <BusFault_Handler+0x4>

080032e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <UsageFault_Handler+0x4>

080032ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <DMA1_Stream0_IRQHandler+0x10>)
 80032fe:	f003 fe93 	bl	8007028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	240001e4 	.word	0x240001e4

0800330c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <DMA1_Stream1_IRQHandler+0x10>)
 8003312:	f003 fe89 	bl	8007028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	2400025c 	.word	0x2400025c

08003320 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <DMA1_Stream5_IRQHandler+0x10>)
 8003326:	f003 fe7f 	bl	8007028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	240002e8 	.word	0x240002e8

08003334 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <TIM1_BRK_IRQHandler+0x10>)
 800333a:	f00b fa79 	bl	800e830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	240004e8 	.word	0x240004e8

08003348 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <TIM1_UP_IRQHandler+0x10>)
 800334e:	f00b fa6f 	bl	800e830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	240004e8 	.word	0x240004e8

0800335c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <TIM1_TRG_COM_IRQHandler+0x10>)
 8003362:	f00b fa65 	bl	800e830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	240004e8 	.word	0x240004e8

08003370 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <TIM1_CC_IRQHandler+0x10>)
 8003376:	f00b fa5b 	bl	800e830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	240004e8 	.word	0x240004e8

08003384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <TIM2_IRQHandler+0x10>)
 800338a:	f00b fa51 	bl	800e830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	24000534 	.word	0x24000534

08003398 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <TIM3_IRQHandler+0x10>)
 800339e:	f00b fa47 	bl	800e830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	24000580 	.word	0x24000580

080033ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <USART1_IRQHandler+0x10>)
 80033b2:	f00c fccb 	bl	800fd4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	240005cc 	.word	0x240005cc

080033c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <TIM6_DAC_IRQHandler+0x20>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80033ce:	4804      	ldr	r0, [pc, #16]	; (80033e0 <TIM6_DAC_IRQHandler+0x20>)
 80033d0:	f002 f881 	bl	80054d6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80033d4:	4803      	ldr	r0, [pc, #12]	; (80033e4 <TIM6_DAC_IRQHandler+0x24>)
 80033d6:	f00b fa2b 	bl	800e830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	240002d4 	.word	0x240002d4
 80033e4:	24000be8 	.word	0x24000be8

080033e8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <ITM_SendChar+0x48>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <ITM_SendChar+0x48>)
 80033f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fc:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <ITM_SendChar+0x4c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <ITM_SendChar+0x4c>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800340a:	bf00      	nop
 800340c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f8      	beq.n	800340c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800341a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	6013      	str	r3, [r2, #0]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000edfc 	.word	0xe000edfc
 8003434:	e0000e00 	.word	0xe0000e00

08003438 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e00a      	b.n	8003460 <_read+0x28>
		*ptr++ = __io_getchar();
 800344a:	f3af 8000 	nop.w
 800344e:	4601      	mov	r1, r0
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	60ba      	str	r2, [r7, #8]
 8003456:	b2ca      	uxtb	r2, r1
 8003458:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3301      	adds	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	dbf0      	blt.n	800344a <_read+0x12>
	}

	return len;
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e009      	b.n	8003498 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	60ba      	str	r2, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ffab 	bl	80033e8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	3301      	adds	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	dbf1      	blt.n	8003484 <_write+0x12>
	}
	return len;
 80034a0:	687b      	ldr	r3, [r7, #4]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <_close>:

int _close(int file) {
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034d2:	605a      	str	r2, [r3, #4]
	return 0;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_isatty>:

int _isatty(int file) {
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80034ea:	2301      	movs	r3, #1
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <_sbrk+0x64>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <_sbrk+0x64>)
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <_sbrk+0x68>)
 8003534:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <_sbrk+0x64>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	d207      	bcs.n	8003554 <_sbrk+0x40>
		errno = ENOMEM;
 8003544:	f012 f9a2 	bl	801588c <__errno>
 8003548:	4603      	mov	r3, r0
 800354a:	220c      	movs	r2, #12
 800354c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003552:	e009      	b.n	8003568 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <_sbrk+0x64>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	4a05      	ldr	r2, [pc, #20]	; (8003578 <_sbrk+0x64>)
 8003564:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	24080000 	.word	0x24080000
 8003574:	00000400 	.word	0x00000400
 8003578:	24000c34 	.word	0x24000c34
 800357c:	240055a0 	.word	0x240055a0

08003580 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003584:	4b37      	ldr	r3, [pc, #220]	; (8003664 <SystemInit+0xe4>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	4a36      	ldr	r2, [pc, #216]	; (8003664 <SystemInit+0xe4>)
 800358c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <SystemInit+0xe8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2b06      	cmp	r3, #6
 800359e:	d807      	bhi.n	80035b0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <SystemInit+0xe8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 030f 	bic.w	r3, r3, #15
 80035a8:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <SystemInit+0xe8>)
 80035aa:	f043 0307 	orr.w	r3, r3, #7
 80035ae:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80035b0:	4b2e      	ldr	r3, [pc, #184]	; (800366c <SystemInit+0xec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2d      	ldr	r2, [pc, #180]	; (800366c <SystemInit+0xec>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <SystemInit+0xec>)
 80035be:	2200      	movs	r2, #0
 80035c0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <SystemInit+0xec>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4929      	ldr	r1, [pc, #164]	; (800366c <SystemInit+0xec>)
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <SystemInit+0xf0>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80035ce:	4b26      	ldr	r3, [pc, #152]	; (8003668 <SystemInit+0xe8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <SystemInit+0xe8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 030f 	bic.w	r3, r3, #15
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <SystemInit+0xe8>)
 80035e4:	f043 0307 	orr.w	r3, r3, #7
 80035e8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <SystemInit+0xec>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80035f0:	4b1e      	ldr	r3, [pc, #120]	; (800366c <SystemInit+0xec>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <SystemInit+0xec>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <SystemInit+0xec>)
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <SystemInit+0xf4>)
 8003600:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <SystemInit+0xec>)
 8003604:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <SystemInit+0xf8>)
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <SystemInit+0xec>)
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <SystemInit+0xfc>)
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800360e:	4b17      	ldr	r3, [pc, #92]	; (800366c <SystemInit+0xec>)
 8003610:	2200      	movs	r2, #0
 8003612:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003614:	4b15      	ldr	r3, [pc, #84]	; (800366c <SystemInit+0xec>)
 8003616:	4a19      	ldr	r2, [pc, #100]	; (800367c <SystemInit+0xfc>)
 8003618:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <SystemInit+0xec>)
 800361c:	2200      	movs	r2, #0
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <SystemInit+0xec>)
 8003622:	4a16      	ldr	r2, [pc, #88]	; (800367c <SystemInit+0xfc>)
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <SystemInit+0xec>)
 8003628:	2200      	movs	r2, #0
 800362a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <SystemInit+0xec>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <SystemInit+0xec>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003636:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <SystemInit+0xec>)
 800363a:	2200      	movs	r2, #0
 800363c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <SystemInit+0x100>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <SystemInit+0x104>)
 8003644:	4013      	ands	r3, r2
 8003646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364a:	d202      	bcs.n	8003652 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <SystemInit+0x108>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <SystemInit+0x10c>)
 8003654:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003658:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00
 8003668:	52002000 	.word	0x52002000
 800366c:	58024400 	.word	0x58024400
 8003670:	eaf6ed7f 	.word	0xeaf6ed7f
 8003674:	02020200 	.word	0x02020200
 8003678:	01ff0000 	.word	0x01ff0000
 800367c:	01010280 	.word	0x01010280
 8003680:	5c001000 	.word	0x5c001000
 8003684:	ffff0000 	.word	0xffff0000
 8003688:	51008108 	.word	0x51008108
 800368c:	52004000 	.word	0x52004000

08003690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003694:	f7ff ff74 	bl	8003580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003698:	480c      	ldr	r0, [pc, #48]	; (80036cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800369a:	490d      	ldr	r1, [pc, #52]	; (80036d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a0:	e002      	b.n	80036a8 <LoopCopyDataInit>

080036a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a6:	3304      	adds	r3, #4

080036a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036ac:	d3f9      	bcc.n	80036a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036b0:	4c0a      	ldr	r4, [pc, #40]	; (80036dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80036b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b4:	e001      	b.n	80036ba <LoopFillZerobss>

080036b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b8:	3204      	adds	r2, #4

080036ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036bc:	d3fb      	bcc.n	80036b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036be:	f012 f8eb 	bl	8015898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036c2:	f7fd fbbf 	bl	8000e44 <main>
  bx  lr
 80036c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80036cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80036d0:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 80036d4:	08016730 	.word	0x08016730
  ldr r2, =_sbss
 80036d8:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80036dc:	2400559c 	.word	0x2400559c

080036e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e0:	e7fe      	b.n	80036e0 <ADC3_IRQHandler>
	...

080036e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ea:	2003      	movs	r0, #3
 80036ec:	f001 fd39 	bl	8005162 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036f0:	f006 fde4 	bl	800a2bc <HAL_RCC_GetSysClockFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_Init+0x68>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	4913      	ldr	r1, [pc, #76]	; (8003750 <HAL_Init+0x6c>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_Init+0x68>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_Init+0x6c>)
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_Init+0x70>)
 8003726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003728:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <HAL_Init+0x74>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800372e:	2005      	movs	r0, #5
 8003730:	f7ff fd60 	bl	80031f4 <HAL_InitTick>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e002      	b.n	8003744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800373e:	f7ff f8fb 	bl	8002938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	58024400 	.word	0x58024400
 8003750:	0801667c 	.word	0x0801667c
 8003754:	2400008c 	.word	0x2400008c
 8003758:	24000088 	.word	0x24000088

0800375c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_IncTick+0x20>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_IncTick+0x24>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4413      	add	r3, r2
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <HAL_IncTick+0x24>)
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	24000094 	.word	0x24000094
 8003780:	24000c38 	.word	0x24000c38

08003784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return uwTick;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_GetTick+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	24000c38 	.word	0x24000c38

0800379c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_GetREVID+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0c1b      	lsrs	r3, r3, #16
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	5c001000 	.word	0x5c001000

080037b4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	58000400 	.word	0x58000400

080037e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3360      	adds	r3, #96	; 0x60
 800385a:	461a      	mov	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	430b      	orrs	r3, r1
 8003876:	431a      	orrs	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	611a      	str	r2, [r3, #16]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b087      	sub	sp, #28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3360      	adds	r3, #96	; 0x60
 80038ca:	461a      	mov	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	431a      	orrs	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]
  }
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3330      	adds	r3, #48	; 0x30
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	4413      	add	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	211f      	movs	r1, #31
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	401a      	ands	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	f003 011f 	and.w	r1, r3, #31
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	431a      	orrs	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f023 0203 	bic.w	r2, r3, #3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3314      	adds	r3, #20
 80039a4:	461a      	mov	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	0e5b      	lsrs	r3, r3, #25
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	4413      	add	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	0d1b      	lsrs	r3, r3, #20
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2107      	movs	r1, #7
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	401a      	ands	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	0d1b      	lsrs	r3, r3, #20
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	431a      	orrs	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f003 0318 	and.w	r3, r3, #24
 8003a0e:	4908      	ldr	r1, [pc, #32]	; (8003a30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a10:	40d9      	lsrs	r1, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	400b      	ands	r3, r1
 8003a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	000fffff 	.word	0x000fffff

08003a34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 031f 	and.w	r3, r3, #31
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6093      	str	r3, [r2, #8]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	5fffffc0 	.word	0x5fffffc0

08003a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a88:	d101      	bne.n	8003a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	6fffffc0 	.word	0x6fffffc0

08003ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad8:	d101      	bne.n	8003ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <LL_ADC_Enable+0x24>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	f043 0201 	orr.w	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	7fffffc0 	.word	0x7fffffc0

08003b14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <LL_ADC_Disable+0x24>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	f043 0202 	orr.w	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	7fffffc0 	.word	0x7fffffc0

08003b3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <LL_ADC_IsEnabled+0x18>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <LL_ADC_IsEnabled+0x1a>
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d101      	bne.n	8003b7a <LL_ADC_IsDisableOngoing+0x18>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <LL_ADC_IsDisableOngoing+0x1a>
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <LL_ADC_REG_StartConversion+0x24>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	7fffffc0 	.word	0x7fffffc0

08003bb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d101      	bne.n	8003bc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d101      	bne.n	8003bee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b089      	sub	sp, #36	; 0x24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e18f      	b.n	8003f36 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fe fea5 	bl	8002974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff19 	bl	8003a74 <LL_ADC_IsDeepPowerDownEnabled>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff feff 	bl	8003a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ff34 	bl	8003ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d114      	bne.n	8003c8c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ff18 	bl	8003a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c6c:	4b87      	ldr	r3, [pc, #540]	; (8003e8c <HAL_ADC_Init+0x290>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	4a87      	ldr	r2, [pc, #540]	; (8003e90 <HAL_ADC_Init+0x294>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c7e:	e002      	b.n	8003c86 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f9      	bne.n	8003c80 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff17 	bl	8003ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0210 	orr.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff77 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8003cc2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 8129 	bne.w	8003f24 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 8125 	bne.w	8003f24 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ce2:	f043 0202 	orr.w	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff24 	bl	8003b3c <LL_ADC_IsEnabled>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d136      	bne.n	8003d68 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a65      	ldr	r2, [pc, #404]	; (8003e94 <HAL_ADC_Init+0x298>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_ADC_Init+0x112>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a63      	ldr	r2, [pc, #396]	; (8003e98 <HAL_ADC_Init+0x29c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10e      	bne.n	8003d2c <HAL_ADC_Init+0x130>
 8003d0e:	4861      	ldr	r0, [pc, #388]	; (8003e94 <HAL_ADC_Init+0x298>)
 8003d10:	f7ff ff14 	bl	8003b3c <LL_ADC_IsEnabled>
 8003d14:	4604      	mov	r4, r0
 8003d16:	4860      	ldr	r0, [pc, #384]	; (8003e98 <HAL_ADC_Init+0x29c>)
 8003d18:	f7ff ff10 	bl	8003b3c <LL_ADC_IsEnabled>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4323      	orrs	r3, r4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e008      	b.n	8003d3e <HAL_ADC_Init+0x142>
 8003d2c:	485b      	ldr	r0, [pc, #364]	; (8003e9c <HAL_ADC_Init+0x2a0>)
 8003d2e:	f7ff ff05 	bl	8003b3c <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a53      	ldr	r2, [pc, #332]	; (8003e94 <HAL_ADC_Init+0x298>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_ADC_Init+0x15a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a51      	ldr	r2, [pc, #324]	; (8003e98 <HAL_ADC_Init+0x29c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Init+0x15e>
 8003d56:	4a52      	ldr	r2, [pc, #328]	; (8003ea0 <HAL_ADC_Init+0x2a4>)
 8003d58:	e000      	b.n	8003d5c <HAL_ADC_Init+0x160>
 8003d5a:	4a52      	ldr	r2, [pc, #328]	; (8003ea4 <HAL_ADC_Init+0x2a8>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7ff fd3c 	bl	80037e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003d68:	f7ff fd18 	bl	800379c <HAL_GetREVID>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d914      	bls.n	8003da0 <HAL_ADC_Init+0x1a4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d110      	bne.n	8003da0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7d5b      	ldrb	r3, [r3, #21]
 8003d82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	7f1b      	ldrb	r3, [r3, #28]
 8003d94:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d96:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d98:	f043 030c 	orr.w	r3, r3, #12
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e00d      	b.n	8003dbc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7d5b      	ldrb	r3, [r3, #21]
 8003da4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003daa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003db0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7f1b      	ldrb	r3, [r3, #28]
 8003db6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7f1b      	ldrb	r3, [r3, #28]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d106      	bne.n	8003dd2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	045b      	lsls	r3, r3, #17
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <HAL_ADC_Init+0x2ac>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fed2 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8003e0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fedf 	bl	8003bd6 <LL_ADC_INJ_IsConversionOngoing>
 8003e18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d15f      	bne.n	8003ee0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d15c      	bne.n	8003ee0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7d1b      	ldrb	r3, [r3, #20]
 8003e2a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_ADC_Init+0x2b0>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d130      	bne.n	8003eb4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_ADC_Init+0x2b4>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e66:	3a01      	subs	r2, #1
 8003e68:	0411      	lsls	r1, r2, #16
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e6e:	4311      	orrs	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	611a      	str	r2, [r3, #16]
 8003e88:	e01c      	b.n	8003ec4 <HAL_ADC_Init+0x2c8>
 8003e8a:	bf00      	nop
 8003e8c:	24000088 	.word	0x24000088
 8003e90:	053e2d63 	.word	0x053e2d63
 8003e94:	40022000 	.word	0x40022000
 8003e98:	40022100 	.word	0x40022100
 8003e9c:	58026000 	.word	0x58026000
 8003ea0:	40022300 	.word	0x40022300
 8003ea4:	58026300 	.word	0x58026300
 8003ea8:	fff0c003 	.word	0xfff0c003
 8003eac:	ffffbffc 	.word	0xffffbffc
 8003eb0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fdec 	bl	8004ab8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10c      	bne.n	8003f02 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f023 010f 	bic.w	r1, r3, #15
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
 8003f00:	e007      	b.n	8003f12 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 020f 	bic.w	r2, r2, #15
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
 8003f22:	e007      	b.n	8003f34 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	bf00      	nop

08003f40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a55      	ldr	r2, [pc, #340]	; (80040a8 <HAL_ADC_Start_DMA+0x168>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_ADC_Start_DMA+0x20>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a54      	ldr	r2, [pc, #336]	; (80040ac <HAL_ADC_Start_DMA+0x16c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_Start_DMA+0x24>
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <HAL_ADC_Start_DMA+0x170>)
 8003f62:	e000      	b.n	8003f66 <HAL_ADC_Start_DMA+0x26>
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_ADC_Start_DMA+0x174>)
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fd64 	bl	8003a34 <LL_ADC_GetMultimode>
 8003f6c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fe1c 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 808c 	bne.w	8004098 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_Start_DMA+0x4e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e087      	b.n	800409e <HAL_ADC_Start_DMA+0x15e>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d002      	beq.n	8003fa8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b09      	cmp	r3, #9
 8003fa6:	d170      	bne.n	800408a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fc07 	bl	80047bc <ADC_Enable>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d163      	bne.n	8004080 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fbc:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <HAL_ADC_Start_DMA+0x178>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a37      	ldr	r2, [pc, #220]	; (80040ac <HAL_ADC_Start_DMA+0x16c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d002      	beq.n	8003fd8 <HAL_ADC_Start_DMA+0x98>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	e000      	b.n	8003fda <HAL_ADC_Start_DMA+0x9a>
 8003fd8:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <HAL_ADC_Start_DMA+0x168>)
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d002      	beq.n	8003fe8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d006      	beq.n	800400e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	f023 0206 	bic.w	r2, r3, #6
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	659a      	str	r2, [r3, #88]	; 0x58
 800400c:	e002      	b.n	8004014 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	4a28      	ldr	r2, [pc, #160]	; (80040bc <HAL_ADC_Start_DMA+0x17c>)
 800401a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <HAL_ADC_Start_DMA+0x180>)
 8004022:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <HAL_ADC_Start_DMA+0x184>)
 800402a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	221c      	movs	r2, #28
 8004032:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0210 	orr.w	r2, r2, #16
 800404a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7ff fc89 	bl	800396e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3340      	adds	r3, #64	; 0x40
 8004066:	4619      	mov	r1, r3
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f002 f80e 	bl	800608c <HAL_DMA_Start_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fd85 	bl	8003b88 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800407e:	e00d      	b.n	800409c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004088:	e008      	b.n	800409c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004096:	e001      	b.n	800409c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004098:	2302      	movs	r3, #2
 800409a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40022000 	.word	0x40022000
 80040ac:	40022100 	.word	0x40022100
 80040b0:	40022300 	.word	0x40022300
 80040b4:	58026300 	.word	0x58026300
 80040b8:	fffff0fe 	.word	0xfffff0fe
 80040bc:	0800498f 	.word	0x0800498f
 80040c0:	08004a67 	.word	0x08004a67
 80040c4:	08004a83 	.word	0x08004a83

080040c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b0a1      	sub	sp, #132	; 0x84
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a65      	ldr	r2, [pc, #404]	; (80042b4 <HAL_ADC_ConfigChannel+0x1b0>)
 800411e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x2a>
 800412a:	2302      	movs	r3, #2
 800412c:	e32e      	b.n	800478c <HAL_ADC_ConfigChannel+0x688>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fd38 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 8313 	bne.w	800476e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	db2c      	blt.n	80041aa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004158:	2b00      	cmp	r3, #0
 800415a:	d108      	bne.n	800416e <HAL_ADC_ConfigChannel+0x6a>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	2201      	movs	r2, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	e016      	b.n	800419c <HAL_ADC_ConfigChannel+0x98>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800417c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004186:	2320      	movs	r3, #32
 8004188:	e003      	b.n	8004192 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800418a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2201      	movs	r2, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	69d1      	ldr	r1, [r2, #28]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f7ff fbad 	bl	8003916 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fcf5 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 80041c6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fd02 	bl	8003bd6 <LL_ADC_INJ_IsConversionOngoing>
 80041d2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 80b8 	bne.w	800434c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 80b4 	bne.w	800434c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f7ff fbcf 	bl	8003994 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041f6:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_ADC_ConfigChannel+0x1b4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80041fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004202:	d10b      	bne.n	800421c <HAL_ADC_ConfigChannel+0x118>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	e01d      	b.n	8004258 <HAL_ADC_ConfigChannel+0x154>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x13e>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	e00a      	b.n	8004258 <HAL_ADC_ConfigChannel+0x154>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d02c      	beq.n	80042bc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6919      	ldr	r1, [r3, #16]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004270:	f7ff faea 	bl	8003848 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6919      	ldr	r1, [r3, #16]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	7e5b      	ldrb	r3, [r3, #25]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d102      	bne.n	800428a <HAL_ADC_ConfigChannel+0x186>
 8004284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004288:	e000      	b.n	800428c <HAL_ADC_ConfigChannel+0x188>
 800428a:	2300      	movs	r3, #0
 800428c:	461a      	mov	r2, r3
 800428e:	f7ff fb14 	bl	80038ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6919      	ldr	r1, [r3, #16]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	7e1b      	ldrb	r3, [r3, #24]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d102      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x1a4>
 80042a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042a6:	e000      	b.n	80042aa <HAL_ADC_ConfigChannel+0x1a6>
 80042a8:	2300      	movs	r3, #0
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7ff faec 	bl	8003888 <LL_ADC_SetDataRightShift>
 80042b0:	e04c      	b.n	800434c <HAL_ADC_ConfigChannel+0x248>
 80042b2:	bf00      	nop
 80042b4:	47ff0000 	.word	0x47ff0000
 80042b8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	069b      	lsls	r3, r3, #26
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d107      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042de:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	069b      	lsls	r3, r3, #26
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d107      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004302:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	069b      	lsls	r3, r3, #26
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004326:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	069b      	lsls	r3, r3, #26
 8004338:	429a      	cmp	r2, r3
 800433a:	d107      	bne.n	800434c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800434a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fbf3 	bl	8003b3c <LL_ADC_IsEnabled>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	f040 8211 	bne.w	8004780 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	461a      	mov	r2, r3
 800436c:	f7ff fb3e 	bl	80039ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4aa1      	ldr	r2, [pc, #644]	; (80045fc <HAL_ADC_ConfigChannel+0x4f8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f040 812e 	bne.w	80045d8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x2a0>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2b09      	cmp	r3, #9
 800439a:	bf94      	ite	ls
 800439c:	2301      	movls	r3, #1
 800439e:	2300      	movhi	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e019      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x2d4>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80043b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80043b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e003      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80043c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	bf94      	ite	ls
 80043d2:	2301      	movls	r3, #1
 80043d4:	2300      	movhi	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d079      	beq.n	80044d0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d107      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x2f4>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	0e9b      	lsrs	r3, r3, #26
 80043ee:	3301      	adds	r3, #1
 80043f0:	069b      	lsls	r3, r3, #26
 80043f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043f6:	e015      	b.n	8004424 <HAL_ADC_ConfigChannel+0x320>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004408:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x340>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	3301      	adds	r3, #1
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	e017      	b.n	8004474 <HAL_ADC_ConfigChannel+0x370>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e003      	b.n	8004468 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2101      	movs	r1, #1
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	ea42 0103 	orr.w	r1, r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_ADC_ConfigChannel+0x396>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	0e9b      	lsrs	r3, r3, #26
 800448a:	3301      	adds	r3, #1
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	051b      	lsls	r3, r3, #20
 8004498:	e018      	b.n	80044cc <HAL_ADC_ConfigChannel+0x3c8>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80044b2:	2320      	movs	r3, #32
 80044b4:	e003      	b.n	80044be <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044cc:	430b      	orrs	r3, r1
 80044ce:	e07e      	b.n	80045ce <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x3e8>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	0e9b      	lsrs	r3, r3, #26
 80044e2:	3301      	adds	r3, #1
 80044e4:	069b      	lsls	r3, r3, #26
 80044e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ea:	e015      	b.n	8004518 <HAL_ADC_ConfigChannel+0x414>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004504:	2320      	movs	r3, #32
 8004506:	e003      	b.n	8004510 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	3301      	adds	r3, #1
 8004512:	069b      	lsls	r3, r3, #26
 8004514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x434>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0e9b      	lsrs	r3, r3, #26
 800452a:	3301      	adds	r3, #1
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	e017      	b.n	8004568 <HAL_ADC_ConfigChannel+0x464>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	61bb      	str	r3, [r7, #24]
  return result;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004550:	2320      	movs	r3, #32
 8004552:	e003      	b.n	800455c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	fab3 f383 	clz	r3, r3
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3301      	adds	r3, #1
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	ea42 0103 	orr.w	r1, r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x490>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	0e9b      	lsrs	r3, r3, #26
 800457e:	3301      	adds	r3, #1
 8004580:	f003 021f 	and.w	r2, r3, #31
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	3b1e      	subs	r3, #30
 800458c:	051b      	lsls	r3, r3, #20
 800458e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004592:	e01b      	b.n	80045cc <HAL_ADC_ConfigChannel+0x4c8>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	60fb      	str	r3, [r7, #12]
  return result;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80045ac:	2320      	movs	r3, #32
 80045ae:	e003      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	3b1e      	subs	r3, #30
 80045c6:	051b      	lsls	r3, r3, #20
 80045c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045cc:	430b      	orrs	r3, r1
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	4619      	mov	r1, r3
 80045d4:	f7ff f9de 	bl	8003994 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f280 80cf 	bge.w	8004780 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a06      	ldr	r2, [pc, #24]	; (8004600 <HAL_ADC_ConfigChannel+0x4fc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_ADC_ConfigChannel+0x4f2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <HAL_ADC_ConfigChannel+0x500>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10a      	bne.n	800460c <HAL_ADC_ConfigChannel+0x508>
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <HAL_ADC_ConfigChannel+0x504>)
 80045f8:	e009      	b.n	800460e <HAL_ADC_ConfigChannel+0x50a>
 80045fa:	bf00      	nop
 80045fc:	47ff0000 	.word	0x47ff0000
 8004600:	40022000 	.word	0x40022000
 8004604:	40022100 	.word	0x40022100
 8004608:	40022300 	.word	0x40022300
 800460c:	4b61      	ldr	r3, [pc, #388]	; (8004794 <HAL_ADC_ConfigChannel+0x690>)
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff f90c 	bl	800382c <LL_ADC_GetCommonPathInternalCh>
 8004614:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a5f      	ldr	r2, [pc, #380]	; (8004798 <HAL_ADC_ConfigChannel+0x694>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_ADC_ConfigChannel+0x526>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5d      	ldr	r2, [pc, #372]	; (800479c <HAL_ADC_ConfigChannel+0x698>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d10e      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x544>
 800462a:	485b      	ldr	r0, [pc, #364]	; (8004798 <HAL_ADC_ConfigChannel+0x694>)
 800462c:	f7ff fa86 	bl	8003b3c <LL_ADC_IsEnabled>
 8004630:	4604      	mov	r4, r0
 8004632:	485a      	ldr	r0, [pc, #360]	; (800479c <HAL_ADC_ConfigChannel+0x698>)
 8004634:	f7ff fa82 	bl	8003b3c <LL_ADC_IsEnabled>
 8004638:	4603      	mov	r3, r0
 800463a:	4323      	orrs	r3, r4
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e008      	b.n	800465a <HAL_ADC_ConfigChannel+0x556>
 8004648:	4855      	ldr	r0, [pc, #340]	; (80047a0 <HAL_ADC_ConfigChannel+0x69c>)
 800464a:	f7ff fa77 	bl	8003b3c <LL_ADC_IsEnabled>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d07d      	beq.n	800475a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a50      	ldr	r2, [pc, #320]	; (80047a4 <HAL_ADC_ConfigChannel+0x6a0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d130      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x5c6>
 8004668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d12b      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a4a      	ldr	r2, [pc, #296]	; (80047a0 <HAL_ADC_ConfigChannel+0x69c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	f040 8081 	bne.w	8004780 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a45      	ldr	r2, [pc, #276]	; (8004798 <HAL_ADC_ConfigChannel+0x694>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_ADC_ConfigChannel+0x58e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a43      	ldr	r2, [pc, #268]	; (800479c <HAL_ADC_ConfigChannel+0x698>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x592>
 8004692:	4a45      	ldr	r2, [pc, #276]	; (80047a8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004694:	e000      	b.n	8004698 <HAL_ADC_ConfigChannel+0x594>
 8004696:	4a3f      	ldr	r2, [pc, #252]	; (8004794 <HAL_ADC_ConfigChannel+0x690>)
 8004698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7ff f8b0 	bl	8003806 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a6:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_ADC_ConfigChannel+0x6a8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	4a40      	ldr	r2, [pc, #256]	; (80047b0 <HAL_ADC_ConfigChannel+0x6ac>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	3301      	adds	r3, #1
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046ba:	e002      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3b01      	subs	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f9      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c8:	e05a      	b.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a39      	ldr	r2, [pc, #228]	; (80047b4 <HAL_ADC_ConfigChannel+0x6b0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d11e      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x60e>
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d119      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <HAL_ADC_ConfigChannel+0x69c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d14b      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <HAL_ADC_ConfigChannel+0x694>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_ADC_ConfigChannel+0x5f8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a29      	ldr	r2, [pc, #164]	; (800479c <HAL_ADC_ConfigChannel+0x698>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d101      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x5fc>
 80046fc:	4a2a      	ldr	r2, [pc, #168]	; (80047a8 <HAL_ADC_ConfigChannel+0x6a4>)
 80046fe:	e000      	b.n	8004702 <HAL_ADC_ConfigChannel+0x5fe>
 8004700:	4a24      	ldr	r2, [pc, #144]	; (8004794 <HAL_ADC_ConfigChannel+0x690>)
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7ff f87b 	bl	8003806 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004710:	e036      	b.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a28      	ldr	r2, [pc, #160]	; (80047b8 <HAL_ADC_ConfigChannel+0x6b4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d131      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
 800471c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d12c      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <HAL_ADC_ConfigChannel+0x69c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d127      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_ADC_ConfigChannel+0x694>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_ADC_ConfigChannel+0x640>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <HAL_ADC_ConfigChannel+0x698>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d101      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x644>
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004746:	e000      	b.n	800474a <HAL_ADC_ConfigChannel+0x646>
 8004748:	4a12      	ldr	r2, [pc, #72]	; (8004794 <HAL_ADC_ConfigChannel+0x690>)
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7ff f857 	bl	8003806 <LL_ADC_SetCommonPathInternalCh>
 8004758:	e012      	b.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	f043 0220 	orr.w	r2, r3, #32
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800476c:	e008      	b.n	8004780 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004788:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800478c:	4618      	mov	r0, r3
 800478e:	3784      	adds	r7, #132	; 0x84
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}
 8004794:	58026300 	.word	0x58026300
 8004798:	40022000 	.word	0x40022000
 800479c:	40022100 	.word	0x40022100
 80047a0:	58026000 	.word	0x58026000
 80047a4:	cb840000 	.word	0xcb840000
 80047a8:	40022300 	.word	0x40022300
 80047ac:	24000088 	.word	0x24000088
 80047b0:	053e2d63 	.word	0x053e2d63
 80047b4:	c7520000 	.word	0xc7520000
 80047b8:	cfb80000 	.word	0xcfb80000

080047bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f9b7 	bl	8003b3c <LL_ADC_IsEnabled>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d16e      	bne.n	80048b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	4b38      	ldr	r3, [pc, #224]	; (80048bc <ADC_Enable+0x100>)
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e05a      	b.n	80048b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f972 	bl	8003aec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004808:	f7fe ffbc 	bl	8003784 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <ADC_Enable+0x104>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <ADC_Enable+0x66>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <ADC_Enable+0x108>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <ADC_Enable+0x6a>
 8004822:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <ADC_Enable+0x10c>)
 8004824:	e000      	b.n	8004828 <ADC_Enable+0x6c>
 8004826:	4b29      	ldr	r3, [pc, #164]	; (80048cc <ADC_Enable+0x110>)
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff f903 	bl	8003a34 <LL_ADC_GetMultimode>
 800482e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a23      	ldr	r2, [pc, #140]	; (80048c4 <ADC_Enable+0x108>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d002      	beq.n	8004840 <ADC_Enable+0x84>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	e000      	b.n	8004842 <ADC_Enable+0x86>
 8004840:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <ADC_Enable+0x104>)
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	4293      	cmp	r3, r2
 8004848:	d02c      	beq.n	80048a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d130      	bne.n	80048b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004850:	e028      	b.n	80048a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f970 	bl	8003b3c <LL_ADC_IsEnabled>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f940 	bl	8003aec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800486c:	f7fe ff8a 	bl	8003784 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d914      	bls.n	80048a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d00d      	beq.n	80048a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f043 0210 	orr.w	r2, r3, #16
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f043 0201 	orr.w	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e007      	b.n	80048b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d1cf      	bne.n	8004852 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	8000003f 	.word	0x8000003f
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40022100 	.word	0x40022100
 80048c8:	40022300 	.word	0x40022300
 80048cc:	58026300 	.word	0x58026300

080048d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff f940 	bl	8003b62 <LL_ADC_IsDisableOngoing>
 80048e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff f927 	bl	8003b3c <LL_ADC_IsEnabled>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d047      	beq.n	8004984 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d144      	bne.n	8004984 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 030d 	and.w	r3, r3, #13
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10c      	bne.n	8004922 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff f901 	bl	8003b14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2203      	movs	r2, #3
 8004918:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800491a:	f7fe ff33 	bl	8003784 <HAL_GetTick>
 800491e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004920:	e029      	b.n	8004976 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e023      	b.n	8004986 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800493e:	f7fe ff21 	bl	8003784 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d914      	bls.n	8004976 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f043 0210 	orr.w	r2, r3, #16
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e007      	b.n	8004986 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1dc      	bne.n	800493e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d14b      	bne.n	8004a40 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d021      	beq.n	8004a06 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe ff92 	bl	80038f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d032      	beq.n	8004a38 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d12b      	bne.n	8004a38 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d11f      	bne.n	8004a38 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f043 0201 	orr.w	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54
 8004a04:	e018      	b.n	8004a38 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d111      	bne.n	8004a38 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	f043 0201 	orr.w	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff fb45 	bl	80040c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a3e:	e00e      	b.n	8004a5e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff fb4f 	bl	80040f0 <HAL_ADC_ErrorCallback>
}
 8004a52:	e004      	b.n	8004a5e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fb31 	bl	80040dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f043 0204 	orr.w	r2, r3, #4
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff fb21 	bl	80040f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a7a      	ldr	r2, [pc, #488]	; (8004cb0 <ADC_ConfigureBoostMode+0x1f8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <ADC_ConfigureBoostMode+0x1c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a79      	ldr	r2, [pc, #484]	; (8004cb4 <ADC_ConfigureBoostMode+0x1fc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d109      	bne.n	8004ae8 <ADC_ConfigureBoostMode+0x30>
 8004ad4:	4b78      	ldr	r3, [pc, #480]	; (8004cb8 <ADC_ConfigureBoostMode+0x200>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e008      	b.n	8004afa <ADC_ConfigureBoostMode+0x42>
 8004ae8:	4b74      	ldr	r3, [pc, #464]	; (8004cbc <ADC_ConfigureBoostMode+0x204>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01c      	beq.n	8004b38 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004afe:	f005 fd57 	bl	800a5b0 <HAL_RCC_GetHCLKFreq>
 8004b02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b0c:	d010      	beq.n	8004b30 <ADC_ConfigureBoostMode+0x78>
 8004b0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b12:	d873      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x144>
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d002      	beq.n	8004b20 <ADC_ConfigureBoostMode+0x68>
 8004b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b1e:	d16d      	bne.n	8004bfc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
        break;
 8004b2e:	e068      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	089b      	lsrs	r3, r3, #2
 8004b34:	60fb      	str	r3, [r7, #12]
        break;
 8004b36:	e064      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004b38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b3c:	f04f 0100 	mov.w	r1, #0
 8004b40:	f006 ffde 	bl	800bb00 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b4e:	d051      	beq.n	8004bf4 <ADC_ConfigureBoostMode+0x13c>
 8004b50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b54:	d854      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004b56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b5a:	d047      	beq.n	8004bec <ADC_ConfigureBoostMode+0x134>
 8004b5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b60:	d84e      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004b62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b66:	d03d      	beq.n	8004be4 <ADC_ConfigureBoostMode+0x12c>
 8004b68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b6c:	d848      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b72:	d033      	beq.n	8004bdc <ADC_ConfigureBoostMode+0x124>
 8004b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b78:	d842      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004b7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004b7e:	d029      	beq.n	8004bd4 <ADC_ConfigureBoostMode+0x11c>
 8004b80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004b84:	d83c      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004b86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b8a:	d01a      	beq.n	8004bc2 <ADC_ConfigureBoostMode+0x10a>
 8004b8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b90:	d836      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004b92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b96:	d014      	beq.n	8004bc2 <ADC_ConfigureBoostMode+0x10a>
 8004b98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b9c:	d830      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d00e      	beq.n	8004bc2 <ADC_ConfigureBoostMode+0x10a>
 8004ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba8:	d82a      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004baa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bae:	d008      	beq.n	8004bc2 <ADC_ConfigureBoostMode+0x10a>
 8004bb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bb4:	d824      	bhi.n	8004c00 <ADC_ConfigureBoostMode+0x148>
 8004bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bba:	d002      	beq.n	8004bc2 <ADC_ConfigureBoostMode+0x10a>
 8004bbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bc0:	d11e      	bne.n	8004c00 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	0c9b      	lsrs	r3, r3, #18
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	60fb      	str	r3, [r7, #12]
        break;
 8004bd2:	e016      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	60fb      	str	r3, [r7, #12]
        break;
 8004bda:	e012      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	60fb      	str	r3, [r7, #12]
        break;
 8004be2:	e00e      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	60fb      	str	r3, [r7, #12]
        break;
 8004bea:	e00a      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	09db      	lsrs	r3, r3, #7
 8004bf0:	60fb      	str	r3, [r7, #12]
        break;
 8004bf2:	e006      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	60fb      	str	r3, [r7, #12]
        break;
 8004bfa:	e002      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c00:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004c02:	f7fe fdcb 	bl	800379c <HAL_GetREVID>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d815      	bhi.n	8004c3c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <ADC_ConfigureBoostMode+0x208>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d908      	bls.n	8004c2a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004c28:	e03e      	b.n	8004ca8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	e035      	b.n	8004ca8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <ADC_ConfigureBoostMode+0x20c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d808      	bhi.n	8004c5c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c58:	609a      	str	r2, [r3, #8]
}
 8004c5a:	e025      	b.n	8004ca8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <ADC_ConfigureBoostMode+0x210>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d80a      	bhi.n	8004c7a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c76:	609a      	str	r2, [r3, #8]
}
 8004c78:	e016      	b.n	8004ca8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a13      	ldr	r2, [pc, #76]	; (8004ccc <ADC_ConfigureBoostMode+0x214>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d80a      	bhi.n	8004c98 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	e007      	b.n	8004ca8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40022000 	.word	0x40022000
 8004cb4:	40022100 	.word	0x40022100
 8004cb8:	40022300 	.word	0x40022300
 8004cbc:	58026300 	.word	0x58026300
 8004cc0:	01312d00 	.word	0x01312d00
 8004cc4:	005f5e10 	.word	0x005f5e10
 8004cc8:	00bebc20 	.word	0x00bebc20
 8004ccc:	017d7840 	.word	0x017d7840

08004cd0 <LL_ADC_IsEnabled>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <LL_ADC_IsEnabled+0x18>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <LL_ADC_IsEnabled+0x1a>
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <LL_ADC_StartCalibration>:
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <LL_ADC_StartCalibration+0x38>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	609a      	str	r2, [r3, #8]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	3ffeffc0 	.word	0x3ffeffc0

08004d34 <LL_ADC_IsCalibrationOnGoing>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d48:	d101      	bne.n	8004d4e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <LL_ADC_REG_IsConversionOngoing>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d101      	bne.n	8004d74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_ADCEx_Calibration_Start+0x1e>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e04c      	b.n	8004e3c <HAL_ADCEx_Calibration_Start+0xb8>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fd90 	bl	80048d0 <ADC_Disable>
 8004db0:	4603      	mov	r3, r0
 8004db2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d135      	bne.n	8004e26 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	f043 0202 	orr.w	r2, r3, #2
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff90 	bl	8004cf8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004dd8:	e014      	b.n	8004e04 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d30d      	bcc.n	8004e04 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dec:	f023 0312 	bic.w	r3, r3, #18
 8004df0:	f043 0210 	orr.w	r2, r3, #16
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e01b      	b.n	8004e3c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff ff93 	bl	8004d34 <LL_ADC_IsCalibrationOnGoing>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e2      	bne.n	8004dda <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
 8004e24:	e005      	b.n	8004e32 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f043 0210 	orr.w	r2, r3, #16
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	ffffeefd 	.word	0xffffeefd
 8004e48:	25c3f800 	.word	0x25c3f800

08004e4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b09f      	sub	sp, #124	; 0x7c
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e0be      	b.n	8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5c      	ldr	r2, [pc, #368]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d102      	bne.n	8004e8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e84:	4b5b      	ldr	r3, [pc, #364]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	e001      	b.n	8004e8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e09d      	b.n	8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff54 	bl	8004d5c <LL_ADC_REG_IsConversionOngoing>
 8004eb4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff ff4e 	bl	8004d5c <LL_ADC_REG_IsConversionOngoing>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d17f      	bne.n	8004fc6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d17c      	bne.n	8004fc6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a47      	ldr	r2, [pc, #284]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004ee0:	4b45      	ldr	r3, [pc, #276]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ee2:	e000      	b.n	8004ee6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ee4:	4b45      	ldr	r3, [pc, #276]	; (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ee6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d039      	beq.n	8004f64 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f00:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a3a      	ldr	r2, [pc, #232]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a38      	ldr	r2, [pc, #224]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d10e      	bne.n	8004f34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004f16:	4836      	ldr	r0, [pc, #216]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f18:	f7ff feda 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	4835      	ldr	r0, [pc, #212]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f20:	f7ff fed6 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4323      	orrs	r3, r4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e008      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004f34:	4832      	ldr	r0, [pc, #200]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f36:	f7ff fecb 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d047      	beq.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	6811      	ldr	r1, [r2, #0]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	6892      	ldr	r2, [r2, #8]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f60:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f62:	e03a      	b.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10e      	bne.n	8004fa2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004f84:	481a      	ldr	r0, [pc, #104]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f86:	f7ff fea3 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4819      	ldr	r0, [pc, #100]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f8e:	f7ff fe9f 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004f92:	4603      	mov	r3, r0
 8004f94:	4323      	orrs	r3, r4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bf0c      	ite	eq
 8004f9a:	2301      	moveq	r3, #1
 8004f9c:	2300      	movne	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e008      	b.n	8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004fa2:	4817      	ldr	r0, [pc, #92]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fa4:	f7ff fe94 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf0c      	ite	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	2300      	movne	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fc2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc4:	e009      	b.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004fd8:	e000      	b.n	8004fdc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fda:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004fe4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	377c      	adds	r7, #124	; 0x7c
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	40022000 	.word	0x40022000
 8004ff4:	40022100 	.word	0x40022100
 8004ff8:	40022300 	.word	0x40022300
 8004ffc:	58026300 	.word	0x58026300
 8005000:	58026000 	.word	0x58026000
 8005004:	fffff0e0 	.word	0xfffff0e0

08005008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <__NVIC_SetPriorityGrouping+0x40>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005024:	4013      	ands	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005030:	4b06      	ldr	r3, [pc, #24]	; (800504c <__NVIC_SetPriorityGrouping+0x44>)
 8005032:	4313      	orrs	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005036:	4a04      	ldr	r2, [pc, #16]	; (8005048 <__NVIC_SetPriorityGrouping+0x40>)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	60d3      	str	r3, [r2, #12]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00
 800504c:	05fa0000 	.word	0x05fa0000

08005050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__NVIC_GetPriorityGrouping+0x18>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 0307 	and.w	r3, r3, #7
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	db0b      	blt.n	8005096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	f003 021f 	and.w	r2, r3, #31
 8005084:	4907      	ldr	r1, [pc, #28]	; (80050a4 <__NVIC_EnableIRQ+0x38>)
 8005086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2001      	movs	r0, #1
 800508e:	fa00 f202 	lsl.w	r2, r0, r2
 8005092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	e000e100 	.word	0xe000e100

080050a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	db0a      	blt.n	80050d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	490c      	ldr	r1, [pc, #48]	; (80050f4 <__NVIC_SetPriority+0x4c>)
 80050c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050c6:	0112      	lsls	r2, r2, #4
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	440b      	add	r3, r1
 80050cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050d0:	e00a      	b.n	80050e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	4908      	ldr	r1, [pc, #32]	; (80050f8 <__NVIC_SetPriority+0x50>)
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	3b04      	subs	r3, #4
 80050e0:	0112      	lsls	r2, r2, #4
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	440b      	add	r3, r1
 80050e6:	761a      	strb	r2, [r3, #24]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000e100 	.word	0xe000e100
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f1c3 0307 	rsb	r3, r3, #7
 8005116:	2b04      	cmp	r3, #4
 8005118:	bf28      	it	cs
 800511a:	2304      	movcs	r3, #4
 800511c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3304      	adds	r3, #4
 8005122:	2b06      	cmp	r3, #6
 8005124:	d902      	bls.n	800512c <NVIC_EncodePriority+0x30>
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3b03      	subs	r3, #3
 800512a:	e000      	b.n	800512e <NVIC_EncodePriority+0x32>
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	401a      	ands	r2, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	43d9      	mvns	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005154:	4313      	orrs	r3, r2
         );
}
 8005156:	4618      	mov	r0, r3
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff ff4c 	bl	8005008 <__NVIC_SetPriorityGrouping>
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005186:	f7ff ff63 	bl	8005050 <__NVIC_GetPriorityGrouping>
 800518a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	6978      	ldr	r0, [r7, #20]
 8005192:	f7ff ffb3 	bl	80050fc <NVIC_EncodePriority>
 8005196:	4602      	mov	r2, r0
 8005198:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff82 	bl	80050a8 <__NVIC_SetPriority>
}
 80051a4:	bf00      	nop
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff ff56 	bl	800506c <__NVIC_EnableIRQ>
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e014      	b.n	8005204 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	791b      	ldrb	r3, [r3, #4]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fd fcdc 	bl	8002ba8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e046      	b.n	80052ae <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	795b      	ldrb	r3, [r3, #5]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_DAC_Start+0x20>
 8005228:	2302      	movs	r3, #2
 800522a:	e040      	b.n	80052ae <HAL_DAC_Start+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6819      	ldr	r1, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005260:	2b02      	cmp	r3, #2
 8005262:	d11d      	bne.n	80052a0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	e014      	b.n	80052a0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2102      	movs	r1, #2
 8005288:	fa01 f303 	lsl.w	r3, r1, r3
 800528c:	429a      	cmp	r2, r3
 800528e:	d107      	bne.n	80052a0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0202 	orr.w	r2, r2, #2
 800529e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0a2      	b.n	800541a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	795b      	ldrb	r3, [r3, #5]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_DAC_Start_DMA+0x24>
 80052dc:	2302      	movs	r3, #2
 80052de:	e09c      	b.n	800541a <HAL_DAC_Start_DMA+0x15e>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d129      	bne.n	8005346 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	4a4b      	ldr	r2, [pc, #300]	; (8005424 <HAL_DAC_Start_DMA+0x168>)
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4a4a      	ldr	r2, [pc, #296]	; (8005428 <HAL_DAC_Start_DMA+0x16c>)
 8005300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4a49      	ldr	r2, [pc, #292]	; (800542c <HAL_DAC_Start_DMA+0x170>)
 8005308:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005318:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_DAC_Start_DMA+0x6c>
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d005      	beq.n	8005332 <HAL_DAC_Start_DMA+0x76>
 8005326:	e009      	b.n	800533c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	613b      	str	r3, [r7, #16]
        break;
 8005330:	e033      	b.n	800539a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	613b      	str	r3, [r7, #16]
        break;
 800533a:	e02e      	b.n	800539a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3310      	adds	r3, #16
 8005342:	613b      	str	r3, [r7, #16]
        break;
 8005344:	e029      	b.n	800539a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4a39      	ldr	r2, [pc, #228]	; (8005430 <HAL_DAC_Start_DMA+0x174>)
 800534c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4a38      	ldr	r2, [pc, #224]	; (8005434 <HAL_DAC_Start_DMA+0x178>)
 8005354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4a37      	ldr	r2, [pc, #220]	; (8005438 <HAL_DAC_Start_DMA+0x17c>)
 800535c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800536c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_DAC_Start_DMA+0xc0>
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	2b04      	cmp	r3, #4
 8005378:	d005      	beq.n	8005386 <HAL_DAC_Start_DMA+0xca>
 800537a:	e009      	b.n	8005390 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	613b      	str	r3, [r7, #16]
        break;
 8005384:	e009      	b.n	800539a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3318      	adds	r3, #24
 800538c:	613b      	str	r3, [r7, #16]
        break;
 800538e:	e004      	b.n	800539a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	331c      	adds	r3, #28
 8005396:	613b      	str	r3, [r7, #16]
        break;
 8005398:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d111      	bne.n	80053c4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6898      	ldr	r0, [r3, #8]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	f000 fe67 	bl	800608c <HAL_DMA_Start_IT>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]
 80053c2:	e010      	b.n	80053e6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80053d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68d8      	ldr	r0, [r3, #12]
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	f000 fe55 	bl	800608c <HAL_DMA_Start_IT>
 80053e2:	4603      	mov	r3, r0
 80053e4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10c      	bne.n	800540c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6819      	ldr	r1, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2201      	movs	r2, #1
 8005400:	409a      	lsls	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e005      	b.n	8005418 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f043 0204 	orr.w	r2, r3, #4
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	080058ad 	.word	0x080058ad
 8005428:	080058cf 	.word	0x080058cf
 800542c:	080058eb 	.word	0x080058eb
 8005430:	08005969 	.word	0x08005969
 8005434:	0800598b 	.word	0x0800598b
 8005438:	080059a7 	.word	0x080059a7

0800543c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e03e      	b.n	80054ce <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43da      	mvns	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	400a      	ands	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2201      	movs	r2, #1
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43da      	mvns	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	400a      	ands	r2, r1
 8005488:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10d      	bne.n	80054ac <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f863 	bl	8006560 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e00c      	b.n	80054c6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f855 	bl	8006560 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80054c4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01d      	beq.n	8005534 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d018      	beq.n	8005534 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f043 0201 	orr.w	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800551c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800552c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f86f 	bl	8005612 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01d      	beq.n	800557a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d018      	beq.n	800557a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f043 0202 	orr.w	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005562:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f9ed 	bl	8005954 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005582:	b480      	push	{r7}
 8005584:	b087      	sub	sp, #28
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e015      	b.n	80055ca <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	3308      	adds	r3, #8
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e004      	b.n	80055c0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3314      	adds	r3, #20
 80055be:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	461a      	mov	r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_DAC_ConfigChannel+0x1e>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e12a      	b.n	80058a0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	795b      	ldrb	r3, [r3, #5]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_DAC_ConfigChannel+0x2e>
 8005652:	2302      	movs	r3, #2
 8005654:	e124      	b.n	80058a0 <HAL_DAC_ConfigChannel+0x278>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2202      	movs	r2, #2
 8005660:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d17a      	bne.n	8005760 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800566a:	f7fe f88b 	bl	8003784 <HAL_GetTick>
 800566e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d13d      	bne.n	80056f2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005676:	e018      	b.n	80056aa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005678:	f7fe f884 	bl	8003784 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d911      	bls.n	80056aa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568c:	4b86      	ldr	r3, [pc, #536]	; (80058a8 <HAL_DAC_ConfigChannel+0x280>)
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f043 0208 	orr.w	r2, r3, #8
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2203      	movs	r2, #3
 80056a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e0fa      	b.n	80058a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b0:	4b7d      	ldr	r3, [pc, #500]	; (80058a8 <HAL_DAC_ConfigChannel+0x280>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1df      	bne.n	8005678 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	6992      	ldr	r2, [r2, #24]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
 80056c2:	e020      	b.n	8005706 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056c4:	f7fe f85e 	bl	8003784 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d90f      	bls.n	80056f2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	2b00      	cmp	r3, #0
 80056da:	da0a      	bge.n	80056f2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f043 0208 	orr.w	r2, r3, #8
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2203      	movs	r2, #3
 80056ec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0d6      	b.n	80058a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	dbe3      	blt.n	80056c4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	6992      	ldr	r2, [r2, #24]
 8005704:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	ea02 0103 	and.w	r1, r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	409a      	lsls	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	21ff      	movs	r1, #255	; 0xff
 8005742:	fa01 f303 	lsl.w	r3, r1, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	ea02 0103 	and.w	r1, r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	409a      	lsls	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d11d      	bne.n	80057a4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	221f      	movs	r2, #31
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4013      	ands	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4313      	orrs	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2207      	movs	r2, #7
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d102      	bne.n	80057ce <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
 80057cc:	e00f      	b.n	80057ee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d102      	bne.n	80057dc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80057d6:	2301      	movs	r3, #1
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	e008      	b.n	80057ee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80057e4:	2301      	movs	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	e001      	b.n	80057ee <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6819      	ldr	r1, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43da      	mvns	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	400a      	ands	r2, r1
 8005834:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	22c0      	movs	r2, #192	; 0xc0
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43da      	mvns	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	400a      	ands	r2, r1
 800588e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800589c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3728      	adds	r7, #40	; 0x28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20008000 	.word	0x20008000

080058ac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff fe8b 	bl	80055d6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	711a      	strb	r2, [r3, #4]
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fe84 	bl	80055ea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f043 0204 	orr.w	r2, r3, #4
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff fe7a 	bl	80055fe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	711a      	strb	r2, [r3, #4]
}
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff ffce 	bl	8005918 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	711a      	strb	r2, [r3, #4]
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ffc7 	bl	800592c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f043 0204 	orr.w	r2, r3, #4
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff ffbd 	bl	8005940 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	711a      	strb	r2, [r3, #4]
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059dc:	f7fd fed2 	bl	8003784 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e316      	b.n	800601a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a66      	ldr	r2, [pc, #408]	; (8005b8c <HAL_DMA_Init+0x1b8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d04a      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a65      	ldr	r2, [pc, #404]	; (8005b90 <HAL_DMA_Init+0x1bc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d045      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a63      	ldr	r2, [pc, #396]	; (8005b94 <HAL_DMA_Init+0x1c0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d040      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a62      	ldr	r2, [pc, #392]	; (8005b98 <HAL_DMA_Init+0x1c4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d03b      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a60      	ldr	r2, [pc, #384]	; (8005b9c <HAL_DMA_Init+0x1c8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d036      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a5f      	ldr	r2, [pc, #380]	; (8005ba0 <HAL_DMA_Init+0x1cc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d031      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a5d      	ldr	r2, [pc, #372]	; (8005ba4 <HAL_DMA_Init+0x1d0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02c      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5c      	ldr	r2, [pc, #368]	; (8005ba8 <HAL_DMA_Init+0x1d4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d027      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a5a      	ldr	r2, [pc, #360]	; (8005bac <HAL_DMA_Init+0x1d8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d022      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a59      	ldr	r2, [pc, #356]	; (8005bb0 <HAL_DMA_Init+0x1dc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d01d      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a57      	ldr	r2, [pc, #348]	; (8005bb4 <HAL_DMA_Init+0x1e0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a56      	ldr	r2, [pc, #344]	; (8005bb8 <HAL_DMA_Init+0x1e4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a54      	ldr	r2, [pc, #336]	; (8005bbc <HAL_DMA_Init+0x1e8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a53      	ldr	r2, [pc, #332]	; (8005bc0 <HAL_DMA_Init+0x1ec>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a51      	ldr	r2, [pc, #324]	; (8005bc4 <HAL_DMA_Init+0x1f0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a50      	ldr	r2, [pc, #320]	; (8005bc8 <HAL_DMA_Init+0x1f4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d101      	bne.n	8005a90 <HAL_DMA_Init+0xbc>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_DMA_Init+0xbe>
 8005a90:	2300      	movs	r3, #0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 813b 	beq.w	8005d0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <HAL_DMA_Init+0x1b8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d04a      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a36      	ldr	r2, [pc, #216]	; (8005b90 <HAL_DMA_Init+0x1bc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d045      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a34      	ldr	r2, [pc, #208]	; (8005b94 <HAL_DMA_Init+0x1c0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d040      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a33      	ldr	r2, [pc, #204]	; (8005b98 <HAL_DMA_Init+0x1c4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d03b      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a31      	ldr	r2, [pc, #196]	; (8005b9c <HAL_DMA_Init+0x1c8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d036      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <HAL_DMA_Init+0x1cc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d031      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <HAL_DMA_Init+0x1d0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d02c      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2d      	ldr	r2, [pc, #180]	; (8005ba8 <HAL_DMA_Init+0x1d4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d027      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <HAL_DMA_Init+0x1d8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d022      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <HAL_DMA_Init+0x1dc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d01d      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <HAL_DMA_Init+0x1e0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d018      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <HAL_DMA_Init+0x1e4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <HAL_DMA_Init+0x1e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <HAL_DMA_Init+0x1ec>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d009      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <HAL_DMA_Init+0x1f0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <HAL_DMA_Init+0x1f4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <HAL_DMA_Init+0x186>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e007      	b.n	8005b6a <HAL_DMA_Init+0x196>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b6a:	e02f      	b.n	8005bcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b6c:	f7fd fe0a 	bl	8003784 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d928      	bls.n	8005bcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e246      	b.n	800601a <HAL_DMA_Init+0x646>
 8005b8c:	40020010 	.word	0x40020010
 8005b90:	40020028 	.word	0x40020028
 8005b94:	40020040 	.word	0x40020040
 8005b98:	40020058 	.word	0x40020058
 8005b9c:	40020070 	.word	0x40020070
 8005ba0:	40020088 	.word	0x40020088
 8005ba4:	400200a0 	.word	0x400200a0
 8005ba8:	400200b8 	.word	0x400200b8
 8005bac:	40020410 	.word	0x40020410
 8005bb0:	40020428 	.word	0x40020428
 8005bb4:	40020440 	.word	0x40020440
 8005bb8:	40020458 	.word	0x40020458
 8005bbc:	40020470 	.word	0x40020470
 8005bc0:	40020488 	.word	0x40020488
 8005bc4:	400204a0 	.word	0x400204a0
 8005bc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1c8      	bne.n	8005b6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4b83      	ldr	r3, [pc, #524]	; (8005df4 <HAL_DMA_Init+0x420>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d107      	bne.n	8005c30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005c30:	4b71      	ldr	r3, [pc, #452]	; (8005df8 <HAL_DMA_Init+0x424>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b71      	ldr	r3, [pc, #452]	; (8005dfc <HAL_DMA_Init+0x428>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3c:	d328      	bcc.n	8005c90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b28      	cmp	r3, #40	; 0x28
 8005c44:	d903      	bls.n	8005c4e <HAL_DMA_Init+0x27a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c4c:	d917      	bls.n	8005c7e <HAL_DMA_Init+0x2aa>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b3e      	cmp	r3, #62	; 0x3e
 8005c54:	d903      	bls.n	8005c5e <HAL_DMA_Init+0x28a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b42      	cmp	r3, #66	; 0x42
 8005c5c:	d90f      	bls.n	8005c7e <HAL_DMA_Init+0x2aa>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b46      	cmp	r3, #70	; 0x46
 8005c64:	d903      	bls.n	8005c6e <HAL_DMA_Init+0x29a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b48      	cmp	r3, #72	; 0x48
 8005c6c:	d907      	bls.n	8005c7e <HAL_DMA_Init+0x2aa>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b4e      	cmp	r3, #78	; 0x4e
 8005c74:	d905      	bls.n	8005c82 <HAL_DMA_Init+0x2ae>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b52      	cmp	r3, #82	; 0x52
 8005c7c:	d801      	bhi.n	8005c82 <HAL_DMA_Init+0x2ae>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <HAL_DMA_Init+0x2b0>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d117      	bne.n	8005cea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00e      	beq.n	8005cea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f002 fb33 	bl	8008338 <DMA_CheckFifoParam>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e197      	b.n	800601a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f002 fa6e 	bl	80081d4 <DMA_CalcBaseAndBitshift>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	223f      	movs	r2, #63	; 0x3f
 8005d06:	409a      	lsls	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	609a      	str	r2, [r3, #8]
 8005d0c:	e0cd      	b.n	8005eaa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3b      	ldr	r2, [pc, #236]	; (8005e00 <HAL_DMA_Init+0x42c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d022      	beq.n	8005d5e <HAL_DMA_Init+0x38a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a39      	ldr	r2, [pc, #228]	; (8005e04 <HAL_DMA_Init+0x430>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01d      	beq.n	8005d5e <HAL_DMA_Init+0x38a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a38      	ldr	r2, [pc, #224]	; (8005e08 <HAL_DMA_Init+0x434>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d018      	beq.n	8005d5e <HAL_DMA_Init+0x38a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a36      	ldr	r2, [pc, #216]	; (8005e0c <HAL_DMA_Init+0x438>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <HAL_DMA_Init+0x38a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a35      	ldr	r2, [pc, #212]	; (8005e10 <HAL_DMA_Init+0x43c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <HAL_DMA_Init+0x38a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a33      	ldr	r2, [pc, #204]	; (8005e14 <HAL_DMA_Init+0x440>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d009      	beq.n	8005d5e <HAL_DMA_Init+0x38a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a32      	ldr	r2, [pc, #200]	; (8005e18 <HAL_DMA_Init+0x444>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <HAL_DMA_Init+0x38a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a30      	ldr	r2, [pc, #192]	; (8005e1c <HAL_DMA_Init+0x448>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <HAL_DMA_Init+0x38e>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_DMA_Init+0x390>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8097 	beq.w	8005e98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a24      	ldr	r2, [pc, #144]	; (8005e00 <HAL_DMA_Init+0x42c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d021      	beq.n	8005db8 <HAL_DMA_Init+0x3e4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <HAL_DMA_Init+0x430>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01c      	beq.n	8005db8 <HAL_DMA_Init+0x3e4>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a21      	ldr	r2, [pc, #132]	; (8005e08 <HAL_DMA_Init+0x434>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d017      	beq.n	8005db8 <HAL_DMA_Init+0x3e4>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_DMA_Init+0x438>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d012      	beq.n	8005db8 <HAL_DMA_Init+0x3e4>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_DMA_Init+0x43c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00d      	beq.n	8005db8 <HAL_DMA_Init+0x3e4>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_DMA_Init+0x440>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d008      	beq.n	8005db8 <HAL_DMA_Init+0x3e4>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_DMA_Init+0x444>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <HAL_DMA_Init+0x3e4>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <HAL_DMA_Init+0x448>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <HAL_DMA_Init+0x44c>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d020      	beq.n	8005e24 <HAL_DMA_Init+0x450>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d102      	bne.n	8005df0 <HAL_DMA_Init+0x41c>
 8005dea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dee:	e01a      	b.n	8005e26 <HAL_DMA_Init+0x452>
 8005df0:	2300      	movs	r3, #0
 8005df2:	e018      	b.n	8005e26 <HAL_DMA_Init+0x452>
 8005df4:	fe10803f 	.word	0xfe10803f
 8005df8:	5c001000 	.word	0x5c001000
 8005dfc:	ffff0000 	.word	0xffff0000
 8005e00:	58025408 	.word	0x58025408
 8005e04:	5802541c 	.word	0x5802541c
 8005e08:	58025430 	.word	0x58025430
 8005e0c:	58025444 	.word	0x58025444
 8005e10:	58025458 	.word	0x58025458
 8005e14:	5802546c 	.word	0x5802546c
 8005e18:	58025480 	.word	0x58025480
 8005e1c:	58025494 	.word	0x58025494
 8005e20:	fffe000f 	.word	0xfffe000f
 8005e24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68d2      	ldr	r2, [r2, #12]
 8005e2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b6e      	ldr	r3, [pc, #440]	; (8006024 <HAL_DMA_Init+0x650>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4a6e      	ldr	r2, [pc, #440]	; (8006028 <HAL_DMA_Init+0x654>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	009a      	lsls	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f002 f9a9 	bl	80081d4 <DMA_CalcBaseAndBitshift>
 8005e82:	4603      	mov	r3, r0
 8005e84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2201      	movs	r2, #1
 8005e90:	409a      	lsls	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]
 8005e96:	e008      	b.n	8005eaa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2240      	movs	r2, #64	; 0x40
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e0b7      	b.n	800601a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5f      	ldr	r2, [pc, #380]	; (800602c <HAL_DMA_Init+0x658>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d072      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a5d      	ldr	r2, [pc, #372]	; (8006030 <HAL_DMA_Init+0x65c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d06d      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5c      	ldr	r2, [pc, #368]	; (8006034 <HAL_DMA_Init+0x660>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d068      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a5a      	ldr	r2, [pc, #360]	; (8006038 <HAL_DMA_Init+0x664>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d063      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a59      	ldr	r2, [pc, #356]	; (800603c <HAL_DMA_Init+0x668>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d05e      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a57      	ldr	r2, [pc, #348]	; (8006040 <HAL_DMA_Init+0x66c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d059      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a56      	ldr	r2, [pc, #344]	; (8006044 <HAL_DMA_Init+0x670>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d054      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a54      	ldr	r2, [pc, #336]	; (8006048 <HAL_DMA_Init+0x674>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d04f      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a53      	ldr	r2, [pc, #332]	; (800604c <HAL_DMA_Init+0x678>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d04a      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a51      	ldr	r2, [pc, #324]	; (8006050 <HAL_DMA_Init+0x67c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d045      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a50      	ldr	r2, [pc, #320]	; (8006054 <HAL_DMA_Init+0x680>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d040      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a4e      	ldr	r2, [pc, #312]	; (8006058 <HAL_DMA_Init+0x684>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d03b      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a4d      	ldr	r2, [pc, #308]	; (800605c <HAL_DMA_Init+0x688>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d036      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a4b      	ldr	r2, [pc, #300]	; (8006060 <HAL_DMA_Init+0x68c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d031      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4a      	ldr	r2, [pc, #296]	; (8006064 <HAL_DMA_Init+0x690>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d02c      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a48      	ldr	r2, [pc, #288]	; (8006068 <HAL_DMA_Init+0x694>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d027      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a47      	ldr	r2, [pc, #284]	; (800606c <HAL_DMA_Init+0x698>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d022      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a45      	ldr	r2, [pc, #276]	; (8006070 <HAL_DMA_Init+0x69c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01d      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a44      	ldr	r2, [pc, #272]	; (8006074 <HAL_DMA_Init+0x6a0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d018      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a42      	ldr	r2, [pc, #264]	; (8006078 <HAL_DMA_Init+0x6a4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a41      	ldr	r2, [pc, #260]	; (800607c <HAL_DMA_Init+0x6a8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00e      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a3f      	ldr	r2, [pc, #252]	; (8006080 <HAL_DMA_Init+0x6ac>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a3e      	ldr	r2, [pc, #248]	; (8006084 <HAL_DMA_Init+0x6b0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_DMA_Init+0x5c6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a3c      	ldr	r2, [pc, #240]	; (8006088 <HAL_DMA_Init+0x6b4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_DMA_Init+0x5ca>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_DMA_Init+0x5cc>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d032      	beq.n	800600a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f002 fa43 	bl	8008430 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b80      	cmp	r3, #128	; 0x80
 8005fb0:	d102      	bne.n	8005fb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d010      	beq.n	8005ff8 <HAL_DMA_Init+0x624>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d80c      	bhi.n	8005ff8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fac0 	bl	8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	e008      	b.n	800600a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	a7fdabf8 	.word	0xa7fdabf8
 8006028:	cccccccd 	.word	0xcccccccd
 800602c:	40020010 	.word	0x40020010
 8006030:	40020028 	.word	0x40020028
 8006034:	40020040 	.word	0x40020040
 8006038:	40020058 	.word	0x40020058
 800603c:	40020070 	.word	0x40020070
 8006040:	40020088 	.word	0x40020088
 8006044:	400200a0 	.word	0x400200a0
 8006048:	400200b8 	.word	0x400200b8
 800604c:	40020410 	.word	0x40020410
 8006050:	40020428 	.word	0x40020428
 8006054:	40020440 	.word	0x40020440
 8006058:	40020458 	.word	0x40020458
 800605c:	40020470 	.word	0x40020470
 8006060:	40020488 	.word	0x40020488
 8006064:	400204a0 	.word	0x400204a0
 8006068:	400204b8 	.word	0x400204b8
 800606c:	58025408 	.word	0x58025408
 8006070:	5802541c 	.word	0x5802541c
 8006074:	58025430 	.word	0x58025430
 8006078:	58025444 	.word	0x58025444
 800607c:	58025458 	.word	0x58025458
 8006080:	5802546c 	.word	0x5802546c
 8006084:	58025480 	.word	0x58025480
 8006088:	58025494 	.word	0x58025494

0800608c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e226      	b.n	80064f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_DMA_Start_IT+0x2a>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e21f      	b.n	80064f6 <HAL_DMA_Start_IT+0x46a>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	f040 820a 	bne.w	80064e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a68      	ldr	r2, [pc, #416]	; (8006280 <HAL_DMA_Start_IT+0x1f4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d04a      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a66      	ldr	r2, [pc, #408]	; (8006284 <HAL_DMA_Start_IT+0x1f8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d045      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a65      	ldr	r2, [pc, #404]	; (8006288 <HAL_DMA_Start_IT+0x1fc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d040      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a63      	ldr	r2, [pc, #396]	; (800628c <HAL_DMA_Start_IT+0x200>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d03b      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a62      	ldr	r2, [pc, #392]	; (8006290 <HAL_DMA_Start_IT+0x204>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d036      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a60      	ldr	r2, [pc, #384]	; (8006294 <HAL_DMA_Start_IT+0x208>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d031      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a5f      	ldr	r2, [pc, #380]	; (8006298 <HAL_DMA_Start_IT+0x20c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d02c      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a5d      	ldr	r2, [pc, #372]	; (800629c <HAL_DMA_Start_IT+0x210>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d027      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a5c      	ldr	r2, [pc, #368]	; (80062a0 <HAL_DMA_Start_IT+0x214>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a5a      	ldr	r2, [pc, #360]	; (80062a4 <HAL_DMA_Start_IT+0x218>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a59      	ldr	r2, [pc, #356]	; (80062a8 <HAL_DMA_Start_IT+0x21c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d018      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a57      	ldr	r2, [pc, #348]	; (80062ac <HAL_DMA_Start_IT+0x220>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a56      	ldr	r2, [pc, #344]	; (80062b0 <HAL_DMA_Start_IT+0x224>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a54      	ldr	r2, [pc, #336]	; (80062b4 <HAL_DMA_Start_IT+0x228>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a53      	ldr	r2, [pc, #332]	; (80062b8 <HAL_DMA_Start_IT+0x22c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_DMA_Start_IT+0xee>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a51      	ldr	r2, [pc, #324]	; (80062bc <HAL_DMA_Start_IT+0x230>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d108      	bne.n	800618c <HAL_DMA_Start_IT+0x100>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e007      	b.n	800619c <HAL_DMA_Start_IT+0x110>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f001 fe6a 	bl	8007e7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a34      	ldr	r2, [pc, #208]	; (8006280 <HAL_DMA_Start_IT+0x1f4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a33      	ldr	r2, [pc, #204]	; (8006284 <HAL_DMA_Start_IT+0x1f8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d045      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a31      	ldr	r2, [pc, #196]	; (8006288 <HAL_DMA_Start_IT+0x1fc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d040      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a30      	ldr	r2, [pc, #192]	; (800628c <HAL_DMA_Start_IT+0x200>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d03b      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a2e      	ldr	r2, [pc, #184]	; (8006290 <HAL_DMA_Start_IT+0x204>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d036      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a2d      	ldr	r2, [pc, #180]	; (8006294 <HAL_DMA_Start_IT+0x208>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d031      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2b      	ldr	r2, [pc, #172]	; (8006298 <HAL_DMA_Start_IT+0x20c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02c      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2a      	ldr	r2, [pc, #168]	; (800629c <HAL_DMA_Start_IT+0x210>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d027      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a28      	ldr	r2, [pc, #160]	; (80062a0 <HAL_DMA_Start_IT+0x214>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d022      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <HAL_DMA_Start_IT+0x218>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d01d      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a25      	ldr	r2, [pc, #148]	; (80062a8 <HAL_DMA_Start_IT+0x21c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a24      	ldr	r2, [pc, #144]	; (80062ac <HAL_DMA_Start_IT+0x220>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <HAL_DMA_Start_IT+0x224>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00e      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <HAL_DMA_Start_IT+0x228>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1f      	ldr	r2, [pc, #124]	; (80062b8 <HAL_DMA_Start_IT+0x22c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_DMA_Start_IT+0x1bc>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1e      	ldr	r2, [pc, #120]	; (80062bc <HAL_DMA_Start_IT+0x230>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d101      	bne.n	800624c <HAL_DMA_Start_IT+0x1c0>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <HAL_DMA_Start_IT+0x1c2>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d036      	beq.n	80062c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 021e 	bic.w	r2, r3, #30
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0216 	orr.w	r2, r2, #22
 8006264:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d03e      	beq.n	80062ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0208 	orr.w	r2, r2, #8
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e035      	b.n	80062ec <HAL_DMA_Start_IT+0x260>
 8006280:	40020010 	.word	0x40020010
 8006284:	40020028 	.word	0x40020028
 8006288:	40020040 	.word	0x40020040
 800628c:	40020058 	.word	0x40020058
 8006290:	40020070 	.word	0x40020070
 8006294:	40020088 	.word	0x40020088
 8006298:	400200a0 	.word	0x400200a0
 800629c:	400200b8 	.word	0x400200b8
 80062a0:	40020410 	.word	0x40020410
 80062a4:	40020428 	.word	0x40020428
 80062a8:	40020440 	.word	0x40020440
 80062ac:	40020458 	.word	0x40020458
 80062b0:	40020470 	.word	0x40020470
 80062b4:	40020488 	.word	0x40020488
 80062b8:	400204a0 	.word	0x400204a0
 80062bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f023 020e 	bic.w	r2, r3, #14
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 020a 	orr.w	r2, r2, #10
 80062d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0204 	orr.w	r2, r2, #4
 80062ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a83      	ldr	r2, [pc, #524]	; (8006500 <HAL_DMA_Start_IT+0x474>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d072      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a82      	ldr	r2, [pc, #520]	; (8006504 <HAL_DMA_Start_IT+0x478>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d06d      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a80      	ldr	r2, [pc, #512]	; (8006508 <HAL_DMA_Start_IT+0x47c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d068      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a7f      	ldr	r2, [pc, #508]	; (800650c <HAL_DMA_Start_IT+0x480>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d063      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a7d      	ldr	r2, [pc, #500]	; (8006510 <HAL_DMA_Start_IT+0x484>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d05e      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a7c      	ldr	r2, [pc, #496]	; (8006514 <HAL_DMA_Start_IT+0x488>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d059      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a7a      	ldr	r2, [pc, #488]	; (8006518 <HAL_DMA_Start_IT+0x48c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d054      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a79      	ldr	r2, [pc, #484]	; (800651c <HAL_DMA_Start_IT+0x490>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d04f      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a77      	ldr	r2, [pc, #476]	; (8006520 <HAL_DMA_Start_IT+0x494>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d04a      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a76      	ldr	r2, [pc, #472]	; (8006524 <HAL_DMA_Start_IT+0x498>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d045      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a74      	ldr	r2, [pc, #464]	; (8006528 <HAL_DMA_Start_IT+0x49c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d040      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a73      	ldr	r2, [pc, #460]	; (800652c <HAL_DMA_Start_IT+0x4a0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d03b      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a71      	ldr	r2, [pc, #452]	; (8006530 <HAL_DMA_Start_IT+0x4a4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d036      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a70      	ldr	r2, [pc, #448]	; (8006534 <HAL_DMA_Start_IT+0x4a8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d031      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a6e      	ldr	r2, [pc, #440]	; (8006538 <HAL_DMA_Start_IT+0x4ac>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d02c      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a6d      	ldr	r2, [pc, #436]	; (800653c <HAL_DMA_Start_IT+0x4b0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d027      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a6b      	ldr	r2, [pc, #428]	; (8006540 <HAL_DMA_Start_IT+0x4b4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d022      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a6a      	ldr	r2, [pc, #424]	; (8006544 <HAL_DMA_Start_IT+0x4b8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d01d      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a68      	ldr	r2, [pc, #416]	; (8006548 <HAL_DMA_Start_IT+0x4bc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d018      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a67      	ldr	r2, [pc, #412]	; (800654c <HAL_DMA_Start_IT+0x4c0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a65      	ldr	r2, [pc, #404]	; (8006550 <HAL_DMA_Start_IT+0x4c4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00e      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a64      	ldr	r2, [pc, #400]	; (8006554 <HAL_DMA_Start_IT+0x4c8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a62      	ldr	r2, [pc, #392]	; (8006558 <HAL_DMA_Start_IT+0x4cc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_DMA_Start_IT+0x350>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a61      	ldr	r2, [pc, #388]	; (800655c <HAL_DMA_Start_IT+0x4d0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d101      	bne.n	80063e0 <HAL_DMA_Start_IT+0x354>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <HAL_DMA_Start_IT+0x356>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01a      	beq.n	800641c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006402:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800641a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a37      	ldr	r2, [pc, #220]	; (8006500 <HAL_DMA_Start_IT+0x474>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d04a      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a36      	ldr	r2, [pc, #216]	; (8006504 <HAL_DMA_Start_IT+0x478>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d045      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a34      	ldr	r2, [pc, #208]	; (8006508 <HAL_DMA_Start_IT+0x47c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d040      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a33      	ldr	r2, [pc, #204]	; (800650c <HAL_DMA_Start_IT+0x480>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d03b      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a31      	ldr	r2, [pc, #196]	; (8006510 <HAL_DMA_Start_IT+0x484>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d036      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a30      	ldr	r2, [pc, #192]	; (8006514 <HAL_DMA_Start_IT+0x488>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d031      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a2e      	ldr	r2, [pc, #184]	; (8006518 <HAL_DMA_Start_IT+0x48c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d02c      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a2d      	ldr	r2, [pc, #180]	; (800651c <HAL_DMA_Start_IT+0x490>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d027      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2b      	ldr	r2, [pc, #172]	; (8006520 <HAL_DMA_Start_IT+0x494>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d022      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <HAL_DMA_Start_IT+0x498>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01d      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a28      	ldr	r2, [pc, #160]	; (8006528 <HAL_DMA_Start_IT+0x49c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a27      	ldr	r2, [pc, #156]	; (800652c <HAL_DMA_Start_IT+0x4a0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a25      	ldr	r2, [pc, #148]	; (8006530 <HAL_DMA_Start_IT+0x4a4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a24      	ldr	r2, [pc, #144]	; (8006534 <HAL_DMA_Start_IT+0x4a8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_DMA_Start_IT+0x4ac>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_DMA_Start_IT+0x430>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a21      	ldr	r2, [pc, #132]	; (800653c <HAL_DMA_Start_IT+0x4b0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d108      	bne.n	80064ce <HAL_DMA_Start_IT+0x442>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e012      	b.n	80064f4 <HAL_DMA_Start_IT+0x468>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e009      	b.n	80064f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40020010 	.word	0x40020010
 8006504:	40020028 	.word	0x40020028
 8006508:	40020040 	.word	0x40020040
 800650c:	40020058 	.word	0x40020058
 8006510:	40020070 	.word	0x40020070
 8006514:	40020088 	.word	0x40020088
 8006518:	400200a0 	.word	0x400200a0
 800651c:	400200b8 	.word	0x400200b8
 8006520:	40020410 	.word	0x40020410
 8006524:	40020428 	.word	0x40020428
 8006528:	40020440 	.word	0x40020440
 800652c:	40020458 	.word	0x40020458
 8006530:	40020470 	.word	0x40020470
 8006534:	40020488 	.word	0x40020488
 8006538:	400204a0 	.word	0x400204a0
 800653c:	400204b8 	.word	0x400204b8
 8006540:	58025408 	.word	0x58025408
 8006544:	5802541c 	.word	0x5802541c
 8006548:	58025430 	.word	0x58025430
 800654c:	58025444 	.word	0x58025444
 8006550:	58025458 	.word	0x58025458
 8006554:	5802546c 	.word	0x5802546c
 8006558:	58025480 	.word	0x58025480
 800655c:	58025494 	.word	0x58025494

08006560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006568:	f7fd f90c 	bl	8003784 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e2dc      	b.n	8006b32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d008      	beq.n	8006596 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2280      	movs	r2, #128	; 0x80
 8006588:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e2cd      	b.n	8006b32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a76      	ldr	r2, [pc, #472]	; (8006774 <HAL_DMA_Abort+0x214>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d04a      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a74      	ldr	r2, [pc, #464]	; (8006778 <HAL_DMA_Abort+0x218>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d045      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a73      	ldr	r2, [pc, #460]	; (800677c <HAL_DMA_Abort+0x21c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d040      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a71      	ldr	r2, [pc, #452]	; (8006780 <HAL_DMA_Abort+0x220>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d03b      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a70      	ldr	r2, [pc, #448]	; (8006784 <HAL_DMA_Abort+0x224>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d036      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a6e      	ldr	r2, [pc, #440]	; (8006788 <HAL_DMA_Abort+0x228>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d031      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6d      	ldr	r2, [pc, #436]	; (800678c <HAL_DMA_Abort+0x22c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d02c      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a6b      	ldr	r2, [pc, #428]	; (8006790 <HAL_DMA_Abort+0x230>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d027      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6a      	ldr	r2, [pc, #424]	; (8006794 <HAL_DMA_Abort+0x234>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d022      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a68      	ldr	r2, [pc, #416]	; (8006798 <HAL_DMA_Abort+0x238>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01d      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a67      	ldr	r2, [pc, #412]	; (800679c <HAL_DMA_Abort+0x23c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a65      	ldr	r2, [pc, #404]	; (80067a0 <HAL_DMA_Abort+0x240>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a64      	ldr	r2, [pc, #400]	; (80067a4 <HAL_DMA_Abort+0x244>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a62      	ldr	r2, [pc, #392]	; (80067a8 <HAL_DMA_Abort+0x248>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a61      	ldr	r2, [pc, #388]	; (80067ac <HAL_DMA_Abort+0x24c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_DMA_Abort+0xd6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a5f      	ldr	r2, [pc, #380]	; (80067b0 <HAL_DMA_Abort+0x250>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_DMA_Abort+0xda>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_DMA_Abort+0xdc>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d013      	beq.n	8006668 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 021e 	bic.w	r2, r2, #30
 800664e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800665e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e00a      	b.n	800667e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 020e 	bic.w	r2, r2, #14
 8006676:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a3c      	ldr	r2, [pc, #240]	; (8006774 <HAL_DMA_Abort+0x214>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d072      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a3a      	ldr	r2, [pc, #232]	; (8006778 <HAL_DMA_Abort+0x218>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d06d      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a39      	ldr	r2, [pc, #228]	; (800677c <HAL_DMA_Abort+0x21c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d068      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a37      	ldr	r2, [pc, #220]	; (8006780 <HAL_DMA_Abort+0x220>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d063      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a36      	ldr	r2, [pc, #216]	; (8006784 <HAL_DMA_Abort+0x224>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d05e      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a34      	ldr	r2, [pc, #208]	; (8006788 <HAL_DMA_Abort+0x228>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d059      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a33      	ldr	r2, [pc, #204]	; (800678c <HAL_DMA_Abort+0x22c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d054      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a31      	ldr	r2, [pc, #196]	; (8006790 <HAL_DMA_Abort+0x230>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d04f      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a30      	ldr	r2, [pc, #192]	; (8006794 <HAL_DMA_Abort+0x234>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d04a      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2e      	ldr	r2, [pc, #184]	; (8006798 <HAL_DMA_Abort+0x238>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d045      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a2d      	ldr	r2, [pc, #180]	; (800679c <HAL_DMA_Abort+0x23c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d040      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2b      	ldr	r2, [pc, #172]	; (80067a0 <HAL_DMA_Abort+0x240>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d03b      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <HAL_DMA_Abort+0x244>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d036      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a28      	ldr	r2, [pc, #160]	; (80067a8 <HAL_DMA_Abort+0x248>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d031      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a27      	ldr	r2, [pc, #156]	; (80067ac <HAL_DMA_Abort+0x24c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d02c      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a25      	ldr	r2, [pc, #148]	; (80067b0 <HAL_DMA_Abort+0x250>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d027      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a24      	ldr	r2, [pc, #144]	; (80067b4 <HAL_DMA_Abort+0x254>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d022      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a22      	ldr	r2, [pc, #136]	; (80067b8 <HAL_DMA_Abort+0x258>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a21      	ldr	r2, [pc, #132]	; (80067bc <HAL_DMA_Abort+0x25c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <HAL_DMA_Abort+0x260>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <HAL_DMA_Abort+0x264>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <HAL_DMA_Abort+0x268>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1b      	ldr	r2, [pc, #108]	; (80067cc <HAL_DMA_Abort+0x26c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_DMA_Abort+0x20e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <HAL_DMA_Abort+0x270>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d132      	bne.n	80067d4 <HAL_DMA_Abort+0x274>
 800676e:	2301      	movs	r3, #1
 8006770:	e031      	b.n	80067d6 <HAL_DMA_Abort+0x276>
 8006772:	bf00      	nop
 8006774:	40020010 	.word	0x40020010
 8006778:	40020028 	.word	0x40020028
 800677c:	40020040 	.word	0x40020040
 8006780:	40020058 	.word	0x40020058
 8006784:	40020070 	.word	0x40020070
 8006788:	40020088 	.word	0x40020088
 800678c:	400200a0 	.word	0x400200a0
 8006790:	400200b8 	.word	0x400200b8
 8006794:	40020410 	.word	0x40020410
 8006798:	40020428 	.word	0x40020428
 800679c:	40020440 	.word	0x40020440
 80067a0:	40020458 	.word	0x40020458
 80067a4:	40020470 	.word	0x40020470
 80067a8:	40020488 	.word	0x40020488
 80067ac:	400204a0 	.word	0x400204a0
 80067b0:	400204b8 	.word	0x400204b8
 80067b4:	58025408 	.word	0x58025408
 80067b8:	5802541c 	.word	0x5802541c
 80067bc:	58025430 	.word	0x58025430
 80067c0:	58025444 	.word	0x58025444
 80067c4:	58025458 	.word	0x58025458
 80067c8:	5802546c 	.word	0x5802546c
 80067cc:	58025480 	.word	0x58025480
 80067d0:	58025494 	.word	0x58025494
 80067d4:	2300      	movs	r3, #0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a6d      	ldr	r2, [pc, #436]	; (80069a4 <HAL_DMA_Abort+0x444>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d04a      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a6b      	ldr	r2, [pc, #428]	; (80069a8 <HAL_DMA_Abort+0x448>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d045      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a6a      	ldr	r2, [pc, #424]	; (80069ac <HAL_DMA_Abort+0x44c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d040      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a68      	ldr	r2, [pc, #416]	; (80069b0 <HAL_DMA_Abort+0x450>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d03b      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a67      	ldr	r2, [pc, #412]	; (80069b4 <HAL_DMA_Abort+0x454>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d036      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a65      	ldr	r2, [pc, #404]	; (80069b8 <HAL_DMA_Abort+0x458>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d031      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a64      	ldr	r2, [pc, #400]	; (80069bc <HAL_DMA_Abort+0x45c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d02c      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a62      	ldr	r2, [pc, #392]	; (80069c0 <HAL_DMA_Abort+0x460>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d027      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a61      	ldr	r2, [pc, #388]	; (80069c4 <HAL_DMA_Abort+0x464>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a5f      	ldr	r2, [pc, #380]	; (80069c8 <HAL_DMA_Abort+0x468>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a5e      	ldr	r2, [pc, #376]	; (80069cc <HAL_DMA_Abort+0x46c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a5c      	ldr	r2, [pc, #368]	; (80069d0 <HAL_DMA_Abort+0x470>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a5b      	ldr	r2, [pc, #364]	; (80069d4 <HAL_DMA_Abort+0x474>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a59      	ldr	r2, [pc, #356]	; (80069d8 <HAL_DMA_Abort+0x478>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a58      	ldr	r2, [pc, #352]	; (80069dc <HAL_DMA_Abort+0x47c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_DMA_Abort+0x32a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a56      	ldr	r2, [pc, #344]	; (80069e0 <HAL_DMA_Abort+0x480>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d108      	bne.n	800689c <HAL_DMA_Abort+0x33c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e007      	b.n	80068ac <HAL_DMA_Abort+0x34c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068ac:	e013      	b.n	80068d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068ae:	f7fc ff69 	bl	8003784 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d90c      	bls.n	80068d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2203      	movs	r2, #3
 80068c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e12d      	b.n	8006b32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e5      	bne.n	80068ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2f      	ldr	r2, [pc, #188]	; (80069a4 <HAL_DMA_Abort+0x444>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d04a      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a2d      	ldr	r2, [pc, #180]	; (80069a8 <HAL_DMA_Abort+0x448>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d045      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2c      	ldr	r2, [pc, #176]	; (80069ac <HAL_DMA_Abort+0x44c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d040      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2a      	ldr	r2, [pc, #168]	; (80069b0 <HAL_DMA_Abort+0x450>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d03b      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a29      	ldr	r2, [pc, #164]	; (80069b4 <HAL_DMA_Abort+0x454>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d036      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a27      	ldr	r2, [pc, #156]	; (80069b8 <HAL_DMA_Abort+0x458>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d031      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a26      	ldr	r2, [pc, #152]	; (80069bc <HAL_DMA_Abort+0x45c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d02c      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a24      	ldr	r2, [pc, #144]	; (80069c0 <HAL_DMA_Abort+0x460>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d027      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a23      	ldr	r2, [pc, #140]	; (80069c4 <HAL_DMA_Abort+0x464>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d022      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <HAL_DMA_Abort+0x468>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01d      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a20      	ldr	r2, [pc, #128]	; (80069cc <HAL_DMA_Abort+0x46c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d018      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <HAL_DMA_Abort+0x470>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <HAL_DMA_Abort+0x474>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00e      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <HAL_DMA_Abort+0x478>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1a      	ldr	r2, [pc, #104]	; (80069dc <HAL_DMA_Abort+0x47c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_DMA_Abort+0x422>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_DMA_Abort+0x480>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d101      	bne.n	8006986 <HAL_DMA_Abort+0x426>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <HAL_DMA_Abort+0x428>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d02b      	beq.n	80069e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006990:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	223f      	movs	r2, #63	; 0x3f
 800699c:	409a      	lsls	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	609a      	str	r2, [r3, #8]
 80069a2:	e02a      	b.n	80069fa <HAL_DMA_Abort+0x49a>
 80069a4:	40020010 	.word	0x40020010
 80069a8:	40020028 	.word	0x40020028
 80069ac:	40020040 	.word	0x40020040
 80069b0:	40020058 	.word	0x40020058
 80069b4:	40020070 	.word	0x40020070
 80069b8:	40020088 	.word	0x40020088
 80069bc:	400200a0 	.word	0x400200a0
 80069c0:	400200b8 	.word	0x400200b8
 80069c4:	40020410 	.word	0x40020410
 80069c8:	40020428 	.word	0x40020428
 80069cc:	40020440 	.word	0x40020440
 80069d0:	40020458 	.word	0x40020458
 80069d4:	40020470 	.word	0x40020470
 80069d8:	40020488 	.word	0x40020488
 80069dc:	400204a0 	.word	0x400204a0
 80069e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	2201      	movs	r2, #1
 80069f4:	409a      	lsls	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a4f      	ldr	r2, [pc, #316]	; (8006b3c <HAL_DMA_Abort+0x5dc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d072      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a4d      	ldr	r2, [pc, #308]	; (8006b40 <HAL_DMA_Abort+0x5e0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d06d      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a4c      	ldr	r2, [pc, #304]	; (8006b44 <HAL_DMA_Abort+0x5e4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d068      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a4a      	ldr	r2, [pc, #296]	; (8006b48 <HAL_DMA_Abort+0x5e8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d063      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a49      	ldr	r2, [pc, #292]	; (8006b4c <HAL_DMA_Abort+0x5ec>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d05e      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a47      	ldr	r2, [pc, #284]	; (8006b50 <HAL_DMA_Abort+0x5f0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d059      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a46      	ldr	r2, [pc, #280]	; (8006b54 <HAL_DMA_Abort+0x5f4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d054      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a44      	ldr	r2, [pc, #272]	; (8006b58 <HAL_DMA_Abort+0x5f8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d04f      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a43      	ldr	r2, [pc, #268]	; (8006b5c <HAL_DMA_Abort+0x5fc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d04a      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a41      	ldr	r2, [pc, #260]	; (8006b60 <HAL_DMA_Abort+0x600>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d045      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a40      	ldr	r2, [pc, #256]	; (8006b64 <HAL_DMA_Abort+0x604>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d040      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <HAL_DMA_Abort+0x608>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d03b      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <HAL_DMA_Abort+0x60c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d036      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a3b      	ldr	r2, [pc, #236]	; (8006b70 <HAL_DMA_Abort+0x610>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d031      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a3a      	ldr	r2, [pc, #232]	; (8006b74 <HAL_DMA_Abort+0x614>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d02c      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a38      	ldr	r2, [pc, #224]	; (8006b78 <HAL_DMA_Abort+0x618>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d027      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a37      	ldr	r2, [pc, #220]	; (8006b7c <HAL_DMA_Abort+0x61c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d022      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a35      	ldr	r2, [pc, #212]	; (8006b80 <HAL_DMA_Abort+0x620>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d01d      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a34      	ldr	r2, [pc, #208]	; (8006b84 <HAL_DMA_Abort+0x624>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d018      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a32      	ldr	r2, [pc, #200]	; (8006b88 <HAL_DMA_Abort+0x628>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d013      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a31      	ldr	r2, [pc, #196]	; (8006b8c <HAL_DMA_Abort+0x62c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00e      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2f      	ldr	r2, [pc, #188]	; (8006b90 <HAL_DMA_Abort+0x630>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d009      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2e      	ldr	r2, [pc, #184]	; (8006b94 <HAL_DMA_Abort+0x634>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d004      	beq.n	8006aea <HAL_DMA_Abort+0x58a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <HAL_DMA_Abort+0x638>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d101      	bne.n	8006aee <HAL_DMA_Abort+0x58e>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <HAL_DMA_Abort+0x590>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d015      	beq.n	8006b20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006afc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40020010 	.word	0x40020010
 8006b40:	40020028 	.word	0x40020028
 8006b44:	40020040 	.word	0x40020040
 8006b48:	40020058 	.word	0x40020058
 8006b4c:	40020070 	.word	0x40020070
 8006b50:	40020088 	.word	0x40020088
 8006b54:	400200a0 	.word	0x400200a0
 8006b58:	400200b8 	.word	0x400200b8
 8006b5c:	40020410 	.word	0x40020410
 8006b60:	40020428 	.word	0x40020428
 8006b64:	40020440 	.word	0x40020440
 8006b68:	40020458 	.word	0x40020458
 8006b6c:	40020470 	.word	0x40020470
 8006b70:	40020488 	.word	0x40020488
 8006b74:	400204a0 	.word	0x400204a0
 8006b78:	400204b8 	.word	0x400204b8
 8006b7c:	58025408 	.word	0x58025408
 8006b80:	5802541c 	.word	0x5802541c
 8006b84:	58025430 	.word	0x58025430
 8006b88:	58025444 	.word	0x58025444
 8006b8c:	58025458 	.word	0x58025458
 8006b90:	5802546c 	.word	0x5802546c
 8006b94:	58025480 	.word	0x58025480
 8006b98:	58025494 	.word	0x58025494

08006b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e237      	b.n	800701e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2280      	movs	r2, #128	; 0x80
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e22c      	b.n	800701e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a5c      	ldr	r2, [pc, #368]	; (8006d3c <HAL_DMA_Abort_IT+0x1a0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d04a      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a5b      	ldr	r2, [pc, #364]	; (8006d40 <HAL_DMA_Abort_IT+0x1a4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d045      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a59      	ldr	r2, [pc, #356]	; (8006d44 <HAL_DMA_Abort_IT+0x1a8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d040      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a58      	ldr	r2, [pc, #352]	; (8006d48 <HAL_DMA_Abort_IT+0x1ac>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d03b      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a56      	ldr	r2, [pc, #344]	; (8006d4c <HAL_DMA_Abort_IT+0x1b0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d036      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a55      	ldr	r2, [pc, #340]	; (8006d50 <HAL_DMA_Abort_IT+0x1b4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d031      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a53      	ldr	r2, [pc, #332]	; (8006d54 <HAL_DMA_Abort_IT+0x1b8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d02c      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a52      	ldr	r2, [pc, #328]	; (8006d58 <HAL_DMA_Abort_IT+0x1bc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d027      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a50      	ldr	r2, [pc, #320]	; (8006d5c <HAL_DMA_Abort_IT+0x1c0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d022      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a4f      	ldr	r2, [pc, #316]	; (8006d60 <HAL_DMA_Abort_IT+0x1c4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d01d      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a4d      	ldr	r2, [pc, #308]	; (8006d64 <HAL_DMA_Abort_IT+0x1c8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a4c      	ldr	r2, [pc, #304]	; (8006d68 <HAL_DMA_Abort_IT+0x1cc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a4a      	ldr	r2, [pc, #296]	; (8006d6c <HAL_DMA_Abort_IT+0x1d0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00e      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a49      	ldr	r2, [pc, #292]	; (8006d70 <HAL_DMA_Abort_IT+0x1d4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a47      	ldr	r2, [pc, #284]	; (8006d74 <HAL_DMA_Abort_IT+0x1d8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a46      	ldr	r2, [pc, #280]	; (8006d78 <HAL_DMA_Abort_IT+0x1dc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <HAL_DMA_Abort_IT+0xcc>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <HAL_DMA_Abort_IT+0xce>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8086 	beq.w	8006d7c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2204      	movs	r2, #4
 8006c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a2f      	ldr	r2, [pc, #188]	; (8006d3c <HAL_DMA_Abort_IT+0x1a0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d04a      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a2e      	ldr	r2, [pc, #184]	; (8006d40 <HAL_DMA_Abort_IT+0x1a4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d045      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2c      	ldr	r2, [pc, #176]	; (8006d44 <HAL_DMA_Abort_IT+0x1a8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d040      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a2b      	ldr	r2, [pc, #172]	; (8006d48 <HAL_DMA_Abort_IT+0x1ac>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d03b      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a29      	ldr	r2, [pc, #164]	; (8006d4c <HAL_DMA_Abort_IT+0x1b0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d036      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <HAL_DMA_Abort_IT+0x1b4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d031      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a26      	ldr	r2, [pc, #152]	; (8006d54 <HAL_DMA_Abort_IT+0x1b8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d02c      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a25      	ldr	r2, [pc, #148]	; (8006d58 <HAL_DMA_Abort_IT+0x1bc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d027      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a23      	ldr	r2, [pc, #140]	; (8006d5c <HAL_DMA_Abort_IT+0x1c0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d022      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <HAL_DMA_Abort_IT+0x1c4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d01d      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <HAL_DMA_Abort_IT+0x1c8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d018      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <HAL_DMA_Abort_IT+0x1cc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <HAL_DMA_Abort_IT+0x1d0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1c      	ldr	r2, [pc, #112]	; (8006d70 <HAL_DMA_Abort_IT+0x1d4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a1a      	ldr	r2, [pc, #104]	; (8006d74 <HAL_DMA_Abort_IT+0x1d8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x17c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a19      	ldr	r2, [pc, #100]	; (8006d78 <HAL_DMA_Abort_IT+0x1dc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d108      	bne.n	8006d2a <HAL_DMA_Abort_IT+0x18e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0201 	bic.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e178      	b.n	800701c <HAL_DMA_Abort_IT+0x480>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e16f      	b.n	800701c <HAL_DMA_Abort_IT+0x480>
 8006d3c:	40020010 	.word	0x40020010
 8006d40:	40020028 	.word	0x40020028
 8006d44:	40020040 	.word	0x40020040
 8006d48:	40020058 	.word	0x40020058
 8006d4c:	40020070 	.word	0x40020070
 8006d50:	40020088 	.word	0x40020088
 8006d54:	400200a0 	.word	0x400200a0
 8006d58:	400200b8 	.word	0x400200b8
 8006d5c:	40020410 	.word	0x40020410
 8006d60:	40020428 	.word	0x40020428
 8006d64:	40020440 	.word	0x40020440
 8006d68:	40020458 	.word	0x40020458
 8006d6c:	40020470 	.word	0x40020470
 8006d70:	40020488 	.word	0x40020488
 8006d74:	400204a0 	.word	0x400204a0
 8006d78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 020e 	bic.w	r2, r2, #14
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6c      	ldr	r2, [pc, #432]	; (8006f44 <HAL_DMA_Abort_IT+0x3a8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d04a      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a6b      	ldr	r2, [pc, #428]	; (8006f48 <HAL_DMA_Abort_IT+0x3ac>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d045      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a69      	ldr	r2, [pc, #420]	; (8006f4c <HAL_DMA_Abort_IT+0x3b0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d040      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a68      	ldr	r2, [pc, #416]	; (8006f50 <HAL_DMA_Abort_IT+0x3b4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d03b      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a66      	ldr	r2, [pc, #408]	; (8006f54 <HAL_DMA_Abort_IT+0x3b8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d036      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a65      	ldr	r2, [pc, #404]	; (8006f58 <HAL_DMA_Abort_IT+0x3bc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d031      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a63      	ldr	r2, [pc, #396]	; (8006f5c <HAL_DMA_Abort_IT+0x3c0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d02c      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a62      	ldr	r2, [pc, #392]	; (8006f60 <HAL_DMA_Abort_IT+0x3c4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d027      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a60      	ldr	r2, [pc, #384]	; (8006f64 <HAL_DMA_Abort_IT+0x3c8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d022      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a5f      	ldr	r2, [pc, #380]	; (8006f68 <HAL_DMA_Abort_IT+0x3cc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d01d      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5d      	ldr	r2, [pc, #372]	; (8006f6c <HAL_DMA_Abort_IT+0x3d0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d018      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a5c      	ldr	r2, [pc, #368]	; (8006f70 <HAL_DMA_Abort_IT+0x3d4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d013      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a5a      	ldr	r2, [pc, #360]	; (8006f74 <HAL_DMA_Abort_IT+0x3d8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00e      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a59      	ldr	r2, [pc, #356]	; (8006f78 <HAL_DMA_Abort_IT+0x3dc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d009      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a57      	ldr	r2, [pc, #348]	; (8006f7c <HAL_DMA_Abort_IT+0x3e0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d004      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x290>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a56      	ldr	r2, [pc, #344]	; (8006f80 <HAL_DMA_Abort_IT+0x3e4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d108      	bne.n	8006e3e <HAL_DMA_Abort_IT+0x2a2>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e007      	b.n	8006e4e <HAL_DMA_Abort_IT+0x2b2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a3c      	ldr	r2, [pc, #240]	; (8006f44 <HAL_DMA_Abort_IT+0x3a8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d072      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a3a      	ldr	r2, [pc, #232]	; (8006f48 <HAL_DMA_Abort_IT+0x3ac>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d06d      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a39      	ldr	r2, [pc, #228]	; (8006f4c <HAL_DMA_Abort_IT+0x3b0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d068      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a37      	ldr	r2, [pc, #220]	; (8006f50 <HAL_DMA_Abort_IT+0x3b4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d063      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a36      	ldr	r2, [pc, #216]	; (8006f54 <HAL_DMA_Abort_IT+0x3b8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d05e      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a34      	ldr	r2, [pc, #208]	; (8006f58 <HAL_DMA_Abort_IT+0x3bc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d059      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a33      	ldr	r2, [pc, #204]	; (8006f5c <HAL_DMA_Abort_IT+0x3c0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d054      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a31      	ldr	r2, [pc, #196]	; (8006f60 <HAL_DMA_Abort_IT+0x3c4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d04f      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a30      	ldr	r2, [pc, #192]	; (8006f64 <HAL_DMA_Abort_IT+0x3c8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d04a      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a2e      	ldr	r2, [pc, #184]	; (8006f68 <HAL_DMA_Abort_IT+0x3cc>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d045      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_DMA_Abort_IT+0x3d0>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d040      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a2b      	ldr	r2, [pc, #172]	; (8006f70 <HAL_DMA_Abort_IT+0x3d4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d03b      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <HAL_DMA_Abort_IT+0x3d8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d036      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a28      	ldr	r2, [pc, #160]	; (8006f78 <HAL_DMA_Abort_IT+0x3dc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d031      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a27      	ldr	r2, [pc, #156]	; (8006f7c <HAL_DMA_Abort_IT+0x3e0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d02c      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a25      	ldr	r2, [pc, #148]	; (8006f80 <HAL_DMA_Abort_IT+0x3e4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d027      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a24      	ldr	r2, [pc, #144]	; (8006f84 <HAL_DMA_Abort_IT+0x3e8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d022      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <HAL_DMA_Abort_IT+0x3ec>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01d      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <HAL_DMA_Abort_IT+0x3f0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d018      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <HAL_DMA_Abort_IT+0x3f4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <HAL_DMA_Abort_IT+0x3f8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00e      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <HAL_DMA_Abort_IT+0x3fc>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_DMA_Abort_IT+0x400>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <HAL_DMA_Abort_IT+0x3a2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <HAL_DMA_Abort_IT+0x404>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d132      	bne.n	8006fa4 <HAL_DMA_Abort_IT+0x408>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e031      	b.n	8006fa6 <HAL_DMA_Abort_IT+0x40a>
 8006f42:	bf00      	nop
 8006f44:	40020010 	.word	0x40020010
 8006f48:	40020028 	.word	0x40020028
 8006f4c:	40020040 	.word	0x40020040
 8006f50:	40020058 	.word	0x40020058
 8006f54:	40020070 	.word	0x40020070
 8006f58:	40020088 	.word	0x40020088
 8006f5c:	400200a0 	.word	0x400200a0
 8006f60:	400200b8 	.word	0x400200b8
 8006f64:	40020410 	.word	0x40020410
 8006f68:	40020428 	.word	0x40020428
 8006f6c:	40020440 	.word	0x40020440
 8006f70:	40020458 	.word	0x40020458
 8006f74:	40020470 	.word	0x40020470
 8006f78:	40020488 	.word	0x40020488
 8006f7c:	400204a0 	.word	0x400204a0
 8006f80:	400204b8 	.word	0x400204b8
 8006f84:	58025408 	.word	0x58025408
 8006f88:	5802541c 	.word	0x5802541c
 8006f8c:	58025430 	.word	0x58025430
 8006f90:	58025444 	.word	0x58025444
 8006f94:	58025458 	.word	0x58025458
 8006f98:	5802546c 	.word	0x5802546c
 8006f9c:	58025480 	.word	0x58025480
 8006fa0:	58025494 	.word	0x58025494
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d028      	beq.n	8006ffc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	2201      	movs	r2, #1
 8006fca:	409a      	lsls	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fd8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ff0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ffa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop

08007028 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007034:	4b67      	ldr	r3, [pc, #412]	; (80071d4 <HAL_DMA_IRQHandler+0x1ac>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a67      	ldr	r2, [pc, #412]	; (80071d8 <HAL_DMA_IRQHandler+0x1b0>)
 800703a:	fba2 2303 	umull	r2, r3, r2, r3
 800703e:	0a9b      	lsrs	r3, r3, #10
 8007040:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007046:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a5f      	ldr	r2, [pc, #380]	; (80071dc <HAL_DMA_IRQHandler+0x1b4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d04a      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a5d      	ldr	r2, [pc, #372]	; (80071e0 <HAL_DMA_IRQHandler+0x1b8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d045      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a5c      	ldr	r2, [pc, #368]	; (80071e4 <HAL_DMA_IRQHandler+0x1bc>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d040      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a5a      	ldr	r2, [pc, #360]	; (80071e8 <HAL_DMA_IRQHandler+0x1c0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d03b      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a59      	ldr	r2, [pc, #356]	; (80071ec <HAL_DMA_IRQHandler+0x1c4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d036      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a57      	ldr	r2, [pc, #348]	; (80071f0 <HAL_DMA_IRQHandler+0x1c8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d031      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a56      	ldr	r2, [pc, #344]	; (80071f4 <HAL_DMA_IRQHandler+0x1cc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d02c      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a54      	ldr	r2, [pc, #336]	; (80071f8 <HAL_DMA_IRQHandler+0x1d0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d027      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a53      	ldr	r2, [pc, #332]	; (80071fc <HAL_DMA_IRQHandler+0x1d4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d022      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a51      	ldr	r2, [pc, #324]	; (8007200 <HAL_DMA_IRQHandler+0x1d8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d01d      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a50      	ldr	r2, [pc, #320]	; (8007204 <HAL_DMA_IRQHandler+0x1dc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d018      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a4e      	ldr	r2, [pc, #312]	; (8007208 <HAL_DMA_IRQHandler+0x1e0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d013      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a4d      	ldr	r2, [pc, #308]	; (800720c <HAL_DMA_IRQHandler+0x1e4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00e      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a4b      	ldr	r2, [pc, #300]	; (8007210 <HAL_DMA_IRQHandler+0x1e8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d009      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a4a      	ldr	r2, [pc, #296]	; (8007214 <HAL_DMA_IRQHandler+0x1ec>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d004      	beq.n	80070fa <HAL_DMA_IRQHandler+0xd2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a48      	ldr	r2, [pc, #288]	; (8007218 <HAL_DMA_IRQHandler+0x1f0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d101      	bne.n	80070fe <HAL_DMA_IRQHandler+0xd6>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <HAL_DMA_IRQHandler+0xd8>
 80070fe:	2300      	movs	r3, #0
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 842b 	beq.w	800795c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	2208      	movs	r2, #8
 8007110:	409a      	lsls	r2, r3
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	4013      	ands	r3, r2
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80a2 	beq.w	8007260 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a2e      	ldr	r2, [pc, #184]	; (80071dc <HAL_DMA_IRQHandler+0x1b4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d04a      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a2d      	ldr	r2, [pc, #180]	; (80071e0 <HAL_DMA_IRQHandler+0x1b8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d045      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2b      	ldr	r2, [pc, #172]	; (80071e4 <HAL_DMA_IRQHandler+0x1bc>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d040      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <HAL_DMA_IRQHandler+0x1c0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d03b      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a28      	ldr	r2, [pc, #160]	; (80071ec <HAL_DMA_IRQHandler+0x1c4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d036      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <HAL_DMA_IRQHandler+0x1c8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d031      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a25      	ldr	r2, [pc, #148]	; (80071f4 <HAL_DMA_IRQHandler+0x1cc>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d02c      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a24      	ldr	r2, [pc, #144]	; (80071f8 <HAL_DMA_IRQHandler+0x1d0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d027      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a22      	ldr	r2, [pc, #136]	; (80071fc <HAL_DMA_IRQHandler+0x1d4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d022      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a21      	ldr	r2, [pc, #132]	; (8007200 <HAL_DMA_IRQHandler+0x1d8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d01d      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1f      	ldr	r2, [pc, #124]	; (8007204 <HAL_DMA_IRQHandler+0x1dc>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d018      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1e      	ldr	r2, [pc, #120]	; (8007208 <HAL_DMA_IRQHandler+0x1e0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d013      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1c      	ldr	r2, [pc, #112]	; (800720c <HAL_DMA_IRQHandler+0x1e4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00e      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1b      	ldr	r2, [pc, #108]	; (8007210 <HAL_DMA_IRQHandler+0x1e8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d009      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a19      	ldr	r2, [pc, #100]	; (8007214 <HAL_DMA_IRQHandler+0x1ec>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_DMA_IRQHandler+0x194>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a18      	ldr	r2, [pc, #96]	; (8007218 <HAL_DMA_IRQHandler+0x1f0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d12f      	bne.n	800721c <HAL_DMA_IRQHandler+0x1f4>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bf14      	ite	ne
 80071ca:	2301      	movne	r3, #1
 80071cc:	2300      	moveq	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	e02e      	b.n	8007230 <HAL_DMA_IRQHandler+0x208>
 80071d2:	bf00      	nop
 80071d4:	24000088 	.word	0x24000088
 80071d8:	1b4e81b5 	.word	0x1b4e81b5
 80071dc:	40020010 	.word	0x40020010
 80071e0:	40020028 	.word	0x40020028
 80071e4:	40020040 	.word	0x40020040
 80071e8:	40020058 	.word	0x40020058
 80071ec:	40020070 	.word	0x40020070
 80071f0:	40020088 	.word	0x40020088
 80071f4:	400200a0 	.word	0x400200a0
 80071f8:	400200b8 	.word	0x400200b8
 80071fc:	40020410 	.word	0x40020410
 8007200:	40020428 	.word	0x40020428
 8007204:	40020440 	.word	0x40020440
 8007208:	40020458 	.word	0x40020458
 800720c:	40020470 	.word	0x40020470
 8007210:	40020488 	.word	0x40020488
 8007214:	400204a0 	.word	0x400204a0
 8007218:	400204b8 	.word	0x400204b8
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	bf14      	ite	ne
 800722a:	2301      	movne	r3, #1
 800722c:	2300      	moveq	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d015      	beq.n	8007260 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0204 	bic.w	r2, r2, #4
 8007242:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	2208      	movs	r2, #8
 800724e:	409a      	lsls	r2, r3
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	f043 0201 	orr.w	r2, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	fa22 f303 	lsr.w	r3, r2, r3
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d06e      	beq.n	8007354 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a69      	ldr	r2, [pc, #420]	; (8007420 <HAL_DMA_IRQHandler+0x3f8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d04a      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a67      	ldr	r2, [pc, #412]	; (8007424 <HAL_DMA_IRQHandler+0x3fc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d045      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a66      	ldr	r2, [pc, #408]	; (8007428 <HAL_DMA_IRQHandler+0x400>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d040      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a64      	ldr	r2, [pc, #400]	; (800742c <HAL_DMA_IRQHandler+0x404>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d03b      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a63      	ldr	r2, [pc, #396]	; (8007430 <HAL_DMA_IRQHandler+0x408>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d036      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a61      	ldr	r2, [pc, #388]	; (8007434 <HAL_DMA_IRQHandler+0x40c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d031      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a60      	ldr	r2, [pc, #384]	; (8007438 <HAL_DMA_IRQHandler+0x410>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d02c      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5e      	ldr	r2, [pc, #376]	; (800743c <HAL_DMA_IRQHandler+0x414>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d027      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a5d      	ldr	r2, [pc, #372]	; (8007440 <HAL_DMA_IRQHandler+0x418>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d022      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a5b      	ldr	r2, [pc, #364]	; (8007444 <HAL_DMA_IRQHandler+0x41c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01d      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a5a      	ldr	r2, [pc, #360]	; (8007448 <HAL_DMA_IRQHandler+0x420>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d018      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a58      	ldr	r2, [pc, #352]	; (800744c <HAL_DMA_IRQHandler+0x424>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d013      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a57      	ldr	r2, [pc, #348]	; (8007450 <HAL_DMA_IRQHandler+0x428>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00e      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a55      	ldr	r2, [pc, #340]	; (8007454 <HAL_DMA_IRQHandler+0x42c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d009      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a54      	ldr	r2, [pc, #336]	; (8007458 <HAL_DMA_IRQHandler+0x430>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d004      	beq.n	8007316 <HAL_DMA_IRQHandler+0x2ee>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a52      	ldr	r2, [pc, #328]	; (800745c <HAL_DMA_IRQHandler+0x434>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10a      	bne.n	800732c <HAL_DMA_IRQHandler+0x304>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007320:	2b00      	cmp	r3, #0
 8007322:	bf14      	ite	ne
 8007324:	2301      	movne	r3, #1
 8007326:	2300      	moveq	r3, #0
 8007328:	b2db      	uxtb	r3, r3
 800732a:	e003      	b.n	8007334 <HAL_DMA_IRQHandler+0x30c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2300      	movs	r3, #0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00d      	beq.n	8007354 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	2201      	movs	r2, #1
 8007342:	409a      	lsls	r2, r3
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734c:	f043 0202 	orr.w	r2, r3, #2
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007358:	f003 031f 	and.w	r3, r3, #31
 800735c:	2204      	movs	r2, #4
 800735e:	409a      	lsls	r2, r3
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	4013      	ands	r3, r2
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 808f 	beq.w	8007488 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <HAL_DMA_IRQHandler+0x3f8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d04a      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2a      	ldr	r2, [pc, #168]	; (8007424 <HAL_DMA_IRQHandler+0x3fc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d045      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a29      	ldr	r2, [pc, #164]	; (8007428 <HAL_DMA_IRQHandler+0x400>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d040      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a27      	ldr	r2, [pc, #156]	; (800742c <HAL_DMA_IRQHandler+0x404>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d03b      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a26      	ldr	r2, [pc, #152]	; (8007430 <HAL_DMA_IRQHandler+0x408>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d036      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a24      	ldr	r2, [pc, #144]	; (8007434 <HAL_DMA_IRQHandler+0x40c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d031      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a23      	ldr	r2, [pc, #140]	; (8007438 <HAL_DMA_IRQHandler+0x410>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d02c      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a21      	ldr	r2, [pc, #132]	; (800743c <HAL_DMA_IRQHandler+0x414>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d027      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a20      	ldr	r2, [pc, #128]	; (8007440 <HAL_DMA_IRQHandler+0x418>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d022      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1e      	ldr	r2, [pc, #120]	; (8007444 <HAL_DMA_IRQHandler+0x41c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <HAL_DMA_IRQHandler+0x420>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d018      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <HAL_DMA_IRQHandler+0x424>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1a      	ldr	r2, [pc, #104]	; (8007450 <HAL_DMA_IRQHandler+0x428>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a18      	ldr	r2, [pc, #96]	; (8007454 <HAL_DMA_IRQHandler+0x42c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a17      	ldr	r2, [pc, #92]	; (8007458 <HAL_DMA_IRQHandler+0x430>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_DMA_IRQHandler+0x3e2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a15      	ldr	r2, [pc, #84]	; (800745c <HAL_DMA_IRQHandler+0x434>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d12a      	bne.n	8007460 <HAL_DMA_IRQHandler+0x438>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	e023      	b.n	8007468 <HAL_DMA_IRQHandler+0x440>
 8007420:	40020010 	.word	0x40020010
 8007424:	40020028 	.word	0x40020028
 8007428:	40020040 	.word	0x40020040
 800742c:	40020058 	.word	0x40020058
 8007430:	40020070 	.word	0x40020070
 8007434:	40020088 	.word	0x40020088
 8007438:	400200a0 	.word	0x400200a0
 800743c:	400200b8 	.word	0x400200b8
 8007440:	40020410 	.word	0x40020410
 8007444:	40020428 	.word	0x40020428
 8007448:	40020440 	.word	0x40020440
 800744c:	40020458 	.word	0x40020458
 8007450:	40020470 	.word	0x40020470
 8007454:	40020488 	.word	0x40020488
 8007458:	400204a0 	.word	0x400204a0
 800745c:	400204b8 	.word	0x400204b8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2300      	movs	r3, #0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2204      	movs	r2, #4
 8007476:	409a      	lsls	r2, r3
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007480:	f043 0204 	orr.w	r2, r3, #4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	2210      	movs	r2, #16
 8007492:	409a      	lsls	r2, r3
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 80a6 	beq.w	80075ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a85      	ldr	r2, [pc, #532]	; (80076b8 <HAL_DMA_IRQHandler+0x690>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d04a      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a83      	ldr	r2, [pc, #524]	; (80076bc <HAL_DMA_IRQHandler+0x694>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d045      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a82      	ldr	r2, [pc, #520]	; (80076c0 <HAL_DMA_IRQHandler+0x698>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d040      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a80      	ldr	r2, [pc, #512]	; (80076c4 <HAL_DMA_IRQHandler+0x69c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d03b      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a7f      	ldr	r2, [pc, #508]	; (80076c8 <HAL_DMA_IRQHandler+0x6a0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d036      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a7d      	ldr	r2, [pc, #500]	; (80076cc <HAL_DMA_IRQHandler+0x6a4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d031      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a7c      	ldr	r2, [pc, #496]	; (80076d0 <HAL_DMA_IRQHandler+0x6a8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d02c      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a7a      	ldr	r2, [pc, #488]	; (80076d4 <HAL_DMA_IRQHandler+0x6ac>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d027      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a79      	ldr	r2, [pc, #484]	; (80076d8 <HAL_DMA_IRQHandler+0x6b0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d022      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a77      	ldr	r2, [pc, #476]	; (80076dc <HAL_DMA_IRQHandler+0x6b4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01d      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a76      	ldr	r2, [pc, #472]	; (80076e0 <HAL_DMA_IRQHandler+0x6b8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d018      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a74      	ldr	r2, [pc, #464]	; (80076e4 <HAL_DMA_IRQHandler+0x6bc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a73      	ldr	r2, [pc, #460]	; (80076e8 <HAL_DMA_IRQHandler+0x6c0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00e      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a71      	ldr	r2, [pc, #452]	; (80076ec <HAL_DMA_IRQHandler+0x6c4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d009      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a70      	ldr	r2, [pc, #448]	; (80076f0 <HAL_DMA_IRQHandler+0x6c8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <HAL_DMA_IRQHandler+0x516>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a6e      	ldr	r2, [pc, #440]	; (80076f4 <HAL_DMA_IRQHandler+0x6cc>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d10a      	bne.n	8007554 <HAL_DMA_IRQHandler+0x52c>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	bf14      	ite	ne
 800754c:	2301      	movne	r3, #1
 800754e:	2300      	moveq	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	e009      	b.n	8007568 <HAL_DMA_IRQHandler+0x540>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2301      	movne	r3, #1
 8007564:	2300      	moveq	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03e      	beq.n	80075ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2210      	movs	r2, #16
 8007576:	409a      	lsls	r2, r3
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d018      	beq.n	80075bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d108      	bne.n	80075aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d024      	beq.n	80075ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
 80075a8:	e01f      	b.n	80075ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01b      	beq.n	80075ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
 80075ba:	e016      	b.n	80075ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d107      	bne.n	80075da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0208 	bic.w	r2, r2, #8
 80075d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2220      	movs	r2, #32
 80075f4:	409a      	lsls	r2, r3
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	4013      	ands	r3, r2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8110 	beq.w	8007820 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <HAL_DMA_IRQHandler+0x690>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d04a      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <HAL_DMA_IRQHandler+0x694>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d045      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <HAL_DMA_IRQHandler+0x698>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d040      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a28      	ldr	r2, [pc, #160]	; (80076c4 <HAL_DMA_IRQHandler+0x69c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d03b      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <HAL_DMA_IRQHandler+0x6a0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d036      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a25      	ldr	r2, [pc, #148]	; (80076cc <HAL_DMA_IRQHandler+0x6a4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d031      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a23      	ldr	r2, [pc, #140]	; (80076d0 <HAL_DMA_IRQHandler+0x6a8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d02c      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <HAL_DMA_IRQHandler+0x6ac>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d027      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a20      	ldr	r2, [pc, #128]	; (80076d8 <HAL_DMA_IRQHandler+0x6b0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d022      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1f      	ldr	r2, [pc, #124]	; (80076dc <HAL_DMA_IRQHandler+0x6b4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d01d      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <HAL_DMA_IRQHandler+0x6b8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d018      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1c      	ldr	r2, [pc, #112]	; (80076e4 <HAL_DMA_IRQHandler+0x6bc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1a      	ldr	r2, [pc, #104]	; (80076e8 <HAL_DMA_IRQHandler+0x6c0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00e      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a19      	ldr	r2, [pc, #100]	; (80076ec <HAL_DMA_IRQHandler+0x6c4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d009      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <HAL_DMA_IRQHandler+0x6c8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x678>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <HAL_DMA_IRQHandler+0x6cc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d12b      	bne.n	80076f8 <HAL_DMA_IRQHandler+0x6d0>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0310 	and.w	r3, r3, #16
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bf14      	ite	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	2300      	moveq	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	e02a      	b.n	800770c <HAL_DMA_IRQHandler+0x6e4>
 80076b6:	bf00      	nop
 80076b8:	40020010 	.word	0x40020010
 80076bc:	40020028 	.word	0x40020028
 80076c0:	40020040 	.word	0x40020040
 80076c4:	40020058 	.word	0x40020058
 80076c8:	40020070 	.word	0x40020070
 80076cc:	40020088 	.word	0x40020088
 80076d0:	400200a0 	.word	0x400200a0
 80076d4:	400200b8 	.word	0x400200b8
 80076d8:	40020410 	.word	0x40020410
 80076dc:	40020428 	.word	0x40020428
 80076e0:	40020440 	.word	0x40020440
 80076e4:	40020458 	.word	0x40020458
 80076e8:	40020470 	.word	0x40020470
 80076ec:	40020488 	.word	0x40020488
 80076f0:	400204a0 	.word	0x400204a0
 80076f4:	400204b8 	.word	0x400204b8
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8087 	beq.w	8007820 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	2220      	movs	r2, #32
 800771c:	409a      	lsls	r2, r3
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b04      	cmp	r3, #4
 800772c:	d139      	bne.n	80077a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0216 	bic.w	r2, r2, #22
 800773c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695a      	ldr	r2, [r3, #20]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800774c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <HAL_DMA_IRQHandler+0x736>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0208 	bic.w	r2, r2, #8
 800776c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	223f      	movs	r2, #63	; 0x3f
 8007778:	409a      	lsls	r2, r3
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 834a 	beq.w	8007e2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
          }
          return;
 80077a0:	e344      	b.n	8007e2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d018      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d108      	bne.n	80077d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d02c      	beq.n	8007820 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
 80077ce:	e027      	b.n	8007820 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d023      	beq.n	8007820 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
 80077e0:	e01e      	b.n	8007820 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10f      	bne.n	8007810 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0210 	bic.w	r2, r2, #16
 80077fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8306 	beq.w	8007e36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 8088 	beq.w	8007948 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2204      	movs	r2, #4
 800783c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a7a      	ldr	r2, [pc, #488]	; (8007a30 <HAL_DMA_IRQHandler+0xa08>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d04a      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a79      	ldr	r2, [pc, #484]	; (8007a34 <HAL_DMA_IRQHandler+0xa0c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d045      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a77      	ldr	r2, [pc, #476]	; (8007a38 <HAL_DMA_IRQHandler+0xa10>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d040      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a76      	ldr	r2, [pc, #472]	; (8007a3c <HAL_DMA_IRQHandler+0xa14>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d03b      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a74      	ldr	r2, [pc, #464]	; (8007a40 <HAL_DMA_IRQHandler+0xa18>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d036      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a73      	ldr	r2, [pc, #460]	; (8007a44 <HAL_DMA_IRQHandler+0xa1c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d031      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a71      	ldr	r2, [pc, #452]	; (8007a48 <HAL_DMA_IRQHandler+0xa20>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d02c      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a70      	ldr	r2, [pc, #448]	; (8007a4c <HAL_DMA_IRQHandler+0xa24>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d027      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a6e      	ldr	r2, [pc, #440]	; (8007a50 <HAL_DMA_IRQHandler+0xa28>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d022      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a6d      	ldr	r2, [pc, #436]	; (8007a54 <HAL_DMA_IRQHandler+0xa2c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d01d      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6b      	ldr	r2, [pc, #428]	; (8007a58 <HAL_DMA_IRQHandler+0xa30>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d018      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a6a      	ldr	r2, [pc, #424]	; (8007a5c <HAL_DMA_IRQHandler+0xa34>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d013      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a68      	ldr	r2, [pc, #416]	; (8007a60 <HAL_DMA_IRQHandler+0xa38>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00e      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a67      	ldr	r2, [pc, #412]	; (8007a64 <HAL_DMA_IRQHandler+0xa3c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d009      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a65      	ldr	r2, [pc, #404]	; (8007a68 <HAL_DMA_IRQHandler+0xa40>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d004      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x8b8>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a64      	ldr	r2, [pc, #400]	; (8007a6c <HAL_DMA_IRQHandler+0xa44>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d108      	bne.n	80078f2 <HAL_DMA_IRQHandler+0x8ca>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0201 	bic.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e007      	b.n	8007902 <HAL_DMA_IRQHandler+0x8da>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790a:	429a      	cmp	r2, r3
 800790c:	d307      	bcc.n	800791e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f2      	bne.n	8007902 <HAL_DMA_IRQHandler+0x8da>
 800791c:	e000      	b.n	8007920 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800791e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2203      	movs	r2, #3
 8007932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007936:	e003      	b.n	8007940 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8272 	beq.w	8007e36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
 800795a:	e26c      	b.n	8007e36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a43      	ldr	r2, [pc, #268]	; (8007a70 <HAL_DMA_IRQHandler+0xa48>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d022      	beq.n	80079ac <HAL_DMA_IRQHandler+0x984>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a42      	ldr	r2, [pc, #264]	; (8007a74 <HAL_DMA_IRQHandler+0xa4c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d01d      	beq.n	80079ac <HAL_DMA_IRQHandler+0x984>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a40      	ldr	r2, [pc, #256]	; (8007a78 <HAL_DMA_IRQHandler+0xa50>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d018      	beq.n	80079ac <HAL_DMA_IRQHandler+0x984>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a3f      	ldr	r2, [pc, #252]	; (8007a7c <HAL_DMA_IRQHandler+0xa54>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d013      	beq.n	80079ac <HAL_DMA_IRQHandler+0x984>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a3d      	ldr	r2, [pc, #244]	; (8007a80 <HAL_DMA_IRQHandler+0xa58>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00e      	beq.n	80079ac <HAL_DMA_IRQHandler+0x984>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a3c      	ldr	r2, [pc, #240]	; (8007a84 <HAL_DMA_IRQHandler+0xa5c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d009      	beq.n	80079ac <HAL_DMA_IRQHandler+0x984>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3a      	ldr	r2, [pc, #232]	; (8007a88 <HAL_DMA_IRQHandler+0xa60>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_DMA_IRQHandler+0x984>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a39      	ldr	r2, [pc, #228]	; (8007a8c <HAL_DMA_IRQHandler+0xa64>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d101      	bne.n	80079b0 <HAL_DMA_IRQHandler+0x988>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <HAL_DMA_IRQHandler+0x98a>
 80079b0:	2300      	movs	r3, #0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 823f 	beq.w	8007e36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	2204      	movs	r2, #4
 80079ca:	409a      	lsls	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80cd 	beq.w	8007b70 <HAL_DMA_IRQHandler+0xb48>
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80c7 	beq.w	8007b70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2204      	movs	r2, #4
 80079ec:	409a      	lsls	r2, r3
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d049      	beq.n	8007a90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 8210 	beq.w	8007e30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a18:	e20a      	b.n	8007e30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8206 	beq.w	8007e30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a2c:	e200      	b.n	8007e30 <HAL_DMA_IRQHandler+0xe08>
 8007a2e:	bf00      	nop
 8007a30:	40020010 	.word	0x40020010
 8007a34:	40020028 	.word	0x40020028
 8007a38:	40020040 	.word	0x40020040
 8007a3c:	40020058 	.word	0x40020058
 8007a40:	40020070 	.word	0x40020070
 8007a44:	40020088 	.word	0x40020088
 8007a48:	400200a0 	.word	0x400200a0
 8007a4c:	400200b8 	.word	0x400200b8
 8007a50:	40020410 	.word	0x40020410
 8007a54:	40020428 	.word	0x40020428
 8007a58:	40020440 	.word	0x40020440
 8007a5c:	40020458 	.word	0x40020458
 8007a60:	40020470 	.word	0x40020470
 8007a64:	40020488 	.word	0x40020488
 8007a68:	400204a0 	.word	0x400204a0
 8007a6c:	400204b8 	.word	0x400204b8
 8007a70:	58025408 	.word	0x58025408
 8007a74:	5802541c 	.word	0x5802541c
 8007a78:	58025430 	.word	0x58025430
 8007a7c:	58025444 	.word	0x58025444
 8007a80:	58025458 	.word	0x58025458
 8007a84:	5802546c 	.word	0x5802546c
 8007a88:	58025480 	.word	0x58025480
 8007a8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d160      	bne.n	8007b5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a7f      	ldr	r2, [pc, #508]	; (8007c9c <HAL_DMA_IRQHandler+0xc74>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d04a      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a7d      	ldr	r2, [pc, #500]	; (8007ca0 <HAL_DMA_IRQHandler+0xc78>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d045      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a7c      	ldr	r2, [pc, #496]	; (8007ca4 <HAL_DMA_IRQHandler+0xc7c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d040      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a7a      	ldr	r2, [pc, #488]	; (8007ca8 <HAL_DMA_IRQHandler+0xc80>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d03b      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a79      	ldr	r2, [pc, #484]	; (8007cac <HAL_DMA_IRQHandler+0xc84>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d036      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a77      	ldr	r2, [pc, #476]	; (8007cb0 <HAL_DMA_IRQHandler+0xc88>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d031      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a76      	ldr	r2, [pc, #472]	; (8007cb4 <HAL_DMA_IRQHandler+0xc8c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d02c      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a74      	ldr	r2, [pc, #464]	; (8007cb8 <HAL_DMA_IRQHandler+0xc90>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d027      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a73      	ldr	r2, [pc, #460]	; (8007cbc <HAL_DMA_IRQHandler+0xc94>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d022      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a71      	ldr	r2, [pc, #452]	; (8007cc0 <HAL_DMA_IRQHandler+0xc98>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d01d      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a70      	ldr	r2, [pc, #448]	; (8007cc4 <HAL_DMA_IRQHandler+0xc9c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d018      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a6e      	ldr	r2, [pc, #440]	; (8007cc8 <HAL_DMA_IRQHandler+0xca0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d013      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a6d      	ldr	r2, [pc, #436]	; (8007ccc <HAL_DMA_IRQHandler+0xca4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00e      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a6b      	ldr	r2, [pc, #428]	; (8007cd0 <HAL_DMA_IRQHandler+0xca8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a6a      	ldr	r2, [pc, #424]	; (8007cd4 <HAL_DMA_IRQHandler+0xcac>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xb12>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a68      	ldr	r2, [pc, #416]	; (8007cd8 <HAL_DMA_IRQHandler+0xcb0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <HAL_DMA_IRQHandler+0xb24>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0208 	bic.w	r2, r2, #8
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e007      	b.n	8007b5c <HAL_DMA_IRQHandler+0xb34>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0204 	bic.w	r2, r2, #4
 8007b5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8165 	beq.w	8007e30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b6e:	e15f      	b.n	8007e30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b74:	f003 031f 	and.w	r3, r3, #31
 8007b78:	2202      	movs	r2, #2
 8007b7a:	409a      	lsls	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80c5 	beq.w	8007d10 <HAL_DMA_IRQHandler+0xce8>
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80bf 	beq.w	8007d10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b96:	f003 031f 	and.w	r3, r3, #31
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d018      	beq.n	8007bde <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d109      	bne.n	8007bca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 813a 	beq.w	8007e34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bc8:	e134      	b.n	8007e34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8130 	beq.w	8007e34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bdc:	e12a      	b.n	8007e34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f040 8089 	bne.w	8007cfc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2b      	ldr	r2, [pc, #172]	; (8007c9c <HAL_DMA_IRQHandler+0xc74>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d04a      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a29      	ldr	r2, [pc, #164]	; (8007ca0 <HAL_DMA_IRQHandler+0xc78>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d045      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a28      	ldr	r2, [pc, #160]	; (8007ca4 <HAL_DMA_IRQHandler+0xc7c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d040      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <HAL_DMA_IRQHandler+0xc80>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d03b      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a25      	ldr	r2, [pc, #148]	; (8007cac <HAL_DMA_IRQHandler+0xc84>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d036      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a23      	ldr	r2, [pc, #140]	; (8007cb0 <HAL_DMA_IRQHandler+0xc88>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d031      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a22      	ldr	r2, [pc, #136]	; (8007cb4 <HAL_DMA_IRQHandler+0xc8c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d02c      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a20      	ldr	r2, [pc, #128]	; (8007cb8 <HAL_DMA_IRQHandler+0xc90>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d027      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <HAL_DMA_IRQHandler+0xc94>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d022      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <HAL_DMA_IRQHandler+0xc98>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d01d      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <HAL_DMA_IRQHandler+0xc9c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <HAL_DMA_IRQHandler+0xca0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a19      	ldr	r2, [pc, #100]	; (8007ccc <HAL_DMA_IRQHandler+0xca4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <HAL_DMA_IRQHandler+0xca8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a16      	ldr	r2, [pc, #88]	; (8007cd4 <HAL_DMA_IRQHandler+0xcac>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xc62>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a14      	ldr	r2, [pc, #80]	; (8007cd8 <HAL_DMA_IRQHandler+0xcb0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d128      	bne.n	8007cdc <HAL_DMA_IRQHandler+0xcb4>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0214 	bic.w	r2, r2, #20
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	e027      	b.n	8007cec <HAL_DMA_IRQHandler+0xcc4>
 8007c9c:	40020010 	.word	0x40020010
 8007ca0:	40020028 	.word	0x40020028
 8007ca4:	40020040 	.word	0x40020040
 8007ca8:	40020058 	.word	0x40020058
 8007cac:	40020070 	.word	0x40020070
 8007cb0:	40020088 	.word	0x40020088
 8007cb4:	400200a0 	.word	0x400200a0
 8007cb8:	400200b8 	.word	0x400200b8
 8007cbc:	40020410 	.word	0x40020410
 8007cc0:	40020428 	.word	0x40020428
 8007cc4:	40020440 	.word	0x40020440
 8007cc8:	40020458 	.word	0x40020458
 8007ccc:	40020470 	.word	0x40020470
 8007cd0:	40020488 	.word	0x40020488
 8007cd4:	400204a0 	.word	0x400204a0
 8007cd8:	400204b8 	.word	0x400204b8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 020a 	bic.w	r2, r2, #10
 8007cea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8097 	beq.w	8007e34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d0e:	e091      	b.n	8007e34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	2208      	movs	r2, #8
 8007d1a:	409a      	lsls	r2, r3
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8088 	beq.w	8007e36 <HAL_DMA_IRQHandler+0xe0e>
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8082 	beq.w	8007e36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a41      	ldr	r2, [pc, #260]	; (8007e3c <HAL_DMA_IRQHandler+0xe14>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d04a      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a3f      	ldr	r2, [pc, #252]	; (8007e40 <HAL_DMA_IRQHandler+0xe18>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d045      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a3e      	ldr	r2, [pc, #248]	; (8007e44 <HAL_DMA_IRQHandler+0xe1c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d040      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a3c      	ldr	r2, [pc, #240]	; (8007e48 <HAL_DMA_IRQHandler+0xe20>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d03b      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a3b      	ldr	r2, [pc, #236]	; (8007e4c <HAL_DMA_IRQHandler+0xe24>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d036      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a39      	ldr	r2, [pc, #228]	; (8007e50 <HAL_DMA_IRQHandler+0xe28>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d031      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a38      	ldr	r2, [pc, #224]	; (8007e54 <HAL_DMA_IRQHandler+0xe2c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d02c      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a36      	ldr	r2, [pc, #216]	; (8007e58 <HAL_DMA_IRQHandler+0xe30>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d027      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a35      	ldr	r2, [pc, #212]	; (8007e5c <HAL_DMA_IRQHandler+0xe34>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d022      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a33      	ldr	r2, [pc, #204]	; (8007e60 <HAL_DMA_IRQHandler+0xe38>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01d      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a32      	ldr	r2, [pc, #200]	; (8007e64 <HAL_DMA_IRQHandler+0xe3c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d018      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a30      	ldr	r2, [pc, #192]	; (8007e68 <HAL_DMA_IRQHandler+0xe40>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d013      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a2f      	ldr	r2, [pc, #188]	; (8007e6c <HAL_DMA_IRQHandler+0xe44>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00e      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a2d      	ldr	r2, [pc, #180]	; (8007e70 <HAL_DMA_IRQHandler+0xe48>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d009      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <HAL_DMA_IRQHandler+0xe4c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d004      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xdaa>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <HAL_DMA_IRQHandler+0xe50>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d108      	bne.n	8007de4 <HAL_DMA_IRQHandler+0xdbc>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 021c 	bic.w	r2, r2, #28
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	e007      	b.n	8007df4 <HAL_DMA_IRQHandler+0xdcc>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 020e 	bic.w	r2, r2, #14
 8007df2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
 8007e2a:	e004      	b.n	8007e36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e2c:	bf00      	nop
 8007e2e:	e002      	b.n	8007e36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e36:	3728      	adds	r7, #40	; 0x28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40020010 	.word	0x40020010
 8007e40:	40020028 	.word	0x40020028
 8007e44:	40020040 	.word	0x40020040
 8007e48:	40020058 	.word	0x40020058
 8007e4c:	40020070 	.word	0x40020070
 8007e50:	40020088 	.word	0x40020088
 8007e54:	400200a0 	.word	0x400200a0
 8007e58:	400200b8 	.word	0x400200b8
 8007e5c:	40020410 	.word	0x40020410
 8007e60:	40020428 	.word	0x40020428
 8007e64:	40020440 	.word	0x40020440
 8007e68:	40020458 	.word	0x40020458
 8007e6c:	40020470 	.word	0x40020470
 8007e70:	40020488 	.word	0x40020488
 8007e74:	400204a0 	.word	0x400204a0
 8007e78:	400204b8 	.word	0x400204b8

08007e7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a7f      	ldr	r2, [pc, #508]	; (8008098 <DMA_SetConfig+0x21c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d072      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a7d      	ldr	r2, [pc, #500]	; (800809c <DMA_SetConfig+0x220>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d06d      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a7c      	ldr	r2, [pc, #496]	; (80080a0 <DMA_SetConfig+0x224>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d068      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a7a      	ldr	r2, [pc, #488]	; (80080a4 <DMA_SetConfig+0x228>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d063      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a79      	ldr	r2, [pc, #484]	; (80080a8 <DMA_SetConfig+0x22c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d05e      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a77      	ldr	r2, [pc, #476]	; (80080ac <DMA_SetConfig+0x230>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d059      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a76      	ldr	r2, [pc, #472]	; (80080b0 <DMA_SetConfig+0x234>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d054      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a74      	ldr	r2, [pc, #464]	; (80080b4 <DMA_SetConfig+0x238>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d04f      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a73      	ldr	r2, [pc, #460]	; (80080b8 <DMA_SetConfig+0x23c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d04a      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a71      	ldr	r2, [pc, #452]	; (80080bc <DMA_SetConfig+0x240>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d045      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a70      	ldr	r2, [pc, #448]	; (80080c0 <DMA_SetConfig+0x244>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d040      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a6e      	ldr	r2, [pc, #440]	; (80080c4 <DMA_SetConfig+0x248>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d03b      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a6d      	ldr	r2, [pc, #436]	; (80080c8 <DMA_SetConfig+0x24c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d036      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a6b      	ldr	r2, [pc, #428]	; (80080cc <DMA_SetConfig+0x250>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d031      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a6a      	ldr	r2, [pc, #424]	; (80080d0 <DMA_SetConfig+0x254>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d02c      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a68      	ldr	r2, [pc, #416]	; (80080d4 <DMA_SetConfig+0x258>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d027      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a67      	ldr	r2, [pc, #412]	; (80080d8 <DMA_SetConfig+0x25c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d022      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a65      	ldr	r2, [pc, #404]	; (80080dc <DMA_SetConfig+0x260>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d01d      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a64      	ldr	r2, [pc, #400]	; (80080e0 <DMA_SetConfig+0x264>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d018      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a62      	ldr	r2, [pc, #392]	; (80080e4 <DMA_SetConfig+0x268>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d013      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a61      	ldr	r2, [pc, #388]	; (80080e8 <DMA_SetConfig+0x26c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00e      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a5f      	ldr	r2, [pc, #380]	; (80080ec <DMA_SetConfig+0x270>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d009      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a5e      	ldr	r2, [pc, #376]	; (80080f0 <DMA_SetConfig+0x274>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d004      	beq.n	8007f86 <DMA_SetConfig+0x10a>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a5c      	ldr	r2, [pc, #368]	; (80080f4 <DMA_SetConfig+0x278>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d101      	bne.n	8007f8a <DMA_SetConfig+0x10e>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <DMA_SetConfig+0x110>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00d      	beq.n	8007fac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d004      	beq.n	8007fac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007faa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a39      	ldr	r2, [pc, #228]	; (8008098 <DMA_SetConfig+0x21c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d04a      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a38      	ldr	r2, [pc, #224]	; (800809c <DMA_SetConfig+0x220>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d045      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a36      	ldr	r2, [pc, #216]	; (80080a0 <DMA_SetConfig+0x224>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d040      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a35      	ldr	r2, [pc, #212]	; (80080a4 <DMA_SetConfig+0x228>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d03b      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a33      	ldr	r2, [pc, #204]	; (80080a8 <DMA_SetConfig+0x22c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d036      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a32      	ldr	r2, [pc, #200]	; (80080ac <DMA_SetConfig+0x230>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d031      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a30      	ldr	r2, [pc, #192]	; (80080b0 <DMA_SetConfig+0x234>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d02c      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a2f      	ldr	r2, [pc, #188]	; (80080b4 <DMA_SetConfig+0x238>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d027      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a2d      	ldr	r2, [pc, #180]	; (80080b8 <DMA_SetConfig+0x23c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d022      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2c      	ldr	r2, [pc, #176]	; (80080bc <DMA_SetConfig+0x240>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d01d      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2a      	ldr	r2, [pc, #168]	; (80080c0 <DMA_SetConfig+0x244>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d018      	beq.n	800804c <DMA_SetConfig+0x1d0>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a29      	ldr	r2, [pc, #164]	; (80080c4 <DMA_SetConfig+0x248>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d013      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a27      	ldr	r2, [pc, #156]	; (80080c8 <DMA_SetConfig+0x24c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00e      	beq.n	800804c <DMA_SetConfig+0x1d0>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a26      	ldr	r2, [pc, #152]	; (80080cc <DMA_SetConfig+0x250>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d009      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a24      	ldr	r2, [pc, #144]	; (80080d0 <DMA_SetConfig+0x254>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d004      	beq.n	800804c <DMA_SetConfig+0x1d0>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <DMA_SetConfig+0x258>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d101      	bne.n	8008050 <DMA_SetConfig+0x1d4>
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <DMA_SetConfig+0x1d6>
 8008050:	2300      	movs	r3, #0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d059      	beq.n	800810a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	223f      	movs	r2, #63	; 0x3f
 8008060:	409a      	lsls	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008074:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d138      	bne.n	80080f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008096:	e086      	b.n	80081a6 <DMA_SetConfig+0x32a>
 8008098:	40020010 	.word	0x40020010
 800809c:	40020028 	.word	0x40020028
 80080a0:	40020040 	.word	0x40020040
 80080a4:	40020058 	.word	0x40020058
 80080a8:	40020070 	.word	0x40020070
 80080ac:	40020088 	.word	0x40020088
 80080b0:	400200a0 	.word	0x400200a0
 80080b4:	400200b8 	.word	0x400200b8
 80080b8:	40020410 	.word	0x40020410
 80080bc:	40020428 	.word	0x40020428
 80080c0:	40020440 	.word	0x40020440
 80080c4:	40020458 	.word	0x40020458
 80080c8:	40020470 	.word	0x40020470
 80080cc:	40020488 	.word	0x40020488
 80080d0:	400204a0 	.word	0x400204a0
 80080d4:	400204b8 	.word	0x400204b8
 80080d8:	58025408 	.word	0x58025408
 80080dc:	5802541c 	.word	0x5802541c
 80080e0:	58025430 	.word	0x58025430
 80080e4:	58025444 	.word	0x58025444
 80080e8:	58025458 	.word	0x58025458
 80080ec:	5802546c 	.word	0x5802546c
 80080f0:	58025480 	.word	0x58025480
 80080f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]
}
 8008108:	e04d      	b.n	80081a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a29      	ldr	r2, [pc, #164]	; (80081b4 <DMA_SetConfig+0x338>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d022      	beq.n	800815a <DMA_SetConfig+0x2de>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <DMA_SetConfig+0x33c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d01d      	beq.n	800815a <DMA_SetConfig+0x2de>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a26      	ldr	r2, [pc, #152]	; (80081bc <DMA_SetConfig+0x340>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d018      	beq.n	800815a <DMA_SetConfig+0x2de>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a24      	ldr	r2, [pc, #144]	; (80081c0 <DMA_SetConfig+0x344>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d013      	beq.n	800815a <DMA_SetConfig+0x2de>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a23      	ldr	r2, [pc, #140]	; (80081c4 <DMA_SetConfig+0x348>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00e      	beq.n	800815a <DMA_SetConfig+0x2de>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a21      	ldr	r2, [pc, #132]	; (80081c8 <DMA_SetConfig+0x34c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d009      	beq.n	800815a <DMA_SetConfig+0x2de>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a20      	ldr	r2, [pc, #128]	; (80081cc <DMA_SetConfig+0x350>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d004      	beq.n	800815a <DMA_SetConfig+0x2de>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1e      	ldr	r2, [pc, #120]	; (80081d0 <DMA_SetConfig+0x354>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d101      	bne.n	800815e <DMA_SetConfig+0x2e2>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <DMA_SetConfig+0x2e4>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d020      	beq.n	80081a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2201      	movs	r2, #1
 800816e:	409a      	lsls	r2, r3
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b40      	cmp	r3, #64	; 0x40
 8008182:	d108      	bne.n	8008196 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	60da      	str	r2, [r3, #12]
}
 8008194:	e007      	b.n	80081a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	60da      	str	r2, [r3, #12]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	58025408 	.word	0x58025408
 80081b8:	5802541c 	.word	0x5802541c
 80081bc:	58025430 	.word	0x58025430
 80081c0:	58025444 	.word	0x58025444
 80081c4:	58025458 	.word	0x58025458
 80081c8:	5802546c 	.word	0x5802546c
 80081cc:	58025480 	.word	0x58025480
 80081d0:	58025494 	.word	0x58025494

080081d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a42      	ldr	r2, [pc, #264]	; (80082ec <DMA_CalcBaseAndBitshift+0x118>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d04a      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a41      	ldr	r2, [pc, #260]	; (80082f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d045      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a3f      	ldr	r2, [pc, #252]	; (80082f4 <DMA_CalcBaseAndBitshift+0x120>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d040      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a3e      	ldr	r2, [pc, #248]	; (80082f8 <DMA_CalcBaseAndBitshift+0x124>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d03b      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a3c      	ldr	r2, [pc, #240]	; (80082fc <DMA_CalcBaseAndBitshift+0x128>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d036      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a3b      	ldr	r2, [pc, #236]	; (8008300 <DMA_CalcBaseAndBitshift+0x12c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d031      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a39      	ldr	r2, [pc, #228]	; (8008304 <DMA_CalcBaseAndBitshift+0x130>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d02c      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a38      	ldr	r2, [pc, #224]	; (8008308 <DMA_CalcBaseAndBitshift+0x134>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d027      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a36      	ldr	r2, [pc, #216]	; (800830c <DMA_CalcBaseAndBitshift+0x138>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d022      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a35      	ldr	r2, [pc, #212]	; (8008310 <DMA_CalcBaseAndBitshift+0x13c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d01d      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a33      	ldr	r2, [pc, #204]	; (8008314 <DMA_CalcBaseAndBitshift+0x140>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d018      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a32      	ldr	r2, [pc, #200]	; (8008318 <DMA_CalcBaseAndBitshift+0x144>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d013      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a30      	ldr	r2, [pc, #192]	; (800831c <DMA_CalcBaseAndBitshift+0x148>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00e      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a2f      	ldr	r2, [pc, #188]	; (8008320 <DMA_CalcBaseAndBitshift+0x14c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d009      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a2d      	ldr	r2, [pc, #180]	; (8008324 <DMA_CalcBaseAndBitshift+0x150>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <DMA_CalcBaseAndBitshift+0xa8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a2c      	ldr	r2, [pc, #176]	; (8008328 <DMA_CalcBaseAndBitshift+0x154>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d101      	bne.n	8008280 <DMA_CalcBaseAndBitshift+0xac>
 800827c:	2301      	movs	r3, #1
 800827e:	e000      	b.n	8008282 <DMA_CalcBaseAndBitshift+0xae>
 8008280:	2300      	movs	r3, #0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d024      	beq.n	80082d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	3b10      	subs	r3, #16
 800828e:	4a27      	ldr	r2, [pc, #156]	; (800832c <DMA_CalcBaseAndBitshift+0x158>)
 8008290:	fba2 2303 	umull	r2, r3, r2, r3
 8008294:	091b      	lsrs	r3, r3, #4
 8008296:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	4a24      	ldr	r2, [pc, #144]	; (8008330 <DMA_CalcBaseAndBitshift+0x15c>)
 80082a0:	5cd3      	ldrb	r3, [r2, r3]
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d908      	bls.n	80082c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	4b1f      	ldr	r3, [pc, #124]	; (8008334 <DMA_CalcBaseAndBitshift+0x160>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	1d1a      	adds	r2, r3, #4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	659a      	str	r2, [r3, #88]	; 0x58
 80082be:	e00d      	b.n	80082dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <DMA_CalcBaseAndBitshift+0x160>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6593      	str	r3, [r2, #88]	; 0x58
 80082ce:	e005      	b.n	80082dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	40020010 	.word	0x40020010
 80082f0:	40020028 	.word	0x40020028
 80082f4:	40020040 	.word	0x40020040
 80082f8:	40020058 	.word	0x40020058
 80082fc:	40020070 	.word	0x40020070
 8008300:	40020088 	.word	0x40020088
 8008304:	400200a0 	.word	0x400200a0
 8008308:	400200b8 	.word	0x400200b8
 800830c:	40020410 	.word	0x40020410
 8008310:	40020428 	.word	0x40020428
 8008314:	40020440 	.word	0x40020440
 8008318:	40020458 	.word	0x40020458
 800831c:	40020470 	.word	0x40020470
 8008320:	40020488 	.word	0x40020488
 8008324:	400204a0 	.word	0x400204a0
 8008328:	400204b8 	.word	0x400204b8
 800832c:	aaaaaaab 	.word	0xaaaaaaab
 8008330:	0801668c 	.word	0x0801668c
 8008334:	fffffc00 	.word	0xfffffc00

08008338 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d120      	bne.n	800838e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	2b03      	cmp	r3, #3
 8008352:	d858      	bhi.n	8008406 <DMA_CheckFifoParam+0xce>
 8008354:	a201      	add	r2, pc, #4	; (adr r2, 800835c <DMA_CheckFifoParam+0x24>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	0800836d 	.word	0x0800836d
 8008360:	0800837f 	.word	0x0800837f
 8008364:	0800836d 	.word	0x0800836d
 8008368:	08008407 	.word	0x08008407
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d048      	beq.n	800840a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800837c:	e045      	b.n	800840a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008386:	d142      	bne.n	800840e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800838c:	e03f      	b.n	800840e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008396:	d123      	bne.n	80083e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	2b03      	cmp	r3, #3
 800839e:	d838      	bhi.n	8008412 <DMA_CheckFifoParam+0xda>
 80083a0:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <DMA_CheckFifoParam+0x70>)
 80083a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a6:	bf00      	nop
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083bf 	.word	0x080083bf
 80083b0:	080083b9 	.word	0x080083b9
 80083b4:	080083d1 	.word	0x080083d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
        break;
 80083bc:	e030      	b.n	8008420 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d025      	beq.n	8008416 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083ce:	e022      	b.n	8008416 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083d8:	d11f      	bne.n	800841a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083de:	e01c      	b.n	800841a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d902      	bls.n	80083ee <DMA_CheckFifoParam+0xb6>
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d003      	beq.n	80083f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083ec:	e018      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
        break;
 80083f2:	e015      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00e      	beq.n	800841e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
    break;
 8008404:	e00b      	b.n	800841e <DMA_CheckFifoParam+0xe6>
        break;
 8008406:	bf00      	nop
 8008408:	e00a      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
        break;
 800840a:	bf00      	nop
 800840c:	e008      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
        break;
 800840e:	bf00      	nop
 8008410:	e006      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
        break;
 8008412:	bf00      	nop
 8008414:	e004      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
        break;
 8008416:	bf00      	nop
 8008418:	e002      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
        break;
 800841a:	bf00      	nop
 800841c:	e000      	b.n	8008420 <DMA_CheckFifoParam+0xe8>
    break;
 800841e:	bf00      	nop
    }
  }

  return status;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop

08008430 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a38      	ldr	r2, [pc, #224]	; (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d022      	beq.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a36      	ldr	r2, [pc, #216]	; (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d01d      	beq.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a35      	ldr	r2, [pc, #212]	; (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d018      	beq.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a33      	ldr	r2, [pc, #204]	; (8008530 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a32      	ldr	r2, [pc, #200]	; (8008534 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00e      	beq.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a30      	ldr	r2, [pc, #192]	; (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d009      	beq.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a2f      	ldr	r2, [pc, #188]	; (800853c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d004      	beq.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a2d      	ldr	r2, [pc, #180]	; (8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d101      	bne.n	8008492 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01a      	beq.n	80084ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	3b08      	subs	r3, #8
 80084a0:	4a28      	ldr	r2, [pc, #160]	; (8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	091b      	lsrs	r3, r3, #4
 80084a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4b26      	ldr	r3, [pc, #152]	; (8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80084ae:	4413      	add	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a24      	ldr	r2, [pc, #144]	; (800854c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80084bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f003 031f 	and.w	r3, r3, #31
 80084c4:	2201      	movs	r2, #1
 80084c6:	409a      	lsls	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084cc:	e024      	b.n	8008518 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	3b10      	subs	r3, #16
 80084d6:	4a1e      	ldr	r2, [pc, #120]	; (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084d8:	fba2 2303 	umull	r2, r3, r2, r3
 80084dc:	091b      	lsrs	r3, r3, #4
 80084de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a1c      	ldr	r2, [pc, #112]	; (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d806      	bhi.n	80084f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4a1b      	ldr	r2, [pc, #108]	; (8008558 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d902      	bls.n	80084f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3308      	adds	r3, #8
 80084f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4b18      	ldr	r3, [pc, #96]	; (800855c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	461a      	mov	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a16      	ldr	r2, [pc, #88]	; (8008560 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008508:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f003 031f 	and.w	r3, r3, #31
 8008510:	2201      	movs	r2, #1
 8008512:	409a      	lsls	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008518:	bf00      	nop
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	58025408 	.word	0x58025408
 8008528:	5802541c 	.word	0x5802541c
 800852c:	58025430 	.word	0x58025430
 8008530:	58025444 	.word	0x58025444
 8008534:	58025458 	.word	0x58025458
 8008538:	5802546c 	.word	0x5802546c
 800853c:	58025480 	.word	0x58025480
 8008540:	58025494 	.word	0x58025494
 8008544:	cccccccd 	.word	0xcccccccd
 8008548:	16009600 	.word	0x16009600
 800854c:	58025880 	.word	0x58025880
 8008550:	aaaaaaab 	.word	0xaaaaaaab
 8008554:	400204b8 	.word	0x400204b8
 8008558:	4002040f 	.word	0x4002040f
 800855c:	10008200 	.word	0x10008200
 8008560:	40020880 	.word	0x40020880

08008564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d04a      	beq.n	8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b08      	cmp	r3, #8
 800857e:	d847      	bhi.n	8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a25      	ldr	r2, [pc, #148]	; (800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d022      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a24      	ldr	r2, [pc, #144]	; (8008620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d01d      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a22      	ldr	r2, [pc, #136]	; (8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d018      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a21      	ldr	r2, [pc, #132]	; (8008628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d013      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a1f      	ldr	r2, [pc, #124]	; (800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00e      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d009      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1c      	ldr	r2, [pc, #112]	; (8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d004      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d101      	bne.n	80085d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085d4:	2300      	movs	r3, #0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4b17      	ldr	r3, [pc, #92]	; (800863c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a15      	ldr	r2, [pc, #84]	; (8008640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085ec:	671a      	str	r2, [r3, #112]	; 0x70
 80085ee:	e009      	b.n	8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4b14      	ldr	r3, [pc, #80]	; (8008644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	461a      	mov	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a11      	ldr	r2, [pc, #68]	; (8008648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008602:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3b01      	subs	r3, #1
 8008608:	2201      	movs	r2, #1
 800860a:	409a      	lsls	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008610:	bf00      	nop
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	58025408 	.word	0x58025408
 8008620:	5802541c 	.word	0x5802541c
 8008624:	58025430 	.word	0x58025430
 8008628:	58025444 	.word	0x58025444
 800862c:	58025458 	.word	0x58025458
 8008630:	5802546c 	.word	0x5802546c
 8008634:	58025480 	.word	0x58025480
 8008638:	58025494 	.word	0x58025494
 800863c:	1600963f 	.word	0x1600963f
 8008640:	58025940 	.word	0x58025940
 8008644:	1000823f 	.word	0x1000823f
 8008648:	40020940 	.word	0x40020940

0800864c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800864c:	b480      	push	{r7}
 800864e:	b089      	sub	sp, #36	; 0x24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008656:	2300      	movs	r3, #0
 8008658:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800865a:	4b89      	ldr	r3, [pc, #548]	; (8008880 <HAL_GPIO_Init+0x234>)
 800865c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800865e:	e194      	b.n	800898a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	2101      	movs	r1, #1
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	fa01 f303 	lsl.w	r3, r1, r3
 800866c:	4013      	ands	r3, r2
 800866e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8186 	beq.w	8008984 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d005      	beq.n	8008690 <HAL_GPIO_Init+0x44>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d130      	bne.n	80086f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	2203      	movs	r2, #3
 800869c:	fa02 f303 	lsl.w	r3, r2, r3
 80086a0:	43db      	mvns	r3, r3
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	4013      	ands	r3, r2
 80086a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086c6:	2201      	movs	r2, #1
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	43db      	mvns	r3, r3
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	4013      	ands	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	091b      	lsrs	r3, r3, #4
 80086dc:	f003 0201 	and.w	r2, r3, #1
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	fa02 f303 	lsl.w	r3, r2, r3
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d017      	beq.n	800872e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	2203      	movs	r2, #3
 800870a:	fa02 f303 	lsl.w	r3, r2, r3
 800870e:	43db      	mvns	r3, r3
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	4013      	ands	r3, r2
 8008714:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	4313      	orrs	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d123      	bne.n	8008782 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	08da      	lsrs	r2, r3, #3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3208      	adds	r2, #8
 8008742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	220f      	movs	r2, #15
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	43db      	mvns	r3, r3
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	4013      	ands	r3, r2
 800875c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	fa02 f303 	lsl.w	r3, r2, r3
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	4313      	orrs	r3, r2
 8008772:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	08da      	lsrs	r2, r3, #3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3208      	adds	r2, #8
 800877c:	69b9      	ldr	r1, [r7, #24]
 800877e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	2203      	movs	r2, #3
 800878e:	fa02 f303 	lsl.w	r3, r2, r3
 8008792:	43db      	mvns	r3, r3
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	4013      	ands	r3, r2
 8008798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f003 0203 	and.w	r2, r3, #3
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 80e0 	beq.w	8008984 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087c4:	4b2f      	ldr	r3, [pc, #188]	; (8008884 <HAL_GPIO_Init+0x238>)
 80087c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087ca:	4a2e      	ldr	r2, [pc, #184]	; (8008884 <HAL_GPIO_Init+0x238>)
 80087cc:	f043 0302 	orr.w	r3, r3, #2
 80087d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80087d4:	4b2b      	ldr	r3, [pc, #172]	; (8008884 <HAL_GPIO_Init+0x238>)
 80087d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087e2:	4a29      	ldr	r2, [pc, #164]	; (8008888 <HAL_GPIO_Init+0x23c>)
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	089b      	lsrs	r3, r3, #2
 80087e8:	3302      	adds	r3, #2
 80087ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f003 0303 	and.w	r3, r3, #3
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	220f      	movs	r2, #15
 80087fa:	fa02 f303 	lsl.w	r3, r2, r3
 80087fe:	43db      	mvns	r3, r3
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	4013      	ands	r3, r2
 8008804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a20      	ldr	r2, [pc, #128]	; (800888c <HAL_GPIO_Init+0x240>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d052      	beq.n	80088b4 <HAL_GPIO_Init+0x268>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <HAL_GPIO_Init+0x244>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d031      	beq.n	800887a <HAL_GPIO_Init+0x22e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <HAL_GPIO_Init+0x248>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d02b      	beq.n	8008876 <HAL_GPIO_Init+0x22a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <HAL_GPIO_Init+0x24c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d025      	beq.n	8008872 <HAL_GPIO_Init+0x226>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a1c      	ldr	r2, [pc, #112]	; (800889c <HAL_GPIO_Init+0x250>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d01f      	beq.n	800886e <HAL_GPIO_Init+0x222>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <HAL_GPIO_Init+0x254>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d019      	beq.n	800886a <HAL_GPIO_Init+0x21e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a1a      	ldr	r2, [pc, #104]	; (80088a4 <HAL_GPIO_Init+0x258>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d013      	beq.n	8008866 <HAL_GPIO_Init+0x21a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <HAL_GPIO_Init+0x25c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00d      	beq.n	8008862 <HAL_GPIO_Init+0x216>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a18      	ldr	r2, [pc, #96]	; (80088ac <HAL_GPIO_Init+0x260>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d007      	beq.n	800885e <HAL_GPIO_Init+0x212>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a17      	ldr	r2, [pc, #92]	; (80088b0 <HAL_GPIO_Init+0x264>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d101      	bne.n	800885a <HAL_GPIO_Init+0x20e>
 8008856:	2309      	movs	r3, #9
 8008858:	e02d      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 800885a:	230a      	movs	r3, #10
 800885c:	e02b      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 800885e:	2308      	movs	r3, #8
 8008860:	e029      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 8008862:	2307      	movs	r3, #7
 8008864:	e027      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 8008866:	2306      	movs	r3, #6
 8008868:	e025      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 800886a:	2305      	movs	r3, #5
 800886c:	e023      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 800886e:	2304      	movs	r3, #4
 8008870:	e021      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 8008872:	2303      	movs	r3, #3
 8008874:	e01f      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 8008876:	2302      	movs	r3, #2
 8008878:	e01d      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 800887a:	2301      	movs	r3, #1
 800887c:	e01b      	b.n	80088b6 <HAL_GPIO_Init+0x26a>
 800887e:	bf00      	nop
 8008880:	58000080 	.word	0x58000080
 8008884:	58024400 	.word	0x58024400
 8008888:	58000400 	.word	0x58000400
 800888c:	58020000 	.word	0x58020000
 8008890:	58020400 	.word	0x58020400
 8008894:	58020800 	.word	0x58020800
 8008898:	58020c00 	.word	0x58020c00
 800889c:	58021000 	.word	0x58021000
 80088a0:	58021400 	.word	0x58021400
 80088a4:	58021800 	.word	0x58021800
 80088a8:	58021c00 	.word	0x58021c00
 80088ac:	58022000 	.word	0x58022000
 80088b0:	58022400 	.word	0x58022400
 80088b4:	2300      	movs	r3, #0
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	f002 0203 	and.w	r2, r2, #3
 80088bc:	0092      	lsls	r2, r2, #2
 80088be:	4093      	lsls	r3, r2
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088c6:	4938      	ldr	r1, [pc, #224]	; (80089a8 <HAL_GPIO_Init+0x35c>)
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	089b      	lsrs	r3, r3, #2
 80088cc:	3302      	adds	r3, #2
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	43db      	mvns	r3, r3
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	4013      	ands	r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	43db      	mvns	r3, r3
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	4013      	ands	r3, r2
 8008912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	43db      	mvns	r3, r3
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	4013      	ands	r3, r2
 800893e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	43db      	mvns	r3, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	4013      	ands	r3, r2
 8008968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	3301      	adds	r3, #1
 8008988:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	f47f ae63 	bne.w	8008660 <HAL_GPIO_Init+0x14>
  }
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	3724      	adds	r7, #36	; 0x24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	58000400 	.word	0x58000400

080089ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	887b      	ldrh	r3, [r7, #2]
 80089be:	4013      	ands	r3, r2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089c4:	2301      	movs	r3, #1
 80089c6:	73fb      	strb	r3, [r7, #15]
 80089c8:	e001      	b.n	80089ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	807b      	strh	r3, [r7, #2]
 80089e8:	4613      	mov	r3, r2
 80089ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089ec:	787b      	ldrb	r3, [r7, #1]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089f2:	887a      	ldrh	r2, [r7, #2]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80089f8:	e003      	b.n	8008a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80089fa:	887b      	ldrh	r3, [r7, #2]
 80089fc:	041a      	lsls	r2, r3, #16
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	619a      	str	r2, [r3, #24]
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e08b      	b.n	8008b3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7fa f938 	bl	8002cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2224      	movs	r2, #36	; 0x24
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0201 	bic.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d107      	bne.n	8008a8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a86:	609a      	str	r2, [r3, #8]
 8008a88:	e006      	b.n	8008a98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008a96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d108      	bne.n	8008ab2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aae:	605a      	str	r2, [r3, #4]
 8008ab0:	e007      	b.n	8008ac2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ac0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6859      	ldr	r1, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <HAL_I2C_Init+0x134>)
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69d9      	ldr	r1, [r3, #28]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1a      	ldr	r2, [r3, #32]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0201 	orr.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	02008000 	.word	0x02008000

08008b48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	461a      	mov	r2, r3
 8008b54:	460b      	mov	r3, r1
 8008b56:	817b      	strh	r3, [r7, #10]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	f040 80fd 	bne.w	8008d64 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_I2C_Master_Transmit+0x30>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e0f6      	b.n	8008d66 <HAL_I2C_Master_Transmit+0x21e>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b80:	f7fa fe00 	bl	8003784 <HAL_GetTick>
 8008b84:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	2319      	movs	r3, #25
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fa0a 	bl	8008fac <I2C_WaitOnFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e0e1      	b.n	8008d66 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2221      	movs	r2, #33	; 0x21
 8008ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2210      	movs	r2, #16
 8008bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	893a      	ldrh	r2, [r7, #8]
 8008bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	2bff      	cmp	r3, #255	; 0xff
 8008bd2:	d906      	bls.n	8008be2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	22ff      	movs	r2, #255	; 0xff
 8008bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	e007      	b.n	8008bf2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bf0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d024      	beq.n	8008c44 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	3301      	adds	r3, #1
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	8979      	ldrh	r1, [r7, #10]
 8008c36:	4b4e      	ldr	r3, [pc, #312]	; (8008d70 <HAL_I2C_Master_Transmit+0x228>)
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 fc05 	bl	800944c <I2C_TransferConfig>
 8008c42:	e066      	b.n	8008d12 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	8979      	ldrh	r1, [r7, #10]
 8008c4c:	4b48      	ldr	r3, [pc, #288]	; (8008d70 <HAL_I2C_Master_Transmit+0x228>)
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fbfa 	bl	800944c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008c58:	e05b      	b.n	8008d12 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	6a39      	ldr	r1, [r7, #32]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f9fd 	bl	800905e <I2C_WaitOnTXISFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e07b      	b.n	8008d66 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d034      	beq.n	8008d12 <HAL_I2C_Master_Transmit+0x1ca>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d130      	bne.n	8008d12 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	2180      	movs	r1, #128	; 0x80
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 f976 	bl	8008fac <I2C_WaitOnFlagUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e04d      	b.n	8008d66 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	2bff      	cmp	r3, #255	; 0xff
 8008cd2:	d90e      	bls.n	8008cf2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	22ff      	movs	r2, #255	; 0xff
 8008cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	8979      	ldrh	r1, [r7, #10]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 fbae 	bl	800944c <I2C_TransferConfig>
 8008cf0:	e00f      	b.n	8008d12 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	8979      	ldrh	r1, [r7, #10]
 8008d04:	2300      	movs	r3, #0
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 fb9d 	bl	800944c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d19e      	bne.n	8008c5a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	6a39      	ldr	r1, [r7, #32]
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 f9e3 	bl	80090ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e01a      	b.n	8008d66 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2220      	movs	r2, #32
 8008d36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6859      	ldr	r1, [r3, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <HAL_I2C_Master_Transmit+0x22c>)
 8008d44:	400b      	ands	r3, r1
 8008d46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	e000      	b.n	8008d66 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008d64:	2302      	movs	r3, #2
  }
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	80002000 	.word	0x80002000
 8008d74:	fe00e800 	.word	0xfe00e800

08008d78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	607a      	str	r2, [r7, #4]
 8008d82:	461a      	mov	r2, r3
 8008d84:	460b      	mov	r3, r1
 8008d86:	817b      	strh	r3, [r7, #10]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	f040 80db 	bne.w	8008f50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_I2C_Master_Receive+0x30>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e0d4      	b.n	8008f52 <HAL_I2C_Master_Receive+0x1da>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008db0:	f7fa fce8 	bl	8003784 <HAL_GetTick>
 8008db4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	2319      	movs	r3, #25
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f8f2 	bl	8008fac <I2C_WaitOnFlagUntilTimeout>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e0bf      	b.n	8008f52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2222      	movs	r2, #34	; 0x22
 8008dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2210      	movs	r2, #16
 8008dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	893a      	ldrh	r2, [r7, #8]
 8008df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	2bff      	cmp	r3, #255	; 0xff
 8008e02:	d90e      	bls.n	8008e22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	22ff      	movs	r2, #255	; 0xff
 8008e08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	8979      	ldrh	r1, [r7, #10]
 8008e12:	4b52      	ldr	r3, [pc, #328]	; (8008f5c <HAL_I2C_Master_Receive+0x1e4>)
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fb16 	bl	800944c <I2C_TransferConfig>
 8008e20:	e06d      	b.n	8008efe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	8979      	ldrh	r1, [r7, #10]
 8008e34:	4b49      	ldr	r3, [pc, #292]	; (8008f5c <HAL_I2C_Master_Receive+0x1e4>)
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 fb05 	bl	800944c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008e42:	e05c      	b.n	8008efe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	6a39      	ldr	r1, [r7, #32]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f993 	bl	8009174 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e07c      	b.n	8008f52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d034      	beq.n	8008efe <HAL_I2C_Master_Receive+0x186>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d130      	bne.n	8008efe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2180      	movs	r1, #128	; 0x80
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f880 	bl	8008fac <I2C_WaitOnFlagUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e04d      	b.n	8008f52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	2bff      	cmp	r3, #255	; 0xff
 8008ebe:	d90e      	bls.n	8008ede <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	22ff      	movs	r2, #255	; 0xff
 8008ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	8979      	ldrh	r1, [r7, #10]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fab8 	bl	800944c <I2C_TransferConfig>
 8008edc:	e00f      	b.n	8008efe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	8979      	ldrh	r1, [r7, #10]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 faa7 	bl	800944c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d19d      	bne.n	8008e44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	6a39      	ldr	r1, [r7, #32]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 f8ed 	bl	80090ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e01a      	b.n	8008f52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2220      	movs	r2, #32
 8008f22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6859      	ldr	r1, [r3, #4]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <HAL_I2C_Master_Receive+0x1e8>)
 8008f30:	400b      	ands	r3, r1
 8008f32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e000      	b.n	8008f52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008f50:	2302      	movs	r3, #2
  }
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	80002400 	.word	0x80002400
 8008f60:	fe00e800 	.word	0xfe00e800

08008f64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d103      	bne.n	8008f82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d007      	beq.n	8008fa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	699a      	ldr	r2, [r3, #24]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0201 	orr.w	r2, r2, #1
 8008f9e:	619a      	str	r2, [r3, #24]
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fbc:	e03b      	b.n	8009036 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 f962 	bl	800928c <I2C_IsErrorOccurred>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e041      	b.n	8009056 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fd8:	d02d      	beq.n	8009036 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fda:	f7fa fbd3 	bl	8003784 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d302      	bcc.n	8008ff0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d122      	bne.n	8009036 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	bf0c      	ite	eq
 8009000:	2301      	moveq	r3, #1
 8009002:	2300      	movne	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	461a      	mov	r2, r3
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	429a      	cmp	r2, r3
 800900c:	d113      	bne.n	8009036 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	f043 0220 	orr.w	r2, r3, #32
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2220      	movs	r2, #32
 800901e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e00f      	b.n	8009056 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	699a      	ldr	r2, [r3, #24]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4013      	ands	r3, r2
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	bf0c      	ite	eq
 8009046:	2301      	moveq	r3, #1
 8009048:	2300      	movne	r3, #0
 800904a:	b2db      	uxtb	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	429a      	cmp	r2, r3
 8009052:	d0b4      	beq.n	8008fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800906a:	e033      	b.n	80090d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 f90b 	bl	800928c <I2C_IsErrorOccurred>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e031      	b.n	80090e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009086:	d025      	beq.n	80090d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009088:	f7fa fb7c 	bl	8003784 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	429a      	cmp	r2, r3
 8009096:	d302      	bcc.n	800909e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d11a      	bne.n	80090d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d013      	beq.n	80090d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b0:	f043 0220 	orr.w	r2, r3, #32
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e007      	b.n	80090e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d1c4      	bne.n	800906c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090f8:	e02f      	b.n	800915a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f8c4 	bl	800928c <I2C_IsErrorOccurred>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e02d      	b.n	800916a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800910e:	f7fa fb39 	bl	8003784 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	429a      	cmp	r2, r3
 800911c:	d302      	bcc.n	8009124 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11a      	bne.n	800915a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b20      	cmp	r3, #32
 8009130:	d013      	beq.n	800915a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009136:	f043 0220 	orr.w	r2, r3, #32
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2220      	movs	r2, #32
 8009142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e007      	b.n	800916a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b20      	cmp	r3, #32
 8009166:	d1c8      	bne.n	80090fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009184:	e071      	b.n	800926a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f87e 	bl	800928c <I2C_IsErrorOccurred>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d13b      	bne.n	8009220 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d138      	bne.n	8009220 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d105      	bne.n	80091c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d121      	bne.n	800921a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2210      	movs	r2, #16
 80091dc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2204      	movs	r2, #4
 80091e2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2220      	movs	r2, #32
 80091ea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6859      	ldr	r1, [r3, #4]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b24      	ldr	r3, [pc, #144]	; (8009288 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80091f8:	400b      	ands	r3, r1
 80091fa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]
 8009218:	e002      	b.n	8009220 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009220:	f7fa fab0 	bl	8003784 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	429a      	cmp	r2, r3
 800922e:	d302      	bcc.n	8009236 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d119      	bne.n	800926a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d116      	bne.n	800926a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	2b04      	cmp	r3, #4
 8009248:	d00f      	beq.n	800926a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924e:	f043 0220 	orr.w	r2, r3, #32
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2220      	movs	r2, #32
 800925a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b04      	cmp	r3, #4
 8009276:	d002      	beq.n	800927e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d083      	beq.n	8009186 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	fe00e800 	.word	0xfe00e800

0800928c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	f003 0310 	and.w	r3, r3, #16
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d068      	beq.n	800938a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2210      	movs	r2, #16
 80092be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092c0:	e049      	b.n	8009356 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c8:	d045      	beq.n	8009356 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80092ca:	f7fa fa5b 	bl	8003784 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d302      	bcc.n	80092e0 <I2C_IsErrorOccurred+0x54>
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d13a      	bne.n	8009356 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009302:	d121      	bne.n	8009348 <I2C_IsErrorOccurred+0xbc>
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800930a:	d01d      	beq.n	8009348 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800930c:	7cfb      	ldrb	r3, [r7, #19]
 800930e:	2b20      	cmp	r3, #32
 8009310:	d01a      	beq.n	8009348 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009320:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009322:	f7fa fa2f 	bl	8003784 <HAL_GetTick>
 8009326:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009328:	e00e      	b.n	8009348 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800932a:	f7fa fa2b 	bl	8003784 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b19      	cmp	r3, #25
 8009336:	d907      	bls.n	8009348 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	f043 0320 	orr.w	r3, r3, #32
 800933e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009346:	e006      	b.n	8009356 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b20      	cmp	r3, #32
 8009354:	d1e9      	bne.n	800932a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b20      	cmp	r3, #32
 8009362:	d003      	beq.n	800936c <I2C_IsErrorOccurred+0xe0>
 8009364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0aa      	beq.n	80092c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800936c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2220      	movs	r2, #32
 800937a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	f043 0304 	orr.w	r3, r3, #4
 8009382:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	f043 0301 	orr.w	r3, r3, #1
 80093a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00b      	beq.n	80093d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	f043 0308 	orr.w	r3, r3, #8
 80093c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	f043 0302 	orr.w	r3, r3, #2
 80093e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80093f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01c      	beq.n	800943a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fdaf 	bl	8008f64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6859      	ldr	r1, [r3, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <I2C_IsErrorOccurred+0x1bc>)
 8009412:	400b      	ands	r3, r1
 8009414:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	431a      	orrs	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2220      	movs	r2, #32
 8009426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800943a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800943e:	4618      	mov	r0, r3
 8009440:	3728      	adds	r7, #40	; 0x28
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	fe00e800 	.word	0xfe00e800

0800944c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	607b      	str	r3, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	817b      	strh	r3, [r7, #10]
 800945a:	4613      	mov	r3, r2
 800945c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800945e:	897b      	ldrh	r3, [r7, #10]
 8009460:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009464:	7a7b      	ldrb	r3, [r7, #9]
 8009466:	041b      	lsls	r3, r3, #16
 8009468:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800946c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	4313      	orrs	r3, r2
 8009476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800947a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	0d5b      	lsrs	r3, r3, #21
 8009486:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800948a:	4b08      	ldr	r3, [pc, #32]	; (80094ac <I2C_TransferConfig+0x60>)
 800948c:	430b      	orrs	r3, r1
 800948e:	43db      	mvns	r3, r3
 8009490:	ea02 0103 	and.w	r1, r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	03ff63ff 	.word	0x03ff63ff

080094b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d138      	bne.n	8009538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d101      	bne.n	80094d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80094d0:	2302      	movs	r3, #2
 80094d2:	e032      	b.n	800953a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2224      	movs	r2, #36	; 0x24
 80094e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0201 	bic.w	r2, r2, #1
 80094f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6819      	ldr	r1, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	e000      	b.n	800953a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009538:	2302      	movs	r3, #2
  }
}
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b20      	cmp	r3, #32
 800955a:	d139      	bne.n	80095d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009566:	2302      	movs	r3, #2
 8009568:	e033      	b.n	80095d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2224      	movs	r2, #36	; 0x24
 8009576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 0201 	bic.w	r2, r2, #1
 8009588:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009598:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	021b      	lsls	r3, r3, #8
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0201 	orr.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2220      	movs	r2, #32
 80095c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	e000      	b.n	80095d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80095d0:	2302      	movs	r3, #2
  }
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
	...

080095e0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095e8:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80095ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095ee:	4a0c      	ldr	r2, [pc, #48]	; (8009620 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80095f0:	f043 0302 	orr.w	r3, r3, #2
 80095f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80095fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	4906      	ldr	r1, [pc, #24]	; (8009624 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4313      	orrs	r3, r2
 8009610:	604b      	str	r3, [r1, #4]
}
 8009612:	bf00      	nop
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	58024400 	.word	0x58024400
 8009624:	58000400 	.word	0x58000400

08009628 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009630:	4b19      	ldr	r3, [pc, #100]	; (8009698 <HAL_PWREx_ConfigSupply+0x70>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b04      	cmp	r3, #4
 800963a:	d00a      	beq.n	8009652 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800963c:	4b16      	ldr	r3, [pc, #88]	; (8009698 <HAL_PWREx_ConfigSupply+0x70>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	429a      	cmp	r2, r3
 8009648:	d001      	beq.n	800964e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e01f      	b.n	800968e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	e01d      	b.n	800968e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009652:	4b11      	ldr	r3, [pc, #68]	; (8009698 <HAL_PWREx_ConfigSupply+0x70>)
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f023 0207 	bic.w	r2, r3, #7
 800965a:	490f      	ldr	r1, [pc, #60]	; (8009698 <HAL_PWREx_ConfigSupply+0x70>)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4313      	orrs	r3, r2
 8009660:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009662:	f7fa f88f 	bl	8003784 <HAL_GetTick>
 8009666:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009668:	e009      	b.n	800967e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800966a:	f7fa f88b 	bl	8003784 <HAL_GetTick>
 800966e:	4602      	mov	r2, r0
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009678:	d901      	bls.n	800967e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e007      	b.n	800968e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <HAL_PWREx_ConfigSupply+0x70>)
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800968a:	d1ee      	bne.n	800966a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	58024800 	.word	0x58024800

0800969c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08c      	sub	sp, #48	; 0x30
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f000 bc48 	b.w	8009f40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8088 	beq.w	80097ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096be:	4b99      	ldr	r3, [pc, #612]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096c8:	4b96      	ldr	r3, [pc, #600]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d007      	beq.n	80096e4 <HAL_RCC_OscConfig+0x48>
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2b18      	cmp	r3, #24
 80096d8:	d111      	bne.n	80096fe <HAL_RCC_OscConfig+0x62>
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	f003 0303 	and.w	r3, r3, #3
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d10c      	bne.n	80096fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096e4:	4b8f      	ldr	r3, [pc, #572]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d06d      	beq.n	80097cc <HAL_RCC_OscConfig+0x130>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d169      	bne.n	80097cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f000 bc21 	b.w	8009f40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009706:	d106      	bne.n	8009716 <HAL_RCC_OscConfig+0x7a>
 8009708:	4b86      	ldr	r3, [pc, #536]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a85      	ldr	r2, [pc, #532]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800970e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	e02e      	b.n	8009774 <HAL_RCC_OscConfig+0xd8>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10c      	bne.n	8009738 <HAL_RCC_OscConfig+0x9c>
 800971e:	4b81      	ldr	r3, [pc, #516]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a80      	ldr	r2, [pc, #512]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	4b7e      	ldr	r3, [pc, #504]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a7d      	ldr	r2, [pc, #500]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	e01d      	b.n	8009774 <HAL_RCC_OscConfig+0xd8>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009740:	d10c      	bne.n	800975c <HAL_RCC_OscConfig+0xc0>
 8009742:	4b78      	ldr	r3, [pc, #480]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a77      	ldr	r2, [pc, #476]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	4b75      	ldr	r3, [pc, #468]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a74      	ldr	r2, [pc, #464]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	e00b      	b.n	8009774 <HAL_RCC_OscConfig+0xd8>
 800975c:	4b71      	ldr	r3, [pc, #452]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a70      	ldr	r2, [pc, #448]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	4b6e      	ldr	r3, [pc, #440]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a6d      	ldr	r2, [pc, #436]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800976e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d013      	beq.n	80097a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800977c:	f7fa f802 	bl	8003784 <HAL_GetTick>
 8009780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009782:	e008      	b.n	8009796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009784:	f7f9 fffe 	bl	8003784 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	2b64      	cmp	r3, #100	; 0x64
 8009790:	d901      	bls.n	8009796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e3d4      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009796:	4b63      	ldr	r3, [pc, #396]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0f0      	beq.n	8009784 <HAL_RCC_OscConfig+0xe8>
 80097a2:	e014      	b.n	80097ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a4:	f7f9 ffee 	bl	8003784 <HAL_GetTick>
 80097a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097aa:	e008      	b.n	80097be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097ac:	f7f9 ffea 	bl	8003784 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b64      	cmp	r3, #100	; 0x64
 80097b8:	d901      	bls.n	80097be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e3c0      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097be:	4b59      	ldr	r3, [pc, #356]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1f0      	bne.n	80097ac <HAL_RCC_OscConfig+0x110>
 80097ca:	e000      	b.n	80097ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80ca 	beq.w	8009970 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097dc:	4b51      	ldr	r3, [pc, #324]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097e6:	4b4f      	ldr	r3, [pc, #316]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d007      	beq.n	8009802 <HAL_RCC_OscConfig+0x166>
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	2b18      	cmp	r3, #24
 80097f6:	d156      	bne.n	80098a6 <HAL_RCC_OscConfig+0x20a>
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d151      	bne.n	80098a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009802:	4b48      	ldr	r3, [pc, #288]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <HAL_RCC_OscConfig+0x17e>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e392      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800981a:	4b42      	ldr	r3, [pc, #264]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f023 0219 	bic.w	r2, r3, #25
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	493f      	ldr	r1, [pc, #252]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009828:	4313      	orrs	r3, r2
 800982a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800982c:	f7f9 ffaa 	bl	8003784 <HAL_GetTick>
 8009830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009832:	e008      	b.n	8009846 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009834:	f7f9 ffa6 	bl	8003784 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	2b02      	cmp	r3, #2
 8009840:	d901      	bls.n	8009846 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e37c      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009846:	4b37      	ldr	r3, [pc, #220]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d0f0      	beq.n	8009834 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009852:	f7f9 ffa3 	bl	800379c <HAL_GetREVID>
 8009856:	4603      	mov	r3, r0
 8009858:	f241 0203 	movw	r2, #4099	; 0x1003
 800985c:	4293      	cmp	r3, r2
 800985e:	d817      	bhi.n	8009890 <HAL_RCC_OscConfig+0x1f4>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	2b40      	cmp	r3, #64	; 0x40
 8009866:	d108      	bne.n	800987a <HAL_RCC_OscConfig+0x1de>
 8009868:	4b2e      	ldr	r3, [pc, #184]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009870:	4a2c      	ldr	r2, [pc, #176]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009876:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009878:	e07a      	b.n	8009970 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800987a:	4b2a      	ldr	r3, [pc, #168]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	031b      	lsls	r3, r3, #12
 8009888:	4926      	ldr	r1, [pc, #152]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800988a:	4313      	orrs	r3, r2
 800988c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800988e:	e06f      	b.n	8009970 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009890:	4b24      	ldr	r3, [pc, #144]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	061b      	lsls	r3, r3, #24
 800989e:	4921      	ldr	r1, [pc, #132]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098a4:	e064      	b.n	8009970 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d047      	beq.n	800993e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098ae:	4b1d      	ldr	r3, [pc, #116]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f023 0219 	bic.w	r2, r3, #25
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	491a      	ldr	r1, [pc, #104]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c0:	f7f9 ff60 	bl	8003784 <HAL_GetTick>
 80098c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098c6:	e008      	b.n	80098da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098c8:	f7f9 ff5c 	bl	8003784 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d901      	bls.n	80098da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e332      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098da:	4b12      	ldr	r3, [pc, #72]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0304 	and.w	r3, r3, #4
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0f0      	beq.n	80098c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098e6:	f7f9 ff59 	bl	800379c <HAL_GetREVID>
 80098ea:	4603      	mov	r3, r0
 80098ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d819      	bhi.n	8009928 <HAL_RCC_OscConfig+0x28c>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	2b40      	cmp	r3, #64	; 0x40
 80098fa:	d108      	bne.n	800990e <HAL_RCC_OscConfig+0x272>
 80098fc:	4b09      	ldr	r3, [pc, #36]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009904:	4a07      	ldr	r2, [pc, #28]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800990a:	6053      	str	r3, [r2, #4]
 800990c:	e030      	b.n	8009970 <HAL_RCC_OscConfig+0x2d4>
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	031b      	lsls	r3, r3, #12
 800991c:	4901      	ldr	r1, [pc, #4]	; (8009924 <HAL_RCC_OscConfig+0x288>)
 800991e:	4313      	orrs	r3, r2
 8009920:	604b      	str	r3, [r1, #4]
 8009922:	e025      	b.n	8009970 <HAL_RCC_OscConfig+0x2d4>
 8009924:	58024400 	.word	0x58024400
 8009928:	4b9a      	ldr	r3, [pc, #616]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	061b      	lsls	r3, r3, #24
 8009936:	4997      	ldr	r1, [pc, #604]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009938:	4313      	orrs	r3, r2
 800993a:	604b      	str	r3, [r1, #4]
 800993c:	e018      	b.n	8009970 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800993e:	4b95      	ldr	r3, [pc, #596]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a94      	ldr	r2, [pc, #592]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009944:	f023 0301 	bic.w	r3, r3, #1
 8009948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800994a:	f7f9 ff1b 	bl	8003784 <HAL_GetTick>
 800994e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009950:	e008      	b.n	8009964 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009952:	f7f9 ff17 	bl	8003784 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	2b02      	cmp	r3, #2
 800995e:	d901      	bls.n	8009964 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e2ed      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009964:	4b8b      	ldr	r3, [pc, #556]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1f0      	bne.n	8009952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0310 	and.w	r3, r3, #16
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 80a9 	beq.w	8009ad0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800997e:	4b85      	ldr	r3, [pc, #532]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009986:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009988:	4b82      	ldr	r3, [pc, #520]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	2b08      	cmp	r3, #8
 8009992:	d007      	beq.n	80099a4 <HAL_RCC_OscConfig+0x308>
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	2b18      	cmp	r3, #24
 8009998:	d13a      	bne.n	8009a10 <HAL_RCC_OscConfig+0x374>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d135      	bne.n	8009a10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099a4:	4b7b      	ldr	r3, [pc, #492]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <HAL_RCC_OscConfig+0x320>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	2b80      	cmp	r3, #128	; 0x80
 80099b6:	d001      	beq.n	80099bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e2c1      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099bc:	f7f9 feee 	bl	800379c <HAL_GetREVID>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d817      	bhi.n	80099fa <HAL_RCC_OscConfig+0x35e>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d108      	bne.n	80099e4 <HAL_RCC_OscConfig+0x348>
 80099d2:	4b70      	ldr	r3, [pc, #448]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80099da:	4a6e      	ldr	r2, [pc, #440]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 80099dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099e2:	e075      	b.n	8009ad0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099e4:	4b6b      	ldr	r3, [pc, #428]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	069b      	lsls	r3, r3, #26
 80099f2:	4968      	ldr	r1, [pc, #416]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099f8:	e06a      	b.n	8009ad0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099fa:	4b66      	ldr	r3, [pc, #408]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	061b      	lsls	r3, r3, #24
 8009a08:	4962      	ldr	r1, [pc, #392]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a0e:	e05f      	b.n	8009ad0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	69db      	ldr	r3, [r3, #28]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d042      	beq.n	8009a9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a18:	4b5e      	ldr	r3, [pc, #376]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a5d      	ldr	r2, [pc, #372]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a24:	f7f9 feae 	bl	8003784 <HAL_GetTick>
 8009a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a2a:	e008      	b.n	8009a3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a2c:	f7f9 feaa 	bl	8003784 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e280      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a3e:	4b55      	ldr	r3, [pc, #340]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0f0      	beq.n	8009a2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a4a:	f7f9 fea7 	bl	800379c <HAL_GetREVID>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d817      	bhi.n	8009a88 <HAL_RCC_OscConfig+0x3ec>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a1b      	ldr	r3, [r3, #32]
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d108      	bne.n	8009a72 <HAL_RCC_OscConfig+0x3d6>
 8009a60:	4b4c      	ldr	r3, [pc, #304]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a68:	4a4a      	ldr	r2, [pc, #296]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a6e:	6053      	str	r3, [r2, #4]
 8009a70:	e02e      	b.n	8009ad0 <HAL_RCC_OscConfig+0x434>
 8009a72:	4b48      	ldr	r3, [pc, #288]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	069b      	lsls	r3, r3, #26
 8009a80:	4944      	ldr	r1, [pc, #272]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	604b      	str	r3, [r1, #4]
 8009a86:	e023      	b.n	8009ad0 <HAL_RCC_OscConfig+0x434>
 8009a88:	4b42      	ldr	r3, [pc, #264]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	061b      	lsls	r3, r3, #24
 8009a96:	493f      	ldr	r1, [pc, #252]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60cb      	str	r3, [r1, #12]
 8009a9c:	e018      	b.n	8009ad0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a9e:	4b3d      	ldr	r3, [pc, #244]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a3c      	ldr	r2, [pc, #240]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aaa:	f7f9 fe6b 	bl	8003784 <HAL_GetTick>
 8009aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ab0:	e008      	b.n	8009ac4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ab2:	f7f9 fe67 	bl	8003784 <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d901      	bls.n	8009ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e23d      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ac4:	4b33      	ldr	r3, [pc, #204]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1f0      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0308 	and.w	r3, r3, #8
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d036      	beq.n	8009b4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d019      	beq.n	8009b18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ae4:	4b2b      	ldr	r3, [pc, #172]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ae8:	4a2a      	ldr	r2, [pc, #168]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009aea:	f043 0301 	orr.w	r3, r3, #1
 8009aee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af0:	f7f9 fe48 	bl	8003784 <HAL_GetTick>
 8009af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009af6:	e008      	b.n	8009b0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009af8:	f7f9 fe44 	bl	8003784 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d901      	bls.n	8009b0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e21a      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b0a:	4b22      	ldr	r3, [pc, #136]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0f0      	beq.n	8009af8 <HAL_RCC_OscConfig+0x45c>
 8009b16:	e018      	b.n	8009b4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b18:	4b1e      	ldr	r3, [pc, #120]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b1c:	4a1d      	ldr	r2, [pc, #116]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009b1e:	f023 0301 	bic.w	r3, r3, #1
 8009b22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b24:	f7f9 fe2e 	bl	8003784 <HAL_GetTick>
 8009b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b2a:	e008      	b.n	8009b3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b2c:	f7f9 fe2a 	bl	8003784 <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d901      	bls.n	8009b3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e200      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b3e:	4b15      	ldr	r3, [pc, #84]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1f0      	bne.n	8009b2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d039      	beq.n	8009bca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01c      	beq.n	8009b98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a0c      	ldr	r2, [pc, #48]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b6a:	f7f9 fe0b 	bl	8003784 <HAL_GetTick>
 8009b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b70:	e008      	b.n	8009b84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b72:	f7f9 fe07 	bl	8003784 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d901      	bls.n	8009b84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e1dd      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b84:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <HAL_RCC_OscConfig+0x4f8>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0f0      	beq.n	8009b72 <HAL_RCC_OscConfig+0x4d6>
 8009b90:	e01b      	b.n	8009bca <HAL_RCC_OscConfig+0x52e>
 8009b92:	bf00      	nop
 8009b94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b98:	4b9b      	ldr	r3, [pc, #620]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a9a      	ldr	r2, [pc, #616]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ba2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ba4:	f7f9 fdee 	bl	8003784 <HAL_GetTick>
 8009ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009baa:	e008      	b.n	8009bbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bac:	f7f9 fdea 	bl	8003784 <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e1c0      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bbe:	4b92      	ldr	r3, [pc, #584]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1f0      	bne.n	8009bac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 8081 	beq.w	8009cda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bd8:	4b8c      	ldr	r3, [pc, #560]	; (8009e0c <HAL_RCC_OscConfig+0x770>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a8b      	ldr	r2, [pc, #556]	; (8009e0c <HAL_RCC_OscConfig+0x770>)
 8009bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009be4:	f7f9 fdce 	bl	8003784 <HAL_GetTick>
 8009be8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bec:	f7f9 fdca 	bl	8003784 <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b64      	cmp	r3, #100	; 0x64
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e1a0      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bfe:	4b83      	ldr	r3, [pc, #524]	; (8009e0c <HAL_RCC_OscConfig+0x770>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0f0      	beq.n	8009bec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d106      	bne.n	8009c20 <HAL_RCC_OscConfig+0x584>
 8009c12:	4b7d      	ldr	r3, [pc, #500]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	4a7c      	ldr	r2, [pc, #496]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c18:	f043 0301 	orr.w	r3, r3, #1
 8009c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c1e:	e02d      	b.n	8009c7c <HAL_RCC_OscConfig+0x5e0>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10c      	bne.n	8009c42 <HAL_RCC_OscConfig+0x5a6>
 8009c28:	4b77      	ldr	r3, [pc, #476]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2c:	4a76      	ldr	r2, [pc, #472]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c2e:	f023 0301 	bic.w	r3, r3, #1
 8009c32:	6713      	str	r3, [r2, #112]	; 0x70
 8009c34:	4b74      	ldr	r3, [pc, #464]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c38:	4a73      	ldr	r2, [pc, #460]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c3a:	f023 0304 	bic.w	r3, r3, #4
 8009c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c40:	e01c      	b.n	8009c7c <HAL_RCC_OscConfig+0x5e0>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	2b05      	cmp	r3, #5
 8009c48:	d10c      	bne.n	8009c64 <HAL_RCC_OscConfig+0x5c8>
 8009c4a:	4b6f      	ldr	r3, [pc, #444]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	4a6e      	ldr	r2, [pc, #440]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c50:	f043 0304 	orr.w	r3, r3, #4
 8009c54:	6713      	str	r3, [r2, #112]	; 0x70
 8009c56:	4b6c      	ldr	r3, [pc, #432]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5a:	4a6b      	ldr	r2, [pc, #428]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c5c:	f043 0301 	orr.w	r3, r3, #1
 8009c60:	6713      	str	r3, [r2, #112]	; 0x70
 8009c62:	e00b      	b.n	8009c7c <HAL_RCC_OscConfig+0x5e0>
 8009c64:	4b68      	ldr	r3, [pc, #416]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c68:	4a67      	ldr	r2, [pc, #412]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c6a:	f023 0301 	bic.w	r3, r3, #1
 8009c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c70:	4b65      	ldr	r3, [pc, #404]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c74:	4a64      	ldr	r2, [pc, #400]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009c76:	f023 0304 	bic.w	r3, r3, #4
 8009c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d015      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c84:	f7f9 fd7e 	bl	8003784 <HAL_GetTick>
 8009c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c8a:	e00a      	b.n	8009ca2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c8c:	f7f9 fd7a 	bl	8003784 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e14e      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ca2:	4b59      	ldr	r3, [pc, #356]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0ee      	beq.n	8009c8c <HAL_RCC_OscConfig+0x5f0>
 8009cae:	e014      	b.n	8009cda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb0:	f7f9 fd68 	bl	8003784 <HAL_GetTick>
 8009cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cb6:	e00a      	b.n	8009cce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cb8:	f7f9 fd64 	bl	8003784 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e138      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cce:	4b4e      	ldr	r3, [pc, #312]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1ee      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 812d 	beq.w	8009f3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ce4:	4b48      	ldr	r3, [pc, #288]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cec:	2b18      	cmp	r3, #24
 8009cee:	f000 80bd 	beq.w	8009e6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	f040 809e 	bne.w	8009e38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cfc:	4b42      	ldr	r3, [pc, #264]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a41      	ldr	r2, [pc, #260]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d08:	f7f9 fd3c 	bl	8003784 <HAL_GetTick>
 8009d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d0e:	e008      	b.n	8009d22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d10:	f7f9 fd38 	bl	8003784 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e10e      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d22:	4b39      	ldr	r3, [pc, #228]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1f0      	bne.n	8009d10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d2e:	4b36      	ldr	r3, [pc, #216]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d32:	4b37      	ldr	r3, [pc, #220]	; (8009e10 <HAL_RCC_OscConfig+0x774>)
 8009d34:	4013      	ands	r3, r2
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d3e:	0112      	lsls	r2, r2, #4
 8009d40:	430a      	orrs	r2, r1
 8009d42:	4931      	ldr	r1, [pc, #196]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	628b      	str	r3, [r1, #40]	; 0x28
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d56:	3b01      	subs	r3, #1
 8009d58:	025b      	lsls	r3, r3, #9
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	3b01      	subs	r3, #1
 8009d64:	041b      	lsls	r3, r3, #16
 8009d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d70:	3b01      	subs	r3, #1
 8009d72:	061b      	lsls	r3, r3, #24
 8009d74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d78:	4923      	ldr	r1, [pc, #140]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d7e:	4b22      	ldr	r3, [pc, #136]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	4a21      	ldr	r2, [pc, #132]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d84:	f023 0301 	bic.w	r3, r3, #1
 8009d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d8a:	4b1f      	ldr	r3, [pc, #124]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d8e:	4b21      	ldr	r3, [pc, #132]	; (8009e14 <HAL_RCC_OscConfig+0x778>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d96:	00d2      	lsls	r2, r2, #3
 8009d98:	491b      	ldr	r1, [pc, #108]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d9e:	4b1a      	ldr	r3, [pc, #104]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da2:	f023 020c 	bic.w	r2, r3, #12
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	4917      	ldr	r1, [pc, #92]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009db0:	4b15      	ldr	r3, [pc, #84]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	f023 0202 	bic.w	r2, r3, #2
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dbc:	4912      	ldr	r1, [pc, #72]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009dc2:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	4a10      	ldr	r2, [pc, #64]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dce:	4b0e      	ldr	r3, [pc, #56]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	4a0d      	ldr	r2, [pc, #52]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009dda:	4b0b      	ldr	r3, [pc, #44]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	4a0a      	ldr	r2, [pc, #40]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009de6:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009dec:	f043 0301 	orr.w	r3, r3, #1
 8009df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009df2:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a04      	ldr	r2, [pc, #16]	; (8009e08 <HAL_RCC_OscConfig+0x76c>)
 8009df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dfe:	f7f9 fcc1 	bl	8003784 <HAL_GetTick>
 8009e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e04:	e011      	b.n	8009e2a <HAL_RCC_OscConfig+0x78e>
 8009e06:	bf00      	nop
 8009e08:	58024400 	.word	0x58024400
 8009e0c:	58024800 	.word	0x58024800
 8009e10:	fffffc0c 	.word	0xfffffc0c
 8009e14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e18:	f7f9 fcb4 	bl	8003784 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e08a      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e2a:	4b47      	ldr	r3, [pc, #284]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0f0      	beq.n	8009e18 <HAL_RCC_OscConfig+0x77c>
 8009e36:	e082      	b.n	8009f3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e38:	4b43      	ldr	r3, [pc, #268]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a42      	ldr	r2, [pc, #264]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e44:	f7f9 fc9e 	bl	8003784 <HAL_GetTick>
 8009e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e4c:	f7f9 fc9a 	bl	8003784 <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e070      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e5e:	4b3a      	ldr	r3, [pc, #232]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1f0      	bne.n	8009e4c <HAL_RCC_OscConfig+0x7b0>
 8009e6a:	e068      	b.n	8009f3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e6c:	4b36      	ldr	r3, [pc, #216]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e72:	4b35      	ldr	r3, [pc, #212]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d031      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f003 0203 	and.w	r2, r3, #3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d12a      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	091b      	lsrs	r3, r3, #4
 8009e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d122      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d11a      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	0a5b      	lsrs	r3, r3, #9
 8009eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d111      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	0c1b      	lsrs	r3, r3, #16
 8009ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d108      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	0e1b      	lsrs	r3, r3, #24
 8009ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ede:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d001      	beq.n	8009ee8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e02b      	b.n	8009f40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009ee8:	4b17      	ldr	r3, [pc, #92]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eec:	08db      	lsrs	r3, r3, #3
 8009eee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ef2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d01f      	beq.n	8009f3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009efe:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	4a11      	ldr	r2, [pc, #68]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009f04:	f023 0301 	bic.w	r3, r3, #1
 8009f08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f0a:	f7f9 fc3b 	bl	8003784 <HAL_GetTick>
 8009f0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f10:	bf00      	nop
 8009f12:	f7f9 fc37 	bl	8003784 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d0f9      	beq.n	8009f12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f22:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <HAL_RCC_OscConfig+0x8b0>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f2a:	00d2      	lsls	r2, r2, #3
 8009f2c:	4906      	ldr	r1, [pc, #24]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4a04      	ldr	r2, [pc, #16]	; (8009f48 <HAL_RCC_OscConfig+0x8ac>)
 8009f38:	f043 0301 	orr.w	r3, r3, #1
 8009f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3730      	adds	r7, #48	; 0x30
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	58024400 	.word	0x58024400
 8009f4c:	ffff0007 	.word	0xffff0007

08009f50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e19c      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f64:	4b8a      	ldr	r3, [pc, #552]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d910      	bls.n	8009f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f72:	4b87      	ldr	r3, [pc, #540]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f023 020f 	bic.w	r2, r3, #15
 8009f7a:	4985      	ldr	r1, [pc, #532]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f82:	4b83      	ldr	r3, [pc, #524]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 030f 	and.w	r3, r3, #15
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d001      	beq.n	8009f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e184      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d010      	beq.n	8009fc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	4b7b      	ldr	r3, [pc, #492]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d908      	bls.n	8009fc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fb0:	4b78      	ldr	r3, [pc, #480]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	4975      	ldr	r1, [pc, #468]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0308 	and.w	r3, r3, #8
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d010      	beq.n	8009ff0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695a      	ldr	r2, [r3, #20]
 8009fd2:	4b70      	ldr	r3, [pc, #448]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d908      	bls.n	8009ff0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fde:	4b6d      	ldr	r3, [pc, #436]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	496a      	ldr	r1, [pc, #424]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d010      	beq.n	800a01e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	699a      	ldr	r2, [r3, #24]
 800a000:	4b64      	ldr	r3, [pc, #400]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a008:	429a      	cmp	r2, r3
 800a00a:	d908      	bls.n	800a01e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a00c:	4b61      	ldr	r3, [pc, #388]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	495e      	ldr	r1, [pc, #376]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0320 	and.w	r3, r3, #32
 800a026:	2b00      	cmp	r3, #0
 800a028:	d010      	beq.n	800a04c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	69da      	ldr	r2, [r3, #28]
 800a02e:	4b59      	ldr	r3, [pc, #356]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a036:	429a      	cmp	r2, r3
 800a038:	d908      	bls.n	800a04c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a03a:	4b56      	ldr	r3, [pc, #344]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	4953      	ldr	r1, [pc, #332]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a048:	4313      	orrs	r3, r2
 800a04a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0302 	and.w	r3, r3, #2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d010      	beq.n	800a07a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	4b4d      	ldr	r3, [pc, #308]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	f003 030f 	and.w	r3, r3, #15
 800a064:	429a      	cmp	r2, r3
 800a066:	d908      	bls.n	800a07a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a068:	4b4a      	ldr	r3, [pc, #296]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	f023 020f 	bic.w	r2, r3, #15
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	4947      	ldr	r1, [pc, #284]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a076:	4313      	orrs	r3, r2
 800a078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	d055      	beq.n	800a132 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a086:	4b43      	ldr	r3, [pc, #268]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	4940      	ldr	r1, [pc, #256]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a094:	4313      	orrs	r3, r2
 800a096:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d107      	bne.n	800a0b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0a0:	4b3c      	ldr	r3, [pc, #240]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d121      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e0f6      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d107      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0b8:	4b36      	ldr	r3, [pc, #216]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d115      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e0ea      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d107      	bne.n	800a0e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0d0:	4b30      	ldr	r3, [pc, #192]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0de      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0e0:	4b2c      	ldr	r3, [pc, #176]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e0d6      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0f0:	4b28      	ldr	r3, [pc, #160]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	f023 0207 	bic.w	r2, r3, #7
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	4925      	ldr	r1, [pc, #148]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a102:	f7f9 fb3f 	bl	8003784 <HAL_GetTick>
 800a106:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a108:	e00a      	b.n	800a120 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a10a:	f7f9 fb3b 	bl	8003784 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	f241 3288 	movw	r2, #5000	; 0x1388
 800a118:	4293      	cmp	r3, r2
 800a11a:	d901      	bls.n	800a120 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e0be      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a120:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	429a      	cmp	r2, r3
 800a130:	d1eb      	bne.n	800a10a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d010      	beq.n	800a160 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	4b14      	ldr	r3, [pc, #80]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d208      	bcs.n	800a160 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a14e:	4b11      	ldr	r3, [pc, #68]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	f023 020f 	bic.w	r2, r3, #15
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	490e      	ldr	r1, [pc, #56]	; (800a194 <HAL_RCC_ClockConfig+0x244>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a160:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 030f 	and.w	r3, r3, #15
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d214      	bcs.n	800a198 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a16e:	4b08      	ldr	r3, [pc, #32]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f023 020f 	bic.w	r2, r3, #15
 800a176:	4906      	ldr	r1, [pc, #24]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a17e:	4b04      	ldr	r3, [pc, #16]	; (800a190 <HAL_RCC_ClockConfig+0x240>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d005      	beq.n	800a198 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e086      	b.n	800a29e <HAL_RCC_ClockConfig+0x34e>
 800a190:	52002000 	.word	0x52002000
 800a194:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d010      	beq.n	800a1c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691a      	ldr	r2, [r3, #16]
 800a1a8:	4b3f      	ldr	r3, [pc, #252]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d208      	bcs.n	800a1c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1b4:	4b3c      	ldr	r3, [pc, #240]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	4939      	ldr	r1, [pc, #228]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0308 	and.w	r3, r3, #8
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d010      	beq.n	800a1f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695a      	ldr	r2, [r3, #20]
 800a1d6:	4b34      	ldr	r3, [pc, #208]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d208      	bcs.n	800a1f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1e2:	4b31      	ldr	r3, [pc, #196]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	492e      	ldr	r1, [pc, #184]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0310 	and.w	r3, r3, #16
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d010      	beq.n	800a222 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699a      	ldr	r2, [r3, #24]
 800a204:	4b28      	ldr	r3, [pc, #160]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d208      	bcs.n	800a222 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a210:	4b25      	ldr	r3, [pc, #148]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	4922      	ldr	r1, [pc, #136]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d010      	beq.n	800a250 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	69da      	ldr	r2, [r3, #28]
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d208      	bcs.n	800a250 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a23e:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	4917      	ldr	r1, [pc, #92]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a250:	f000 f834 	bl	800a2bc <HAL_RCC_GetSysClockFreq>
 800a254:	4602      	mov	r2, r0
 800a256:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	0a1b      	lsrs	r3, r3, #8
 800a25c:	f003 030f 	and.w	r3, r3, #15
 800a260:	4912      	ldr	r1, [pc, #72]	; (800a2ac <HAL_RCC_ClockConfig+0x35c>)
 800a262:	5ccb      	ldrb	r3, [r1, r3]
 800a264:	f003 031f 	and.w	r3, r3, #31
 800a268:	fa22 f303 	lsr.w	r3, r2, r3
 800a26c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a26e:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <HAL_RCC_ClockConfig+0x358>)
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f003 030f 	and.w	r3, r3, #15
 800a276:	4a0d      	ldr	r2, [pc, #52]	; (800a2ac <HAL_RCC_ClockConfig+0x35c>)
 800a278:	5cd3      	ldrb	r3, [r2, r3]
 800a27a:	f003 031f 	and.w	r3, r3, #31
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	fa22 f303 	lsr.w	r3, r2, r3
 800a284:	4a0a      	ldr	r2, [pc, #40]	; (800a2b0 <HAL_RCC_ClockConfig+0x360>)
 800a286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a288:	4a0a      	ldr	r2, [pc, #40]	; (800a2b4 <HAL_RCC_ClockConfig+0x364>)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a28e:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <HAL_RCC_ClockConfig+0x368>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4618      	mov	r0, r3
 800a294:	f7f8 ffae 	bl	80031f4 <HAL_InitTick>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	58024400 	.word	0x58024400
 800a2ac:	0801667c 	.word	0x0801667c
 800a2b0:	2400008c 	.word	0x2400008c
 800a2b4:	24000088 	.word	0x24000088
 800a2b8:	24000090 	.word	0x24000090

0800a2bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b089      	sub	sp, #36	; 0x24
 800a2c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2c2:	4bb3      	ldr	r3, [pc, #716]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ca:	2b18      	cmp	r3, #24
 800a2cc:	f200 8155 	bhi.w	800a57a <HAL_RCC_GetSysClockFreq+0x2be>
 800a2d0:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a33d 	.word	0x0800a33d
 800a2dc:	0800a57b 	.word	0x0800a57b
 800a2e0:	0800a57b 	.word	0x0800a57b
 800a2e4:	0800a57b 	.word	0x0800a57b
 800a2e8:	0800a57b 	.word	0x0800a57b
 800a2ec:	0800a57b 	.word	0x0800a57b
 800a2f0:	0800a57b 	.word	0x0800a57b
 800a2f4:	0800a57b 	.word	0x0800a57b
 800a2f8:	0800a363 	.word	0x0800a363
 800a2fc:	0800a57b 	.word	0x0800a57b
 800a300:	0800a57b 	.word	0x0800a57b
 800a304:	0800a57b 	.word	0x0800a57b
 800a308:	0800a57b 	.word	0x0800a57b
 800a30c:	0800a57b 	.word	0x0800a57b
 800a310:	0800a57b 	.word	0x0800a57b
 800a314:	0800a57b 	.word	0x0800a57b
 800a318:	0800a369 	.word	0x0800a369
 800a31c:	0800a57b 	.word	0x0800a57b
 800a320:	0800a57b 	.word	0x0800a57b
 800a324:	0800a57b 	.word	0x0800a57b
 800a328:	0800a57b 	.word	0x0800a57b
 800a32c:	0800a57b 	.word	0x0800a57b
 800a330:	0800a57b 	.word	0x0800a57b
 800a334:	0800a57b 	.word	0x0800a57b
 800a338:	0800a36f 	.word	0x0800a36f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a33c:	4b94      	ldr	r3, [pc, #592]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0320 	and.w	r3, r3, #32
 800a344:	2b00      	cmp	r3, #0
 800a346:	d009      	beq.n	800a35c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a348:	4b91      	ldr	r3, [pc, #580]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	08db      	lsrs	r3, r3, #3
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	4a90      	ldr	r2, [pc, #576]	; (800a594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a354:	fa22 f303 	lsr.w	r3, r2, r3
 800a358:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a35a:	e111      	b.n	800a580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a35c:	4b8d      	ldr	r3, [pc, #564]	; (800a594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a35e:	61bb      	str	r3, [r7, #24]
      break;
 800a360:	e10e      	b.n	800a580 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a362:	4b8d      	ldr	r3, [pc, #564]	; (800a598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a364:	61bb      	str	r3, [r7, #24]
      break;
 800a366:	e10b      	b.n	800a580 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a368:	4b8c      	ldr	r3, [pc, #560]	; (800a59c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a36a:	61bb      	str	r3, [r7, #24]
      break;
 800a36c:	e108      	b.n	800a580 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a36e:	4b88      	ldr	r3, [pc, #544]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a378:	4b85      	ldr	r3, [pc, #532]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37c:	091b      	lsrs	r3, r3, #4
 800a37e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a382:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a384:	4b82      	ldr	r3, [pc, #520]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a38e:	4b80      	ldr	r3, [pc, #512]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a392:	08db      	lsrs	r3, r3, #3
 800a394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 80e1 	beq.w	800a574 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	f000 8083 	beq.w	800a4c0 <HAL_RCC_GetSysClockFreq+0x204>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	f200 80a1 	bhi.w	800a504 <HAL_RCC_GetSysClockFreq+0x248>
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <HAL_RCC_GetSysClockFreq+0x114>
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d056      	beq.n	800a47c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a3ce:	e099      	b.n	800a504 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3d0:	4b6f      	ldr	r3, [pc, #444]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0320 	and.w	r3, r3, #32
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02d      	beq.n	800a438 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3dc:	4b6c      	ldr	r3, [pc, #432]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	08db      	lsrs	r3, r3, #3
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	4a6b      	ldr	r2, [pc, #428]	; (800a594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	ee07 3a90 	vmov	s15, r3
 800a3f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a406:	4b62      	ldr	r3, [pc, #392]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a416:	ed97 6a02 	vldr	s12, [r7, #8]
 800a41a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a432:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a436:	e087      	b.n	800a548 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	ee07 3a90 	vmov	s15, r3
 800a43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a442:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a5a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44a:	4b51      	ldr	r3, [pc, #324]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a45e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a47a:	e065      	b.n	800a548 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a5a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48e:	4b40      	ldr	r3, [pc, #256]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4be:	e043      	b.n	800a548 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a5ac <HAL_RCC_GetSysClockFreq+0x2f0>
 800a4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d2:	4b2f      	ldr	r3, [pc, #188]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a502:	e021      	b.n	800a548 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a5a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a516:	4b1e      	ldr	r3, [pc, #120]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a526:	ed97 6a02 	vldr	s12, [r7, #8]
 800a52a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a546:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a548:	4b11      	ldr	r3, [pc, #68]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54c:	0a5b      	lsrs	r3, r3, #9
 800a54e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a552:	3301      	adds	r3, #1
 800a554:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	ee07 3a90 	vmov	s15, r3
 800a55c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a560:	edd7 6a07 	vldr	s13, [r7, #28]
 800a564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a56c:	ee17 3a90 	vmov	r3, s15
 800a570:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a572:	e005      	b.n	800a580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a574:	2300      	movs	r3, #0
 800a576:	61bb      	str	r3, [r7, #24]
      break;
 800a578:	e002      	b.n	800a580 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a57c:	61bb      	str	r3, [r7, #24]
      break;
 800a57e:	bf00      	nop
  }

  return sysclockfreq;
 800a580:	69bb      	ldr	r3, [r7, #24]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3724      	adds	r7, #36	; 0x24
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	58024400 	.word	0x58024400
 800a594:	03d09000 	.word	0x03d09000
 800a598:	003d0900 	.word	0x003d0900
 800a59c:	017d7840 	.word	0x017d7840
 800a5a0:	46000000 	.word	0x46000000
 800a5a4:	4c742400 	.word	0x4c742400
 800a5a8:	4a742400 	.word	0x4a742400
 800a5ac:	4bbebc20 	.word	0x4bbebc20

0800a5b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5b6:	f7ff fe81 	bl	800a2bc <HAL_RCC_GetSysClockFreq>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	4b10      	ldr	r3, [pc, #64]	; (800a600 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	0a1b      	lsrs	r3, r3, #8
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	490f      	ldr	r1, [pc, #60]	; (800a604 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5c8:	5ccb      	ldrb	r3, [r1, r3]
 800a5ca:	f003 031f 	and.w	r3, r3, #31
 800a5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	; (800a600 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	f003 030f 	and.w	r3, r3, #15
 800a5dc:	4a09      	ldr	r2, [pc, #36]	; (800a604 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5de:	5cd3      	ldrb	r3, [r2, r3]
 800a5e0:	f003 031f 	and.w	r3, r3, #31
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ea:	4a07      	ldr	r2, [pc, #28]	; (800a608 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5ee:	4a07      	ldr	r2, [pc, #28]	; (800a60c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a5f4:	4b04      	ldr	r3, [pc, #16]	; (800a608 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	58024400 	.word	0x58024400
 800a604:	0801667c 	.word	0x0801667c
 800a608:	2400008c 	.word	0x2400008c
 800a60c:	24000088 	.word	0x24000088

0800a610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a614:	f7ff ffcc 	bl	800a5b0 <HAL_RCC_GetHCLKFreq>
 800a618:	4602      	mov	r2, r0
 800a61a:	4b06      	ldr	r3, [pc, #24]	; (800a634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	091b      	lsrs	r3, r3, #4
 800a620:	f003 0307 	and.w	r3, r3, #7
 800a624:	4904      	ldr	r1, [pc, #16]	; (800a638 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a626:	5ccb      	ldrb	r3, [r1, r3]
 800a628:	f003 031f 	and.w	r3, r3, #31
 800a62c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a630:	4618      	mov	r0, r3
 800a632:	bd80      	pop	{r7, pc}
 800a634:	58024400 	.word	0x58024400
 800a638:	0801667c 	.word	0x0801667c

0800a63c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a640:	f7ff ffb6 	bl	800a5b0 <HAL_RCC_GetHCLKFreq>
 800a644:	4602      	mov	r2, r0
 800a646:	4b06      	ldr	r3, [pc, #24]	; (800a660 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	4904      	ldr	r1, [pc, #16]	; (800a664 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a652:	5ccb      	ldrb	r3, [r1, r3]
 800a654:	f003 031f 	and.w	r3, r3, #31
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	58024400 	.word	0x58024400
 800a664:	0801667c 	.word	0x0801667c

0800a668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	223f      	movs	r2, #63	; 0x3f
 800a676:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a678:	4b1a      	ldr	r3, [pc, #104]	; (800a6e4 <HAL_RCC_GetClockConfig+0x7c>)
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	f003 0207 	and.w	r2, r3, #7
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a684:	4b17      	ldr	r3, [pc, #92]	; (800a6e4 <HAL_RCC_GetClockConfig+0x7c>)
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a690:	4b14      	ldr	r3, [pc, #80]	; (800a6e4 <HAL_RCC_GetClockConfig+0x7c>)
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f003 020f 	and.w	r2, r3, #15
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a69c:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <HAL_RCC_GetClockConfig+0x7c>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a6a8:	4b0e      	ldr	r3, [pc, #56]	; (800a6e4 <HAL_RCC_GetClockConfig+0x7c>)
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <HAL_RCC_GetClockConfig+0x7c>)
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a6c0:	4b08      	ldr	r3, [pc, #32]	; (800a6e4 <HAL_RCC_GetClockConfig+0x7c>)
 800a6c2:	6a1b      	ldr	r3, [r3, #32]
 800a6c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a6cc:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <HAL_RCC_GetClockConfig+0x80>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 020f 	and.w	r2, r3, #15
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	601a      	str	r2, [r3, #0]
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	58024400 	.word	0x58024400
 800a6e8:	52002000 	.word	0x52002000

0800a6ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6f0:	b0ca      	sub	sp, #296	; 0x128
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6fe:	2300      	movs	r3, #0
 800a700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a710:	2500      	movs	r5, #0
 800a712:	ea54 0305 	orrs.w	r3, r4, r5
 800a716:	d049      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a71e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a722:	d02f      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a728:	d828      	bhi.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a72a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a72e:	d01a      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a734:	d822      	bhi.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a73a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73e:	d007      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a740:	e01c      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a742:	4bb8      	ldr	r3, [pc, #736]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	4ab7      	ldr	r2, [pc, #732]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a74c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a74e:	e01a      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a754:	3308      	adds	r3, #8
 800a756:	2102      	movs	r1, #2
 800a758:	4618      	mov	r0, r3
 800a75a:	f002 fb61 	bl	800ce20 <RCCEx_PLL2_Config>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a764:	e00f      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a76a:	3328      	adds	r3, #40	; 0x28
 800a76c:	2102      	movs	r1, #2
 800a76e:	4618      	mov	r0, r3
 800a770:	f002 fc08 	bl	800cf84 <RCCEx_PLL3_Config>
 800a774:	4603      	mov	r3, r0
 800a776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a77a:	e004      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a782:	e000      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a784:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10a      	bne.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a78e:	4ba5      	ldr	r3, [pc, #660]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a792:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a79c:	4aa1      	ldr	r2, [pc, #644]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	6513      	str	r3, [r2, #80]	; 0x50
 800a7a2:	e003      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a7b8:	f04f 0900 	mov.w	r9, #0
 800a7bc:	ea58 0309 	orrs.w	r3, r8, r9
 800a7c0:	d047      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d82a      	bhi.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a7cc:	a201      	add	r2, pc, #4	; (adr r2, 800a7d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d2:	bf00      	nop
 800a7d4:	0800a7e9 	.word	0x0800a7e9
 800a7d8:	0800a7f7 	.word	0x0800a7f7
 800a7dc:	0800a80d 	.word	0x0800a80d
 800a7e0:	0800a82b 	.word	0x0800a82b
 800a7e4:	0800a82b 	.word	0x0800a82b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7e8:	4b8e      	ldr	r3, [pc, #568]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	4a8d      	ldr	r2, [pc, #564]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7f4:	e01a      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f002 fb0e 	bl	800ce20 <RCCEx_PLL2_Config>
 800a804:	4603      	mov	r3, r0
 800a806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a80a:	e00f      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a810:	3328      	adds	r3, #40	; 0x28
 800a812:	2100      	movs	r1, #0
 800a814:	4618      	mov	r0, r3
 800a816:	f002 fbb5 	bl	800cf84 <RCCEx_PLL3_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a820:	e004      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a828:	e000      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a82a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a82c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a834:	4b7b      	ldr	r3, [pc, #492]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a838:	f023 0107 	bic.w	r1, r3, #7
 800a83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a842:	4a78      	ldr	r2, [pc, #480]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a844:	430b      	orrs	r3, r1
 800a846:	6513      	str	r3, [r2, #80]	; 0x50
 800a848:	e003      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a84e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a85e:	f04f 0b00 	mov.w	fp, #0
 800a862:	ea5a 030b 	orrs.w	r3, sl, fp
 800a866:	d04c      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a872:	d030      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a878:	d829      	bhi.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a87a:	2bc0      	cmp	r3, #192	; 0xc0
 800a87c:	d02d      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a87e:	2bc0      	cmp	r3, #192	; 0xc0
 800a880:	d825      	bhi.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d018      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a886:	2b80      	cmp	r3, #128	; 0x80
 800a888:	d821      	bhi.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a88e:	2b40      	cmp	r3, #64	; 0x40
 800a890:	d007      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a892:	e01c      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a894:	4b63      	ldr	r3, [pc, #396]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a898:	4a62      	ldr	r2, [pc, #392]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a89a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a89e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8a0:	e01c      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f002 fab8 	bl	800ce20 <RCCEx_PLL2_Config>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8b6:	e011      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8bc:	3328      	adds	r3, #40	; 0x28
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f002 fb5f 	bl	800cf84 <RCCEx_PLL3_Config>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8cc:	e006      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8d4:	e002      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a8d6:	bf00      	nop
 800a8d8:	e000      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a8da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10a      	bne.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a8e4:	4b4f      	ldr	r3, [pc, #316]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8f2:	4a4c      	ldr	r2, [pc, #304]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	6513      	str	r3, [r2, #80]	; 0x50
 800a8f8:	e003      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a90e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a912:	2300      	movs	r3, #0
 800a914:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a918:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a91c:	460b      	mov	r3, r1
 800a91e:	4313      	orrs	r3, r2
 800a920:	d053      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a92a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a92e:	d035      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a934:	d82e      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a936:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a93a:	d031      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a93c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a940:	d828      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a946:	d01a      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a94c:	d822      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a956:	d007      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a958:	e01c      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a95a:	4b32      	ldr	r3, [pc, #200]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95e:	4a31      	ldr	r2, [pc, #196]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a964:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a966:	e01c      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96c:	3308      	adds	r3, #8
 800a96e:	2100      	movs	r1, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f002 fa55 	bl	800ce20 <RCCEx_PLL2_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a97c:	e011      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a982:	3328      	adds	r3, #40	; 0x28
 800a984:	2100      	movs	r1, #0
 800a986:	4618      	mov	r0, r3
 800a988:	f002 fafc 	bl	800cf84 <RCCEx_PLL3_Config>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a992:	e006      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a99a:	e002      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a99c:	bf00      	nop
 800a99e:	e000      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a9a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10b      	bne.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a9aa:	4b1e      	ldr	r3, [pc, #120]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9ba:	4a1a      	ldr	r2, [pc, #104]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	6593      	str	r3, [r2, #88]	; 0x58
 800a9c0:	e003      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a9d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a9e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	d056      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a9f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f6:	d038      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a9f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9fc:	d831      	bhi.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a9fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa02:	d034      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aa04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa08:	d82b      	bhi.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa0e:	d01d      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aa10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa14:	d825      	bhi.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d006      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aa1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa1e:	d00a      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aa20:	e01f      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa22:	bf00      	nop
 800aa24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa28:	4ba2      	ldr	r3, [pc, #648]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2c:	4aa1      	ldr	r2, [pc, #644]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa34:	e01c      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f002 f9ee 	bl	800ce20 <RCCEx_PLL2_Config>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa4a:	e011      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa50:	3328      	adds	r3, #40	; 0x28
 800aa52:	2100      	movs	r1, #0
 800aa54:	4618      	mov	r0, r3
 800aa56:	f002 fa95 	bl	800cf84 <RCCEx_PLL3_Config>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa60:	e006      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa68:	e002      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa6a:	bf00      	nop
 800aa6c:	e000      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa78:	4b8e      	ldr	r3, [pc, #568]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa88:	4a8a      	ldr	r2, [pc, #552]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	6593      	str	r3, [r2, #88]	; 0x58
 800aa8e:	e003      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aaa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aaae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aab2:	460b      	mov	r3, r1
 800aab4:	4313      	orrs	r3, r2
 800aab6:	d03a      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800aab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aabc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aabe:	2b30      	cmp	r3, #48	; 0x30
 800aac0:	d01f      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aac2:	2b30      	cmp	r3, #48	; 0x30
 800aac4:	d819      	bhi.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	d00c      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	d815      	bhi.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d019      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d111      	bne.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad6:	4b77      	ldr	r3, [pc, #476]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aada:	4a76      	ldr	r2, [pc, #472]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aadc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aae2:	e011      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae8:	3308      	adds	r3, #8
 800aaea:	2102      	movs	r1, #2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f002 f997 	bl	800ce20 <RCCEx_PLL2_Config>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aaf8:	e006      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab00:	e002      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab02:	bf00      	nop
 800ab04:	e000      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10a      	bne.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab10:	4b68      	ldr	r3, [pc, #416]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ab18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab1e:	4a65      	ldr	r2, [pc, #404]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab20:	430b      	orrs	r3, r1
 800ab22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab24:	e003      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ab3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	d051      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab58:	d035      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab5e:	d82e      	bhi.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab64:	d031      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab6a:	d828      	bhi.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab70:	d01a      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ab72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab76:	d822      	bhi.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ab7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab80:	d007      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ab82:	e01c      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab84:	4b4b      	ldr	r3, [pc, #300]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	4a4a      	ldr	r2, [pc, #296]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab90:	e01c      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab96:	3308      	adds	r3, #8
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f002 f940 	bl	800ce20 <RCCEx_PLL2_Config>
 800aba0:	4603      	mov	r3, r0
 800aba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aba6:	e011      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abac:	3328      	adds	r3, #40	; 0x28
 800abae:	2100      	movs	r1, #0
 800abb0:	4618      	mov	r0, r3
 800abb2:	f002 f9e7 	bl	800cf84 <RCCEx_PLL3_Config>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abbc:	e006      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abc4:	e002      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800abc6:	bf00      	nop
 800abc8:	e000      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800abca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abd4:	4b37      	ldr	r3, [pc, #220]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800abdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe2:	4a34      	ldr	r2, [pc, #208]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abe4:	430b      	orrs	r3, r1
 800abe6:	6513      	str	r3, [r2, #80]	; 0x50
 800abe8:	e003      	b.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800abfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac02:	2300      	movs	r3, #0
 800ac04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	d056      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ac12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac1c:	d033      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ac1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac22:	d82c      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac28:	d02f      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ac2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac2e:	d826      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac34:	d02b      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ac36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac3a:	d820      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac40:	d012      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ac42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac46:	d81a      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d022      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ac4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac50:	d115      	bne.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac56:	3308      	adds	r3, #8
 800ac58:	2101      	movs	r1, #1
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f002 f8e0 	bl	800ce20 <RCCEx_PLL2_Config>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac66:	e015      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac6c:	3328      	adds	r3, #40	; 0x28
 800ac6e:	2101      	movs	r1, #1
 800ac70:	4618      	mov	r0, r3
 800ac72:	f002 f987 	bl	800cf84 <RCCEx_PLL3_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac7c:	e00a      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac84:	e006      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac86:	bf00      	nop
 800ac88:	e004      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac8a:	bf00      	nop
 800ac8c:	e002      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac8e:	bf00      	nop
 800ac90:	e000      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10d      	bne.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acaa:	4a02      	ldr	r2, [pc, #8]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acac:	430b      	orrs	r3, r1
 800acae:	6513      	str	r3, [r2, #80]	; 0x50
 800acb0:	e006      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800accc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acd0:	2300      	movs	r3, #0
 800acd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800acda:	460b      	mov	r3, r1
 800acdc:	4313      	orrs	r3, r2
 800acde:	d055      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ace0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acec:	d033      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800acee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acf2:	d82c      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800acf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf8:	d02f      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800acfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acfe:	d826      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad04:	d02b      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ad06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad0a:	d820      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad10:	d012      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ad12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad16:	d81a      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d022      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ad1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad20:	d115      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad26:	3308      	adds	r3, #8
 800ad28:	2101      	movs	r1, #1
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f002 f878 	bl	800ce20 <RCCEx_PLL2_Config>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad36:	e015      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3c:	3328      	adds	r3, #40	; 0x28
 800ad3e:	2101      	movs	r1, #1
 800ad40:	4618      	mov	r0, r3
 800ad42:	f002 f91f 	bl	800cf84 <RCCEx_PLL3_Config>
 800ad46:	4603      	mov	r3, r0
 800ad48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad4c:	e00a      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad54:	e006      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad56:	bf00      	nop
 800ad58:	e004      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad5a:	bf00      	nop
 800ad5c:	e002      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad5e:	bf00      	nop
 800ad60:	e000      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10b      	bne.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad6c:	4ba3      	ldr	r3, [pc, #652]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad70:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad7c:	4a9f      	ldr	r2, [pc, #636]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	6593      	str	r3, [r2, #88]	; 0x58
 800ad82:	e003      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ada2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ada6:	460b      	mov	r3, r1
 800ada8:	4313      	orrs	r3, r2
 800adaa:	d037      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800adac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb6:	d00e      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800adb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adbc:	d816      	bhi.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x700>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d018      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800adc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc6:	d111      	bne.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc8:	4b8c      	ldr	r3, [pc, #560]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	4a8b      	ldr	r2, [pc, #556]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800add2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800add4:	e00f      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adda:	3308      	adds	r3, #8
 800addc:	2101      	movs	r1, #1
 800adde:	4618      	mov	r0, r3
 800ade0:	f002 f81e 	bl	800ce20 <RCCEx_PLL2_Config>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800adea:	e004      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adf2:	e000      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800adf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800adfe:	4b7f      	ldr	r3, [pc, #508]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae0c:	4a7b      	ldr	r2, [pc, #492]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	6513      	str	r3, [r2, #80]	; 0x50
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae36:	460b      	mov	r3, r1
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	d039      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d81c      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ae46:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800ae89 	.word	0x0800ae89
 800ae50:	0800ae5d 	.word	0x0800ae5d
 800ae54:	0800ae6b 	.word	0x0800ae6b
 800ae58:	0800ae89 	.word	0x0800ae89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae5c:	4b67      	ldr	r3, [pc, #412]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	4a66      	ldr	r2, [pc, #408]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae68:	e00f      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6e:	3308      	adds	r3, #8
 800ae70:	2102      	movs	r1, #2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 ffd4 	bl	800ce20 <RCCEx_PLL2_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae7e:	e004      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae86:	e000      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ae88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae92:	4b5a      	ldr	r3, [pc, #360]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae96:	f023 0103 	bic.w	r1, r3, #3
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aea0:	4a56      	ldr	r2, [pc, #344]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aea2:	430b      	orrs	r3, r1
 800aea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aea6:	e003      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aeb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800aebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aec0:	2300      	movs	r3, #0
 800aec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aec6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	f000 809f 	beq.w	800b010 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aed2:	4b4b      	ldr	r3, [pc, #300]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a4a      	ldr	r2, [pc, #296]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aedc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aede:	f7f8 fc51 	bl	8003784 <HAL_GetTick>
 800aee2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aee6:	e00b      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aee8:	f7f8 fc4c 	bl	8003784 <HAL_GetTick>
 800aeec:	4602      	mov	r2, r0
 800aeee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b64      	cmp	r3, #100	; 0x64
 800aef6:	d903      	bls.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aefe:	e005      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af00:	4b3f      	ldr	r3, [pc, #252]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d0ed      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800af0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af10:	2b00      	cmp	r3, #0
 800af12:	d179      	bne.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af14:	4b39      	ldr	r3, [pc, #228]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af20:	4053      	eors	r3, r2
 800af22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af26:	2b00      	cmp	r3, #0
 800af28:	d015      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af2a:	4b34      	ldr	r3, [pc, #208]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af36:	4b31      	ldr	r3, [pc, #196]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af3a:	4a30      	ldr	r2, [pc, #192]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af42:	4b2e      	ldr	r3, [pc, #184]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af46:	4a2d      	ldr	r2, [pc, #180]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af4e:	4a2b      	ldr	r2, [pc, #172]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af62:	d118      	bne.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af64:	f7f8 fc0e 	bl	8003784 <HAL_GetTick>
 800af68:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af6c:	e00d      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af6e:	f7f8 fc09 	bl	8003784 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af78:	1ad2      	subs	r2, r2, r3
 800af7a:	f241 3388 	movw	r3, #5000	; 0x1388
 800af7e:	429a      	cmp	r2, r3
 800af80:	d903      	bls.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800af88:	e005      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af8a:	4b1c      	ldr	r3, [pc, #112]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0eb      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800af96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d129      	bne.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afae:	d10e      	bne.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800afb0:	4b12      	ldr	r3, [pc, #72]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800afb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afc0:	091a      	lsrs	r2, r3, #4
 800afc2:	4b10      	ldr	r3, [pc, #64]	; (800b004 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	4a0d      	ldr	r2, [pc, #52]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afc8:	430b      	orrs	r3, r1
 800afca:	6113      	str	r3, [r2, #16]
 800afcc:	e005      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800afce:	4b0b      	ldr	r3, [pc, #44]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	4a0a      	ldr	r2, [pc, #40]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afd8:	6113      	str	r3, [r2, #16]
 800afda:	4b08      	ldr	r3, [pc, #32]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afdc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800afde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afea:	4a04      	ldr	r2, [pc, #16]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afec:	430b      	orrs	r3, r1
 800afee:	6713      	str	r3, [r2, #112]	; 0x70
 800aff0:	e00e      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800affa:	e009      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800affc:	58024400 	.word	0x58024400
 800b000:	58024800 	.word	0x58024800
 800b004:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b00c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f002 0301 	and.w	r3, r2, #1
 800b01c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b020:	2300      	movs	r3, #0
 800b022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b026:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4313      	orrs	r3, r2
 800b02e:	f000 8089 	beq.w	800b144 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b038:	2b28      	cmp	r3, #40	; 0x28
 800b03a:	d86b      	bhi.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b03c:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b042:	bf00      	nop
 800b044:	0800b11d 	.word	0x0800b11d
 800b048:	0800b115 	.word	0x0800b115
 800b04c:	0800b115 	.word	0x0800b115
 800b050:	0800b115 	.word	0x0800b115
 800b054:	0800b115 	.word	0x0800b115
 800b058:	0800b115 	.word	0x0800b115
 800b05c:	0800b115 	.word	0x0800b115
 800b060:	0800b115 	.word	0x0800b115
 800b064:	0800b0e9 	.word	0x0800b0e9
 800b068:	0800b115 	.word	0x0800b115
 800b06c:	0800b115 	.word	0x0800b115
 800b070:	0800b115 	.word	0x0800b115
 800b074:	0800b115 	.word	0x0800b115
 800b078:	0800b115 	.word	0x0800b115
 800b07c:	0800b115 	.word	0x0800b115
 800b080:	0800b115 	.word	0x0800b115
 800b084:	0800b0ff 	.word	0x0800b0ff
 800b088:	0800b115 	.word	0x0800b115
 800b08c:	0800b115 	.word	0x0800b115
 800b090:	0800b115 	.word	0x0800b115
 800b094:	0800b115 	.word	0x0800b115
 800b098:	0800b115 	.word	0x0800b115
 800b09c:	0800b115 	.word	0x0800b115
 800b0a0:	0800b115 	.word	0x0800b115
 800b0a4:	0800b11d 	.word	0x0800b11d
 800b0a8:	0800b115 	.word	0x0800b115
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b115 	.word	0x0800b115
 800b0b4:	0800b115 	.word	0x0800b115
 800b0b8:	0800b115 	.word	0x0800b115
 800b0bc:	0800b115 	.word	0x0800b115
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b11d 	.word	0x0800b11d
 800b0c8:	0800b115 	.word	0x0800b115
 800b0cc:	0800b115 	.word	0x0800b115
 800b0d0:	0800b115 	.word	0x0800b115
 800b0d4:	0800b115 	.word	0x0800b115
 800b0d8:	0800b115 	.word	0x0800b115
 800b0dc:	0800b115 	.word	0x0800b115
 800b0e0:	0800b115 	.word	0x0800b115
 800b0e4:	0800b11d 	.word	0x0800b11d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 fe95 	bl	800ce20 <RCCEx_PLL2_Config>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0fc:	e00f      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b102:	3328      	adds	r3, #40	; 0x28
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f001 ff3c 	bl	800cf84 <RCCEx_PLL3_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b112:	e004      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b11a:	e000      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b11e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b126:	4bbf      	ldr	r3, [pc, #764]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b134:	4abb      	ldr	r2, [pc, #748]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b136:	430b      	orrs	r3, r1
 800b138:	6553      	str	r3, [r2, #84]	; 0x54
 800b13a:	e003      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b140:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f002 0302 	and.w	r3, r2, #2
 800b150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b154:	2300      	movs	r3, #0
 800b156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b15a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b15e:	460b      	mov	r3, r1
 800b160:	4313      	orrs	r3, r2
 800b162:	d041      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b16a:	2b05      	cmp	r3, #5
 800b16c:	d824      	bhi.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b16e:	a201      	add	r2, pc, #4	; (adr r2, 800b174 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b174:	0800b1c1 	.word	0x0800b1c1
 800b178:	0800b18d 	.word	0x0800b18d
 800b17c:	0800b1a3 	.word	0x0800b1a3
 800b180:	0800b1c1 	.word	0x0800b1c1
 800b184:	0800b1c1 	.word	0x0800b1c1
 800b188:	0800b1c1 	.word	0x0800b1c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b190:	3308      	adds	r3, #8
 800b192:	2101      	movs	r1, #1
 800b194:	4618      	mov	r0, r3
 800b196:	f001 fe43 	bl	800ce20 <RCCEx_PLL2_Config>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1a0:	e00f      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a6:	3328      	adds	r3, #40	; 0x28
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 feea 	bl	800cf84 <RCCEx_PLL3_Config>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1b6:	e004      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1be:	e000      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b1c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10a      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1ca:	4b96      	ldr	r3, [pc, #600]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ce:	f023 0107 	bic.w	r1, r3, #7
 800b1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d8:	4a92      	ldr	r2, [pc, #584]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	6553      	str	r3, [r2, #84]	; 0x54
 800b1de:	e003      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	f002 0304 	and.w	r3, r2, #4
 800b1f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b202:	460b      	mov	r3, r1
 800b204:	4313      	orrs	r3, r2
 800b206:	d044      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b210:	2b05      	cmp	r3, #5
 800b212:	d825      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b214:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b269 	.word	0x0800b269
 800b220:	0800b235 	.word	0x0800b235
 800b224:	0800b24b 	.word	0x0800b24b
 800b228:	0800b269 	.word	0x0800b269
 800b22c:	0800b269 	.word	0x0800b269
 800b230:	0800b269 	.word	0x0800b269
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b238:	3308      	adds	r3, #8
 800b23a:	2101      	movs	r1, #1
 800b23c:	4618      	mov	r0, r3
 800b23e:	f001 fdef 	bl	800ce20 <RCCEx_PLL2_Config>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b248:	e00f      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b24e:	3328      	adds	r3, #40	; 0x28
 800b250:	2101      	movs	r1, #1
 800b252:	4618      	mov	r0, r3
 800b254:	f001 fe96 	bl	800cf84 <RCCEx_PLL3_Config>
 800b258:	4603      	mov	r3, r0
 800b25a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b25e:	e004      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b266:	e000      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b26a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10b      	bne.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b272:	4b6c      	ldr	r3, [pc, #432]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b276:	f023 0107 	bic.w	r1, r3, #7
 800b27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b282:	4a68      	ldr	r2, [pc, #416]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b284:	430b      	orrs	r3, r1
 800b286:	6593      	str	r3, [r2, #88]	; 0x58
 800b288:	e003      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b28e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29a:	f002 0320 	and.w	r3, r2, #32
 800b29e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	d055      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2be:	d033      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2c4:	d82c      	bhi.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ca:	d02f      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d0:	d826      	bhi.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2d6:	d02b      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b2d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2dc:	d820      	bhi.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e2:	d012      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b2e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e8:	d81a      	bhi.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d022      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b2ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2f2:	d115      	bne.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f001 fd8f 	bl	800ce20 <RCCEx_PLL2_Config>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b308:	e015      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30e:	3328      	adds	r3, #40	; 0x28
 800b310:	2102      	movs	r1, #2
 800b312:	4618      	mov	r0, r3
 800b314:	f001 fe36 	bl	800cf84 <RCCEx_PLL3_Config>
 800b318:	4603      	mov	r3, r0
 800b31a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b31e:	e00a      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b326:	e006      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b328:	bf00      	nop
 800b32a:	e004      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b32c:	bf00      	nop
 800b32e:	e002      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b330:	bf00      	nop
 800b332:	e000      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b334:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10b      	bne.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b33e:	4b39      	ldr	r3, [pc, #228]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b342:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34e:	4a35      	ldr	r2, [pc, #212]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b350:	430b      	orrs	r3, r1
 800b352:	6553      	str	r3, [r2, #84]	; 0x54
 800b354:	e003      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b35a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b36a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b36e:	2300      	movs	r3, #0
 800b370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b374:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b378:	460b      	mov	r3, r1
 800b37a:	4313      	orrs	r3, r2
 800b37c:	d058      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b386:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b38a:	d033      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b38c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b390:	d82c      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b396:	d02f      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b39c:	d826      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b39e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3a2:	d02b      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b3a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3a8:	d820      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3ae:	d012      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b3b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b4:	d81a      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d022      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b3ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3be:	d115      	bne.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f001 fd29 	bl	800ce20 <RCCEx_PLL2_Config>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3d4:	e015      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3da:	3328      	adds	r3, #40	; 0x28
 800b3dc:	2102      	movs	r1, #2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f001 fdd0 	bl	800cf84 <RCCEx_PLL3_Config>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3ea:	e00a      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3f2:	e006      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3f4:	bf00      	nop
 800b3f6:	e004      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3f8:	bf00      	nop
 800b3fa:	e002      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3fc:	bf00      	nop
 800b3fe:	e000      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b400:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10e      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b40a:	4b06      	ldr	r3, [pc, #24]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b40c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b41a:	4a02      	ldr	r2, [pc, #8]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b41c:	430b      	orrs	r3, r1
 800b41e:	6593      	str	r3, [r2, #88]	; 0x58
 800b420:	e006      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b42c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b43c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b440:	2300      	movs	r3, #0
 800b442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b446:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b44a:	460b      	mov	r3, r1
 800b44c:	4313      	orrs	r3, r2
 800b44e:	d055      	beq.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b458:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b45c:	d033      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b45e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b462:	d82c      	bhi.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b468:	d02f      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b46e:	d826      	bhi.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b470:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b474:	d02b      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b476:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b47a:	d820      	bhi.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b47c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b480:	d012      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b486:	d81a      	bhi.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d022      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b48c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b490:	d115      	bne.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b496:	3308      	adds	r3, #8
 800b498:	2100      	movs	r1, #0
 800b49a:	4618      	mov	r0, r3
 800b49c:	f001 fcc0 	bl	800ce20 <RCCEx_PLL2_Config>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4a6:	e015      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ac:	3328      	adds	r3, #40	; 0x28
 800b4ae:	2102      	movs	r1, #2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f001 fd67 	bl	800cf84 <RCCEx_PLL3_Config>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4bc:	e00a      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4c4:	e006      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4c6:	bf00      	nop
 800b4c8:	e004      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4ca:	bf00      	nop
 800b4cc:	e002      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4ce:	bf00      	nop
 800b4d0:	e000      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10b      	bne.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b4dc:	4ba1      	ldr	r3, [pc, #644]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b4ec:	4a9d      	ldr	r2, [pc, #628]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4ee:	430b      	orrs	r3, r1
 800b4f0:	6593      	str	r3, [r2, #88]	; 0x58
 800b4f2:	e003      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f002 0308 	and.w	r3, r2, #8
 800b508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b50c:	2300      	movs	r3, #0
 800b50e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b512:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b516:	460b      	mov	r3, r1
 800b518:	4313      	orrs	r3, r2
 800b51a:	d01e      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b528:	d10c      	bne.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52e:	3328      	adds	r3, #40	; 0x28
 800b530:	2102      	movs	r1, #2
 800b532:	4618      	mov	r0, r3
 800b534:	f001 fd26 	bl	800cf84 <RCCEx_PLL3_Config>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b544:	4b87      	ldr	r3, [pc, #540]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b548:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b554:	4a83      	ldr	r2, [pc, #524]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b556:	430b      	orrs	r3, r1
 800b558:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f002 0310 	and.w	r3, r2, #16
 800b566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b56a:	2300      	movs	r3, #0
 800b56c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b570:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b574:	460b      	mov	r3, r1
 800b576:	4313      	orrs	r3, r2
 800b578:	d01e      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b586:	d10c      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58c:	3328      	adds	r3, #40	; 0x28
 800b58e:	2102      	movs	r1, #2
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fcf7 	bl	800cf84 <RCCEx_PLL3_Config>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b5a2:	4b70      	ldr	r3, [pc, #448]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5b2:	4a6c      	ldr	r2, [pc, #432]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b5c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	d03e      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5e4:	d022      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b5e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ea:	d81b      	bhi.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d003      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f4:	d00b      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b5f6:	e015      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	2100      	movs	r1, #0
 800b600:	4618      	mov	r0, r3
 800b602:	f001 fc0d 	bl	800ce20 <RCCEx_PLL2_Config>
 800b606:	4603      	mov	r3, r0
 800b608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b60c:	e00f      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b612:	3328      	adds	r3, #40	; 0x28
 800b614:	2102      	movs	r1, #2
 800b616:	4618      	mov	r0, r3
 800b618:	f001 fcb4 	bl	800cf84 <RCCEx_PLL3_Config>
 800b61c:	4603      	mov	r3, r0
 800b61e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b622:	e004      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b62a:	e000      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b62e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10b      	bne.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b636:	4b4b      	ldr	r3, [pc, #300]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b63a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b646:	4a47      	ldr	r2, [pc, #284]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b648:	430b      	orrs	r3, r1
 800b64a:	6593      	str	r3, [r2, #88]	; 0x58
 800b64c:	e003      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b662:	67bb      	str	r3, [r7, #120]	; 0x78
 800b664:	2300      	movs	r3, #0
 800b666:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b668:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b66c:	460b      	mov	r3, r1
 800b66e:	4313      	orrs	r3, r2
 800b670:	d03b      	beq.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b67a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b67e:	d01f      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b680:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b684:	d818      	bhi.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b68a:	d003      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b68c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b690:	d007      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b692:	e011      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b694:	4b33      	ldr	r3, [pc, #204]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	4a32      	ldr	r2, [pc, #200]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b69a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b69e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6a0:	e00f      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a6:	3328      	adds	r3, #40	; 0x28
 800b6a8:	2101      	movs	r1, #1
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f001 fc6a 	bl	800cf84 <RCCEx_PLL3_Config>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6b6:	e004      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6be:	e000      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b6c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10b      	bne.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6ca:	4b26      	ldr	r3, [pc, #152]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6da:	4a22      	ldr	r2, [pc, #136]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6dc:	430b      	orrs	r3, r1
 800b6de:	6553      	str	r3, [r2, #84]	; 0x54
 800b6e0:	e003      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b6f6:	673b      	str	r3, [r7, #112]	; 0x70
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	677b      	str	r3, [r7, #116]	; 0x74
 800b6fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b700:	460b      	mov	r3, r1
 800b702:	4313      	orrs	r3, r2
 800b704:	d034      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b714:	d007      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b716:	e011      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b718:	4b12      	ldr	r3, [pc, #72]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71c:	4a11      	ldr	r2, [pc, #68]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b71e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b724:	e00e      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b72a:	3308      	adds	r3, #8
 800b72c:	2102      	movs	r1, #2
 800b72e:	4618      	mov	r0, r3
 800b730:	f001 fb76 	bl	800ce20 <RCCEx_PLL2_Config>
 800b734:	4603      	mov	r3, r0
 800b736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b73a:	e003      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b742:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10d      	bne.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b74c:	4b05      	ldr	r3, [pc, #20]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75a:	4a02      	ldr	r2, [pc, #8]	; (800b764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b75c:	430b      	orrs	r3, r1
 800b75e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b760:	e006      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b762:	bf00      	nop
 800b764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b76c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b77c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b77e:	2300      	movs	r3, #0
 800b780:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b782:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b786:	460b      	mov	r3, r1
 800b788:	4313      	orrs	r3, r2
 800b78a:	d00c      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b790:	3328      	adds	r3, #40	; 0x28
 800b792:	2102      	movs	r1, #2
 800b794:	4618      	mov	r0, r3
 800b796:	f001 fbf5 	bl	800cf84 <RCCEx_PLL3_Config>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b7b2:	663b      	str	r3, [r7, #96]	; 0x60
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	667b      	str	r3, [r7, #100]	; 0x64
 800b7b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	d038      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ce:	d018      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b7d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7d4:	d811      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b7d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7da:	d014      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7e0:	d80b      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d011      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ea:	d106      	bne.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7ec:	4bc3      	ldr	r3, [pc, #780]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	4ac2      	ldr	r2, [pc, #776]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b7f8:	e008      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b800:	e004      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b802:	bf00      	nop
 800b804:	e002      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b806:	bf00      	nop
 800b808:	e000      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b80c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10b      	bne.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b814:	4bb9      	ldr	r3, [pc, #740]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b818:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b824:	4ab5      	ldr	r2, [pc, #724]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b826:	430b      	orrs	r3, r1
 800b828:	6553      	str	r3, [r2, #84]	; 0x54
 800b82a:	e003      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b840:	65bb      	str	r3, [r7, #88]	; 0x58
 800b842:	2300      	movs	r3, #0
 800b844:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b846:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b84a:	460b      	mov	r3, r1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d009      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b850:	4baa      	ldr	r3, [pc, #680]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b854:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b85e:	4aa7      	ldr	r2, [pc, #668]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b860:	430b      	orrs	r3, r1
 800b862:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b870:	653b      	str	r3, [r7, #80]	; 0x50
 800b872:	2300      	movs	r3, #0
 800b874:	657b      	str	r3, [r7, #84]	; 0x54
 800b876:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b87a:	460b      	mov	r3, r1
 800b87c:	4313      	orrs	r3, r2
 800b87e:	d00a      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b880:	4b9e      	ldr	r3, [pc, #632]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b890:	4a9a      	ldr	r2, [pc, #616]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b892:	430b      	orrs	r3, r1
 800b894:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b8a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	d009      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b8b2:	4b92      	ldr	r3, [pc, #584]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8c0:	4a8e      	ldr	r2, [pc, #568]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8c2:	430b      	orrs	r3, r1
 800b8c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b8d2:	643b      	str	r3, [r7, #64]	; 0x40
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b8d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	d00e      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8e2:	4b86      	ldr	r3, [pc, #536]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	4a85      	ldr	r2, [pc, #532]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8ec:	6113      	str	r3, [r2, #16]
 800b8ee:	4b83      	ldr	r3, [pc, #524]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8f0:	6919      	ldr	r1, [r3, #16]
 800b8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b8fa:	4a80      	ldr	r2, [pc, #512]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8fc:	430b      	orrs	r3, r1
 800b8fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b90c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b90e:	2300      	movs	r3, #0
 800b910:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b912:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b916:	460b      	mov	r3, r1
 800b918:	4313      	orrs	r3, r2
 800b91a:	d009      	beq.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b91c:	4b77      	ldr	r3, [pc, #476]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b920:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	4a74      	ldr	r2, [pc, #464]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b92c:	430b      	orrs	r3, r1
 800b92e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b93c:	633b      	str	r3, [r7, #48]	; 0x30
 800b93e:	2300      	movs	r3, #0
 800b940:	637b      	str	r3, [r7, #52]	; 0x34
 800b942:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b946:	460b      	mov	r3, r1
 800b948:	4313      	orrs	r3, r2
 800b94a:	d00a      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b94c:	4b6b      	ldr	r3, [pc, #428]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b950:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b95c:	4a67      	ldr	r2, [pc, #412]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b95e:	430b      	orrs	r3, r1
 800b960:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	2100      	movs	r1, #0
 800b96c:	62b9      	str	r1, [r7, #40]	; 0x28
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b974:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b978:	460b      	mov	r3, r1
 800b97a:	4313      	orrs	r3, r2
 800b97c:	d011      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b982:	3308      	adds	r3, #8
 800b984:	2100      	movs	r1, #0
 800b986:	4618      	mov	r0, r3
 800b988:	f001 fa4a 	bl	800ce20 <RCCEx_PLL2_Config>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b99e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	6239      	str	r1, [r7, #32]
 800b9ae:	f003 0302 	and.w	r3, r3, #2
 800b9b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	d011      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f001 fa2a 	bl	800ce20 <RCCEx_PLL2_Config>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	61b9      	str	r1, [r7, #24]
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	61fb      	str	r3, [r7, #28]
 800b9f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	d011      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba02:	3308      	adds	r3, #8
 800ba04:	2102      	movs	r1, #2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 fa0a 	bl	800ce20 <RCCEx_PLL2_Config>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	6139      	str	r1, [r7, #16]
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	d011      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba42:	3328      	adds	r3, #40	; 0x28
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 fa9c 	bl	800cf84 <RCCEx_PLL3_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ba52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	f003 0310 	and.w	r3, r3, #16
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	d011      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba82:	3328      	adds	r3, #40	; 0x28
 800ba84:	2101      	movs	r1, #1
 800ba86:	4618      	mov	r0, r3
 800ba88:	f001 fa7c 	bl	800cf84 <RCCEx_PLL3_Config>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800baa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	2100      	movs	r1, #0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	f003 0320 	and.w	r3, r3, #32
 800bab2:	607b      	str	r3, [r7, #4]
 800bab4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bab8:	460b      	mov	r3, r1
 800baba:	4313      	orrs	r3, r2
 800babc:	d011      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800babe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac2:	3328      	adds	r3, #40	; 0x28
 800bac4:	2102      	movs	r1, #2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f001 fa5c 	bl	800cf84 <RCCEx_PLL3_Config>
 800bacc:	4603      	mov	r3, r0
 800bace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bae2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	e000      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800baf6:	46bd      	mov	sp, r7
 800baf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bafc:	58024400 	.word	0x58024400

0800bb00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b090      	sub	sp, #64	; 0x40
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb0e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bb12:	430b      	orrs	r3, r1
 800bb14:	f040 8094 	bne.w	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bb18:	4b9e      	ldr	r3, [pc, #632]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	f200 8087 	bhi.w	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bb2a:	a201      	add	r2, pc, #4	; (adr r2, 800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bb45 	.word	0x0800bb45
 800bb34:	0800bb6d 	.word	0x0800bb6d
 800bb38:	0800bb95 	.word	0x0800bb95
 800bb3c:	0800bc31 	.word	0x0800bc31
 800bb40:	0800bbbd 	.word	0x0800bbbd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb44:	4b93      	ldr	r3, [pc, #588]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb50:	d108      	bne.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 f810 	bl	800cb7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb60:	f000 bd45 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb68:	f000 bd41 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb6c:	4b89      	ldr	r3, [pc, #548]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb78:	d108      	bne.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb7a:	f107 0318 	add.w	r3, r7, #24
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fd54 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb88:	f000 bd31 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb90:	f000 bd2d 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb94:	4b7f      	ldr	r3, [pc, #508]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bba0:	d108      	bne.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bba2:	f107 030c 	add.w	r3, r7, #12
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 fe94 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb0:	f000 bd1d 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbb8:	f000 bd19 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbbc:	4b75      	ldr	r3, [pc, #468]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbc4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbc6:	4b73      	ldr	r3, [pc, #460]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d10c      	bne.n	800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d109      	bne.n	800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbd8:	4b6e      	ldr	r3, [pc, #440]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	08db      	lsrs	r3, r3, #3
 800bbde:	f003 0303 	and.w	r3, r3, #3
 800bbe2:	4a6d      	ldr	r2, [pc, #436]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bbe4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbea:	e01f      	b.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbec:	4b69      	ldr	r3, [pc, #420]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbf8:	d106      	bne.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc00:	d102      	bne.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc02:	4b66      	ldr	r3, [pc, #408]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc06:	e011      	b.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc08:	4b62      	ldr	r3, [pc, #392]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc14:	d106      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc1c:	d102      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc1e:	4b60      	ldr	r3, [pc, #384]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc22:	e003      	b.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc28:	f000 bce1 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc2c:	f000 bcdf 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc30:	4b5c      	ldr	r3, [pc, #368]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc34:	f000 bcdb 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc3c:	f000 bcd7 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc44:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	f040 80ad 	bne.w	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bc4e:	4b51      	ldr	r3, [pc, #324]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc52:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bc56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc5e:	d056      	beq.n	800bd0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc66:	f200 8090 	bhi.w	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	2bc0      	cmp	r3, #192	; 0xc0
 800bc6e:	f000 8088 	beq.w	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	2bc0      	cmp	r3, #192	; 0xc0
 800bc76:	f200 8088 	bhi.w	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	2b80      	cmp	r3, #128	; 0x80
 800bc7e:	d032      	beq.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	2b80      	cmp	r3, #128	; 0x80
 800bc84:	f200 8081 	bhi.w	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	2b40      	cmp	r3, #64	; 0x40
 800bc92:	d014      	beq.n	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bc94:	e079      	b.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc96:	4b3f      	ldr	r3, [pc, #252]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bca2:	d108      	bne.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 ff67 	bl	800cb7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcb2:	f000 bc9c 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcba:	f000 bc98 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcbe:	4b35      	ldr	r3, [pc, #212]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcca:	d108      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bccc:	f107 0318 	add.w	r3, r7, #24
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 fcab 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcda:	f000 bc88 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bce2:	f000 bc84 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bce6:	4b2b      	ldr	r3, [pc, #172]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcf2:	d108      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcf4:	f107 030c 	add.w	r3, r7, #12
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fdeb 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd02:	f000 bc74 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd0a:	f000 bc70 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd0e:	4b21      	ldr	r3, [pc, #132]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd18:	4b1e      	ldr	r3, [pc, #120]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d10c      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d109      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd2a:	4b1a      	ldr	r3, [pc, #104]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	08db      	lsrs	r3, r3, #3
 800bd30:	f003 0303 	and.w	r3, r3, #3
 800bd34:	4a18      	ldr	r2, [pc, #96]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd36:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd3c:	e01f      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd3e:	4b15      	ldr	r3, [pc, #84]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd4a:	d106      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd52:	d102      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd54:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bd56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd58:	e011      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd5a:	4b0e      	ldr	r3, [pc, #56]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd66:	d106      	bne.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd6e:	d102      	bne.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd70:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd74:	e003      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd7a:	f000 bc38 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd7e:	f000 bc36 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd82:	4b08      	ldr	r3, [pc, #32]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd86:	f000 bc32 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8e:	f000 bc2e 	b.w	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd92:	bf00      	nop
 800bd94:	58024400 	.word	0x58024400
 800bd98:	03d09000 	.word	0x03d09000
 800bd9c:	003d0900 	.word	0x003d0900
 800bda0:	017d7840 	.word	0x017d7840
 800bda4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bda8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	f040 809c 	bne.w	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bdb6:	4b9e      	ldr	r3, [pc, #632]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bdbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdc6:	d054      	beq.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdce:	f200 808b 	bhi.w	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bdd8:	f000 8083 	beq.w	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bde2:	f200 8081 	bhi.w	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdec:	d02f      	beq.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdf4:	d878      	bhi.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d004      	beq.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be02:	d012      	beq.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800be04:	e070      	b.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be06:	4b8a      	ldr	r3, [pc, #552]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be12:	d107      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 feaf 	bl	800cb7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be22:	e3e4      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be28:	e3e1      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be2a:	4b81      	ldr	r3, [pc, #516]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be36:	d107      	bne.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be38:	f107 0318 	add.w	r3, r7, #24
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 fbf5 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be46:	e3d2      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be4c:	e3cf      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be4e:	4b78      	ldr	r3, [pc, #480]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be5a:	d107      	bne.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be5c:	f107 030c 	add.w	r3, r7, #12
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fd37 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be6a:	e3c0      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be70:	e3bd      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be72:	4b6f      	ldr	r3, [pc, #444]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be7c:	4b6c      	ldr	r3, [pc, #432]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	2b04      	cmp	r3, #4
 800be86:	d10c      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be8e:	4b68      	ldr	r3, [pc, #416]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	08db      	lsrs	r3, r3, #3
 800be94:	f003 0303 	and.w	r3, r3, #3
 800be98:	4a66      	ldr	r2, [pc, #408]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be9a:	fa22 f303 	lsr.w	r3, r2, r3
 800be9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bea0:	e01e      	b.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bea2:	4b63      	ldr	r3, [pc, #396]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beae:	d106      	bne.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beb6:	d102      	bne.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beb8:	4b5f      	ldr	r3, [pc, #380]	; (800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800beba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bebc:	e010      	b.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bebe:	4b5c      	ldr	r3, [pc, #368]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800beca:	d106      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800becc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed2:	d102      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bed4:	4b59      	ldr	r3, [pc, #356]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed8:	e002      	b.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800beda:	2300      	movs	r3, #0
 800bedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bede:	e386      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bee0:	e385      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bee2:	4b57      	ldr	r3, [pc, #348]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee6:	e382      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beec:	e37f      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800beee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bef2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bef6:	430b      	orrs	r3, r1
 800bef8:	f040 80a7 	bne.w	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800befc:	4b4c      	ldr	r3, [pc, #304]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800befe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf00:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bf04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf0c:	d055      	beq.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf14:	f200 8096 	bhi.w	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf1e:	f000 8084 	beq.w	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf28:	f200 808c 	bhi.w	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf32:	d030      	beq.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf3a:	f200 8083 	bhi.w	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d004      	beq.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf4a:	d012      	beq.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bf4c:	e07a      	b.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf4e:	4b38      	ldr	r3, [pc, #224]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf5a:	d107      	bne.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fe0b 	bl	800cb7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf6a:	e340      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf70:	e33d      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf72:	4b2f      	ldr	r3, [pc, #188]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf7e:	d107      	bne.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf80:	f107 0318 	add.w	r3, r7, #24
 800bf84:	4618      	mov	r0, r3
 800bf86:	f000 fb51 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf8e:	e32e      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf94:	e32b      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf96:	4b26      	ldr	r3, [pc, #152]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfa2:	d107      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfa4:	f107 030c 	add.w	r3, r7, #12
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 fc93 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfb2:	e31c      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb8:	e319      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfba:	4b1d      	ldr	r3, [pc, #116]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfc4:	4b1a      	ldr	r3, [pc, #104]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 0304 	and.w	r3, r3, #4
 800bfcc:	2b04      	cmp	r3, #4
 800bfce:	d10c      	bne.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d109      	bne.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfd6:	4b16      	ldr	r3, [pc, #88]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	08db      	lsrs	r3, r3, #3
 800bfdc:	f003 0303 	and.w	r3, r3, #3
 800bfe0:	4a14      	ldr	r2, [pc, #80]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bfe2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe8:	e01e      	b.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfea:	4b11      	ldr	r3, [pc, #68]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bff6:	d106      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bffe:	d102      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c000:	4b0d      	ldr	r3, [pc, #52]	; (800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c004:	e010      	b.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c006:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c00e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c012:	d106      	bne.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c01a:	d102      	bne.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c01c:	4b07      	ldr	r3, [pc, #28]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c01e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c020:	e002      	b.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c026:	e2e2      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c028:	e2e1      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c02a:	4b05      	ldr	r3, [pc, #20]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02e:	e2de      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c030:	58024400 	.word	0x58024400
 800c034:	03d09000 	.word	0x03d09000
 800c038:	003d0900 	.word	0x003d0900
 800c03c:	017d7840 	.word	0x017d7840
 800c040:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c048:	e2d1      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c04e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c052:	430b      	orrs	r3, r1
 800c054:	f040 809c 	bne.w	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c058:	4b93      	ldr	r3, [pc, #588]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c05c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c060:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c068:	d054      	beq.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c070:	f200 808b 	bhi.w	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c07a:	f000 8083 	beq.w	800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c084:	f200 8081 	bhi.w	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c08e:	d02f      	beq.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c096:	d878      	bhi.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d004      	beq.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a4:	d012      	beq.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c0a6:	e070      	b.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0a8:	4b7f      	ldr	r3, [pc, #508]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0b4:	d107      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fd5e 	bl	800cb7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0c4:	e293      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ca:	e290      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0cc:	4b76      	ldr	r3, [pc, #472]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0d8:	d107      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0da:	f107 0318 	add.w	r3, r7, #24
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 faa4 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0e8:	e281      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ee:	e27e      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0f0:	4b6d      	ldr	r3, [pc, #436]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fc:	d107      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0fe:	f107 030c 	add.w	r3, r7, #12
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fbe6 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c10c:	e26f      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c112:	e26c      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c114:	4b64      	ldr	r3, [pc, #400]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c11c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c11e:	4b62      	ldr	r3, [pc, #392]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0304 	and.w	r3, r3, #4
 800c126:	2b04      	cmp	r3, #4
 800c128:	d10c      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d109      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c130:	4b5d      	ldr	r3, [pc, #372]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	08db      	lsrs	r3, r3, #3
 800c136:	f003 0303 	and.w	r3, r3, #3
 800c13a:	4a5c      	ldr	r2, [pc, #368]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c13c:	fa22 f303 	lsr.w	r3, r2, r3
 800c140:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c142:	e01e      	b.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c144:	4b58      	ldr	r3, [pc, #352]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c14c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c150:	d106      	bne.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c158:	d102      	bne.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c15a:	4b55      	ldr	r3, [pc, #340]	; (800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c15c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c15e:	e010      	b.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c160:	4b51      	ldr	r3, [pc, #324]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c16c:	d106      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c174:	d102      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c176:	4b4f      	ldr	r3, [pc, #316]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c17a:	e002      	b.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c180:	e235      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c182:	e234      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c184:	4b4c      	ldr	r3, [pc, #304]	; (800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c188:	e231      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18e:	e22e      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c194:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c198:	430b      	orrs	r3, r1
 800c19a:	f040 808f 	bne.w	800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c19e:	4b42      	ldr	r3, [pc, #264]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c1a6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1ae:	d06b      	beq.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1b6:	d874      	bhi.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1be:	d056      	beq.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1c6:	d86c      	bhi.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1ce:	d03b      	beq.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1d6:	d864      	bhi.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1de:	d021      	beq.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1e6:	d85c      	bhi.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f4:	d004      	beq.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c1f6:	e054      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c1f8:	f7fe fa0a 	bl	800a610 <HAL_RCC_GetPCLK1Freq>
 800c1fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1fe:	e1f6      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c200:	4b29      	ldr	r3, [pc, #164]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c20c:	d107      	bne.n	800c21e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c20e:	f107 0318 	add.w	r3, r7, #24
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fa0a 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c21c:	e1e7      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c222:	e1e4      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c224:	4b20      	ldr	r3, [pc, #128]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c22c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c230:	d107      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c232:	f107 030c 	add.w	r3, r7, #12
 800c236:	4618      	mov	r0, r3
 800c238:	f000 fb4c 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c240:	e1d5      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c246:	e1d2      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c248:	4b17      	ldr	r3, [pc, #92]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	2b04      	cmp	r3, #4
 800c252:	d109      	bne.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c254:	4b14      	ldr	r3, [pc, #80]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	08db      	lsrs	r3, r3, #3
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	4a13      	ldr	r2, [pc, #76]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c260:	fa22 f303 	lsr.w	r3, r2, r3
 800c264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c266:	e1c2      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26c:	e1bf      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c26e:	4b0e      	ldr	r3, [pc, #56]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c27a:	d102      	bne.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c27c:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c280:	e1b5      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c286:	e1b2      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c288:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c294:	d102      	bne.n	800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c296:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c29a:	e1a8      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a0:	e1a5      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a6:	e1a2      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2a8:	58024400 	.word	0x58024400
 800c2ac:	03d09000 	.word	0x03d09000
 800c2b0:	003d0900 	.word	0x003d0900
 800c2b4:	017d7840 	.word	0x017d7840
 800c2b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c2bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c2c4:	430b      	orrs	r3, r1
 800c2c6:	d173      	bne.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c2c8:	4b9c      	ldr	r3, [pc, #624]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c2d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2d8:	d02f      	beq.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2e0:	d863      	bhi.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ee:	d012      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c2f0:	e05b      	b.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2f2:	4b92      	ldr	r3, [pc, #584]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2fe:	d107      	bne.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c300:	f107 0318 	add.w	r3, r7, #24
 800c304:	4618      	mov	r0, r3
 800c306:	f000 f991 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30e:	e16e      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c314:	e16b      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c316:	4b89      	ldr	r3, [pc, #548]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c31e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c322:	d107      	bne.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c324:	f107 030c 	add.w	r3, r7, #12
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 fad3 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c332:	e15c      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c334:	2300      	movs	r3, #0
 800c336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c338:	e159      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c33a:	4b80      	ldr	r3, [pc, #512]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c342:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c344:	4b7d      	ldr	r3, [pc, #500]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 0304 	and.w	r3, r3, #4
 800c34c:	2b04      	cmp	r3, #4
 800c34e:	d10c      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c352:	2b00      	cmp	r3, #0
 800c354:	d109      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c356:	4b79      	ldr	r3, [pc, #484]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	08db      	lsrs	r3, r3, #3
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	4a77      	ldr	r2, [pc, #476]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c362:	fa22 f303 	lsr.w	r3, r2, r3
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c368:	e01e      	b.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c36a:	4b74      	ldr	r3, [pc, #464]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c376:	d106      	bne.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c37e:	d102      	bne.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c380:	4b70      	ldr	r3, [pc, #448]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c384:	e010      	b.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c386:	4b6d      	ldr	r3, [pc, #436]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c392:	d106      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c39a:	d102      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c39c:	4b6a      	ldr	r3, [pc, #424]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a0:	e002      	b.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3a6:	e122      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3a8:	e121      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ae:	e11e      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c3b8:	430b      	orrs	r3, r1
 800c3ba:	d133      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c3bc:	4b5f      	ldr	r3, [pc, #380]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d004      	beq.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3d2:	d012      	beq.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c3d4:	e023      	b.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3d6:	4b59      	ldr	r3, [pc, #356]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3e2:	d107      	bne.n	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fbc7 	bl	800cb7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f2:	e0fc      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f8:	e0f9      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3fa:	4b50      	ldr	r3, [pc, #320]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c406:	d107      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c408:	f107 0318 	add.w	r3, r7, #24
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 f90d 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c416:	e0ea      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	e0e7      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c422:	e0e4      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c424:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c428:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c42c:	430b      	orrs	r3, r1
 800c42e:	f040 808d 	bne.w	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c432:	4b42      	ldr	r3, [pc, #264]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c436:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c43a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c442:	d06b      	beq.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c44a:	d874      	bhi.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c452:	d056      	beq.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c45a:	d86c      	bhi.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c462:	d03b      	beq.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c46a:	d864      	bhi.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c472:	d021      	beq.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c47a:	d85c      	bhi.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d004      	beq.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c488:	d004      	beq.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c48a:	e054      	b.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c48c:	f000 f8b8 	bl	800c600 <HAL_RCCEx_GetD3PCLK1Freq>
 800c490:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c492:	e0ac      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c494:	4b29      	ldr	r3, [pc, #164]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c49c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4a0:	d107      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4a2:	f107 0318 	add.w	r3, r7, #24
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 f8c0 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4b0:	e09d      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b6:	e09a      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4b8:	4b20      	ldr	r3, [pc, #128]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4c4:	d107      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4c6:	f107 030c 	add.w	r3, r7, #12
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fa02 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d4:	e08b      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4da:	e088      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4dc:	4b17      	ldr	r3, [pc, #92]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0304 	and.w	r3, r3, #4
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	d109      	bne.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4e8:	4b14      	ldr	r3, [pc, #80]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	08db      	lsrs	r3, r3, #3
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	4a13      	ldr	r2, [pc, #76]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4fa:	e078      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c500:	e075      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c502:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c50a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c50e:	d102      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c510:	4b0c      	ldr	r3, [pc, #48]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c514:	e06b      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c51a:	e068      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c51c:	4b07      	ldr	r3, [pc, #28]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c528:	d102      	bne.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c52a:	4b07      	ldr	r3, [pc, #28]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c52e:	e05e      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c534:	e05b      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53a:	e058      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c53c:	58024400 	.word	0x58024400
 800c540:	03d09000 	.word	0x03d09000
 800c544:	003d0900 	.word	0x003d0900
 800c548:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c550:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c554:	430b      	orrs	r3, r1
 800c556:	d148      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c558:	4b27      	ldr	r3, [pc, #156]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c55c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c560:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c568:	d02a      	beq.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c570:	d838      	bhi.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c57e:	d00d      	beq.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c580:	e030      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c582:	4b1d      	ldr	r3, [pc, #116]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c58a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c58e:	d102      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c590:	4b1a      	ldr	r3, [pc, #104]	; (800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c594:	e02b      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59a:	e028      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c59c:	4b16      	ldr	r3, [pc, #88]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5a8:	d107      	bne.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fae4 	bl	800cb7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b8:	e019      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5be:	e016      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5c0:	4b0d      	ldr	r3, [pc, #52]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5cc:	d107      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ce:	f107 0318 	add.w	r3, r7, #24
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 f82a 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5dc:	e007      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e2:	e004      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e8:	e001      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3740      	adds	r7, #64	; 0x40
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	58024400 	.word	0x58024400
 800c5fc:	017d7840 	.word	0x017d7840

0800c600 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c604:	f7fd ffd4 	bl	800a5b0 <HAL_RCC_GetHCLKFreq>
 800c608:	4602      	mov	r2, r0
 800c60a:	4b06      	ldr	r3, [pc, #24]	; (800c624 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	091b      	lsrs	r3, r3, #4
 800c610:	f003 0307 	and.w	r3, r3, #7
 800c614:	4904      	ldr	r1, [pc, #16]	; (800c628 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c616:	5ccb      	ldrb	r3, [r1, r3]
 800c618:	f003 031f 	and.w	r3, r3, #31
 800c61c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c620:	4618      	mov	r0, r3
 800c622:	bd80      	pop	{r7, pc}
 800c624:	58024400 	.word	0x58024400
 800c628:	0801667c 	.word	0x0801667c

0800c62c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b089      	sub	sp, #36	; 0x24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c634:	4ba1      	ldr	r3, [pc, #644]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c638:	f003 0303 	and.w	r3, r3, #3
 800c63c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c63e:	4b9f      	ldr	r3, [pc, #636]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c642:	0b1b      	lsrs	r3, r3, #12
 800c644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c648:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c64a:	4b9c      	ldr	r3, [pc, #624]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64e:	091b      	lsrs	r3, r3, #4
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c656:	4b99      	ldr	r3, [pc, #612]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65a:	08db      	lsrs	r3, r3, #3
 800c65c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	fb02 f303 	mul.w	r3, r2, r3
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 8111 	beq.w	800c89c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	f000 8083 	beq.w	800c788 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	2b02      	cmp	r3, #2
 800c686:	f200 80a1 	bhi.w	800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d056      	beq.n	800c744 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c696:	e099      	b.n	800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c698:	4b88      	ldr	r3, [pc, #544]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0320 	and.w	r3, r3, #32
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d02d      	beq.n	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6a4:	4b85      	ldr	r3, [pc, #532]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	08db      	lsrs	r3, r3, #3
 800c6aa:	f003 0303 	and.w	r3, r3, #3
 800c6ae:	4a84      	ldr	r2, [pc, #528]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	ee07 3a90 	vmov	s15, r3
 800c6bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	ee07 3a90 	vmov	s15, r3
 800c6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ce:	4b7b      	ldr	r3, [pc, #492]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c6fe:	e087      	b.n	800c810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c712:	4b6a      	ldr	r3, [pc, #424]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71a:	ee07 3a90 	vmov	s15, r3
 800c71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c722:	ed97 6a03 	vldr	s12, [r7, #12]
 800c726:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c742:	e065      	b.n	800c810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c756:	4b59      	ldr	r3, [pc, #356]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75e:	ee07 3a90 	vmov	s15, r3
 800c762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c766:	ed97 6a03 	vldr	s12, [r7, #12]
 800c76a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c786:	e043      	b.n	800c810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	ee07 3a90 	vmov	s15, r3
 800c78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c792:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c79a:	4b48      	ldr	r3, [pc, #288]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a2:	ee07 3a90 	vmov	s15, r3
 800c7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7ca:	e021      	b.n	800c810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	ee07 3a90 	vmov	s15, r3
 800c7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7de:	4b37      	ldr	r3, [pc, #220]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e6:	ee07 3a90 	vmov	s15, r3
 800c7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c80a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c80e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c810:	4b2a      	ldr	r3, [pc, #168]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c814:	0a5b      	lsrs	r3, r3, #9
 800c816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c836:	ee17 2a90 	vmov	r2, s15
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c83e:	4b1f      	ldr	r3, [pc, #124]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	0c1b      	lsrs	r3, r3, #16
 800c844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c848:	ee07 3a90 	vmov	s15, r3
 800c84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c854:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c858:	edd7 6a07 	vldr	s13, [r7, #28]
 800c85c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c864:	ee17 2a90 	vmov	r2, s15
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c86c:	4b13      	ldr	r3, [pc, #76]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c870:	0e1b      	lsrs	r3, r3, #24
 800c872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c882:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c886:	edd7 6a07 	vldr	s13, [r7, #28]
 800c88a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c892:	ee17 2a90 	vmov	r2, s15
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c89a:	e008      	b.n	800c8ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	609a      	str	r2, [r3, #8]
}
 800c8ae:	bf00      	nop
 800c8b0:	3724      	adds	r7, #36	; 0x24
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	58024400 	.word	0x58024400
 800c8c0:	03d09000 	.word	0x03d09000
 800c8c4:	46000000 	.word	0x46000000
 800c8c8:	4c742400 	.word	0x4c742400
 800c8cc:	4a742400 	.word	0x4a742400
 800c8d0:	4bbebc20 	.word	0x4bbebc20

0800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b089      	sub	sp, #36	; 0x24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8dc:	4ba1      	ldr	r3, [pc, #644]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e0:	f003 0303 	and.w	r3, r3, #3
 800c8e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c8e6:	4b9f      	ldr	r3, [pc, #636]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ea:	0d1b      	lsrs	r3, r3, #20
 800c8ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c8f2:	4b9c      	ldr	r3, [pc, #624]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f6:	0a1b      	lsrs	r3, r3, #8
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c8fe:	4b99      	ldr	r3, [pc, #612]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c902:	08db      	lsrs	r3, r3, #3
 800c904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	fb02 f303 	mul.w	r3, r2, r3
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c916:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8111 	beq.w	800cb44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b02      	cmp	r3, #2
 800c926:	f000 8083 	beq.w	800ca30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	f200 80a1 	bhi.w	800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d056      	beq.n	800c9ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c93e:	e099      	b.n	800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c940:	4b88      	ldr	r3, [pc, #544]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0320 	and.w	r3, r3, #32
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d02d      	beq.n	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c94c:	4b85      	ldr	r3, [pc, #532]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	08db      	lsrs	r3, r3, #3
 800c952:	f003 0303 	and.w	r3, r3, #3
 800c956:	4a84      	ldr	r2, [pc, #528]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c958:	fa22 f303 	lsr.w	r3, r2, r3
 800c95c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	ee07 3a90 	vmov	s15, r3
 800c964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	ee07 3a90 	vmov	s15, r3
 800c96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c976:	4b7b      	ldr	r3, [pc, #492]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c986:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9a6:	e087      	b.n	800cab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ba:	4b6a      	ldr	r3, [pc, #424]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ea:	e065      	b.n	800cab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fe:	4b59      	ldr	r3, [pc, #356]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca2e:	e043      	b.n	800cab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca42:	4b48      	ldr	r3, [pc, #288]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca72:	e021      	b.n	800cab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca86:	4b37      	ldr	r3, [pc, #220]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cab8:	4b2a      	ldr	r3, [pc, #168]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cabc:	0a5b      	lsrs	r3, r3, #9
 800cabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cace:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cad2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cade:	ee17 2a90 	vmov	r2, s15
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cae6:	4b1f      	ldr	r3, [pc, #124]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caea:	0c1b      	lsrs	r3, r3, #16
 800caec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf0:	ee07 3a90 	vmov	s15, r3
 800caf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cafc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb00:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0c:	ee17 2a90 	vmov	r2, s15
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb14:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb18:	0e1b      	lsrs	r3, r3, #24
 800cb1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb3a:	ee17 2a90 	vmov	r2, s15
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cb42:	e008      	b.n	800cb56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	609a      	str	r2, [r3, #8]
}
 800cb56:	bf00      	nop
 800cb58:	3724      	adds	r7, #36	; 0x24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	58024400 	.word	0x58024400
 800cb68:	03d09000 	.word	0x03d09000
 800cb6c:	46000000 	.word	0x46000000
 800cb70:	4c742400 	.word	0x4c742400
 800cb74:	4a742400 	.word	0x4a742400
 800cb78:	4bbebc20 	.word	0x4bbebc20

0800cb7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b089      	sub	sp, #36	; 0x24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb84:	4ba0      	ldr	r3, [pc, #640]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb88:	f003 0303 	and.w	r3, r3, #3
 800cb8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb8e:	4b9e      	ldr	r3, [pc, #632]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb92:	091b      	lsrs	r3, r3, #4
 800cb94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb9a:	4b9b      	ldr	r3, [pc, #620]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cba4:	4b98      	ldr	r3, [pc, #608]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba8:	08db      	lsrs	r3, r3, #3
 800cbaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	fb02 f303 	mul.w	r3, r2, r3
 800cbb4:	ee07 3a90 	vmov	s15, r3
 800cbb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f000 8111 	beq.w	800cdea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	f000 8083 	beq.w	800ccd6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	f200 80a1 	bhi.w	800cd1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d003      	beq.n	800cbe6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d056      	beq.n	800cc92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cbe4:	e099      	b.n	800cd1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbe6:	4b88      	ldr	r3, [pc, #544]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f003 0320 	and.w	r3, r3, #32
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d02d      	beq.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbf2:	4b85      	ldr	r3, [pc, #532]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	08db      	lsrs	r3, r3, #3
 800cbf8:	f003 0303 	and.w	r3, r3, #3
 800cbfc:	4a83      	ldr	r2, [pc, #524]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cbfe:	fa22 f303 	lsr.w	r3, r2, r3
 800cc02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	ee07 3a90 	vmov	s15, r3
 800cc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	ee07 3a90 	vmov	s15, r3
 800cc14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1c:	4b7a      	ldr	r3, [pc, #488]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc30:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc4c:	e087      	b.n	800cd5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	ee07 3a90 	vmov	s15, r3
 800cc54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc60:	4b69      	ldr	r3, [pc, #420]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc68:	ee07 3a90 	vmov	s15, r3
 800cc6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc70:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc74:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc90:	e065      	b.n	800cd5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ce18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca4:	4b58      	ldr	r3, [pc, #352]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccac:	ee07 3a90 	vmov	s15, r3
 800ccb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccb8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccd4:	e043      	b.n	800cd5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	ee07 3a90 	vmov	s15, r3
 800ccdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ce1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cce8:	4b47      	ldr	r3, [pc, #284]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf0:	ee07 3a90 	vmov	s15, r3
 800ccf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd18:	e021      	b.n	800cd5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	ee07 3a90 	vmov	s15, r3
 800cd20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd24:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2c:	4b36      	ldr	r3, [pc, #216]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd34:	ee07 3a90 	vmov	s15, r3
 800cd38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd40:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cd5e:	4b2a      	ldr	r3, [pc, #168]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd62:	0a5b      	lsrs	r3, r3, #9
 800cd64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd78:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd84:	ee17 2a90 	vmov	r2, s15
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cd8c:	4b1e      	ldr	r3, [pc, #120]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd90:	0c1b      	lsrs	r3, r3, #16
 800cd92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cda2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cda6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb2:	ee17 2a90 	vmov	r2, s15
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cdba:	4b13      	ldr	r3, [pc, #76]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbe:	0e1b      	lsrs	r3, r3, #24
 800cdc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc4:	ee07 3a90 	vmov	s15, r3
 800cdc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde0:	ee17 2a90 	vmov	r2, s15
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cde8:	e008      	b.n	800cdfc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	609a      	str	r2, [r3, #8]
}
 800cdfc:	bf00      	nop
 800cdfe:	3724      	adds	r7, #36	; 0x24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	58024400 	.word	0x58024400
 800ce0c:	03d09000 	.word	0x03d09000
 800ce10:	46000000 	.word	0x46000000
 800ce14:	4c742400 	.word	0x4c742400
 800ce18:	4a742400 	.word	0x4a742400
 800ce1c:	4bbebc20 	.word	0x4bbebc20

0800ce20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce2e:	4b53      	ldr	r3, [pc, #332]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ce30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce32:	f003 0303 	and.w	r3, r3, #3
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d101      	bne.n	800ce3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e099      	b.n	800cf72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce3e:	4b4f      	ldr	r3, [pc, #316]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a4e      	ldr	r2, [pc, #312]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ce44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce4a:	f7f6 fc9b 	bl	8003784 <HAL_GetTick>
 800ce4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce50:	e008      	b.n	800ce64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce52:	f7f6 fc97 	bl	8003784 <HAL_GetTick>
 800ce56:	4602      	mov	r2, r0
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d901      	bls.n	800ce64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e086      	b.n	800cf72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce64:	4b45      	ldr	r3, [pc, #276]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1f0      	bne.n	800ce52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce70:	4b42      	ldr	r3, [pc, #264]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ce72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	031b      	lsls	r3, r3, #12
 800ce7e:	493f      	ldr	r1, [pc, #252]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ce80:	4313      	orrs	r3, r2
 800ce82:	628b      	str	r3, [r1, #40]	; 0x28
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	025b      	lsls	r3, r3, #9
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	431a      	orrs	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	041b      	lsls	r3, r3, #16
 800cea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cea6:	431a      	orrs	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	3b01      	subs	r3, #1
 800ceae:	061b      	lsls	r3, r3, #24
 800ceb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ceb4:	4931      	ldr	r1, [pc, #196]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ceba:	4b30      	ldr	r3, [pc, #192]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	492d      	ldr	r1, [pc, #180]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cec8:	4313      	orrs	r3, r2
 800ceca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cecc:	4b2b      	ldr	r3, [pc, #172]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced0:	f023 0220 	bic.w	r2, r3, #32
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	4928      	ldr	r1, [pc, #160]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ceda:	4313      	orrs	r3, r2
 800cedc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cede:	4b27      	ldr	r3, [pc, #156]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	4a26      	ldr	r2, [pc, #152]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cee4:	f023 0310 	bic.w	r3, r3, #16
 800cee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ceea:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800ceec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceee:	4b24      	ldr	r3, [pc, #144]	; (800cf80 <RCCEx_PLL2_Config+0x160>)
 800cef0:	4013      	ands	r3, r2
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	69d2      	ldr	r2, [r2, #28]
 800cef6:	00d2      	lsls	r2, r2, #3
 800cef8:	4920      	ldr	r1, [pc, #128]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cefa:	4313      	orrs	r3, r2
 800cefc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cefe:	4b1f      	ldr	r3, [pc, #124]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf02:	4a1e      	ldr	r2, [pc, #120]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf04:	f043 0310 	orr.w	r3, r3, #16
 800cf08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d106      	bne.n	800cf1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf10:	4b1a      	ldr	r3, [pc, #104]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf14:	4a19      	ldr	r2, [pc, #100]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf1c:	e00f      	b.n	800cf3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d106      	bne.n	800cf32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf24:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	4a14      	ldr	r2, [pc, #80]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf30:	e005      	b.n	800cf3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf32:	4b12      	ldr	r3, [pc, #72]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf36:	4a11      	ldr	r2, [pc, #68]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf3e:	4b0f      	ldr	r3, [pc, #60]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a0e      	ldr	r2, [pc, #56]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf4a:	f7f6 fc1b 	bl	8003784 <HAL_GetTick>
 800cf4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf50:	e008      	b.n	800cf64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf52:	f7f6 fc17 	bl	8003784 <HAL_GetTick>
 800cf56:	4602      	mov	r2, r0
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d901      	bls.n	800cf64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e006      	b.n	800cf72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <RCCEx_PLL2_Config+0x15c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d0f0      	beq.n	800cf52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	58024400 	.word	0x58024400
 800cf80:	ffff0007 	.word	0xffff0007

0800cf84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf92:	4b53      	ldr	r3, [pc, #332]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800cf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf96:	f003 0303 	and.w	r3, r3, #3
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d101      	bne.n	800cfa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e099      	b.n	800d0d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cfa2:	4b4f      	ldr	r3, [pc, #316]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a4e      	ldr	r2, [pc, #312]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800cfa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfae:	f7f6 fbe9 	bl	8003784 <HAL_GetTick>
 800cfb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfb4:	e008      	b.n	800cfc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfb6:	f7f6 fbe5 	bl	8003784 <HAL_GetTick>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d901      	bls.n	800cfc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e086      	b.n	800d0d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfc8:	4b45      	ldr	r3, [pc, #276]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1f0      	bne.n	800cfb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cfd4:	4b42      	ldr	r3, [pc, #264]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800cfd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	051b      	lsls	r3, r3, #20
 800cfe2:	493f      	ldr	r1, [pc, #252]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	628b      	str	r3, [r1, #40]	; 0x28
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	025b      	lsls	r3, r3, #9
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	431a      	orrs	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	3b01      	subs	r3, #1
 800d004:	041b      	lsls	r3, r3, #16
 800d006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d00a:	431a      	orrs	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	3b01      	subs	r3, #1
 800d012:	061b      	lsls	r3, r3, #24
 800d014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d018:	4931      	ldr	r1, [pc, #196]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d01a:	4313      	orrs	r3, r2
 800d01c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d01e:	4b30      	ldr	r3, [pc, #192]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d022:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	695b      	ldr	r3, [r3, #20]
 800d02a:	492d      	ldr	r1, [pc, #180]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d02c:	4313      	orrs	r3, r2
 800d02e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d030:	4b2b      	ldr	r3, [pc, #172]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	4928      	ldr	r1, [pc, #160]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d03e:	4313      	orrs	r3, r2
 800d040:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d042:	4b27      	ldr	r3, [pc, #156]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d046:	4a26      	ldr	r2, [pc, #152]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d04c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d04e:	4b24      	ldr	r3, [pc, #144]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d052:	4b24      	ldr	r3, [pc, #144]	; (800d0e4 <RCCEx_PLL3_Config+0x160>)
 800d054:	4013      	ands	r3, r2
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	69d2      	ldr	r2, [r2, #28]
 800d05a:	00d2      	lsls	r2, r2, #3
 800d05c:	4920      	ldr	r1, [pc, #128]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d05e:	4313      	orrs	r3, r2
 800d060:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d062:	4b1f      	ldr	r3, [pc, #124]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d066:	4a1e      	ldr	r2, [pc, #120]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d06c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d106      	bne.n	800d082 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d074:	4b1a      	ldr	r3, [pc, #104]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d078:	4a19      	ldr	r2, [pc, #100]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d07a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d07e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d080:	e00f      	b.n	800d0a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d106      	bne.n	800d096 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d088:	4b15      	ldr	r3, [pc, #84]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08c:	4a14      	ldr	r2, [pc, #80]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d08e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d092:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d094:	e005      	b.n	800d0a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d096:	4b12      	ldr	r3, [pc, #72]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09a:	4a11      	ldr	r2, [pc, #68]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d09c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0a2:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a0e      	ldr	r2, [pc, #56]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0ae:	f7f6 fb69 	bl	8003784 <HAL_GetTick>
 800d0b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0b4:	e008      	b.n	800d0c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0b6:	f7f6 fb65 	bl	8003784 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d901      	bls.n	800d0c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e006      	b.n	800d0d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0c8:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <RCCEx_PLL3_Config+0x15c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d0f0      	beq.n	800d0b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	58024400 	.word	0x58024400
 800d0e4:	ffff0007 	.word	0xffff0007

0800d0e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d071      	beq.n	800d1de <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d106      	bne.n	800d114 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7f5 fe36 	bl	8002d80 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	f003 0310 	and.w	r3, r3, #16
 800d126:	2b10      	cmp	r3, #16
 800d128:	d050      	beq.n	800d1cc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	22ca      	movs	r2, #202	; 0xca
 800d130:	625a      	str	r2, [r3, #36]	; 0x24
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2253      	movs	r2, #83	; 0x53
 800d138:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 fa4a 	bl	800d5d4 <RTC_EnterInitMode>
 800d140:	4603      	mov	r3, r0
 800d142:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d124      	bne.n	800d194 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6899      	ldr	r1, [r3, #8]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <HAL_RTC_Init+0x100>)
 800d156:	400b      	ands	r3, r1
 800d158:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6899      	ldr	r1, [r3, #8]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685a      	ldr	r2, [r3, #4]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	431a      	orrs	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	431a      	orrs	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	430a      	orrs	r2, r1
 800d176:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	0419      	lsls	r1, r3, #16
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	68da      	ldr	r2, [r3, #12]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	430a      	orrs	r2, r1
 800d188:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 fa56 	bl	800d63c <RTC_ExitInitMode>
 800d190:	4603      	mov	r3, r0
 800d192:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d194:	7bfb      	ldrb	r3, [r7, #15]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d113      	bne.n	800d1c2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f022 0203 	bic.w	r2, r2, #3
 800d1a8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	69da      	ldr	r2, [r3, #28]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	695b      	ldr	r3, [r3, #20]
 800d1b8:	431a      	orrs	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	430a      	orrs	r2, r1
 800d1c0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	22ff      	movs	r2, #255	; 0xff
 800d1c8:	625a      	str	r2, [r3, #36]	; 0x24
 800d1ca:	e001      	b.n	800d1d0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d103      	bne.n	800d1de <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	ff8fffbf 	.word	0xff8fffbf

0800d1ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d1ec:	b590      	push	{r4, r7, lr}
 800d1ee:	b087      	sub	sp, #28
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d101      	bne.n	800d206 <HAL_RTC_SetTime+0x1a>
 800d202:	2302      	movs	r3, #2
 800d204:	e089      	b.n	800d31a <HAL_RTC_SetTime+0x12e>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2202      	movs	r2, #2
 800d212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	22ca      	movs	r2, #202	; 0xca
 800d21c:	625a      	str	r2, [r3, #36]	; 0x24
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2253      	movs	r2, #83	; 0x53
 800d224:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f000 f9d4 	bl	800d5d4 <RTC_EnterInitMode>
 800d22c:	4603      	mov	r3, r0
 800d22e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d230:	7cfb      	ldrb	r3, [r7, #19]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d161      	bne.n	800d2fa <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d126      	bne.n	800d28a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d246:	2b00      	cmp	r3, #0
 800d248:	d102      	bne.n	800d250 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	2200      	movs	r2, #0
 800d24e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	4618      	mov	r0, r3
 800d256:	f000 fa2f 	bl	800d6b8 <RTC_ByteToBcd2>
 800d25a:	4603      	mov	r3, r0
 800d25c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	785b      	ldrb	r3, [r3, #1]
 800d262:	4618      	mov	r0, r3
 800d264:	f000 fa28 	bl	800d6b8 <RTC_ByteToBcd2>
 800d268:	4603      	mov	r3, r0
 800d26a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d26c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	789b      	ldrb	r3, [r3, #2]
 800d272:	4618      	mov	r0, r3
 800d274:	f000 fa20 	bl	800d6b8 <RTC_ByteToBcd2>
 800d278:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d27a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	78db      	ldrb	r3, [r3, #3]
 800d282:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d284:	4313      	orrs	r3, r2
 800d286:	617b      	str	r3, [r7, #20]
 800d288:	e018      	b.n	800d2bc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d294:	2b00      	cmp	r3, #0
 800d296:	d102      	bne.n	800d29e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2200      	movs	r2, #0
 800d29c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	785b      	ldrb	r3, [r3, #1]
 800d2a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	78db      	ldrb	r3, [r3, #3]
 800d2b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	6979      	ldr	r1, [r7, #20]
 800d2c2:	4b18      	ldr	r3, [pc, #96]	; (800d324 <HAL_RTC_SetTime+0x138>)
 800d2c4:	400b      	ands	r3, r1
 800d2c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	689a      	ldr	r2, [r3, #8]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d2d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6899      	ldr	r1, [r3, #8]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	68da      	ldr	r2, [r3, #12]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	430a      	orrs	r2, r1
 800d2ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 f9a3 	bl	800d63c <RTC_ExitInitMode>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	22ff      	movs	r2, #255	; 0xff
 800d300:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d302:	7cfb      	ldrb	r3, [r7, #19]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d103      	bne.n	800d310 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d318:	7cfb      	ldrb	r3, [r7, #19]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	371c      	adds	r7, #28
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd90      	pop	{r4, r7, pc}
 800d322:	bf00      	nop
 800d324:	007f7f7f 	.word	0x007f7f7f

0800d328 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	4b22      	ldr	r3, [pc, #136]	; (800d3dc <HAL_RTC_GetTime+0xb4>)
 800d354:	4013      	ands	r3, r2
 800d356:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	0c1b      	lsrs	r3, r3, #16
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d362:	b2da      	uxtb	r2, r3
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	0a1b      	lsrs	r3, r3, #8
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d372:	b2da      	uxtb	r2, r3
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d380:	b2da      	uxtb	r2, r3
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	0d9b      	lsrs	r3, r3, #22
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	f003 0301 	and.w	r3, r3, #1
 800d390:	b2da      	uxtb	r2, r3
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d11a      	bne.n	800d3d2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 f9a9 	bl	800d6f8 <RTC_Bcd2ToByte>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	785b      	ldrb	r3, [r3, #1]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 f9a0 	bl	800d6f8 <RTC_Bcd2ToByte>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	789b      	ldrb	r3, [r3, #2]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f000 f997 	bl	800d6f8 <RTC_Bcd2ToByte>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	007f7f7f 	.word	0x007f7f7f

0800d3e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d3e0:	b590      	push	{r4, r7, lr}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d101      	bne.n	800d3fa <HAL_RTC_SetDate+0x1a>
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	e073      	b.n	800d4e2 <HAL_RTC_SetDate+0x102>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2202      	movs	r2, #2
 800d406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10e      	bne.n	800d42e <HAL_RTC_SetDate+0x4e>
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	785b      	ldrb	r3, [r3, #1]
 800d414:	f003 0310 	and.w	r3, r3, #16
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d008      	beq.n	800d42e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	785b      	ldrb	r3, [r3, #1]
 800d420:	f023 0310 	bic.w	r3, r3, #16
 800d424:	b2db      	uxtb	r3, r3
 800d426:	330a      	adds	r3, #10
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d11c      	bne.n	800d46e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	78db      	ldrb	r3, [r3, #3]
 800d438:	4618      	mov	r0, r3
 800d43a:	f000 f93d 	bl	800d6b8 <RTC_ByteToBcd2>
 800d43e:	4603      	mov	r3, r0
 800d440:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	785b      	ldrb	r3, [r3, #1]
 800d446:	4618      	mov	r0, r3
 800d448:	f000 f936 	bl	800d6b8 <RTC_ByteToBcd2>
 800d44c:	4603      	mov	r3, r0
 800d44e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d450:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	789b      	ldrb	r3, [r3, #2]
 800d456:	4618      	mov	r0, r3
 800d458:	f000 f92e 	bl	800d6b8 <RTC_ByteToBcd2>
 800d45c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d45e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d468:	4313      	orrs	r3, r2
 800d46a:	617b      	str	r3, [r7, #20]
 800d46c:	e00e      	b.n	800d48c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	78db      	ldrb	r3, [r3, #3]
 800d472:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	785b      	ldrb	r3, [r3, #1]
 800d478:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d47a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d480:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d488:	4313      	orrs	r3, r2
 800d48a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	22ca      	movs	r2, #202	; 0xca
 800d492:	625a      	str	r2, [r3, #36]	; 0x24
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2253      	movs	r2, #83	; 0x53
 800d49a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f000 f899 	bl	800d5d4 <RTC_EnterInitMode>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d4a6:	7cfb      	ldrb	r3, [r7, #19]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	6979      	ldr	r1, [r7, #20]
 800d4b2:	4b0e      	ldr	r3, [pc, #56]	; (800d4ec <HAL_RTC_SetDate+0x10c>)
 800d4b4:	400b      	ands	r3, r1
 800d4b6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 f8bf 	bl	800d63c <RTC_ExitInitMode>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	22ff      	movs	r2, #255	; 0xff
 800d4c8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d4ca:	7cfb      	ldrb	r3, [r7, #19]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d103      	bne.n	800d4d8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d4e0:	7cfb      	ldrb	r3, [r7, #19]


}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd90      	pop	{r4, r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	00ffff3f 	.word	0x00ffff3f

0800d4f0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	4b21      	ldr	r3, [pc, #132]	; (800d588 <HAL_RTC_GetDate+0x98>)
 800d504:	4013      	ands	r3, r2
 800d506:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	0c1b      	lsrs	r3, r3, #16
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	0a1b      	lsrs	r3, r3, #8
 800d516:	b2db      	uxtb	r3, r3
 800d518:	f003 031f 	and.w	r3, r3, #31
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	b2db      	uxtb	r3, r3
 800d526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	0b5b      	lsrs	r3, r3, #13
 800d534:	b2db      	uxtb	r3, r3
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d11a      	bne.n	800d57c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	78db      	ldrb	r3, [r3, #3]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 f8d4 	bl	800d6f8 <RTC_Bcd2ToByte>
 800d550:	4603      	mov	r3, r0
 800d552:	461a      	mov	r2, r3
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	785b      	ldrb	r3, [r3, #1]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 f8cb 	bl	800d6f8 <RTC_Bcd2ToByte>
 800d562:	4603      	mov	r3, r0
 800d564:	461a      	mov	r2, r3
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	789b      	ldrb	r3, [r3, #2]
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 f8c2 	bl	800d6f8 <RTC_Bcd2ToByte>
 800d574:	4603      	mov	r3, r0
 800d576:	461a      	mov	r2, r3
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	00ffff3f 	.word	0x00ffff3f

0800d58c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a0d      	ldr	r2, [pc, #52]	; (800d5d0 <HAL_RTC_WaitForSynchro+0x44>)
 800d59a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d59c:	f7f6 f8f2 	bl	8003784 <HAL_GetTick>
 800d5a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d5a2:	e009      	b.n	800d5b8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d5a4:	f7f6 f8ee 	bl	8003784 <HAL_GetTick>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5b2:	d901      	bls.n	800d5b8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	e007      	b.n	800d5c8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	f003 0320 	and.w	r3, r3, #32
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d0ee      	beq.n	800d5a4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	0003ff5f 	.word	0x0003ff5f

0800d5d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d120      	bne.n	800d630 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d5f8:	f7f6 f8c4 	bl	8003784 <HAL_GetTick>
 800d5fc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d5fe:	e00d      	b.n	800d61c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d600:	f7f6 f8c0 	bl	8003784 <HAL_GetTick>
 800d604:	4602      	mov	r2, r0
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d60e:	d905      	bls.n	800d61c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d610:	2303      	movs	r3, #3
 800d612:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2203      	movs	r2, #3
 800d618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	d102      	bne.n	800d630 <RTC_EnterInitMode+0x5c>
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d1e7      	bne.n	800d600 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d630:	7bfb      	ldrb	r3, [r7, #15]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d648:	4b1a      	ldr	r3, [pc, #104]	; (800d6b4 <RTC_ExitInitMode+0x78>)
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	4a19      	ldr	r2, [pc, #100]	; (800d6b4 <RTC_ExitInitMode+0x78>)
 800d64e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d652:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d654:	4b17      	ldr	r3, [pc, #92]	; (800d6b4 <RTC_ExitInitMode+0x78>)
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f003 0320 	and.w	r3, r3, #32
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10c      	bne.n	800d67a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff ff93 	bl	800d58c <HAL_RTC_WaitForSynchro>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01e      	beq.n	800d6aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2203      	movs	r2, #3
 800d670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d674:	2303      	movs	r3, #3
 800d676:	73fb      	strb	r3, [r7, #15]
 800d678:	e017      	b.n	800d6aa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d67a:	4b0e      	ldr	r3, [pc, #56]	; (800d6b4 <RTC_ExitInitMode+0x78>)
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	4a0d      	ldr	r2, [pc, #52]	; (800d6b4 <RTC_ExitInitMode+0x78>)
 800d680:	f023 0320 	bic.w	r3, r3, #32
 800d684:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff ff80 	bl	800d58c <HAL_RTC_WaitForSynchro>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d005      	beq.n	800d69e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2203      	movs	r2, #3
 800d696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d69a:	2303      	movs	r3, #3
 800d69c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d69e:	4b05      	ldr	r3, [pc, #20]	; (800d6b4 <RTC_ExitInitMode+0x78>)
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	4a04      	ldr	r2, [pc, #16]	; (800d6b4 <RTC_ExitInitMode+0x78>)
 800d6a4:	f043 0320 	orr.w	r3, r3, #32
 800d6a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	58004000 	.word	0x58004000

0800d6b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d6ca:	e005      	b.n	800d6d8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d6d2:	7afb      	ldrb	r3, [r7, #11]
 800d6d4:	3b0a      	subs	r3, #10
 800d6d6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	2b09      	cmp	r3, #9
 800d6dc:	d8f6      	bhi.n	800d6cc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	7afb      	ldrb	r3, [r7, #11]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	b2db      	uxtb	r3, r3
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3714      	adds	r7, #20
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	4603      	mov	r3, r0
 800d700:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	091b      	lsrs	r3, r3, #4
 800d706:	b2db      	uxtb	r3, r3
 800d708:	461a      	mov	r2, r3
 800d70a:	0092      	lsls	r2, r2, #2
 800d70c:	4413      	add	r3, r2
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	f003 030f 	and.w	r3, r3, #15
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
 800d71c:	4413      	add	r3, r2
 800d71e:	b2db      	uxtb	r3, r3
}
 800d720:	4618      	mov	r0, r3
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d101      	bne.n	800d73e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e10f      	b.n	800d95e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a87      	ldr	r2, [pc, #540]	; (800d968 <HAL_SPI_Init+0x23c>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d00f      	beq.n	800d76e <HAL_SPI_Init+0x42>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a86      	ldr	r2, [pc, #536]	; (800d96c <HAL_SPI_Init+0x240>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d00a      	beq.n	800d76e <HAL_SPI_Init+0x42>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a84      	ldr	r2, [pc, #528]	; (800d970 <HAL_SPI_Init+0x244>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d005      	beq.n	800d76e <HAL_SPI_Init+0x42>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	2b0f      	cmp	r3, #15
 800d768:	d901      	bls.n	800d76e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e0f7      	b.n	800d95e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fc12 	bl	800df98 <SPI_GetPacketSize>
 800d774:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a7b      	ldr	r2, [pc, #492]	; (800d968 <HAL_SPI_Init+0x23c>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d00c      	beq.n	800d79a <HAL_SPI_Init+0x6e>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a79      	ldr	r2, [pc, #484]	; (800d96c <HAL_SPI_Init+0x240>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d007      	beq.n	800d79a <HAL_SPI_Init+0x6e>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a78      	ldr	r2, [pc, #480]	; (800d970 <HAL_SPI_Init+0x244>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d002      	beq.n	800d79a <HAL_SPI_Init+0x6e>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2b08      	cmp	r3, #8
 800d798:	d811      	bhi.n	800d7be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d79e:	4a72      	ldr	r2, [pc, #456]	; (800d968 <HAL_SPI_Init+0x23c>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d009      	beq.n	800d7b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a70      	ldr	r2, [pc, #448]	; (800d96c <HAL_SPI_Init+0x240>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d004      	beq.n	800d7b8 <HAL_SPI_Init+0x8c>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a6f      	ldr	r2, [pc, #444]	; (800d970 <HAL_SPI_Init+0x244>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d104      	bne.n	800d7c2 <HAL_SPI_Init+0x96>
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b10      	cmp	r3, #16
 800d7bc:	d901      	bls.n	800d7c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e0cd      	b.n	800d95e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d106      	bne.n	800d7dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7f5 fb04 	bl	8002de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f022 0201 	bic.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d7fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d808:	d119      	bne.n	800d83e <HAL_SPI_Init+0x112>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d812:	d103      	bne.n	800d81c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d008      	beq.n	800d82e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10c      	bne.n	800d83e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d82c:	d107      	bne.n	800d83e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d83c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00f      	beq.n	800d86a <HAL_SPI_Init+0x13e>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	2b06      	cmp	r3, #6
 800d850:	d90b      	bls.n	800d86a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	430a      	orrs	r2, r1
 800d866:	601a      	str	r2, [r3, #0]
 800d868:	e007      	b.n	800d87a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d878:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	69da      	ldr	r2, [r3, #28]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d882:	431a      	orrs	r2, r3
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	431a      	orrs	r2, r3
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d88c:	ea42 0103 	orr.w	r1, r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	68da      	ldr	r2, [r3, #12]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	430a      	orrs	r2, r1
 800d89a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8aa:	431a      	orrs	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	431a      	orrs	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	431a      	orrs	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	695b      	ldr	r3, [r3, #20]
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	431a      	orrs	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	431a      	orrs	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	431a      	orrs	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8da:	ea42 0103 	orr.w	r1, r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	430a      	orrs	r2, r1
 800d8e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d113      	bne.n	800d91a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d904:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d918:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f022 0201 	bic.w	r2, r2, #1
 800d928:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00a      	beq.n	800d94c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	430a      	orrs	r2, r1
 800d94a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	40013000 	.word	0x40013000
 800d96c:	40003800 	.word	0x40003800
 800d970:	40003c00 	.word	0x40003c00

0800d974 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	603b      	str	r3, [r7, #0]
 800d980:	4613      	mov	r3, r2
 800d982:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d988:	095b      	lsrs	r3, r3, #5
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	3301      	adds	r3, #1
 800d98e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3330      	adds	r3, #48	; 0x30
 800d996:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d998:	f7f5 fef4 	bl	8003784 <HAL_GetTick>
 800d99c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d001      	beq.n	800d9ae <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d9aa:	2302      	movs	r3, #2
 800d9ac:	e250      	b.n	800de50 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <HAL_SPI_Receive+0x46>
 800d9b4:	88fb      	ldrh	r3, [r7, #6]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e248      	b.n	800de50 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d101      	bne.n	800d9cc <HAL_SPI_Receive+0x58>
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	e241      	b.n	800de50 <HAL_SPI_Receive+0x4dc>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2204      	movs	r2, #4
 800d9d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	68ba      	ldr	r2, [r7, #8]
 800d9e8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	88fa      	ldrh	r2, [r7, #6]
 800d9ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	88fa      	ldrh	r2, [r7, #6]
 800d9f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800da24:	d108      	bne.n	800da38 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	e009      	b.n	800da4c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800da4a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	685a      	ldr	r2, [r3, #4]
 800da52:	4b95      	ldr	r3, [pc, #596]	; (800dca8 <HAL_SPI_Receive+0x334>)
 800da54:	4013      	ands	r3, r2
 800da56:	88f9      	ldrh	r1, [r7, #6]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	6812      	ldr	r2, [r2, #0]
 800da5c:	430b      	orrs	r3, r1
 800da5e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f042 0201 	orr.w	r2, r2, #1
 800da6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da78:	d107      	bne.n	800da8a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	2b0f      	cmp	r3, #15
 800da90:	d96c      	bls.n	800db6c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800da92:	e064      	b.n	800db5e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	695b      	ldr	r3, [r3, #20]
 800da9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	f003 0301 	and.w	r3, r3, #1
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d114      	bne.n	800dad4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dab4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daba:	1d1a      	adds	r2, r3, #4
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	3b01      	subs	r3, #1
 800daca:	b29a      	uxth	r2, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dad2:	e044      	b.n	800db5e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dada:	b29b      	uxth	r3, r3
 800dadc:	8bfa      	ldrh	r2, [r7, #30]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d919      	bls.n	800db16 <HAL_SPI_Receive+0x1a2>
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d014      	beq.n	800db16 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800daf6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dafc:	1d1a      	adds	r2, r3, #4
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db08:	b29b      	uxth	r3, r3
 800db0a:	3b01      	subs	r3, #1
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db14:	e023      	b.n	800db5e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db16:	f7f5 fe35 	bl	8003784 <HAL_GetTick>
 800db1a:	4602      	mov	r2, r0
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	683a      	ldr	r2, [r7, #0]
 800db22:	429a      	cmp	r2, r3
 800db24:	d803      	bhi.n	800db2e <HAL_SPI_Receive+0x1ba>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db2c:	d102      	bne.n	800db34 <HAL_SPI_Receive+0x1c0>
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d114      	bne.n	800db5e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 f98f 	bl	800de58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2200      	movs	r2, #0
 800db56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e178      	b.n	800de50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db64:	b29b      	uxth	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d194      	bne.n	800da94 <HAL_SPI_Receive+0x120>
 800db6a:	e15e      	b.n	800de2a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	2b07      	cmp	r3, #7
 800db72:	f240 8153 	bls.w	800de1c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800db76:	e08f      	b.n	800dc98 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d114      	bne.n	800dbb8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db92:	69ba      	ldr	r2, [r7, #24]
 800db94:	8812      	ldrh	r2, [r2, #0]
 800db96:	b292      	uxth	r2, r2
 800db98:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db9e:	1c9a      	adds	r2, r3, #2
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	3b01      	subs	r3, #1
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbb6:	e06f      	b.n	800dc98 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	8bfa      	ldrh	r2, [r7, #30]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d924      	bls.n	800dc10 <HAL_SPI_Receive+0x29c>
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d01f      	beq.n	800dc10 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd4:	69ba      	ldr	r2, [r7, #24]
 800dbd6:	8812      	ldrh	r2, [r2, #0]
 800dbd8:	b292      	uxth	r2, r2
 800dbda:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbe0:	1c9a      	adds	r2, r3, #2
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbea:	69ba      	ldr	r2, [r7, #24]
 800dbec:	8812      	ldrh	r2, [r2, #0]
 800dbee:	b292      	uxth	r2, r2
 800dbf0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbf6:	1c9a      	adds	r2, r3, #2
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	3b02      	subs	r3, #2
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc0e:	e043      	b.n	800dc98 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d119      	bne.n	800dc50 <HAL_SPI_Receive+0x2dc>
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d014      	beq.n	800dc50 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	8812      	ldrh	r2, [r2, #0]
 800dc2e:	b292      	uxth	r2, r2
 800dc30:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc36:	1c9a      	adds	r2, r3, #2
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	3b01      	subs	r3, #1
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc4e:	e023      	b.n	800dc98 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc50:	f7f5 fd98 	bl	8003784 <HAL_GetTick>
 800dc54:	4602      	mov	r2, r0
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d803      	bhi.n	800dc68 <HAL_SPI_Receive+0x2f4>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc66:	d102      	bne.n	800dc6e <HAL_SPI_Receive+0x2fa>
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d114      	bne.n	800dc98 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f000 f8f2 	bl	800de58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dc94:	2303      	movs	r3, #3
 800dc96:	e0db      	b.n	800de50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f47f af69 	bne.w	800db78 <HAL_SPI_Receive+0x204>
 800dca6:	e0c0      	b.n	800de2a <HAL_SPI_Receive+0x4b6>
 800dca8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	695b      	ldr	r3, [r3, #20]
 800dcb2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	f003 0301 	and.w	r3, r3, #1
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d117      	bne.n	800dcf2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcce:	7812      	ldrb	r2, [r2, #0]
 800dcd0:	b2d2      	uxtb	r2, r2
 800dcd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd8:	1c5a      	adds	r2, r3, #1
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	3b01      	subs	r3, #1
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcf0:	e094      	b.n	800de1c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	8bfa      	ldrh	r2, [r7, #30]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d946      	bls.n	800dd8e <HAL_SPI_Receive+0x41a>
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d041      	beq.n	800dd8e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd16:	7812      	ldrb	r2, [r2, #0]
 800dd18:	b2d2      	uxtb	r2, r2
 800dd1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd32:	7812      	ldrb	r2, [r2, #0]
 800dd34:	b2d2      	uxtb	r2, r2
 800dd36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd3c:	1c5a      	adds	r2, r3, #1
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd4e:	7812      	ldrb	r2, [r2, #0]
 800dd50:	b2d2      	uxtb	r2, r2
 800dd52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd58:	1c5a      	adds	r2, r3, #1
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd6a:	7812      	ldrb	r2, [r2, #0]
 800dd6c:	b2d2      	uxtb	r2, r2
 800dd6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd74:	1c5a      	adds	r2, r3, #1
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	3b04      	subs	r3, #4
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd8c:	e046      	b.n	800de1c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d81c      	bhi.n	800ddd4 <HAL_SPI_Receive+0x460>
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d017      	beq.n	800ddd4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb0:	7812      	ldrb	r2, [r2, #0]
 800ddb2:	b2d2      	uxtb	r2, r2
 800ddb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddd2:	e023      	b.n	800de1c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddd4:	f7f5 fcd6 	bl	8003784 <HAL_GetTick>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d803      	bhi.n	800ddec <HAL_SPI_Receive+0x478>
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddea:	d102      	bne.n	800ddf2 <HAL_SPI_Receive+0x47e>
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d114      	bne.n	800de1c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f000 f830 	bl	800de58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2200      	movs	r2, #0
 800de14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de18:	2303      	movs	r3, #3
 800de1a:	e019      	b.n	800de50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de22:	b29b      	uxth	r3, r3
 800de24:	2b00      	cmp	r3, #0
 800de26:	f47f af41 	bne.w	800dcac <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 f814 	bl	800de58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e000      	b.n	800de50 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800de4e:	2300      	movs	r3, #0
  }
}
 800de50:	4618      	mov	r0, r3
 800de52:	3720      	adds	r7, #32
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	699a      	ldr	r2, [r3, #24]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f042 0208 	orr.w	r2, r2, #8
 800de76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	699a      	ldr	r2, [r3, #24]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f042 0210 	orr.w	r2, r2, #16
 800de86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f022 0201 	bic.w	r2, r2, #1
 800de96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6919      	ldr	r1, [r3, #16]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	4b3c      	ldr	r3, [pc, #240]	; (800df94 <SPI_CloseTransfer+0x13c>)
 800dea4:	400b      	ands	r3, r1
 800dea6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689a      	ldr	r2, [r3, #8]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800deb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b04      	cmp	r3, #4
 800dec2:	d014      	beq.n	800deee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f003 0320 	and.w	r3, r3, #32
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00f      	beq.n	800deee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ded4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	699a      	ldr	r2, [r3, #24]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f042 0220 	orr.w	r2, r2, #32
 800deec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b03      	cmp	r3, #3
 800def8:	d014      	beq.n	800df24 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00f      	beq.n	800df24 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df0a:	f043 0204 	orr.w	r2, r3, #4
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	699a      	ldr	r2, [r3, #24]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df22:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00f      	beq.n	800df4e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df34:	f043 0201 	orr.w	r2, r3, #1
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	699a      	ldr	r2, [r3, #24]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df4c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00f      	beq.n	800df78 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df5e:	f043 0208 	orr.w	r2, r3, #8
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	699a      	ldr	r2, [r3, #24]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df76:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800df88:	bf00      	nop
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr
 800df94:	fffffc90 	.word	0xfffffc90

0800df98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa4:	095b      	lsrs	r3, r3, #5
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	3307      	adds	r3, #7
 800dfb6:	08db      	lsrs	r3, r3, #3
 800dfb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	fb02 f303 	mul.w	r3, r2, r3
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b082      	sub	sp, #8
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d101      	bne.n	800dfe0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e049      	b.n	800e074 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d106      	bne.n	800dffa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7f4 ffab 	bl	8002f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2202      	movs	r2, #2
 800dffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	3304      	adds	r3, #4
 800e00a:	4619      	mov	r1, r3
 800e00c:	4610      	mov	r0, r2
 800e00e:	f000 ff41 	bl	800ee94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2201      	movs	r2, #1
 800e036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2201      	movs	r2, #1
 800e046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d001      	beq.n	800e094 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e090:	2301      	movs	r3, #1
 800e092:	e04c      	b.n	800e12e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2202      	movs	r2, #2
 800e098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a26      	ldr	r2, [pc, #152]	; (800e13c <HAL_TIM_Base_Start+0xc0>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d022      	beq.n	800e0ec <HAL_TIM_Base_Start+0x70>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0ae:	d01d      	beq.n	800e0ec <HAL_TIM_Base_Start+0x70>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a22      	ldr	r2, [pc, #136]	; (800e140 <HAL_TIM_Base_Start+0xc4>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d018      	beq.n	800e0ec <HAL_TIM_Base_Start+0x70>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a21      	ldr	r2, [pc, #132]	; (800e144 <HAL_TIM_Base_Start+0xc8>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d013      	beq.n	800e0ec <HAL_TIM_Base_Start+0x70>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a1f      	ldr	r2, [pc, #124]	; (800e148 <HAL_TIM_Base_Start+0xcc>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d00e      	beq.n	800e0ec <HAL_TIM_Base_Start+0x70>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4a1e      	ldr	r2, [pc, #120]	; (800e14c <HAL_TIM_Base_Start+0xd0>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d009      	beq.n	800e0ec <HAL_TIM_Base_Start+0x70>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a1c      	ldr	r2, [pc, #112]	; (800e150 <HAL_TIM_Base_Start+0xd4>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d004      	beq.n	800e0ec <HAL_TIM_Base_Start+0x70>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4a1b      	ldr	r2, [pc, #108]	; (800e154 <HAL_TIM_Base_Start+0xd8>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d115      	bne.n	800e118 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	689a      	ldr	r2, [r3, #8]
 800e0f2:	4b19      	ldr	r3, [pc, #100]	; (800e158 <HAL_TIM_Base_Start+0xdc>)
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b06      	cmp	r3, #6
 800e0fc:	d015      	beq.n	800e12a <HAL_TIM_Base_Start+0xae>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e104:	d011      	beq.n	800e12a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f042 0201 	orr.w	r2, r2, #1
 800e114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e116:	e008      	b.n	800e12a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f042 0201 	orr.w	r2, r2, #1
 800e126:	601a      	str	r2, [r3, #0]
 800e128:	e000      	b.n	800e12c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e12a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	40010000 	.word	0x40010000
 800e140:	40000400 	.word	0x40000400
 800e144:	40000800 	.word	0x40000800
 800e148:	40000c00 	.word	0x40000c00
 800e14c:	40010400 	.word	0x40010400
 800e150:	40001800 	.word	0x40001800
 800e154:	40014000 	.word	0x40014000
 800e158:	00010007 	.word	0x00010007

0800e15c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6a1a      	ldr	r2, [r3, #32]
 800e16a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e16e:	4013      	ands	r3, r2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d10f      	bne.n	800e194 <HAL_TIM_Base_Stop+0x38>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6a1a      	ldr	r2, [r3, #32]
 800e17a:	f240 4344 	movw	r3, #1092	; 0x444
 800e17e:	4013      	ands	r3, r2
 800e180:	2b00      	cmp	r3, #0
 800e182:	d107      	bne.n	800e194 <HAL_TIM_Base_Stop+0x38>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f022 0201 	bic.w	r2, r2, #1
 800e192:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
	...

0800e1ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d001      	beq.n	800e1c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e054      	b.n	800e26e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	68da      	ldr	r2, [r3, #12]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f042 0201 	orr.w	r2, r2, #1
 800e1da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a26      	ldr	r2, [pc, #152]	; (800e27c <HAL_TIM_Base_Start_IT+0xd0>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d022      	beq.n	800e22c <HAL_TIM_Base_Start_IT+0x80>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1ee:	d01d      	beq.n	800e22c <HAL_TIM_Base_Start_IT+0x80>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a22      	ldr	r2, [pc, #136]	; (800e280 <HAL_TIM_Base_Start_IT+0xd4>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d018      	beq.n	800e22c <HAL_TIM_Base_Start_IT+0x80>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a21      	ldr	r2, [pc, #132]	; (800e284 <HAL_TIM_Base_Start_IT+0xd8>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d013      	beq.n	800e22c <HAL_TIM_Base_Start_IT+0x80>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a1f      	ldr	r2, [pc, #124]	; (800e288 <HAL_TIM_Base_Start_IT+0xdc>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d00e      	beq.n	800e22c <HAL_TIM_Base_Start_IT+0x80>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a1e      	ldr	r2, [pc, #120]	; (800e28c <HAL_TIM_Base_Start_IT+0xe0>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d009      	beq.n	800e22c <HAL_TIM_Base_Start_IT+0x80>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a1c      	ldr	r2, [pc, #112]	; (800e290 <HAL_TIM_Base_Start_IT+0xe4>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d004      	beq.n	800e22c <HAL_TIM_Base_Start_IT+0x80>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a1b      	ldr	r2, [pc, #108]	; (800e294 <HAL_TIM_Base_Start_IT+0xe8>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d115      	bne.n	800e258 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	689a      	ldr	r2, [r3, #8]
 800e232:	4b19      	ldr	r3, [pc, #100]	; (800e298 <HAL_TIM_Base_Start_IT+0xec>)
 800e234:	4013      	ands	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b06      	cmp	r3, #6
 800e23c:	d015      	beq.n	800e26a <HAL_TIM_Base_Start_IT+0xbe>
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e244:	d011      	beq.n	800e26a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f042 0201 	orr.w	r2, r2, #1
 800e254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e256:	e008      	b.n	800e26a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f042 0201 	orr.w	r2, r2, #1
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	e000      	b.n	800e26c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e26a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	40010000 	.word	0x40010000
 800e280:	40000400 	.word	0x40000400
 800e284:	40000800 	.word	0x40000800
 800e288:	40000c00 	.word	0x40000c00
 800e28c:	40010400 	.word	0x40010400
 800e290:	40001800 	.word	0x40001800
 800e294:	40014000 	.word	0x40014000
 800e298:	00010007 	.word	0x00010007

0800e29c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d109      	bne.n	800e2c4 <HAL_TIM_OC_Start_IT+0x28>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	bf14      	ite	ne
 800e2bc:	2301      	movne	r3, #1
 800e2be:	2300      	moveq	r3, #0
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	e03c      	b.n	800e33e <HAL_TIM_OC_Start_IT+0xa2>
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	d109      	bne.n	800e2de <HAL_TIM_OC_Start_IT+0x42>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	bf14      	ite	ne
 800e2d6:	2301      	movne	r3, #1
 800e2d8:	2300      	moveq	r3, #0
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	e02f      	b.n	800e33e <HAL_TIM_OC_Start_IT+0xa2>
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b08      	cmp	r3, #8
 800e2e2:	d109      	bne.n	800e2f8 <HAL_TIM_OC_Start_IT+0x5c>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	bf14      	ite	ne
 800e2f0:	2301      	movne	r3, #1
 800e2f2:	2300      	moveq	r3, #0
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	e022      	b.n	800e33e <HAL_TIM_OC_Start_IT+0xa2>
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	2b0c      	cmp	r3, #12
 800e2fc:	d109      	bne.n	800e312 <HAL_TIM_OC_Start_IT+0x76>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e304:	b2db      	uxtb	r3, r3
 800e306:	2b01      	cmp	r3, #1
 800e308:	bf14      	ite	ne
 800e30a:	2301      	movne	r3, #1
 800e30c:	2300      	moveq	r3, #0
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	e015      	b.n	800e33e <HAL_TIM_OC_Start_IT+0xa2>
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b10      	cmp	r3, #16
 800e316:	d109      	bne.n	800e32c <HAL_TIM_OC_Start_IT+0x90>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	2b01      	cmp	r3, #1
 800e322:	bf14      	ite	ne
 800e324:	2301      	movne	r3, #1
 800e326:	2300      	moveq	r3, #0
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	e008      	b.n	800e33e <HAL_TIM_OC_Start_IT+0xa2>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e332:	b2db      	uxtb	r3, r3
 800e334:	2b01      	cmp	r3, #1
 800e336:	bf14      	ite	ne
 800e338:	2301      	movne	r3, #1
 800e33a:	2300      	moveq	r3, #0
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e0ec      	b.n	800e520 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d104      	bne.n	800e356 <HAL_TIM_OC_Start_IT+0xba>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2202      	movs	r2, #2
 800e350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e354:	e023      	b.n	800e39e <HAL_TIM_OC_Start_IT+0x102>
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	2b04      	cmp	r3, #4
 800e35a:	d104      	bne.n	800e366 <HAL_TIM_OC_Start_IT+0xca>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2202      	movs	r2, #2
 800e360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e364:	e01b      	b.n	800e39e <HAL_TIM_OC_Start_IT+0x102>
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b08      	cmp	r3, #8
 800e36a:	d104      	bne.n	800e376 <HAL_TIM_OC_Start_IT+0xda>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2202      	movs	r2, #2
 800e370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e374:	e013      	b.n	800e39e <HAL_TIM_OC_Start_IT+0x102>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	2b0c      	cmp	r3, #12
 800e37a:	d104      	bne.n	800e386 <HAL_TIM_OC_Start_IT+0xea>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2202      	movs	r2, #2
 800e380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e384:	e00b      	b.n	800e39e <HAL_TIM_OC_Start_IT+0x102>
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b10      	cmp	r3, #16
 800e38a:	d104      	bne.n	800e396 <HAL_TIM_OC_Start_IT+0xfa>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2202      	movs	r2, #2
 800e390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e394:	e003      	b.n	800e39e <HAL_TIM_OC_Start_IT+0x102>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2202      	movs	r2, #2
 800e39a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	2b0c      	cmp	r3, #12
 800e3a2:	d841      	bhi.n	800e428 <HAL_TIM_OC_Start_IT+0x18c>
 800e3a4:	a201      	add	r2, pc, #4	; (adr r2, 800e3ac <HAL_TIM_OC_Start_IT+0x110>)
 800e3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3aa:	bf00      	nop
 800e3ac:	0800e3e1 	.word	0x0800e3e1
 800e3b0:	0800e429 	.word	0x0800e429
 800e3b4:	0800e429 	.word	0x0800e429
 800e3b8:	0800e429 	.word	0x0800e429
 800e3bc:	0800e3f3 	.word	0x0800e3f3
 800e3c0:	0800e429 	.word	0x0800e429
 800e3c4:	0800e429 	.word	0x0800e429
 800e3c8:	0800e429 	.word	0x0800e429
 800e3cc:	0800e405 	.word	0x0800e405
 800e3d0:	0800e429 	.word	0x0800e429
 800e3d4:	0800e429 	.word	0x0800e429
 800e3d8:	0800e429 	.word	0x0800e429
 800e3dc:	0800e417 	.word	0x0800e417
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68da      	ldr	r2, [r3, #12]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f042 0202 	orr.w	r2, r2, #2
 800e3ee:	60da      	str	r2, [r3, #12]
      break;
 800e3f0:	e01d      	b.n	800e42e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	68da      	ldr	r2, [r3, #12]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f042 0204 	orr.w	r2, r2, #4
 800e400:	60da      	str	r2, [r3, #12]
      break;
 800e402:	e014      	b.n	800e42e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	68da      	ldr	r2, [r3, #12]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f042 0208 	orr.w	r2, r2, #8
 800e412:	60da      	str	r2, [r3, #12]
      break;
 800e414:	e00b      	b.n	800e42e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68da      	ldr	r2, [r3, #12]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f042 0210 	orr.w	r2, r2, #16
 800e424:	60da      	str	r2, [r3, #12]
      break;
 800e426:	e002      	b.n	800e42e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e428:	2301      	movs	r3, #1
 800e42a:	73fb      	strb	r3, [r7, #15]
      break;
 800e42c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e42e:	7bfb      	ldrb	r3, [r7, #15]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d174      	bne.n	800e51e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2201      	movs	r2, #1
 800e43a:	6839      	ldr	r1, [r7, #0]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f001 f943 	bl	800f6c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a38      	ldr	r2, [pc, #224]	; (800e528 <HAL_TIM_OC_Start_IT+0x28c>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d013      	beq.n	800e474 <HAL_TIM_OC_Start_IT+0x1d8>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a36      	ldr	r2, [pc, #216]	; (800e52c <HAL_TIM_OC_Start_IT+0x290>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d00e      	beq.n	800e474 <HAL_TIM_OC_Start_IT+0x1d8>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a35      	ldr	r2, [pc, #212]	; (800e530 <HAL_TIM_OC_Start_IT+0x294>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d009      	beq.n	800e474 <HAL_TIM_OC_Start_IT+0x1d8>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a33      	ldr	r2, [pc, #204]	; (800e534 <HAL_TIM_OC_Start_IT+0x298>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d004      	beq.n	800e474 <HAL_TIM_OC_Start_IT+0x1d8>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a32      	ldr	r2, [pc, #200]	; (800e538 <HAL_TIM_OC_Start_IT+0x29c>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d101      	bne.n	800e478 <HAL_TIM_OC_Start_IT+0x1dc>
 800e474:	2301      	movs	r3, #1
 800e476:	e000      	b.n	800e47a <HAL_TIM_OC_Start_IT+0x1de>
 800e478:	2300      	movs	r3, #0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d007      	beq.n	800e48e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e48c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a25      	ldr	r2, [pc, #148]	; (800e528 <HAL_TIM_OC_Start_IT+0x28c>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d022      	beq.n	800e4de <HAL_TIM_OC_Start_IT+0x242>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4a0:	d01d      	beq.n	800e4de <HAL_TIM_OC_Start_IT+0x242>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a25      	ldr	r2, [pc, #148]	; (800e53c <HAL_TIM_OC_Start_IT+0x2a0>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d018      	beq.n	800e4de <HAL_TIM_OC_Start_IT+0x242>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a23      	ldr	r2, [pc, #140]	; (800e540 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d013      	beq.n	800e4de <HAL_TIM_OC_Start_IT+0x242>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a22      	ldr	r2, [pc, #136]	; (800e544 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d00e      	beq.n	800e4de <HAL_TIM_OC_Start_IT+0x242>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a19      	ldr	r2, [pc, #100]	; (800e52c <HAL_TIM_OC_Start_IT+0x290>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d009      	beq.n	800e4de <HAL_TIM_OC_Start_IT+0x242>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a1e      	ldr	r2, [pc, #120]	; (800e548 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d004      	beq.n	800e4de <HAL_TIM_OC_Start_IT+0x242>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a15      	ldr	r2, [pc, #84]	; (800e530 <HAL_TIM_OC_Start_IT+0x294>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d115      	bne.n	800e50a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	689a      	ldr	r2, [r3, #8]
 800e4e4:	4b19      	ldr	r3, [pc, #100]	; (800e54c <HAL_TIM_OC_Start_IT+0x2b0>)
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	2b06      	cmp	r3, #6
 800e4ee:	d015      	beq.n	800e51c <HAL_TIM_OC_Start_IT+0x280>
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4f6:	d011      	beq.n	800e51c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f042 0201 	orr.w	r2, r2, #1
 800e506:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e508:	e008      	b.n	800e51c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f042 0201 	orr.w	r2, r2, #1
 800e518:	601a      	str	r2, [r3, #0]
 800e51a:	e000      	b.n	800e51e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e51c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	40010000 	.word	0x40010000
 800e52c:	40010400 	.word	0x40010400
 800e530:	40014000 	.word	0x40014000
 800e534:	40014400 	.word	0x40014400
 800e538:	40014800 	.word	0x40014800
 800e53c:	40000400 	.word	0x40000400
 800e540:	40000800 	.word	0x40000800
 800e544:	40000c00 	.word	0x40000c00
 800e548:	40001800 	.word	0x40001800
 800e54c:	00010007 	.word	0x00010007

0800e550 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d101      	bne.n	800e562 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e55e:	2301      	movs	r3, #1
 800e560:	e049      	b.n	800e5f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d106      	bne.n	800e57c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f841 	bl	800e5fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2202      	movs	r2, #2
 800e580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	3304      	adds	r3, #4
 800e58c:	4619      	mov	r1, r3
 800e58e:	4610      	mov	r0, r2
 800e590:	f000 fc80 	bl	800ee94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2201      	movs	r2, #1
 800e598:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e606:	bf00      	nop
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
	...

0800e614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d109      	bne.n	800e638 <HAL_TIM_PWM_Start+0x24>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	bf14      	ite	ne
 800e630:	2301      	movne	r3, #1
 800e632:	2300      	moveq	r3, #0
 800e634:	b2db      	uxtb	r3, r3
 800e636:	e03c      	b.n	800e6b2 <HAL_TIM_PWM_Start+0x9e>
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	2b04      	cmp	r3, #4
 800e63c:	d109      	bne.n	800e652 <HAL_TIM_PWM_Start+0x3e>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b01      	cmp	r3, #1
 800e648:	bf14      	ite	ne
 800e64a:	2301      	movne	r3, #1
 800e64c:	2300      	moveq	r3, #0
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	e02f      	b.n	800e6b2 <HAL_TIM_PWM_Start+0x9e>
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	2b08      	cmp	r3, #8
 800e656:	d109      	bne.n	800e66c <HAL_TIM_PWM_Start+0x58>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	2b01      	cmp	r3, #1
 800e662:	bf14      	ite	ne
 800e664:	2301      	movne	r3, #1
 800e666:	2300      	moveq	r3, #0
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	e022      	b.n	800e6b2 <HAL_TIM_PWM_Start+0x9e>
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	2b0c      	cmp	r3, #12
 800e670:	d109      	bne.n	800e686 <HAL_TIM_PWM_Start+0x72>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	bf14      	ite	ne
 800e67e:	2301      	movne	r3, #1
 800e680:	2300      	moveq	r3, #0
 800e682:	b2db      	uxtb	r3, r3
 800e684:	e015      	b.n	800e6b2 <HAL_TIM_PWM_Start+0x9e>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b10      	cmp	r3, #16
 800e68a:	d109      	bne.n	800e6a0 <HAL_TIM_PWM_Start+0x8c>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b01      	cmp	r3, #1
 800e696:	bf14      	ite	ne
 800e698:	2301      	movne	r3, #1
 800e69a:	2300      	moveq	r3, #0
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	e008      	b.n	800e6b2 <HAL_TIM_PWM_Start+0x9e>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	bf14      	ite	ne
 800e6ac:	2301      	movne	r3, #1
 800e6ae:	2300      	moveq	r3, #0
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e0a1      	b.n	800e7fe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d104      	bne.n	800e6ca <HAL_TIM_PWM_Start+0xb6>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6c8:	e023      	b.n	800e712 <HAL_TIM_PWM_Start+0xfe>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	d104      	bne.n	800e6da <HAL_TIM_PWM_Start+0xc6>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6d8:	e01b      	b.n	800e712 <HAL_TIM_PWM_Start+0xfe>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b08      	cmp	r3, #8
 800e6de:	d104      	bne.n	800e6ea <HAL_TIM_PWM_Start+0xd6>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2202      	movs	r2, #2
 800e6e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6e8:	e013      	b.n	800e712 <HAL_TIM_PWM_Start+0xfe>
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	2b0c      	cmp	r3, #12
 800e6ee:	d104      	bne.n	800e6fa <HAL_TIM_PWM_Start+0xe6>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6f8:	e00b      	b.n	800e712 <HAL_TIM_PWM_Start+0xfe>
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	2b10      	cmp	r3, #16
 800e6fe:	d104      	bne.n	800e70a <HAL_TIM_PWM_Start+0xf6>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2202      	movs	r2, #2
 800e704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e708:	e003      	b.n	800e712 <HAL_TIM_PWM_Start+0xfe>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2202      	movs	r2, #2
 800e70e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2201      	movs	r2, #1
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	4618      	mov	r0, r3
 800e71c:	f000 ffd4 	bl	800f6c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a38      	ldr	r2, [pc, #224]	; (800e808 <HAL_TIM_PWM_Start+0x1f4>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d013      	beq.n	800e752 <HAL_TIM_PWM_Start+0x13e>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a37      	ldr	r2, [pc, #220]	; (800e80c <HAL_TIM_PWM_Start+0x1f8>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d00e      	beq.n	800e752 <HAL_TIM_PWM_Start+0x13e>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a35      	ldr	r2, [pc, #212]	; (800e810 <HAL_TIM_PWM_Start+0x1fc>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d009      	beq.n	800e752 <HAL_TIM_PWM_Start+0x13e>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a34      	ldr	r2, [pc, #208]	; (800e814 <HAL_TIM_PWM_Start+0x200>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d004      	beq.n	800e752 <HAL_TIM_PWM_Start+0x13e>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a32      	ldr	r2, [pc, #200]	; (800e818 <HAL_TIM_PWM_Start+0x204>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d101      	bne.n	800e756 <HAL_TIM_PWM_Start+0x142>
 800e752:	2301      	movs	r3, #1
 800e754:	e000      	b.n	800e758 <HAL_TIM_PWM_Start+0x144>
 800e756:	2300      	movs	r3, #0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d007      	beq.n	800e76c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e76a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a25      	ldr	r2, [pc, #148]	; (800e808 <HAL_TIM_PWM_Start+0x1f4>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d022      	beq.n	800e7bc <HAL_TIM_PWM_Start+0x1a8>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e77e:	d01d      	beq.n	800e7bc <HAL_TIM_PWM_Start+0x1a8>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a25      	ldr	r2, [pc, #148]	; (800e81c <HAL_TIM_PWM_Start+0x208>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d018      	beq.n	800e7bc <HAL_TIM_PWM_Start+0x1a8>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a24      	ldr	r2, [pc, #144]	; (800e820 <HAL_TIM_PWM_Start+0x20c>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d013      	beq.n	800e7bc <HAL_TIM_PWM_Start+0x1a8>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a22      	ldr	r2, [pc, #136]	; (800e824 <HAL_TIM_PWM_Start+0x210>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d00e      	beq.n	800e7bc <HAL_TIM_PWM_Start+0x1a8>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4a1a      	ldr	r2, [pc, #104]	; (800e80c <HAL_TIM_PWM_Start+0x1f8>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d009      	beq.n	800e7bc <HAL_TIM_PWM_Start+0x1a8>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a1e      	ldr	r2, [pc, #120]	; (800e828 <HAL_TIM_PWM_Start+0x214>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d004      	beq.n	800e7bc <HAL_TIM_PWM_Start+0x1a8>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a16      	ldr	r2, [pc, #88]	; (800e810 <HAL_TIM_PWM_Start+0x1fc>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d115      	bne.n	800e7e8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	4b1a      	ldr	r3, [pc, #104]	; (800e82c <HAL_TIM_PWM_Start+0x218>)
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b06      	cmp	r3, #6
 800e7cc:	d015      	beq.n	800e7fa <HAL_TIM_PWM_Start+0x1e6>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7d4:	d011      	beq.n	800e7fa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f042 0201 	orr.w	r2, r2, #1
 800e7e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7e6:	e008      	b.n	800e7fa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f042 0201 	orr.w	r2, r2, #1
 800e7f6:	601a      	str	r2, [r3, #0]
 800e7f8:	e000      	b.n	800e7fc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	40010000 	.word	0x40010000
 800e80c:	40010400 	.word	0x40010400
 800e810:	40014000 	.word	0x40014000
 800e814:	40014400 	.word	0x40014400
 800e818:	40014800 	.word	0x40014800
 800e81c:	40000400 	.word	0x40000400
 800e820:	40000800 	.word	0x40000800
 800e824:	40000c00 	.word	0x40000c00
 800e828:	40001800 	.word	0x40001800
 800e82c:	00010007 	.word	0x00010007

0800e830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f003 0302 	and.w	r3, r3, #2
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d020      	beq.n	800e894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f003 0302 	and.w	r3, r3, #2
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d01b      	beq.n	800e894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f06f 0202 	mvn.w	r2, #2
 800e864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2201      	movs	r2, #1
 800e86a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	699b      	ldr	r3, [r3, #24]
 800e872:	f003 0303 	and.w	r3, r3, #3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 faec 	bl	800ee58 <HAL_TIM_IC_CaptureCallback>
 800e880:	e005      	b.n	800e88e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7f1 feae 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 faef 	bl	800ee6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f003 0304 	and.w	r3, r3, #4
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d020      	beq.n	800e8e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f003 0304 	and.w	r3, r3, #4
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01b      	beq.n	800e8e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f06f 0204 	mvn.w	r2, #4
 800e8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	699b      	ldr	r3, [r3, #24]
 800e8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d003      	beq.n	800e8ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fac6 	bl	800ee58 <HAL_TIM_IC_CaptureCallback>
 800e8cc:	e005      	b.n	800e8da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7f1 fe88 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 fac9 	bl	800ee6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	f003 0308 	and.w	r3, r3, #8
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d020      	beq.n	800e92c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f003 0308 	and.w	r3, r3, #8
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d01b      	beq.n	800e92c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f06f 0208 	mvn.w	r2, #8
 800e8fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2204      	movs	r2, #4
 800e902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	69db      	ldr	r3, [r3, #28]
 800e90a:	f003 0303 	and.w	r3, r3, #3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d003      	beq.n	800e91a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 faa0 	bl	800ee58 <HAL_TIM_IC_CaptureCallback>
 800e918:	e005      	b.n	800e926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7f1 fe62 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 faa3 	bl	800ee6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	f003 0310 	and.w	r3, r3, #16
 800e932:	2b00      	cmp	r3, #0
 800e934:	d020      	beq.n	800e978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f003 0310 	and.w	r3, r3, #16
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d01b      	beq.n	800e978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f06f 0210 	mvn.w	r2, #16
 800e948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2208      	movs	r2, #8
 800e94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fa7a 	bl	800ee58 <HAL_TIM_IC_CaptureCallback>
 800e964:	e005      	b.n	800e972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7f1 fe3c 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 fa7d 	bl	800ee6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f003 0301 	and.w	r3, r3, #1
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00c      	beq.n	800e99c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d007      	beq.n	800e99c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f06f 0201 	mvn.w	r2, #1
 800e994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7f3 ffb6 	bl	8002908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d104      	bne.n	800e9b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00c      	beq.n	800e9ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d007      	beq.n	800e9ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800e9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 ffbb 	bl	800f940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00c      	beq.n	800e9ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d007      	beq.n	800e9ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 ffb3 	bl	800f954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00c      	beq.n	800ea12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d007      	beq.n	800ea12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fa37 	bl	800ee80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	f003 0320 	and.w	r3, r3, #32
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00c      	beq.n	800ea36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f003 0320 	and.w	r3, r3, #32
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d007      	beq.n	800ea36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f06f 0220 	mvn.w	r2, #32
 800ea2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 ff7b 	bl	800f92c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea36:	bf00      	nop
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
	...

0800ea40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d101      	bne.n	800ea5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ea5a:	2302      	movs	r3, #2
 800ea5c:	e0ff      	b.n	800ec5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b14      	cmp	r3, #20
 800ea6a:	f200 80f0 	bhi.w	800ec4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ea6e:	a201      	add	r2, pc, #4	; (adr r2, 800ea74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ea70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea74:	0800eac9 	.word	0x0800eac9
 800ea78:	0800ec4f 	.word	0x0800ec4f
 800ea7c:	0800ec4f 	.word	0x0800ec4f
 800ea80:	0800ec4f 	.word	0x0800ec4f
 800ea84:	0800eb09 	.word	0x0800eb09
 800ea88:	0800ec4f 	.word	0x0800ec4f
 800ea8c:	0800ec4f 	.word	0x0800ec4f
 800ea90:	0800ec4f 	.word	0x0800ec4f
 800ea94:	0800eb4b 	.word	0x0800eb4b
 800ea98:	0800ec4f 	.word	0x0800ec4f
 800ea9c:	0800ec4f 	.word	0x0800ec4f
 800eaa0:	0800ec4f 	.word	0x0800ec4f
 800eaa4:	0800eb8b 	.word	0x0800eb8b
 800eaa8:	0800ec4f 	.word	0x0800ec4f
 800eaac:	0800ec4f 	.word	0x0800ec4f
 800eab0:	0800ec4f 	.word	0x0800ec4f
 800eab4:	0800ebcd 	.word	0x0800ebcd
 800eab8:	0800ec4f 	.word	0x0800ec4f
 800eabc:	0800ec4f 	.word	0x0800ec4f
 800eac0:	0800ec4f 	.word	0x0800ec4f
 800eac4:	0800ec0d 	.word	0x0800ec0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68b9      	ldr	r1, [r7, #8]
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 fa86 	bl	800efe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	699a      	ldr	r2, [r3, #24]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f042 0208 	orr.w	r2, r2, #8
 800eae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	699a      	ldr	r2, [r3, #24]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f022 0204 	bic.w	r2, r2, #4
 800eaf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6999      	ldr	r1, [r3, #24]
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	691a      	ldr	r2, [r3, #16]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	430a      	orrs	r2, r1
 800eb04:	619a      	str	r2, [r3, #24]
      break;
 800eb06:	e0a5      	b.n	800ec54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68b9      	ldr	r1, [r7, #8]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 faf6 	bl	800f100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	699a      	ldr	r2, [r3, #24]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	699a      	ldr	r2, [r3, #24]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6999      	ldr	r1, [r3, #24]
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	021a      	lsls	r2, r3, #8
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	430a      	orrs	r2, r1
 800eb46:	619a      	str	r2, [r3, #24]
      break;
 800eb48:	e084      	b.n	800ec54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	68b9      	ldr	r1, [r7, #8]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f000 fb5f 	bl	800f214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	69da      	ldr	r2, [r3, #28]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f042 0208 	orr.w	r2, r2, #8
 800eb64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	69da      	ldr	r2, [r3, #28]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f022 0204 	bic.w	r2, r2, #4
 800eb74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	69d9      	ldr	r1, [r3, #28]
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	691a      	ldr	r2, [r3, #16]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	430a      	orrs	r2, r1
 800eb86:	61da      	str	r2, [r3, #28]
      break;
 800eb88:	e064      	b.n	800ec54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68b9      	ldr	r1, [r7, #8]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 fbc7 	bl	800f324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	69da      	ldr	r2, [r3, #28]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	69da      	ldr	r2, [r3, #28]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	69d9      	ldr	r1, [r3, #28]
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	021a      	lsls	r2, r3, #8
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	430a      	orrs	r2, r1
 800ebc8:	61da      	str	r2, [r3, #28]
      break;
 800ebca:	e043      	b.n	800ec54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68b9      	ldr	r1, [r7, #8]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f000 fc10 	bl	800f3f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f042 0208 	orr.w	r2, r2, #8
 800ebe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f022 0204 	bic.w	r2, r2, #4
 800ebf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	691a      	ldr	r2, [r3, #16]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	430a      	orrs	r2, r1
 800ec08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec0a:	e023      	b.n	800ec54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68b9      	ldr	r1, [r7, #8]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f000 fc54 	bl	800f4c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	021a      	lsls	r2, r3, #8
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	430a      	orrs	r2, r1
 800ec4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec4c:	e002      	b.n	800ec54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	75fb      	strb	r3, [r7, #23]
      break;
 800ec52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3718      	adds	r7, #24
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop

0800ec68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec72:	2300      	movs	r3, #0
 800ec74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d101      	bne.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c>
 800ec80:	2302      	movs	r3, #2
 800ec82:	e0dc      	b.n	800ee3e <HAL_TIM_ConfigClockSource+0x1d6>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2202      	movs	r2, #2
 800ec90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	4b6a      	ldr	r3, [pc, #424]	; (800ee48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eca0:	4013      	ands	r3, r2
 800eca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ecaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68ba      	ldr	r2, [r7, #8]
 800ecb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a64      	ldr	r2, [pc, #400]	; (800ee4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	f000 80a9 	beq.w	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ecc0:	4a62      	ldr	r2, [pc, #392]	; (800ee4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	f200 80ae 	bhi.w	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ecc8:	4a61      	ldr	r2, [pc, #388]	; (800ee50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	f000 80a1 	beq.w	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ecd0:	4a5f      	ldr	r2, [pc, #380]	; (800ee50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	f200 80a6 	bhi.w	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ecd8:	4a5e      	ldr	r2, [pc, #376]	; (800ee54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	f000 8099 	beq.w	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ece0:	4a5c      	ldr	r2, [pc, #368]	; (800ee54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	f200 809e 	bhi.w	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ece8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ecec:	f000 8091 	beq.w	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ecf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ecf4:	f200 8096 	bhi.w	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ecf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecfc:	f000 8089 	beq.w	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed04:	f200 808e 	bhi.w	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed0c:	d03e      	beq.n	800ed8c <HAL_TIM_ConfigClockSource+0x124>
 800ed0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed12:	f200 8087 	bhi.w	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed1a:	f000 8086 	beq.w	800ee2a <HAL_TIM_ConfigClockSource+0x1c2>
 800ed1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed22:	d87f      	bhi.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed24:	2b70      	cmp	r3, #112	; 0x70
 800ed26:	d01a      	beq.n	800ed5e <HAL_TIM_ConfigClockSource+0xf6>
 800ed28:	2b70      	cmp	r3, #112	; 0x70
 800ed2a:	d87b      	bhi.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed2c:	2b60      	cmp	r3, #96	; 0x60
 800ed2e:	d050      	beq.n	800edd2 <HAL_TIM_ConfigClockSource+0x16a>
 800ed30:	2b60      	cmp	r3, #96	; 0x60
 800ed32:	d877      	bhi.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed34:	2b50      	cmp	r3, #80	; 0x50
 800ed36:	d03c      	beq.n	800edb2 <HAL_TIM_ConfigClockSource+0x14a>
 800ed38:	2b50      	cmp	r3, #80	; 0x50
 800ed3a:	d873      	bhi.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed3c:	2b40      	cmp	r3, #64	; 0x40
 800ed3e:	d058      	beq.n	800edf2 <HAL_TIM_ConfigClockSource+0x18a>
 800ed40:	2b40      	cmp	r3, #64	; 0x40
 800ed42:	d86f      	bhi.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed44:	2b30      	cmp	r3, #48	; 0x30
 800ed46:	d064      	beq.n	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed48:	2b30      	cmp	r3, #48	; 0x30
 800ed4a:	d86b      	bhi.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed4c:	2b20      	cmp	r3, #32
 800ed4e:	d060      	beq.n	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed50:	2b20      	cmp	r3, #32
 800ed52:	d867      	bhi.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d05c      	beq.n	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed58:	2b10      	cmp	r3, #16
 800ed5a:	d05a      	beq.n	800ee12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed5c:	e062      	b.n	800ee24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6818      	ldr	r0, [r3, #0]
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	6899      	ldr	r1, [r3, #8]
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	685a      	ldr	r2, [r3, #4]
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	f000 fc8b 	bl	800f688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ed80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	609a      	str	r2, [r3, #8]
      break;
 800ed8a:	e04f      	b.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6818      	ldr	r0, [r3, #0]
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	6899      	ldr	r1, [r3, #8]
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	f000 fc74 	bl	800f688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	689a      	ldr	r2, [r3, #8]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800edae:	609a      	str	r2, [r3, #8]
      break;
 800edb0:	e03c      	b.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6818      	ldr	r0, [r3, #0]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	6859      	ldr	r1, [r3, #4]
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	461a      	mov	r2, r3
 800edc0:	f000 fbe4 	bl	800f58c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2150      	movs	r1, #80	; 0x50
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 fc3e 	bl	800f64c <TIM_ITRx_SetConfig>
      break;
 800edd0:	e02c      	b.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6818      	ldr	r0, [r3, #0]
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	6859      	ldr	r1, [r3, #4]
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	461a      	mov	r2, r3
 800ede0:	f000 fc03 	bl	800f5ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2160      	movs	r1, #96	; 0x60
 800edea:	4618      	mov	r0, r3
 800edec:	f000 fc2e 	bl	800f64c <TIM_ITRx_SetConfig>
      break;
 800edf0:	e01c      	b.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6818      	ldr	r0, [r3, #0]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	6859      	ldr	r1, [r3, #4]
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	461a      	mov	r2, r3
 800ee00:	f000 fbc4 	bl	800f58c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2140      	movs	r1, #64	; 0x40
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 fc1e 	bl	800f64c <TIM_ITRx_SetConfig>
      break;
 800ee10:	e00c      	b.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4610      	mov	r0, r2
 800ee1e:	f000 fc15 	bl	800f64c <TIM_ITRx_SetConfig>
      break;
 800ee22:	e003      	b.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	73fb      	strb	r3, [r7, #15]
      break;
 800ee28:	e000      	b.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ee2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	ffceff88 	.word	0xffceff88
 800ee4c:	00100040 	.word	0x00100040
 800ee50:	00100030 	.word	0x00100030
 800ee54:	00100020 	.word	0x00100020

0800ee58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee74:	bf00      	nop
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a46      	ldr	r2, [pc, #280]	; (800efc0 <TIM_Base_SetConfig+0x12c>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d013      	beq.n	800eed4 <TIM_Base_SetConfig+0x40>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeb2:	d00f      	beq.n	800eed4 <TIM_Base_SetConfig+0x40>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a43      	ldr	r2, [pc, #268]	; (800efc4 <TIM_Base_SetConfig+0x130>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00b      	beq.n	800eed4 <TIM_Base_SetConfig+0x40>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a42      	ldr	r2, [pc, #264]	; (800efc8 <TIM_Base_SetConfig+0x134>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d007      	beq.n	800eed4 <TIM_Base_SetConfig+0x40>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a41      	ldr	r2, [pc, #260]	; (800efcc <TIM_Base_SetConfig+0x138>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d003      	beq.n	800eed4 <TIM_Base_SetConfig+0x40>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a40      	ldr	r2, [pc, #256]	; (800efd0 <TIM_Base_SetConfig+0x13c>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d108      	bne.n	800eee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a35      	ldr	r2, [pc, #212]	; (800efc0 <TIM_Base_SetConfig+0x12c>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d01f      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eef4:	d01b      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4a32      	ldr	r2, [pc, #200]	; (800efc4 <TIM_Base_SetConfig+0x130>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d017      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a31      	ldr	r2, [pc, #196]	; (800efc8 <TIM_Base_SetConfig+0x134>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d013      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a30      	ldr	r2, [pc, #192]	; (800efcc <TIM_Base_SetConfig+0x138>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d00f      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a2f      	ldr	r2, [pc, #188]	; (800efd0 <TIM_Base_SetConfig+0x13c>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d00b      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a2e      	ldr	r2, [pc, #184]	; (800efd4 <TIM_Base_SetConfig+0x140>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d007      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a2d      	ldr	r2, [pc, #180]	; (800efd8 <TIM_Base_SetConfig+0x144>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d003      	beq.n	800ef2e <TIM_Base_SetConfig+0x9a>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a2c      	ldr	r2, [pc, #176]	; (800efdc <TIM_Base_SetConfig+0x148>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d108      	bne.n	800ef40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	695b      	ldr	r3, [r3, #20]
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	689a      	ldr	r2, [r3, #8]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	4a16      	ldr	r2, [pc, #88]	; (800efc0 <TIM_Base_SetConfig+0x12c>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d00f      	beq.n	800ef8c <TIM_Base_SetConfig+0xf8>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4a18      	ldr	r2, [pc, #96]	; (800efd0 <TIM_Base_SetConfig+0x13c>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d00b      	beq.n	800ef8c <TIM_Base_SetConfig+0xf8>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a17      	ldr	r2, [pc, #92]	; (800efd4 <TIM_Base_SetConfig+0x140>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d007      	beq.n	800ef8c <TIM_Base_SetConfig+0xf8>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4a16      	ldr	r2, [pc, #88]	; (800efd8 <TIM_Base_SetConfig+0x144>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d003      	beq.n	800ef8c <TIM_Base_SetConfig+0xf8>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4a15      	ldr	r2, [pc, #84]	; (800efdc <TIM_Base_SetConfig+0x148>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d103      	bne.n	800ef94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	691a      	ldr	r2, [r3, #16]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d105      	bne.n	800efb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	f023 0201 	bic.w	r2, r3, #1
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	611a      	str	r2, [r3, #16]
  }
}
 800efb2:	bf00      	nop
 800efb4:	3714      	adds	r7, #20
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	40010000 	.word	0x40010000
 800efc4:	40000400 	.word	0x40000400
 800efc8:	40000800 	.word	0x40000800
 800efcc:	40000c00 	.word	0x40000c00
 800efd0:	40010400 	.word	0x40010400
 800efd4:	40014000 	.word	0x40014000
 800efd8:	40014400 	.word	0x40014400
 800efdc:	40014800 	.word	0x40014800

0800efe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a1b      	ldr	r3, [r3, #32]
 800efee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a1b      	ldr	r3, [r3, #32]
 800eff4:	f023 0201 	bic.w	r2, r3, #1
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	4b37      	ldr	r3, [pc, #220]	; (800f0e8 <TIM_OC1_SetConfig+0x108>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f023 0303 	bic.w	r3, r3, #3
 800f016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	4313      	orrs	r3, r2
 800f020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f023 0302 	bic.w	r3, r3, #2
 800f028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	697a      	ldr	r2, [r7, #20]
 800f030:	4313      	orrs	r3, r2
 800f032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a2d      	ldr	r2, [pc, #180]	; (800f0ec <TIM_OC1_SetConfig+0x10c>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d00f      	beq.n	800f05c <TIM_OC1_SetConfig+0x7c>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a2c      	ldr	r2, [pc, #176]	; (800f0f0 <TIM_OC1_SetConfig+0x110>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d00b      	beq.n	800f05c <TIM_OC1_SetConfig+0x7c>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a2b      	ldr	r2, [pc, #172]	; (800f0f4 <TIM_OC1_SetConfig+0x114>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d007      	beq.n	800f05c <TIM_OC1_SetConfig+0x7c>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a2a      	ldr	r2, [pc, #168]	; (800f0f8 <TIM_OC1_SetConfig+0x118>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d003      	beq.n	800f05c <TIM_OC1_SetConfig+0x7c>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a29      	ldr	r2, [pc, #164]	; (800f0fc <TIM_OC1_SetConfig+0x11c>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d10c      	bne.n	800f076 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	f023 0308 	bic.w	r3, r3, #8
 800f062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	697a      	ldr	r2, [r7, #20]
 800f06a:	4313      	orrs	r3, r2
 800f06c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	f023 0304 	bic.w	r3, r3, #4
 800f074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4a1c      	ldr	r2, [pc, #112]	; (800f0ec <TIM_OC1_SetConfig+0x10c>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d00f      	beq.n	800f09e <TIM_OC1_SetConfig+0xbe>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4a1b      	ldr	r2, [pc, #108]	; (800f0f0 <TIM_OC1_SetConfig+0x110>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d00b      	beq.n	800f09e <TIM_OC1_SetConfig+0xbe>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a1a      	ldr	r2, [pc, #104]	; (800f0f4 <TIM_OC1_SetConfig+0x114>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d007      	beq.n	800f09e <TIM_OC1_SetConfig+0xbe>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a19      	ldr	r2, [pc, #100]	; (800f0f8 <TIM_OC1_SetConfig+0x118>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d003      	beq.n	800f09e <TIM_OC1_SetConfig+0xbe>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a18      	ldr	r2, [pc, #96]	; (800f0fc <TIM_OC1_SetConfig+0x11c>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d111      	bne.n	800f0c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	695b      	ldr	r3, [r3, #20]
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	699b      	ldr	r3, [r3, #24]
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	693a      	ldr	r2, [r7, #16]
 800f0c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	621a      	str	r2, [r3, #32]
}
 800f0dc:	bf00      	nop
 800f0de:	371c      	adds	r7, #28
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	fffeff8f 	.word	0xfffeff8f
 800f0ec:	40010000 	.word	0x40010000
 800f0f0:	40010400 	.word	0x40010400
 800f0f4:	40014000 	.word	0x40014000
 800f0f8:	40014400 	.word	0x40014400
 800f0fc:	40014800 	.word	0x40014800

0800f100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f100:	b480      	push	{r7}
 800f102:	b087      	sub	sp, #28
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6a1b      	ldr	r3, [r3, #32]
 800f10e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a1b      	ldr	r3, [r3, #32]
 800f114:	f023 0210 	bic.w	r2, r3, #16
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	4b34      	ldr	r3, [pc, #208]	; (800f1fc <TIM_OC2_SetConfig+0xfc>)
 800f12c:	4013      	ands	r3, r2
 800f12e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	021b      	lsls	r3, r3, #8
 800f13e:	68fa      	ldr	r2, [r7, #12]
 800f140:	4313      	orrs	r3, r2
 800f142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	f023 0320 	bic.w	r3, r3, #32
 800f14a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	011b      	lsls	r3, r3, #4
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	4313      	orrs	r3, r2
 800f156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a29      	ldr	r2, [pc, #164]	; (800f200 <TIM_OC2_SetConfig+0x100>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d003      	beq.n	800f168 <TIM_OC2_SetConfig+0x68>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a28      	ldr	r2, [pc, #160]	; (800f204 <TIM_OC2_SetConfig+0x104>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d10d      	bne.n	800f184 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f16e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	011b      	lsls	r3, r3, #4
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	4313      	orrs	r3, r2
 800f17a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f182:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a1e      	ldr	r2, [pc, #120]	; (800f200 <TIM_OC2_SetConfig+0x100>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d00f      	beq.n	800f1ac <TIM_OC2_SetConfig+0xac>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a1d      	ldr	r2, [pc, #116]	; (800f204 <TIM_OC2_SetConfig+0x104>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d00b      	beq.n	800f1ac <TIM_OC2_SetConfig+0xac>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a1c      	ldr	r2, [pc, #112]	; (800f208 <TIM_OC2_SetConfig+0x108>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d007      	beq.n	800f1ac <TIM_OC2_SetConfig+0xac>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a1b      	ldr	r2, [pc, #108]	; (800f20c <TIM_OC2_SetConfig+0x10c>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d003      	beq.n	800f1ac <TIM_OC2_SetConfig+0xac>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a1a      	ldr	r2, [pc, #104]	; (800f210 <TIM_OC2_SetConfig+0x110>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d113      	bne.n	800f1d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	695b      	ldr	r3, [r3, #20]
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	693a      	ldr	r2, [r7, #16]
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	699b      	ldr	r3, [r3, #24]
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	693a      	ldr	r2, [r7, #16]
 800f1d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	685a      	ldr	r2, [r3, #4]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	621a      	str	r2, [r3, #32]
}
 800f1ee:	bf00      	nop
 800f1f0:	371c      	adds	r7, #28
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	feff8fff 	.word	0xfeff8fff
 800f200:	40010000 	.word	0x40010000
 800f204:	40010400 	.word	0x40010400
 800f208:	40014000 	.word	0x40014000
 800f20c:	40014400 	.word	0x40014400
 800f210:	40014800 	.word	0x40014800

0800f214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a1b      	ldr	r3, [r3, #32]
 800f222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	69db      	ldr	r3, [r3, #28]
 800f23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	4b33      	ldr	r3, [pc, #204]	; (800f30c <TIM_OC3_SetConfig+0xf8>)
 800f240:	4013      	ands	r3, r2
 800f242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f023 0303 	bic.w	r3, r3, #3
 800f24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	4313      	orrs	r3, r2
 800f254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f25c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	021b      	lsls	r3, r3, #8
 800f264:	697a      	ldr	r2, [r7, #20]
 800f266:	4313      	orrs	r3, r2
 800f268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4a28      	ldr	r2, [pc, #160]	; (800f310 <TIM_OC3_SetConfig+0xfc>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d003      	beq.n	800f27a <TIM_OC3_SetConfig+0x66>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4a27      	ldr	r2, [pc, #156]	; (800f314 <TIM_OC3_SetConfig+0x100>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d10d      	bne.n	800f296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	021b      	lsls	r3, r3, #8
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a1d      	ldr	r2, [pc, #116]	; (800f310 <TIM_OC3_SetConfig+0xfc>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d00f      	beq.n	800f2be <TIM_OC3_SetConfig+0xaa>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4a1c      	ldr	r2, [pc, #112]	; (800f314 <TIM_OC3_SetConfig+0x100>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d00b      	beq.n	800f2be <TIM_OC3_SetConfig+0xaa>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a1b      	ldr	r2, [pc, #108]	; (800f318 <TIM_OC3_SetConfig+0x104>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d007      	beq.n	800f2be <TIM_OC3_SetConfig+0xaa>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a1a      	ldr	r2, [pc, #104]	; (800f31c <TIM_OC3_SetConfig+0x108>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d003      	beq.n	800f2be <TIM_OC3_SetConfig+0xaa>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a19      	ldr	r2, [pc, #100]	; (800f320 <TIM_OC3_SetConfig+0x10c>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d113      	bne.n	800f2e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	695b      	ldr	r3, [r3, #20]
 800f2d2:	011b      	lsls	r3, r3, #4
 800f2d4:	693a      	ldr	r2, [r7, #16]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	699b      	ldr	r3, [r3, #24]
 800f2de:	011b      	lsls	r3, r3, #4
 800f2e0:	693a      	ldr	r2, [r7, #16]
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	693a      	ldr	r2, [r7, #16]
 800f2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	685a      	ldr	r2, [r3, #4]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	697a      	ldr	r2, [r7, #20]
 800f2fe:	621a      	str	r2, [r3, #32]
}
 800f300:	bf00      	nop
 800f302:	371c      	adds	r7, #28
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	fffeff8f 	.word	0xfffeff8f
 800f310:	40010000 	.word	0x40010000
 800f314:	40010400 	.word	0x40010400
 800f318:	40014000 	.word	0x40014000
 800f31c:	40014400 	.word	0x40014400
 800f320:	40014800 	.word	0x40014800

0800f324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f324:	b480      	push	{r7}
 800f326:	b087      	sub	sp, #28
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a1b      	ldr	r3, [r3, #32]
 800f332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a1b      	ldr	r3, [r3, #32]
 800f338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	69db      	ldr	r3, [r3, #28]
 800f34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	4b24      	ldr	r3, [pc, #144]	; (800f3e0 <TIM_OC4_SetConfig+0xbc>)
 800f350:	4013      	ands	r3, r2
 800f352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f35a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	021b      	lsls	r3, r3, #8
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	4313      	orrs	r3, r2
 800f366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f36e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	031b      	lsls	r3, r3, #12
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	4313      	orrs	r3, r2
 800f37a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4a19      	ldr	r2, [pc, #100]	; (800f3e4 <TIM_OC4_SetConfig+0xc0>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d00f      	beq.n	800f3a4 <TIM_OC4_SetConfig+0x80>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a18      	ldr	r2, [pc, #96]	; (800f3e8 <TIM_OC4_SetConfig+0xc4>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d00b      	beq.n	800f3a4 <TIM_OC4_SetConfig+0x80>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a17      	ldr	r2, [pc, #92]	; (800f3ec <TIM_OC4_SetConfig+0xc8>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d007      	beq.n	800f3a4 <TIM_OC4_SetConfig+0x80>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a16      	ldr	r2, [pc, #88]	; (800f3f0 <TIM_OC4_SetConfig+0xcc>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d003      	beq.n	800f3a4 <TIM_OC4_SetConfig+0x80>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a15      	ldr	r2, [pc, #84]	; (800f3f4 <TIM_OC4_SetConfig+0xd0>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d109      	bne.n	800f3b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	695b      	ldr	r3, [r3, #20]
 800f3b0:	019b      	lsls	r3, r3, #6
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	685a      	ldr	r2, [r3, #4]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	693a      	ldr	r2, [r7, #16]
 800f3d0:	621a      	str	r2, [r3, #32]
}
 800f3d2:	bf00      	nop
 800f3d4:	371c      	adds	r7, #28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	feff8fff 	.word	0xfeff8fff
 800f3e4:	40010000 	.word	0x40010000
 800f3e8:	40010400 	.word	0x40010400
 800f3ec:	40014000 	.word	0x40014000
 800f3f0:	40014400 	.word	0x40014400
 800f3f4:	40014800 	.word	0x40014800

0800f3f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b087      	sub	sp, #28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6a1b      	ldr	r3, [r3, #32]
 800f406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6a1b      	ldr	r3, [r3, #32]
 800f40c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	4b21      	ldr	r3, [pc, #132]	; (800f4a8 <TIM_OC5_SetConfig+0xb0>)
 800f424:	4013      	ands	r3, r2
 800f426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f438:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	041b      	lsls	r3, r3, #16
 800f440:	693a      	ldr	r2, [r7, #16]
 800f442:	4313      	orrs	r3, r2
 800f444:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a18      	ldr	r2, [pc, #96]	; (800f4ac <TIM_OC5_SetConfig+0xb4>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d00f      	beq.n	800f46e <TIM_OC5_SetConfig+0x76>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a17      	ldr	r2, [pc, #92]	; (800f4b0 <TIM_OC5_SetConfig+0xb8>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d00b      	beq.n	800f46e <TIM_OC5_SetConfig+0x76>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a16      	ldr	r2, [pc, #88]	; (800f4b4 <TIM_OC5_SetConfig+0xbc>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d007      	beq.n	800f46e <TIM_OC5_SetConfig+0x76>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a15      	ldr	r2, [pc, #84]	; (800f4b8 <TIM_OC5_SetConfig+0xc0>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d003      	beq.n	800f46e <TIM_OC5_SetConfig+0x76>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a14      	ldr	r2, [pc, #80]	; (800f4bc <TIM_OC5_SetConfig+0xc4>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d109      	bne.n	800f482 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f474:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	695b      	ldr	r3, [r3, #20]
 800f47a:	021b      	lsls	r3, r3, #8
 800f47c:	697a      	ldr	r2, [r7, #20]
 800f47e:	4313      	orrs	r3, r2
 800f480:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	697a      	ldr	r2, [r7, #20]
 800f486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	685a      	ldr	r2, [r3, #4]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	693a      	ldr	r2, [r7, #16]
 800f49a:	621a      	str	r2, [r3, #32]
}
 800f49c:	bf00      	nop
 800f49e:	371c      	adds	r7, #28
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr
 800f4a8:	fffeff8f 	.word	0xfffeff8f
 800f4ac:	40010000 	.word	0x40010000
 800f4b0:	40010400 	.word	0x40010400
 800f4b4:	40014000 	.word	0x40014000
 800f4b8:	40014400 	.word	0x40014400
 800f4bc:	40014800 	.word	0x40014800

0800f4c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6a1b      	ldr	r3, [r3, #32]
 800f4d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	4b22      	ldr	r3, [pc, #136]	; (800f574 <TIM_OC6_SetConfig+0xb4>)
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	021b      	lsls	r3, r3, #8
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	051b      	lsls	r3, r3, #20
 800f50a:	693a      	ldr	r2, [r7, #16]
 800f50c:	4313      	orrs	r3, r2
 800f50e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a19      	ldr	r2, [pc, #100]	; (800f578 <TIM_OC6_SetConfig+0xb8>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d00f      	beq.n	800f538 <TIM_OC6_SetConfig+0x78>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a18      	ldr	r2, [pc, #96]	; (800f57c <TIM_OC6_SetConfig+0xbc>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d00b      	beq.n	800f538 <TIM_OC6_SetConfig+0x78>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a17      	ldr	r2, [pc, #92]	; (800f580 <TIM_OC6_SetConfig+0xc0>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d007      	beq.n	800f538 <TIM_OC6_SetConfig+0x78>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a16      	ldr	r2, [pc, #88]	; (800f584 <TIM_OC6_SetConfig+0xc4>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d003      	beq.n	800f538 <TIM_OC6_SetConfig+0x78>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a15      	ldr	r2, [pc, #84]	; (800f588 <TIM_OC6_SetConfig+0xc8>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d109      	bne.n	800f54c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f53e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	695b      	ldr	r3, [r3, #20]
 800f544:	029b      	lsls	r3, r3, #10
 800f546:	697a      	ldr	r2, [r7, #20]
 800f548:	4313      	orrs	r3, r2
 800f54a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	697a      	ldr	r2, [r7, #20]
 800f550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	685a      	ldr	r2, [r3, #4]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	693a      	ldr	r2, [r7, #16]
 800f564:	621a      	str	r2, [r3, #32]
}
 800f566:	bf00      	nop
 800f568:	371c      	adds	r7, #28
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	feff8fff 	.word	0xfeff8fff
 800f578:	40010000 	.word	0x40010000
 800f57c:	40010400 	.word	0x40010400
 800f580:	40014000 	.word	0x40014000
 800f584:	40014400 	.word	0x40014400
 800f588:	40014800 	.word	0x40014800

0800f58c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b087      	sub	sp, #28
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6a1b      	ldr	r3, [r3, #32]
 800f59c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6a1b      	ldr	r3, [r3, #32]
 800f5a2:	f023 0201 	bic.w	r2, r3, #1
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	699b      	ldr	r3, [r3, #24]
 800f5ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	011b      	lsls	r3, r3, #4
 800f5bc:	693a      	ldr	r2, [r7, #16]
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	f023 030a 	bic.w	r3, r3, #10
 800f5c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5ca:	697a      	ldr	r2, [r7, #20]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	693a      	ldr	r2, [r7, #16]
 800f5d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	697a      	ldr	r2, [r7, #20]
 800f5dc:	621a      	str	r2, [r3, #32]
}
 800f5de:	bf00      	nop
 800f5e0:	371c      	adds	r7, #28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5ea:	b480      	push	{r7}
 800f5ec:	b087      	sub	sp, #28
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	60f8      	str	r0, [r7, #12]
 800f5f2:	60b9      	str	r1, [r7, #8]
 800f5f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6a1b      	ldr	r3, [r3, #32]
 800f600:	f023 0210 	bic.w	r2, r3, #16
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	699b      	ldr	r3, [r3, #24]
 800f60c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	031b      	lsls	r3, r3, #12
 800f61a:	693a      	ldr	r2, [r7, #16]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f626:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	697a      	ldr	r2, [r7, #20]
 800f62e:	4313      	orrs	r3, r2
 800f630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	693a      	ldr	r2, [r7, #16]
 800f636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	697a      	ldr	r2, [r7, #20]
 800f63c:	621a      	str	r2, [r3, #32]
}
 800f63e:	bf00      	nop
 800f640:	371c      	adds	r7, #28
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
	...

0800f64c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	4b09      	ldr	r3, [pc, #36]	; (800f684 <TIM_ITRx_SetConfig+0x38>)
 800f660:	4013      	ands	r3, r2
 800f662:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f664:	683a      	ldr	r2, [r7, #0]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	4313      	orrs	r3, r2
 800f66a:	f043 0307 	orr.w	r3, r3, #7
 800f66e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	68fa      	ldr	r2, [r7, #12]
 800f674:	609a      	str	r2, [r3, #8]
}
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	ffcfff8f 	.word	0xffcfff8f

0800f688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f688:	b480      	push	{r7}
 800f68a:	b087      	sub	sp, #28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
 800f694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	689b      	ldr	r3, [r3, #8]
 800f69a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	021a      	lsls	r2, r3, #8
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	431a      	orrs	r2, r3
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	697a      	ldr	r2, [r7, #20]
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	697a      	ldr	r2, [r7, #20]
 800f6ba:	609a      	str	r2, [r3, #8]
}
 800f6bc:	bf00      	nop
 800f6be:	371c      	adds	r7, #28
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	f003 031f 	and.w	r3, r3, #31
 800f6da:	2201      	movs	r2, #1
 800f6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f6e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	6a1a      	ldr	r2, [r3, #32]
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	43db      	mvns	r3, r3
 800f6ea:	401a      	ands	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	6a1a      	ldr	r2, [r3, #32]
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	f003 031f 	and.w	r3, r3, #31
 800f6fa:	6879      	ldr	r1, [r7, #4]
 800f6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800f700:	431a      	orrs	r2, r3
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	621a      	str	r2, [r3, #32]
}
 800f706:	bf00      	nop
 800f708:	371c      	adds	r7, #28
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
	...

0800f714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f724:	2b01      	cmp	r3, #1
 800f726:	d101      	bne.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f728:	2302      	movs	r3, #2
 800f72a:	e06d      	b.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2202      	movs	r2, #2
 800f738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a30      	ldr	r2, [pc, #192]	; (800f814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d004      	beq.n	800f760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a2f      	ldr	r2, [pc, #188]	; (800f818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d108      	bne.n	800f772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	4313      	orrs	r3, r2
 800f770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	4313      	orrs	r3, r2
 800f782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	68fa      	ldr	r2, [r7, #12]
 800f78a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a20      	ldr	r2, [pc, #128]	; (800f814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d022      	beq.n	800f7dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f79e:	d01d      	beq.n	800f7dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a1d      	ldr	r2, [pc, #116]	; (800f81c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d018      	beq.n	800f7dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	4a1c      	ldr	r2, [pc, #112]	; (800f820 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d013      	beq.n	800f7dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4a1a      	ldr	r2, [pc, #104]	; (800f824 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d00e      	beq.n	800f7dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	4a15      	ldr	r2, [pc, #84]	; (800f818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d009      	beq.n	800f7dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a16      	ldr	r2, [pc, #88]	; (800f828 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d004      	beq.n	800f7dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a15      	ldr	r2, [pc, #84]	; (800f82c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d10c      	bne.n	800f7f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	68ba      	ldr	r2, [r7, #8]
 800f7f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3714      	adds	r7, #20
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	40010000 	.word	0x40010000
 800f818:	40010400 	.word	0x40010400
 800f81c:	40000400 	.word	0x40000400
 800f820:	40000800 	.word	0x40000800
 800f824:	40000c00 	.word	0x40000c00
 800f828:	40001800 	.word	0x40001800
 800f82c:	40014000 	.word	0x40014000

0800f830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f83a:	2300      	movs	r3, #0
 800f83c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f844:	2b01      	cmp	r3, #1
 800f846:	d101      	bne.n	800f84c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f848:	2302      	movs	r3, #2
 800f84a:	e065      	b.n	800f918 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	4313      	orrs	r3, r2
 800f860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	4313      	orrs	r3, r2
 800f86e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	4313      	orrs	r3, r2
 800f87c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4313      	orrs	r3, r2
 800f88a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	691b      	ldr	r3, [r3, #16]
 800f896:	4313      	orrs	r3, r2
 800f898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	695b      	ldr	r3, [r3, #20]
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	041b      	lsls	r3, r3, #16
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4a16      	ldr	r2, [pc, #88]	; (800f924 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d004      	beq.n	800f8da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a14      	ldr	r2, [pc, #80]	; (800f928 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d115      	bne.n	800f906 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e4:	051b      	lsls	r3, r3, #20
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	69db      	ldr	r3, [r3, #28]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	4313      	orrs	r3, r2
 800f904:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f916:	2300      	movs	r3, #0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3714      	adds	r7, #20
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr
 800f924:	40010000 	.word	0x40010000
 800f928:	40010400 	.word	0x40010400

0800f92c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f934:	bf00      	nop
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f948:	bf00      	nop
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d101      	bne.n	800f97a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f976:	2301      	movs	r3, #1
 800f978:	e042      	b.n	800fa00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f980:	2b00      	cmp	r3, #0
 800f982:	d106      	bne.n	800f992 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7f3 fbbf 	bl	8003110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2224      	movs	r2, #36	; 0x24
 800f996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f022 0201 	bic.w	r2, r2, #1
 800f9a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d002      	beq.n	800f9b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f001 fb0c 	bl	8010fd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fda1 	bl	8010500 <UART_SetConfig>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d101      	bne.n	800f9c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e01b      	b.n	800fa00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	685a      	ldr	r2, [r3, #4]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	689a      	ldr	r2, [r3, #8]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f9e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	681a      	ldr	r2, [r3, #0]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f042 0201 	orr.w	r2, r2, #1
 800f9f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f001 fb8b 	bl	8011114 <UART_CheckIdleState>
 800f9fe:	4603      	mov	r3, r0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08a      	sub	sp, #40	; 0x28
 800fa0c:	af02      	add	r7, sp, #8
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	603b      	str	r3, [r7, #0]
 800fa14:	4613      	mov	r3, r2
 800fa16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa1e:	2b20      	cmp	r3, #32
 800fa20:	d17b      	bne.n	800fb1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <HAL_UART_Transmit+0x26>
 800fa28:	88fb      	ldrh	r3, [r7, #6]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	e074      	b.n	800fb1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2221      	movs	r2, #33	; 0x21
 800fa3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa42:	f7f3 fe9f 	bl	8003784 <HAL_GetTick>
 800fa46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	88fa      	ldrh	r2, [r7, #6]
 800fa4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	88fa      	ldrh	r2, [r7, #6]
 800fa54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	689b      	ldr	r3, [r3, #8]
 800fa5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa60:	d108      	bne.n	800fa74 <HAL_UART_Transmit+0x6c>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	691b      	ldr	r3, [r3, #16]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d104      	bne.n	800fa74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	61bb      	str	r3, [r7, #24]
 800fa72:	e003      	b.n	800fa7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fa7c:	e030      	b.n	800fae0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2200      	movs	r2, #0
 800fa86:	2180      	movs	r1, #128	; 0x80
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f001 fbed 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d005      	beq.n	800faa0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2220      	movs	r2, #32
 800fa98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e03d      	b.n	800fb1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10b      	bne.n	800fabe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	881b      	ldrh	r3, [r3, #0]
 800faaa:	461a      	mov	r2, r3
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fab4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	3302      	adds	r3, #2
 800faba:	61bb      	str	r3, [r7, #24]
 800fabc:	e007      	b.n	800face <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	781a      	ldrb	r2, [r3, #0]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	3301      	adds	r3, #1
 800facc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	3b01      	subs	r3, #1
 800fad8:	b29a      	uxth	r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1c8      	bne.n	800fa7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	2200      	movs	r2, #0
 800faf4:	2140      	movs	r1, #64	; 0x40
 800faf6:	68f8      	ldr	r0, [r7, #12]
 800faf8:	f001 fbb6 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d005      	beq.n	800fb0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2220      	movs	r2, #32
 800fb06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	e006      	b.n	800fb1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2220      	movs	r2, #32
 800fb12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	e000      	b.n	800fb1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fb1a:	2302      	movs	r3, #2
  }
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3720      	adds	r7, #32
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b08a      	sub	sp, #40	; 0x28
 800fb28:	af02      	add	r7, sp, #8
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	603b      	str	r3, [r7, #0]
 800fb30:	4613      	mov	r3, r2
 800fb32:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb3a:	2b20      	cmp	r3, #32
 800fb3c:	f040 80b5 	bne.w	800fcaa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <HAL_UART_Receive+0x28>
 800fb46:	88fb      	ldrh	r3, [r7, #6]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d101      	bne.n	800fb50 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	e0ad      	b.n	800fcac <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2222      	movs	r2, #34	; 0x22
 800fb5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2200      	movs	r2, #0
 800fb64:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb66:	f7f3 fe0d 	bl	8003784 <HAL_GetTick>
 800fb6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	88fa      	ldrh	r2, [r7, #6]
 800fb70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	88fa      	ldrh	r2, [r7, #6]
 800fb78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb84:	d10e      	bne.n	800fba4 <HAL_UART_Receive+0x80>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d105      	bne.n	800fb9a <HAL_UART_Receive+0x76>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb98:	e02d      	b.n	800fbf6 <HAL_UART_Receive+0xd2>
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	22ff      	movs	r2, #255	; 0xff
 800fb9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fba2:	e028      	b.n	800fbf6 <HAL_UART_Receive+0xd2>
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	689b      	ldr	r3, [r3, #8]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d10d      	bne.n	800fbc8 <HAL_UART_Receive+0xa4>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d104      	bne.n	800fbbe <HAL_UART_Receive+0x9a>
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	22ff      	movs	r2, #255	; 0xff
 800fbb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbbc:	e01b      	b.n	800fbf6 <HAL_UART_Receive+0xd2>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	227f      	movs	r2, #127	; 0x7f
 800fbc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbc6:	e016      	b.n	800fbf6 <HAL_UART_Receive+0xd2>
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbd0:	d10d      	bne.n	800fbee <HAL_UART_Receive+0xca>
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d104      	bne.n	800fbe4 <HAL_UART_Receive+0xc0>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	227f      	movs	r2, #127	; 0x7f
 800fbde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbe2:	e008      	b.n	800fbf6 <HAL_UART_Receive+0xd2>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	223f      	movs	r2, #63	; 0x3f
 800fbe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbec:	e003      	b.n	800fbf6 <HAL_UART_Receive+0xd2>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbfc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc06:	d108      	bne.n	800fc1a <HAL_UART_Receive+0xf6>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d104      	bne.n	800fc1a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fc10:	2300      	movs	r3, #0
 800fc12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	61bb      	str	r3, [r7, #24]
 800fc18:	e003      	b.n	800fc22 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fc22:	e036      	b.n	800fc92 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	2120      	movs	r1, #32
 800fc2e:	68f8      	ldr	r0, [r7, #12]
 800fc30:	f001 fb1a 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d005      	beq.n	800fc46 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2220      	movs	r2, #32
 800fc3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fc42:	2303      	movs	r3, #3
 800fc44:	e032      	b.n	800fcac <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10c      	bne.n	800fc66 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	8a7b      	ldrh	r3, [r7, #18]
 800fc56:	4013      	ands	r3, r2
 800fc58:	b29a      	uxth	r2, r3
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	3302      	adds	r3, #2
 800fc62:	61bb      	str	r3, [r7, #24]
 800fc64:	e00c      	b.n	800fc80 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6c:	b2da      	uxtb	r2, r3
 800fc6e:	8a7b      	ldrh	r3, [r7, #18]
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	4013      	ands	r3, r2
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d1c2      	bne.n	800fc24 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2220      	movs	r2, #32
 800fca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fca6:	2300      	movs	r3, #0
 800fca8:	e000      	b.n	800fcac <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fcaa:	2302      	movs	r3, #2
  }
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3720      	adds	r7, #32
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b08a      	sub	sp, #40	; 0x28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcc8:	2b20      	cmp	r3, #32
 800fcca:	d137      	bne.n	800fd3c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <HAL_UART_Receive_IT+0x24>
 800fcd2:	88fb      	ldrh	r3, [r7, #6]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d101      	bne.n	800fcdc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e030      	b.n	800fd3e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2200      	movs	r2, #0
 800fce0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a18      	ldr	r2, [pc, #96]	; (800fd48 <HAL_UART_Receive_IT+0x94>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d01f      	beq.n	800fd2c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d018      	beq.n	800fd2c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	e853 3f00 	ldrex	r3, [r3]
 800fd06:	613b      	str	r3, [r7, #16]
   return(result);
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd0e:	627b      	str	r3, [r7, #36]	; 0x24
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	461a      	mov	r2, r3
 800fd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd18:	623b      	str	r3, [r7, #32]
 800fd1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd1c:	69f9      	ldr	r1, [r7, #28]
 800fd1e:	6a3a      	ldr	r2, [r7, #32]
 800fd20:	e841 2300 	strex	r3, r2, [r1]
 800fd24:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1e6      	bne.n	800fcfa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fd2c:	88fb      	ldrh	r3, [r7, #6]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	68b9      	ldr	r1, [r7, #8]
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f001 fb06 	bl	8011344 <UART_Start_Receive_IT>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	e000      	b.n	800fd3e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fd3c:	2302      	movs	r3, #2
  }
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3728      	adds	r7, #40	; 0x28
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	58000c00 	.word	0x58000c00

0800fd4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b0ba      	sub	sp, #232	; 0xe8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	69db      	ldr	r3, [r3, #28]
 800fd5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	689b      	ldr	r3, [r3, #8]
 800fd6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fd72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fd76:	f640 030f 	movw	r3, #2063	; 0x80f
 800fd7a:	4013      	ands	r3, r2
 800fd7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fd80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d11b      	bne.n	800fdc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd8c:	f003 0320 	and.w	r3, r3, #32
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d015      	beq.n	800fdc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd98:	f003 0320 	and.w	r3, r3, #32
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d105      	bne.n	800fdac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fda0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fda4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d009      	beq.n	800fdc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f000 8377 	beq.w	80104a4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	4798      	blx	r3
      }
      return;
 800fdbe:	e371      	b.n	80104a4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fdc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f000 8123 	beq.w	8010010 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fdca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fdce:	4b8d      	ldr	r3, [pc, #564]	; (8010004 <HAL_UART_IRQHandler+0x2b8>)
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d106      	bne.n	800fde4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fdd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fdda:	4b8b      	ldr	r3, [pc, #556]	; (8010008 <HAL_UART_IRQHandler+0x2bc>)
 800fddc:	4013      	ands	r3, r2
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f000 8116 	beq.w	8010010 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fde4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fde8:	f003 0301 	and.w	r3, r3, #1
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d011      	beq.n	800fe14 <HAL_UART_IRQHandler+0xc8>
 800fdf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d00b      	beq.n	800fe14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2201      	movs	r2, #1
 800fe02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe0a:	f043 0201 	orr.w	r2, r3, #1
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe18:	f003 0302 	and.w	r3, r3, #2
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d011      	beq.n	800fe44 <HAL_UART_IRQHandler+0xf8>
 800fe20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe24:	f003 0301 	and.w	r3, r3, #1
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00b      	beq.n	800fe44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2202      	movs	r2, #2
 800fe32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe3a:	f043 0204 	orr.w	r2, r3, #4
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe48:	f003 0304 	and.w	r3, r3, #4
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d011      	beq.n	800fe74 <HAL_UART_IRQHandler+0x128>
 800fe50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe54:	f003 0301 	and.w	r3, r3, #1
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00b      	beq.n	800fe74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2204      	movs	r2, #4
 800fe62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe6a:	f043 0202 	orr.w	r2, r3, #2
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fe74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe78:	f003 0308 	and.w	r3, r3, #8
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d017      	beq.n	800feb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe84:	f003 0320 	and.w	r3, r3, #32
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d105      	bne.n	800fe98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fe8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fe90:	4b5c      	ldr	r3, [pc, #368]	; (8010004 <HAL_UART_IRQHandler+0x2b8>)
 800fe92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00b      	beq.n	800feb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2208      	movs	r2, #8
 800fe9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fea6:	f043 0208 	orr.w	r2, r3, #8
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800feb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d012      	beq.n	800fee2 <HAL_UART_IRQHandler+0x196>
 800febc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00c      	beq.n	800fee2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fed8:	f043 0220 	orr.w	r2, r3, #32
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f000 82dd 	beq.w	80104a8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800feee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fef2:	f003 0320 	and.w	r3, r3, #32
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d013      	beq.n	800ff22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fefe:	f003 0320 	and.w	r3, r3, #32
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d105      	bne.n	800ff12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d007      	beq.n	800ff22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d003      	beq.n	800ff22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff36:	2b40      	cmp	r3, #64	; 0x40
 800ff38:	d005      	beq.n	800ff46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ff3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d054      	beq.n	800fff0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f001 fb1e 	bl	8011588 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff56:	2b40      	cmp	r3, #64	; 0x40
 800ff58:	d146      	bne.n	800ffe8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3308      	adds	r3, #8
 800ff60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff68:	e853 3f00 	ldrex	r3, [r3]
 800ff6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ff70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	3308      	adds	r3, #8
 800ff82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ff86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ff8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ff92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ff96:	e841 2300 	strex	r3, r2, [r1]
 800ff9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ff9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1d9      	bne.n	800ff5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d017      	beq.n	800ffe0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffb6:	4a15      	ldr	r2, [pc, #84]	; (801000c <HAL_UART_IRQHandler+0x2c0>)
 800ffb8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7f6 fdeb 	bl	8006b9c <HAL_DMA_Abort_IT>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d019      	beq.n	8010000 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ffda:	4610      	mov	r0, r2
 800ffdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffde:	e00f      	b.n	8010000 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fa77 	bl	80104d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffe6:	e00b      	b.n	8010000 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 fa73 	bl	80104d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffee:	e007      	b.n	8010000 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fa6f 	bl	80104d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800fffe:	e253      	b.n	80104a8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010000:	bf00      	nop
    return;
 8010002:	e251      	b.n	80104a8 <HAL_UART_IRQHandler+0x75c>
 8010004:	10000001 	.word	0x10000001
 8010008:	04000120 	.word	0x04000120
 801000c:	08011655 	.word	0x08011655

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010014:	2b01      	cmp	r3, #1
 8010016:	f040 81e7 	bne.w	80103e8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801001a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801001e:	f003 0310 	and.w	r3, r3, #16
 8010022:	2b00      	cmp	r3, #0
 8010024:	f000 81e0 	beq.w	80103e8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801002c:	f003 0310 	and.w	r3, r3, #16
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 81d9 	beq.w	80103e8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2210      	movs	r2, #16
 801003c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010048:	2b40      	cmp	r3, #64	; 0x40
 801004a:	f040 8151 	bne.w	80102f0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a96      	ldr	r2, [pc, #600]	; (80102b0 <HAL_UART_IRQHandler+0x564>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d068      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a93      	ldr	r2, [pc, #588]	; (80102b4 <HAL_UART_IRQHandler+0x568>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d061      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	4a91      	ldr	r2, [pc, #580]	; (80102b8 <HAL_UART_IRQHandler+0x56c>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d05a      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a8e      	ldr	r2, [pc, #568]	; (80102bc <HAL_UART_IRQHandler+0x570>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d053      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4a8c      	ldr	r2, [pc, #560]	; (80102c0 <HAL_UART_IRQHandler+0x574>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d04c      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a89      	ldr	r2, [pc, #548]	; (80102c4 <HAL_UART_IRQHandler+0x578>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d045      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a87      	ldr	r2, [pc, #540]	; (80102c8 <HAL_UART_IRQHandler+0x57c>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d03e      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a84      	ldr	r2, [pc, #528]	; (80102cc <HAL_UART_IRQHandler+0x580>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d037      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a82      	ldr	r2, [pc, #520]	; (80102d0 <HAL_UART_IRQHandler+0x584>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d030      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4a7f      	ldr	r2, [pc, #508]	; (80102d4 <HAL_UART_IRQHandler+0x588>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d029      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4a7d      	ldr	r2, [pc, #500]	; (80102d8 <HAL_UART_IRQHandler+0x58c>)
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d022      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a7a      	ldr	r2, [pc, #488]	; (80102dc <HAL_UART_IRQHandler+0x590>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d01b      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a78      	ldr	r2, [pc, #480]	; (80102e0 <HAL_UART_IRQHandler+0x594>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d014      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a75      	ldr	r2, [pc, #468]	; (80102e4 <HAL_UART_IRQHandler+0x598>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d00d      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4a73      	ldr	r2, [pc, #460]	; (80102e8 <HAL_UART_IRQHandler+0x59c>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d006      	beq.n	801012e <HAL_UART_IRQHandler+0x3e2>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	4a70      	ldr	r2, [pc, #448]	; (80102ec <HAL_UART_IRQHandler+0x5a0>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d106      	bne.n	801013c <HAL_UART_IRQHandler+0x3f0>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	b29b      	uxth	r3, r3
 801013a:	e005      	b.n	8010148 <HAL_UART_IRQHandler+0x3fc>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	b29b      	uxth	r3, r3
 8010148:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801014c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010150:	2b00      	cmp	r3, #0
 8010152:	f000 81ab 	beq.w	80104ac <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801015c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010160:	429a      	cmp	r2, r3
 8010162:	f080 81a3 	bcs.w	80104ac <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801016c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010176:	69db      	ldr	r3, [r3, #28]
 8010178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801017c:	f000 8087 	beq.w	801028e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801018c:	e853 3f00 	ldrex	r3, [r3]
 8010190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801019c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	461a      	mov	r2, r3
 80101a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80101aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80101ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80101b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80101ba:	e841 2300 	strex	r3, r2, [r1]
 80101be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80101c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1da      	bne.n	8010180 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	3308      	adds	r3, #8
 80101d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101d4:	e853 3f00 	ldrex	r3, [r3]
 80101d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80101da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80101dc:	f023 0301 	bic.w	r3, r3, #1
 80101e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	3308      	adds	r3, #8
 80101ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80101ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80101f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80101f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80101fa:	e841 2300 	strex	r3, r2, [r1]
 80101fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1e1      	bne.n	80101ca <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3308      	adds	r3, #8
 801020c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010210:	e853 3f00 	ldrex	r3, [r3]
 8010214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801021c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	3308      	adds	r3, #8
 8010226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801022a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801022c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801022e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010232:	e841 2300 	strex	r3, r2, [r1]
 8010236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801023a:	2b00      	cmp	r3, #0
 801023c:	d1e3      	bne.n	8010206 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2220      	movs	r2, #32
 8010242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010254:	e853 3f00 	ldrex	r3, [r3]
 8010258:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801025a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801025c:	f023 0310 	bic.w	r3, r3, #16
 8010260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	461a      	mov	r2, r3
 801026a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801026e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010270:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010272:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010276:	e841 2300 	strex	r3, r2, [r1]
 801027a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801027c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1e4      	bne.n	801024c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010288:	4618      	mov	r0, r3
 801028a:	f7f6 f969 	bl	8006560 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2202      	movs	r2, #2
 8010292:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	1ad3      	subs	r3, r2, r3
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	4619      	mov	r1, r3
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 f91d 	bl	80104e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80102ae:	e0fd      	b.n	80104ac <HAL_UART_IRQHandler+0x760>
 80102b0:	40020010 	.word	0x40020010
 80102b4:	40020028 	.word	0x40020028
 80102b8:	40020040 	.word	0x40020040
 80102bc:	40020058 	.word	0x40020058
 80102c0:	40020070 	.word	0x40020070
 80102c4:	40020088 	.word	0x40020088
 80102c8:	400200a0 	.word	0x400200a0
 80102cc:	400200b8 	.word	0x400200b8
 80102d0:	40020410 	.word	0x40020410
 80102d4:	40020428 	.word	0x40020428
 80102d8:	40020440 	.word	0x40020440
 80102dc:	40020458 	.word	0x40020458
 80102e0:	40020470 	.word	0x40020470
 80102e4:	40020488 	.word	0x40020488
 80102e8:	400204a0 	.word	0x400204a0
 80102ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801030a:	b29b      	uxth	r3, r3
 801030c:	2b00      	cmp	r3, #0
 801030e:	f000 80cf 	beq.w	80104b0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010316:	2b00      	cmp	r3, #0
 8010318:	f000 80ca 	beq.w	80104b0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010324:	e853 3f00 	ldrex	r3, [r3]
 8010328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801032a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	461a      	mov	r2, r3
 801033a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801033e:	647b      	str	r3, [r7, #68]	; 0x44
 8010340:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010346:	e841 2300 	strex	r3, r2, [r1]
 801034a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801034c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1e4      	bne.n	801031c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	3308      	adds	r3, #8
 8010358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035c:	e853 3f00 	ldrex	r3, [r3]
 8010360:	623b      	str	r3, [r7, #32]
   return(result);
 8010362:	6a3a      	ldr	r2, [r7, #32]
 8010364:	4b55      	ldr	r3, [pc, #340]	; (80104bc <HAL_UART_IRQHandler+0x770>)
 8010366:	4013      	ands	r3, r2
 8010368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	3308      	adds	r3, #8
 8010372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010376:	633a      	str	r2, [r7, #48]	; 0x30
 8010378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801037a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801037c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801037e:	e841 2300 	strex	r3, r2, [r1]
 8010382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010386:	2b00      	cmp	r3, #0
 8010388:	d1e3      	bne.n	8010352 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2220      	movs	r2, #32
 801038e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	e853 3f00 	ldrex	r3, [r3]
 80103aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f023 0310 	bic.w	r3, r3, #16
 80103b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	461a      	mov	r2, r3
 80103bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80103c0:	61fb      	str	r3, [r7, #28]
 80103c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c4:	69b9      	ldr	r1, [r7, #24]
 80103c6:	69fa      	ldr	r2, [r7, #28]
 80103c8:	e841 2300 	strex	r3, r2, [r1]
 80103cc:	617b      	str	r3, [r7, #20]
   return(result);
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1e4      	bne.n	801039e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2202      	movs	r2, #2
 80103d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80103da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80103de:	4619      	mov	r1, r3
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f000 f881 	bl	80104e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80103e6:	e063      	b.n	80104b0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80103e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00e      	beq.n	8010412 <HAL_UART_IRQHandler+0x6c6>
 80103f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d008      	beq.n	8010412 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f001 fe80 	bl	8012110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010410:	e051      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801041a:	2b00      	cmp	r3, #0
 801041c:	d014      	beq.n	8010448 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801041e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010426:	2b00      	cmp	r3, #0
 8010428:	d105      	bne.n	8010436 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801042a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801042e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010432:	2b00      	cmp	r3, #0
 8010434:	d008      	beq.n	8010448 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801043a:	2b00      	cmp	r3, #0
 801043c:	d03a      	beq.n	80104b4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	4798      	blx	r3
    }
    return;
 8010446:	e035      	b.n	80104b4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801044c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010450:	2b00      	cmp	r3, #0
 8010452:	d009      	beq.n	8010468 <HAL_UART_IRQHandler+0x71c>
 8010454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801045c:	2b00      	cmp	r3, #0
 801045e:	d003      	beq.n	8010468 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f001 f90d 	bl	8011680 <UART_EndTransmit_IT>
    return;
 8010466:	e026      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801046c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010470:	2b00      	cmp	r3, #0
 8010472:	d009      	beq.n	8010488 <HAL_UART_IRQHandler+0x73c>
 8010474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010478:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801047c:	2b00      	cmp	r3, #0
 801047e:	d003      	beq.n	8010488 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f001 fe59 	bl	8012138 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010486:	e016      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801048c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010490:	2b00      	cmp	r3, #0
 8010492:	d010      	beq.n	80104b6 <HAL_UART_IRQHandler+0x76a>
 8010494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010498:	2b00      	cmp	r3, #0
 801049a:	da0c      	bge.n	80104b6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f001 fe41 	bl	8012124 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80104a2:	e008      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
      return;
 80104a4:	bf00      	nop
 80104a6:	e006      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
    return;
 80104a8:	bf00      	nop
 80104aa:	e004      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
      return;
 80104ac:	bf00      	nop
 80104ae:	e002      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
      return;
 80104b0:	bf00      	nop
 80104b2:	e000      	b.n	80104b6 <HAL_UART_IRQHandler+0x76a>
    return;
 80104b4:	bf00      	nop
  }
}
 80104b6:	37e8      	adds	r7, #232	; 0xe8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	effffffe 	.word	0xeffffffe

080104c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80104dc:	bf00      	nop
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	460b      	mov	r3, r1
 80104f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80104f4:	bf00      	nop
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010504:	b092      	sub	sp, #72	; 0x48
 8010506:	af00      	add	r7, sp, #0
 8010508:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801050a:	2300      	movs	r3, #0
 801050c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	689a      	ldr	r2, [r3, #8]
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	691b      	ldr	r3, [r3, #16]
 8010518:	431a      	orrs	r2, r3
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	695b      	ldr	r3, [r3, #20]
 801051e:	431a      	orrs	r2, r3
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	4313      	orrs	r3, r2
 8010526:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	4bbe      	ldr	r3, [pc, #760]	; (8010828 <UART_SetConfig+0x328>)
 8010530:	4013      	ands	r3, r2
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	6812      	ldr	r2, [r2, #0]
 8010536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010538:	430b      	orrs	r3, r1
 801053a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	68da      	ldr	r2, [r3, #12]
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	430a      	orrs	r2, r1
 8010550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	699b      	ldr	r3, [r3, #24]
 8010556:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4ab3      	ldr	r2, [pc, #716]	; (801082c <UART_SetConfig+0x32c>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d004      	beq.n	801056c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	6a1b      	ldr	r3, [r3, #32]
 8010566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010568:	4313      	orrs	r3, r2
 801056a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	689a      	ldr	r2, [r3, #8]
 8010572:	4baf      	ldr	r3, [pc, #700]	; (8010830 <UART_SetConfig+0x330>)
 8010574:	4013      	ands	r3, r2
 8010576:	697a      	ldr	r2, [r7, #20]
 8010578:	6812      	ldr	r2, [r2, #0]
 801057a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801057c:	430b      	orrs	r3, r1
 801057e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010586:	f023 010f 	bic.w	r1, r3, #15
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	430a      	orrs	r2, r1
 8010594:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4aa6      	ldr	r2, [pc, #664]	; (8010834 <UART_SetConfig+0x334>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d177      	bne.n	8010690 <UART_SetConfig+0x190>
 80105a0:	4ba5      	ldr	r3, [pc, #660]	; (8010838 <UART_SetConfig+0x338>)
 80105a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80105a8:	2b28      	cmp	r3, #40	; 0x28
 80105aa:	d86d      	bhi.n	8010688 <UART_SetConfig+0x188>
 80105ac:	a201      	add	r2, pc, #4	; (adr r2, 80105b4 <UART_SetConfig+0xb4>)
 80105ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b2:	bf00      	nop
 80105b4:	08010659 	.word	0x08010659
 80105b8:	08010689 	.word	0x08010689
 80105bc:	08010689 	.word	0x08010689
 80105c0:	08010689 	.word	0x08010689
 80105c4:	08010689 	.word	0x08010689
 80105c8:	08010689 	.word	0x08010689
 80105cc:	08010689 	.word	0x08010689
 80105d0:	08010689 	.word	0x08010689
 80105d4:	08010661 	.word	0x08010661
 80105d8:	08010689 	.word	0x08010689
 80105dc:	08010689 	.word	0x08010689
 80105e0:	08010689 	.word	0x08010689
 80105e4:	08010689 	.word	0x08010689
 80105e8:	08010689 	.word	0x08010689
 80105ec:	08010689 	.word	0x08010689
 80105f0:	08010689 	.word	0x08010689
 80105f4:	08010669 	.word	0x08010669
 80105f8:	08010689 	.word	0x08010689
 80105fc:	08010689 	.word	0x08010689
 8010600:	08010689 	.word	0x08010689
 8010604:	08010689 	.word	0x08010689
 8010608:	08010689 	.word	0x08010689
 801060c:	08010689 	.word	0x08010689
 8010610:	08010689 	.word	0x08010689
 8010614:	08010671 	.word	0x08010671
 8010618:	08010689 	.word	0x08010689
 801061c:	08010689 	.word	0x08010689
 8010620:	08010689 	.word	0x08010689
 8010624:	08010689 	.word	0x08010689
 8010628:	08010689 	.word	0x08010689
 801062c:	08010689 	.word	0x08010689
 8010630:	08010689 	.word	0x08010689
 8010634:	08010679 	.word	0x08010679
 8010638:	08010689 	.word	0x08010689
 801063c:	08010689 	.word	0x08010689
 8010640:	08010689 	.word	0x08010689
 8010644:	08010689 	.word	0x08010689
 8010648:	08010689 	.word	0x08010689
 801064c:	08010689 	.word	0x08010689
 8010650:	08010689 	.word	0x08010689
 8010654:	08010681 	.word	0x08010681
 8010658:	2301      	movs	r3, #1
 801065a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801065e:	e222      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010660:	2304      	movs	r3, #4
 8010662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010666:	e21e      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010668:	2308      	movs	r3, #8
 801066a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801066e:	e21a      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010670:	2310      	movs	r3, #16
 8010672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010676:	e216      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010678:	2320      	movs	r3, #32
 801067a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801067e:	e212      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010680:	2340      	movs	r3, #64	; 0x40
 8010682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010686:	e20e      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010688:	2380      	movs	r3, #128	; 0x80
 801068a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801068e:	e20a      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a69      	ldr	r2, [pc, #420]	; (801083c <UART_SetConfig+0x33c>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d130      	bne.n	80106fc <UART_SetConfig+0x1fc>
 801069a:	4b67      	ldr	r3, [pc, #412]	; (8010838 <UART_SetConfig+0x338>)
 801069c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801069e:	f003 0307 	and.w	r3, r3, #7
 80106a2:	2b05      	cmp	r3, #5
 80106a4:	d826      	bhi.n	80106f4 <UART_SetConfig+0x1f4>
 80106a6:	a201      	add	r2, pc, #4	; (adr r2, 80106ac <UART_SetConfig+0x1ac>)
 80106a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ac:	080106c5 	.word	0x080106c5
 80106b0:	080106cd 	.word	0x080106cd
 80106b4:	080106d5 	.word	0x080106d5
 80106b8:	080106dd 	.word	0x080106dd
 80106bc:	080106e5 	.word	0x080106e5
 80106c0:	080106ed 	.word	0x080106ed
 80106c4:	2300      	movs	r3, #0
 80106c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ca:	e1ec      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80106cc:	2304      	movs	r3, #4
 80106ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106d2:	e1e8      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80106d4:	2308      	movs	r3, #8
 80106d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106da:	e1e4      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80106dc:	2310      	movs	r3, #16
 80106de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106e2:	e1e0      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80106e4:	2320      	movs	r3, #32
 80106e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ea:	e1dc      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80106ec:	2340      	movs	r3, #64	; 0x40
 80106ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106f2:	e1d8      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80106f4:	2380      	movs	r3, #128	; 0x80
 80106f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106fa:	e1d4      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4a4f      	ldr	r2, [pc, #316]	; (8010840 <UART_SetConfig+0x340>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d130      	bne.n	8010768 <UART_SetConfig+0x268>
 8010706:	4b4c      	ldr	r3, [pc, #304]	; (8010838 <UART_SetConfig+0x338>)
 8010708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801070a:	f003 0307 	and.w	r3, r3, #7
 801070e:	2b05      	cmp	r3, #5
 8010710:	d826      	bhi.n	8010760 <UART_SetConfig+0x260>
 8010712:	a201      	add	r2, pc, #4	; (adr r2, 8010718 <UART_SetConfig+0x218>)
 8010714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010718:	08010731 	.word	0x08010731
 801071c:	08010739 	.word	0x08010739
 8010720:	08010741 	.word	0x08010741
 8010724:	08010749 	.word	0x08010749
 8010728:	08010751 	.word	0x08010751
 801072c:	08010759 	.word	0x08010759
 8010730:	2300      	movs	r3, #0
 8010732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010736:	e1b6      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010738:	2304      	movs	r3, #4
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801073e:	e1b2      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010740:	2308      	movs	r3, #8
 8010742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010746:	e1ae      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010748:	2310      	movs	r3, #16
 801074a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801074e:	e1aa      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010750:	2320      	movs	r3, #32
 8010752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010756:	e1a6      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010758:	2340      	movs	r3, #64	; 0x40
 801075a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801075e:	e1a2      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010760:	2380      	movs	r3, #128	; 0x80
 8010762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010766:	e19e      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a35      	ldr	r2, [pc, #212]	; (8010844 <UART_SetConfig+0x344>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d130      	bne.n	80107d4 <UART_SetConfig+0x2d4>
 8010772:	4b31      	ldr	r3, [pc, #196]	; (8010838 <UART_SetConfig+0x338>)
 8010774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010776:	f003 0307 	and.w	r3, r3, #7
 801077a:	2b05      	cmp	r3, #5
 801077c:	d826      	bhi.n	80107cc <UART_SetConfig+0x2cc>
 801077e:	a201      	add	r2, pc, #4	; (adr r2, 8010784 <UART_SetConfig+0x284>)
 8010780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010784:	0801079d 	.word	0x0801079d
 8010788:	080107a5 	.word	0x080107a5
 801078c:	080107ad 	.word	0x080107ad
 8010790:	080107b5 	.word	0x080107b5
 8010794:	080107bd 	.word	0x080107bd
 8010798:	080107c5 	.word	0x080107c5
 801079c:	2300      	movs	r3, #0
 801079e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107a2:	e180      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80107a4:	2304      	movs	r3, #4
 80107a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107aa:	e17c      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80107ac:	2308      	movs	r3, #8
 80107ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107b2:	e178      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80107b4:	2310      	movs	r3, #16
 80107b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ba:	e174      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80107bc:	2320      	movs	r3, #32
 80107be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107c2:	e170      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80107c4:	2340      	movs	r3, #64	; 0x40
 80107c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ca:	e16c      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80107cc:	2380      	movs	r3, #128	; 0x80
 80107ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107d2:	e168      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	4a1b      	ldr	r2, [pc, #108]	; (8010848 <UART_SetConfig+0x348>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d142      	bne.n	8010864 <UART_SetConfig+0x364>
 80107de:	4b16      	ldr	r3, [pc, #88]	; (8010838 <UART_SetConfig+0x338>)
 80107e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107e2:	f003 0307 	and.w	r3, r3, #7
 80107e6:	2b05      	cmp	r3, #5
 80107e8:	d838      	bhi.n	801085c <UART_SetConfig+0x35c>
 80107ea:	a201      	add	r2, pc, #4	; (adr r2, 80107f0 <UART_SetConfig+0x2f0>)
 80107ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f0:	08010809 	.word	0x08010809
 80107f4:	08010811 	.word	0x08010811
 80107f8:	08010819 	.word	0x08010819
 80107fc:	08010821 	.word	0x08010821
 8010800:	0801084d 	.word	0x0801084d
 8010804:	08010855 	.word	0x08010855
 8010808:	2300      	movs	r3, #0
 801080a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801080e:	e14a      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010810:	2304      	movs	r3, #4
 8010812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010816:	e146      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010818:	2308      	movs	r3, #8
 801081a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801081e:	e142      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010820:	2310      	movs	r3, #16
 8010822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010826:	e13e      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010828:	cfff69f3 	.word	0xcfff69f3
 801082c:	58000c00 	.word	0x58000c00
 8010830:	11fff4ff 	.word	0x11fff4ff
 8010834:	40011000 	.word	0x40011000
 8010838:	58024400 	.word	0x58024400
 801083c:	40004400 	.word	0x40004400
 8010840:	40004800 	.word	0x40004800
 8010844:	40004c00 	.word	0x40004c00
 8010848:	40005000 	.word	0x40005000
 801084c:	2320      	movs	r3, #32
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010852:	e128      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010854:	2340      	movs	r3, #64	; 0x40
 8010856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801085a:	e124      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 801085c:	2380      	movs	r3, #128	; 0x80
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010862:	e120      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4acb      	ldr	r2, [pc, #812]	; (8010b98 <UART_SetConfig+0x698>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d176      	bne.n	801095c <UART_SetConfig+0x45c>
 801086e:	4bcb      	ldr	r3, [pc, #812]	; (8010b9c <UART_SetConfig+0x69c>)
 8010870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010876:	2b28      	cmp	r3, #40	; 0x28
 8010878:	d86c      	bhi.n	8010954 <UART_SetConfig+0x454>
 801087a:	a201      	add	r2, pc, #4	; (adr r2, 8010880 <UART_SetConfig+0x380>)
 801087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010880:	08010925 	.word	0x08010925
 8010884:	08010955 	.word	0x08010955
 8010888:	08010955 	.word	0x08010955
 801088c:	08010955 	.word	0x08010955
 8010890:	08010955 	.word	0x08010955
 8010894:	08010955 	.word	0x08010955
 8010898:	08010955 	.word	0x08010955
 801089c:	08010955 	.word	0x08010955
 80108a0:	0801092d 	.word	0x0801092d
 80108a4:	08010955 	.word	0x08010955
 80108a8:	08010955 	.word	0x08010955
 80108ac:	08010955 	.word	0x08010955
 80108b0:	08010955 	.word	0x08010955
 80108b4:	08010955 	.word	0x08010955
 80108b8:	08010955 	.word	0x08010955
 80108bc:	08010955 	.word	0x08010955
 80108c0:	08010935 	.word	0x08010935
 80108c4:	08010955 	.word	0x08010955
 80108c8:	08010955 	.word	0x08010955
 80108cc:	08010955 	.word	0x08010955
 80108d0:	08010955 	.word	0x08010955
 80108d4:	08010955 	.word	0x08010955
 80108d8:	08010955 	.word	0x08010955
 80108dc:	08010955 	.word	0x08010955
 80108e0:	0801093d 	.word	0x0801093d
 80108e4:	08010955 	.word	0x08010955
 80108e8:	08010955 	.word	0x08010955
 80108ec:	08010955 	.word	0x08010955
 80108f0:	08010955 	.word	0x08010955
 80108f4:	08010955 	.word	0x08010955
 80108f8:	08010955 	.word	0x08010955
 80108fc:	08010955 	.word	0x08010955
 8010900:	08010945 	.word	0x08010945
 8010904:	08010955 	.word	0x08010955
 8010908:	08010955 	.word	0x08010955
 801090c:	08010955 	.word	0x08010955
 8010910:	08010955 	.word	0x08010955
 8010914:	08010955 	.word	0x08010955
 8010918:	08010955 	.word	0x08010955
 801091c:	08010955 	.word	0x08010955
 8010920:	0801094d 	.word	0x0801094d
 8010924:	2301      	movs	r3, #1
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092a:	e0bc      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 801092c:	2304      	movs	r3, #4
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010932:	e0b8      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010934:	2308      	movs	r3, #8
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093a:	e0b4      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 801093c:	2310      	movs	r3, #16
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010942:	e0b0      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010944:	2320      	movs	r3, #32
 8010946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094a:	e0ac      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 801094c:	2340      	movs	r3, #64	; 0x40
 801094e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010952:	e0a8      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010954:	2380      	movs	r3, #128	; 0x80
 8010956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095a:	e0a4      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4a8f      	ldr	r2, [pc, #572]	; (8010ba0 <UART_SetConfig+0x6a0>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d130      	bne.n	80109c8 <UART_SetConfig+0x4c8>
 8010966:	4b8d      	ldr	r3, [pc, #564]	; (8010b9c <UART_SetConfig+0x69c>)
 8010968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801096a:	f003 0307 	and.w	r3, r3, #7
 801096e:	2b05      	cmp	r3, #5
 8010970:	d826      	bhi.n	80109c0 <UART_SetConfig+0x4c0>
 8010972:	a201      	add	r2, pc, #4	; (adr r2, 8010978 <UART_SetConfig+0x478>)
 8010974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010978:	08010991 	.word	0x08010991
 801097c:	08010999 	.word	0x08010999
 8010980:	080109a1 	.word	0x080109a1
 8010984:	080109a9 	.word	0x080109a9
 8010988:	080109b1 	.word	0x080109b1
 801098c:	080109b9 	.word	0x080109b9
 8010990:	2300      	movs	r3, #0
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010996:	e086      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010998:	2304      	movs	r3, #4
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099e:	e082      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80109a0:	2308      	movs	r3, #8
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a6:	e07e      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80109a8:	2310      	movs	r3, #16
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ae:	e07a      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80109b0:	2320      	movs	r3, #32
 80109b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b6:	e076      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80109b8:	2340      	movs	r3, #64	; 0x40
 80109ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109be:	e072      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80109c0:	2380      	movs	r3, #128	; 0x80
 80109c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c6:	e06e      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4a75      	ldr	r2, [pc, #468]	; (8010ba4 <UART_SetConfig+0x6a4>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d130      	bne.n	8010a34 <UART_SetConfig+0x534>
 80109d2:	4b72      	ldr	r3, [pc, #456]	; (8010b9c <UART_SetConfig+0x69c>)
 80109d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d6:	f003 0307 	and.w	r3, r3, #7
 80109da:	2b05      	cmp	r3, #5
 80109dc:	d826      	bhi.n	8010a2c <UART_SetConfig+0x52c>
 80109de:	a201      	add	r2, pc, #4	; (adr r2, 80109e4 <UART_SetConfig+0x4e4>)
 80109e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e4:	080109fd 	.word	0x080109fd
 80109e8:	08010a05 	.word	0x08010a05
 80109ec:	08010a0d 	.word	0x08010a0d
 80109f0:	08010a15 	.word	0x08010a15
 80109f4:	08010a1d 	.word	0x08010a1d
 80109f8:	08010a25 	.word	0x08010a25
 80109fc:	2300      	movs	r3, #0
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a02:	e050      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a04:	2304      	movs	r3, #4
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0a:	e04c      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a0c:	2308      	movs	r3, #8
 8010a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a12:	e048      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a14:	2310      	movs	r3, #16
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1a:	e044      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a1c:	2320      	movs	r3, #32
 8010a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a22:	e040      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a24:	2340      	movs	r3, #64	; 0x40
 8010a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2a:	e03c      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a2c:	2380      	movs	r3, #128	; 0x80
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a32:	e038      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a5b      	ldr	r2, [pc, #364]	; (8010ba8 <UART_SetConfig+0x6a8>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d130      	bne.n	8010aa0 <UART_SetConfig+0x5a0>
 8010a3e:	4b57      	ldr	r3, [pc, #348]	; (8010b9c <UART_SetConfig+0x69c>)
 8010a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a42:	f003 0307 	and.w	r3, r3, #7
 8010a46:	2b05      	cmp	r3, #5
 8010a48:	d826      	bhi.n	8010a98 <UART_SetConfig+0x598>
 8010a4a:	a201      	add	r2, pc, #4	; (adr r2, 8010a50 <UART_SetConfig+0x550>)
 8010a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a50:	08010a69 	.word	0x08010a69
 8010a54:	08010a71 	.word	0x08010a71
 8010a58:	08010a79 	.word	0x08010a79
 8010a5c:	08010a81 	.word	0x08010a81
 8010a60:	08010a89 	.word	0x08010a89
 8010a64:	08010a91 	.word	0x08010a91
 8010a68:	2302      	movs	r3, #2
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6e:	e01a      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a70:	2304      	movs	r3, #4
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a76:	e016      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a78:	2308      	movs	r3, #8
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7e:	e012      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a80:	2310      	movs	r3, #16
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a86:	e00e      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a88:	2320      	movs	r3, #32
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8e:	e00a      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a90:	2340      	movs	r3, #64	; 0x40
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a96:	e006      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010a98:	2380      	movs	r3, #128	; 0x80
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9e:	e002      	b.n	8010aa6 <UART_SetConfig+0x5a6>
 8010aa0:	2380      	movs	r3, #128	; 0x80
 8010aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a3f      	ldr	r2, [pc, #252]	; (8010ba8 <UART_SetConfig+0x6a8>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	f040 80f8 	bne.w	8010ca2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010ab2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ab6:	2b20      	cmp	r3, #32
 8010ab8:	dc46      	bgt.n	8010b48 <UART_SetConfig+0x648>
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	f2c0 8082 	blt.w	8010bc4 <UART_SetConfig+0x6c4>
 8010ac0:	3b02      	subs	r3, #2
 8010ac2:	2b1e      	cmp	r3, #30
 8010ac4:	d87e      	bhi.n	8010bc4 <UART_SetConfig+0x6c4>
 8010ac6:	a201      	add	r2, pc, #4	; (adr r2, 8010acc <UART_SetConfig+0x5cc>)
 8010ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010acc:	08010b4f 	.word	0x08010b4f
 8010ad0:	08010bc5 	.word	0x08010bc5
 8010ad4:	08010b57 	.word	0x08010b57
 8010ad8:	08010bc5 	.word	0x08010bc5
 8010adc:	08010bc5 	.word	0x08010bc5
 8010ae0:	08010bc5 	.word	0x08010bc5
 8010ae4:	08010b67 	.word	0x08010b67
 8010ae8:	08010bc5 	.word	0x08010bc5
 8010aec:	08010bc5 	.word	0x08010bc5
 8010af0:	08010bc5 	.word	0x08010bc5
 8010af4:	08010bc5 	.word	0x08010bc5
 8010af8:	08010bc5 	.word	0x08010bc5
 8010afc:	08010bc5 	.word	0x08010bc5
 8010b00:	08010bc5 	.word	0x08010bc5
 8010b04:	08010b77 	.word	0x08010b77
 8010b08:	08010bc5 	.word	0x08010bc5
 8010b0c:	08010bc5 	.word	0x08010bc5
 8010b10:	08010bc5 	.word	0x08010bc5
 8010b14:	08010bc5 	.word	0x08010bc5
 8010b18:	08010bc5 	.word	0x08010bc5
 8010b1c:	08010bc5 	.word	0x08010bc5
 8010b20:	08010bc5 	.word	0x08010bc5
 8010b24:	08010bc5 	.word	0x08010bc5
 8010b28:	08010bc5 	.word	0x08010bc5
 8010b2c:	08010bc5 	.word	0x08010bc5
 8010b30:	08010bc5 	.word	0x08010bc5
 8010b34:	08010bc5 	.word	0x08010bc5
 8010b38:	08010bc5 	.word	0x08010bc5
 8010b3c:	08010bc5 	.word	0x08010bc5
 8010b40:	08010bc5 	.word	0x08010bc5
 8010b44:	08010bb7 	.word	0x08010bb7
 8010b48:	2b40      	cmp	r3, #64	; 0x40
 8010b4a:	d037      	beq.n	8010bbc <UART_SetConfig+0x6bc>
 8010b4c:	e03a      	b.n	8010bc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010b4e:	f7fb fd57 	bl	800c600 <HAL_RCCEx_GetD3PCLK1Freq>
 8010b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b54:	e03c      	b.n	8010bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fb fd66 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b64:	e034      	b.n	8010bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b66:	f107 0318 	add.w	r3, r7, #24
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fb feb2 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b74:	e02c      	b.n	8010bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b76:	4b09      	ldr	r3, [pc, #36]	; (8010b9c <UART_SetConfig+0x69c>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f003 0320 	and.w	r3, r3, #32
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d016      	beq.n	8010bb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010b82:	4b06      	ldr	r3, [pc, #24]	; (8010b9c <UART_SetConfig+0x69c>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	08db      	lsrs	r3, r3, #3
 8010b88:	f003 0303 	and.w	r3, r3, #3
 8010b8c:	4a07      	ldr	r2, [pc, #28]	; (8010bac <UART_SetConfig+0x6ac>)
 8010b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b94:	e01c      	b.n	8010bd0 <UART_SetConfig+0x6d0>
 8010b96:	bf00      	nop
 8010b98:	40011400 	.word	0x40011400
 8010b9c:	58024400 	.word	0x58024400
 8010ba0:	40007800 	.word	0x40007800
 8010ba4:	40007c00 	.word	0x40007c00
 8010ba8:	58000c00 	.word	0x58000c00
 8010bac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010bb0:	4b9d      	ldr	r3, [pc, #628]	; (8010e28 <UART_SetConfig+0x928>)
 8010bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bb4:	e00c      	b.n	8010bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010bb6:	4b9d      	ldr	r3, [pc, #628]	; (8010e2c <UART_SetConfig+0x92c>)
 8010bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bba:	e009      	b.n	8010bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bc2:	e005      	b.n	8010bd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010bce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f000 81de 	beq.w	8010f94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bdc:	4a94      	ldr	r2, [pc, #592]	; (8010e30 <UART_SetConfig+0x930>)
 8010bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010be2:	461a      	mov	r2, r3
 8010be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	685a      	ldr	r2, [r3, #4]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	005b      	lsls	r3, r3, #1
 8010bf4:	4413      	add	r3, r2
 8010bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d305      	bcc.n	8010c08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d903      	bls.n	8010c10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010c0e:	e1c1      	b.n	8010f94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c12:	2200      	movs	r2, #0
 8010c14:	60bb      	str	r3, [r7, #8]
 8010c16:	60fa      	str	r2, [r7, #12]
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c1c:	4a84      	ldr	r2, [pc, #528]	; (8010e30 <UART_SetConfig+0x930>)
 8010c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	2200      	movs	r2, #0
 8010c26:	603b      	str	r3, [r7, #0]
 8010c28:	607a      	str	r2, [r7, #4]
 8010c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c32:	f7ef fb55 	bl	80002e0 <__aeabi_uldivmod>
 8010c36:	4602      	mov	r2, r0
 8010c38:	460b      	mov	r3, r1
 8010c3a:	4610      	mov	r0, r2
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	f04f 0200 	mov.w	r2, #0
 8010c42:	f04f 0300 	mov.w	r3, #0
 8010c46:	020b      	lsls	r3, r1, #8
 8010c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c4c:	0202      	lsls	r2, r0, #8
 8010c4e:	6979      	ldr	r1, [r7, #20]
 8010c50:	6849      	ldr	r1, [r1, #4]
 8010c52:	0849      	lsrs	r1, r1, #1
 8010c54:	2000      	movs	r0, #0
 8010c56:	460c      	mov	r4, r1
 8010c58:	4605      	mov	r5, r0
 8010c5a:	eb12 0804 	adds.w	r8, r2, r4
 8010c5e:	eb43 0905 	adc.w	r9, r3, r5
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	469a      	mov	sl, r3
 8010c6a:	4693      	mov	fp, r2
 8010c6c:	4652      	mov	r2, sl
 8010c6e:	465b      	mov	r3, fp
 8010c70:	4640      	mov	r0, r8
 8010c72:	4649      	mov	r1, r9
 8010c74:	f7ef fb34 	bl	80002e0 <__aeabi_uldivmod>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010c86:	d308      	bcc.n	8010c9a <UART_SetConfig+0x79a>
 8010c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c8e:	d204      	bcs.n	8010c9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c96:	60da      	str	r2, [r3, #12]
 8010c98:	e17c      	b.n	8010f94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ca0:	e178      	b.n	8010f94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	69db      	ldr	r3, [r3, #28]
 8010ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010caa:	f040 80c5 	bne.w	8010e38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010cae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010cb2:	2b20      	cmp	r3, #32
 8010cb4:	dc48      	bgt.n	8010d48 <UART_SetConfig+0x848>
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	db7b      	blt.n	8010db2 <UART_SetConfig+0x8b2>
 8010cba:	2b20      	cmp	r3, #32
 8010cbc:	d879      	bhi.n	8010db2 <UART_SetConfig+0x8b2>
 8010cbe:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <UART_SetConfig+0x7c4>)
 8010cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc4:	08010d4f 	.word	0x08010d4f
 8010cc8:	08010d57 	.word	0x08010d57
 8010ccc:	08010db3 	.word	0x08010db3
 8010cd0:	08010db3 	.word	0x08010db3
 8010cd4:	08010d5f 	.word	0x08010d5f
 8010cd8:	08010db3 	.word	0x08010db3
 8010cdc:	08010db3 	.word	0x08010db3
 8010ce0:	08010db3 	.word	0x08010db3
 8010ce4:	08010d6f 	.word	0x08010d6f
 8010ce8:	08010db3 	.word	0x08010db3
 8010cec:	08010db3 	.word	0x08010db3
 8010cf0:	08010db3 	.word	0x08010db3
 8010cf4:	08010db3 	.word	0x08010db3
 8010cf8:	08010db3 	.word	0x08010db3
 8010cfc:	08010db3 	.word	0x08010db3
 8010d00:	08010db3 	.word	0x08010db3
 8010d04:	08010d7f 	.word	0x08010d7f
 8010d08:	08010db3 	.word	0x08010db3
 8010d0c:	08010db3 	.word	0x08010db3
 8010d10:	08010db3 	.word	0x08010db3
 8010d14:	08010db3 	.word	0x08010db3
 8010d18:	08010db3 	.word	0x08010db3
 8010d1c:	08010db3 	.word	0x08010db3
 8010d20:	08010db3 	.word	0x08010db3
 8010d24:	08010db3 	.word	0x08010db3
 8010d28:	08010db3 	.word	0x08010db3
 8010d2c:	08010db3 	.word	0x08010db3
 8010d30:	08010db3 	.word	0x08010db3
 8010d34:	08010db3 	.word	0x08010db3
 8010d38:	08010db3 	.word	0x08010db3
 8010d3c:	08010db3 	.word	0x08010db3
 8010d40:	08010db3 	.word	0x08010db3
 8010d44:	08010da5 	.word	0x08010da5
 8010d48:	2b40      	cmp	r3, #64	; 0x40
 8010d4a:	d02e      	beq.n	8010daa <UART_SetConfig+0x8aa>
 8010d4c:	e031      	b.n	8010db2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d4e:	f7f9 fc5f 	bl	800a610 <HAL_RCC_GetPCLK1Freq>
 8010d52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d54:	e033      	b.n	8010dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d56:	f7f9 fc71 	bl	800a63c <HAL_RCC_GetPCLK2Freq>
 8010d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d5c:	e02f      	b.n	8010dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fb fc62 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d6c:	e027      	b.n	8010dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d6e:	f107 0318 	add.w	r3, r7, #24
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7fb fdae 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d7c:	e01f      	b.n	8010dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d7e:	4b2d      	ldr	r3, [pc, #180]	; (8010e34 <UART_SetConfig+0x934>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f003 0320 	and.w	r3, r3, #32
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d009      	beq.n	8010d9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d8a:	4b2a      	ldr	r3, [pc, #168]	; (8010e34 <UART_SetConfig+0x934>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	08db      	lsrs	r3, r3, #3
 8010d90:	f003 0303 	and.w	r3, r3, #3
 8010d94:	4a24      	ldr	r2, [pc, #144]	; (8010e28 <UART_SetConfig+0x928>)
 8010d96:	fa22 f303 	lsr.w	r3, r2, r3
 8010d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d9c:	e00f      	b.n	8010dbe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010d9e:	4b22      	ldr	r3, [pc, #136]	; (8010e28 <UART_SetConfig+0x928>)
 8010da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010da2:	e00c      	b.n	8010dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010da4:	4b21      	ldr	r3, [pc, #132]	; (8010e2c <UART_SetConfig+0x92c>)
 8010da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010da8:	e009      	b.n	8010dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010db0:	e005      	b.n	8010dbe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010db2:	2300      	movs	r3, #0
 8010db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010db6:	2301      	movs	r3, #1
 8010db8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 80e7 	beq.w	8010f94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dca:	4a19      	ldr	r2, [pc, #100]	; (8010e30 <UART_SetConfig+0x930>)
 8010dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010dd8:	005a      	lsls	r2, r3, #1
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	085b      	lsrs	r3, r3, #1
 8010de0:	441a      	add	r2, r3
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dee:	2b0f      	cmp	r3, #15
 8010df0:	d916      	bls.n	8010e20 <UART_SetConfig+0x920>
 8010df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010df8:	d212      	bcs.n	8010e20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	f023 030f 	bic.w	r3, r3, #15
 8010e02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e06:	085b      	lsrs	r3, r3, #1
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	f003 0307 	and.w	r3, r3, #7
 8010e0e:	b29a      	uxth	r2, r3
 8010e10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e12:	4313      	orrs	r3, r2
 8010e14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e1c:	60da      	str	r2, [r3, #12]
 8010e1e:	e0b9      	b.n	8010f94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e26:	e0b5      	b.n	8010f94 <UART_SetConfig+0xa94>
 8010e28:	03d09000 	.word	0x03d09000
 8010e2c:	003d0900 	.word	0x003d0900
 8010e30:	08016694 	.word	0x08016694
 8010e34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e3c:	2b20      	cmp	r3, #32
 8010e3e:	dc49      	bgt.n	8010ed4 <UART_SetConfig+0x9d4>
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	db7c      	blt.n	8010f3e <UART_SetConfig+0xa3e>
 8010e44:	2b20      	cmp	r3, #32
 8010e46:	d87a      	bhi.n	8010f3e <UART_SetConfig+0xa3e>
 8010e48:	a201      	add	r2, pc, #4	; (adr r2, 8010e50 <UART_SetConfig+0x950>)
 8010e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4e:	bf00      	nop
 8010e50:	08010edb 	.word	0x08010edb
 8010e54:	08010ee3 	.word	0x08010ee3
 8010e58:	08010f3f 	.word	0x08010f3f
 8010e5c:	08010f3f 	.word	0x08010f3f
 8010e60:	08010eeb 	.word	0x08010eeb
 8010e64:	08010f3f 	.word	0x08010f3f
 8010e68:	08010f3f 	.word	0x08010f3f
 8010e6c:	08010f3f 	.word	0x08010f3f
 8010e70:	08010efb 	.word	0x08010efb
 8010e74:	08010f3f 	.word	0x08010f3f
 8010e78:	08010f3f 	.word	0x08010f3f
 8010e7c:	08010f3f 	.word	0x08010f3f
 8010e80:	08010f3f 	.word	0x08010f3f
 8010e84:	08010f3f 	.word	0x08010f3f
 8010e88:	08010f3f 	.word	0x08010f3f
 8010e8c:	08010f3f 	.word	0x08010f3f
 8010e90:	08010f0b 	.word	0x08010f0b
 8010e94:	08010f3f 	.word	0x08010f3f
 8010e98:	08010f3f 	.word	0x08010f3f
 8010e9c:	08010f3f 	.word	0x08010f3f
 8010ea0:	08010f3f 	.word	0x08010f3f
 8010ea4:	08010f3f 	.word	0x08010f3f
 8010ea8:	08010f3f 	.word	0x08010f3f
 8010eac:	08010f3f 	.word	0x08010f3f
 8010eb0:	08010f3f 	.word	0x08010f3f
 8010eb4:	08010f3f 	.word	0x08010f3f
 8010eb8:	08010f3f 	.word	0x08010f3f
 8010ebc:	08010f3f 	.word	0x08010f3f
 8010ec0:	08010f3f 	.word	0x08010f3f
 8010ec4:	08010f3f 	.word	0x08010f3f
 8010ec8:	08010f3f 	.word	0x08010f3f
 8010ecc:	08010f3f 	.word	0x08010f3f
 8010ed0:	08010f31 	.word	0x08010f31
 8010ed4:	2b40      	cmp	r3, #64	; 0x40
 8010ed6:	d02e      	beq.n	8010f36 <UART_SetConfig+0xa36>
 8010ed8:	e031      	b.n	8010f3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010eda:	f7f9 fb99 	bl	800a610 <HAL_RCC_GetPCLK1Freq>
 8010ede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ee0:	e033      	b.n	8010f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ee2:	f7f9 fbab 	bl	800a63c <HAL_RCC_GetPCLK2Freq>
 8010ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ee8:	e02f      	b.n	8010f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fb fb9c 	bl	800c62c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef8:	e027      	b.n	8010f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010efa:	f107 0318 	add.w	r3, r7, #24
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fb fce8 	bl	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f08:	e01f      	b.n	8010f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f0a:	4b2d      	ldr	r3, [pc, #180]	; (8010fc0 <UART_SetConfig+0xac0>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f003 0320 	and.w	r3, r3, #32
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d009      	beq.n	8010f2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f16:	4b2a      	ldr	r3, [pc, #168]	; (8010fc0 <UART_SetConfig+0xac0>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	08db      	lsrs	r3, r3, #3
 8010f1c:	f003 0303 	and.w	r3, r3, #3
 8010f20:	4a28      	ldr	r2, [pc, #160]	; (8010fc4 <UART_SetConfig+0xac4>)
 8010f22:	fa22 f303 	lsr.w	r3, r2, r3
 8010f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f28:	e00f      	b.n	8010f4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010f2a:	4b26      	ldr	r3, [pc, #152]	; (8010fc4 <UART_SetConfig+0xac4>)
 8010f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f2e:	e00c      	b.n	8010f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f30:	4b25      	ldr	r3, [pc, #148]	; (8010fc8 <UART_SetConfig+0xac8>)
 8010f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f34:	e009      	b.n	8010f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f3c:	e005      	b.n	8010f4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f42:	2301      	movs	r3, #1
 8010f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f48:	bf00      	nop
    }

    if (pclk != 0U)
 8010f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d021      	beq.n	8010f94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f54:	4a1d      	ldr	r2, [pc, #116]	; (8010fcc <UART_SetConfig+0xacc>)
 8010f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	085b      	lsrs	r3, r3, #1
 8010f68:	441a      	add	r2, r3
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	2b0f      	cmp	r3, #15
 8010f78:	d909      	bls.n	8010f8e <UART_SetConfig+0xa8e>
 8010f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f80:	d205      	bcs.n	8010f8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	60da      	str	r2, [r3, #12]
 8010f8c:	e002      	b.n	8010f94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2201      	movs	r2, #1
 8010f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	2200      	movs	r2, #0
 8010fae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010fb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3748      	adds	r7, #72	; 0x48
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010fbe:	bf00      	nop
 8010fc0:	58024400 	.word	0x58024400
 8010fc4:	03d09000 	.word	0x03d09000
 8010fc8:	003d0900 	.word	0x003d0900
 8010fcc:	08016694 	.word	0x08016694

08010fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fdc:	f003 0308 	and.w	r3, r3, #8
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d00a      	beq.n	8010ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	430a      	orrs	r2, r1
 8010ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ffe:	f003 0301 	and.w	r3, r3, #1
 8011002:	2b00      	cmp	r3, #0
 8011004:	d00a      	beq.n	801101c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	430a      	orrs	r2, r1
 801101a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011020:	f003 0302 	and.w	r3, r3, #2
 8011024:	2b00      	cmp	r3, #0
 8011026:	d00a      	beq.n	801103e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	430a      	orrs	r2, r1
 801103c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011042:	f003 0304 	and.w	r3, r3, #4
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00a      	beq.n	8011060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	430a      	orrs	r2, r1
 801105e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011064:	f003 0310 	and.w	r3, r3, #16
 8011068:	2b00      	cmp	r3, #0
 801106a:	d00a      	beq.n	8011082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	430a      	orrs	r2, r1
 8011080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011086:	f003 0320 	and.w	r3, r3, #32
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00a      	beq.n	80110a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	430a      	orrs	r2, r1
 80110a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d01a      	beq.n	80110e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	430a      	orrs	r2, r1
 80110c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110ce:	d10a      	bne.n	80110e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	430a      	orrs	r2, r1
 80110e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d00a      	beq.n	8011108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	430a      	orrs	r2, r1
 8011106:	605a      	str	r2, [r3, #4]
  }
}
 8011108:	bf00      	nop
 801110a:	370c      	adds	r7, #12
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr

08011114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b098      	sub	sp, #96	; 0x60
 8011118:	af02      	add	r7, sp, #8
 801111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011124:	f7f2 fb2e 	bl	8003784 <HAL_GetTick>
 8011128:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f003 0308 	and.w	r3, r3, #8
 8011134:	2b08      	cmp	r3, #8
 8011136:	d12f      	bne.n	8011198 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011140:	2200      	movs	r2, #0
 8011142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 f88e 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d022      	beq.n	8011198 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115a:	e853 3f00 	ldrex	r3, [r3]
 801115e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011166:	653b      	str	r3, [r7, #80]	; 0x50
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	461a      	mov	r2, r3
 801116e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011170:	647b      	str	r3, [r7, #68]	; 0x44
 8011172:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011178:	e841 2300 	strex	r3, r2, [r1]
 801117c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801117e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1e6      	bne.n	8011152 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2220      	movs	r2, #32
 8011188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011194:	2303      	movs	r3, #3
 8011196:	e063      	b.n	8011260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f003 0304 	and.w	r3, r3, #4
 80111a2:	2b04      	cmp	r3, #4
 80111a4:	d149      	bne.n	801123a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80111a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111ae:	2200      	movs	r2, #0
 80111b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 f857 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d03c      	beq.n	801123a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c8:	e853 3f00 	ldrex	r3, [r3]
 80111cc:	623b      	str	r3, [r7, #32]
   return(result);
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80111d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	461a      	mov	r2, r3
 80111dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111de:	633b      	str	r3, [r7, #48]	; 0x30
 80111e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111e6:	e841 2300 	strex	r3, r2, [r1]
 80111ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80111ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1e6      	bne.n	80111c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	3308      	adds	r3, #8
 80111f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	e853 3f00 	ldrex	r3, [r3]
 8011200:	60fb      	str	r3, [r7, #12]
   return(result);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f023 0301 	bic.w	r3, r3, #1
 8011208:	64bb      	str	r3, [r7, #72]	; 0x48
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	3308      	adds	r3, #8
 8011210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011212:	61fa      	str	r2, [r7, #28]
 8011214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011216:	69b9      	ldr	r1, [r7, #24]
 8011218:	69fa      	ldr	r2, [r7, #28]
 801121a:	e841 2300 	strex	r3, r2, [r1]
 801121e:	617b      	str	r3, [r7, #20]
   return(result);
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d1e5      	bne.n	80111f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2220      	movs	r2, #32
 801122a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2200      	movs	r2, #0
 8011232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011236:	2303      	movs	r3, #3
 8011238:	e012      	b.n	8011260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2220      	movs	r2, #32
 801123e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2220      	movs	r2, #32
 8011246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2200      	movs	r2, #0
 801124e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2200      	movs	r2, #0
 8011254:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801125e:	2300      	movs	r3, #0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3758      	adds	r7, #88	; 0x58
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	603b      	str	r3, [r7, #0]
 8011274:	4613      	mov	r3, r2
 8011276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011278:	e04f      	b.n	801131a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011280:	d04b      	beq.n	801131a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011282:	f7f2 fa7f 	bl	8003784 <HAL_GetTick>
 8011286:	4602      	mov	r2, r0
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	69ba      	ldr	r2, [r7, #24]
 801128e:	429a      	cmp	r2, r3
 8011290:	d302      	bcc.n	8011298 <UART_WaitOnFlagUntilTimeout+0x30>
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d101      	bne.n	801129c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011298:	2303      	movs	r3, #3
 801129a:	e04e      	b.n	801133a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f003 0304 	and.w	r3, r3, #4
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d037      	beq.n	801131a <UART_WaitOnFlagUntilTimeout+0xb2>
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	2b80      	cmp	r3, #128	; 0x80
 80112ae:	d034      	beq.n	801131a <UART_WaitOnFlagUntilTimeout+0xb2>
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b40      	cmp	r3, #64	; 0x40
 80112b4:	d031      	beq.n	801131a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	69db      	ldr	r3, [r3, #28]
 80112bc:	f003 0308 	and.w	r3, r3, #8
 80112c0:	2b08      	cmp	r3, #8
 80112c2:	d110      	bne.n	80112e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2208      	movs	r2, #8
 80112ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f000 f95b 	bl	8011588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2208      	movs	r2, #8
 80112d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2200      	movs	r2, #0
 80112de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80112e2:	2301      	movs	r3, #1
 80112e4:	e029      	b.n	801133a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	69db      	ldr	r3, [r3, #28]
 80112ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80112f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80112f4:	d111      	bne.n	801131a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80112fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 f941 	bl	8011588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2220      	movs	r2, #32
 801130a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2200      	movs	r2, #0
 8011312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011316:	2303      	movs	r3, #3
 8011318:	e00f      	b.n	801133a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	69da      	ldr	r2, [r3, #28]
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	4013      	ands	r3, r2
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	429a      	cmp	r2, r3
 8011328:	bf0c      	ite	eq
 801132a:	2301      	moveq	r3, #1
 801132c:	2300      	movne	r3, #0
 801132e:	b2db      	uxtb	r3, r3
 8011330:	461a      	mov	r2, r3
 8011332:	79fb      	ldrb	r3, [r7, #7]
 8011334:	429a      	cmp	r2, r3
 8011336:	d0a0      	beq.n	801127a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	3710      	adds	r7, #16
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
	...

08011344 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011344:	b480      	push	{r7}
 8011346:	b0a3      	sub	sp, #140	; 0x8c
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	4613      	mov	r3, r2
 8011350:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	68ba      	ldr	r2, [r7, #8]
 8011356:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	88fa      	ldrh	r2, [r7, #6]
 801135c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	88fa      	ldrh	r2, [r7, #6]
 8011364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2200      	movs	r2, #0
 801136c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011376:	d10e      	bne.n	8011396 <UART_Start_Receive_IT+0x52>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	691b      	ldr	r3, [r3, #16]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d105      	bne.n	801138c <UART_Start_Receive_IT+0x48>
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011386:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801138a:	e02d      	b.n	80113e8 <UART_Start_Receive_IT+0xa4>
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	22ff      	movs	r2, #255	; 0xff
 8011390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011394:	e028      	b.n	80113e8 <UART_Start_Receive_IT+0xa4>
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d10d      	bne.n	80113ba <UART_Start_Receive_IT+0x76>
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	691b      	ldr	r3, [r3, #16]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d104      	bne.n	80113b0 <UART_Start_Receive_IT+0x6c>
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	22ff      	movs	r2, #255	; 0xff
 80113aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113ae:	e01b      	b.n	80113e8 <UART_Start_Receive_IT+0xa4>
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	227f      	movs	r2, #127	; 0x7f
 80113b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113b8:	e016      	b.n	80113e8 <UART_Start_Receive_IT+0xa4>
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80113c2:	d10d      	bne.n	80113e0 <UART_Start_Receive_IT+0x9c>
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d104      	bne.n	80113d6 <UART_Start_Receive_IT+0x92>
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	227f      	movs	r2, #127	; 0x7f
 80113d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113d4:	e008      	b.n	80113e8 <UART_Start_Receive_IT+0xa4>
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	223f      	movs	r2, #63	; 0x3f
 80113da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113de:	e003      	b.n	80113e8 <UART_Start_Receive_IT+0xa4>
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2200      	movs	r2, #0
 80113e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2222      	movs	r2, #34	; 0x22
 80113f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	3308      	adds	r3, #8
 80113fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011402:	e853 3f00 	ldrex	r3, [r3]
 8011406:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801140a:	f043 0301 	orr.w	r3, r3, #1
 801140e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3308      	adds	r3, #8
 8011418:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801141c:	673a      	str	r2, [r7, #112]	; 0x70
 801141e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011420:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011422:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011424:	e841 2300 	strex	r3, r2, [r1]
 8011428:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801142a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801142c:	2b00      	cmp	r3, #0
 801142e:	d1e3      	bne.n	80113f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011438:	d14f      	bne.n	80114da <UART_Start_Receive_IT+0x196>
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011440:	88fa      	ldrh	r2, [r7, #6]
 8011442:	429a      	cmp	r2, r3
 8011444:	d349      	bcc.n	80114da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	689b      	ldr	r3, [r3, #8]
 801144a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801144e:	d107      	bne.n	8011460 <UART_Start_Receive_IT+0x11c>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	691b      	ldr	r3, [r3, #16]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d103      	bne.n	8011460 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	4a47      	ldr	r2, [pc, #284]	; (8011578 <UART_Start_Receive_IT+0x234>)
 801145c:	675a      	str	r2, [r3, #116]	; 0x74
 801145e:	e002      	b.n	8011466 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	4a46      	ldr	r2, [pc, #280]	; (801157c <UART_Start_Receive_IT+0x238>)
 8011464:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	691b      	ldr	r3, [r3, #16]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d01a      	beq.n	80114a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011476:	e853 3f00 	ldrex	r3, [r3]
 801147a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801147c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	461a      	mov	r2, r3
 801148c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011492:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011494:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011496:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011498:	e841 2300 	strex	r3, r2, [r1]
 801149c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801149e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1e4      	bne.n	801146e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	3308      	adds	r3, #8
 80114aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ae:	e853 3f00 	ldrex	r3, [r3]
 80114b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3308      	adds	r3, #8
 80114c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80114c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80114c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114cc:	e841 2300 	strex	r3, r2, [r1]
 80114d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80114d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d1e5      	bne.n	80114a4 <UART_Start_Receive_IT+0x160>
 80114d8:	e046      	b.n	8011568 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114e2:	d107      	bne.n	80114f4 <UART_Start_Receive_IT+0x1b0>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d103      	bne.n	80114f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	4a24      	ldr	r2, [pc, #144]	; (8011580 <UART_Start_Receive_IT+0x23c>)
 80114f0:	675a      	str	r2, [r3, #116]	; 0x74
 80114f2:	e002      	b.n	80114fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	4a23      	ldr	r2, [pc, #140]	; (8011584 <UART_Start_Receive_IT+0x240>)
 80114f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d019      	beq.n	8011536 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150a:	e853 3f00 	ldrex	r3, [r3]
 801150e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011512:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011516:	677b      	str	r3, [r7, #116]	; 0x74
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	461a      	mov	r2, r3
 801151e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011520:	637b      	str	r3, [r7, #52]	; 0x34
 8011522:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011528:	e841 2300 	strex	r3, r2, [r1]
 801152c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1e6      	bne.n	8011502 <UART_Start_Receive_IT+0x1be>
 8011534:	e018      	b.n	8011568 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	e853 3f00 	ldrex	r3, [r3]
 8011542:	613b      	str	r3, [r7, #16]
   return(result);
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	f043 0320 	orr.w	r3, r3, #32
 801154a:	67bb      	str	r3, [r7, #120]	; 0x78
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	461a      	mov	r2, r3
 8011552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011554:	623b      	str	r3, [r7, #32]
 8011556:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011558:	69f9      	ldr	r1, [r7, #28]
 801155a:	6a3a      	ldr	r2, [r7, #32]
 801155c:	e841 2300 	strex	r3, r2, [r1]
 8011560:	61bb      	str	r3, [r7, #24]
   return(result);
 8011562:	69bb      	ldr	r3, [r7, #24]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d1e6      	bne.n	8011536 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011568:	2300      	movs	r3, #0
}
 801156a:	4618      	mov	r0, r3
 801156c:	378c      	adds	r7, #140	; 0x8c
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	08011da9 	.word	0x08011da9
 801157c:	08011a49 	.word	0x08011a49
 8011580:	08011891 	.word	0x08011891
 8011584:	080116d9 	.word	0x080116d9

08011588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011588:	b480      	push	{r7}
 801158a:	b095      	sub	sp, #84	; 0x54
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011598:	e853 3f00 	ldrex	r3, [r3]
 801159c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80115a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ae:	643b      	str	r3, [r7, #64]	; 0x40
 80115b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80115b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115b6:	e841 2300 	strex	r3, r2, [r1]
 80115ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80115bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d1e6      	bne.n	8011590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	3308      	adds	r3, #8
 80115c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	e853 3f00 	ldrex	r3, [r3]
 80115d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80115d2:	69fa      	ldr	r2, [r7, #28]
 80115d4:	4b1e      	ldr	r3, [pc, #120]	; (8011650 <UART_EndRxTransfer+0xc8>)
 80115d6:	4013      	ands	r3, r2
 80115d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	3308      	adds	r3, #8
 80115e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80115e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115ea:	e841 2300 	strex	r3, r2, [r1]
 80115ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1e5      	bne.n	80115c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d118      	bne.n	8011630 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	e853 3f00 	ldrex	r3, [r3]
 801160a:	60bb      	str	r3, [r7, #8]
   return(result);
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	f023 0310 	bic.w	r3, r3, #16
 8011612:	647b      	str	r3, [r7, #68]	; 0x44
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	461a      	mov	r2, r3
 801161a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801161c:	61bb      	str	r3, [r7, #24]
 801161e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011620:	6979      	ldr	r1, [r7, #20]
 8011622:	69ba      	ldr	r2, [r7, #24]
 8011624:	e841 2300 	strex	r3, r2, [r1]
 8011628:	613b      	str	r3, [r7, #16]
   return(result);
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d1e6      	bne.n	80115fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2220      	movs	r2, #32
 8011634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2200      	movs	r2, #0
 801163c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011644:	bf00      	nop
 8011646:	3754      	adds	r7, #84	; 0x54
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr
 8011650:	effffffe 	.word	0xeffffffe

08011654 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011660:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2200      	movs	r2, #0
 8011666:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2200      	movs	r2, #0
 801166e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011672:	68f8      	ldr	r0, [r7, #12]
 8011674:	f7fe ff2e 	bl	80104d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011678:	bf00      	nop
 801167a:	3710      	adds	r7, #16
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b088      	sub	sp, #32
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	e853 3f00 	ldrex	r3, [r3]
 8011694:	60bb      	str	r3, [r7, #8]
   return(result);
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801169c:	61fb      	str	r3, [r7, #28]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	61bb      	str	r3, [r7, #24]
 80116a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116aa:	6979      	ldr	r1, [r7, #20]
 80116ac:	69ba      	ldr	r2, [r7, #24]
 80116ae:	e841 2300 	strex	r3, r2, [r1]
 80116b2:	613b      	str	r3, [r7, #16]
   return(result);
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1e6      	bne.n	8011688 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2220      	movs	r2, #32
 80116be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7fe fef9 	bl	80104c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116ce:	bf00      	nop
 80116d0:	3720      	adds	r7, #32
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
	...

080116d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b09c      	sub	sp, #112	; 0x70
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116f0:	2b22      	cmp	r3, #34	; 0x22
 80116f2:	f040 80be 	bne.w	8011872 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011704:	b2d9      	uxtb	r1, r3
 8011706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801170a:	b2da      	uxtb	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011710:	400a      	ands	r2, r1
 8011712:	b2d2      	uxtb	r2, r2
 8011714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011726:	b29b      	uxth	r3, r3
 8011728:	3b01      	subs	r3, #1
 801172a:	b29a      	uxth	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011738:	b29b      	uxth	r3, r3
 801173a:	2b00      	cmp	r3, #0
 801173c:	f040 80a1 	bne.w	8011882 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011748:	e853 3f00 	ldrex	r3, [r3]
 801174c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801174e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011754:	66bb      	str	r3, [r7, #104]	; 0x68
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	461a      	mov	r2, r3
 801175c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801175e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011760:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011766:	e841 2300 	strex	r3, r2, [r1]
 801176a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801176c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801176e:	2b00      	cmp	r3, #0
 8011770:	d1e6      	bne.n	8011740 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	3308      	adds	r3, #8
 8011778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801177a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801177c:	e853 3f00 	ldrex	r3, [r3]
 8011780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011784:	f023 0301 	bic.w	r3, r3, #1
 8011788:	667b      	str	r3, [r7, #100]	; 0x64
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3308      	adds	r3, #8
 8011790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011792:	647a      	str	r2, [r7, #68]	; 0x44
 8011794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801179a:	e841 2300 	strex	r3, r2, [r1]
 801179e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80117a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1e5      	bne.n	8011772 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2220      	movs	r2, #32
 80117aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2200      	movs	r2, #0
 80117b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	4a33      	ldr	r2, [pc, #204]	; (801188c <UART_RxISR_8BIT+0x1b4>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d01f      	beq.n	8011804 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d018      	beq.n	8011804 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117da:	e853 3f00 	ldrex	r3, [r3]
 80117de:	623b      	str	r3, [r7, #32]
   return(result);
 80117e0:	6a3b      	ldr	r3, [r7, #32]
 80117e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80117e6:	663b      	str	r3, [r7, #96]	; 0x60
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	461a      	mov	r2, r3
 80117ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117f0:	633b      	str	r3, [r7, #48]	; 0x30
 80117f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117f8:	e841 2300 	strex	r3, r2, [r1]
 80117fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80117fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1e6      	bne.n	80117d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011808:	2b01      	cmp	r3, #1
 801180a:	d12e      	bne.n	801186a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	e853 3f00 	ldrex	r3, [r3]
 801181e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f023 0310 	bic.w	r3, r3, #16
 8011826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	461a      	mov	r2, r3
 801182e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011830:	61fb      	str	r3, [r7, #28]
 8011832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011834:	69b9      	ldr	r1, [r7, #24]
 8011836:	69fa      	ldr	r2, [r7, #28]
 8011838:	e841 2300 	strex	r3, r2, [r1]
 801183c:	617b      	str	r3, [r7, #20]
   return(result);
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1e6      	bne.n	8011812 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	69db      	ldr	r3, [r3, #28]
 801184a:	f003 0310 	and.w	r3, r3, #16
 801184e:	2b10      	cmp	r3, #16
 8011850:	d103      	bne.n	801185a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2210      	movs	r2, #16
 8011858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7fe fe40 	bl	80104e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011868:	e00b      	b.n	8011882 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ee fef0 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011870:	e007      	b.n	8011882 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	699a      	ldr	r2, [r3, #24]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f042 0208 	orr.w	r2, r2, #8
 8011880:	619a      	str	r2, [r3, #24]
}
 8011882:	bf00      	nop
 8011884:	3770      	adds	r7, #112	; 0x70
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	58000c00 	.word	0x58000c00

08011890 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b09c      	sub	sp, #112	; 0x70
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801189e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118a8:	2b22      	cmp	r3, #34	; 0x22
 80118aa:	f040 80be 	bne.w	8011a2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80118be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80118c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80118c6:	4013      	ands	r3, r2
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118d2:	1c9a      	adds	r2, r3, #2
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118de:	b29b      	uxth	r3, r3
 80118e0:	3b01      	subs	r3, #1
 80118e2:	b29a      	uxth	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f040 80a1 	bne.w	8011a3a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011900:	e853 3f00 	ldrex	r3, [r3]
 8011904:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801190c:	667b      	str	r3, [r7, #100]	; 0x64
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	461a      	mov	r2, r3
 8011914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011916:	657b      	str	r3, [r7, #84]	; 0x54
 8011918:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801191c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801191e:	e841 2300 	strex	r3, r2, [r1]
 8011922:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011926:	2b00      	cmp	r3, #0
 8011928:	d1e6      	bne.n	80118f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	3308      	adds	r3, #8
 8011930:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011934:	e853 3f00 	ldrex	r3, [r3]
 8011938:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193c:	f023 0301 	bic.w	r3, r3, #1
 8011940:	663b      	str	r3, [r7, #96]	; 0x60
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3308      	adds	r3, #8
 8011948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801194a:	643a      	str	r2, [r7, #64]	; 0x40
 801194c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011952:	e841 2300 	strex	r3, r2, [r1]
 8011956:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195a:	2b00      	cmp	r3, #0
 801195c:	d1e5      	bne.n	801192a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2220      	movs	r2, #32
 8011962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2200      	movs	r2, #0
 801196a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2200      	movs	r2, #0
 8011970:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4a33      	ldr	r2, [pc, #204]	; (8011a44 <UART_RxISR_16BIT+0x1b4>)
 8011978:	4293      	cmp	r3, r2
 801197a:	d01f      	beq.n	80119bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011986:	2b00      	cmp	r3, #0
 8011988:	d018      	beq.n	80119bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011990:	6a3b      	ldr	r3, [r7, #32]
 8011992:	e853 3f00 	ldrex	r3, [r3]
 8011996:	61fb      	str	r3, [r7, #28]
   return(result);
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801199e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	461a      	mov	r2, r3
 80119a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119b0:	e841 2300 	strex	r3, r2, [r1]
 80119b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d1e6      	bne.n	801198a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d12e      	bne.n	8011a22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2200      	movs	r2, #0
 80119c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	e853 3f00 	ldrex	r3, [r3]
 80119d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	f023 0310 	bic.w	r3, r3, #16
 80119de:	65bb      	str	r3, [r7, #88]	; 0x58
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	461a      	mov	r2, r3
 80119e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119e8:	61bb      	str	r3, [r7, #24]
 80119ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ec:	6979      	ldr	r1, [r7, #20]
 80119ee:	69ba      	ldr	r2, [r7, #24]
 80119f0:	e841 2300 	strex	r3, r2, [r1]
 80119f4:	613b      	str	r3, [r7, #16]
   return(result);
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1e6      	bne.n	80119ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	69db      	ldr	r3, [r3, #28]
 8011a02:	f003 0310 	and.w	r3, r3, #16
 8011a06:	2b10      	cmp	r3, #16
 8011a08:	d103      	bne.n	8011a12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2210      	movs	r2, #16
 8011a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a18:	4619      	mov	r1, r3
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f7fe fd64 	bl	80104e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a20:	e00b      	b.n	8011a3a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f7ee fe14 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011a28:	e007      	b.n	8011a3a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	699a      	ldr	r2, [r3, #24]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f042 0208 	orr.w	r2, r2, #8
 8011a38:	619a      	str	r2, [r3, #24]
}
 8011a3a:	bf00      	nop
 8011a3c:	3770      	adds	r7, #112	; 0x70
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	58000c00 	.word	0x58000c00

08011a48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b0ac      	sub	sp, #176	; 0xb0
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	69db      	ldr	r3, [r3, #28]
 8011a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	689b      	ldr	r3, [r3, #8]
 8011a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a7e:	2b22      	cmp	r3, #34	; 0x22
 8011a80:	f040 8180 	bne.w	8011d84 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011a8a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011a8e:	e123      	b.n	8011cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a96:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011a9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011a9e:	b2d9      	uxtb	r1, r3
 8011aa0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011aaa:	400a      	ands	r2, r1
 8011aac:	b2d2      	uxtb	r2, r2
 8011aae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ab4:	1c5a      	adds	r2, r3, #1
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	69db      	ldr	r3, [r3, #28]
 8011ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ada:	f003 0307 	and.w	r3, r3, #7
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d053      	beq.n	8011b8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ae6:	f003 0301 	and.w	r3, r3, #1
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d011      	beq.n	8011b12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00b      	beq.n	8011b12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2201      	movs	r2, #1
 8011b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b08:	f043 0201 	orr.w	r2, r3, #1
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b16:	f003 0302 	and.w	r3, r3, #2
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d011      	beq.n	8011b42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b22:	f003 0301 	and.w	r3, r3, #1
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d00b      	beq.n	8011b42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2202      	movs	r2, #2
 8011b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b38:	f043 0204 	orr.w	r2, r3, #4
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b46:	f003 0304 	and.w	r3, r3, #4
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d011      	beq.n	8011b72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b52:	f003 0301 	and.w	r3, r3, #1
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d00b      	beq.n	8011b72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2204      	movs	r2, #4
 8011b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b68:	f043 0202 	orr.w	r2, r3, #2
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d006      	beq.n	8011b8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f7fe fca9 	bl	80104d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f040 80a0 	bne.w	8011cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ba0:	e853 3f00 	ldrex	r3, [r3]
 8011ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011bbc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bbe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011bc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011bc2:	e841 2300 	strex	r3, r2, [r1]
 8011bc6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d1e4      	bne.n	8011b98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	3308      	adds	r3, #8
 8011bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bd8:	e853 3f00 	ldrex	r3, [r3]
 8011bdc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011be0:	4b6e      	ldr	r3, [pc, #440]	; (8011d9c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011be2:	4013      	ands	r3, r2
 8011be4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	3308      	adds	r3, #8
 8011bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011bf2:	66ba      	str	r2, [r7, #104]	; 0x68
 8011bf4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011bf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011bfa:	e841 2300 	strex	r3, r2, [r1]
 8011bfe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1e3      	bne.n	8011bce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2220      	movs	r2, #32
 8011c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2200      	movs	r2, #0
 8011c18:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a60      	ldr	r2, [pc, #384]	; (8011da0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d021      	beq.n	8011c68 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d01a      	beq.n	8011c68 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c3a:	e853 3f00 	ldrex	r3, [r3]
 8011c3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c54:	657b      	str	r3, [r7, #84]	; 0x54
 8011c56:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c5c:	e841 2300 	strex	r3, r2, [r1]
 8011c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d1e4      	bne.n	8011c32 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d130      	bne.n	8011cd2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c7e:	e853 3f00 	ldrex	r3, [r3]
 8011c82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c86:	f023 0310 	bic.w	r3, r3, #16
 8011c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	461a      	mov	r2, r3
 8011c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c98:	643b      	str	r3, [r7, #64]	; 0x40
 8011c9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ca0:	e841 2300 	strex	r3, r2, [r1]
 8011ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1e4      	bne.n	8011c76 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	69db      	ldr	r3, [r3, #28]
 8011cb2:	f003 0310 	and.w	r3, r3, #16
 8011cb6:	2b10      	cmp	r3, #16
 8011cb8:	d103      	bne.n	8011cc2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2210      	movs	r2, #16
 8011cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011cc8:	4619      	mov	r1, r3
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7fe fc0c 	bl	80104e8 <HAL_UARTEx_RxEventCallback>
 8011cd0:	e002      	b.n	8011cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7ee fcbc 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011cd8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d006      	beq.n	8011cee <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ce4:	f003 0320 	and.w	r3, r3, #32
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f47f aed1 	bne.w	8011a90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cf4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011cf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d049      	beq.n	8011d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d242      	bcs.n	8011d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3308      	adds	r3, #8
 8011d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d16:	6a3b      	ldr	r3, [r7, #32]
 8011d18:	e853 3f00 	ldrex	r3, [r3]
 8011d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	3308      	adds	r3, #8
 8011d2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d3a:	e841 2300 	strex	r3, r2, [r1]
 8011d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1e3      	bne.n	8011d0e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4a16      	ldr	r2, [pc, #88]	; (8011da4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011d4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	e853 3f00 	ldrex	r3, [r3]
 8011d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	f043 0320 	orr.w	r3, r3, #32
 8011d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d6e:	61bb      	str	r3, [r7, #24]
 8011d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d72:	6979      	ldr	r1, [r7, #20]
 8011d74:	69ba      	ldr	r2, [r7, #24]
 8011d76:	e841 2300 	strex	r3, r2, [r1]
 8011d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d1e4      	bne.n	8011d4c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d82:	e007      	b.n	8011d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	699a      	ldr	r2, [r3, #24]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f042 0208 	orr.w	r2, r2, #8
 8011d92:	619a      	str	r2, [r3, #24]
}
 8011d94:	bf00      	nop
 8011d96:	37b0      	adds	r7, #176	; 0xb0
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	effffffe 	.word	0xeffffffe
 8011da0:	58000c00 	.word	0x58000c00
 8011da4:	080116d9 	.word	0x080116d9

08011da8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b0ae      	sub	sp, #184	; 0xb8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011db6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	69db      	ldr	r3, [r3, #28]
 8011dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dde:	2b22      	cmp	r3, #34	; 0x22
 8011de0:	f040 8184 	bne.w	80120ec <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011dea:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011dee:	e127      	b.n	8012040 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011e02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011e06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011e0a:	4013      	ands	r3, r2
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011e12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e18:	1c9a      	adds	r2, r3, #2
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	3b01      	subs	r3, #1
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	69db      	ldr	r3, [r3, #28]
 8011e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e3e:	f003 0307 	and.w	r3, r3, #7
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d053      	beq.n	8011eee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e4a:	f003 0301 	and.w	r3, r3, #1
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d011      	beq.n	8011e76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d00b      	beq.n	8011e76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2201      	movs	r2, #1
 8011e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e6c:	f043 0201 	orr.w	r2, r3, #1
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e7a:	f003 0302 	and.w	r3, r3, #2
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d011      	beq.n	8011ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011e86:	f003 0301 	and.w	r3, r3, #1
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d00b      	beq.n	8011ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2202      	movs	r2, #2
 8011e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e9c:	f043 0204 	orr.w	r2, r3, #4
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011eaa:	f003 0304 	and.w	r3, r3, #4
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d011      	beq.n	8011ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011eb6:	f003 0301 	and.w	r3, r3, #1
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00b      	beq.n	8011ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2204      	movs	r2, #4
 8011ec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ecc:	f043 0202 	orr.w	r2, r3, #2
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d006      	beq.n	8011eee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7fe faf7 	bl	80104d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f040 80a2 	bne.w	8012040 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f04:	e853 3f00 	ldrex	r3, [r3]
 8011f08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	461a      	mov	r2, r3
 8011f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f22:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011f2a:	e841 2300 	strex	r3, r2, [r1]
 8011f2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1e2      	bne.n	8011efc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	3308      	adds	r3, #8
 8011f3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f40:	e853 3f00 	ldrex	r3, [r3]
 8011f44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011f46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f48:	4b6e      	ldr	r3, [pc, #440]	; (8012104 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	3308      	adds	r3, #8
 8011f56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011f5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011f60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011f62:	e841 2300 	strex	r3, r2, [r1]
 8011f66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1e3      	bne.n	8011f36 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2220      	movs	r2, #32
 8011f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	4a60      	ldr	r2, [pc, #384]	; (8012108 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	d021      	beq.n	8011fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d01a      	beq.n	8011fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa2:	e853 3f00 	ldrex	r3, [r3]
 8011fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8011fbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011fc4:	e841 2300 	strex	r3, r2, [r1]
 8011fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d1e4      	bne.n	8011f9a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d130      	bne.n	801203a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe6:	e853 3f00 	ldrex	r3, [r3]
 8011fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fee:	f023 0310 	bic.w	r3, r3, #16
 8011ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012000:	647b      	str	r3, [r7, #68]	; 0x44
 8012002:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012008:	e841 2300 	strex	r3, r2, [r1]
 801200c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012010:	2b00      	cmp	r3, #0
 8012012:	d1e4      	bne.n	8011fde <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	69db      	ldr	r3, [r3, #28]
 801201a:	f003 0310 	and.w	r3, r3, #16
 801201e:	2b10      	cmp	r3, #16
 8012020:	d103      	bne.n	801202a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2210      	movs	r2, #16
 8012028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012030:	4619      	mov	r1, r3
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7fe fa58 	bl	80104e8 <HAL_UARTEx_RxEventCallback>
 8012038:	e002      	b.n	8012040 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7ee fb08 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012040:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012044:	2b00      	cmp	r3, #0
 8012046:	d006      	beq.n	8012056 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801204c:	f003 0320 	and.w	r3, r3, #32
 8012050:	2b00      	cmp	r3, #0
 8012052:	f47f aecd 	bne.w	8011df0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801205c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012060:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012064:	2b00      	cmp	r3, #0
 8012066:	d049      	beq.n	80120fc <UART_RxISR_16BIT_FIFOEN+0x354>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801206e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012072:	429a      	cmp	r2, r3
 8012074:	d242      	bcs.n	80120fc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	3308      	adds	r3, #8
 801207c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012080:	e853 3f00 	ldrex	r3, [r3]
 8012084:	623b      	str	r3, [r7, #32]
   return(result);
 8012086:	6a3b      	ldr	r3, [r7, #32]
 8012088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801208c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	3308      	adds	r3, #8
 8012096:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801209a:	633a      	str	r2, [r7, #48]	; 0x30
 801209c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801209e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120a2:	e841 2300 	strex	r3, r2, [r1]
 80120a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d1e3      	bne.n	8012076 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	4a16      	ldr	r2, [pc, #88]	; (801210c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80120b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	e853 3f00 	ldrex	r3, [r3]
 80120c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	f043 0320 	orr.w	r3, r3, #32
 80120c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	461a      	mov	r2, r3
 80120d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80120d6:	61fb      	str	r3, [r7, #28]
 80120d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120da:	69b9      	ldr	r1, [r7, #24]
 80120dc:	69fa      	ldr	r2, [r7, #28]
 80120de:	e841 2300 	strex	r3, r2, [r1]
 80120e2:	617b      	str	r3, [r7, #20]
   return(result);
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1e4      	bne.n	80120b4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80120ea:	e007      	b.n	80120fc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	699a      	ldr	r2, [r3, #24]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f042 0208 	orr.w	r2, r2, #8
 80120fa:	619a      	str	r2, [r3, #24]
}
 80120fc:	bf00      	nop
 80120fe:	37b8      	adds	r7, #184	; 0xb8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	effffffe 	.word	0xeffffffe
 8012108:	58000c00 	.word	0x58000c00
 801210c:	08011891 	.word	0x08011891

08012110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012118:	bf00      	nop
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801212c:	bf00      	nop
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012140:	bf00      	nop
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr

0801214c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801215a:	2b01      	cmp	r3, #1
 801215c:	d101      	bne.n	8012162 <HAL_UARTEx_DisableFifoMode+0x16>
 801215e:	2302      	movs	r3, #2
 8012160:	e027      	b.n	80121b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2201      	movs	r2, #1
 8012166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2224      	movs	r2, #36	; 0x24
 801216e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f022 0201 	bic.w	r2, r2, #1
 8012188:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2220      	movs	r2, #32
 80121a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121b0:	2300      	movs	r3, #0
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3714      	adds	r7, #20
 80121b6:	46bd      	mov	sp, r7
 80121b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121bc:	4770      	bx	lr

080121be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b084      	sub	sp, #16
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
 80121c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d101      	bne.n	80121d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80121d2:	2302      	movs	r3, #2
 80121d4:	e02d      	b.n	8012232 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2201      	movs	r2, #1
 80121da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2224      	movs	r2, #36	; 0x24
 80121e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f022 0201 	bic.w	r2, r2, #1
 80121fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	683a      	ldr	r2, [r7, #0]
 801220e:	430a      	orrs	r2, r1
 8012210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 f850 	bl	80122b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2220      	movs	r2, #32
 8012224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b084      	sub	sp, #16
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
 8012242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801224a:	2b01      	cmp	r3, #1
 801224c:	d101      	bne.n	8012252 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801224e:	2302      	movs	r3, #2
 8012250:	e02d      	b.n	80122ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2201      	movs	r2, #1
 8012256:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2224      	movs	r2, #36	; 0x24
 801225e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f022 0201 	bic.w	r2, r2, #1
 8012278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	683a      	ldr	r2, [r7, #0]
 801228a:	430a      	orrs	r2, r1
 801228c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 f812 	bl	80122b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2220      	movs	r2, #32
 80122a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80122ac:	2300      	movs	r3, #0
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3710      	adds	r7, #16
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
	...

080122b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d108      	bne.n	80122da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2201      	movs	r2, #1
 80122cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2201      	movs	r2, #1
 80122d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80122d8:	e031      	b.n	801233e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80122da:	2310      	movs	r3, #16
 80122dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80122de:	2310      	movs	r3, #16
 80122e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	689b      	ldr	r3, [r3, #8]
 80122e8:	0e5b      	lsrs	r3, r3, #25
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	f003 0307 	and.w	r3, r3, #7
 80122f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	689b      	ldr	r3, [r3, #8]
 80122f8:	0f5b      	lsrs	r3, r3, #29
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	f003 0307 	and.w	r3, r3, #7
 8012300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012302:	7bbb      	ldrb	r3, [r7, #14]
 8012304:	7b3a      	ldrb	r2, [r7, #12]
 8012306:	4911      	ldr	r1, [pc, #68]	; (801234c <UARTEx_SetNbDataToProcess+0x94>)
 8012308:	5c8a      	ldrb	r2, [r1, r2]
 801230a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801230e:	7b3a      	ldrb	r2, [r7, #12]
 8012310:	490f      	ldr	r1, [pc, #60]	; (8012350 <UARTEx_SetNbDataToProcess+0x98>)
 8012312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012314:	fb93 f3f2 	sdiv	r3, r3, r2
 8012318:	b29a      	uxth	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012320:	7bfb      	ldrb	r3, [r7, #15]
 8012322:	7b7a      	ldrb	r2, [r7, #13]
 8012324:	4909      	ldr	r1, [pc, #36]	; (801234c <UARTEx_SetNbDataToProcess+0x94>)
 8012326:	5c8a      	ldrb	r2, [r1, r2]
 8012328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801232c:	7b7a      	ldrb	r2, [r7, #13]
 801232e:	4908      	ldr	r1, [pc, #32]	; (8012350 <UARTEx_SetNbDataToProcess+0x98>)
 8012330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012332:	fb93 f3f2 	sdiv	r3, r3, r2
 8012336:	b29a      	uxth	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801233e:	bf00      	nop
 8012340:	3714      	adds	r7, #20
 8012342:	46bd      	mov	sp, r7
 8012344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012348:	4770      	bx	lr
 801234a:	bf00      	nop
 801234c:	080166ac 	.word	0x080166ac
 8012350:	080166b4 	.word	0x080166b4

08012354 <__NVIC_SetPriority>:
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	4603      	mov	r3, r0
 801235c:	6039      	str	r1, [r7, #0]
 801235e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012364:	2b00      	cmp	r3, #0
 8012366:	db0a      	blt.n	801237e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	b2da      	uxtb	r2, r3
 801236c:	490c      	ldr	r1, [pc, #48]	; (80123a0 <__NVIC_SetPriority+0x4c>)
 801236e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012372:	0112      	lsls	r2, r2, #4
 8012374:	b2d2      	uxtb	r2, r2
 8012376:	440b      	add	r3, r1
 8012378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801237c:	e00a      	b.n	8012394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	b2da      	uxtb	r2, r3
 8012382:	4908      	ldr	r1, [pc, #32]	; (80123a4 <__NVIC_SetPriority+0x50>)
 8012384:	88fb      	ldrh	r3, [r7, #6]
 8012386:	f003 030f 	and.w	r3, r3, #15
 801238a:	3b04      	subs	r3, #4
 801238c:	0112      	lsls	r2, r2, #4
 801238e:	b2d2      	uxtb	r2, r2
 8012390:	440b      	add	r3, r1
 8012392:	761a      	strb	r2, [r3, #24]
}
 8012394:	bf00      	nop
 8012396:	370c      	adds	r7, #12
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr
 80123a0:	e000e100 	.word	0xe000e100
 80123a4:	e000ed00 	.word	0xe000ed00

080123a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80123ac:	4b05      	ldr	r3, [pc, #20]	; (80123c4 <SysTick_Handler+0x1c>)
 80123ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80123b0:	f002 f9ce 	bl	8014750 <xTaskGetSchedulerState>
 80123b4:	4603      	mov	r3, r0
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	d001      	beq.n	80123be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80123ba:	f002 ffed 	bl	8015398 <xPortSysTickHandler>
  }
}
 80123be:	bf00      	nop
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	e000e010 	.word	0xe000e010

080123c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80123c8:	b580      	push	{r7, lr}
 80123ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80123cc:	2100      	movs	r1, #0
 80123ce:	f06f 0004 	mvn.w	r0, #4
 80123d2:	f7ff ffbf 	bl	8012354 <__NVIC_SetPriority>
#endif
}
 80123d6:	bf00      	nop
 80123d8:	bd80      	pop	{r7, pc}
	...

080123dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123e2:	f3ef 8305 	mrs	r3, IPSR
 80123e6:	603b      	str	r3, [r7, #0]
  return(result);
 80123e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d003      	beq.n	80123f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80123ee:	f06f 0305 	mvn.w	r3, #5
 80123f2:	607b      	str	r3, [r7, #4]
 80123f4:	e00c      	b.n	8012410 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80123f6:	4b0a      	ldr	r3, [pc, #40]	; (8012420 <osKernelInitialize+0x44>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d105      	bne.n	801240a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80123fe:	4b08      	ldr	r3, [pc, #32]	; (8012420 <osKernelInitialize+0x44>)
 8012400:	2201      	movs	r2, #1
 8012402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012404:	2300      	movs	r3, #0
 8012406:	607b      	str	r3, [r7, #4]
 8012408:	e002      	b.n	8012410 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801240a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801240e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012410:	687b      	ldr	r3, [r7, #4]
}
 8012412:	4618      	mov	r0, r3
 8012414:	370c      	adds	r7, #12
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	24000c3c 	.word	0x24000c3c

08012424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801242a:	f3ef 8305 	mrs	r3, IPSR
 801242e:	603b      	str	r3, [r7, #0]
  return(result);
 8012430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012432:	2b00      	cmp	r3, #0
 8012434:	d003      	beq.n	801243e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012436:	f06f 0305 	mvn.w	r3, #5
 801243a:	607b      	str	r3, [r7, #4]
 801243c:	e010      	b.n	8012460 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801243e:	4b0b      	ldr	r3, [pc, #44]	; (801246c <osKernelStart+0x48>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b01      	cmp	r3, #1
 8012444:	d109      	bne.n	801245a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012446:	f7ff ffbf 	bl	80123c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801244a:	4b08      	ldr	r3, [pc, #32]	; (801246c <osKernelStart+0x48>)
 801244c:	2202      	movs	r2, #2
 801244e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012450:	f001 fc98 	bl	8013d84 <vTaskStartScheduler>
      stat = osOK;
 8012454:	2300      	movs	r3, #0
 8012456:	607b      	str	r3, [r7, #4]
 8012458:	e002      	b.n	8012460 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801245a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801245e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012460:	687b      	ldr	r3, [r7, #4]
}
 8012462:	4618      	mov	r0, r3
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	24000c3c 	.word	0x24000c3c

08012470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012470:	b580      	push	{r7, lr}
 8012472:	b08e      	sub	sp, #56	; 0x38
 8012474:	af04      	add	r7, sp, #16
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801247c:	2300      	movs	r3, #0
 801247e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012480:	f3ef 8305 	mrs	r3, IPSR
 8012484:	617b      	str	r3, [r7, #20]
  return(result);
 8012486:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012488:	2b00      	cmp	r3, #0
 801248a:	d17e      	bne.n	801258a <osThreadNew+0x11a>
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d07b      	beq.n	801258a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012492:	2380      	movs	r3, #128	; 0x80
 8012494:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012496:	2318      	movs	r3, #24
 8012498:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801249a:	2300      	movs	r3, #0
 801249c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801249e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d045      	beq.n	8012536 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d002      	beq.n	80124b8 <osThreadNew+0x48>
        name = attr->name;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	699b      	ldr	r3, [r3, #24]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d002      	beq.n	80124c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	699b      	ldr	r3, [r3, #24]
 80124c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d008      	beq.n	80124de <osThreadNew+0x6e>
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	2b38      	cmp	r3, #56	; 0x38
 80124d0:	d805      	bhi.n	80124de <osThreadNew+0x6e>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	f003 0301 	and.w	r3, r3, #1
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d001      	beq.n	80124e2 <osThreadNew+0x72>
        return (NULL);
 80124de:	2300      	movs	r3, #0
 80124e0:	e054      	b.n	801258c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	695b      	ldr	r3, [r3, #20]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d003      	beq.n	80124f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	695b      	ldr	r3, [r3, #20]
 80124ee:	089b      	lsrs	r3, r3, #2
 80124f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	689b      	ldr	r3, [r3, #8]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00e      	beq.n	8012518 <osThreadNew+0xa8>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	2b5b      	cmp	r3, #91	; 0x5b
 8012500:	d90a      	bls.n	8012518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012506:	2b00      	cmp	r3, #0
 8012508:	d006      	beq.n	8012518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	695b      	ldr	r3, [r3, #20]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d002      	beq.n	8012518 <osThreadNew+0xa8>
        mem = 1;
 8012512:	2301      	movs	r3, #1
 8012514:	61bb      	str	r3, [r7, #24]
 8012516:	e010      	b.n	801253a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	689b      	ldr	r3, [r3, #8]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d10c      	bne.n	801253a <osThreadNew+0xca>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d108      	bne.n	801253a <osThreadNew+0xca>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d104      	bne.n	801253a <osThreadNew+0xca>
          mem = 0;
 8012530:	2300      	movs	r3, #0
 8012532:	61bb      	str	r3, [r7, #24]
 8012534:	e001      	b.n	801253a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d110      	bne.n	8012562 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012548:	9202      	str	r2, [sp, #8]
 801254a:	9301      	str	r3, [sp, #4]
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	9300      	str	r3, [sp, #0]
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	6a3a      	ldr	r2, [r7, #32]
 8012554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f001 f924 	bl	80137a4 <xTaskCreateStatic>
 801255c:	4603      	mov	r3, r0
 801255e:	613b      	str	r3, [r7, #16]
 8012560:	e013      	b.n	801258a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d110      	bne.n	801258a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012568:	6a3b      	ldr	r3, [r7, #32]
 801256a:	b29a      	uxth	r2, r3
 801256c:	f107 0310 	add.w	r3, r7, #16
 8012570:	9301      	str	r3, [sp, #4]
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f001 f96f 	bl	801385e <xTaskCreate>
 8012580:	4603      	mov	r3, r0
 8012582:	2b01      	cmp	r3, #1
 8012584:	d001      	beq.n	801258a <osThreadNew+0x11a>
            hTask = NULL;
 8012586:	2300      	movs	r3, #0
 8012588:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801258a:	693b      	ldr	r3, [r7, #16]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3728      	adds	r7, #40	; 0x28
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801259a:	f3ef 8305 	mrs	r3, IPSR
 801259e:	603b      	str	r3, [r7, #0]
  return(result);
 80125a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d003      	beq.n	80125ae <osThreadYield+0x1a>
    stat = osErrorISR;
 80125a6:	f06f 0305 	mvn.w	r3, #5
 80125aa:	607b      	str	r3, [r7, #4]
 80125ac:	e009      	b.n	80125c2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80125ae:	2300      	movs	r3, #0
 80125b0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80125b2:	4b07      	ldr	r3, [pc, #28]	; (80125d0 <osThreadYield+0x3c>)
 80125b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125b8:	601a      	str	r2, [r3, #0]
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80125c2:	687b      	ldr	r3, [r7, #4]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr
 80125d0:	e000ed04 	.word	0xe000ed04

080125d4 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b086      	sub	sp, #24
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125e0:	f3ef 8305 	mrs	r3, IPSR
 80125e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80125e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d003      	beq.n	80125f4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80125ec:	f06f 0305 	mvn.w	r3, #5
 80125f0:	617b      	str	r3, [r7, #20]
 80125f2:	e00b      	b.n	801260c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d103      	bne.n	8012602 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80125fa:	f06f 0303 	mvn.w	r3, #3
 80125fe:	617b      	str	r3, [r7, #20]
 8012600:	e004      	b.n	801260c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012602:	2300      	movs	r3, #0
 8012604:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012606:	6938      	ldr	r0, [r7, #16]
 8012608:	f001 faa2 	bl	8013b50 <vTaskSuspend>
  }

  return (stat);
 801260c:	697b      	ldr	r3, [r7, #20]
}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012616:	b580      	push	{r7, lr}
 8012618:	b084      	sub	sp, #16
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801261e:	f3ef 8305 	mrs	r3, IPSR
 8012622:	60bb      	str	r3, [r7, #8]
  return(result);
 8012624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012626:	2b00      	cmp	r3, #0
 8012628:	d003      	beq.n	8012632 <osDelay+0x1c>
    stat = osErrorISR;
 801262a:	f06f 0305 	mvn.w	r3, #5
 801262e:	60fb      	str	r3, [r7, #12]
 8012630:	e007      	b.n	8012642 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012632:	2300      	movs	r3, #0
 8012634:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <osDelay+0x2c>
      vTaskDelay(ticks);
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f001 fa53 	bl	8013ae8 <vTaskDelay>
    }
  }

  return (stat);
 8012642:	68fb      	ldr	r3, [r7, #12]
}
 8012644:	4618      	mov	r0, r3
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012654:	2300      	movs	r3, #0
 8012656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012658:	f3ef 8305 	mrs	r3, IPSR
 801265c:	60fb      	str	r3, [r7, #12]
  return(result);
 801265e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012660:	2b00      	cmp	r3, #0
 8012662:	d12d      	bne.n	80126c0 <osEventFlagsNew+0x74>
    mem = -1;
 8012664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012668:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d015      	beq.n	801269c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	689b      	ldr	r3, [r3, #8]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d006      	beq.n	8012686 <osEventFlagsNew+0x3a>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	2b1f      	cmp	r3, #31
 801267e:	d902      	bls.n	8012686 <osEventFlagsNew+0x3a>
        mem = 1;
 8012680:	2301      	movs	r3, #1
 8012682:	613b      	str	r3, [r7, #16]
 8012684:	e00c      	b.n	80126a0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	689b      	ldr	r3, [r3, #8]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d108      	bne.n	80126a0 <osEventFlagsNew+0x54>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d104      	bne.n	80126a0 <osEventFlagsNew+0x54>
          mem = 0;
 8012696:	2300      	movs	r3, #0
 8012698:	613b      	str	r3, [r7, #16]
 801269a:	e001      	b.n	80126a0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801269c:	2300      	movs	r3, #0
 801269e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d106      	bne.n	80126b4 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	689b      	ldr	r3, [r3, #8]
 80126aa:	4618      	mov	r0, r3
 80126ac:	f000 f8ec 	bl	8012888 <xEventGroupCreateStatic>
 80126b0:	6178      	str	r0, [r7, #20]
 80126b2:	e005      	b.n	80126c0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d102      	bne.n	80126c0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80126ba:	f000 f91c 	bl	80128f6 <xEventGroupCreate>
 80126be:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80126c0:	697b      	ldr	r3, [r7, #20]
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3718      	adds	r7, #24
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
	...

080126cc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b086      	sub	sp, #24
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d004      	beq.n	80126ea <osEventFlagsSet+0x1e>
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d003      	beq.n	80126f2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80126ea:	f06f 0303 	mvn.w	r3, #3
 80126ee:	617b      	str	r3, [r7, #20]
 80126f0:	e028      	b.n	8012744 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126f2:	f3ef 8305 	mrs	r3, IPSR
 80126f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80126f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d01d      	beq.n	801273a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80126fe:	2300      	movs	r3, #0
 8012700:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012702:	f107 0308 	add.w	r3, r7, #8
 8012706:	461a      	mov	r2, r3
 8012708:	6839      	ldr	r1, [r7, #0]
 801270a:	6938      	ldr	r0, [r7, #16]
 801270c:	f000 fa96 	bl	8012c3c <xEventGroupSetBitsFromISR>
 8012710:	4603      	mov	r3, r0
 8012712:	2b00      	cmp	r3, #0
 8012714:	d103      	bne.n	801271e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012716:	f06f 0302 	mvn.w	r3, #2
 801271a:	617b      	str	r3, [r7, #20]
 801271c:	e012      	b.n	8012744 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00d      	beq.n	8012744 <osEventFlagsSet+0x78>
 8012728:	4b09      	ldr	r3, [pc, #36]	; (8012750 <osEventFlagsSet+0x84>)
 801272a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801272e:	601a      	str	r2, [r3, #0]
 8012730:	f3bf 8f4f 	dsb	sy
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	e004      	b.n	8012744 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801273a:	6839      	ldr	r1, [r7, #0]
 801273c:	6938      	ldr	r0, [r7, #16]
 801273e:	f000 f9c3 	bl	8012ac8 <xEventGroupSetBits>
 8012742:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012744:	697b      	ldr	r3, [r7, #20]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3718      	adds	r7, #24
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	e000ed04 	.word	0xe000ed04

08012754 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012754:	b580      	push	{r7, lr}
 8012756:	b08c      	sub	sp, #48	; 0x30
 8012758:	af02      	add	r7, sp, #8
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
 8012760:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d004      	beq.n	8012776 <osEventFlagsWait+0x22>
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012772:	2b00      	cmp	r3, #0
 8012774:	d003      	beq.n	801277e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012776:	f06f 0303 	mvn.w	r3, #3
 801277a:	61fb      	str	r3, [r7, #28]
 801277c:	e04b      	b.n	8012816 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801277e:	f3ef 8305 	mrs	r3, IPSR
 8012782:	617b      	str	r3, [r7, #20]
  return(result);
 8012784:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012786:	2b00      	cmp	r3, #0
 8012788:	d003      	beq.n	8012792 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801278a:	f06f 0305 	mvn.w	r3, #5
 801278e:	61fb      	str	r3, [r7, #28]
 8012790:	e041      	b.n	8012816 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	f003 0301 	and.w	r3, r3, #1
 8012798:	2b00      	cmp	r3, #0
 801279a:	d002      	beq.n	80127a2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801279c:	2301      	movs	r3, #1
 801279e:	627b      	str	r3, [r7, #36]	; 0x24
 80127a0:	e001      	b.n	80127a6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80127a2:	2300      	movs	r3, #0
 80127a4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f003 0302 	and.w	r3, r3, #2
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d002      	beq.n	80127b6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80127b0:	2300      	movs	r3, #0
 80127b2:	623b      	str	r3, [r7, #32]
 80127b4:	e001      	b.n	80127ba <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80127b6:	2301      	movs	r3, #1
 80127b8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	9300      	str	r3, [sp, #0]
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	6a3a      	ldr	r2, [r7, #32]
 80127c2:	68b9      	ldr	r1, [r7, #8]
 80127c4:	69b8      	ldr	r0, [r7, #24]
 80127c6:	f000 f8b1 	bl	801292c <xEventGroupWaitBits>
 80127ca:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f003 0301 	and.w	r3, r3, #1
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d010      	beq.n	80127f8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80127d6:	68ba      	ldr	r2, [r7, #8]
 80127d8:	69fb      	ldr	r3, [r7, #28]
 80127da:	4013      	ands	r3, r2
 80127dc:	68ba      	ldr	r2, [r7, #8]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d019      	beq.n	8012816 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d003      	beq.n	80127f0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80127e8:	f06f 0301 	mvn.w	r3, #1
 80127ec:	61fb      	str	r3, [r7, #28]
 80127ee:	e012      	b.n	8012816 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80127f0:	f06f 0302 	mvn.w	r3, #2
 80127f4:	61fb      	str	r3, [r7, #28]
 80127f6:	e00e      	b.n	8012816 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80127f8:	68ba      	ldr	r2, [r7, #8]
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	4013      	ands	r3, r2
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d109      	bne.n	8012816 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d003      	beq.n	8012810 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012808:	f06f 0301 	mvn.w	r3, #1
 801280c:	61fb      	str	r3, [r7, #28]
 801280e:	e002      	b.n	8012816 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012810:	f06f 0302 	mvn.w	r3, #2
 8012814:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012816:	69fb      	ldr	r3, [r7, #28]
}
 8012818:	4618      	mov	r0, r3
 801281a:	3728      	adds	r7, #40	; 0x28
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012820:	b480      	push	{r7}
 8012822:	b085      	sub	sp, #20
 8012824:	af00      	add	r7, sp, #0
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	4a07      	ldr	r2, [pc, #28]	; (801284c <vApplicationGetIdleTaskMemory+0x2c>)
 8012830:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	4a06      	ldr	r2, [pc, #24]	; (8012850 <vApplicationGetIdleTaskMemory+0x30>)
 8012836:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2280      	movs	r2, #128	; 0x80
 801283c:	601a      	str	r2, [r3, #0]
}
 801283e:	bf00      	nop
 8012840:	3714      	adds	r7, #20
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop
 801284c:	24000c40 	.word	0x24000c40
 8012850:	24000c9c 	.word	0x24000c9c

08012854 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012854:	b480      	push	{r7}
 8012856:	b085      	sub	sp, #20
 8012858:	af00      	add	r7, sp, #0
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	4a07      	ldr	r2, [pc, #28]	; (8012880 <vApplicationGetTimerTaskMemory+0x2c>)
 8012864:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	4a06      	ldr	r2, [pc, #24]	; (8012884 <vApplicationGetTimerTaskMemory+0x30>)
 801286a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012872:	601a      	str	r2, [r3, #0]
}
 8012874:	bf00      	nop
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	24000e9c 	.word	0x24000e9c
 8012884:	24000ef8 	.word	0x24000ef8

08012888 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d10a      	bne.n	80128ac <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289a:	f383 8811 	msr	BASEPRI, r3
 801289e:	f3bf 8f6f 	isb	sy
 80128a2:	f3bf 8f4f 	dsb	sy
 80128a6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80128a8:	bf00      	nop
 80128aa:	e7fe      	b.n	80128aa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80128ac:	2320      	movs	r3, #32
 80128ae:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	2b20      	cmp	r3, #32
 80128b4:	d00a      	beq.n	80128cc <xEventGroupCreateStatic+0x44>
	__asm volatile
 80128b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ba:	f383 8811 	msr	BASEPRI, r3
 80128be:	f3bf 8f6f 	isb	sy
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	60fb      	str	r3, [r7, #12]
}
 80128c8:	bf00      	nop
 80128ca:	e7fe      	b.n	80128ca <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d00a      	beq.n	80128ec <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	2200      	movs	r2, #0
 80128da:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	3304      	adds	r3, #4
 80128e0:	4618      	mov	r0, r3
 80128e2:	f000 f9bf 	bl	8012c64 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	2201      	movs	r2, #1
 80128ea:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80128ec:	697b      	ldr	r3, [r7, #20]
	}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3718      	adds	r7, #24
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b082      	sub	sp, #8
 80128fa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80128fc:	2020      	movs	r0, #32
 80128fe:	f002 fddb 	bl	80154b8 <pvPortMalloc>
 8012902:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00a      	beq.n	8012920 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2200      	movs	r2, #0
 801290e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	3304      	adds	r3, #4
 8012914:	4618      	mov	r0, r3
 8012916:	f000 f9a5 	bl	8012c64 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2200      	movs	r2, #0
 801291e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012920:	687b      	ldr	r3, [r7, #4]
	}
 8012922:	4618      	mov	r0, r3
 8012924:	3708      	adds	r7, #8
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
	...

0801292c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b090      	sub	sp, #64	; 0x40
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
 8012938:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801293e:	2300      	movs	r3, #0
 8012940:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012942:	2300      	movs	r3, #0
 8012944:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d10a      	bne.n	8012962 <xEventGroupWaitBits+0x36>
	__asm volatile
 801294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012950:	f383 8811 	msr	BASEPRI, r3
 8012954:	f3bf 8f6f 	isb	sy
 8012958:	f3bf 8f4f 	dsb	sy
 801295c:	623b      	str	r3, [r7, #32]
}
 801295e:	bf00      	nop
 8012960:	e7fe      	b.n	8012960 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012968:	2b00      	cmp	r3, #0
 801296a:	d00a      	beq.n	8012982 <xEventGroupWaitBits+0x56>
	__asm volatile
 801296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012970:	f383 8811 	msr	BASEPRI, r3
 8012974:	f3bf 8f6f 	isb	sy
 8012978:	f3bf 8f4f 	dsb	sy
 801297c:	61fb      	str	r3, [r7, #28]
}
 801297e:	bf00      	nop
 8012980:	e7fe      	b.n	8012980 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d10a      	bne.n	801299e <xEventGroupWaitBits+0x72>
	__asm volatile
 8012988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298c:	f383 8811 	msr	BASEPRI, r3
 8012990:	f3bf 8f6f 	isb	sy
 8012994:	f3bf 8f4f 	dsb	sy
 8012998:	61bb      	str	r3, [r7, #24]
}
 801299a:	bf00      	nop
 801299c:	e7fe      	b.n	801299c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801299e:	f001 fed7 	bl	8014750 <xTaskGetSchedulerState>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d102      	bne.n	80129ae <xEventGroupWaitBits+0x82>
 80129a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d101      	bne.n	80129b2 <xEventGroupWaitBits+0x86>
 80129ae:	2301      	movs	r3, #1
 80129b0:	e000      	b.n	80129b4 <xEventGroupWaitBits+0x88>
 80129b2:	2300      	movs	r3, #0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d10a      	bne.n	80129ce <xEventGroupWaitBits+0xa2>
	__asm volatile
 80129b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129bc:	f383 8811 	msr	BASEPRI, r3
 80129c0:	f3bf 8f6f 	isb	sy
 80129c4:	f3bf 8f4f 	dsb	sy
 80129c8:	617b      	str	r3, [r7, #20]
}
 80129ca:	bf00      	nop
 80129cc:	e7fe      	b.n	80129cc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80129ce:	f001 fa3f 	bl	8013e50 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80129d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	68b9      	ldr	r1, [r7, #8]
 80129dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129de:	f000 f90b 	bl	8012bf8 <prvTestWaitCondition>
 80129e2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80129e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00e      	beq.n	8012a08 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80129ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80129ee:	2300      	movs	r3, #0
 80129f0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d028      	beq.n	8012a4a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80129f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	43db      	mvns	r3, r3
 8012a00:	401a      	ands	r2, r3
 8012a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a04:	601a      	str	r2, [r3, #0]
 8012a06:	e020      	b.n	8012a4a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d104      	bne.n	8012a18 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a10:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8012a12:	2301      	movs	r3, #1
 8012a14:	633b      	str	r3, [r7, #48]	; 0x30
 8012a16:	e018      	b.n	8012a4a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d003      	beq.n	8012a26 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a24:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d003      	beq.n	8012a34 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012a32:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a36:	1d18      	adds	r0, r3, #4
 8012a38:	68ba      	ldr	r2, [r7, #8]
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a40:	4619      	mov	r1, r3
 8012a42:	f001 fbfd 	bl	8014240 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012a46:	2300      	movs	r3, #0
 8012a48:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012a4a:	f001 fa0f 	bl	8013e6c <xTaskResumeAll>
 8012a4e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d031      	beq.n	8012aba <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d107      	bne.n	8012a6c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8012a5c:	4b19      	ldr	r3, [pc, #100]	; (8012ac4 <xEventGroupWaitBits+0x198>)
 8012a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	f3bf 8f4f 	dsb	sy
 8012a68:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012a6c:	f001 fefc 	bl	8014868 <uxTaskResetEventItemValue>
 8012a70:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d11a      	bne.n	8012ab2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8012a7c:	f002 fbfa 	bl	8015274 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012a86:	683a      	ldr	r2, [r7, #0]
 8012a88:	68b9      	ldr	r1, [r7, #8]
 8012a8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012a8c:	f000 f8b4 	bl	8012bf8 <prvTestWaitCondition>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d009      	beq.n	8012aaa <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d006      	beq.n	8012aaa <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a9e:	681a      	ldr	r2, [r3, #0]
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	43db      	mvns	r3, r3
 8012aa4:	401a      	ands	r2, r3
 8012aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aa8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012aaa:	2301      	movs	r3, #1
 8012aac:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8012aae:	f002 fc11 	bl	80152d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3740      	adds	r7, #64	; 0x40
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	e000ed04 	.word	0xe000ed04

08012ac8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b08e      	sub	sp, #56	; 0x38
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8012ada:	2300      	movs	r3, #0
 8012adc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d10a      	bne.n	8012afa <xEventGroupSetBits+0x32>
	__asm volatile
 8012ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae8:	f383 8811 	msr	BASEPRI, r3
 8012aec:	f3bf 8f6f 	isb	sy
 8012af0:	f3bf 8f4f 	dsb	sy
 8012af4:	613b      	str	r3, [r7, #16]
}
 8012af6:	bf00      	nop
 8012af8:	e7fe      	b.n	8012af8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d00a      	beq.n	8012b1a <xEventGroupSetBits+0x52>
	__asm volatile
 8012b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b08:	f383 8811 	msr	BASEPRI, r3
 8012b0c:	f3bf 8f6f 	isb	sy
 8012b10:	f3bf 8f4f 	dsb	sy
 8012b14:	60fb      	str	r3, [r7, #12]
}
 8012b16:	bf00      	nop
 8012b18:	e7fe      	b.n	8012b18 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	3308      	adds	r3, #8
 8012b24:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012b26:	f001 f993 	bl	8013e50 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	431a      	orrs	r2, r3
 8012b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012b3c:	e03c      	b.n	8012bb8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b54:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012b56:	69bb      	ldr	r3, [r7, #24]
 8012b58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012b5c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d108      	bne.n	8012b7a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	4013      	ands	r3, r2
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00b      	beq.n	8012b8c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8012b74:	2301      	movs	r3, #1
 8012b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b78:	e008      	b.n	8012b8c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7c:	681a      	ldr	r2, [r3, #0]
 8012b7e:	69bb      	ldr	r3, [r7, #24]
 8012b80:	4013      	ands	r3, r2
 8012b82:	69ba      	ldr	r2, [r7, #24]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d101      	bne.n	8012b8c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d010      	beq.n	8012bb4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d003      	beq.n	8012ba4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	4313      	orrs	r3, r2
 8012ba2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012bac:	4619      	mov	r1, r3
 8012bae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012bb0:	f001 fc12 	bl	80143d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8012bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bba:	6a3b      	ldr	r3, [r7, #32]
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d1be      	bne.n	8012b3e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc6:	43db      	mvns	r3, r3
 8012bc8:	401a      	ands	r2, r3
 8012bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bcc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012bce:	f001 f94d 	bl	8013e6c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd4:	681b      	ldr	r3, [r3, #0]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3738      	adds	r7, #56	; 0x38
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b082      	sub	sp, #8
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012be8:	6839      	ldr	r1, [r7, #0]
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7ff ff6c 	bl	8012ac8 <xEventGroupSetBits>
}
 8012bf0:	bf00      	nop
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b087      	sub	sp, #28
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012c04:	2300      	movs	r3, #0
 8012c06:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d107      	bne.n	8012c1e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012c0e:	68fa      	ldr	r2, [r7, #12]
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	4013      	ands	r3, r2
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00a      	beq.n	8012c2e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	617b      	str	r3, [r7, #20]
 8012c1c:	e007      	b.n	8012c2e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012c1e:	68fa      	ldr	r2, [r7, #12]
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	4013      	ands	r3, r2
 8012c24:	68ba      	ldr	r2, [r7, #8]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d101      	bne.n	8012c2e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012c2e:	697b      	ldr	r3, [r7, #20]
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	371c      	adds	r7, #28
 8012c34:	46bd      	mov	sp, r7
 8012c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3a:	4770      	bx	lr

08012c3c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b086      	sub	sp, #24
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	68ba      	ldr	r2, [r7, #8]
 8012c4c:	68f9      	ldr	r1, [r7, #12]
 8012c4e:	4804      	ldr	r0, [pc, #16]	; (8012c60 <xEventGroupSetBitsFromISR+0x24>)
 8012c50:	f002 f9c4 	bl	8014fdc <xTimerPendFunctionCallFromISR>
 8012c54:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012c56:	697b      	ldr	r3, [r7, #20]
	}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3718      	adds	r7, #24
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	08012bdf 	.word	0x08012bdf

08012c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f103 0208 	add.w	r2, r3, #8
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f103 0208 	add.w	r2, r3, #8
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f103 0208 	add.w	r2, r3, #8
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2200      	movs	r2, #0
 8012c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012c98:	bf00      	nop
 8012c9a:	370c      	adds	r7, #12
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr

08012ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cb2:	bf00      	nop
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b085      	sub	sp, #20
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	68fa      	ldr	r2, [r7, #12]
 8012cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	689a      	ldr	r2, [r3, #8]
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	689b      	ldr	r3, [r3, #8]
 8012ce0:	683a      	ldr	r2, [r7, #0]
 8012ce2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	683a      	ldr	r2, [r7, #0]
 8012ce8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	1c5a      	adds	r2, r3, #1
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	601a      	str	r2, [r3, #0]
}
 8012cfa:	bf00      	nop
 8012cfc:	3714      	adds	r7, #20
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d04:	4770      	bx	lr

08012d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d06:	b480      	push	{r7}
 8012d08:	b085      	sub	sp, #20
 8012d0a:	af00      	add	r7, sp, #0
 8012d0c:	6078      	str	r0, [r7, #4]
 8012d0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d1c:	d103      	bne.n	8012d26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	691b      	ldr	r3, [r3, #16]
 8012d22:	60fb      	str	r3, [r7, #12]
 8012d24:	e00c      	b.n	8012d40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	3308      	adds	r3, #8
 8012d2a:	60fb      	str	r3, [r7, #12]
 8012d2c:	e002      	b.n	8012d34 <vListInsert+0x2e>
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	60fb      	str	r3, [r7, #12]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	68ba      	ldr	r2, [r7, #8]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d2f6      	bcs.n	8012d2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	685a      	ldr	r2, [r3, #4]
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	683a      	ldr	r2, [r7, #0]
 8012d4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	683a      	ldr	r2, [r7, #0]
 8012d5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	1c5a      	adds	r2, r3, #1
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	601a      	str	r2, [r3, #0]
}
 8012d6c:	bf00      	nop
 8012d6e:	3714      	adds	r7, #20
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr

08012d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b085      	sub	sp, #20
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	691b      	ldr	r3, [r3, #16]
 8012d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	6892      	ldr	r2, [r2, #8]
 8012d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	689b      	ldr	r3, [r3, #8]
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	6852      	ldr	r2, [r2, #4]
 8012d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d103      	bne.n	8012dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	689a      	ldr	r2, [r3, #8]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	1e5a      	subs	r2, r3, #1
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681b      	ldr	r3, [r3, #0]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3714      	adds	r7, #20
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d10a      	bne.n	8012df6 <xQueueGenericReset+0x2a>
	__asm volatile
 8012de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de4:	f383 8811 	msr	BASEPRI, r3
 8012de8:	f3bf 8f6f 	isb	sy
 8012dec:	f3bf 8f4f 	dsb	sy
 8012df0:	60bb      	str	r3, [r7, #8]
}
 8012df2:	bf00      	nop
 8012df4:	e7fe      	b.n	8012df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012df6:	f002 fa3d 	bl	8015274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e02:	68f9      	ldr	r1, [r7, #12]
 8012e04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e06:	fb01 f303 	mul.w	r3, r1, r3
 8012e0a:	441a      	add	r2, r3
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2200      	movs	r2, #0
 8012e14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e26:	3b01      	subs	r3, #1
 8012e28:	68f9      	ldr	r1, [r7, #12]
 8012e2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e2c:	fb01 f303 	mul.w	r3, r1, r3
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	22ff      	movs	r2, #255	; 0xff
 8012e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	22ff      	movs	r2, #255	; 0xff
 8012e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d114      	bne.n	8012e76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d01a      	beq.n	8012e8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	3310      	adds	r3, #16
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f001 fa59 	bl	8014310 <xTaskRemoveFromEventList>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d012      	beq.n	8012e8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e64:	4b0c      	ldr	r3, [pc, #48]	; (8012e98 <xQueueGenericReset+0xcc>)
 8012e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e6a:	601a      	str	r2, [r3, #0]
 8012e6c:	f3bf 8f4f 	dsb	sy
 8012e70:	f3bf 8f6f 	isb	sy
 8012e74:	e009      	b.n	8012e8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	3310      	adds	r3, #16
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7ff fef2 	bl	8012c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	3324      	adds	r3, #36	; 0x24
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff feed 	bl	8012c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012e8a:	f002 fa23 	bl	80152d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012e8e:	2301      	movs	r3, #1
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	e000ed04 	.word	0xe000ed04

08012e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b08e      	sub	sp, #56	; 0x38
 8012ea0:	af02      	add	r7, sp, #8
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
 8012ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10a      	bne.n	8012ec6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012ec2:	bf00      	nop
 8012ec4:	e7fe      	b.n	8012ec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d10a      	bne.n	8012ee2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed0:	f383 8811 	msr	BASEPRI, r3
 8012ed4:	f3bf 8f6f 	isb	sy
 8012ed8:	f3bf 8f4f 	dsb	sy
 8012edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012ede:	bf00      	nop
 8012ee0:	e7fe      	b.n	8012ee0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d002      	beq.n	8012eee <xQueueGenericCreateStatic+0x52>
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <xQueueGenericCreateStatic+0x56>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	e000      	b.n	8012ef4 <xQueueGenericCreateStatic+0x58>
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10a      	bne.n	8012f0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	623b      	str	r3, [r7, #32]
}
 8012f0a:	bf00      	nop
 8012f0c:	e7fe      	b.n	8012f0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d102      	bne.n	8012f1a <xQueueGenericCreateStatic+0x7e>
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d101      	bne.n	8012f1e <xQueueGenericCreateStatic+0x82>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e000      	b.n	8012f20 <xQueueGenericCreateStatic+0x84>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10a      	bne.n	8012f3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	61fb      	str	r3, [r7, #28]
}
 8012f36:	bf00      	nop
 8012f38:	e7fe      	b.n	8012f38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f3a:	2350      	movs	r3, #80	; 0x50
 8012f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	2b50      	cmp	r3, #80	; 0x50
 8012f42:	d00a      	beq.n	8012f5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f48:	f383 8811 	msr	BASEPRI, r3
 8012f4c:	f3bf 8f6f 	isb	sy
 8012f50:	f3bf 8f4f 	dsb	sy
 8012f54:	61bb      	str	r3, [r7, #24]
}
 8012f56:	bf00      	nop
 8012f58:	e7fe      	b.n	8012f58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00d      	beq.n	8012f82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	2201      	movs	r2, #1
 8012f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	4613      	mov	r3, r2
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	68b9      	ldr	r1, [r7, #8]
 8012f7c:	68f8      	ldr	r0, [r7, #12]
 8012f7e:	f000 f805 	bl	8012f8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3730      	adds	r7, #48	; 0x30
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d103      	bne.n	8012fa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012fa0:	69bb      	ldr	r3, [r7, #24]
 8012fa2:	69ba      	ldr	r2, [r7, #24]
 8012fa4:	601a      	str	r2, [r3, #0]
 8012fa6:	e002      	b.n	8012fae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012fae:	69bb      	ldr	r3, [r7, #24]
 8012fb0:	68fa      	ldr	r2, [r7, #12]
 8012fb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	68ba      	ldr	r2, [r7, #8]
 8012fb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012fba:	2101      	movs	r1, #1
 8012fbc:	69b8      	ldr	r0, [r7, #24]
 8012fbe:	f7ff ff05 	bl	8012dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	78fa      	ldrb	r2, [r7, #3]
 8012fc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012fca:	bf00      	nop
 8012fcc:	3710      	adds	r7, #16
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
	...

08012fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b08e      	sub	sp, #56	; 0x38
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
 8012fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10a      	bne.n	8013006 <xQueueGenericSend+0x32>
	__asm volatile
 8012ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff4:	f383 8811 	msr	BASEPRI, r3
 8012ff8:	f3bf 8f6f 	isb	sy
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013002:	bf00      	nop
 8013004:	e7fe      	b.n	8013004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d103      	bne.n	8013014 <xQueueGenericSend+0x40>
 801300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013010:	2b00      	cmp	r3, #0
 8013012:	d101      	bne.n	8013018 <xQueueGenericSend+0x44>
 8013014:	2301      	movs	r3, #1
 8013016:	e000      	b.n	801301a <xQueueGenericSend+0x46>
 8013018:	2300      	movs	r3, #0
 801301a:	2b00      	cmp	r3, #0
 801301c:	d10a      	bne.n	8013034 <xQueueGenericSend+0x60>
	__asm volatile
 801301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013022:	f383 8811 	msr	BASEPRI, r3
 8013026:	f3bf 8f6f 	isb	sy
 801302a:	f3bf 8f4f 	dsb	sy
 801302e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013030:	bf00      	nop
 8013032:	e7fe      	b.n	8013032 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	2b02      	cmp	r3, #2
 8013038:	d103      	bne.n	8013042 <xQueueGenericSend+0x6e>
 801303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303e:	2b01      	cmp	r3, #1
 8013040:	d101      	bne.n	8013046 <xQueueGenericSend+0x72>
 8013042:	2301      	movs	r3, #1
 8013044:	e000      	b.n	8013048 <xQueueGenericSend+0x74>
 8013046:	2300      	movs	r3, #0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d10a      	bne.n	8013062 <xQueueGenericSend+0x8e>
	__asm volatile
 801304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013050:	f383 8811 	msr	BASEPRI, r3
 8013054:	f3bf 8f6f 	isb	sy
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	623b      	str	r3, [r7, #32]
}
 801305e:	bf00      	nop
 8013060:	e7fe      	b.n	8013060 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013062:	f001 fb75 	bl	8014750 <xTaskGetSchedulerState>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d102      	bne.n	8013072 <xQueueGenericSend+0x9e>
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d101      	bne.n	8013076 <xQueueGenericSend+0xa2>
 8013072:	2301      	movs	r3, #1
 8013074:	e000      	b.n	8013078 <xQueueGenericSend+0xa4>
 8013076:	2300      	movs	r3, #0
 8013078:	2b00      	cmp	r3, #0
 801307a:	d10a      	bne.n	8013092 <xQueueGenericSend+0xbe>
	__asm volatile
 801307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013080:	f383 8811 	msr	BASEPRI, r3
 8013084:	f3bf 8f6f 	isb	sy
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	61fb      	str	r3, [r7, #28]
}
 801308e:	bf00      	nop
 8013090:	e7fe      	b.n	8013090 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013092:	f002 f8ef 	bl	8015274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801309e:	429a      	cmp	r2, r3
 80130a0:	d302      	bcc.n	80130a8 <xQueueGenericSend+0xd4>
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	2b02      	cmp	r3, #2
 80130a6:	d129      	bne.n	80130fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130a8:	683a      	ldr	r2, [r7, #0]
 80130aa:	68b9      	ldr	r1, [r7, #8]
 80130ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130ae:	f000 fa0b 	bl	80134c8 <prvCopyDataToQueue>
 80130b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d010      	beq.n	80130de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130be:	3324      	adds	r3, #36	; 0x24
 80130c0:	4618      	mov	r0, r3
 80130c2:	f001 f925 	bl	8014310 <xTaskRemoveFromEventList>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d013      	beq.n	80130f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80130cc:	4b3f      	ldr	r3, [pc, #252]	; (80131cc <xQueueGenericSend+0x1f8>)
 80130ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	f3bf 8f4f 	dsb	sy
 80130d8:	f3bf 8f6f 	isb	sy
 80130dc:	e00a      	b.n	80130f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80130de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d007      	beq.n	80130f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80130e4:	4b39      	ldr	r3, [pc, #228]	; (80131cc <xQueueGenericSend+0x1f8>)
 80130e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ea:	601a      	str	r2, [r3, #0]
 80130ec:	f3bf 8f4f 	dsb	sy
 80130f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80130f4:	f002 f8ee 	bl	80152d4 <vPortExitCritical>
				return pdPASS;
 80130f8:	2301      	movs	r3, #1
 80130fa:	e063      	b.n	80131c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d103      	bne.n	801310a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013102:	f002 f8e7 	bl	80152d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013106:	2300      	movs	r3, #0
 8013108:	e05c      	b.n	80131c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801310a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310c:	2b00      	cmp	r3, #0
 801310e:	d106      	bne.n	801311e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013110:	f107 0314 	add.w	r3, r7, #20
 8013114:	4618      	mov	r0, r3
 8013116:	f001 f9c1 	bl	801449c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801311a:	2301      	movs	r3, #1
 801311c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801311e:	f002 f8d9 	bl	80152d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013122:	f000 fe95 	bl	8013e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013126:	f002 f8a5 	bl	8015274 <vPortEnterCritical>
 801312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801312c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013130:	b25b      	sxtb	r3, r3
 8013132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013136:	d103      	bne.n	8013140 <xQueueGenericSend+0x16c>
 8013138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313a:	2200      	movs	r2, #0
 801313c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013146:	b25b      	sxtb	r3, r3
 8013148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801314c:	d103      	bne.n	8013156 <xQueueGenericSend+0x182>
 801314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013150:	2200      	movs	r2, #0
 8013152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013156:	f002 f8bd 	bl	80152d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801315a:	1d3a      	adds	r2, r7, #4
 801315c:	f107 0314 	add.w	r3, r7, #20
 8013160:	4611      	mov	r1, r2
 8013162:	4618      	mov	r0, r3
 8013164:	f001 f9b0 	bl	80144c8 <xTaskCheckForTimeOut>
 8013168:	4603      	mov	r3, r0
 801316a:	2b00      	cmp	r3, #0
 801316c:	d124      	bne.n	80131b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801316e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013170:	f000 faa2 	bl	80136b8 <prvIsQueueFull>
 8013174:	4603      	mov	r3, r0
 8013176:	2b00      	cmp	r3, #0
 8013178:	d018      	beq.n	80131ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317c:	3310      	adds	r3, #16
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	4611      	mov	r1, r2
 8013182:	4618      	mov	r0, r3
 8013184:	f001 f838 	bl	80141f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801318a:	f000 fa2d 	bl	80135e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801318e:	f000 fe6d 	bl	8013e6c <xTaskResumeAll>
 8013192:	4603      	mov	r3, r0
 8013194:	2b00      	cmp	r3, #0
 8013196:	f47f af7c 	bne.w	8013092 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801319a:	4b0c      	ldr	r3, [pc, #48]	; (80131cc <xQueueGenericSend+0x1f8>)
 801319c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131a0:	601a      	str	r2, [r3, #0]
 80131a2:	f3bf 8f4f 	dsb	sy
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	e772      	b.n	8013092 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80131ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131ae:	f000 fa1b 	bl	80135e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80131b2:	f000 fe5b 	bl	8013e6c <xTaskResumeAll>
 80131b6:	e76c      	b.n	8013092 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80131b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131ba:	f000 fa15 	bl	80135e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131be:	f000 fe55 	bl	8013e6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80131c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3738      	adds	r7, #56	; 0x38
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	e000ed04 	.word	0xe000ed04

080131d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b090      	sub	sp, #64	; 0x40
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
 80131dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80131e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d10a      	bne.n	80131fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80131e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ec:	f383 8811 	msr	BASEPRI, r3
 80131f0:	f3bf 8f6f 	isb	sy
 80131f4:	f3bf 8f4f 	dsb	sy
 80131f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80131fa:	bf00      	nop
 80131fc:	e7fe      	b.n	80131fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d103      	bne.n	801320c <xQueueGenericSendFromISR+0x3c>
 8013204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013208:	2b00      	cmp	r3, #0
 801320a:	d101      	bne.n	8013210 <xQueueGenericSendFromISR+0x40>
 801320c:	2301      	movs	r3, #1
 801320e:	e000      	b.n	8013212 <xQueueGenericSendFromISR+0x42>
 8013210:	2300      	movs	r3, #0
 8013212:	2b00      	cmp	r3, #0
 8013214:	d10a      	bne.n	801322c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321a:	f383 8811 	msr	BASEPRI, r3
 801321e:	f3bf 8f6f 	isb	sy
 8013222:	f3bf 8f4f 	dsb	sy
 8013226:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013228:	bf00      	nop
 801322a:	e7fe      	b.n	801322a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	2b02      	cmp	r3, #2
 8013230:	d103      	bne.n	801323a <xQueueGenericSendFromISR+0x6a>
 8013232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013236:	2b01      	cmp	r3, #1
 8013238:	d101      	bne.n	801323e <xQueueGenericSendFromISR+0x6e>
 801323a:	2301      	movs	r3, #1
 801323c:	e000      	b.n	8013240 <xQueueGenericSendFromISR+0x70>
 801323e:	2300      	movs	r3, #0
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10a      	bne.n	801325a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	623b      	str	r3, [r7, #32]
}
 8013256:	bf00      	nop
 8013258:	e7fe      	b.n	8013258 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801325a:	f002 f8ed 	bl	8015438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801325e:	f3ef 8211 	mrs	r2, BASEPRI
 8013262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013266:	f383 8811 	msr	BASEPRI, r3
 801326a:	f3bf 8f6f 	isb	sy
 801326e:	f3bf 8f4f 	dsb	sy
 8013272:	61fa      	str	r2, [r7, #28]
 8013274:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013276:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013278:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013282:	429a      	cmp	r2, r3
 8013284:	d302      	bcc.n	801328c <xQueueGenericSendFromISR+0xbc>
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	2b02      	cmp	r3, #2
 801328a:	d12f      	bne.n	80132ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801329a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801329c:	683a      	ldr	r2, [r7, #0]
 801329e:	68b9      	ldr	r1, [r7, #8]
 80132a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132a2:	f000 f911 	bl	80134c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80132aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80132ae:	d112      	bne.n	80132d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d016      	beq.n	80132e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ba:	3324      	adds	r3, #36	; 0x24
 80132bc:	4618      	mov	r0, r3
 80132be:	f001 f827 	bl	8014310 <xTaskRemoveFromEventList>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00e      	beq.n	80132e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00b      	beq.n	80132e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2201      	movs	r2, #1
 80132d2:	601a      	str	r2, [r3, #0]
 80132d4:	e007      	b.n	80132e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80132da:	3301      	adds	r3, #1
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	b25a      	sxtb	r2, r3
 80132e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80132e6:	2301      	movs	r3, #1
 80132e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80132ea:	e001      	b.n	80132f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80132ec:	2300      	movs	r3, #0
 80132ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80132fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80132fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3740      	adds	r7, #64	; 0x40
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
	...

08013308 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b08c      	sub	sp, #48	; 0x30
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013314:	2300      	movs	r3, #0
 8013316:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10a      	bne.n	8013338 <xQueueReceive+0x30>
	__asm volatile
 8013322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	623b      	str	r3, [r7, #32]
}
 8013334:	bf00      	nop
 8013336:	e7fe      	b.n	8013336 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d103      	bne.n	8013346 <xQueueReceive+0x3e>
 801333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <xQueueReceive+0x42>
 8013346:	2301      	movs	r3, #1
 8013348:	e000      	b.n	801334c <xQueueReceive+0x44>
 801334a:	2300      	movs	r3, #0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d10a      	bne.n	8013366 <xQueueReceive+0x5e>
	__asm volatile
 8013350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013354:	f383 8811 	msr	BASEPRI, r3
 8013358:	f3bf 8f6f 	isb	sy
 801335c:	f3bf 8f4f 	dsb	sy
 8013360:	61fb      	str	r3, [r7, #28]
}
 8013362:	bf00      	nop
 8013364:	e7fe      	b.n	8013364 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013366:	f001 f9f3 	bl	8014750 <xTaskGetSchedulerState>
 801336a:	4603      	mov	r3, r0
 801336c:	2b00      	cmp	r3, #0
 801336e:	d102      	bne.n	8013376 <xQueueReceive+0x6e>
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d101      	bne.n	801337a <xQueueReceive+0x72>
 8013376:	2301      	movs	r3, #1
 8013378:	e000      	b.n	801337c <xQueueReceive+0x74>
 801337a:	2300      	movs	r3, #0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d10a      	bne.n	8013396 <xQueueReceive+0x8e>
	__asm volatile
 8013380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	61bb      	str	r3, [r7, #24]
}
 8013392:	bf00      	nop
 8013394:	e7fe      	b.n	8013394 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013396:	f001 ff6d 	bl	8015274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d01f      	beq.n	80133e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133a6:	68b9      	ldr	r1, [r7, #8]
 80133a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133aa:	f000 f8f7 	bl	801359c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b0:	1e5a      	subs	r2, r3, #1
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b8:	691b      	ldr	r3, [r3, #16]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d00f      	beq.n	80133de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	3310      	adds	r3, #16
 80133c2:	4618      	mov	r0, r3
 80133c4:	f000 ffa4 	bl	8014310 <xTaskRemoveFromEventList>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d007      	beq.n	80133de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80133ce:	4b3d      	ldr	r3, [pc, #244]	; (80134c4 <xQueueReceive+0x1bc>)
 80133d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133d4:	601a      	str	r2, [r3, #0]
 80133d6:	f3bf 8f4f 	dsb	sy
 80133da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80133de:	f001 ff79 	bl	80152d4 <vPortExitCritical>
				return pdPASS;
 80133e2:	2301      	movs	r3, #1
 80133e4:	e069      	b.n	80134ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d103      	bne.n	80133f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133ec:	f001 ff72 	bl	80152d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80133f0:	2300      	movs	r3, #0
 80133f2:	e062      	b.n	80134ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d106      	bne.n	8013408 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133fa:	f107 0310 	add.w	r3, r7, #16
 80133fe:	4618      	mov	r0, r3
 8013400:	f001 f84c 	bl	801449c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013404:	2301      	movs	r3, #1
 8013406:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013408:	f001 ff64 	bl	80152d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801340c:	f000 fd20 	bl	8013e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013410:	f001 ff30 	bl	8015274 <vPortEnterCritical>
 8013414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801341a:	b25b      	sxtb	r3, r3
 801341c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013420:	d103      	bne.n	801342a <xQueueReceive+0x122>
 8013422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013424:	2200      	movs	r2, #0
 8013426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013430:	b25b      	sxtb	r3, r3
 8013432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013436:	d103      	bne.n	8013440 <xQueueReceive+0x138>
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	2200      	movs	r2, #0
 801343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013440:	f001 ff48 	bl	80152d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013444:	1d3a      	adds	r2, r7, #4
 8013446:	f107 0310 	add.w	r3, r7, #16
 801344a:	4611      	mov	r1, r2
 801344c:	4618      	mov	r0, r3
 801344e:	f001 f83b 	bl	80144c8 <xTaskCheckForTimeOut>
 8013452:	4603      	mov	r3, r0
 8013454:	2b00      	cmp	r3, #0
 8013456:	d123      	bne.n	80134a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801345a:	f000 f917 	bl	801368c <prvIsQueueEmpty>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d017      	beq.n	8013494 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013466:	3324      	adds	r3, #36	; 0x24
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	4611      	mov	r1, r2
 801346c:	4618      	mov	r0, r3
 801346e:	f000 fec3 	bl	80141f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013474:	f000 f8b8 	bl	80135e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013478:	f000 fcf8 	bl	8013e6c <xTaskResumeAll>
 801347c:	4603      	mov	r3, r0
 801347e:	2b00      	cmp	r3, #0
 8013480:	d189      	bne.n	8013396 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013482:	4b10      	ldr	r3, [pc, #64]	; (80134c4 <xQueueReceive+0x1bc>)
 8013484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013488:	601a      	str	r2, [r3, #0]
 801348a:	f3bf 8f4f 	dsb	sy
 801348e:	f3bf 8f6f 	isb	sy
 8013492:	e780      	b.n	8013396 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013496:	f000 f8a7 	bl	80135e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801349a:	f000 fce7 	bl	8013e6c <xTaskResumeAll>
 801349e:	e77a      	b.n	8013396 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80134a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a2:	f000 f8a1 	bl	80135e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134a6:	f000 fce1 	bl	8013e6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134ac:	f000 f8ee 	bl	801368c <prvIsQueueEmpty>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	f43f af6f 	beq.w	8013396 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3730      	adds	r7, #48	; 0x30
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	e000ed04 	.word	0xe000ed04

080134c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134d4:	2300      	movs	r3, #0
 80134d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d10d      	bne.n	8013502 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d14d      	bne.n	801358a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	689b      	ldr	r3, [r3, #8]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f001 f94a 	bl	801478c <xTaskPriorityDisinherit>
 80134f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2200      	movs	r2, #0
 80134fe:	609a      	str	r2, [r3, #8]
 8013500:	e043      	b.n	801358a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d119      	bne.n	801353c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	6858      	ldr	r0, [r3, #4]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013510:	461a      	mov	r2, r3
 8013512:	68b9      	ldr	r1, [r7, #8]
 8013514:	f002 f9f4 	bl	8015900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	685a      	ldr	r2, [r3, #4]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013520:	441a      	add	r2, r3
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	685a      	ldr	r2, [r3, #4]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	429a      	cmp	r2, r3
 8013530:	d32b      	bcc.n	801358a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	605a      	str	r2, [r3, #4]
 801353a:	e026      	b.n	801358a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	68d8      	ldr	r0, [r3, #12]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013544:	461a      	mov	r2, r3
 8013546:	68b9      	ldr	r1, [r7, #8]
 8013548:	f002 f9da 	bl	8015900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	68da      	ldr	r2, [r3, #12]
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013554:	425b      	negs	r3, r3
 8013556:	441a      	add	r2, r3
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	68da      	ldr	r2, [r3, #12]
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	429a      	cmp	r2, r3
 8013566:	d207      	bcs.n	8013578 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	689a      	ldr	r2, [r3, #8]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013570:	425b      	negs	r3, r3
 8013572:	441a      	add	r2, r3
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b02      	cmp	r3, #2
 801357c:	d105      	bne.n	801358a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d002      	beq.n	801358a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	3b01      	subs	r3, #1
 8013588:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	1c5a      	adds	r2, r3, #1
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013592:	697b      	ldr	r3, [r7, #20]
}
 8013594:	4618      	mov	r0, r3
 8013596:	3718      	adds	r7, #24
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d018      	beq.n	80135e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	68da      	ldr	r2, [r3, #12]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b6:	441a      	add	r2, r3
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	68da      	ldr	r2, [r3, #12]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	689b      	ldr	r3, [r3, #8]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d303      	bcc.n	80135d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681a      	ldr	r2, [r3, #0]
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	68d9      	ldr	r1, [r3, #12]
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d8:	461a      	mov	r2, r3
 80135da:	6838      	ldr	r0, [r7, #0]
 80135dc:	f002 f990 	bl	8015900 <memcpy>
	}
}
 80135e0:	bf00      	nop
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135f0:	f001 fe40 	bl	8015274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135fc:	e011      	b.n	8013622 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013602:	2b00      	cmp	r3, #0
 8013604:	d012      	beq.n	801362c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	3324      	adds	r3, #36	; 0x24
 801360a:	4618      	mov	r0, r3
 801360c:	f000 fe80 	bl	8014310 <xTaskRemoveFromEventList>
 8013610:	4603      	mov	r3, r0
 8013612:	2b00      	cmp	r3, #0
 8013614:	d001      	beq.n	801361a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013616:	f000 ffb9 	bl	801458c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801361a:	7bfb      	ldrb	r3, [r7, #15]
 801361c:	3b01      	subs	r3, #1
 801361e:	b2db      	uxtb	r3, r3
 8013620:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013626:	2b00      	cmp	r3, #0
 8013628:	dce9      	bgt.n	80135fe <prvUnlockQueue+0x16>
 801362a:	e000      	b.n	801362e <prvUnlockQueue+0x46>
					break;
 801362c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	22ff      	movs	r2, #255	; 0xff
 8013632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013636:	f001 fe4d 	bl	80152d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801363a:	f001 fe1b 	bl	8015274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013644:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013646:	e011      	b.n	801366c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	691b      	ldr	r3, [r3, #16]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d012      	beq.n	8013676 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	3310      	adds	r3, #16
 8013654:	4618      	mov	r0, r3
 8013656:	f000 fe5b 	bl	8014310 <xTaskRemoveFromEventList>
 801365a:	4603      	mov	r3, r0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d001      	beq.n	8013664 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013660:	f000 ff94 	bl	801458c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013664:	7bbb      	ldrb	r3, [r7, #14]
 8013666:	3b01      	subs	r3, #1
 8013668:	b2db      	uxtb	r3, r3
 801366a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801366c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013670:	2b00      	cmp	r3, #0
 8013672:	dce9      	bgt.n	8013648 <prvUnlockQueue+0x60>
 8013674:	e000      	b.n	8013678 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013676:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	22ff      	movs	r2, #255	; 0xff
 801367c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013680:	f001 fe28 	bl	80152d4 <vPortExitCritical>
}
 8013684:	bf00      	nop
 8013686:	3710      	adds	r7, #16
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013694:	f001 fdee 	bl	8015274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801369c:	2b00      	cmp	r3, #0
 801369e:	d102      	bne.n	80136a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80136a0:	2301      	movs	r3, #1
 80136a2:	60fb      	str	r3, [r7, #12]
 80136a4:	e001      	b.n	80136aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80136a6:	2300      	movs	r3, #0
 80136a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136aa:	f001 fe13 	bl	80152d4 <vPortExitCritical>

	return xReturn;
 80136ae:	68fb      	ldr	r3, [r7, #12]
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3710      	adds	r7, #16
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136c0:	f001 fdd8 	bl	8015274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d102      	bne.n	80136d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136d0:	2301      	movs	r3, #1
 80136d2:	60fb      	str	r3, [r7, #12]
 80136d4:	e001      	b.n	80136da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136d6:	2300      	movs	r3, #0
 80136d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136da:	f001 fdfb 	bl	80152d4 <vPortExitCritical>

	return xReturn;
 80136de:	68fb      	ldr	r3, [r7, #12]
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3710      	adds	r7, #16
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80136e8:	b480      	push	{r7}
 80136ea:	b085      	sub	sp, #20
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136f2:	2300      	movs	r3, #0
 80136f4:	60fb      	str	r3, [r7, #12]
 80136f6:	e014      	b.n	8013722 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80136f8:	4a0f      	ldr	r2, [pc, #60]	; (8013738 <vQueueAddToRegistry+0x50>)
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d10b      	bne.n	801371c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013704:	490c      	ldr	r1, [pc, #48]	; (8013738 <vQueueAddToRegistry+0x50>)
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	683a      	ldr	r2, [r7, #0]
 801370a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801370e:	4a0a      	ldr	r2, [pc, #40]	; (8013738 <vQueueAddToRegistry+0x50>)
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	00db      	lsls	r3, r3, #3
 8013714:	4413      	add	r3, r2
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801371a:	e006      	b.n	801372a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	3301      	adds	r3, #1
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2b07      	cmp	r3, #7
 8013726:	d9e7      	bls.n	80136f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013728:	bf00      	nop
 801372a:	bf00      	nop
 801372c:	3714      	adds	r7, #20
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr
 8013736:	bf00      	nop
 8013738:	240012f8 	.word	0x240012f8

0801373c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801373c:	b580      	push	{r7, lr}
 801373e:	b086      	sub	sp, #24
 8013740:	af00      	add	r7, sp, #0
 8013742:	60f8      	str	r0, [r7, #12]
 8013744:	60b9      	str	r1, [r7, #8]
 8013746:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801374c:	f001 fd92 	bl	8015274 <vPortEnterCritical>
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013756:	b25b      	sxtb	r3, r3
 8013758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801375c:	d103      	bne.n	8013766 <vQueueWaitForMessageRestricted+0x2a>
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	2200      	movs	r2, #0
 8013762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801376c:	b25b      	sxtb	r3, r3
 801376e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013772:	d103      	bne.n	801377c <vQueueWaitForMessageRestricted+0x40>
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	2200      	movs	r2, #0
 8013778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801377c:	f001 fdaa 	bl	80152d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013784:	2b00      	cmp	r3, #0
 8013786:	d106      	bne.n	8013796 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	3324      	adds	r3, #36	; 0x24
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	68b9      	ldr	r1, [r7, #8]
 8013790:	4618      	mov	r0, r3
 8013792:	f000 fd91 	bl	80142b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013796:	6978      	ldr	r0, [r7, #20]
 8013798:	f7ff ff26 	bl	80135e8 <prvUnlockQueue>
	}
 801379c:	bf00      	nop
 801379e:	3718      	adds	r7, #24
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b08e      	sub	sp, #56	; 0x38
 80137a8:	af04      	add	r7, sp, #16
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
 80137b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10a      	bne.n	80137ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80137b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137bc:	f383 8811 	msr	BASEPRI, r3
 80137c0:	f3bf 8f6f 	isb	sy
 80137c4:	f3bf 8f4f 	dsb	sy
 80137c8:	623b      	str	r3, [r7, #32]
}
 80137ca:	bf00      	nop
 80137cc:	e7fe      	b.n	80137cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80137ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d10a      	bne.n	80137ea <xTaskCreateStatic+0x46>
	__asm volatile
 80137d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d8:	f383 8811 	msr	BASEPRI, r3
 80137dc:	f3bf 8f6f 	isb	sy
 80137e0:	f3bf 8f4f 	dsb	sy
 80137e4:	61fb      	str	r3, [r7, #28]
}
 80137e6:	bf00      	nop
 80137e8:	e7fe      	b.n	80137e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80137ea:	235c      	movs	r3, #92	; 0x5c
 80137ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	2b5c      	cmp	r3, #92	; 0x5c
 80137f2:	d00a      	beq.n	801380a <xTaskCreateStatic+0x66>
	__asm volatile
 80137f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f8:	f383 8811 	msr	BASEPRI, r3
 80137fc:	f3bf 8f6f 	isb	sy
 8013800:	f3bf 8f4f 	dsb	sy
 8013804:	61bb      	str	r3, [r7, #24]
}
 8013806:	bf00      	nop
 8013808:	e7fe      	b.n	8013808 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801380a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380e:	2b00      	cmp	r3, #0
 8013810:	d01e      	beq.n	8013850 <xTaskCreateStatic+0xac>
 8013812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013814:	2b00      	cmp	r3, #0
 8013816:	d01b      	beq.n	8013850 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013820:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013824:	2202      	movs	r2, #2
 8013826:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801382a:	2300      	movs	r3, #0
 801382c:	9303      	str	r3, [sp, #12]
 801382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013830:	9302      	str	r3, [sp, #8]
 8013832:	f107 0314 	add.w	r3, r7, #20
 8013836:	9301      	str	r3, [sp, #4]
 8013838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	68b9      	ldr	r1, [r7, #8]
 8013842:	68f8      	ldr	r0, [r7, #12]
 8013844:	f000 f850 	bl	80138e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801384a:	f000 f8dd 	bl	8013a08 <prvAddNewTaskToReadyList>
 801384e:	e001      	b.n	8013854 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013850:	2300      	movs	r3, #0
 8013852:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013854:	697b      	ldr	r3, [r7, #20]
	}
 8013856:	4618      	mov	r0, r3
 8013858:	3728      	adds	r7, #40	; 0x28
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}

0801385e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801385e:	b580      	push	{r7, lr}
 8013860:	b08c      	sub	sp, #48	; 0x30
 8013862:	af04      	add	r7, sp, #16
 8013864:	60f8      	str	r0, [r7, #12]
 8013866:	60b9      	str	r1, [r7, #8]
 8013868:	603b      	str	r3, [r7, #0]
 801386a:	4613      	mov	r3, r2
 801386c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801386e:	88fb      	ldrh	r3, [r7, #6]
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	4618      	mov	r0, r3
 8013874:	f001 fe20 	bl	80154b8 <pvPortMalloc>
 8013878:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00e      	beq.n	801389e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013880:	205c      	movs	r0, #92	; 0x5c
 8013882:	f001 fe19 	bl	80154b8 <pvPortMalloc>
 8013886:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d003      	beq.n	8013896 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	697a      	ldr	r2, [r7, #20]
 8013892:	631a      	str	r2, [r3, #48]	; 0x30
 8013894:	e005      	b.n	80138a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013896:	6978      	ldr	r0, [r7, #20]
 8013898:	f001 feda 	bl	8015650 <vPortFree>
 801389c:	e001      	b.n	80138a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801389e:	2300      	movs	r3, #0
 80138a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d017      	beq.n	80138d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	2200      	movs	r2, #0
 80138ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138b0:	88fa      	ldrh	r2, [r7, #6]
 80138b2:	2300      	movs	r3, #0
 80138b4:	9303      	str	r3, [sp, #12]
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	9302      	str	r3, [sp, #8]
 80138ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138bc:	9301      	str	r3, [sp, #4]
 80138be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	68b9      	ldr	r1, [r7, #8]
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f000 f80e 	bl	80138e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138cc:	69f8      	ldr	r0, [r7, #28]
 80138ce:	f000 f89b 	bl	8013a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80138d2:	2301      	movs	r3, #1
 80138d4:	61bb      	str	r3, [r7, #24]
 80138d6:	e002      	b.n	80138de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80138d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80138de:	69bb      	ldr	r3, [r7, #24]
	}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3720      	adds	r7, #32
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b088      	sub	sp, #32
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	607a      	str	r2, [r7, #4]
 80138f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80138f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	009b      	lsls	r3, r3, #2
 80138fe:	461a      	mov	r2, r3
 8013900:	21a5      	movs	r1, #165	; 0xa5
 8013902:	f002 f80b 	bl	801591c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801390a:	6879      	ldr	r1, [r7, #4]
 801390c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013910:	440b      	add	r3, r1
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4413      	add	r3, r2
 8013916:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013918:	69bb      	ldr	r3, [r7, #24]
 801391a:	f023 0307 	bic.w	r3, r3, #7
 801391e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013920:	69bb      	ldr	r3, [r7, #24]
 8013922:	f003 0307 	and.w	r3, r3, #7
 8013926:	2b00      	cmp	r3, #0
 8013928:	d00a      	beq.n	8013940 <prvInitialiseNewTask+0x58>
	__asm volatile
 801392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392e:	f383 8811 	msr	BASEPRI, r3
 8013932:	f3bf 8f6f 	isb	sy
 8013936:	f3bf 8f4f 	dsb	sy
 801393a:	617b      	str	r3, [r7, #20]
}
 801393c:	bf00      	nop
 801393e:	e7fe      	b.n	801393e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d01f      	beq.n	8013986 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013946:	2300      	movs	r3, #0
 8013948:	61fb      	str	r3, [r7, #28]
 801394a:	e012      	b.n	8013972 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801394c:	68ba      	ldr	r2, [r7, #8]
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	4413      	add	r3, r2
 8013952:	7819      	ldrb	r1, [r3, #0]
 8013954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	4413      	add	r3, r2
 801395a:	3334      	adds	r3, #52	; 0x34
 801395c:	460a      	mov	r2, r1
 801395e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013960:	68ba      	ldr	r2, [r7, #8]
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	4413      	add	r3, r2
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d006      	beq.n	801397a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	3301      	adds	r3, #1
 8013970:	61fb      	str	r3, [r7, #28]
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	2b0f      	cmp	r3, #15
 8013976:	d9e9      	bls.n	801394c <prvInitialiseNewTask+0x64>
 8013978:	e000      	b.n	801397c <prvInitialiseNewTask+0x94>
			{
				break;
 801397a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397e:	2200      	movs	r2, #0
 8013980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013984:	e003      	b.n	801398e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013988:	2200      	movs	r2, #0
 801398a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013990:	2b37      	cmp	r3, #55	; 0x37
 8013992:	d901      	bls.n	8013998 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013994:	2337      	movs	r3, #55	; 0x37
 8013996:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801399c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a6:	2200      	movs	r2, #0
 80139a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ac:	3304      	adds	r3, #4
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7ff f978 	bl	8012ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80139b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b6:	3318      	adds	r3, #24
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff f973 	bl	8012ca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80139be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80139ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80139d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d6:	2200      	movs	r2, #0
 80139d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80139da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139dc:	2200      	movs	r2, #0
 80139de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80139e2:	683a      	ldr	r2, [r7, #0]
 80139e4:	68f9      	ldr	r1, [r7, #12]
 80139e6:	69b8      	ldr	r0, [r7, #24]
 80139e8:	f001 fb18 	bl	801501c <pxPortInitialiseStack>
 80139ec:	4602      	mov	r2, r0
 80139ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80139f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d002      	beq.n	80139fe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80139f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80139fe:	bf00      	nop
 8013a00:	3720      	adds	r7, #32
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
	...

08013a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a10:	f001 fc30 	bl	8015274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a14:	4b2d      	ldr	r3, [pc, #180]	; (8013acc <prvAddNewTaskToReadyList+0xc4>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	4a2c      	ldr	r2, [pc, #176]	; (8013acc <prvAddNewTaskToReadyList+0xc4>)
 8013a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a1e:	4b2c      	ldr	r3, [pc, #176]	; (8013ad0 <prvAddNewTaskToReadyList+0xc8>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d109      	bne.n	8013a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a26:	4a2a      	ldr	r2, [pc, #168]	; (8013ad0 <prvAddNewTaskToReadyList+0xc8>)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a2c:	4b27      	ldr	r3, [pc, #156]	; (8013acc <prvAddNewTaskToReadyList+0xc4>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d110      	bne.n	8013a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a34:	f000 fdce 	bl	80145d4 <prvInitialiseTaskLists>
 8013a38:	e00d      	b.n	8013a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a3a:	4b26      	ldr	r3, [pc, #152]	; (8013ad4 <prvAddNewTaskToReadyList+0xcc>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d109      	bne.n	8013a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a42:	4b23      	ldr	r3, [pc, #140]	; (8013ad0 <prvAddNewTaskToReadyList+0xc8>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d802      	bhi.n	8013a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a50:	4a1f      	ldr	r2, [pc, #124]	; (8013ad0 <prvAddNewTaskToReadyList+0xc8>)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a56:	4b20      	ldr	r3, [pc, #128]	; (8013ad8 <prvAddNewTaskToReadyList+0xd0>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	3301      	adds	r3, #1
 8013a5c:	4a1e      	ldr	r2, [pc, #120]	; (8013ad8 <prvAddNewTaskToReadyList+0xd0>)
 8013a5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013a60:	4b1d      	ldr	r3, [pc, #116]	; (8013ad8 <prvAddNewTaskToReadyList+0xd0>)
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a6c:	4b1b      	ldr	r3, [pc, #108]	; (8013adc <prvAddNewTaskToReadyList+0xd4>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d903      	bls.n	8013a7c <prvAddNewTaskToReadyList+0x74>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a78:	4a18      	ldr	r2, [pc, #96]	; (8013adc <prvAddNewTaskToReadyList+0xd4>)
 8013a7a:	6013      	str	r3, [r2, #0]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a80:	4613      	mov	r3, r2
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	4413      	add	r3, r2
 8013a86:	009b      	lsls	r3, r3, #2
 8013a88:	4a15      	ldr	r2, [pc, #84]	; (8013ae0 <prvAddNewTaskToReadyList+0xd8>)
 8013a8a:	441a      	add	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	3304      	adds	r3, #4
 8013a90:	4619      	mov	r1, r3
 8013a92:	4610      	mov	r0, r2
 8013a94:	f7ff f913 	bl	8012cbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a98:	f001 fc1c 	bl	80152d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a9c:	4b0d      	ldr	r3, [pc, #52]	; (8013ad4 <prvAddNewTaskToReadyList+0xcc>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00e      	beq.n	8013ac2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013aa4:	4b0a      	ldr	r3, [pc, #40]	; (8013ad0 <prvAddNewTaskToReadyList+0xc8>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d207      	bcs.n	8013ac2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013ab2:	4b0c      	ldr	r3, [pc, #48]	; (8013ae4 <prvAddNewTaskToReadyList+0xdc>)
 8013ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ab8:	601a      	str	r2, [r3, #0]
 8013aba:	f3bf 8f4f 	dsb	sy
 8013abe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ac2:	bf00      	nop
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	2400180c 	.word	0x2400180c
 8013ad0:	24001338 	.word	0x24001338
 8013ad4:	24001818 	.word	0x24001818
 8013ad8:	24001828 	.word	0x24001828
 8013adc:	24001814 	.word	0x24001814
 8013ae0:	2400133c 	.word	0x2400133c
 8013ae4:	e000ed04 	.word	0xe000ed04

08013ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b084      	sub	sp, #16
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013af0:	2300      	movs	r3, #0
 8013af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d017      	beq.n	8013b2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013afa:	4b13      	ldr	r3, [pc, #76]	; (8013b48 <vTaskDelay+0x60>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00a      	beq.n	8013b18 <vTaskDelay+0x30>
	__asm volatile
 8013b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b06:	f383 8811 	msr	BASEPRI, r3
 8013b0a:	f3bf 8f6f 	isb	sy
 8013b0e:	f3bf 8f4f 	dsb	sy
 8013b12:	60bb      	str	r3, [r7, #8]
}
 8013b14:	bf00      	nop
 8013b16:	e7fe      	b.n	8013b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b18:	f000 f99a 	bl	8013e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b1c:	2100      	movs	r1, #0
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f000 feba 	bl	8014898 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b24:	f000 f9a2 	bl	8013e6c <xTaskResumeAll>
 8013b28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d107      	bne.n	8013b40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013b30:	4b06      	ldr	r3, [pc, #24]	; (8013b4c <vTaskDelay+0x64>)
 8013b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b36:	601a      	str	r2, [r3, #0]
 8013b38:	f3bf 8f4f 	dsb	sy
 8013b3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b40:	bf00      	nop
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	24001834 	.word	0x24001834
 8013b4c:	e000ed04 	.word	0xe000ed04

08013b50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b084      	sub	sp, #16
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013b58:	f001 fb8c 	bl	8015274 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d102      	bne.n	8013b68 <vTaskSuspend+0x18>
 8013b62:	4b30      	ldr	r3, [pc, #192]	; (8013c24 <vTaskSuspend+0xd4>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	e000      	b.n	8013b6a <vTaskSuspend+0x1a>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	3304      	adds	r3, #4
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7ff f901 	bl	8012d78 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d004      	beq.n	8013b88 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	3318      	adds	r3, #24
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7ff f8f8 	bl	8012d78 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	3304      	adds	r3, #4
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4826      	ldr	r0, [pc, #152]	; (8013c28 <vTaskSuspend+0xd8>)
 8013b90:	f7ff f895 	bl	8012cbe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013b9a:	b2db      	uxtb	r3, r3
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d103      	bne.n	8013ba8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013ba8:	f001 fb94 	bl	80152d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013bac:	4b1f      	ldr	r3, [pc, #124]	; (8013c2c <vTaskSuspend+0xdc>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d005      	beq.n	8013bc0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013bb4:	f001 fb5e 	bl	8015274 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8013bb8:	f000 fdaa 	bl	8014710 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013bbc:	f001 fb8a 	bl	80152d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013bc0:	4b18      	ldr	r3, [pc, #96]	; (8013c24 <vTaskSuspend+0xd4>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	68fa      	ldr	r2, [r7, #12]
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	d127      	bne.n	8013c1a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8013bca:	4b18      	ldr	r3, [pc, #96]	; (8013c2c <vTaskSuspend+0xdc>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d017      	beq.n	8013c02 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013bd2:	4b17      	ldr	r3, [pc, #92]	; (8013c30 <vTaskSuspend+0xe0>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d00a      	beq.n	8013bf0 <vTaskSuspend+0xa0>
	__asm volatile
 8013bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	60bb      	str	r3, [r7, #8]
}
 8013bec:	bf00      	nop
 8013bee:	e7fe      	b.n	8013bee <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8013bf0:	4b10      	ldr	r3, [pc, #64]	; (8013c34 <vTaskSuspend+0xe4>)
 8013bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bf6:	601a      	str	r2, [r3, #0]
 8013bf8:	f3bf 8f4f 	dsb	sy
 8013bfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c00:	e00b      	b.n	8013c1a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013c02:	4b09      	ldr	r3, [pc, #36]	; (8013c28 <vTaskSuspend+0xd8>)
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	4b0c      	ldr	r3, [pc, #48]	; (8013c38 <vTaskSuspend+0xe8>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d103      	bne.n	8013c16 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8013c0e:	4b05      	ldr	r3, [pc, #20]	; (8013c24 <vTaskSuspend+0xd4>)
 8013c10:	2200      	movs	r2, #0
 8013c12:	601a      	str	r2, [r3, #0]
	}
 8013c14:	e001      	b.n	8013c1a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8013c16:	f000 fa91 	bl	801413c <vTaskSwitchContext>
	}
 8013c1a:	bf00      	nop
 8013c1c:	3710      	adds	r7, #16
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	24001338 	.word	0x24001338
 8013c28:	240017f8 	.word	0x240017f8
 8013c2c:	24001818 	.word	0x24001818
 8013c30:	24001834 	.word	0x24001834
 8013c34:	e000ed04 	.word	0xe000ed04
 8013c38:	2400180c 	.word	0x2400180c

08013c3c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b087      	sub	sp, #28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013c44:	2300      	movs	r3, #0
 8013c46:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d10a      	bne.n	8013c68 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c56:	f383 8811 	msr	BASEPRI, r3
 8013c5a:	f3bf 8f6f 	isb	sy
 8013c5e:	f3bf 8f4f 	dsb	sy
 8013c62:	60fb      	str	r3, [r7, #12]
}
 8013c64:	bf00      	nop
 8013c66:	e7fe      	b.n	8013c66 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	695b      	ldr	r3, [r3, #20]
 8013c6c:	4a0a      	ldr	r2, [pc, #40]	; (8013c98 <prvTaskIsTaskSuspended+0x5c>)
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	d10a      	bne.n	8013c88 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c76:	4a09      	ldr	r2, [pc, #36]	; (8013c9c <prvTaskIsTaskSuspended+0x60>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d005      	beq.n	8013c88 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d101      	bne.n	8013c88 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013c84:	2301      	movs	r3, #1
 8013c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c88:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	371c      	adds	r7, #28
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	240017f8 	.word	0x240017f8
 8013c9c:	240017cc 	.word	0x240017cc

08013ca0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b08a      	sub	sp, #40	; 0x28
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d10a      	bne.n	8013ccc <xTaskResumeFromISR+0x2c>
	__asm volatile
 8013cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cba:	f383 8811 	msr	BASEPRI, r3
 8013cbe:	f3bf 8f6f 	isb	sy
 8013cc2:	f3bf 8f4f 	dsb	sy
 8013cc6:	61bb      	str	r3, [r7, #24]
}
 8013cc8:	bf00      	nop
 8013cca:	e7fe      	b.n	8013cca <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ccc:	f001 fbb4 	bl	8015438 <vPortValidateInterruptPriority>
	__asm volatile
 8013cd0:	f3ef 8211 	mrs	r2, BASEPRI
 8013cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd8:	f383 8811 	msr	BASEPRI, r3
 8013cdc:	f3bf 8f6f 	isb	sy
 8013ce0:	f3bf 8f4f 	dsb	sy
 8013ce4:	617a      	str	r2, [r7, #20]
 8013ce6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013ce8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013cea:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013cec:	6a38      	ldr	r0, [r7, #32]
 8013cee:	f7ff ffa5 	bl	8013c3c <prvTaskIsTaskSuspended>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d030      	beq.n	8013d5a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cf8:	4b1d      	ldr	r3, [pc, #116]	; (8013d70 <xTaskResumeFromISR+0xd0>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d126      	bne.n	8013d4e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d00:	6a3b      	ldr	r3, [r7, #32]
 8013d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d04:	4b1b      	ldr	r3, [pc, #108]	; (8013d74 <xTaskResumeFromISR+0xd4>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d301      	bcc.n	8013d12 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d12:	6a3b      	ldr	r3, [r7, #32]
 8013d14:	3304      	adds	r3, #4
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7ff f82e 	bl	8012d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d1c:	6a3b      	ldr	r3, [r7, #32]
 8013d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d20:	4b15      	ldr	r3, [pc, #84]	; (8013d78 <xTaskResumeFromISR+0xd8>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d903      	bls.n	8013d30 <xTaskResumeFromISR+0x90>
 8013d28:	6a3b      	ldr	r3, [r7, #32]
 8013d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d2c:	4a12      	ldr	r2, [pc, #72]	; (8013d78 <xTaskResumeFromISR+0xd8>)
 8013d2e:	6013      	str	r3, [r2, #0]
 8013d30:	6a3b      	ldr	r3, [r7, #32]
 8013d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d34:	4613      	mov	r3, r2
 8013d36:	009b      	lsls	r3, r3, #2
 8013d38:	4413      	add	r3, r2
 8013d3a:	009b      	lsls	r3, r3, #2
 8013d3c:	4a0f      	ldr	r2, [pc, #60]	; (8013d7c <xTaskResumeFromISR+0xdc>)
 8013d3e:	441a      	add	r2, r3
 8013d40:	6a3b      	ldr	r3, [r7, #32]
 8013d42:	3304      	adds	r3, #4
 8013d44:	4619      	mov	r1, r3
 8013d46:	4610      	mov	r0, r2
 8013d48:	f7fe ffb9 	bl	8012cbe <vListInsertEnd>
 8013d4c:	e005      	b.n	8013d5a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013d4e:	6a3b      	ldr	r3, [r7, #32]
 8013d50:	3318      	adds	r3, #24
 8013d52:	4619      	mov	r1, r3
 8013d54:	480a      	ldr	r0, [pc, #40]	; (8013d80 <xTaskResumeFromISR+0xe0>)
 8013d56:	f7fe ffb2 	bl	8012cbe <vListInsertEnd>
 8013d5a:	69fb      	ldr	r3, [r7, #28]
 8013d5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	f383 8811 	msr	BASEPRI, r3
}
 8013d64:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3728      	adds	r7, #40	; 0x28
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	24001834 	.word	0x24001834
 8013d74:	24001338 	.word	0x24001338
 8013d78:	24001814 	.word	0x24001814
 8013d7c:	2400133c 	.word	0x2400133c
 8013d80:	240017cc 	.word	0x240017cc

08013d84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b08a      	sub	sp, #40	; 0x28
 8013d88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013d92:	463a      	mov	r2, r7
 8013d94:	1d39      	adds	r1, r7, #4
 8013d96:	f107 0308 	add.w	r3, r7, #8
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7fe fd40 	bl	8012820 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013da0:	6839      	ldr	r1, [r7, #0]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	68ba      	ldr	r2, [r7, #8]
 8013da6:	9202      	str	r2, [sp, #8]
 8013da8:	9301      	str	r3, [sp, #4]
 8013daa:	2300      	movs	r3, #0
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	2300      	movs	r3, #0
 8013db0:	460a      	mov	r2, r1
 8013db2:	4921      	ldr	r1, [pc, #132]	; (8013e38 <vTaskStartScheduler+0xb4>)
 8013db4:	4821      	ldr	r0, [pc, #132]	; (8013e3c <vTaskStartScheduler+0xb8>)
 8013db6:	f7ff fcf5 	bl	80137a4 <xTaskCreateStatic>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	4a20      	ldr	r2, [pc, #128]	; (8013e40 <vTaskStartScheduler+0xbc>)
 8013dbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013dc0:	4b1f      	ldr	r3, [pc, #124]	; (8013e40 <vTaskStartScheduler+0xbc>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d002      	beq.n	8013dce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	617b      	str	r3, [r7, #20]
 8013dcc:	e001      	b.n	8013dd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d102      	bne.n	8013dde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013dd8:	f000 fdb2 	bl	8014940 <xTimerCreateTimerTask>
 8013ddc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	2b01      	cmp	r3, #1
 8013de2:	d116      	bne.n	8013e12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8013de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de8:	f383 8811 	msr	BASEPRI, r3
 8013dec:	f3bf 8f6f 	isb	sy
 8013df0:	f3bf 8f4f 	dsb	sy
 8013df4:	613b      	str	r3, [r7, #16]
}
 8013df6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013df8:	4b12      	ldr	r3, [pc, #72]	; (8013e44 <vTaskStartScheduler+0xc0>)
 8013dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e00:	4b11      	ldr	r3, [pc, #68]	; (8013e48 <vTaskStartScheduler+0xc4>)
 8013e02:	2201      	movs	r2, #1
 8013e04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e06:	4b11      	ldr	r3, [pc, #68]	; (8013e4c <vTaskStartScheduler+0xc8>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e0c:	f001 f990 	bl	8015130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e10:	e00e      	b.n	8013e30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e18:	d10a      	bne.n	8013e30 <vTaskStartScheduler+0xac>
	__asm volatile
 8013e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1e:	f383 8811 	msr	BASEPRI, r3
 8013e22:	f3bf 8f6f 	isb	sy
 8013e26:	f3bf 8f4f 	dsb	sy
 8013e2a:	60fb      	str	r3, [r7, #12]
}
 8013e2c:	bf00      	nop
 8013e2e:	e7fe      	b.n	8013e2e <vTaskStartScheduler+0xaa>
}
 8013e30:	bf00      	nop
 8013e32:	3718      	adds	r7, #24
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	0801658c 	.word	0x0801658c
 8013e3c:	080145a5 	.word	0x080145a5
 8013e40:	24001830 	.word	0x24001830
 8013e44:	2400182c 	.word	0x2400182c
 8013e48:	24001818 	.word	0x24001818
 8013e4c:	24001810 	.word	0x24001810

08013e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e50:	b480      	push	{r7}
 8013e52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013e54:	4b04      	ldr	r3, [pc, #16]	; (8013e68 <vTaskSuspendAll+0x18>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	3301      	adds	r3, #1
 8013e5a:	4a03      	ldr	r2, [pc, #12]	; (8013e68 <vTaskSuspendAll+0x18>)
 8013e5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013e5e:	bf00      	nop
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr
 8013e68:	24001834 	.word	0x24001834

08013e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013e72:	2300      	movs	r3, #0
 8013e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013e76:	2300      	movs	r3, #0
 8013e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013e7a:	4b42      	ldr	r3, [pc, #264]	; (8013f84 <xTaskResumeAll+0x118>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d10a      	bne.n	8013e98 <xTaskResumeAll+0x2c>
	__asm volatile
 8013e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e86:	f383 8811 	msr	BASEPRI, r3
 8013e8a:	f3bf 8f6f 	isb	sy
 8013e8e:	f3bf 8f4f 	dsb	sy
 8013e92:	603b      	str	r3, [r7, #0]
}
 8013e94:	bf00      	nop
 8013e96:	e7fe      	b.n	8013e96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013e98:	f001 f9ec 	bl	8015274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013e9c:	4b39      	ldr	r3, [pc, #228]	; (8013f84 <xTaskResumeAll+0x118>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	3b01      	subs	r3, #1
 8013ea2:	4a38      	ldr	r2, [pc, #224]	; (8013f84 <xTaskResumeAll+0x118>)
 8013ea4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ea6:	4b37      	ldr	r3, [pc, #220]	; (8013f84 <xTaskResumeAll+0x118>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d162      	bne.n	8013f74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013eae:	4b36      	ldr	r3, [pc, #216]	; (8013f88 <xTaskResumeAll+0x11c>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d05e      	beq.n	8013f74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013eb6:	e02f      	b.n	8013f18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eb8:	4b34      	ldr	r3, [pc, #208]	; (8013f8c <xTaskResumeAll+0x120>)
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	68db      	ldr	r3, [r3, #12]
 8013ebe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	3318      	adds	r3, #24
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fe ff57 	bl	8012d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	3304      	adds	r3, #4
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7fe ff52 	bl	8012d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ed8:	4b2d      	ldr	r3, [pc, #180]	; (8013f90 <xTaskResumeAll+0x124>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d903      	bls.n	8013ee8 <xTaskResumeAll+0x7c>
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee4:	4a2a      	ldr	r2, [pc, #168]	; (8013f90 <xTaskResumeAll+0x124>)
 8013ee6:	6013      	str	r3, [r2, #0]
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eec:	4613      	mov	r3, r2
 8013eee:	009b      	lsls	r3, r3, #2
 8013ef0:	4413      	add	r3, r2
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	4a27      	ldr	r2, [pc, #156]	; (8013f94 <xTaskResumeAll+0x128>)
 8013ef6:	441a      	add	r2, r3
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	3304      	adds	r3, #4
 8013efc:	4619      	mov	r1, r3
 8013efe:	4610      	mov	r0, r2
 8013f00:	f7fe fedd 	bl	8012cbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f08:	4b23      	ldr	r3, [pc, #140]	; (8013f98 <xTaskResumeAll+0x12c>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d302      	bcc.n	8013f18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013f12:	4b22      	ldr	r3, [pc, #136]	; (8013f9c <xTaskResumeAll+0x130>)
 8013f14:	2201      	movs	r2, #1
 8013f16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f18:	4b1c      	ldr	r3, [pc, #112]	; (8013f8c <xTaskResumeAll+0x120>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d1cb      	bne.n	8013eb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d001      	beq.n	8013f2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f26:	f000 fbf3 	bl	8014710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f2a:	4b1d      	ldr	r3, [pc, #116]	; (8013fa0 <xTaskResumeAll+0x134>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d010      	beq.n	8013f58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f36:	f000 f847 	bl	8013fc8 <xTaskIncrementTick>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d002      	beq.n	8013f46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013f40:	4b16      	ldr	r3, [pc, #88]	; (8013f9c <xTaskResumeAll+0x130>)
 8013f42:	2201      	movs	r2, #1
 8013f44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	3b01      	subs	r3, #1
 8013f4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d1f1      	bne.n	8013f36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013f52:	4b13      	ldr	r3, [pc, #76]	; (8013fa0 <xTaskResumeAll+0x134>)
 8013f54:	2200      	movs	r2, #0
 8013f56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013f58:	4b10      	ldr	r3, [pc, #64]	; (8013f9c <xTaskResumeAll+0x130>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d009      	beq.n	8013f74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013f60:	2301      	movs	r3, #1
 8013f62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013f64:	4b0f      	ldr	r3, [pc, #60]	; (8013fa4 <xTaskResumeAll+0x138>)
 8013f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f6a:	601a      	str	r2, [r3, #0]
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013f74:	f001 f9ae 	bl	80152d4 <vPortExitCritical>

	return xAlreadyYielded;
 8013f78:	68bb      	ldr	r3, [r7, #8]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3710      	adds	r7, #16
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	24001834 	.word	0x24001834
 8013f88:	2400180c 	.word	0x2400180c
 8013f8c:	240017cc 	.word	0x240017cc
 8013f90:	24001814 	.word	0x24001814
 8013f94:	2400133c 	.word	0x2400133c
 8013f98:	24001338 	.word	0x24001338
 8013f9c:	24001820 	.word	0x24001820
 8013fa0:	2400181c 	.word	0x2400181c
 8013fa4:	e000ed04 	.word	0xe000ed04

08013fa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b083      	sub	sp, #12
 8013fac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013fae:	4b05      	ldr	r3, [pc, #20]	; (8013fc4 <xTaskGetTickCount+0x1c>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013fb4:	687b      	ldr	r3, [r7, #4]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	370c      	adds	r7, #12
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	24001810 	.word	0x24001810

08013fc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b086      	sub	sp, #24
 8013fcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fd2:	4b4f      	ldr	r3, [pc, #316]	; (8014110 <xTaskIncrementTick+0x148>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f040 808f 	bne.w	80140fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013fdc:	4b4d      	ldr	r3, [pc, #308]	; (8014114 <xTaskIncrementTick+0x14c>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013fe4:	4a4b      	ldr	r2, [pc, #300]	; (8014114 <xTaskIncrementTick+0x14c>)
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d120      	bne.n	8014032 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013ff0:	4b49      	ldr	r3, [pc, #292]	; (8014118 <xTaskIncrementTick+0x150>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d00a      	beq.n	8014010 <xTaskIncrementTick+0x48>
	__asm volatile
 8013ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffe:	f383 8811 	msr	BASEPRI, r3
 8014002:	f3bf 8f6f 	isb	sy
 8014006:	f3bf 8f4f 	dsb	sy
 801400a:	603b      	str	r3, [r7, #0]
}
 801400c:	bf00      	nop
 801400e:	e7fe      	b.n	801400e <xTaskIncrementTick+0x46>
 8014010:	4b41      	ldr	r3, [pc, #260]	; (8014118 <xTaskIncrementTick+0x150>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	60fb      	str	r3, [r7, #12]
 8014016:	4b41      	ldr	r3, [pc, #260]	; (801411c <xTaskIncrementTick+0x154>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	4a3f      	ldr	r2, [pc, #252]	; (8014118 <xTaskIncrementTick+0x150>)
 801401c:	6013      	str	r3, [r2, #0]
 801401e:	4a3f      	ldr	r2, [pc, #252]	; (801411c <xTaskIncrementTick+0x154>)
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	6013      	str	r3, [r2, #0]
 8014024:	4b3e      	ldr	r3, [pc, #248]	; (8014120 <xTaskIncrementTick+0x158>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	3301      	adds	r3, #1
 801402a:	4a3d      	ldr	r2, [pc, #244]	; (8014120 <xTaskIncrementTick+0x158>)
 801402c:	6013      	str	r3, [r2, #0]
 801402e:	f000 fb6f 	bl	8014710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014032:	4b3c      	ldr	r3, [pc, #240]	; (8014124 <xTaskIncrementTick+0x15c>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	693a      	ldr	r2, [r7, #16]
 8014038:	429a      	cmp	r2, r3
 801403a:	d349      	bcc.n	80140d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801403c:	4b36      	ldr	r3, [pc, #216]	; (8014118 <xTaskIncrementTick+0x150>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d104      	bne.n	8014050 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014046:	4b37      	ldr	r3, [pc, #220]	; (8014124 <xTaskIncrementTick+0x15c>)
 8014048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801404c:	601a      	str	r2, [r3, #0]
					break;
 801404e:	e03f      	b.n	80140d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014050:	4b31      	ldr	r3, [pc, #196]	; (8014118 <xTaskIncrementTick+0x150>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014060:	693a      	ldr	r2, [r7, #16]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	429a      	cmp	r2, r3
 8014066:	d203      	bcs.n	8014070 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014068:	4a2e      	ldr	r2, [pc, #184]	; (8014124 <xTaskIncrementTick+0x15c>)
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801406e:	e02f      	b.n	80140d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	3304      	adds	r3, #4
 8014074:	4618      	mov	r0, r3
 8014076:	f7fe fe7f 	bl	8012d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801407e:	2b00      	cmp	r3, #0
 8014080:	d004      	beq.n	801408c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	3318      	adds	r3, #24
 8014086:	4618      	mov	r0, r3
 8014088:	f7fe fe76 	bl	8012d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014090:	4b25      	ldr	r3, [pc, #148]	; (8014128 <xTaskIncrementTick+0x160>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	429a      	cmp	r2, r3
 8014096:	d903      	bls.n	80140a0 <xTaskIncrementTick+0xd8>
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409c:	4a22      	ldr	r2, [pc, #136]	; (8014128 <xTaskIncrementTick+0x160>)
 801409e:	6013      	str	r3, [r2, #0]
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a4:	4613      	mov	r3, r2
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	4413      	add	r3, r2
 80140aa:	009b      	lsls	r3, r3, #2
 80140ac:	4a1f      	ldr	r2, [pc, #124]	; (801412c <xTaskIncrementTick+0x164>)
 80140ae:	441a      	add	r2, r3
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	3304      	adds	r3, #4
 80140b4:	4619      	mov	r1, r3
 80140b6:	4610      	mov	r0, r2
 80140b8:	f7fe fe01 	bl	8012cbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140c0:	4b1b      	ldr	r3, [pc, #108]	; (8014130 <xTaskIncrementTick+0x168>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d3b8      	bcc.n	801403c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80140ca:	2301      	movs	r3, #1
 80140cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140ce:	e7b5      	b.n	801403c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80140d0:	4b17      	ldr	r3, [pc, #92]	; (8014130 <xTaskIncrementTick+0x168>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140d6:	4915      	ldr	r1, [pc, #84]	; (801412c <xTaskIncrementTick+0x164>)
 80140d8:	4613      	mov	r3, r2
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	4413      	add	r3, r2
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	440b      	add	r3, r1
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d901      	bls.n	80140ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80140e8:	2301      	movs	r3, #1
 80140ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80140ec:	4b11      	ldr	r3, [pc, #68]	; (8014134 <xTaskIncrementTick+0x16c>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d007      	beq.n	8014104 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80140f4:	2301      	movs	r3, #1
 80140f6:	617b      	str	r3, [r7, #20]
 80140f8:	e004      	b.n	8014104 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80140fa:	4b0f      	ldr	r3, [pc, #60]	; (8014138 <xTaskIncrementTick+0x170>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	3301      	adds	r3, #1
 8014100:	4a0d      	ldr	r2, [pc, #52]	; (8014138 <xTaskIncrementTick+0x170>)
 8014102:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014104:	697b      	ldr	r3, [r7, #20]
}
 8014106:	4618      	mov	r0, r3
 8014108:	3718      	adds	r7, #24
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	24001834 	.word	0x24001834
 8014114:	24001810 	.word	0x24001810
 8014118:	240017c4 	.word	0x240017c4
 801411c:	240017c8 	.word	0x240017c8
 8014120:	24001824 	.word	0x24001824
 8014124:	2400182c 	.word	0x2400182c
 8014128:	24001814 	.word	0x24001814
 801412c:	2400133c 	.word	0x2400133c
 8014130:	24001338 	.word	0x24001338
 8014134:	24001820 	.word	0x24001820
 8014138:	2400181c 	.word	0x2400181c

0801413c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014142:	4b28      	ldr	r3, [pc, #160]	; (80141e4 <vTaskSwitchContext+0xa8>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d003      	beq.n	8014152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801414a:	4b27      	ldr	r3, [pc, #156]	; (80141e8 <vTaskSwitchContext+0xac>)
 801414c:	2201      	movs	r2, #1
 801414e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014150:	e041      	b.n	80141d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014152:	4b25      	ldr	r3, [pc, #148]	; (80141e8 <vTaskSwitchContext+0xac>)
 8014154:	2200      	movs	r2, #0
 8014156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014158:	4b24      	ldr	r3, [pc, #144]	; (80141ec <vTaskSwitchContext+0xb0>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	60fb      	str	r3, [r7, #12]
 801415e:	e010      	b.n	8014182 <vTaskSwitchContext+0x46>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d10a      	bne.n	801417c <vTaskSwitchContext+0x40>
	__asm volatile
 8014166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801416a:	f383 8811 	msr	BASEPRI, r3
 801416e:	f3bf 8f6f 	isb	sy
 8014172:	f3bf 8f4f 	dsb	sy
 8014176:	607b      	str	r3, [r7, #4]
}
 8014178:	bf00      	nop
 801417a:	e7fe      	b.n	801417a <vTaskSwitchContext+0x3e>
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	3b01      	subs	r3, #1
 8014180:	60fb      	str	r3, [r7, #12]
 8014182:	491b      	ldr	r1, [pc, #108]	; (80141f0 <vTaskSwitchContext+0xb4>)
 8014184:	68fa      	ldr	r2, [r7, #12]
 8014186:	4613      	mov	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	4413      	add	r3, r2
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	440b      	add	r3, r1
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d0e4      	beq.n	8014160 <vTaskSwitchContext+0x24>
 8014196:	68fa      	ldr	r2, [r7, #12]
 8014198:	4613      	mov	r3, r2
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4413      	add	r3, r2
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	4a13      	ldr	r2, [pc, #76]	; (80141f0 <vTaskSwitchContext+0xb4>)
 80141a2:	4413      	add	r3, r2
 80141a4:	60bb      	str	r3, [r7, #8]
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	685a      	ldr	r2, [r3, #4]
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	605a      	str	r2, [r3, #4]
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	685a      	ldr	r2, [r3, #4]
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	3308      	adds	r3, #8
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d104      	bne.n	80141c6 <vTaskSwitchContext+0x8a>
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	685a      	ldr	r2, [r3, #4]
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	605a      	str	r2, [r3, #4]
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	4a09      	ldr	r2, [pc, #36]	; (80141f4 <vTaskSwitchContext+0xb8>)
 80141ce:	6013      	str	r3, [r2, #0]
 80141d0:	4a06      	ldr	r2, [pc, #24]	; (80141ec <vTaskSwitchContext+0xb0>)
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	6013      	str	r3, [r2, #0]
}
 80141d6:	bf00      	nop
 80141d8:	3714      	adds	r7, #20
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr
 80141e2:	bf00      	nop
 80141e4:	24001834 	.word	0x24001834
 80141e8:	24001820 	.word	0x24001820
 80141ec:	24001814 	.word	0x24001814
 80141f0:	2400133c 	.word	0x2400133c
 80141f4:	24001338 	.word	0x24001338

080141f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b084      	sub	sp, #16
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d10a      	bne.n	801421e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420c:	f383 8811 	msr	BASEPRI, r3
 8014210:	f3bf 8f6f 	isb	sy
 8014214:	f3bf 8f4f 	dsb	sy
 8014218:	60fb      	str	r3, [r7, #12]
}
 801421a:	bf00      	nop
 801421c:	e7fe      	b.n	801421c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801421e:	4b07      	ldr	r3, [pc, #28]	; (801423c <vTaskPlaceOnEventList+0x44>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	3318      	adds	r3, #24
 8014224:	4619      	mov	r1, r3
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f7fe fd6d 	bl	8012d06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801422c:	2101      	movs	r1, #1
 801422e:	6838      	ldr	r0, [r7, #0]
 8014230:	f000 fb32 	bl	8014898 <prvAddCurrentTaskToDelayedList>
}
 8014234:	bf00      	nop
 8014236:	3710      	adds	r7, #16
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}
 801423c:	24001338 	.word	0x24001338

08014240 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b086      	sub	sp, #24
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10a      	bne.n	8014268 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014256:	f383 8811 	msr	BASEPRI, r3
 801425a:	f3bf 8f6f 	isb	sy
 801425e:	f3bf 8f4f 	dsb	sy
 8014262:	617b      	str	r3, [r7, #20]
}
 8014264:	bf00      	nop
 8014266:	e7fe      	b.n	8014266 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014268:	4b11      	ldr	r3, [pc, #68]	; (80142b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d10a      	bne.n	8014286 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	613b      	str	r3, [r7, #16]
}
 8014282:	bf00      	nop
 8014284:	e7fe      	b.n	8014284 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014286:	4b0b      	ldr	r3, [pc, #44]	; (80142b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	68ba      	ldr	r2, [r7, #8]
 801428c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014290:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014292:	4b08      	ldr	r3, [pc, #32]	; (80142b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	3318      	adds	r3, #24
 8014298:	4619      	mov	r1, r3
 801429a:	68f8      	ldr	r0, [r7, #12]
 801429c:	f7fe fd0f 	bl	8012cbe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80142a0:	2101      	movs	r1, #1
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f000 faf8 	bl	8014898 <prvAddCurrentTaskToDelayedList>
}
 80142a8:	bf00      	nop
 80142aa:	3718      	adds	r7, #24
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}
 80142b0:	24001834 	.word	0x24001834
 80142b4:	24001338 	.word	0x24001338

080142b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b086      	sub	sp, #24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d10a      	bne.n	80142e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80142ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ce:	f383 8811 	msr	BASEPRI, r3
 80142d2:	f3bf 8f6f 	isb	sy
 80142d6:	f3bf 8f4f 	dsb	sy
 80142da:	617b      	str	r3, [r7, #20]
}
 80142dc:	bf00      	nop
 80142de:	e7fe      	b.n	80142de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142e0:	4b0a      	ldr	r3, [pc, #40]	; (801430c <vTaskPlaceOnEventListRestricted+0x54>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	3318      	adds	r3, #24
 80142e6:	4619      	mov	r1, r3
 80142e8:	68f8      	ldr	r0, [r7, #12]
 80142ea:	f7fe fce8 	bl	8012cbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d002      	beq.n	80142fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80142f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80142fa:	6879      	ldr	r1, [r7, #4]
 80142fc:	68b8      	ldr	r0, [r7, #8]
 80142fe:	f000 facb 	bl	8014898 <prvAddCurrentTaskToDelayedList>
	}
 8014302:	bf00      	nop
 8014304:	3718      	adds	r7, #24
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	24001338 	.word	0x24001338

08014310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b086      	sub	sp, #24
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d10a      	bne.n	801433c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	60fb      	str	r3, [r7, #12]
}
 8014338:	bf00      	nop
 801433a:	e7fe      	b.n	801433a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	3318      	adds	r3, #24
 8014340:	4618      	mov	r0, r3
 8014342:	f7fe fd19 	bl	8012d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014346:	4b1e      	ldr	r3, [pc, #120]	; (80143c0 <xTaskRemoveFromEventList+0xb0>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d11d      	bne.n	801438a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	3304      	adds	r3, #4
 8014352:	4618      	mov	r0, r3
 8014354:	f7fe fd10 	bl	8012d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801435c:	4b19      	ldr	r3, [pc, #100]	; (80143c4 <xTaskRemoveFromEventList+0xb4>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	429a      	cmp	r2, r3
 8014362:	d903      	bls.n	801436c <xTaskRemoveFromEventList+0x5c>
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014368:	4a16      	ldr	r2, [pc, #88]	; (80143c4 <xTaskRemoveFromEventList+0xb4>)
 801436a:	6013      	str	r3, [r2, #0]
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014370:	4613      	mov	r3, r2
 8014372:	009b      	lsls	r3, r3, #2
 8014374:	4413      	add	r3, r2
 8014376:	009b      	lsls	r3, r3, #2
 8014378:	4a13      	ldr	r2, [pc, #76]	; (80143c8 <xTaskRemoveFromEventList+0xb8>)
 801437a:	441a      	add	r2, r3
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	3304      	adds	r3, #4
 8014380:	4619      	mov	r1, r3
 8014382:	4610      	mov	r0, r2
 8014384:	f7fe fc9b 	bl	8012cbe <vListInsertEnd>
 8014388:	e005      	b.n	8014396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	3318      	adds	r3, #24
 801438e:	4619      	mov	r1, r3
 8014390:	480e      	ldr	r0, [pc, #56]	; (80143cc <xTaskRemoveFromEventList+0xbc>)
 8014392:	f7fe fc94 	bl	8012cbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801439a:	4b0d      	ldr	r3, [pc, #52]	; (80143d0 <xTaskRemoveFromEventList+0xc0>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d905      	bls.n	80143b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80143a4:	2301      	movs	r3, #1
 80143a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80143a8:	4b0a      	ldr	r3, [pc, #40]	; (80143d4 <xTaskRemoveFromEventList+0xc4>)
 80143aa:	2201      	movs	r2, #1
 80143ac:	601a      	str	r2, [r3, #0]
 80143ae:	e001      	b.n	80143b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80143b0:	2300      	movs	r3, #0
 80143b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80143b4:	697b      	ldr	r3, [r7, #20]
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3718      	adds	r7, #24
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	24001834 	.word	0x24001834
 80143c4:	24001814 	.word	0x24001814
 80143c8:	2400133c 	.word	0x2400133c
 80143cc:	240017cc 	.word	0x240017cc
 80143d0:	24001338 	.word	0x24001338
 80143d4:	24001820 	.word	0x24001820

080143d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80143e2:	4b29      	ldr	r3, [pc, #164]	; (8014488 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d10a      	bne.n	8014400 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80143ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ee:	f383 8811 	msr	BASEPRI, r3
 80143f2:	f3bf 8f6f 	isb	sy
 80143f6:	f3bf 8f4f 	dsb	sy
 80143fa:	613b      	str	r3, [r7, #16]
}
 80143fc:	bf00      	nop
 80143fe:	e7fe      	b.n	80143fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	68db      	ldr	r3, [r3, #12]
 801440e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014410:	697b      	ldr	r3, [r7, #20]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d10a      	bne.n	801442c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801441a:	f383 8811 	msr	BASEPRI, r3
 801441e:	f3bf 8f6f 	isb	sy
 8014422:	f3bf 8f4f 	dsb	sy
 8014426:	60fb      	str	r3, [r7, #12]
}
 8014428:	bf00      	nop
 801442a:	e7fe      	b.n	801442a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f7fe fca3 	bl	8012d78 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	3304      	adds	r3, #4
 8014436:	4618      	mov	r0, r3
 8014438:	f7fe fc9e 	bl	8012d78 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014440:	4b12      	ldr	r3, [pc, #72]	; (801448c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	429a      	cmp	r2, r3
 8014446:	d903      	bls.n	8014450 <vTaskRemoveFromUnorderedEventList+0x78>
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801444c:	4a0f      	ldr	r2, [pc, #60]	; (801448c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801444e:	6013      	str	r3, [r2, #0]
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014454:	4613      	mov	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	4413      	add	r3, r2
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	4a0c      	ldr	r2, [pc, #48]	; (8014490 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801445e:	441a      	add	r2, r3
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	3304      	adds	r3, #4
 8014464:	4619      	mov	r1, r3
 8014466:	4610      	mov	r0, r2
 8014468:	f7fe fc29 	bl	8012cbe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014470:	4b08      	ldr	r3, [pc, #32]	; (8014494 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014476:	429a      	cmp	r2, r3
 8014478:	d902      	bls.n	8014480 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801447a:	4b07      	ldr	r3, [pc, #28]	; (8014498 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801447c:	2201      	movs	r2, #1
 801447e:	601a      	str	r2, [r3, #0]
	}
}
 8014480:	bf00      	nop
 8014482:	3718      	adds	r7, #24
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	24001834 	.word	0x24001834
 801448c:	24001814 	.word	0x24001814
 8014490:	2400133c 	.word	0x2400133c
 8014494:	24001338 	.word	0x24001338
 8014498:	24001820 	.word	0x24001820

0801449c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80144a4:	4b06      	ldr	r3, [pc, #24]	; (80144c0 <vTaskInternalSetTimeOutState+0x24>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80144ac:	4b05      	ldr	r3, [pc, #20]	; (80144c4 <vTaskInternalSetTimeOutState+0x28>)
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	605a      	str	r2, [r3, #4]
}
 80144b4:	bf00      	nop
 80144b6:	370c      	adds	r7, #12
 80144b8:	46bd      	mov	sp, r7
 80144ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144be:	4770      	bx	lr
 80144c0:	24001824 	.word	0x24001824
 80144c4:	24001810 	.word	0x24001810

080144c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b088      	sub	sp, #32
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d10a      	bne.n	80144ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80144d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144dc:	f383 8811 	msr	BASEPRI, r3
 80144e0:	f3bf 8f6f 	isb	sy
 80144e4:	f3bf 8f4f 	dsb	sy
 80144e8:	613b      	str	r3, [r7, #16]
}
 80144ea:	bf00      	nop
 80144ec:	e7fe      	b.n	80144ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d10a      	bne.n	801450a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80144f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f8:	f383 8811 	msr	BASEPRI, r3
 80144fc:	f3bf 8f6f 	isb	sy
 8014500:	f3bf 8f4f 	dsb	sy
 8014504:	60fb      	str	r3, [r7, #12]
}
 8014506:	bf00      	nop
 8014508:	e7fe      	b.n	8014508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801450a:	f000 feb3 	bl	8015274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801450e:	4b1d      	ldr	r3, [pc, #116]	; (8014584 <xTaskCheckForTimeOut+0xbc>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	69ba      	ldr	r2, [r7, #24]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014526:	d102      	bne.n	801452e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014528:	2300      	movs	r3, #0
 801452a:	61fb      	str	r3, [r7, #28]
 801452c:	e023      	b.n	8014576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681a      	ldr	r2, [r3, #0]
 8014532:	4b15      	ldr	r3, [pc, #84]	; (8014588 <xTaskCheckForTimeOut+0xc0>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	429a      	cmp	r2, r3
 8014538:	d007      	beq.n	801454a <xTaskCheckForTimeOut+0x82>
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	69ba      	ldr	r2, [r7, #24]
 8014540:	429a      	cmp	r2, r3
 8014542:	d302      	bcc.n	801454a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014544:	2301      	movs	r3, #1
 8014546:	61fb      	str	r3, [r7, #28]
 8014548:	e015      	b.n	8014576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	697a      	ldr	r2, [r7, #20]
 8014550:	429a      	cmp	r2, r3
 8014552:	d20b      	bcs.n	801456c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	681a      	ldr	r2, [r3, #0]
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	1ad2      	subs	r2, r2, r3
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f7ff ff9b 	bl	801449c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014566:	2300      	movs	r3, #0
 8014568:	61fb      	str	r3, [r7, #28]
 801456a:	e004      	b.n	8014576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	2200      	movs	r2, #0
 8014570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014572:	2301      	movs	r3, #1
 8014574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014576:	f000 fead 	bl	80152d4 <vPortExitCritical>

	return xReturn;
 801457a:	69fb      	ldr	r3, [r7, #28]
}
 801457c:	4618      	mov	r0, r3
 801457e:	3720      	adds	r7, #32
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	24001810 	.word	0x24001810
 8014588:	24001824 	.word	0x24001824

0801458c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801458c:	b480      	push	{r7}
 801458e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014590:	4b03      	ldr	r3, [pc, #12]	; (80145a0 <vTaskMissedYield+0x14>)
 8014592:	2201      	movs	r2, #1
 8014594:	601a      	str	r2, [r3, #0]
}
 8014596:	bf00      	nop
 8014598:	46bd      	mov	sp, r7
 801459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459e:	4770      	bx	lr
 80145a0:	24001820 	.word	0x24001820

080145a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80145ac:	f000 f852 	bl	8014654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80145b0:	4b06      	ldr	r3, [pc, #24]	; (80145cc <prvIdleTask+0x28>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d9f9      	bls.n	80145ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80145b8:	4b05      	ldr	r3, [pc, #20]	; (80145d0 <prvIdleTask+0x2c>)
 80145ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145be:	601a      	str	r2, [r3, #0]
 80145c0:	f3bf 8f4f 	dsb	sy
 80145c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80145c8:	e7f0      	b.n	80145ac <prvIdleTask+0x8>
 80145ca:	bf00      	nop
 80145cc:	2400133c 	.word	0x2400133c
 80145d0:	e000ed04 	.word	0xe000ed04

080145d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145da:	2300      	movs	r3, #0
 80145dc:	607b      	str	r3, [r7, #4]
 80145de:	e00c      	b.n	80145fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80145e0:	687a      	ldr	r2, [r7, #4]
 80145e2:	4613      	mov	r3, r2
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	4413      	add	r3, r2
 80145e8:	009b      	lsls	r3, r3, #2
 80145ea:	4a12      	ldr	r2, [pc, #72]	; (8014634 <prvInitialiseTaskLists+0x60>)
 80145ec:	4413      	add	r3, r2
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fe fb38 	bl	8012c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	3301      	adds	r3, #1
 80145f8:	607b      	str	r3, [r7, #4]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2b37      	cmp	r3, #55	; 0x37
 80145fe:	d9ef      	bls.n	80145e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014600:	480d      	ldr	r0, [pc, #52]	; (8014638 <prvInitialiseTaskLists+0x64>)
 8014602:	f7fe fb2f 	bl	8012c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014606:	480d      	ldr	r0, [pc, #52]	; (801463c <prvInitialiseTaskLists+0x68>)
 8014608:	f7fe fb2c 	bl	8012c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801460c:	480c      	ldr	r0, [pc, #48]	; (8014640 <prvInitialiseTaskLists+0x6c>)
 801460e:	f7fe fb29 	bl	8012c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014612:	480c      	ldr	r0, [pc, #48]	; (8014644 <prvInitialiseTaskLists+0x70>)
 8014614:	f7fe fb26 	bl	8012c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014618:	480b      	ldr	r0, [pc, #44]	; (8014648 <prvInitialiseTaskLists+0x74>)
 801461a:	f7fe fb23 	bl	8012c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801461e:	4b0b      	ldr	r3, [pc, #44]	; (801464c <prvInitialiseTaskLists+0x78>)
 8014620:	4a05      	ldr	r2, [pc, #20]	; (8014638 <prvInitialiseTaskLists+0x64>)
 8014622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014624:	4b0a      	ldr	r3, [pc, #40]	; (8014650 <prvInitialiseTaskLists+0x7c>)
 8014626:	4a05      	ldr	r2, [pc, #20]	; (801463c <prvInitialiseTaskLists+0x68>)
 8014628:	601a      	str	r2, [r3, #0]
}
 801462a:	bf00      	nop
 801462c:	3708      	adds	r7, #8
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
 8014632:	bf00      	nop
 8014634:	2400133c 	.word	0x2400133c
 8014638:	2400179c 	.word	0x2400179c
 801463c:	240017b0 	.word	0x240017b0
 8014640:	240017cc 	.word	0x240017cc
 8014644:	240017e0 	.word	0x240017e0
 8014648:	240017f8 	.word	0x240017f8
 801464c:	240017c4 	.word	0x240017c4
 8014650:	240017c8 	.word	0x240017c8

08014654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801465a:	e019      	b.n	8014690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801465c:	f000 fe0a 	bl	8015274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014660:	4b10      	ldr	r3, [pc, #64]	; (80146a4 <prvCheckTasksWaitingTermination+0x50>)
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	3304      	adds	r3, #4
 801466c:	4618      	mov	r0, r3
 801466e:	f7fe fb83 	bl	8012d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014672:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <prvCheckTasksWaitingTermination+0x54>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	3b01      	subs	r3, #1
 8014678:	4a0b      	ldr	r2, [pc, #44]	; (80146a8 <prvCheckTasksWaitingTermination+0x54>)
 801467a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801467c:	4b0b      	ldr	r3, [pc, #44]	; (80146ac <prvCheckTasksWaitingTermination+0x58>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	3b01      	subs	r3, #1
 8014682:	4a0a      	ldr	r2, [pc, #40]	; (80146ac <prvCheckTasksWaitingTermination+0x58>)
 8014684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014686:	f000 fe25 	bl	80152d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f000 f810 	bl	80146b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014690:	4b06      	ldr	r3, [pc, #24]	; (80146ac <prvCheckTasksWaitingTermination+0x58>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d1e1      	bne.n	801465c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014698:	bf00      	nop
 801469a:	bf00      	nop
 801469c:	3708      	adds	r7, #8
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	240017e0 	.word	0x240017e0
 80146a8:	2400180c 	.word	0x2400180c
 80146ac:	240017f4 	.word	0x240017f4

080146b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d108      	bne.n	80146d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146c6:	4618      	mov	r0, r3
 80146c8:	f000 ffc2 	bl	8015650 <vPortFree>
				vPortFree( pxTCB );
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f000 ffbf 	bl	8015650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80146d2:	e018      	b.n	8014706 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d103      	bne.n	80146e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 ffb6 	bl	8015650 <vPortFree>
	}
 80146e4:	e00f      	b.n	8014706 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	d00a      	beq.n	8014706 <prvDeleteTCB+0x56>
	__asm volatile
 80146f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f4:	f383 8811 	msr	BASEPRI, r3
 80146f8:	f3bf 8f6f 	isb	sy
 80146fc:	f3bf 8f4f 	dsb	sy
 8014700:	60fb      	str	r3, [r7, #12]
}
 8014702:	bf00      	nop
 8014704:	e7fe      	b.n	8014704 <prvDeleteTCB+0x54>
	}
 8014706:	bf00      	nop
 8014708:	3710      	adds	r7, #16
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
	...

08014710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014710:	b480      	push	{r7}
 8014712:	b083      	sub	sp, #12
 8014714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014716:	4b0c      	ldr	r3, [pc, #48]	; (8014748 <prvResetNextTaskUnblockTime+0x38>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d104      	bne.n	801472a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014720:	4b0a      	ldr	r3, [pc, #40]	; (801474c <prvResetNextTaskUnblockTime+0x3c>)
 8014722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014728:	e008      	b.n	801473c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801472a:	4b07      	ldr	r3, [pc, #28]	; (8014748 <prvResetNextTaskUnblockTime+0x38>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	685b      	ldr	r3, [r3, #4]
 8014738:	4a04      	ldr	r2, [pc, #16]	; (801474c <prvResetNextTaskUnblockTime+0x3c>)
 801473a:	6013      	str	r3, [r2, #0]
}
 801473c:	bf00      	nop
 801473e:	370c      	adds	r7, #12
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr
 8014748:	240017c4 	.word	0x240017c4
 801474c:	2400182c 	.word	0x2400182c

08014750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014750:	b480      	push	{r7}
 8014752:	b083      	sub	sp, #12
 8014754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014756:	4b0b      	ldr	r3, [pc, #44]	; (8014784 <xTaskGetSchedulerState+0x34>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d102      	bne.n	8014764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801475e:	2301      	movs	r3, #1
 8014760:	607b      	str	r3, [r7, #4]
 8014762:	e008      	b.n	8014776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014764:	4b08      	ldr	r3, [pc, #32]	; (8014788 <xTaskGetSchedulerState+0x38>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d102      	bne.n	8014772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801476c:	2302      	movs	r3, #2
 801476e:	607b      	str	r3, [r7, #4]
 8014770:	e001      	b.n	8014776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014772:	2300      	movs	r3, #0
 8014774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014776:	687b      	ldr	r3, [r7, #4]
	}
 8014778:	4618      	mov	r0, r3
 801477a:	370c      	adds	r7, #12
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr
 8014784:	24001818 	.word	0x24001818
 8014788:	24001834 	.word	0x24001834

0801478c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801478c:	b580      	push	{r7, lr}
 801478e:	b086      	sub	sp, #24
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014798:	2300      	movs	r3, #0
 801479a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d056      	beq.n	8014850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80147a2:	4b2e      	ldr	r3, [pc, #184]	; (801485c <xTaskPriorityDisinherit+0xd0>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	693a      	ldr	r2, [r7, #16]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d00a      	beq.n	80147c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80147ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b0:	f383 8811 	msr	BASEPRI, r3
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	f3bf 8f4f 	dsb	sy
 80147bc:	60fb      	str	r3, [r7, #12]
}
 80147be:	bf00      	nop
 80147c0:	e7fe      	b.n	80147c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d10a      	bne.n	80147e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80147ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ce:	f383 8811 	msr	BASEPRI, r3
 80147d2:	f3bf 8f6f 	isb	sy
 80147d6:	f3bf 8f4f 	dsb	sy
 80147da:	60bb      	str	r3, [r7, #8]
}
 80147dc:	bf00      	nop
 80147de:	e7fe      	b.n	80147de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147e4:	1e5a      	subs	r2, r3, #1
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d02c      	beq.n	8014850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d128      	bne.n	8014850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	3304      	adds	r3, #4
 8014802:	4618      	mov	r0, r3
 8014804:	f7fe fab8 	bl	8012d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014820:	4b0f      	ldr	r3, [pc, #60]	; (8014860 <xTaskPriorityDisinherit+0xd4>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	429a      	cmp	r2, r3
 8014826:	d903      	bls.n	8014830 <xTaskPriorityDisinherit+0xa4>
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801482c:	4a0c      	ldr	r2, [pc, #48]	; (8014860 <xTaskPriorityDisinherit+0xd4>)
 801482e:	6013      	str	r3, [r2, #0]
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014834:	4613      	mov	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4413      	add	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	4a09      	ldr	r2, [pc, #36]	; (8014864 <xTaskPriorityDisinherit+0xd8>)
 801483e:	441a      	add	r2, r3
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	3304      	adds	r3, #4
 8014844:	4619      	mov	r1, r3
 8014846:	4610      	mov	r0, r2
 8014848:	f7fe fa39 	bl	8012cbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801484c:	2301      	movs	r3, #1
 801484e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014850:	697b      	ldr	r3, [r7, #20]
	}
 8014852:	4618      	mov	r0, r3
 8014854:	3718      	adds	r7, #24
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}
 801485a:	bf00      	nop
 801485c:	24001338 	.word	0x24001338
 8014860:	24001814 	.word	0x24001814
 8014864:	2400133c 	.word	0x2400133c

08014868 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801486e:	4b09      	ldr	r3, [pc, #36]	; (8014894 <uxTaskResetEventItemValue+0x2c>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	699b      	ldr	r3, [r3, #24]
 8014874:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014876:	4b07      	ldr	r3, [pc, #28]	; (8014894 <uxTaskResetEventItemValue+0x2c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801487c:	4b05      	ldr	r3, [pc, #20]	; (8014894 <uxTaskResetEventItemValue+0x2c>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014884:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014886:	687b      	ldr	r3, [r7, #4]
}
 8014888:	4618      	mov	r0, r3
 801488a:	370c      	adds	r7, #12
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr
 8014894:	24001338 	.word	0x24001338

08014898 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b084      	sub	sp, #16
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80148a2:	4b21      	ldr	r3, [pc, #132]	; (8014928 <prvAddCurrentTaskToDelayedList+0x90>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148a8:	4b20      	ldr	r3, [pc, #128]	; (801492c <prvAddCurrentTaskToDelayedList+0x94>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	3304      	adds	r3, #4
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7fe fa62 	bl	8012d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148ba:	d10a      	bne.n	80148d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d007      	beq.n	80148d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148c2:	4b1a      	ldr	r3, [pc, #104]	; (801492c <prvAddCurrentTaskToDelayedList+0x94>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	3304      	adds	r3, #4
 80148c8:	4619      	mov	r1, r3
 80148ca:	4819      	ldr	r0, [pc, #100]	; (8014930 <prvAddCurrentTaskToDelayedList+0x98>)
 80148cc:	f7fe f9f7 	bl	8012cbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80148d0:	e026      	b.n	8014920 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80148d2:	68fa      	ldr	r2, [r7, #12]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	4413      	add	r3, r2
 80148d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80148da:	4b14      	ldr	r3, [pc, #80]	; (801492c <prvAddCurrentTaskToDelayedList+0x94>)
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80148e2:	68ba      	ldr	r2, [r7, #8]
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d209      	bcs.n	80148fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148ea:	4b12      	ldr	r3, [pc, #72]	; (8014934 <prvAddCurrentTaskToDelayedList+0x9c>)
 80148ec:	681a      	ldr	r2, [r3, #0]
 80148ee:	4b0f      	ldr	r3, [pc, #60]	; (801492c <prvAddCurrentTaskToDelayedList+0x94>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	3304      	adds	r3, #4
 80148f4:	4619      	mov	r1, r3
 80148f6:	4610      	mov	r0, r2
 80148f8:	f7fe fa05 	bl	8012d06 <vListInsert>
}
 80148fc:	e010      	b.n	8014920 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148fe:	4b0e      	ldr	r3, [pc, #56]	; (8014938 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	4b0a      	ldr	r3, [pc, #40]	; (801492c <prvAddCurrentTaskToDelayedList+0x94>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	3304      	adds	r3, #4
 8014908:	4619      	mov	r1, r3
 801490a:	4610      	mov	r0, r2
 801490c:	f7fe f9fb 	bl	8012d06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014910:	4b0a      	ldr	r3, [pc, #40]	; (801493c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	68ba      	ldr	r2, [r7, #8]
 8014916:	429a      	cmp	r2, r3
 8014918:	d202      	bcs.n	8014920 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801491a:	4a08      	ldr	r2, [pc, #32]	; (801493c <prvAddCurrentTaskToDelayedList+0xa4>)
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	6013      	str	r3, [r2, #0]
}
 8014920:	bf00      	nop
 8014922:	3710      	adds	r7, #16
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	24001810 	.word	0x24001810
 801492c:	24001338 	.word	0x24001338
 8014930:	240017f8 	.word	0x240017f8
 8014934:	240017c8 	.word	0x240017c8
 8014938:	240017c4 	.word	0x240017c4
 801493c:	2400182c 	.word	0x2400182c

08014940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b08a      	sub	sp, #40	; 0x28
 8014944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014946:	2300      	movs	r3, #0
 8014948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801494a:	f000 fb07 	bl	8014f5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801494e:	4b1c      	ldr	r3, [pc, #112]	; (80149c0 <xTimerCreateTimerTask+0x80>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d021      	beq.n	801499a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014956:	2300      	movs	r3, #0
 8014958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801495a:	2300      	movs	r3, #0
 801495c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801495e:	1d3a      	adds	r2, r7, #4
 8014960:	f107 0108 	add.w	r1, r7, #8
 8014964:	f107 030c 	add.w	r3, r7, #12
 8014968:	4618      	mov	r0, r3
 801496a:	f7fd ff73 	bl	8012854 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801496e:	6879      	ldr	r1, [r7, #4]
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	9202      	str	r2, [sp, #8]
 8014976:	9301      	str	r3, [sp, #4]
 8014978:	2302      	movs	r3, #2
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	2300      	movs	r3, #0
 801497e:	460a      	mov	r2, r1
 8014980:	4910      	ldr	r1, [pc, #64]	; (80149c4 <xTimerCreateTimerTask+0x84>)
 8014982:	4811      	ldr	r0, [pc, #68]	; (80149c8 <xTimerCreateTimerTask+0x88>)
 8014984:	f7fe ff0e 	bl	80137a4 <xTaskCreateStatic>
 8014988:	4603      	mov	r3, r0
 801498a:	4a10      	ldr	r2, [pc, #64]	; (80149cc <xTimerCreateTimerTask+0x8c>)
 801498c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801498e:	4b0f      	ldr	r3, [pc, #60]	; (80149cc <xTimerCreateTimerTask+0x8c>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d001      	beq.n	801499a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014996:	2301      	movs	r3, #1
 8014998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d10a      	bne.n	80149b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80149a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a4:	f383 8811 	msr	BASEPRI, r3
 80149a8:	f3bf 8f6f 	isb	sy
 80149ac:	f3bf 8f4f 	dsb	sy
 80149b0:	613b      	str	r3, [r7, #16]
}
 80149b2:	bf00      	nop
 80149b4:	e7fe      	b.n	80149b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80149b6:	697b      	ldr	r3, [r7, #20]
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3718      	adds	r7, #24
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	24001868 	.word	0x24001868
 80149c4:	08016594 	.word	0x08016594
 80149c8:	08014b05 	.word	0x08014b05
 80149cc:	2400186c 	.word	0x2400186c

080149d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b08a      	sub	sp, #40	; 0x28
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	60b9      	str	r1, [r7, #8]
 80149da:	607a      	str	r2, [r7, #4]
 80149dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80149de:	2300      	movs	r3, #0
 80149e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d10a      	bne.n	80149fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80149e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ec:	f383 8811 	msr	BASEPRI, r3
 80149f0:	f3bf 8f6f 	isb	sy
 80149f4:	f3bf 8f4f 	dsb	sy
 80149f8:	623b      	str	r3, [r7, #32]
}
 80149fa:	bf00      	nop
 80149fc:	e7fe      	b.n	80149fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80149fe:	4b1a      	ldr	r3, [pc, #104]	; (8014a68 <xTimerGenericCommand+0x98>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d02a      	beq.n	8014a5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	2b05      	cmp	r3, #5
 8014a16:	dc18      	bgt.n	8014a4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014a18:	f7ff fe9a 	bl	8014750 <xTaskGetSchedulerState>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	2b02      	cmp	r3, #2
 8014a20:	d109      	bne.n	8014a36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014a22:	4b11      	ldr	r3, [pc, #68]	; (8014a68 <xTimerGenericCommand+0x98>)
 8014a24:	6818      	ldr	r0, [r3, #0]
 8014a26:	f107 0110 	add.w	r1, r7, #16
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a2e:	f7fe fad1 	bl	8012fd4 <xQueueGenericSend>
 8014a32:	6278      	str	r0, [r7, #36]	; 0x24
 8014a34:	e012      	b.n	8014a5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014a36:	4b0c      	ldr	r3, [pc, #48]	; (8014a68 <xTimerGenericCommand+0x98>)
 8014a38:	6818      	ldr	r0, [r3, #0]
 8014a3a:	f107 0110 	add.w	r1, r7, #16
 8014a3e:	2300      	movs	r3, #0
 8014a40:	2200      	movs	r2, #0
 8014a42:	f7fe fac7 	bl	8012fd4 <xQueueGenericSend>
 8014a46:	6278      	str	r0, [r7, #36]	; 0x24
 8014a48:	e008      	b.n	8014a5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014a4a:	4b07      	ldr	r3, [pc, #28]	; (8014a68 <xTimerGenericCommand+0x98>)
 8014a4c:	6818      	ldr	r0, [r3, #0]
 8014a4e:	f107 0110 	add.w	r1, r7, #16
 8014a52:	2300      	movs	r3, #0
 8014a54:	683a      	ldr	r2, [r7, #0]
 8014a56:	f7fe fbbb 	bl	80131d0 <xQueueGenericSendFromISR>
 8014a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3728      	adds	r7, #40	; 0x28
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	24001868 	.word	0x24001868

08014a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b088      	sub	sp, #32
 8014a70:	af02      	add	r7, sp, #8
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a76:	4b22      	ldr	r3, [pc, #136]	; (8014b00 <prvProcessExpiredTimer+0x94>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	68db      	ldr	r3, [r3, #12]
 8014a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	3304      	adds	r3, #4
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7fe f977 	bl	8012d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a90:	f003 0304 	and.w	r3, r3, #4
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d022      	beq.n	8014ade <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	699a      	ldr	r2, [r3, #24]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	18d1      	adds	r1, r2, r3
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	683a      	ldr	r2, [r7, #0]
 8014aa4:	6978      	ldr	r0, [r7, #20]
 8014aa6:	f000 f8d1 	bl	8014c4c <prvInsertTimerInActiveList>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d01f      	beq.n	8014af0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	9300      	str	r3, [sp, #0]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	2100      	movs	r1, #0
 8014aba:	6978      	ldr	r0, [r7, #20]
 8014abc:	f7ff ff88 	bl	80149d0 <xTimerGenericCommand>
 8014ac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014ac2:	693b      	ldr	r3, [r7, #16]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d113      	bne.n	8014af0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014acc:	f383 8811 	msr	BASEPRI, r3
 8014ad0:	f3bf 8f6f 	isb	sy
 8014ad4:	f3bf 8f4f 	dsb	sy
 8014ad8:	60fb      	str	r3, [r7, #12]
}
 8014ada:	bf00      	nop
 8014adc:	e7fe      	b.n	8014adc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ae4:	f023 0301 	bic.w	r3, r3, #1
 8014ae8:	b2da      	uxtb	r2, r3
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	6a1b      	ldr	r3, [r3, #32]
 8014af4:	6978      	ldr	r0, [r7, #20]
 8014af6:	4798      	blx	r3
}
 8014af8:	bf00      	nop
 8014afa:	3718      	adds	r7, #24
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	24001860 	.word	0x24001860

08014b04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b0c:	f107 0308 	add.w	r3, r7, #8
 8014b10:	4618      	mov	r0, r3
 8014b12:	f000 f857 	bl	8014bc4 <prvGetNextExpireTime>
 8014b16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f000 f803 	bl	8014b28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014b22:	f000 f8d5 	bl	8014cd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b26:	e7f1      	b.n	8014b0c <prvTimerTask+0x8>

08014b28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b084      	sub	sp, #16
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014b32:	f7ff f98d 	bl	8013e50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014b36:	f107 0308 	add.w	r3, r7, #8
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f000 f866 	bl	8014c0c <prvSampleTimeNow>
 8014b40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d130      	bne.n	8014baa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d10a      	bne.n	8014b64 <prvProcessTimerOrBlockTask+0x3c>
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	429a      	cmp	r2, r3
 8014b54:	d806      	bhi.n	8014b64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014b56:	f7ff f989 	bl	8013e6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014b5a:	68f9      	ldr	r1, [r7, #12]
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f7ff ff85 	bl	8014a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014b62:	e024      	b.n	8014bae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d008      	beq.n	8014b7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014b6a:	4b13      	ldr	r3, [pc, #76]	; (8014bb8 <prvProcessTimerOrBlockTask+0x90>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d101      	bne.n	8014b78 <prvProcessTimerOrBlockTask+0x50>
 8014b74:	2301      	movs	r3, #1
 8014b76:	e000      	b.n	8014b7a <prvProcessTimerOrBlockTask+0x52>
 8014b78:	2300      	movs	r3, #0
 8014b7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014b7c:	4b0f      	ldr	r3, [pc, #60]	; (8014bbc <prvProcessTimerOrBlockTask+0x94>)
 8014b7e:	6818      	ldr	r0, [r3, #0]
 8014b80:	687a      	ldr	r2, [r7, #4]
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	1ad3      	subs	r3, r2, r3
 8014b86:	683a      	ldr	r2, [r7, #0]
 8014b88:	4619      	mov	r1, r3
 8014b8a:	f7fe fdd7 	bl	801373c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014b8e:	f7ff f96d 	bl	8013e6c <xTaskResumeAll>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10a      	bne.n	8014bae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014b98:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <prvProcessTimerOrBlockTask+0x98>)
 8014b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b9e:	601a      	str	r2, [r3, #0]
 8014ba0:	f3bf 8f4f 	dsb	sy
 8014ba4:	f3bf 8f6f 	isb	sy
}
 8014ba8:	e001      	b.n	8014bae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014baa:	f7ff f95f 	bl	8013e6c <xTaskResumeAll>
}
 8014bae:	bf00      	nop
 8014bb0:	3710      	adds	r7, #16
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	24001864 	.word	0x24001864
 8014bbc:	24001868 	.word	0x24001868
 8014bc0:	e000ed04 	.word	0xe000ed04

08014bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b085      	sub	sp, #20
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014bcc:	4b0e      	ldr	r3, [pc, #56]	; (8014c08 <prvGetNextExpireTime+0x44>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d101      	bne.n	8014bda <prvGetNextExpireTime+0x16>
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	e000      	b.n	8014bdc <prvGetNextExpireTime+0x18>
 8014bda:	2200      	movs	r2, #0
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d105      	bne.n	8014bf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014be8:	4b07      	ldr	r3, [pc, #28]	; (8014c08 <prvGetNextExpireTime+0x44>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	68db      	ldr	r3, [r3, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	60fb      	str	r3, [r7, #12]
 8014bf2:	e001      	b.n	8014bf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3714      	adds	r7, #20
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c04:	4770      	bx	lr
 8014c06:	bf00      	nop
 8014c08:	24001860 	.word	0x24001860

08014c0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014c14:	f7ff f9c8 	bl	8013fa8 <xTaskGetTickCount>
 8014c18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014c1a:	4b0b      	ldr	r3, [pc, #44]	; (8014c48 <prvSampleTimeNow+0x3c>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d205      	bcs.n	8014c30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014c24:	f000 f936 	bl	8014e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	2201      	movs	r2, #1
 8014c2c:	601a      	str	r2, [r3, #0]
 8014c2e:	e002      	b.n	8014c36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2200      	movs	r2, #0
 8014c34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014c36:	4a04      	ldr	r2, [pc, #16]	; (8014c48 <prvSampleTimeNow+0x3c>)
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3710      	adds	r7, #16
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	24001870 	.word	0x24001870

08014c4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b086      	sub	sp, #24
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
 8014c58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	68ba      	ldr	r2, [r7, #8]
 8014c62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	68fa      	ldr	r2, [r7, #12]
 8014c68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014c6a:	68ba      	ldr	r2, [r7, #8]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d812      	bhi.n	8014c98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	1ad2      	subs	r2, r2, r3
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	699b      	ldr	r3, [r3, #24]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d302      	bcc.n	8014c86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014c80:	2301      	movs	r3, #1
 8014c82:	617b      	str	r3, [r7, #20]
 8014c84:	e01b      	b.n	8014cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014c86:	4b10      	ldr	r3, [pc, #64]	; (8014cc8 <prvInsertTimerInActiveList+0x7c>)
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	3304      	adds	r3, #4
 8014c8e:	4619      	mov	r1, r3
 8014c90:	4610      	mov	r0, r2
 8014c92:	f7fe f838 	bl	8012d06 <vListInsert>
 8014c96:	e012      	b.n	8014cbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d206      	bcs.n	8014cae <prvInsertTimerInActiveList+0x62>
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d302      	bcc.n	8014cae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ca8:	2301      	movs	r3, #1
 8014caa:	617b      	str	r3, [r7, #20]
 8014cac:	e007      	b.n	8014cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014cae:	4b07      	ldr	r3, [pc, #28]	; (8014ccc <prvInsertTimerInActiveList+0x80>)
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	3304      	adds	r3, #4
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	4610      	mov	r0, r2
 8014cba:	f7fe f824 	bl	8012d06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014cbe:	697b      	ldr	r3, [r7, #20]
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3718      	adds	r7, #24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	24001864 	.word	0x24001864
 8014ccc:	24001860 	.word	0x24001860

08014cd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b08e      	sub	sp, #56	; 0x38
 8014cd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014cd6:	e0ca      	b.n	8014e6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	da18      	bge.n	8014d10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014cde:	1d3b      	adds	r3, r7, #4
 8014ce0:	3304      	adds	r3, #4
 8014ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d10a      	bne.n	8014d00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cee:	f383 8811 	msr	BASEPRI, r3
 8014cf2:	f3bf 8f6f 	isb	sy
 8014cf6:	f3bf 8f4f 	dsb	sy
 8014cfa:	61fb      	str	r3, [r7, #28]
}
 8014cfc:	bf00      	nop
 8014cfe:	e7fe      	b.n	8014cfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d06:	6850      	ldr	r0, [r2, #4]
 8014d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d0a:	6892      	ldr	r2, [r2, #8]
 8014d0c:	4611      	mov	r1, r2
 8014d0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	f2c0 80aa 	blt.w	8014e6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d1e:	695b      	ldr	r3, [r3, #20]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d004      	beq.n	8014d2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d26:	3304      	adds	r3, #4
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7fe f825 	bl	8012d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014d2e:	463b      	mov	r3, r7
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7ff ff6b 	bl	8014c0c <prvSampleTimeNow>
 8014d36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b09      	cmp	r3, #9
 8014d3c:	f200 8097 	bhi.w	8014e6e <prvProcessReceivedCommands+0x19e>
 8014d40:	a201      	add	r2, pc, #4	; (adr r2, 8014d48 <prvProcessReceivedCommands+0x78>)
 8014d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d46:	bf00      	nop
 8014d48:	08014d71 	.word	0x08014d71
 8014d4c:	08014d71 	.word	0x08014d71
 8014d50:	08014d71 	.word	0x08014d71
 8014d54:	08014de5 	.word	0x08014de5
 8014d58:	08014df9 	.word	0x08014df9
 8014d5c:	08014e43 	.word	0x08014e43
 8014d60:	08014d71 	.word	0x08014d71
 8014d64:	08014d71 	.word	0x08014d71
 8014d68:	08014de5 	.word	0x08014de5
 8014d6c:	08014df9 	.word	0x08014df9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d76:	f043 0301 	orr.w	r3, r3, #1
 8014d7a:	b2da      	uxtb	r2, r3
 8014d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014d82:	68ba      	ldr	r2, [r7, #8]
 8014d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d86:	699b      	ldr	r3, [r3, #24]
 8014d88:	18d1      	adds	r1, r2, r3
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d90:	f7ff ff5c 	bl	8014c4c <prvInsertTimerInActiveList>
 8014d94:	4603      	mov	r3, r0
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d069      	beq.n	8014e6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d9c:	6a1b      	ldr	r3, [r3, #32]
 8014d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014da0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014da8:	f003 0304 	and.w	r3, r3, #4
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d05e      	beq.n	8014e6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014db0:	68ba      	ldr	r2, [r7, #8]
 8014db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db4:	699b      	ldr	r3, [r3, #24]
 8014db6:	441a      	add	r2, r3
 8014db8:	2300      	movs	r3, #0
 8014dba:	9300      	str	r3, [sp, #0]
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dc2:	f7ff fe05 	bl	80149d0 <xTimerGenericCommand>
 8014dc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014dc8:	6a3b      	ldr	r3, [r7, #32]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d14f      	bne.n	8014e6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd2:	f383 8811 	msr	BASEPRI, r3
 8014dd6:	f3bf 8f6f 	isb	sy
 8014dda:	f3bf 8f4f 	dsb	sy
 8014dde:	61bb      	str	r3, [r7, #24]
}
 8014de0:	bf00      	nop
 8014de2:	e7fe      	b.n	8014de2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dea:	f023 0301 	bic.w	r3, r3, #1
 8014dee:	b2da      	uxtb	r2, r3
 8014df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014df6:	e03a      	b.n	8014e6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dfe:	f043 0301 	orr.w	r3, r3, #1
 8014e02:	b2da      	uxtb	r2, r3
 8014e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014e0a:	68ba      	ldr	r2, [r7, #8]
 8014e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e12:	699b      	ldr	r3, [r3, #24]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d10a      	bne.n	8014e2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e1c:	f383 8811 	msr	BASEPRI, r3
 8014e20:	f3bf 8f6f 	isb	sy
 8014e24:	f3bf 8f4f 	dsb	sy
 8014e28:	617b      	str	r3, [r7, #20]
}
 8014e2a:	bf00      	nop
 8014e2c:	e7fe      	b.n	8014e2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e30:	699a      	ldr	r2, [r3, #24]
 8014e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e34:	18d1      	adds	r1, r2, r3
 8014e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e3c:	f7ff ff06 	bl	8014c4c <prvInsertTimerInActiveList>
					break;
 8014e40:	e015      	b.n	8014e6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e48:	f003 0302 	and.w	r3, r3, #2
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d103      	bne.n	8014e58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e52:	f000 fbfd 	bl	8015650 <vPortFree>
 8014e56:	e00a      	b.n	8014e6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e5e:	f023 0301 	bic.w	r3, r3, #1
 8014e62:	b2da      	uxtb	r2, r3
 8014e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014e6a:	e000      	b.n	8014e6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014e6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014e6e:	4b08      	ldr	r3, [pc, #32]	; (8014e90 <prvProcessReceivedCommands+0x1c0>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	1d39      	adds	r1, r7, #4
 8014e74:	2200      	movs	r2, #0
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fe fa46 	bl	8013308 <xQueueReceive>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	f47f af2a 	bne.w	8014cd8 <prvProcessReceivedCommands+0x8>
	}
}
 8014e84:	bf00      	nop
 8014e86:	bf00      	nop
 8014e88:	3730      	adds	r7, #48	; 0x30
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	24001868 	.word	0x24001868

08014e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b088      	sub	sp, #32
 8014e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014e9a:	e048      	b.n	8014f2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014e9c:	4b2d      	ldr	r3, [pc, #180]	; (8014f54 <prvSwitchTimerLists+0xc0>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	68db      	ldr	r3, [r3, #12]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ea6:	4b2b      	ldr	r3, [pc, #172]	; (8014f54 <prvSwitchTimerLists+0xc0>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	68db      	ldr	r3, [r3, #12]
 8014eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	3304      	adds	r3, #4
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7fd ff5f 	bl	8012d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	6a1b      	ldr	r3, [r3, #32]
 8014ebe:	68f8      	ldr	r0, [r7, #12]
 8014ec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ec8:	f003 0304 	and.w	r3, r3, #4
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d02e      	beq.n	8014f2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	699b      	ldr	r3, [r3, #24]
 8014ed4:	693a      	ldr	r2, [r7, #16]
 8014ed6:	4413      	add	r3, r2
 8014ed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014eda:	68ba      	ldr	r2, [r7, #8]
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d90e      	bls.n	8014f00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014eee:	4b19      	ldr	r3, [pc, #100]	; (8014f54 <prvSwitchTimerLists+0xc0>)
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	3304      	adds	r3, #4
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	4610      	mov	r0, r2
 8014efa:	f7fd ff04 	bl	8012d06 <vListInsert>
 8014efe:	e016      	b.n	8014f2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014f00:	2300      	movs	r3, #0
 8014f02:	9300      	str	r3, [sp, #0]
 8014f04:	2300      	movs	r3, #0
 8014f06:	693a      	ldr	r2, [r7, #16]
 8014f08:	2100      	movs	r1, #0
 8014f0a:	68f8      	ldr	r0, [r7, #12]
 8014f0c:	f7ff fd60 	bl	80149d0 <xTimerGenericCommand>
 8014f10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d10a      	bne.n	8014f2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f1c:	f383 8811 	msr	BASEPRI, r3
 8014f20:	f3bf 8f6f 	isb	sy
 8014f24:	f3bf 8f4f 	dsb	sy
 8014f28:	603b      	str	r3, [r7, #0]
}
 8014f2a:	bf00      	nop
 8014f2c:	e7fe      	b.n	8014f2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014f2e:	4b09      	ldr	r3, [pc, #36]	; (8014f54 <prvSwitchTimerLists+0xc0>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d1b1      	bne.n	8014e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014f38:	4b06      	ldr	r3, [pc, #24]	; (8014f54 <prvSwitchTimerLists+0xc0>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014f3e:	4b06      	ldr	r3, [pc, #24]	; (8014f58 <prvSwitchTimerLists+0xc4>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	4a04      	ldr	r2, [pc, #16]	; (8014f54 <prvSwitchTimerLists+0xc0>)
 8014f44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014f46:	4a04      	ldr	r2, [pc, #16]	; (8014f58 <prvSwitchTimerLists+0xc4>)
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	6013      	str	r3, [r2, #0]
}
 8014f4c:	bf00      	nop
 8014f4e:	3718      	adds	r7, #24
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}
 8014f54:	24001860 	.word	0x24001860
 8014f58:	24001864 	.word	0x24001864

08014f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014f62:	f000 f987 	bl	8015274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014f66:	4b15      	ldr	r3, [pc, #84]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d120      	bne.n	8014fb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014f6e:	4814      	ldr	r0, [pc, #80]	; (8014fc0 <prvCheckForValidListAndQueue+0x64>)
 8014f70:	f7fd fe78 	bl	8012c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014f74:	4813      	ldr	r0, [pc, #76]	; (8014fc4 <prvCheckForValidListAndQueue+0x68>)
 8014f76:	f7fd fe75 	bl	8012c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014f7a:	4b13      	ldr	r3, [pc, #76]	; (8014fc8 <prvCheckForValidListAndQueue+0x6c>)
 8014f7c:	4a10      	ldr	r2, [pc, #64]	; (8014fc0 <prvCheckForValidListAndQueue+0x64>)
 8014f7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014f80:	4b12      	ldr	r3, [pc, #72]	; (8014fcc <prvCheckForValidListAndQueue+0x70>)
 8014f82:	4a10      	ldr	r2, [pc, #64]	; (8014fc4 <prvCheckForValidListAndQueue+0x68>)
 8014f84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014f86:	2300      	movs	r3, #0
 8014f88:	9300      	str	r3, [sp, #0]
 8014f8a:	4b11      	ldr	r3, [pc, #68]	; (8014fd0 <prvCheckForValidListAndQueue+0x74>)
 8014f8c:	4a11      	ldr	r2, [pc, #68]	; (8014fd4 <prvCheckForValidListAndQueue+0x78>)
 8014f8e:	2110      	movs	r1, #16
 8014f90:	200a      	movs	r0, #10
 8014f92:	f7fd ff83 	bl	8012e9c <xQueueGenericCreateStatic>
 8014f96:	4603      	mov	r3, r0
 8014f98:	4a08      	ldr	r2, [pc, #32]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014f9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014f9c:	4b07      	ldr	r3, [pc, #28]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d005      	beq.n	8014fb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014fa4:	4b05      	ldr	r3, [pc, #20]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	490b      	ldr	r1, [pc, #44]	; (8014fd8 <prvCheckForValidListAndQueue+0x7c>)
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fe fb9c 	bl	80136e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014fb0:	f000 f990 	bl	80152d4 <vPortExitCritical>
}
 8014fb4:	bf00      	nop
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	24001868 	.word	0x24001868
 8014fc0:	24001838 	.word	0x24001838
 8014fc4:	2400184c 	.word	0x2400184c
 8014fc8:	24001860 	.word	0x24001860
 8014fcc:	24001864 	.word	0x24001864
 8014fd0:	24001914 	.word	0x24001914
 8014fd4:	24001874 	.word	0x24001874
 8014fd8:	0801659c 	.word	0x0801659c

08014fdc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b08a      	sub	sp, #40	; 0x28
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
 8014fe8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8014fea:	f06f 0301 	mvn.w	r3, #1
 8014fee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014ffc:	4b06      	ldr	r3, [pc, #24]	; (8015018 <xTimerPendFunctionCallFromISR+0x3c>)
 8014ffe:	6818      	ldr	r0, [r3, #0]
 8015000:	f107 0114 	add.w	r1, r7, #20
 8015004:	2300      	movs	r3, #0
 8015006:	683a      	ldr	r2, [r7, #0]
 8015008:	f7fe f8e2 	bl	80131d0 <xQueueGenericSendFromISR>
 801500c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015010:	4618      	mov	r0, r3
 8015012:	3728      	adds	r7, #40	; 0x28
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	24001868 	.word	0x24001868

0801501c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801501c:	b480      	push	{r7}
 801501e:	b085      	sub	sp, #20
 8015020:	af00      	add	r7, sp, #0
 8015022:	60f8      	str	r0, [r7, #12]
 8015024:	60b9      	str	r1, [r7, #8]
 8015026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	3b04      	subs	r3, #4
 801502c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	3b04      	subs	r3, #4
 801503a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	f023 0201 	bic.w	r2, r3, #1
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	3b04      	subs	r3, #4
 801504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801504c:	4a0c      	ldr	r2, [pc, #48]	; (8015080 <pxPortInitialiseStack+0x64>)
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	3b14      	subs	r3, #20
 8015056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015058:	687a      	ldr	r2, [r7, #4]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	3b04      	subs	r3, #4
 8015062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	f06f 0202 	mvn.w	r2, #2
 801506a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	3b20      	subs	r3, #32
 8015070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015072:	68fb      	ldr	r3, [r7, #12]
}
 8015074:	4618      	mov	r0, r3
 8015076:	3714      	adds	r7, #20
 8015078:	46bd      	mov	sp, r7
 801507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507e:	4770      	bx	lr
 8015080:	08015085 	.word	0x08015085

08015084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015084:	b480      	push	{r7}
 8015086:	b085      	sub	sp, #20
 8015088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801508a:	2300      	movs	r3, #0
 801508c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801508e:	4b12      	ldr	r3, [pc, #72]	; (80150d8 <prvTaskExitError+0x54>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015096:	d00a      	beq.n	80150ae <prvTaskExitError+0x2a>
	__asm volatile
 8015098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801509c:	f383 8811 	msr	BASEPRI, r3
 80150a0:	f3bf 8f6f 	isb	sy
 80150a4:	f3bf 8f4f 	dsb	sy
 80150a8:	60fb      	str	r3, [r7, #12]
}
 80150aa:	bf00      	nop
 80150ac:	e7fe      	b.n	80150ac <prvTaskExitError+0x28>
	__asm volatile
 80150ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b2:	f383 8811 	msr	BASEPRI, r3
 80150b6:	f3bf 8f6f 	isb	sy
 80150ba:	f3bf 8f4f 	dsb	sy
 80150be:	60bb      	str	r3, [r7, #8]
}
 80150c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80150c2:	bf00      	nop
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d0fc      	beq.n	80150c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80150ca:	bf00      	nop
 80150cc:	bf00      	nop
 80150ce:	3714      	adds	r7, #20
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr
 80150d8:	24000098 	.word	0x24000098
 80150dc:	00000000 	.word	0x00000000

080150e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80150e0:	4b07      	ldr	r3, [pc, #28]	; (8015100 <pxCurrentTCBConst2>)
 80150e2:	6819      	ldr	r1, [r3, #0]
 80150e4:	6808      	ldr	r0, [r1, #0]
 80150e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ea:	f380 8809 	msr	PSP, r0
 80150ee:	f3bf 8f6f 	isb	sy
 80150f2:	f04f 0000 	mov.w	r0, #0
 80150f6:	f380 8811 	msr	BASEPRI, r0
 80150fa:	4770      	bx	lr
 80150fc:	f3af 8000 	nop.w

08015100 <pxCurrentTCBConst2>:
 8015100:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015104:	bf00      	nop
 8015106:	bf00      	nop

08015108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015108:	4808      	ldr	r0, [pc, #32]	; (801512c <prvPortStartFirstTask+0x24>)
 801510a:	6800      	ldr	r0, [r0, #0]
 801510c:	6800      	ldr	r0, [r0, #0]
 801510e:	f380 8808 	msr	MSP, r0
 8015112:	f04f 0000 	mov.w	r0, #0
 8015116:	f380 8814 	msr	CONTROL, r0
 801511a:	b662      	cpsie	i
 801511c:	b661      	cpsie	f
 801511e:	f3bf 8f4f 	dsb	sy
 8015122:	f3bf 8f6f 	isb	sy
 8015126:	df00      	svc	0
 8015128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801512a:	bf00      	nop
 801512c:	e000ed08 	.word	0xe000ed08

08015130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b086      	sub	sp, #24
 8015134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015136:	4b46      	ldr	r3, [pc, #280]	; (8015250 <xPortStartScheduler+0x120>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	4a46      	ldr	r2, [pc, #280]	; (8015254 <xPortStartScheduler+0x124>)
 801513c:	4293      	cmp	r3, r2
 801513e:	d10a      	bne.n	8015156 <xPortStartScheduler+0x26>
	__asm volatile
 8015140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015144:	f383 8811 	msr	BASEPRI, r3
 8015148:	f3bf 8f6f 	isb	sy
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	613b      	str	r3, [r7, #16]
}
 8015152:	bf00      	nop
 8015154:	e7fe      	b.n	8015154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015156:	4b3e      	ldr	r3, [pc, #248]	; (8015250 <xPortStartScheduler+0x120>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4a3f      	ldr	r2, [pc, #252]	; (8015258 <xPortStartScheduler+0x128>)
 801515c:	4293      	cmp	r3, r2
 801515e:	d10a      	bne.n	8015176 <xPortStartScheduler+0x46>
	__asm volatile
 8015160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015164:	f383 8811 	msr	BASEPRI, r3
 8015168:	f3bf 8f6f 	isb	sy
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	60fb      	str	r3, [r7, #12]
}
 8015172:	bf00      	nop
 8015174:	e7fe      	b.n	8015174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015176:	4b39      	ldr	r3, [pc, #228]	; (801525c <xPortStartScheduler+0x12c>)
 8015178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	b2db      	uxtb	r3, r3
 8015180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	22ff      	movs	r2, #255	; 0xff
 8015186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	781b      	ldrb	r3, [r3, #0]
 801518c:	b2db      	uxtb	r3, r3
 801518e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015190:	78fb      	ldrb	r3, [r7, #3]
 8015192:	b2db      	uxtb	r3, r3
 8015194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015198:	b2da      	uxtb	r2, r3
 801519a:	4b31      	ldr	r3, [pc, #196]	; (8015260 <xPortStartScheduler+0x130>)
 801519c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801519e:	4b31      	ldr	r3, [pc, #196]	; (8015264 <xPortStartScheduler+0x134>)
 80151a0:	2207      	movs	r2, #7
 80151a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80151a4:	e009      	b.n	80151ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80151a6:	4b2f      	ldr	r3, [pc, #188]	; (8015264 <xPortStartScheduler+0x134>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	3b01      	subs	r3, #1
 80151ac:	4a2d      	ldr	r2, [pc, #180]	; (8015264 <xPortStartScheduler+0x134>)
 80151ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80151b0:	78fb      	ldrb	r3, [r7, #3]
 80151b2:	b2db      	uxtb	r3, r3
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80151ba:	78fb      	ldrb	r3, [r7, #3]
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151c2:	2b80      	cmp	r3, #128	; 0x80
 80151c4:	d0ef      	beq.n	80151a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80151c6:	4b27      	ldr	r3, [pc, #156]	; (8015264 <xPortStartScheduler+0x134>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	f1c3 0307 	rsb	r3, r3, #7
 80151ce:	2b04      	cmp	r3, #4
 80151d0:	d00a      	beq.n	80151e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80151d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d6:	f383 8811 	msr	BASEPRI, r3
 80151da:	f3bf 8f6f 	isb	sy
 80151de:	f3bf 8f4f 	dsb	sy
 80151e2:	60bb      	str	r3, [r7, #8]
}
 80151e4:	bf00      	nop
 80151e6:	e7fe      	b.n	80151e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80151e8:	4b1e      	ldr	r3, [pc, #120]	; (8015264 <xPortStartScheduler+0x134>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	021b      	lsls	r3, r3, #8
 80151ee:	4a1d      	ldr	r2, [pc, #116]	; (8015264 <xPortStartScheduler+0x134>)
 80151f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80151f2:	4b1c      	ldr	r3, [pc, #112]	; (8015264 <xPortStartScheduler+0x134>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80151fa:	4a1a      	ldr	r2, [pc, #104]	; (8015264 <xPortStartScheduler+0x134>)
 80151fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	b2da      	uxtb	r2, r3
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015206:	4b18      	ldr	r3, [pc, #96]	; (8015268 <xPortStartScheduler+0x138>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	4a17      	ldr	r2, [pc, #92]	; (8015268 <xPortStartScheduler+0x138>)
 801520c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015212:	4b15      	ldr	r3, [pc, #84]	; (8015268 <xPortStartScheduler+0x138>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	4a14      	ldr	r2, [pc, #80]	; (8015268 <xPortStartScheduler+0x138>)
 8015218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801521c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801521e:	f000 f8dd 	bl	80153dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015222:	4b12      	ldr	r3, [pc, #72]	; (801526c <xPortStartScheduler+0x13c>)
 8015224:	2200      	movs	r2, #0
 8015226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015228:	f000 f8fc 	bl	8015424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801522c:	4b10      	ldr	r3, [pc, #64]	; (8015270 <xPortStartScheduler+0x140>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	4a0f      	ldr	r2, [pc, #60]	; (8015270 <xPortStartScheduler+0x140>)
 8015232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015238:	f7ff ff66 	bl	8015108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801523c:	f7fe ff7e 	bl	801413c <vTaskSwitchContext>
	prvTaskExitError();
 8015240:	f7ff ff20 	bl	8015084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	3718      	adds	r7, #24
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	e000ed00 	.word	0xe000ed00
 8015254:	410fc271 	.word	0x410fc271
 8015258:	410fc270 	.word	0x410fc270
 801525c:	e000e400 	.word	0xe000e400
 8015260:	24001964 	.word	0x24001964
 8015264:	24001968 	.word	0x24001968
 8015268:	e000ed20 	.word	0xe000ed20
 801526c:	24000098 	.word	0x24000098
 8015270:	e000ef34 	.word	0xe000ef34

08015274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
	__asm volatile
 801527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527e:	f383 8811 	msr	BASEPRI, r3
 8015282:	f3bf 8f6f 	isb	sy
 8015286:	f3bf 8f4f 	dsb	sy
 801528a:	607b      	str	r3, [r7, #4]
}
 801528c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801528e:	4b0f      	ldr	r3, [pc, #60]	; (80152cc <vPortEnterCritical+0x58>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	3301      	adds	r3, #1
 8015294:	4a0d      	ldr	r2, [pc, #52]	; (80152cc <vPortEnterCritical+0x58>)
 8015296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015298:	4b0c      	ldr	r3, [pc, #48]	; (80152cc <vPortEnterCritical+0x58>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	2b01      	cmp	r3, #1
 801529e:	d10f      	bne.n	80152c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80152a0:	4b0b      	ldr	r3, [pc, #44]	; (80152d0 <vPortEnterCritical+0x5c>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d00a      	beq.n	80152c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80152aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ae:	f383 8811 	msr	BASEPRI, r3
 80152b2:	f3bf 8f6f 	isb	sy
 80152b6:	f3bf 8f4f 	dsb	sy
 80152ba:	603b      	str	r3, [r7, #0]
}
 80152bc:	bf00      	nop
 80152be:	e7fe      	b.n	80152be <vPortEnterCritical+0x4a>
	}
}
 80152c0:	bf00      	nop
 80152c2:	370c      	adds	r7, #12
 80152c4:	46bd      	mov	sp, r7
 80152c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ca:	4770      	bx	lr
 80152cc:	24000098 	.word	0x24000098
 80152d0:	e000ed04 	.word	0xe000ed04

080152d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80152da:	4b12      	ldr	r3, [pc, #72]	; (8015324 <vPortExitCritical+0x50>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d10a      	bne.n	80152f8 <vPortExitCritical+0x24>
	__asm volatile
 80152e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e6:	f383 8811 	msr	BASEPRI, r3
 80152ea:	f3bf 8f6f 	isb	sy
 80152ee:	f3bf 8f4f 	dsb	sy
 80152f2:	607b      	str	r3, [r7, #4]
}
 80152f4:	bf00      	nop
 80152f6:	e7fe      	b.n	80152f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80152f8:	4b0a      	ldr	r3, [pc, #40]	; (8015324 <vPortExitCritical+0x50>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	3b01      	subs	r3, #1
 80152fe:	4a09      	ldr	r2, [pc, #36]	; (8015324 <vPortExitCritical+0x50>)
 8015300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015302:	4b08      	ldr	r3, [pc, #32]	; (8015324 <vPortExitCritical+0x50>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d105      	bne.n	8015316 <vPortExitCritical+0x42>
 801530a:	2300      	movs	r3, #0
 801530c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	f383 8811 	msr	BASEPRI, r3
}
 8015314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015316:	bf00      	nop
 8015318:	370c      	adds	r7, #12
 801531a:	46bd      	mov	sp, r7
 801531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop
 8015324:	24000098 	.word	0x24000098
	...

08015330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015330:	f3ef 8009 	mrs	r0, PSP
 8015334:	f3bf 8f6f 	isb	sy
 8015338:	4b15      	ldr	r3, [pc, #84]	; (8015390 <pxCurrentTCBConst>)
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	f01e 0f10 	tst.w	lr, #16
 8015340:	bf08      	it	eq
 8015342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534a:	6010      	str	r0, [r2, #0]
 801534c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015354:	f380 8811 	msr	BASEPRI, r0
 8015358:	f3bf 8f4f 	dsb	sy
 801535c:	f3bf 8f6f 	isb	sy
 8015360:	f7fe feec 	bl	801413c <vTaskSwitchContext>
 8015364:	f04f 0000 	mov.w	r0, #0
 8015368:	f380 8811 	msr	BASEPRI, r0
 801536c:	bc09      	pop	{r0, r3}
 801536e:	6819      	ldr	r1, [r3, #0]
 8015370:	6808      	ldr	r0, [r1, #0]
 8015372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015376:	f01e 0f10 	tst.w	lr, #16
 801537a:	bf08      	it	eq
 801537c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015380:	f380 8809 	msr	PSP, r0
 8015384:	f3bf 8f6f 	isb	sy
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop
 801538c:	f3af 8000 	nop.w

08015390 <pxCurrentTCBConst>:
 8015390:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015394:	bf00      	nop
 8015396:	bf00      	nop

08015398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
	__asm volatile
 801539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a2:	f383 8811 	msr	BASEPRI, r3
 80153a6:	f3bf 8f6f 	isb	sy
 80153aa:	f3bf 8f4f 	dsb	sy
 80153ae:	607b      	str	r3, [r7, #4]
}
 80153b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80153b2:	f7fe fe09 	bl	8013fc8 <xTaskIncrementTick>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d003      	beq.n	80153c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80153bc:	4b06      	ldr	r3, [pc, #24]	; (80153d8 <xPortSysTickHandler+0x40>)
 80153be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153c2:	601a      	str	r2, [r3, #0]
 80153c4:	2300      	movs	r3, #0
 80153c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	f383 8811 	msr	BASEPRI, r3
}
 80153ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80153d0:	bf00      	nop
 80153d2:	3708      	adds	r7, #8
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	e000ed04 	.word	0xe000ed04

080153dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80153dc:	b480      	push	{r7}
 80153de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80153e0:	4b0b      	ldr	r3, [pc, #44]	; (8015410 <vPortSetupTimerInterrupt+0x34>)
 80153e2:	2200      	movs	r2, #0
 80153e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80153e6:	4b0b      	ldr	r3, [pc, #44]	; (8015414 <vPortSetupTimerInterrupt+0x38>)
 80153e8:	2200      	movs	r2, #0
 80153ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80153ec:	4b0a      	ldr	r3, [pc, #40]	; (8015418 <vPortSetupTimerInterrupt+0x3c>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	4a0a      	ldr	r2, [pc, #40]	; (801541c <vPortSetupTimerInterrupt+0x40>)
 80153f2:	fba2 2303 	umull	r2, r3, r2, r3
 80153f6:	099b      	lsrs	r3, r3, #6
 80153f8:	4a09      	ldr	r2, [pc, #36]	; (8015420 <vPortSetupTimerInterrupt+0x44>)
 80153fa:	3b01      	subs	r3, #1
 80153fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80153fe:	4b04      	ldr	r3, [pc, #16]	; (8015410 <vPortSetupTimerInterrupt+0x34>)
 8015400:	2207      	movs	r2, #7
 8015402:	601a      	str	r2, [r3, #0]
}
 8015404:	bf00      	nop
 8015406:	46bd      	mov	sp, r7
 8015408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540c:	4770      	bx	lr
 801540e:	bf00      	nop
 8015410:	e000e010 	.word	0xe000e010
 8015414:	e000e018 	.word	0xe000e018
 8015418:	24000088 	.word	0x24000088
 801541c:	10624dd3 	.word	0x10624dd3
 8015420:	e000e014 	.word	0xe000e014

08015424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015434 <vPortEnableVFP+0x10>
 8015428:	6801      	ldr	r1, [r0, #0]
 801542a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801542e:	6001      	str	r1, [r0, #0]
 8015430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015432:	bf00      	nop
 8015434:	e000ed88 	.word	0xe000ed88

08015438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015438:	b480      	push	{r7}
 801543a:	b085      	sub	sp, #20
 801543c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801543e:	f3ef 8305 	mrs	r3, IPSR
 8015442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2b0f      	cmp	r3, #15
 8015448:	d914      	bls.n	8015474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801544a:	4a17      	ldr	r2, [pc, #92]	; (80154a8 <vPortValidateInterruptPriority+0x70>)
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	4413      	add	r3, r2
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015454:	4b15      	ldr	r3, [pc, #84]	; (80154ac <vPortValidateInterruptPriority+0x74>)
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	7afa      	ldrb	r2, [r7, #11]
 801545a:	429a      	cmp	r2, r3
 801545c:	d20a      	bcs.n	8015474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015462:	f383 8811 	msr	BASEPRI, r3
 8015466:	f3bf 8f6f 	isb	sy
 801546a:	f3bf 8f4f 	dsb	sy
 801546e:	607b      	str	r3, [r7, #4]
}
 8015470:	bf00      	nop
 8015472:	e7fe      	b.n	8015472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015474:	4b0e      	ldr	r3, [pc, #56]	; (80154b0 <vPortValidateInterruptPriority+0x78>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801547c:	4b0d      	ldr	r3, [pc, #52]	; (80154b4 <vPortValidateInterruptPriority+0x7c>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	429a      	cmp	r2, r3
 8015482:	d90a      	bls.n	801549a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015488:	f383 8811 	msr	BASEPRI, r3
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f3bf 8f4f 	dsb	sy
 8015494:	603b      	str	r3, [r7, #0]
}
 8015496:	bf00      	nop
 8015498:	e7fe      	b.n	8015498 <vPortValidateInterruptPriority+0x60>
	}
 801549a:	bf00      	nop
 801549c:	3714      	adds	r7, #20
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr
 80154a6:	bf00      	nop
 80154a8:	e000e3f0 	.word	0xe000e3f0
 80154ac:	24001964 	.word	0x24001964
 80154b0:	e000ed0c 	.word	0xe000ed0c
 80154b4:	24001968 	.word	0x24001968

080154b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b08a      	sub	sp, #40	; 0x28
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80154c0:	2300      	movs	r3, #0
 80154c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80154c4:	f7fe fcc4 	bl	8013e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80154c8:	4b5b      	ldr	r3, [pc, #364]	; (8015638 <pvPortMalloc+0x180>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d101      	bne.n	80154d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80154d0:	f000 f920 	bl	8015714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80154d4:	4b59      	ldr	r3, [pc, #356]	; (801563c <pvPortMalloc+0x184>)
 80154d6:	681a      	ldr	r2, [r3, #0]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4013      	ands	r3, r2
 80154dc:	2b00      	cmp	r3, #0
 80154de:	f040 8093 	bne.w	8015608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d01d      	beq.n	8015524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80154e8:	2208      	movs	r2, #8
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	4413      	add	r3, r2
 80154ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f003 0307 	and.w	r3, r3, #7
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d014      	beq.n	8015524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f023 0307 	bic.w	r3, r3, #7
 8015500:	3308      	adds	r3, #8
 8015502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	f003 0307 	and.w	r3, r3, #7
 801550a:	2b00      	cmp	r3, #0
 801550c:	d00a      	beq.n	8015524 <pvPortMalloc+0x6c>
	__asm volatile
 801550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015512:	f383 8811 	msr	BASEPRI, r3
 8015516:	f3bf 8f6f 	isb	sy
 801551a:	f3bf 8f4f 	dsb	sy
 801551e:	617b      	str	r3, [r7, #20]
}
 8015520:	bf00      	nop
 8015522:	e7fe      	b.n	8015522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d06e      	beq.n	8015608 <pvPortMalloc+0x150>
 801552a:	4b45      	ldr	r3, [pc, #276]	; (8015640 <pvPortMalloc+0x188>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	687a      	ldr	r2, [r7, #4]
 8015530:	429a      	cmp	r2, r3
 8015532:	d869      	bhi.n	8015608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015534:	4b43      	ldr	r3, [pc, #268]	; (8015644 <pvPortMalloc+0x18c>)
 8015536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015538:	4b42      	ldr	r3, [pc, #264]	; (8015644 <pvPortMalloc+0x18c>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801553e:	e004      	b.n	801554a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	687a      	ldr	r2, [r7, #4]
 8015550:	429a      	cmp	r2, r3
 8015552:	d903      	bls.n	801555c <pvPortMalloc+0xa4>
 8015554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d1f1      	bne.n	8015540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801555c:	4b36      	ldr	r3, [pc, #216]	; (8015638 <pvPortMalloc+0x180>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015562:	429a      	cmp	r2, r3
 8015564:	d050      	beq.n	8015608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015566:	6a3b      	ldr	r3, [r7, #32]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	2208      	movs	r2, #8
 801556c:	4413      	add	r3, r2
 801556e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	6a3b      	ldr	r3, [r7, #32]
 8015576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557a:	685a      	ldr	r2, [r3, #4]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	1ad2      	subs	r2, r2, r3
 8015580:	2308      	movs	r3, #8
 8015582:	005b      	lsls	r3, r3, #1
 8015584:	429a      	cmp	r2, r3
 8015586:	d91f      	bls.n	80155c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	4413      	add	r3, r2
 801558e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	f003 0307 	and.w	r3, r3, #7
 8015596:	2b00      	cmp	r3, #0
 8015598:	d00a      	beq.n	80155b0 <pvPortMalloc+0xf8>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	613b      	str	r3, [r7, #16]
}
 80155ac:	bf00      	nop
 80155ae:	e7fe      	b.n	80155ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80155b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b2:	685a      	ldr	r2, [r3, #4]
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	1ad2      	subs	r2, r2, r3
 80155b8:	69bb      	ldr	r3, [r7, #24]
 80155ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80155bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80155c2:	69b8      	ldr	r0, [r7, #24]
 80155c4:	f000 f908 	bl	80157d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80155c8:	4b1d      	ldr	r3, [pc, #116]	; (8015640 <pvPortMalloc+0x188>)
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ce:	685b      	ldr	r3, [r3, #4]
 80155d0:	1ad3      	subs	r3, r2, r3
 80155d2:	4a1b      	ldr	r2, [pc, #108]	; (8015640 <pvPortMalloc+0x188>)
 80155d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80155d6:	4b1a      	ldr	r3, [pc, #104]	; (8015640 <pvPortMalloc+0x188>)
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	4b1b      	ldr	r3, [pc, #108]	; (8015648 <pvPortMalloc+0x190>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d203      	bcs.n	80155ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80155e2:	4b17      	ldr	r3, [pc, #92]	; (8015640 <pvPortMalloc+0x188>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	4a18      	ldr	r2, [pc, #96]	; (8015648 <pvPortMalloc+0x190>)
 80155e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80155ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ec:	685a      	ldr	r2, [r3, #4]
 80155ee:	4b13      	ldr	r3, [pc, #76]	; (801563c <pvPortMalloc+0x184>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	431a      	orrs	r2, r3
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80155f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fa:	2200      	movs	r2, #0
 80155fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80155fe:	4b13      	ldr	r3, [pc, #76]	; (801564c <pvPortMalloc+0x194>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	3301      	adds	r3, #1
 8015604:	4a11      	ldr	r2, [pc, #68]	; (801564c <pvPortMalloc+0x194>)
 8015606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015608:	f7fe fc30 	bl	8013e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	f003 0307 	and.w	r3, r3, #7
 8015612:	2b00      	cmp	r3, #0
 8015614:	d00a      	beq.n	801562c <pvPortMalloc+0x174>
	__asm volatile
 8015616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801561a:	f383 8811 	msr	BASEPRI, r3
 801561e:	f3bf 8f6f 	isb	sy
 8015622:	f3bf 8f4f 	dsb	sy
 8015626:	60fb      	str	r3, [r7, #12]
}
 8015628:	bf00      	nop
 801562a:	e7fe      	b.n	801562a <pvPortMalloc+0x172>
	return pvReturn;
 801562c:	69fb      	ldr	r3, [r7, #28]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3728      	adds	r7, #40	; 0x28
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
 8015636:	bf00      	nop
 8015638:	24005574 	.word	0x24005574
 801563c:	24005588 	.word	0x24005588
 8015640:	24005578 	.word	0x24005578
 8015644:	2400556c 	.word	0x2400556c
 8015648:	2400557c 	.word	0x2400557c
 801564c:	24005580 	.word	0x24005580

08015650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b086      	sub	sp, #24
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d04d      	beq.n	80156fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015662:	2308      	movs	r3, #8
 8015664:	425b      	negs	r3, r3
 8015666:	697a      	ldr	r2, [r7, #20]
 8015668:	4413      	add	r3, r2
 801566a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801566c:	697b      	ldr	r3, [r7, #20]
 801566e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	685a      	ldr	r2, [r3, #4]
 8015674:	4b24      	ldr	r3, [pc, #144]	; (8015708 <vPortFree+0xb8>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	4013      	ands	r3, r2
 801567a:	2b00      	cmp	r3, #0
 801567c:	d10a      	bne.n	8015694 <vPortFree+0x44>
	__asm volatile
 801567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015682:	f383 8811 	msr	BASEPRI, r3
 8015686:	f3bf 8f6f 	isb	sy
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	60fb      	str	r3, [r7, #12]
}
 8015690:	bf00      	nop
 8015692:	e7fe      	b.n	8015692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d00a      	beq.n	80156b2 <vPortFree+0x62>
	__asm volatile
 801569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a0:	f383 8811 	msr	BASEPRI, r3
 80156a4:	f3bf 8f6f 	isb	sy
 80156a8:	f3bf 8f4f 	dsb	sy
 80156ac:	60bb      	str	r3, [r7, #8]
}
 80156ae:	bf00      	nop
 80156b0:	e7fe      	b.n	80156b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	685a      	ldr	r2, [r3, #4]
 80156b6:	4b14      	ldr	r3, [pc, #80]	; (8015708 <vPortFree+0xb8>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	4013      	ands	r3, r2
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d01e      	beq.n	80156fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d11a      	bne.n	80156fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80156c8:	693b      	ldr	r3, [r7, #16]
 80156ca:	685a      	ldr	r2, [r3, #4]
 80156cc:	4b0e      	ldr	r3, [pc, #56]	; (8015708 <vPortFree+0xb8>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	43db      	mvns	r3, r3
 80156d2:	401a      	ands	r2, r3
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80156d8:	f7fe fbba 	bl	8013e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	685a      	ldr	r2, [r3, #4]
 80156e0:	4b0a      	ldr	r3, [pc, #40]	; (801570c <vPortFree+0xbc>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	4413      	add	r3, r2
 80156e6:	4a09      	ldr	r2, [pc, #36]	; (801570c <vPortFree+0xbc>)
 80156e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80156ea:	6938      	ldr	r0, [r7, #16]
 80156ec:	f000 f874 	bl	80157d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80156f0:	4b07      	ldr	r3, [pc, #28]	; (8015710 <vPortFree+0xc0>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	3301      	adds	r3, #1
 80156f6:	4a06      	ldr	r2, [pc, #24]	; (8015710 <vPortFree+0xc0>)
 80156f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80156fa:	f7fe fbb7 	bl	8013e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80156fe:	bf00      	nop
 8015700:	3718      	adds	r7, #24
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}
 8015706:	bf00      	nop
 8015708:	24005588 	.word	0x24005588
 801570c:	24005578 	.word	0x24005578
 8015710:	24005584 	.word	0x24005584

08015714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015714:	b480      	push	{r7}
 8015716:	b085      	sub	sp, #20
 8015718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801571a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801571e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015720:	4b27      	ldr	r3, [pc, #156]	; (80157c0 <prvHeapInit+0xac>)
 8015722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	f003 0307 	and.w	r3, r3, #7
 801572a:	2b00      	cmp	r3, #0
 801572c:	d00c      	beq.n	8015748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	3307      	adds	r3, #7
 8015732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f023 0307 	bic.w	r3, r3, #7
 801573a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801573c:	68ba      	ldr	r2, [r7, #8]
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	1ad3      	subs	r3, r2, r3
 8015742:	4a1f      	ldr	r2, [pc, #124]	; (80157c0 <prvHeapInit+0xac>)
 8015744:	4413      	add	r3, r2
 8015746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801574c:	4a1d      	ldr	r2, [pc, #116]	; (80157c4 <prvHeapInit+0xb0>)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015752:	4b1c      	ldr	r3, [pc, #112]	; (80157c4 <prvHeapInit+0xb0>)
 8015754:	2200      	movs	r2, #0
 8015756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	68ba      	ldr	r2, [r7, #8]
 801575c:	4413      	add	r3, r2
 801575e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015760:	2208      	movs	r2, #8
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	1a9b      	subs	r3, r3, r2
 8015766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	f023 0307 	bic.w	r3, r3, #7
 801576e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	4a15      	ldr	r2, [pc, #84]	; (80157c8 <prvHeapInit+0xb4>)
 8015774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015776:	4b14      	ldr	r3, [pc, #80]	; (80157c8 <prvHeapInit+0xb4>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2200      	movs	r2, #0
 801577c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801577e:	4b12      	ldr	r3, [pc, #72]	; (80157c8 <prvHeapInit+0xb4>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2200      	movs	r2, #0
 8015784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	68fa      	ldr	r2, [r7, #12]
 801578e:	1ad2      	subs	r2, r2, r3
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015794:	4b0c      	ldr	r3, [pc, #48]	; (80157c8 <prvHeapInit+0xb4>)
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	4a0a      	ldr	r2, [pc, #40]	; (80157cc <prvHeapInit+0xb8>)
 80157a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	685b      	ldr	r3, [r3, #4]
 80157a8:	4a09      	ldr	r2, [pc, #36]	; (80157d0 <prvHeapInit+0xbc>)
 80157aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80157ac:	4b09      	ldr	r3, [pc, #36]	; (80157d4 <prvHeapInit+0xc0>)
 80157ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80157b2:	601a      	str	r2, [r3, #0]
}
 80157b4:	bf00      	nop
 80157b6:	3714      	adds	r7, #20
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr
 80157c0:	2400196c 	.word	0x2400196c
 80157c4:	2400556c 	.word	0x2400556c
 80157c8:	24005574 	.word	0x24005574
 80157cc:	2400557c 	.word	0x2400557c
 80157d0:	24005578 	.word	0x24005578
 80157d4:	24005588 	.word	0x24005588

080157d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80157d8:	b480      	push	{r7}
 80157da:	b085      	sub	sp, #20
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80157e0:	4b28      	ldr	r3, [pc, #160]	; (8015884 <prvInsertBlockIntoFreeList+0xac>)
 80157e2:	60fb      	str	r3, [r7, #12]
 80157e4:	e002      	b.n	80157ec <prvInsertBlockIntoFreeList+0x14>
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	60fb      	str	r3, [r7, #12]
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	687a      	ldr	r2, [r7, #4]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d8f7      	bhi.n	80157e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	68ba      	ldr	r2, [r7, #8]
 8015800:	4413      	add	r3, r2
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	429a      	cmp	r2, r3
 8015806:	d108      	bne.n	801581a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	685a      	ldr	r2, [r3, #4]
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	441a      	add	r2, r3
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	68ba      	ldr	r2, [r7, #8]
 8015824:	441a      	add	r2, r3
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	429a      	cmp	r2, r3
 801582c:	d118      	bne.n	8015860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	4b15      	ldr	r3, [pc, #84]	; (8015888 <prvInsertBlockIntoFreeList+0xb0>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	429a      	cmp	r2, r3
 8015838:	d00d      	beq.n	8015856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	685a      	ldr	r2, [r3, #4]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	441a      	add	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	681a      	ldr	r2, [r3, #0]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	601a      	str	r2, [r3, #0]
 8015854:	e008      	b.n	8015868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015856:	4b0c      	ldr	r3, [pc, #48]	; (8015888 <prvInsertBlockIntoFreeList+0xb0>)
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	601a      	str	r2, [r3, #0]
 801585e:	e003      	b.n	8015868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015868:	68fa      	ldr	r2, [r7, #12]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	429a      	cmp	r2, r3
 801586e:	d002      	beq.n	8015876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015876:	bf00      	nop
 8015878:	3714      	adds	r7, #20
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	2400556c 	.word	0x2400556c
 8015888:	24005574 	.word	0x24005574

0801588c <__errno>:
 801588c:	4b01      	ldr	r3, [pc, #4]	; (8015894 <__errno+0x8>)
 801588e:	6818      	ldr	r0, [r3, #0]
 8015890:	4770      	bx	lr
 8015892:	bf00      	nop
 8015894:	2400009c 	.word	0x2400009c

08015898 <__libc_init_array>:
 8015898:	b570      	push	{r4, r5, r6, lr}
 801589a:	4d0d      	ldr	r5, [pc, #52]	; (80158d0 <__libc_init_array+0x38>)
 801589c:	4c0d      	ldr	r4, [pc, #52]	; (80158d4 <__libc_init_array+0x3c>)
 801589e:	1b64      	subs	r4, r4, r5
 80158a0:	10a4      	asrs	r4, r4, #2
 80158a2:	2600      	movs	r6, #0
 80158a4:	42a6      	cmp	r6, r4
 80158a6:	d109      	bne.n	80158bc <__libc_init_array+0x24>
 80158a8:	4d0b      	ldr	r5, [pc, #44]	; (80158d8 <__libc_init_array+0x40>)
 80158aa:	4c0c      	ldr	r4, [pc, #48]	; (80158dc <__libc_init_array+0x44>)
 80158ac:	f000 fd3c 	bl	8016328 <_init>
 80158b0:	1b64      	subs	r4, r4, r5
 80158b2:	10a4      	asrs	r4, r4, #2
 80158b4:	2600      	movs	r6, #0
 80158b6:	42a6      	cmp	r6, r4
 80158b8:	d105      	bne.n	80158c6 <__libc_init_array+0x2e>
 80158ba:	bd70      	pop	{r4, r5, r6, pc}
 80158bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80158c0:	4798      	blx	r3
 80158c2:	3601      	adds	r6, #1
 80158c4:	e7ee      	b.n	80158a4 <__libc_init_array+0xc>
 80158c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80158ca:	4798      	blx	r3
 80158cc:	3601      	adds	r6, #1
 80158ce:	e7f2      	b.n	80158b6 <__libc_init_array+0x1e>
 80158d0:	08016728 	.word	0x08016728
 80158d4:	08016728 	.word	0x08016728
 80158d8:	08016728 	.word	0x08016728
 80158dc:	0801672c 	.word	0x0801672c

080158e0 <malloc>:
 80158e0:	4b02      	ldr	r3, [pc, #8]	; (80158ec <malloc+0xc>)
 80158e2:	4601      	mov	r1, r0
 80158e4:	6818      	ldr	r0, [r3, #0]
 80158e6:	f000 b88d 	b.w	8015a04 <_malloc_r>
 80158ea:	bf00      	nop
 80158ec:	2400009c 	.word	0x2400009c

080158f0 <free>:
 80158f0:	4b02      	ldr	r3, [pc, #8]	; (80158fc <free+0xc>)
 80158f2:	4601      	mov	r1, r0
 80158f4:	6818      	ldr	r0, [r3, #0]
 80158f6:	f000 b819 	b.w	801592c <_free_r>
 80158fa:	bf00      	nop
 80158fc:	2400009c 	.word	0x2400009c

08015900 <memcpy>:
 8015900:	440a      	add	r2, r1
 8015902:	4291      	cmp	r1, r2
 8015904:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015908:	d100      	bne.n	801590c <memcpy+0xc>
 801590a:	4770      	bx	lr
 801590c:	b510      	push	{r4, lr}
 801590e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015916:	4291      	cmp	r1, r2
 8015918:	d1f9      	bne.n	801590e <memcpy+0xe>
 801591a:	bd10      	pop	{r4, pc}

0801591c <memset>:
 801591c:	4402      	add	r2, r0
 801591e:	4603      	mov	r3, r0
 8015920:	4293      	cmp	r3, r2
 8015922:	d100      	bne.n	8015926 <memset+0xa>
 8015924:	4770      	bx	lr
 8015926:	f803 1b01 	strb.w	r1, [r3], #1
 801592a:	e7f9      	b.n	8015920 <memset+0x4>

0801592c <_free_r>:
 801592c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801592e:	2900      	cmp	r1, #0
 8015930:	d044      	beq.n	80159bc <_free_r+0x90>
 8015932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015936:	9001      	str	r0, [sp, #4]
 8015938:	2b00      	cmp	r3, #0
 801593a:	f1a1 0404 	sub.w	r4, r1, #4
 801593e:	bfb8      	it	lt
 8015940:	18e4      	addlt	r4, r4, r3
 8015942:	f000 fc39 	bl	80161b8 <__malloc_lock>
 8015946:	4a1e      	ldr	r2, [pc, #120]	; (80159c0 <_free_r+0x94>)
 8015948:	9801      	ldr	r0, [sp, #4]
 801594a:	6813      	ldr	r3, [r2, #0]
 801594c:	b933      	cbnz	r3, 801595c <_free_r+0x30>
 801594e:	6063      	str	r3, [r4, #4]
 8015950:	6014      	str	r4, [r2, #0]
 8015952:	b003      	add	sp, #12
 8015954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015958:	f000 bc34 	b.w	80161c4 <__malloc_unlock>
 801595c:	42a3      	cmp	r3, r4
 801595e:	d908      	bls.n	8015972 <_free_r+0x46>
 8015960:	6825      	ldr	r5, [r4, #0]
 8015962:	1961      	adds	r1, r4, r5
 8015964:	428b      	cmp	r3, r1
 8015966:	bf01      	itttt	eq
 8015968:	6819      	ldreq	r1, [r3, #0]
 801596a:	685b      	ldreq	r3, [r3, #4]
 801596c:	1949      	addeq	r1, r1, r5
 801596e:	6021      	streq	r1, [r4, #0]
 8015970:	e7ed      	b.n	801594e <_free_r+0x22>
 8015972:	461a      	mov	r2, r3
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	b10b      	cbz	r3, 801597c <_free_r+0x50>
 8015978:	42a3      	cmp	r3, r4
 801597a:	d9fa      	bls.n	8015972 <_free_r+0x46>
 801597c:	6811      	ldr	r1, [r2, #0]
 801597e:	1855      	adds	r5, r2, r1
 8015980:	42a5      	cmp	r5, r4
 8015982:	d10b      	bne.n	801599c <_free_r+0x70>
 8015984:	6824      	ldr	r4, [r4, #0]
 8015986:	4421      	add	r1, r4
 8015988:	1854      	adds	r4, r2, r1
 801598a:	42a3      	cmp	r3, r4
 801598c:	6011      	str	r1, [r2, #0]
 801598e:	d1e0      	bne.n	8015952 <_free_r+0x26>
 8015990:	681c      	ldr	r4, [r3, #0]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	6053      	str	r3, [r2, #4]
 8015996:	4421      	add	r1, r4
 8015998:	6011      	str	r1, [r2, #0]
 801599a:	e7da      	b.n	8015952 <_free_r+0x26>
 801599c:	d902      	bls.n	80159a4 <_free_r+0x78>
 801599e:	230c      	movs	r3, #12
 80159a0:	6003      	str	r3, [r0, #0]
 80159a2:	e7d6      	b.n	8015952 <_free_r+0x26>
 80159a4:	6825      	ldr	r5, [r4, #0]
 80159a6:	1961      	adds	r1, r4, r5
 80159a8:	428b      	cmp	r3, r1
 80159aa:	bf04      	itt	eq
 80159ac:	6819      	ldreq	r1, [r3, #0]
 80159ae:	685b      	ldreq	r3, [r3, #4]
 80159b0:	6063      	str	r3, [r4, #4]
 80159b2:	bf04      	itt	eq
 80159b4:	1949      	addeq	r1, r1, r5
 80159b6:	6021      	streq	r1, [r4, #0]
 80159b8:	6054      	str	r4, [r2, #4]
 80159ba:	e7ca      	b.n	8015952 <_free_r+0x26>
 80159bc:	b003      	add	sp, #12
 80159be:	bd30      	pop	{r4, r5, pc}
 80159c0:	2400558c 	.word	0x2400558c

080159c4 <sbrk_aligned>:
 80159c4:	b570      	push	{r4, r5, r6, lr}
 80159c6:	4e0e      	ldr	r6, [pc, #56]	; (8015a00 <sbrk_aligned+0x3c>)
 80159c8:	460c      	mov	r4, r1
 80159ca:	6831      	ldr	r1, [r6, #0]
 80159cc:	4605      	mov	r5, r0
 80159ce:	b911      	cbnz	r1, 80159d6 <sbrk_aligned+0x12>
 80159d0:	f000 f902 	bl	8015bd8 <_sbrk_r>
 80159d4:	6030      	str	r0, [r6, #0]
 80159d6:	4621      	mov	r1, r4
 80159d8:	4628      	mov	r0, r5
 80159da:	f000 f8fd 	bl	8015bd8 <_sbrk_r>
 80159de:	1c43      	adds	r3, r0, #1
 80159e0:	d00a      	beq.n	80159f8 <sbrk_aligned+0x34>
 80159e2:	1cc4      	adds	r4, r0, #3
 80159e4:	f024 0403 	bic.w	r4, r4, #3
 80159e8:	42a0      	cmp	r0, r4
 80159ea:	d007      	beq.n	80159fc <sbrk_aligned+0x38>
 80159ec:	1a21      	subs	r1, r4, r0
 80159ee:	4628      	mov	r0, r5
 80159f0:	f000 f8f2 	bl	8015bd8 <_sbrk_r>
 80159f4:	3001      	adds	r0, #1
 80159f6:	d101      	bne.n	80159fc <sbrk_aligned+0x38>
 80159f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80159fc:	4620      	mov	r0, r4
 80159fe:	bd70      	pop	{r4, r5, r6, pc}
 8015a00:	24005590 	.word	0x24005590

08015a04 <_malloc_r>:
 8015a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a08:	1ccd      	adds	r5, r1, #3
 8015a0a:	f025 0503 	bic.w	r5, r5, #3
 8015a0e:	3508      	adds	r5, #8
 8015a10:	2d0c      	cmp	r5, #12
 8015a12:	bf38      	it	cc
 8015a14:	250c      	movcc	r5, #12
 8015a16:	2d00      	cmp	r5, #0
 8015a18:	4607      	mov	r7, r0
 8015a1a:	db01      	blt.n	8015a20 <_malloc_r+0x1c>
 8015a1c:	42a9      	cmp	r1, r5
 8015a1e:	d905      	bls.n	8015a2c <_malloc_r+0x28>
 8015a20:	230c      	movs	r3, #12
 8015a22:	603b      	str	r3, [r7, #0]
 8015a24:	2600      	movs	r6, #0
 8015a26:	4630      	mov	r0, r6
 8015a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a2c:	4e2e      	ldr	r6, [pc, #184]	; (8015ae8 <_malloc_r+0xe4>)
 8015a2e:	f000 fbc3 	bl	80161b8 <__malloc_lock>
 8015a32:	6833      	ldr	r3, [r6, #0]
 8015a34:	461c      	mov	r4, r3
 8015a36:	bb34      	cbnz	r4, 8015a86 <_malloc_r+0x82>
 8015a38:	4629      	mov	r1, r5
 8015a3a:	4638      	mov	r0, r7
 8015a3c:	f7ff ffc2 	bl	80159c4 <sbrk_aligned>
 8015a40:	1c43      	adds	r3, r0, #1
 8015a42:	4604      	mov	r4, r0
 8015a44:	d14d      	bne.n	8015ae2 <_malloc_r+0xde>
 8015a46:	6834      	ldr	r4, [r6, #0]
 8015a48:	4626      	mov	r6, r4
 8015a4a:	2e00      	cmp	r6, #0
 8015a4c:	d140      	bne.n	8015ad0 <_malloc_r+0xcc>
 8015a4e:	6823      	ldr	r3, [r4, #0]
 8015a50:	4631      	mov	r1, r6
 8015a52:	4638      	mov	r0, r7
 8015a54:	eb04 0803 	add.w	r8, r4, r3
 8015a58:	f000 f8be 	bl	8015bd8 <_sbrk_r>
 8015a5c:	4580      	cmp	r8, r0
 8015a5e:	d13a      	bne.n	8015ad6 <_malloc_r+0xd2>
 8015a60:	6821      	ldr	r1, [r4, #0]
 8015a62:	3503      	adds	r5, #3
 8015a64:	1a6d      	subs	r5, r5, r1
 8015a66:	f025 0503 	bic.w	r5, r5, #3
 8015a6a:	3508      	adds	r5, #8
 8015a6c:	2d0c      	cmp	r5, #12
 8015a6e:	bf38      	it	cc
 8015a70:	250c      	movcc	r5, #12
 8015a72:	4629      	mov	r1, r5
 8015a74:	4638      	mov	r0, r7
 8015a76:	f7ff ffa5 	bl	80159c4 <sbrk_aligned>
 8015a7a:	3001      	adds	r0, #1
 8015a7c:	d02b      	beq.n	8015ad6 <_malloc_r+0xd2>
 8015a7e:	6823      	ldr	r3, [r4, #0]
 8015a80:	442b      	add	r3, r5
 8015a82:	6023      	str	r3, [r4, #0]
 8015a84:	e00e      	b.n	8015aa4 <_malloc_r+0xa0>
 8015a86:	6822      	ldr	r2, [r4, #0]
 8015a88:	1b52      	subs	r2, r2, r5
 8015a8a:	d41e      	bmi.n	8015aca <_malloc_r+0xc6>
 8015a8c:	2a0b      	cmp	r2, #11
 8015a8e:	d916      	bls.n	8015abe <_malloc_r+0xba>
 8015a90:	1961      	adds	r1, r4, r5
 8015a92:	42a3      	cmp	r3, r4
 8015a94:	6025      	str	r5, [r4, #0]
 8015a96:	bf18      	it	ne
 8015a98:	6059      	strne	r1, [r3, #4]
 8015a9a:	6863      	ldr	r3, [r4, #4]
 8015a9c:	bf08      	it	eq
 8015a9e:	6031      	streq	r1, [r6, #0]
 8015aa0:	5162      	str	r2, [r4, r5]
 8015aa2:	604b      	str	r3, [r1, #4]
 8015aa4:	4638      	mov	r0, r7
 8015aa6:	f104 060b 	add.w	r6, r4, #11
 8015aaa:	f000 fb8b 	bl	80161c4 <__malloc_unlock>
 8015aae:	f026 0607 	bic.w	r6, r6, #7
 8015ab2:	1d23      	adds	r3, r4, #4
 8015ab4:	1af2      	subs	r2, r6, r3
 8015ab6:	d0b6      	beq.n	8015a26 <_malloc_r+0x22>
 8015ab8:	1b9b      	subs	r3, r3, r6
 8015aba:	50a3      	str	r3, [r4, r2]
 8015abc:	e7b3      	b.n	8015a26 <_malloc_r+0x22>
 8015abe:	6862      	ldr	r2, [r4, #4]
 8015ac0:	42a3      	cmp	r3, r4
 8015ac2:	bf0c      	ite	eq
 8015ac4:	6032      	streq	r2, [r6, #0]
 8015ac6:	605a      	strne	r2, [r3, #4]
 8015ac8:	e7ec      	b.n	8015aa4 <_malloc_r+0xa0>
 8015aca:	4623      	mov	r3, r4
 8015acc:	6864      	ldr	r4, [r4, #4]
 8015ace:	e7b2      	b.n	8015a36 <_malloc_r+0x32>
 8015ad0:	4634      	mov	r4, r6
 8015ad2:	6876      	ldr	r6, [r6, #4]
 8015ad4:	e7b9      	b.n	8015a4a <_malloc_r+0x46>
 8015ad6:	230c      	movs	r3, #12
 8015ad8:	603b      	str	r3, [r7, #0]
 8015ada:	4638      	mov	r0, r7
 8015adc:	f000 fb72 	bl	80161c4 <__malloc_unlock>
 8015ae0:	e7a1      	b.n	8015a26 <_malloc_r+0x22>
 8015ae2:	6025      	str	r5, [r4, #0]
 8015ae4:	e7de      	b.n	8015aa4 <_malloc_r+0xa0>
 8015ae6:	bf00      	nop
 8015ae8:	2400558c 	.word	0x2400558c

08015aec <_puts_r>:
 8015aec:	b570      	push	{r4, r5, r6, lr}
 8015aee:	460e      	mov	r6, r1
 8015af0:	4605      	mov	r5, r0
 8015af2:	b118      	cbz	r0, 8015afc <_puts_r+0x10>
 8015af4:	6983      	ldr	r3, [r0, #24]
 8015af6:	b90b      	cbnz	r3, 8015afc <_puts_r+0x10>
 8015af8:	f000 fa58 	bl	8015fac <__sinit>
 8015afc:	69ab      	ldr	r3, [r5, #24]
 8015afe:	68ac      	ldr	r4, [r5, #8]
 8015b00:	b913      	cbnz	r3, 8015b08 <_puts_r+0x1c>
 8015b02:	4628      	mov	r0, r5
 8015b04:	f000 fa52 	bl	8015fac <__sinit>
 8015b08:	4b2c      	ldr	r3, [pc, #176]	; (8015bbc <_puts_r+0xd0>)
 8015b0a:	429c      	cmp	r4, r3
 8015b0c:	d120      	bne.n	8015b50 <_puts_r+0x64>
 8015b0e:	686c      	ldr	r4, [r5, #4]
 8015b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b12:	07db      	lsls	r3, r3, #31
 8015b14:	d405      	bmi.n	8015b22 <_puts_r+0x36>
 8015b16:	89a3      	ldrh	r3, [r4, #12]
 8015b18:	0598      	lsls	r0, r3, #22
 8015b1a:	d402      	bmi.n	8015b22 <_puts_r+0x36>
 8015b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b1e:	f000 fae3 	bl	80160e8 <__retarget_lock_acquire_recursive>
 8015b22:	89a3      	ldrh	r3, [r4, #12]
 8015b24:	0719      	lsls	r1, r3, #28
 8015b26:	d51d      	bpl.n	8015b64 <_puts_r+0x78>
 8015b28:	6923      	ldr	r3, [r4, #16]
 8015b2a:	b1db      	cbz	r3, 8015b64 <_puts_r+0x78>
 8015b2c:	3e01      	subs	r6, #1
 8015b2e:	68a3      	ldr	r3, [r4, #8]
 8015b30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b34:	3b01      	subs	r3, #1
 8015b36:	60a3      	str	r3, [r4, #8]
 8015b38:	bb39      	cbnz	r1, 8015b8a <_puts_r+0x9e>
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	da38      	bge.n	8015bb0 <_puts_r+0xc4>
 8015b3e:	4622      	mov	r2, r4
 8015b40:	210a      	movs	r1, #10
 8015b42:	4628      	mov	r0, r5
 8015b44:	f000 f858 	bl	8015bf8 <__swbuf_r>
 8015b48:	3001      	adds	r0, #1
 8015b4a:	d011      	beq.n	8015b70 <_puts_r+0x84>
 8015b4c:	250a      	movs	r5, #10
 8015b4e:	e011      	b.n	8015b74 <_puts_r+0x88>
 8015b50:	4b1b      	ldr	r3, [pc, #108]	; (8015bc0 <_puts_r+0xd4>)
 8015b52:	429c      	cmp	r4, r3
 8015b54:	d101      	bne.n	8015b5a <_puts_r+0x6e>
 8015b56:	68ac      	ldr	r4, [r5, #8]
 8015b58:	e7da      	b.n	8015b10 <_puts_r+0x24>
 8015b5a:	4b1a      	ldr	r3, [pc, #104]	; (8015bc4 <_puts_r+0xd8>)
 8015b5c:	429c      	cmp	r4, r3
 8015b5e:	bf08      	it	eq
 8015b60:	68ec      	ldreq	r4, [r5, #12]
 8015b62:	e7d5      	b.n	8015b10 <_puts_r+0x24>
 8015b64:	4621      	mov	r1, r4
 8015b66:	4628      	mov	r0, r5
 8015b68:	f000 f898 	bl	8015c9c <__swsetup_r>
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	d0dd      	beq.n	8015b2c <_puts_r+0x40>
 8015b70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b76:	07da      	lsls	r2, r3, #31
 8015b78:	d405      	bmi.n	8015b86 <_puts_r+0x9a>
 8015b7a:	89a3      	ldrh	r3, [r4, #12]
 8015b7c:	059b      	lsls	r3, r3, #22
 8015b7e:	d402      	bmi.n	8015b86 <_puts_r+0x9a>
 8015b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b82:	f000 fab2 	bl	80160ea <__retarget_lock_release_recursive>
 8015b86:	4628      	mov	r0, r5
 8015b88:	bd70      	pop	{r4, r5, r6, pc}
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	da04      	bge.n	8015b98 <_puts_r+0xac>
 8015b8e:	69a2      	ldr	r2, [r4, #24]
 8015b90:	429a      	cmp	r2, r3
 8015b92:	dc06      	bgt.n	8015ba2 <_puts_r+0xb6>
 8015b94:	290a      	cmp	r1, #10
 8015b96:	d004      	beq.n	8015ba2 <_puts_r+0xb6>
 8015b98:	6823      	ldr	r3, [r4, #0]
 8015b9a:	1c5a      	adds	r2, r3, #1
 8015b9c:	6022      	str	r2, [r4, #0]
 8015b9e:	7019      	strb	r1, [r3, #0]
 8015ba0:	e7c5      	b.n	8015b2e <_puts_r+0x42>
 8015ba2:	4622      	mov	r2, r4
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	f000 f827 	bl	8015bf8 <__swbuf_r>
 8015baa:	3001      	adds	r0, #1
 8015bac:	d1bf      	bne.n	8015b2e <_puts_r+0x42>
 8015bae:	e7df      	b.n	8015b70 <_puts_r+0x84>
 8015bb0:	6823      	ldr	r3, [r4, #0]
 8015bb2:	250a      	movs	r5, #10
 8015bb4:	1c5a      	adds	r2, r3, #1
 8015bb6:	6022      	str	r2, [r4, #0]
 8015bb8:	701d      	strb	r5, [r3, #0]
 8015bba:	e7db      	b.n	8015b74 <_puts_r+0x88>
 8015bbc:	080166e0 	.word	0x080166e0
 8015bc0:	08016700 	.word	0x08016700
 8015bc4:	080166c0 	.word	0x080166c0

08015bc8 <puts>:
 8015bc8:	4b02      	ldr	r3, [pc, #8]	; (8015bd4 <puts+0xc>)
 8015bca:	4601      	mov	r1, r0
 8015bcc:	6818      	ldr	r0, [r3, #0]
 8015bce:	f7ff bf8d 	b.w	8015aec <_puts_r>
 8015bd2:	bf00      	nop
 8015bd4:	2400009c 	.word	0x2400009c

08015bd8 <_sbrk_r>:
 8015bd8:	b538      	push	{r3, r4, r5, lr}
 8015bda:	4d06      	ldr	r5, [pc, #24]	; (8015bf4 <_sbrk_r+0x1c>)
 8015bdc:	2300      	movs	r3, #0
 8015bde:	4604      	mov	r4, r0
 8015be0:	4608      	mov	r0, r1
 8015be2:	602b      	str	r3, [r5, #0]
 8015be4:	f7ed fc96 	bl	8003514 <_sbrk>
 8015be8:	1c43      	adds	r3, r0, #1
 8015bea:	d102      	bne.n	8015bf2 <_sbrk_r+0x1a>
 8015bec:	682b      	ldr	r3, [r5, #0]
 8015bee:	b103      	cbz	r3, 8015bf2 <_sbrk_r+0x1a>
 8015bf0:	6023      	str	r3, [r4, #0]
 8015bf2:	bd38      	pop	{r3, r4, r5, pc}
 8015bf4:	24005598 	.word	0x24005598

08015bf8 <__swbuf_r>:
 8015bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfa:	460e      	mov	r6, r1
 8015bfc:	4614      	mov	r4, r2
 8015bfe:	4605      	mov	r5, r0
 8015c00:	b118      	cbz	r0, 8015c0a <__swbuf_r+0x12>
 8015c02:	6983      	ldr	r3, [r0, #24]
 8015c04:	b90b      	cbnz	r3, 8015c0a <__swbuf_r+0x12>
 8015c06:	f000 f9d1 	bl	8015fac <__sinit>
 8015c0a:	4b21      	ldr	r3, [pc, #132]	; (8015c90 <__swbuf_r+0x98>)
 8015c0c:	429c      	cmp	r4, r3
 8015c0e:	d12b      	bne.n	8015c68 <__swbuf_r+0x70>
 8015c10:	686c      	ldr	r4, [r5, #4]
 8015c12:	69a3      	ldr	r3, [r4, #24]
 8015c14:	60a3      	str	r3, [r4, #8]
 8015c16:	89a3      	ldrh	r3, [r4, #12]
 8015c18:	071a      	lsls	r2, r3, #28
 8015c1a:	d52f      	bpl.n	8015c7c <__swbuf_r+0x84>
 8015c1c:	6923      	ldr	r3, [r4, #16]
 8015c1e:	b36b      	cbz	r3, 8015c7c <__swbuf_r+0x84>
 8015c20:	6923      	ldr	r3, [r4, #16]
 8015c22:	6820      	ldr	r0, [r4, #0]
 8015c24:	1ac0      	subs	r0, r0, r3
 8015c26:	6963      	ldr	r3, [r4, #20]
 8015c28:	b2f6      	uxtb	r6, r6
 8015c2a:	4283      	cmp	r3, r0
 8015c2c:	4637      	mov	r7, r6
 8015c2e:	dc04      	bgt.n	8015c3a <__swbuf_r+0x42>
 8015c30:	4621      	mov	r1, r4
 8015c32:	4628      	mov	r0, r5
 8015c34:	f000 f926 	bl	8015e84 <_fflush_r>
 8015c38:	bb30      	cbnz	r0, 8015c88 <__swbuf_r+0x90>
 8015c3a:	68a3      	ldr	r3, [r4, #8]
 8015c3c:	3b01      	subs	r3, #1
 8015c3e:	60a3      	str	r3, [r4, #8]
 8015c40:	6823      	ldr	r3, [r4, #0]
 8015c42:	1c5a      	adds	r2, r3, #1
 8015c44:	6022      	str	r2, [r4, #0]
 8015c46:	701e      	strb	r6, [r3, #0]
 8015c48:	6963      	ldr	r3, [r4, #20]
 8015c4a:	3001      	adds	r0, #1
 8015c4c:	4283      	cmp	r3, r0
 8015c4e:	d004      	beq.n	8015c5a <__swbuf_r+0x62>
 8015c50:	89a3      	ldrh	r3, [r4, #12]
 8015c52:	07db      	lsls	r3, r3, #31
 8015c54:	d506      	bpl.n	8015c64 <__swbuf_r+0x6c>
 8015c56:	2e0a      	cmp	r6, #10
 8015c58:	d104      	bne.n	8015c64 <__swbuf_r+0x6c>
 8015c5a:	4621      	mov	r1, r4
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	f000 f911 	bl	8015e84 <_fflush_r>
 8015c62:	b988      	cbnz	r0, 8015c88 <__swbuf_r+0x90>
 8015c64:	4638      	mov	r0, r7
 8015c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c68:	4b0a      	ldr	r3, [pc, #40]	; (8015c94 <__swbuf_r+0x9c>)
 8015c6a:	429c      	cmp	r4, r3
 8015c6c:	d101      	bne.n	8015c72 <__swbuf_r+0x7a>
 8015c6e:	68ac      	ldr	r4, [r5, #8]
 8015c70:	e7cf      	b.n	8015c12 <__swbuf_r+0x1a>
 8015c72:	4b09      	ldr	r3, [pc, #36]	; (8015c98 <__swbuf_r+0xa0>)
 8015c74:	429c      	cmp	r4, r3
 8015c76:	bf08      	it	eq
 8015c78:	68ec      	ldreq	r4, [r5, #12]
 8015c7a:	e7ca      	b.n	8015c12 <__swbuf_r+0x1a>
 8015c7c:	4621      	mov	r1, r4
 8015c7e:	4628      	mov	r0, r5
 8015c80:	f000 f80c 	bl	8015c9c <__swsetup_r>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d0cb      	beq.n	8015c20 <__swbuf_r+0x28>
 8015c88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015c8c:	e7ea      	b.n	8015c64 <__swbuf_r+0x6c>
 8015c8e:	bf00      	nop
 8015c90:	080166e0 	.word	0x080166e0
 8015c94:	08016700 	.word	0x08016700
 8015c98:	080166c0 	.word	0x080166c0

08015c9c <__swsetup_r>:
 8015c9c:	4b32      	ldr	r3, [pc, #200]	; (8015d68 <__swsetup_r+0xcc>)
 8015c9e:	b570      	push	{r4, r5, r6, lr}
 8015ca0:	681d      	ldr	r5, [r3, #0]
 8015ca2:	4606      	mov	r6, r0
 8015ca4:	460c      	mov	r4, r1
 8015ca6:	b125      	cbz	r5, 8015cb2 <__swsetup_r+0x16>
 8015ca8:	69ab      	ldr	r3, [r5, #24]
 8015caa:	b913      	cbnz	r3, 8015cb2 <__swsetup_r+0x16>
 8015cac:	4628      	mov	r0, r5
 8015cae:	f000 f97d 	bl	8015fac <__sinit>
 8015cb2:	4b2e      	ldr	r3, [pc, #184]	; (8015d6c <__swsetup_r+0xd0>)
 8015cb4:	429c      	cmp	r4, r3
 8015cb6:	d10f      	bne.n	8015cd8 <__swsetup_r+0x3c>
 8015cb8:	686c      	ldr	r4, [r5, #4]
 8015cba:	89a3      	ldrh	r3, [r4, #12]
 8015cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cc0:	0719      	lsls	r1, r3, #28
 8015cc2:	d42c      	bmi.n	8015d1e <__swsetup_r+0x82>
 8015cc4:	06dd      	lsls	r5, r3, #27
 8015cc6:	d411      	bmi.n	8015cec <__swsetup_r+0x50>
 8015cc8:	2309      	movs	r3, #9
 8015cca:	6033      	str	r3, [r6, #0]
 8015ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015cd0:	81a3      	strh	r3, [r4, #12]
 8015cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cd6:	e03e      	b.n	8015d56 <__swsetup_r+0xba>
 8015cd8:	4b25      	ldr	r3, [pc, #148]	; (8015d70 <__swsetup_r+0xd4>)
 8015cda:	429c      	cmp	r4, r3
 8015cdc:	d101      	bne.n	8015ce2 <__swsetup_r+0x46>
 8015cde:	68ac      	ldr	r4, [r5, #8]
 8015ce0:	e7eb      	b.n	8015cba <__swsetup_r+0x1e>
 8015ce2:	4b24      	ldr	r3, [pc, #144]	; (8015d74 <__swsetup_r+0xd8>)
 8015ce4:	429c      	cmp	r4, r3
 8015ce6:	bf08      	it	eq
 8015ce8:	68ec      	ldreq	r4, [r5, #12]
 8015cea:	e7e6      	b.n	8015cba <__swsetup_r+0x1e>
 8015cec:	0758      	lsls	r0, r3, #29
 8015cee:	d512      	bpl.n	8015d16 <__swsetup_r+0x7a>
 8015cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cf2:	b141      	cbz	r1, 8015d06 <__swsetup_r+0x6a>
 8015cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cf8:	4299      	cmp	r1, r3
 8015cfa:	d002      	beq.n	8015d02 <__swsetup_r+0x66>
 8015cfc:	4630      	mov	r0, r6
 8015cfe:	f7ff fe15 	bl	801592c <_free_r>
 8015d02:	2300      	movs	r3, #0
 8015d04:	6363      	str	r3, [r4, #52]	; 0x34
 8015d06:	89a3      	ldrh	r3, [r4, #12]
 8015d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d0c:	81a3      	strh	r3, [r4, #12]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	6063      	str	r3, [r4, #4]
 8015d12:	6923      	ldr	r3, [r4, #16]
 8015d14:	6023      	str	r3, [r4, #0]
 8015d16:	89a3      	ldrh	r3, [r4, #12]
 8015d18:	f043 0308 	orr.w	r3, r3, #8
 8015d1c:	81a3      	strh	r3, [r4, #12]
 8015d1e:	6923      	ldr	r3, [r4, #16]
 8015d20:	b94b      	cbnz	r3, 8015d36 <__swsetup_r+0x9a>
 8015d22:	89a3      	ldrh	r3, [r4, #12]
 8015d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d2c:	d003      	beq.n	8015d36 <__swsetup_r+0x9a>
 8015d2e:	4621      	mov	r1, r4
 8015d30:	4630      	mov	r0, r6
 8015d32:	f000 fa01 	bl	8016138 <__smakebuf_r>
 8015d36:	89a0      	ldrh	r0, [r4, #12]
 8015d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d3c:	f010 0301 	ands.w	r3, r0, #1
 8015d40:	d00a      	beq.n	8015d58 <__swsetup_r+0xbc>
 8015d42:	2300      	movs	r3, #0
 8015d44:	60a3      	str	r3, [r4, #8]
 8015d46:	6963      	ldr	r3, [r4, #20]
 8015d48:	425b      	negs	r3, r3
 8015d4a:	61a3      	str	r3, [r4, #24]
 8015d4c:	6923      	ldr	r3, [r4, #16]
 8015d4e:	b943      	cbnz	r3, 8015d62 <__swsetup_r+0xc6>
 8015d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d54:	d1ba      	bne.n	8015ccc <__swsetup_r+0x30>
 8015d56:	bd70      	pop	{r4, r5, r6, pc}
 8015d58:	0781      	lsls	r1, r0, #30
 8015d5a:	bf58      	it	pl
 8015d5c:	6963      	ldrpl	r3, [r4, #20]
 8015d5e:	60a3      	str	r3, [r4, #8]
 8015d60:	e7f4      	b.n	8015d4c <__swsetup_r+0xb0>
 8015d62:	2000      	movs	r0, #0
 8015d64:	e7f7      	b.n	8015d56 <__swsetup_r+0xba>
 8015d66:	bf00      	nop
 8015d68:	2400009c 	.word	0x2400009c
 8015d6c:	080166e0 	.word	0x080166e0
 8015d70:	08016700 	.word	0x08016700
 8015d74:	080166c0 	.word	0x080166c0

08015d78 <__sflush_r>:
 8015d78:	898a      	ldrh	r2, [r1, #12]
 8015d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7e:	4605      	mov	r5, r0
 8015d80:	0710      	lsls	r0, r2, #28
 8015d82:	460c      	mov	r4, r1
 8015d84:	d458      	bmi.n	8015e38 <__sflush_r+0xc0>
 8015d86:	684b      	ldr	r3, [r1, #4]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	dc05      	bgt.n	8015d98 <__sflush_r+0x20>
 8015d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	dc02      	bgt.n	8015d98 <__sflush_r+0x20>
 8015d92:	2000      	movs	r0, #0
 8015d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d9a:	2e00      	cmp	r6, #0
 8015d9c:	d0f9      	beq.n	8015d92 <__sflush_r+0x1a>
 8015d9e:	2300      	movs	r3, #0
 8015da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015da4:	682f      	ldr	r7, [r5, #0]
 8015da6:	602b      	str	r3, [r5, #0]
 8015da8:	d032      	beq.n	8015e10 <__sflush_r+0x98>
 8015daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015dac:	89a3      	ldrh	r3, [r4, #12]
 8015dae:	075a      	lsls	r2, r3, #29
 8015db0:	d505      	bpl.n	8015dbe <__sflush_r+0x46>
 8015db2:	6863      	ldr	r3, [r4, #4]
 8015db4:	1ac0      	subs	r0, r0, r3
 8015db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015db8:	b10b      	cbz	r3, 8015dbe <__sflush_r+0x46>
 8015dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dbc:	1ac0      	subs	r0, r0, r3
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dc4:	6a21      	ldr	r1, [r4, #32]
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	47b0      	blx	r6
 8015dca:	1c43      	adds	r3, r0, #1
 8015dcc:	89a3      	ldrh	r3, [r4, #12]
 8015dce:	d106      	bne.n	8015dde <__sflush_r+0x66>
 8015dd0:	6829      	ldr	r1, [r5, #0]
 8015dd2:	291d      	cmp	r1, #29
 8015dd4:	d82c      	bhi.n	8015e30 <__sflush_r+0xb8>
 8015dd6:	4a2a      	ldr	r2, [pc, #168]	; (8015e80 <__sflush_r+0x108>)
 8015dd8:	40ca      	lsrs	r2, r1
 8015dda:	07d6      	lsls	r6, r2, #31
 8015ddc:	d528      	bpl.n	8015e30 <__sflush_r+0xb8>
 8015dde:	2200      	movs	r2, #0
 8015de0:	6062      	str	r2, [r4, #4]
 8015de2:	04d9      	lsls	r1, r3, #19
 8015de4:	6922      	ldr	r2, [r4, #16]
 8015de6:	6022      	str	r2, [r4, #0]
 8015de8:	d504      	bpl.n	8015df4 <__sflush_r+0x7c>
 8015dea:	1c42      	adds	r2, r0, #1
 8015dec:	d101      	bne.n	8015df2 <__sflush_r+0x7a>
 8015dee:	682b      	ldr	r3, [r5, #0]
 8015df0:	b903      	cbnz	r3, 8015df4 <__sflush_r+0x7c>
 8015df2:	6560      	str	r0, [r4, #84]	; 0x54
 8015df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015df6:	602f      	str	r7, [r5, #0]
 8015df8:	2900      	cmp	r1, #0
 8015dfa:	d0ca      	beq.n	8015d92 <__sflush_r+0x1a>
 8015dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e00:	4299      	cmp	r1, r3
 8015e02:	d002      	beq.n	8015e0a <__sflush_r+0x92>
 8015e04:	4628      	mov	r0, r5
 8015e06:	f7ff fd91 	bl	801592c <_free_r>
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8015e0e:	e7c1      	b.n	8015d94 <__sflush_r+0x1c>
 8015e10:	6a21      	ldr	r1, [r4, #32]
 8015e12:	2301      	movs	r3, #1
 8015e14:	4628      	mov	r0, r5
 8015e16:	47b0      	blx	r6
 8015e18:	1c41      	adds	r1, r0, #1
 8015e1a:	d1c7      	bne.n	8015dac <__sflush_r+0x34>
 8015e1c:	682b      	ldr	r3, [r5, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d0c4      	beq.n	8015dac <__sflush_r+0x34>
 8015e22:	2b1d      	cmp	r3, #29
 8015e24:	d001      	beq.n	8015e2a <__sflush_r+0xb2>
 8015e26:	2b16      	cmp	r3, #22
 8015e28:	d101      	bne.n	8015e2e <__sflush_r+0xb6>
 8015e2a:	602f      	str	r7, [r5, #0]
 8015e2c:	e7b1      	b.n	8015d92 <__sflush_r+0x1a>
 8015e2e:	89a3      	ldrh	r3, [r4, #12]
 8015e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e34:	81a3      	strh	r3, [r4, #12]
 8015e36:	e7ad      	b.n	8015d94 <__sflush_r+0x1c>
 8015e38:	690f      	ldr	r7, [r1, #16]
 8015e3a:	2f00      	cmp	r7, #0
 8015e3c:	d0a9      	beq.n	8015d92 <__sflush_r+0x1a>
 8015e3e:	0793      	lsls	r3, r2, #30
 8015e40:	680e      	ldr	r6, [r1, #0]
 8015e42:	bf08      	it	eq
 8015e44:	694b      	ldreq	r3, [r1, #20]
 8015e46:	600f      	str	r7, [r1, #0]
 8015e48:	bf18      	it	ne
 8015e4a:	2300      	movne	r3, #0
 8015e4c:	eba6 0807 	sub.w	r8, r6, r7
 8015e50:	608b      	str	r3, [r1, #8]
 8015e52:	f1b8 0f00 	cmp.w	r8, #0
 8015e56:	dd9c      	ble.n	8015d92 <__sflush_r+0x1a>
 8015e58:	6a21      	ldr	r1, [r4, #32]
 8015e5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e5c:	4643      	mov	r3, r8
 8015e5e:	463a      	mov	r2, r7
 8015e60:	4628      	mov	r0, r5
 8015e62:	47b0      	blx	r6
 8015e64:	2800      	cmp	r0, #0
 8015e66:	dc06      	bgt.n	8015e76 <__sflush_r+0xfe>
 8015e68:	89a3      	ldrh	r3, [r4, #12]
 8015e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e6e:	81a3      	strh	r3, [r4, #12]
 8015e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e74:	e78e      	b.n	8015d94 <__sflush_r+0x1c>
 8015e76:	4407      	add	r7, r0
 8015e78:	eba8 0800 	sub.w	r8, r8, r0
 8015e7c:	e7e9      	b.n	8015e52 <__sflush_r+0xda>
 8015e7e:	bf00      	nop
 8015e80:	20400001 	.word	0x20400001

08015e84 <_fflush_r>:
 8015e84:	b538      	push	{r3, r4, r5, lr}
 8015e86:	690b      	ldr	r3, [r1, #16]
 8015e88:	4605      	mov	r5, r0
 8015e8a:	460c      	mov	r4, r1
 8015e8c:	b913      	cbnz	r3, 8015e94 <_fflush_r+0x10>
 8015e8e:	2500      	movs	r5, #0
 8015e90:	4628      	mov	r0, r5
 8015e92:	bd38      	pop	{r3, r4, r5, pc}
 8015e94:	b118      	cbz	r0, 8015e9e <_fflush_r+0x1a>
 8015e96:	6983      	ldr	r3, [r0, #24]
 8015e98:	b90b      	cbnz	r3, 8015e9e <_fflush_r+0x1a>
 8015e9a:	f000 f887 	bl	8015fac <__sinit>
 8015e9e:	4b14      	ldr	r3, [pc, #80]	; (8015ef0 <_fflush_r+0x6c>)
 8015ea0:	429c      	cmp	r4, r3
 8015ea2:	d11b      	bne.n	8015edc <_fflush_r+0x58>
 8015ea4:	686c      	ldr	r4, [r5, #4]
 8015ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d0ef      	beq.n	8015e8e <_fflush_r+0xa>
 8015eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eb0:	07d0      	lsls	r0, r2, #31
 8015eb2:	d404      	bmi.n	8015ebe <_fflush_r+0x3a>
 8015eb4:	0599      	lsls	r1, r3, #22
 8015eb6:	d402      	bmi.n	8015ebe <_fflush_r+0x3a>
 8015eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eba:	f000 f915 	bl	80160e8 <__retarget_lock_acquire_recursive>
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	4621      	mov	r1, r4
 8015ec2:	f7ff ff59 	bl	8015d78 <__sflush_r>
 8015ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ec8:	07da      	lsls	r2, r3, #31
 8015eca:	4605      	mov	r5, r0
 8015ecc:	d4e0      	bmi.n	8015e90 <_fflush_r+0xc>
 8015ece:	89a3      	ldrh	r3, [r4, #12]
 8015ed0:	059b      	lsls	r3, r3, #22
 8015ed2:	d4dd      	bmi.n	8015e90 <_fflush_r+0xc>
 8015ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ed6:	f000 f908 	bl	80160ea <__retarget_lock_release_recursive>
 8015eda:	e7d9      	b.n	8015e90 <_fflush_r+0xc>
 8015edc:	4b05      	ldr	r3, [pc, #20]	; (8015ef4 <_fflush_r+0x70>)
 8015ede:	429c      	cmp	r4, r3
 8015ee0:	d101      	bne.n	8015ee6 <_fflush_r+0x62>
 8015ee2:	68ac      	ldr	r4, [r5, #8]
 8015ee4:	e7df      	b.n	8015ea6 <_fflush_r+0x22>
 8015ee6:	4b04      	ldr	r3, [pc, #16]	; (8015ef8 <_fflush_r+0x74>)
 8015ee8:	429c      	cmp	r4, r3
 8015eea:	bf08      	it	eq
 8015eec:	68ec      	ldreq	r4, [r5, #12]
 8015eee:	e7da      	b.n	8015ea6 <_fflush_r+0x22>
 8015ef0:	080166e0 	.word	0x080166e0
 8015ef4:	08016700 	.word	0x08016700
 8015ef8:	080166c0 	.word	0x080166c0

08015efc <std>:
 8015efc:	2300      	movs	r3, #0
 8015efe:	b510      	push	{r4, lr}
 8015f00:	4604      	mov	r4, r0
 8015f02:	e9c0 3300 	strd	r3, r3, [r0]
 8015f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f0a:	6083      	str	r3, [r0, #8]
 8015f0c:	8181      	strh	r1, [r0, #12]
 8015f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8015f10:	81c2      	strh	r2, [r0, #14]
 8015f12:	6183      	str	r3, [r0, #24]
 8015f14:	4619      	mov	r1, r3
 8015f16:	2208      	movs	r2, #8
 8015f18:	305c      	adds	r0, #92	; 0x5c
 8015f1a:	f7ff fcff 	bl	801591c <memset>
 8015f1e:	4b05      	ldr	r3, [pc, #20]	; (8015f34 <std+0x38>)
 8015f20:	6263      	str	r3, [r4, #36]	; 0x24
 8015f22:	4b05      	ldr	r3, [pc, #20]	; (8015f38 <std+0x3c>)
 8015f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f26:	4b05      	ldr	r3, [pc, #20]	; (8015f3c <std+0x40>)
 8015f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f2a:	4b05      	ldr	r3, [pc, #20]	; (8015f40 <std+0x44>)
 8015f2c:	6224      	str	r4, [r4, #32]
 8015f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8015f30:	bd10      	pop	{r4, pc}
 8015f32:	bf00      	nop
 8015f34:	080161d1 	.word	0x080161d1
 8015f38:	080161f3 	.word	0x080161f3
 8015f3c:	0801622b 	.word	0x0801622b
 8015f40:	0801624f 	.word	0x0801624f

08015f44 <_cleanup_r>:
 8015f44:	4901      	ldr	r1, [pc, #4]	; (8015f4c <_cleanup_r+0x8>)
 8015f46:	f000 b8af 	b.w	80160a8 <_fwalk_reent>
 8015f4a:	bf00      	nop
 8015f4c:	08015e85 	.word	0x08015e85

08015f50 <__sfmoreglue>:
 8015f50:	b570      	push	{r4, r5, r6, lr}
 8015f52:	2268      	movs	r2, #104	; 0x68
 8015f54:	1e4d      	subs	r5, r1, #1
 8015f56:	4355      	muls	r5, r2
 8015f58:	460e      	mov	r6, r1
 8015f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f5e:	f7ff fd51 	bl	8015a04 <_malloc_r>
 8015f62:	4604      	mov	r4, r0
 8015f64:	b140      	cbz	r0, 8015f78 <__sfmoreglue+0x28>
 8015f66:	2100      	movs	r1, #0
 8015f68:	e9c0 1600 	strd	r1, r6, [r0]
 8015f6c:	300c      	adds	r0, #12
 8015f6e:	60a0      	str	r0, [r4, #8]
 8015f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f74:	f7ff fcd2 	bl	801591c <memset>
 8015f78:	4620      	mov	r0, r4
 8015f7a:	bd70      	pop	{r4, r5, r6, pc}

08015f7c <__sfp_lock_acquire>:
 8015f7c:	4801      	ldr	r0, [pc, #4]	; (8015f84 <__sfp_lock_acquire+0x8>)
 8015f7e:	f000 b8b3 	b.w	80160e8 <__retarget_lock_acquire_recursive>
 8015f82:	bf00      	nop
 8015f84:	24005595 	.word	0x24005595

08015f88 <__sfp_lock_release>:
 8015f88:	4801      	ldr	r0, [pc, #4]	; (8015f90 <__sfp_lock_release+0x8>)
 8015f8a:	f000 b8ae 	b.w	80160ea <__retarget_lock_release_recursive>
 8015f8e:	bf00      	nop
 8015f90:	24005595 	.word	0x24005595

08015f94 <__sinit_lock_acquire>:
 8015f94:	4801      	ldr	r0, [pc, #4]	; (8015f9c <__sinit_lock_acquire+0x8>)
 8015f96:	f000 b8a7 	b.w	80160e8 <__retarget_lock_acquire_recursive>
 8015f9a:	bf00      	nop
 8015f9c:	24005596 	.word	0x24005596

08015fa0 <__sinit_lock_release>:
 8015fa0:	4801      	ldr	r0, [pc, #4]	; (8015fa8 <__sinit_lock_release+0x8>)
 8015fa2:	f000 b8a2 	b.w	80160ea <__retarget_lock_release_recursive>
 8015fa6:	bf00      	nop
 8015fa8:	24005596 	.word	0x24005596

08015fac <__sinit>:
 8015fac:	b510      	push	{r4, lr}
 8015fae:	4604      	mov	r4, r0
 8015fb0:	f7ff fff0 	bl	8015f94 <__sinit_lock_acquire>
 8015fb4:	69a3      	ldr	r3, [r4, #24]
 8015fb6:	b11b      	cbz	r3, 8015fc0 <__sinit+0x14>
 8015fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fbc:	f7ff bff0 	b.w	8015fa0 <__sinit_lock_release>
 8015fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8015fc6:	4b13      	ldr	r3, [pc, #76]	; (8016014 <__sinit+0x68>)
 8015fc8:	4a13      	ldr	r2, [pc, #76]	; (8016018 <__sinit+0x6c>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8015fce:	42a3      	cmp	r3, r4
 8015fd0:	bf04      	itt	eq
 8015fd2:	2301      	moveq	r3, #1
 8015fd4:	61a3      	streq	r3, [r4, #24]
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	f000 f820 	bl	801601c <__sfp>
 8015fdc:	6060      	str	r0, [r4, #4]
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f000 f81c 	bl	801601c <__sfp>
 8015fe4:	60a0      	str	r0, [r4, #8]
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f000 f818 	bl	801601c <__sfp>
 8015fec:	2200      	movs	r2, #0
 8015fee:	60e0      	str	r0, [r4, #12]
 8015ff0:	2104      	movs	r1, #4
 8015ff2:	6860      	ldr	r0, [r4, #4]
 8015ff4:	f7ff ff82 	bl	8015efc <std>
 8015ff8:	68a0      	ldr	r0, [r4, #8]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	2109      	movs	r1, #9
 8015ffe:	f7ff ff7d 	bl	8015efc <std>
 8016002:	68e0      	ldr	r0, [r4, #12]
 8016004:	2202      	movs	r2, #2
 8016006:	2112      	movs	r1, #18
 8016008:	f7ff ff78 	bl	8015efc <std>
 801600c:	2301      	movs	r3, #1
 801600e:	61a3      	str	r3, [r4, #24]
 8016010:	e7d2      	b.n	8015fb8 <__sinit+0xc>
 8016012:	bf00      	nop
 8016014:	080166bc 	.word	0x080166bc
 8016018:	08015f45 	.word	0x08015f45

0801601c <__sfp>:
 801601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601e:	4607      	mov	r7, r0
 8016020:	f7ff ffac 	bl	8015f7c <__sfp_lock_acquire>
 8016024:	4b1e      	ldr	r3, [pc, #120]	; (80160a0 <__sfp+0x84>)
 8016026:	681e      	ldr	r6, [r3, #0]
 8016028:	69b3      	ldr	r3, [r6, #24]
 801602a:	b913      	cbnz	r3, 8016032 <__sfp+0x16>
 801602c:	4630      	mov	r0, r6
 801602e:	f7ff ffbd 	bl	8015fac <__sinit>
 8016032:	3648      	adds	r6, #72	; 0x48
 8016034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016038:	3b01      	subs	r3, #1
 801603a:	d503      	bpl.n	8016044 <__sfp+0x28>
 801603c:	6833      	ldr	r3, [r6, #0]
 801603e:	b30b      	cbz	r3, 8016084 <__sfp+0x68>
 8016040:	6836      	ldr	r6, [r6, #0]
 8016042:	e7f7      	b.n	8016034 <__sfp+0x18>
 8016044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016048:	b9d5      	cbnz	r5, 8016080 <__sfp+0x64>
 801604a:	4b16      	ldr	r3, [pc, #88]	; (80160a4 <__sfp+0x88>)
 801604c:	60e3      	str	r3, [r4, #12]
 801604e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016052:	6665      	str	r5, [r4, #100]	; 0x64
 8016054:	f000 f847 	bl	80160e6 <__retarget_lock_init_recursive>
 8016058:	f7ff ff96 	bl	8015f88 <__sfp_lock_release>
 801605c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016064:	6025      	str	r5, [r4, #0]
 8016066:	61a5      	str	r5, [r4, #24]
 8016068:	2208      	movs	r2, #8
 801606a:	4629      	mov	r1, r5
 801606c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016070:	f7ff fc54 	bl	801591c <memset>
 8016074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801607c:	4620      	mov	r0, r4
 801607e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016080:	3468      	adds	r4, #104	; 0x68
 8016082:	e7d9      	b.n	8016038 <__sfp+0x1c>
 8016084:	2104      	movs	r1, #4
 8016086:	4638      	mov	r0, r7
 8016088:	f7ff ff62 	bl	8015f50 <__sfmoreglue>
 801608c:	4604      	mov	r4, r0
 801608e:	6030      	str	r0, [r6, #0]
 8016090:	2800      	cmp	r0, #0
 8016092:	d1d5      	bne.n	8016040 <__sfp+0x24>
 8016094:	f7ff ff78 	bl	8015f88 <__sfp_lock_release>
 8016098:	230c      	movs	r3, #12
 801609a:	603b      	str	r3, [r7, #0]
 801609c:	e7ee      	b.n	801607c <__sfp+0x60>
 801609e:	bf00      	nop
 80160a0:	080166bc 	.word	0x080166bc
 80160a4:	ffff0001 	.word	0xffff0001

080160a8 <_fwalk_reent>:
 80160a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160ac:	4606      	mov	r6, r0
 80160ae:	4688      	mov	r8, r1
 80160b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160b4:	2700      	movs	r7, #0
 80160b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160ba:	f1b9 0901 	subs.w	r9, r9, #1
 80160be:	d505      	bpl.n	80160cc <_fwalk_reent+0x24>
 80160c0:	6824      	ldr	r4, [r4, #0]
 80160c2:	2c00      	cmp	r4, #0
 80160c4:	d1f7      	bne.n	80160b6 <_fwalk_reent+0xe>
 80160c6:	4638      	mov	r0, r7
 80160c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160cc:	89ab      	ldrh	r3, [r5, #12]
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d907      	bls.n	80160e2 <_fwalk_reent+0x3a>
 80160d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160d6:	3301      	adds	r3, #1
 80160d8:	d003      	beq.n	80160e2 <_fwalk_reent+0x3a>
 80160da:	4629      	mov	r1, r5
 80160dc:	4630      	mov	r0, r6
 80160de:	47c0      	blx	r8
 80160e0:	4307      	orrs	r7, r0
 80160e2:	3568      	adds	r5, #104	; 0x68
 80160e4:	e7e9      	b.n	80160ba <_fwalk_reent+0x12>

080160e6 <__retarget_lock_init_recursive>:
 80160e6:	4770      	bx	lr

080160e8 <__retarget_lock_acquire_recursive>:
 80160e8:	4770      	bx	lr

080160ea <__retarget_lock_release_recursive>:
 80160ea:	4770      	bx	lr

080160ec <__swhatbuf_r>:
 80160ec:	b570      	push	{r4, r5, r6, lr}
 80160ee:	460e      	mov	r6, r1
 80160f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160f4:	2900      	cmp	r1, #0
 80160f6:	b096      	sub	sp, #88	; 0x58
 80160f8:	4614      	mov	r4, r2
 80160fa:	461d      	mov	r5, r3
 80160fc:	da08      	bge.n	8016110 <__swhatbuf_r+0x24>
 80160fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016102:	2200      	movs	r2, #0
 8016104:	602a      	str	r2, [r5, #0]
 8016106:	061a      	lsls	r2, r3, #24
 8016108:	d410      	bmi.n	801612c <__swhatbuf_r+0x40>
 801610a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801610e:	e00e      	b.n	801612e <__swhatbuf_r+0x42>
 8016110:	466a      	mov	r2, sp
 8016112:	f000 f8c3 	bl	801629c <_fstat_r>
 8016116:	2800      	cmp	r0, #0
 8016118:	dbf1      	blt.n	80160fe <__swhatbuf_r+0x12>
 801611a:	9a01      	ldr	r2, [sp, #4]
 801611c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016124:	425a      	negs	r2, r3
 8016126:	415a      	adcs	r2, r3
 8016128:	602a      	str	r2, [r5, #0]
 801612a:	e7ee      	b.n	801610a <__swhatbuf_r+0x1e>
 801612c:	2340      	movs	r3, #64	; 0x40
 801612e:	2000      	movs	r0, #0
 8016130:	6023      	str	r3, [r4, #0]
 8016132:	b016      	add	sp, #88	; 0x58
 8016134:	bd70      	pop	{r4, r5, r6, pc}
	...

08016138 <__smakebuf_r>:
 8016138:	898b      	ldrh	r3, [r1, #12]
 801613a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801613c:	079d      	lsls	r5, r3, #30
 801613e:	4606      	mov	r6, r0
 8016140:	460c      	mov	r4, r1
 8016142:	d507      	bpl.n	8016154 <__smakebuf_r+0x1c>
 8016144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016148:	6023      	str	r3, [r4, #0]
 801614a:	6123      	str	r3, [r4, #16]
 801614c:	2301      	movs	r3, #1
 801614e:	6163      	str	r3, [r4, #20]
 8016150:	b002      	add	sp, #8
 8016152:	bd70      	pop	{r4, r5, r6, pc}
 8016154:	ab01      	add	r3, sp, #4
 8016156:	466a      	mov	r2, sp
 8016158:	f7ff ffc8 	bl	80160ec <__swhatbuf_r>
 801615c:	9900      	ldr	r1, [sp, #0]
 801615e:	4605      	mov	r5, r0
 8016160:	4630      	mov	r0, r6
 8016162:	f7ff fc4f 	bl	8015a04 <_malloc_r>
 8016166:	b948      	cbnz	r0, 801617c <__smakebuf_r+0x44>
 8016168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801616c:	059a      	lsls	r2, r3, #22
 801616e:	d4ef      	bmi.n	8016150 <__smakebuf_r+0x18>
 8016170:	f023 0303 	bic.w	r3, r3, #3
 8016174:	f043 0302 	orr.w	r3, r3, #2
 8016178:	81a3      	strh	r3, [r4, #12]
 801617a:	e7e3      	b.n	8016144 <__smakebuf_r+0xc>
 801617c:	4b0d      	ldr	r3, [pc, #52]	; (80161b4 <__smakebuf_r+0x7c>)
 801617e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016180:	89a3      	ldrh	r3, [r4, #12]
 8016182:	6020      	str	r0, [r4, #0]
 8016184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016188:	81a3      	strh	r3, [r4, #12]
 801618a:	9b00      	ldr	r3, [sp, #0]
 801618c:	6163      	str	r3, [r4, #20]
 801618e:	9b01      	ldr	r3, [sp, #4]
 8016190:	6120      	str	r0, [r4, #16]
 8016192:	b15b      	cbz	r3, 80161ac <__smakebuf_r+0x74>
 8016194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016198:	4630      	mov	r0, r6
 801619a:	f000 f891 	bl	80162c0 <_isatty_r>
 801619e:	b128      	cbz	r0, 80161ac <__smakebuf_r+0x74>
 80161a0:	89a3      	ldrh	r3, [r4, #12]
 80161a2:	f023 0303 	bic.w	r3, r3, #3
 80161a6:	f043 0301 	orr.w	r3, r3, #1
 80161aa:	81a3      	strh	r3, [r4, #12]
 80161ac:	89a0      	ldrh	r0, [r4, #12]
 80161ae:	4305      	orrs	r5, r0
 80161b0:	81a5      	strh	r5, [r4, #12]
 80161b2:	e7cd      	b.n	8016150 <__smakebuf_r+0x18>
 80161b4:	08015f45 	.word	0x08015f45

080161b8 <__malloc_lock>:
 80161b8:	4801      	ldr	r0, [pc, #4]	; (80161c0 <__malloc_lock+0x8>)
 80161ba:	f7ff bf95 	b.w	80160e8 <__retarget_lock_acquire_recursive>
 80161be:	bf00      	nop
 80161c0:	24005594 	.word	0x24005594

080161c4 <__malloc_unlock>:
 80161c4:	4801      	ldr	r0, [pc, #4]	; (80161cc <__malloc_unlock+0x8>)
 80161c6:	f7ff bf90 	b.w	80160ea <__retarget_lock_release_recursive>
 80161ca:	bf00      	nop
 80161cc:	24005594 	.word	0x24005594

080161d0 <__sread>:
 80161d0:	b510      	push	{r4, lr}
 80161d2:	460c      	mov	r4, r1
 80161d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161d8:	f000 f894 	bl	8016304 <_read_r>
 80161dc:	2800      	cmp	r0, #0
 80161de:	bfab      	itete	ge
 80161e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80161e2:	89a3      	ldrhlt	r3, [r4, #12]
 80161e4:	181b      	addge	r3, r3, r0
 80161e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80161ea:	bfac      	ite	ge
 80161ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80161ee:	81a3      	strhlt	r3, [r4, #12]
 80161f0:	bd10      	pop	{r4, pc}

080161f2 <__swrite>:
 80161f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f6:	461f      	mov	r7, r3
 80161f8:	898b      	ldrh	r3, [r1, #12]
 80161fa:	05db      	lsls	r3, r3, #23
 80161fc:	4605      	mov	r5, r0
 80161fe:	460c      	mov	r4, r1
 8016200:	4616      	mov	r6, r2
 8016202:	d505      	bpl.n	8016210 <__swrite+0x1e>
 8016204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016208:	2302      	movs	r3, #2
 801620a:	2200      	movs	r2, #0
 801620c:	f000 f868 	bl	80162e0 <_lseek_r>
 8016210:	89a3      	ldrh	r3, [r4, #12]
 8016212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801621a:	81a3      	strh	r3, [r4, #12]
 801621c:	4632      	mov	r2, r6
 801621e:	463b      	mov	r3, r7
 8016220:	4628      	mov	r0, r5
 8016222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016226:	f000 b817 	b.w	8016258 <_write_r>

0801622a <__sseek>:
 801622a:	b510      	push	{r4, lr}
 801622c:	460c      	mov	r4, r1
 801622e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016232:	f000 f855 	bl	80162e0 <_lseek_r>
 8016236:	1c43      	adds	r3, r0, #1
 8016238:	89a3      	ldrh	r3, [r4, #12]
 801623a:	bf15      	itete	ne
 801623c:	6560      	strne	r0, [r4, #84]	; 0x54
 801623e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016246:	81a3      	strheq	r3, [r4, #12]
 8016248:	bf18      	it	ne
 801624a:	81a3      	strhne	r3, [r4, #12]
 801624c:	bd10      	pop	{r4, pc}

0801624e <__sclose>:
 801624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016252:	f000 b813 	b.w	801627c <_close_r>
	...

08016258 <_write_r>:
 8016258:	b538      	push	{r3, r4, r5, lr}
 801625a:	4d07      	ldr	r5, [pc, #28]	; (8016278 <_write_r+0x20>)
 801625c:	4604      	mov	r4, r0
 801625e:	4608      	mov	r0, r1
 8016260:	4611      	mov	r1, r2
 8016262:	2200      	movs	r2, #0
 8016264:	602a      	str	r2, [r5, #0]
 8016266:	461a      	mov	r2, r3
 8016268:	f7ed f903 	bl	8003472 <_write>
 801626c:	1c43      	adds	r3, r0, #1
 801626e:	d102      	bne.n	8016276 <_write_r+0x1e>
 8016270:	682b      	ldr	r3, [r5, #0]
 8016272:	b103      	cbz	r3, 8016276 <_write_r+0x1e>
 8016274:	6023      	str	r3, [r4, #0]
 8016276:	bd38      	pop	{r3, r4, r5, pc}
 8016278:	24005598 	.word	0x24005598

0801627c <_close_r>:
 801627c:	b538      	push	{r3, r4, r5, lr}
 801627e:	4d06      	ldr	r5, [pc, #24]	; (8016298 <_close_r+0x1c>)
 8016280:	2300      	movs	r3, #0
 8016282:	4604      	mov	r4, r0
 8016284:	4608      	mov	r0, r1
 8016286:	602b      	str	r3, [r5, #0]
 8016288:	f7ed f90f 	bl	80034aa <_close>
 801628c:	1c43      	adds	r3, r0, #1
 801628e:	d102      	bne.n	8016296 <_close_r+0x1a>
 8016290:	682b      	ldr	r3, [r5, #0]
 8016292:	b103      	cbz	r3, 8016296 <_close_r+0x1a>
 8016294:	6023      	str	r3, [r4, #0]
 8016296:	bd38      	pop	{r3, r4, r5, pc}
 8016298:	24005598 	.word	0x24005598

0801629c <_fstat_r>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	4d07      	ldr	r5, [pc, #28]	; (80162bc <_fstat_r+0x20>)
 80162a0:	2300      	movs	r3, #0
 80162a2:	4604      	mov	r4, r0
 80162a4:	4608      	mov	r0, r1
 80162a6:	4611      	mov	r1, r2
 80162a8:	602b      	str	r3, [r5, #0]
 80162aa:	f7ed f90a 	bl	80034c2 <_fstat>
 80162ae:	1c43      	adds	r3, r0, #1
 80162b0:	d102      	bne.n	80162b8 <_fstat_r+0x1c>
 80162b2:	682b      	ldr	r3, [r5, #0]
 80162b4:	b103      	cbz	r3, 80162b8 <_fstat_r+0x1c>
 80162b6:	6023      	str	r3, [r4, #0]
 80162b8:	bd38      	pop	{r3, r4, r5, pc}
 80162ba:	bf00      	nop
 80162bc:	24005598 	.word	0x24005598

080162c0 <_isatty_r>:
 80162c0:	b538      	push	{r3, r4, r5, lr}
 80162c2:	4d06      	ldr	r5, [pc, #24]	; (80162dc <_isatty_r+0x1c>)
 80162c4:	2300      	movs	r3, #0
 80162c6:	4604      	mov	r4, r0
 80162c8:	4608      	mov	r0, r1
 80162ca:	602b      	str	r3, [r5, #0]
 80162cc:	f7ed f909 	bl	80034e2 <_isatty>
 80162d0:	1c43      	adds	r3, r0, #1
 80162d2:	d102      	bne.n	80162da <_isatty_r+0x1a>
 80162d4:	682b      	ldr	r3, [r5, #0]
 80162d6:	b103      	cbz	r3, 80162da <_isatty_r+0x1a>
 80162d8:	6023      	str	r3, [r4, #0]
 80162da:	bd38      	pop	{r3, r4, r5, pc}
 80162dc:	24005598 	.word	0x24005598

080162e0 <_lseek_r>:
 80162e0:	b538      	push	{r3, r4, r5, lr}
 80162e2:	4d07      	ldr	r5, [pc, #28]	; (8016300 <_lseek_r+0x20>)
 80162e4:	4604      	mov	r4, r0
 80162e6:	4608      	mov	r0, r1
 80162e8:	4611      	mov	r1, r2
 80162ea:	2200      	movs	r2, #0
 80162ec:	602a      	str	r2, [r5, #0]
 80162ee:	461a      	mov	r2, r3
 80162f0:	f7ed f902 	bl	80034f8 <_lseek>
 80162f4:	1c43      	adds	r3, r0, #1
 80162f6:	d102      	bne.n	80162fe <_lseek_r+0x1e>
 80162f8:	682b      	ldr	r3, [r5, #0]
 80162fa:	b103      	cbz	r3, 80162fe <_lseek_r+0x1e>
 80162fc:	6023      	str	r3, [r4, #0]
 80162fe:	bd38      	pop	{r3, r4, r5, pc}
 8016300:	24005598 	.word	0x24005598

08016304 <_read_r>:
 8016304:	b538      	push	{r3, r4, r5, lr}
 8016306:	4d07      	ldr	r5, [pc, #28]	; (8016324 <_read_r+0x20>)
 8016308:	4604      	mov	r4, r0
 801630a:	4608      	mov	r0, r1
 801630c:	4611      	mov	r1, r2
 801630e:	2200      	movs	r2, #0
 8016310:	602a      	str	r2, [r5, #0]
 8016312:	461a      	mov	r2, r3
 8016314:	f7ed f890 	bl	8003438 <_read>
 8016318:	1c43      	adds	r3, r0, #1
 801631a:	d102      	bne.n	8016322 <_read_r+0x1e>
 801631c:	682b      	ldr	r3, [r5, #0]
 801631e:	b103      	cbz	r3, 8016322 <_read_r+0x1e>
 8016320:	6023      	str	r3, [r4, #0]
 8016322:	bd38      	pop	{r3, r4, r5, pc}
 8016324:	24005598 	.word	0x24005598

08016328 <_init>:
 8016328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801632a:	bf00      	nop
 801632c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801632e:	bc08      	pop	{r3}
 8016330:	469e      	mov	lr, r3
 8016332:	4770      	bx	lr

08016334 <_fini>:
 8016334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016336:	bf00      	nop
 8016338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801633a:	bc08      	pop	{r3}
 801633c:	469e      	mov	lr, r3
 801633e:	4770      	bx	lr
