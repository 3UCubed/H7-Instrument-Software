
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017180  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08017420  08017420  00027420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017900  08017900  00027900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017908  08017908  00027908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801790c  0801790c  0002790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08017910  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005928  24000120  08017a14  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a48  08017a14  00035a48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033c1d  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005708  00000000  00000000  00063d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00069458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000323ad  00000000  00000000  000ae236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194be1  00000000  00000000  000e05e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002751c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0cc  00000000  00000000  00275214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017408 	.word	0x08017408

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017408 	.word	0x08017408

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c00 	.word	0x24000c00

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fe04 	bl	8013224 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e01e      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fdf9 	bl	8013224 <osEventFlagsSet>
}
 8000632:	e013      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d10c      	bne.n	8000656 <HAL_TIM_OC_DelayElapsedCallback+0x56>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2108      	movs	r1, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fdee 	bl	8013224 <osEventFlagsSet>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f012 fde8 	bl	8013224 <osEventFlagsSet>
}
 8000654:	e002      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		printf("Unknown Timer Interrupt\n");
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000658:	f016 fb26 	bl	8016ca8 <puts>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	24000508 	.word	0x24000508
 8000668:	24000c20 	.word	0x24000c20
 800066c:	24000554 	.word	0x24000554
 8000670:	240005a0 	.word	0x240005a0
 8000674:	080174a8 	.word	0x080174a8

08000678 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	49f2      	ldr	r1, [pc, #968]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 8000684:	48f2      	ldr	r0, [pc, #968]	; (8000a50 <HAL_UART_RxCpltCallback+0x3d8>)
 8000686:	f00f fe43 	bl	8010310 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800068a:	4bf0      	ldr	r3, [pc, #960]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	72fb      	strb	r3, [r7, #11]

	switch (key) {
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	2be0      	cmp	r3, #224	; 0xe0
 8000694:	f200 8430 	bhi.w	8000ef8 <HAL_UART_RxCpltCallback+0x880>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <HAL_UART_RxCpltCallback+0x28>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	08000a39 	.word	0x08000a39
 80006a4:	08000a7b 	.word	0x08000a7b
 80006a8:	08000b01 	.word	0x08000b01
 80006ac:	08000b37 	.word	0x08000b37
 80006b0:	08000b6b 	.word	0x08000b6b
 80006b4:	08000ba1 	.word	0x08000ba1
 80006b8:	08000bd9 	.word	0x08000bd9
 80006bc:	08000c11 	.word	0x08000c11
 80006c0:	08000c47 	.word	0x08000c47
 80006c4:	08000c79 	.word	0x08000c79
 80006c8:	08000cab 	.word	0x08000cab
 80006cc:	08000ce3 	.word	0x08000ce3
 80006d0:	08000d13 	.word	0x08000d13
 80006d4:	08000e13 	.word	0x08000e13
 80006d8:	08000e7b 	.word	0x08000e7b
 80006dc:	08000ea3 	.word	0x08000ea3
 80006e0:	08000a25 	.word	0x08000a25
 80006e4:	08000a61 	.word	0x08000a61
 80006e8:	08000ae5 	.word	0x08000ae5
 80006ec:	08000b1d 	.word	0x08000b1d
 80006f0:	08000b51 	.word	0x08000b51
 80006f4:	08000b85 	.word	0x08000b85
 80006f8:	08000bbd 	.word	0x08000bbd
 80006fc:	08000bf5 	.word	0x08000bf5
 8000700:	08000c2d 	.word	0x08000c2d
 8000704:	08000c61 	.word	0x08000c61
 8000708:	08000c89 	.word	0x08000c89
 800070c:	08000cc1 	.word	0x08000cc1
 8000710:	08000cf9 	.word	0x08000cf9
 8000714:	08000dd1 	.word	0x08000dd1
 8000718:	08000e53 	.word	0x08000e53
 800071c:	08000ef9 	.word	0x08000ef9
 8000720:	08000ef9 	.word	0x08000ef9
 8000724:	08000ef9 	.word	0x08000ef9
 8000728:	08000ef9 	.word	0x08000ef9
 800072c:	08000ef9 	.word	0x08000ef9
 8000730:	08000ef9 	.word	0x08000ef9
 8000734:	08000ef9 	.word	0x08000ef9
 8000738:	08000ef9 	.word	0x08000ef9
 800073c:	08000ef9 	.word	0x08000ef9
 8000740:	08000ef9 	.word	0x08000ef9
 8000744:	08000ef9 	.word	0x08000ef9
 8000748:	08000ef9 	.word	0x08000ef9
 800074c:	08000ef9 	.word	0x08000ef9
 8000750:	08000ef9 	.word	0x08000ef9
 8000754:	08000ef9 	.word	0x08000ef9
 8000758:	08000ef9 	.word	0x08000ef9
 800075c:	08000ef9 	.word	0x08000ef9
 8000760:	08000ef9 	.word	0x08000ef9
 8000764:	08000ef9 	.word	0x08000ef9
 8000768:	08000ef9 	.word	0x08000ef9
 800076c:	08000ef9 	.word	0x08000ef9
 8000770:	08000ef9 	.word	0x08000ef9
 8000774:	08000ef9 	.word	0x08000ef9
 8000778:	08000ef9 	.word	0x08000ef9
 800077c:	08000ef9 	.word	0x08000ef9
 8000780:	08000ef9 	.word	0x08000ef9
 8000784:	08000ef9 	.word	0x08000ef9
 8000788:	08000ef9 	.word	0x08000ef9
 800078c:	08000ef9 	.word	0x08000ef9
 8000790:	08000ef9 	.word	0x08000ef9
 8000794:	08000ef9 	.word	0x08000ef9
 8000798:	08000ef9 	.word	0x08000ef9
 800079c:	08000ef9 	.word	0x08000ef9
 80007a0:	08000ef9 	.word	0x08000ef9
 80007a4:	08000ef9 	.word	0x08000ef9
 80007a8:	08000ef9 	.word	0x08000ef9
 80007ac:	08000ef9 	.word	0x08000ef9
 80007b0:	08000ef9 	.word	0x08000ef9
 80007b4:	08000ef9 	.word	0x08000ef9
 80007b8:	08000ef9 	.word	0x08000ef9
 80007bc:	08000ef9 	.word	0x08000ef9
 80007c0:	08000ef9 	.word	0x08000ef9
 80007c4:	08000ef9 	.word	0x08000ef9
 80007c8:	08000ef9 	.word	0x08000ef9
 80007cc:	08000ef9 	.word	0x08000ef9
 80007d0:	08000ef9 	.word	0x08000ef9
 80007d4:	08000ef9 	.word	0x08000ef9
 80007d8:	08000ef9 	.word	0x08000ef9
 80007dc:	08000ef9 	.word	0x08000ef9
 80007e0:	08000ef9 	.word	0x08000ef9
 80007e4:	08000ef9 	.word	0x08000ef9
 80007e8:	08000ef9 	.word	0x08000ef9
 80007ec:	08000ef9 	.word	0x08000ef9
 80007f0:	08000ef9 	.word	0x08000ef9
 80007f4:	08000ef9 	.word	0x08000ef9
 80007f8:	08000ef9 	.word	0x08000ef9
 80007fc:	08000ef9 	.word	0x08000ef9
 8000800:	08000ef9 	.word	0x08000ef9
 8000804:	08000ef9 	.word	0x08000ef9
 8000808:	08000ef9 	.word	0x08000ef9
 800080c:	08000ef9 	.word	0x08000ef9
 8000810:	08000ef9 	.word	0x08000ef9
 8000814:	08000ef9 	.word	0x08000ef9
 8000818:	08000ef9 	.word	0x08000ef9
 800081c:	08000ef9 	.word	0x08000ef9
 8000820:	08000ef9 	.word	0x08000ef9
 8000824:	08000ef9 	.word	0x08000ef9
 8000828:	08000ef9 	.word	0x08000ef9
 800082c:	08000ef9 	.word	0x08000ef9
 8000830:	08000ef9 	.word	0x08000ef9
 8000834:	08000ef9 	.word	0x08000ef9
 8000838:	08000ef9 	.word	0x08000ef9
 800083c:	08000ef9 	.word	0x08000ef9
 8000840:	08000ef9 	.word	0x08000ef9
 8000844:	08000ef9 	.word	0x08000ef9
 8000848:	08000ef9 	.word	0x08000ef9
 800084c:	08000ef9 	.word	0x08000ef9
 8000850:	08000ef9 	.word	0x08000ef9
 8000854:	08000ef9 	.word	0x08000ef9
 8000858:	08000ef9 	.word	0x08000ef9
 800085c:	08000ef9 	.word	0x08000ef9
 8000860:	08000ef9 	.word	0x08000ef9
 8000864:	08000ef9 	.word	0x08000ef9
 8000868:	08000ef9 	.word	0x08000ef9
 800086c:	08000ef9 	.word	0x08000ef9
 8000870:	08000ef9 	.word	0x08000ef9
 8000874:	08000ef9 	.word	0x08000ef9
 8000878:	08000ef9 	.word	0x08000ef9
 800087c:	08000ef9 	.word	0x08000ef9
 8000880:	08000ef9 	.word	0x08000ef9
 8000884:	08000ef9 	.word	0x08000ef9
 8000888:	08000ef9 	.word	0x08000ef9
 800088c:	08000ef9 	.word	0x08000ef9
 8000890:	08000ef9 	.word	0x08000ef9
 8000894:	08000ef9 	.word	0x08000ef9
 8000898:	08000ef9 	.word	0x08000ef9
 800089c:	08000ef9 	.word	0x08000ef9
 80008a0:	08000ef9 	.word	0x08000ef9
 80008a4:	08000ef9 	.word	0x08000ef9
 80008a8:	08000ef9 	.word	0x08000ef9
 80008ac:	08000ef9 	.word	0x08000ef9
 80008b0:	08000ef9 	.word	0x08000ef9
 80008b4:	08000ef9 	.word	0x08000ef9
 80008b8:	08000ef9 	.word	0x08000ef9
 80008bc:	08000ef9 	.word	0x08000ef9
 80008c0:	08000ef9 	.word	0x08000ef9
 80008c4:	08000ef9 	.word	0x08000ef9
 80008c8:	08000ef9 	.word	0x08000ef9
 80008cc:	08000ef9 	.word	0x08000ef9
 80008d0:	08000ef9 	.word	0x08000ef9
 80008d4:	08000ef9 	.word	0x08000ef9
 80008d8:	08000ef9 	.word	0x08000ef9
 80008dc:	08000ef9 	.word	0x08000ef9
 80008e0:	08000ef9 	.word	0x08000ef9
 80008e4:	08000ef9 	.word	0x08000ef9
 80008e8:	08000ef9 	.word	0x08000ef9
 80008ec:	08000ef9 	.word	0x08000ef9
 80008f0:	08000ef9 	.word	0x08000ef9
 80008f4:	08000ef9 	.word	0x08000ef9
 80008f8:	08000ef9 	.word	0x08000ef9
 80008fc:	08000ef9 	.word	0x08000ef9
 8000900:	08000ef9 	.word	0x08000ef9
 8000904:	08000ef9 	.word	0x08000ef9
 8000908:	08000ef9 	.word	0x08000ef9
 800090c:	08000ef9 	.word	0x08000ef9
 8000910:	08000ef9 	.word	0x08000ef9
 8000914:	08000ef9 	.word	0x08000ef9
 8000918:	08000ef9 	.word	0x08000ef9
 800091c:	08000ef9 	.word	0x08000ef9
 8000920:	08000ef9 	.word	0x08000ef9
 8000924:	08000ef9 	.word	0x08000ef9
 8000928:	08000ef9 	.word	0x08000ef9
 800092c:	08000ef9 	.word	0x08000ef9
 8000930:	08000ef9 	.word	0x08000ef9
 8000934:	08000ef9 	.word	0x08000ef9
 8000938:	08000ef9 	.word	0x08000ef9
 800093c:	08000ef9 	.word	0x08000ef9
 8000940:	08000ef9 	.word	0x08000ef9
 8000944:	08000ef9 	.word	0x08000ef9
 8000948:	08000ef9 	.word	0x08000ef9
 800094c:	08000ef9 	.word	0x08000ef9
 8000950:	08000ef9 	.word	0x08000ef9
 8000954:	08000ef9 	.word	0x08000ef9
 8000958:	08000ef9 	.word	0x08000ef9
 800095c:	08000edb 	.word	0x08000edb
 8000960:	08000ef9 	.word	0x08000ef9
 8000964:	08000ef9 	.word	0x08000ef9
 8000968:	08000ef9 	.word	0x08000ef9
 800096c:	08000ef9 	.word	0x08000ef9
 8000970:	08000ef9 	.word	0x08000ef9
 8000974:	08000ef9 	.word	0x08000ef9
 8000978:	08000ef9 	.word	0x08000ef9
 800097c:	08000ef9 	.word	0x08000ef9
 8000980:	08000ef9 	.word	0x08000ef9
 8000984:	08000ef9 	.word	0x08000ef9
 8000988:	08000ef9 	.word	0x08000ef9
 800098c:	08000ef9 	.word	0x08000ef9
 8000990:	08000ef9 	.word	0x08000ef9
 8000994:	08000ef9 	.word	0x08000ef9
 8000998:	08000ef9 	.word	0x08000ef9
 800099c:	08000ee1 	.word	0x08000ee1
 80009a0:	08000ef9 	.word	0x08000ef9
 80009a4:	08000ef9 	.word	0x08000ef9
 80009a8:	08000ef9 	.word	0x08000ef9
 80009ac:	08000ef9 	.word	0x08000ef9
 80009b0:	08000ef9 	.word	0x08000ef9
 80009b4:	08000ef9 	.word	0x08000ef9
 80009b8:	08000ef9 	.word	0x08000ef9
 80009bc:	08000ef9 	.word	0x08000ef9
 80009c0:	08000ef9 	.word	0x08000ef9
 80009c4:	08000ef9 	.word	0x08000ef9
 80009c8:	08000ef9 	.word	0x08000ef9
 80009cc:	08000ef9 	.word	0x08000ef9
 80009d0:	08000ef9 	.word	0x08000ef9
 80009d4:	08000ef9 	.word	0x08000ef9
 80009d8:	08000ef9 	.word	0x08000ef9
 80009dc:	08000eed 	.word	0x08000eed
 80009e0:	08000ec9 	.word	0x08000ec9
 80009e4:	08000ef9 	.word	0x08000ef9
 80009e8:	08000ef9 	.word	0x08000ef9
 80009ec:	08000ef9 	.word	0x08000ef9
 80009f0:	08000ef9 	.word	0x08000ef9
 80009f4:	08000ef9 	.word	0x08000ef9
 80009f8:	08000ef9 	.word	0x08000ef9
 80009fc:	08000ef9 	.word	0x08000ef9
 8000a00:	08000ef9 	.word	0x08000ef9
 8000a04:	08000ef9 	.word	0x08000ef9
 8000a08:	08000ef9 	.word	0x08000ef9
 8000a0c:	08000ef9 	.word	0x08000ef9
 8000a10:	08000ef9 	.word	0x08000ef9
 8000a14:	08000ef9 	.word	0x08000ef9
 8000a18:	08000ef9 	.word	0x08000ef9
 8000a1c:	08000ef9 	.word	0x08000ef9
 8000a20:	08000eb7 	.word	0x08000eb7
	case 0x10: {
		printf("SDN1 ON\n");
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a26:	f016 f93f 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 fb89 	bl	8009148 <HAL_GPIO_WritePin>
		break;
 8000a36:	e26a      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a3a:	f016 f935 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a40:	2104      	movs	r1, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 fb7f 	bl	8009148 <HAL_GPIO_WritePin>
		break;
 8000a4a:	e260      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
 8000a4c:	24000c24 	.word	0x24000c24
 8000a50:	240005ec 	.word	0x240005ec
 8000a54:	080174c0 	.word	0x080174c0
 8000a58:	58020400 	.word	0x58020400
 8000a5c:	080174c8 	.word	0x080174c8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a60:	48af      	ldr	r0, [pc, #700]	; (8000d20 <HAL_UART_RxCpltCallback+0x6a8>)
 8000a62:	f016 f921 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000a66:	4baf      	ldr	r3, [pc, #700]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000a68:	2120      	movs	r1, #32
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 fb6b 	bl	8009148 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a72:	4bad      	ldr	r3, [pc, #692]	; (8000d28 <HAL_UART_RxCpltCallback+0x6b0>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		break;
 8000a78:	e249      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a7a:	48ac      	ldr	r0, [pc, #688]	; (8000d2c <HAL_UART_RxCpltCallback+0x6b4>)
 8000a7c:	f016 f914 	bl	8016ca8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8000a80:	2308      	movs	r3, #8
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e00f      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x42e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000a86:	4aaa      	ldr	r2, [pc, #680]	; (8000d30 <HAL_UART_RxCpltCallback+0x6b8>)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a8e:	4aa8      	ldr	r2, [pc, #672]	; (8000d30 <HAL_UART_RxCpltCallback+0x6b8>)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	889b      	ldrh	r3, [r3, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f008 fb54 	bl	8009148 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dcec      	bgt.n	8000a86 <HAL_UART_RxCpltCallback+0x40e>
		}

		_2v5_enabled = 0;
 8000aac:	4b9e      	ldr	r3, [pc, #632]	; (8000d28 <HAL_UART_RxCpltCallback+0x6b0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000ab2:	4ba0      	ldr	r3, [pc, #640]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000ab8:	4b9f      	ldr	r3, [pc, #636]	; (8000d38 <HAL_UART_RxCpltCallback+0x6c0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000abe:	4b9f      	ldr	r3, [pc, #636]	; (8000d3c <HAL_UART_RxCpltCallback+0x6c4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000ac4:	4b9e      	ldr	r3, [pc, #632]	; (8000d40 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000aca:	4b9e      	ldr	r3, [pc, #632]	; (8000d44 <HAL_UART_RxCpltCallback+0x6cc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000ad0:	4b9d      	ldr	r3, [pc, #628]	; (8000d48 <HAL_UART_RxCpltCallback+0x6d0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000ad6:	4b9d      	ldr	r3, [pc, #628]	; (8000d4c <HAL_UART_RxCpltCallback+0x6d4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000adc:	4b9c      	ldr	r3, [pc, #624]	; (8000d50 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

		break;
 8000ae2:	e214      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000ae4:	489b      	ldr	r0, [pc, #620]	; (8000d54 <HAL_UART_RxCpltCallback+0x6dc>)
 8000ae6:	f016 f8df 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aea:	4b9b      	ldr	r3, [pc, #620]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2201      	movs	r2, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fb28 	bl	8009148 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000af8:	4b8e      	ldr	r3, [pc, #568]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
		break;
 8000afe:	e206      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b00:	4896      	ldr	r0, [pc, #600]	; (8000d5c <HAL_UART_RxCpltCallback+0x6e4>)
 8000b02:	f016 f8d1 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b06:	4b94      	ldr	r3, [pc, #592]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f008 fb1a 	bl	8009148 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b14:	4b87      	ldr	r3, [pc, #540]	; (8000d34 <HAL_UART_RxCpltCallback+0x6bc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
		break;
 8000b1a:	e1f8      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b1c:	4890      	ldr	r0, [pc, #576]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b1e:	f016 f8c3 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b22:	4b8d      	ldr	r3, [pc, #564]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	2201      	movs	r2, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f008 fb0d 	bl	8009148 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b2e:	4b82      	ldr	r3, [pc, #520]	; (8000d38 <HAL_UART_RxCpltCallback+0x6c0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
		break;
 8000b34:	e1eb      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b36:	488b      	ldr	r0, [pc, #556]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b38:	f016 f8b6 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b3c:	4b86      	ldr	r3, [pc, #536]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	2200      	movs	r2, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 fb00 	bl	8009148 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b48:	4b7b      	ldr	r3, [pc, #492]	; (8000d38 <HAL_UART_RxCpltCallback+0x6c0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
		break;
 8000b4e:	e1de      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b50:	4885      	ldr	r0, [pc, #532]	; (8000d68 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b52:	f016 f8a9 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b56:	4b80      	ldr	r3, [pc, #512]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b58:	2140      	movs	r1, #64	; 0x40
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f008 faf3 	bl	8009148 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000b62:	4b76      	ldr	r3, [pc, #472]	; (8000d3c <HAL_UART_RxCpltCallback+0x6c4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
		break;
 8000b68:	e1d1      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b6a:	4880      	ldr	r0, [pc, #512]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b6c:	f016 f89c 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b70:	4b79      	ldr	r3, [pc, #484]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	2200      	movs	r2, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f008 fae6 	bl	8009148 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000b7c:	4b6f      	ldr	r3, [pc, #444]	; (8000d3c <HAL_UART_RxCpltCallback+0x6c4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		break;
 8000b82:	e1c4      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b84:	487a      	ldr	r0, [pc, #488]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b86:	f016 f88f 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b8a:	4b73      	ldr	r3, [pc, #460]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b90:	2201      	movs	r2, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f008 fad8 	bl	8009148 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000b98:	4b69      	ldr	r3, [pc, #420]	; (8000d40 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
		break;
 8000b9e:	e1b6      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000ba0:	4874      	ldr	r0, [pc, #464]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000ba2:	f016 f881 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ba6:	4b6c      	ldr	r3, [pc, #432]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	2200      	movs	r2, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 faca 	bl	8009148 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000bb4:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
		break;
 8000bba:	e1a8      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000bbc:	486e      	ldr	r0, [pc, #440]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	f016 f873 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000bc2:	4b65      	ldr	r3, [pc, #404]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f008 fabc 	bl	8009148 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000bd0:	4b5c      	ldr	r3, [pc, #368]	; (8000d44 <HAL_UART_RxCpltCallback+0x6cc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
		break;
 8000bd6:	e19a      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000bd8:	4868      	ldr	r0, [pc, #416]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000bda:	f016 f865 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bde:	4b5e      	ldr	r3, [pc, #376]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be4:	2200      	movs	r2, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 faae 	bl	8009148 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000bec:	4b55      	ldr	r3, [pc, #340]	; (8000d44 <HAL_UART_RxCpltCallback+0x6cc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		break;
 8000bf2:	e18c      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bf4:	4862      	ldr	r0, [pc, #392]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000bf6:	f016 f857 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	2201      	movs	r2, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f008 faa0 	bl	8009148 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c08:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <HAL_UART_RxCpltCallback+0x6d4>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
		break;
 8000c0e:	e17e      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c10:	485c      	ldr	r0, [pc, #368]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000c12:	f016 f849 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000c16:	4b50      	ldr	r3, [pc, #320]	; (8000d58 <HAL_UART_RxCpltCallback+0x6e0>)
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 fa92 	bl	8009148 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <HAL_UART_RxCpltCallback+0x6d4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]

		break;
 8000c2a:	e170      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c2c:	4856      	ldr	r0, [pc, #344]	; (8000d88 <HAL_UART_RxCpltCallback+0x710>)
 8000c2e:	f016 f83b 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	2201      	movs	r2, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f008 fa85 	bl	8009148 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <HAL_UART_RxCpltCallback+0x6d8>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
		break;
 8000c44:	e163      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c46:	4851      	ldr	r0, [pc, #324]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000c48:	f016 f82e 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <HAL_UART_RxCpltCallback+0x6ac>)
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	2200      	movs	r2, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 fa78 	bl	8009148 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000c58:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <HAL_UART_RxCpltCallback+0x6d8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
		break;
 8000c5e:	e156      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c60:	484b      	ldr	r0, [pc, #300]	; (8000d90 <HAL_UART_RxCpltCallback+0x718>)
 8000c62:	f016 f821 	bl	8016ca8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c66:	2300      	movs	r3, #0
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2320      	movs	r3, #32
 8000c6c:	4a49      	ldr	r2, [pc, #292]	; (8000d94 <HAL_UART_RxCpltCallback+0x71c>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4849      	ldr	r0, [pc, #292]	; (8000d98 <HAL_UART_RxCpltCallback+0x720>)
 8000c72:	f004 fecd 	bl	8005a10 <HAL_DAC_Start_DMA>
		break;
 8000c76:	e14a      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c78:	4848      	ldr	r0, [pc, #288]	; (8000d9c <HAL_UART_RxCpltCallback+0x724>)
 8000c7a:	f016 f815 	bl	8016ca8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4845      	ldr	r0, [pc, #276]	; (8000d98 <HAL_UART_RxCpltCallback+0x720>)
 8000c82:	f004 ff85 	bl	8005b90 <HAL_DAC_Stop_DMA>
		break;
 8000c86:	e142      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c88:	4845      	ldr	r0, [pc, #276]	; (8000da0 <HAL_UART_RxCpltCallback+0x728>)
 8000c8a:	f016 f80d 	bl	8016ca8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c8e:	210c      	movs	r1, #12
 8000c90:	4844      	ldr	r0, [pc, #272]	; (8000da4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c92:	f00d fe5d 	bl	800e950 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000c96:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <HAL_UART_RxCpltCallback+0x730>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f012 fac1 	bl	8013224 <osEventFlagsSet>
		ERPA_ON = 1;
 8000ca2:	4b42      	ldr	r3, [pc, #264]	; (8000dac <HAL_UART_RxCpltCallback+0x734>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
		break;
 8000ca8:	e131      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000caa:	4841      	ldr	r0, [pc, #260]	; (8000db0 <HAL_UART_RxCpltCallback+0x738>)
 8000cac:	f015 fffc 	bl	8016ca8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cb0:	210c      	movs	r1, #12
 8000cb2:	483c      	ldr	r0, [pc, #240]	; (8000da4 <HAL_UART_RxCpltCallback+0x72c>)
 8000cb4:	f00d ffa6 	bl	800ec04 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <HAL_UART_RxCpltCallback+0x734>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		break;
 8000cbe:	e126      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000cc0:	483c      	ldr	r0, [pc, #240]	; (8000db4 <HAL_UART_RxCpltCallback+0x73c>)
 8000cc2:	f015 fff1 	bl	8016ca8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	483b      	ldr	r0, [pc, #236]	; (8000db8 <HAL_UART_RxCpltCallback+0x740>)
 8000cca:	f00d fe41 	bl	800e950 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_UART_RxCpltCallback+0x730>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f012 faa5 	bl	8013224 <osEventFlagsSet>
		PMT_ON = 1;
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <HAL_UART_RxCpltCallback+0x744>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
		break;
 8000ce0:	e115      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000ce2:	4837      	ldr	r0, [pc, #220]	; (8000dc0 <HAL_UART_RxCpltCallback+0x748>)
 8000ce4:	f015 ffe0 	bl	8016ca8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4833      	ldr	r0, [pc, #204]	; (8000db8 <HAL_UART_RxCpltCallback+0x740>)
 8000cec:	f00d ff8a 	bl	800ec04 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <HAL_UART_RxCpltCallback+0x744>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
		break;
 8000cf6:	e10a      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000cf8:	4832      	ldr	r0, [pc, #200]	; (8000dc4 <HAL_UART_RxCpltCallback+0x74c>)
 8000cfa:	f015 ffd5 	bl	8016ca8 <puts>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_UART_RxCpltCallback+0x730>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2104      	movs	r1, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f012 fa8d 	bl	8013224 <osEventFlagsSet>
		HK_ON = 1;
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <HAL_UART_RxCpltCallback+0x750>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
		break;
 8000d10:	e0fd      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d12:	482e      	ldr	r0, [pc, #184]	; (8000dcc <HAL_UART_RxCpltCallback+0x754>)
 8000d14:	f015 ffc8 	bl	8016ca8 <puts>
		HK_ON = 0;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <HAL_UART_RxCpltCallback+0x750>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
		break;
 8000d1e:	e0f6      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
 8000d20:	080174d4 	.word	0x080174d4
 8000d24:	58020400 	.word	0x58020400
 8000d28:	24000bd8 	.word	0x24000bd8
 8000d2c:	080174e0 	.word	0x080174e0
 8000d30:	08017814 	.word	0x08017814
 8000d34:	24000bd9 	.word	0x24000bd9
 8000d38:	24000bda 	.word	0x24000bda
 8000d3c:	24000bdb 	.word	0x24000bdb
 8000d40:	24000bdc 	.word	0x24000bdc
 8000d44:	24000bdd 	.word	0x24000bdd
 8000d48:	24000bde 	.word	0x24000bde
 8000d4c:	24000bdf 	.word	0x24000bdf
 8000d50:	24000be0 	.word	0x24000be0
 8000d54:	080174ec 	.word	0x080174ec
 8000d58:	58020800 	.word	0x58020800
 8000d5c:	080174f8 	.word	0x080174f8
 8000d60:	08017508 	.word	0x08017508
 8000d64:	08017514 	.word	0x08017514
 8000d68:	08017520 	.word	0x08017520
 8000d6c:	0801752c 	.word	0x0801752c
 8000d70:	0801753c 	.word	0x0801753c
 8000d74:	08017548 	.word	0x08017548
 8000d78:	08017554 	.word	0x08017554
 8000d7c:	08017560 	.word	0x08017560
 8000d80:	0801756c 	.word	0x0801756c
 8000d84:	0801757c 	.word	0x0801757c
 8000d88:	0801758c 	.word	0x0801758c
 8000d8c:	08017598 	.word	0x08017598
 8000d90:	080175a8 	.word	0x080175a8
 8000d94:	2400000c 	.word	0x2400000c
 8000d98:	240002f4 	.word	0x240002f4
 8000d9c:	080175b8 	.word	0x080175b8
 8000da0:	080175c8 	.word	0x080175c8
 8000da4:	24000554 	.word	0x24000554
 8000da8:	24000c20 	.word	0x24000c20
 8000dac:	24000c1b 	.word	0x24000c1b
 8000db0:	080175d0 	.word	0x080175d0
 8000db4:	080175dc 	.word	0x080175dc
 8000db8:	24000508 	.word	0x24000508
 8000dbc:	24000c1a 	.word	0x24000c1a
 8000dc0:	080175e4 	.word	0x080175e4
 8000dc4:	080175ec 	.word	0x080175ec
 8000dc8:	24000c1c 	.word	0x24000c1c
 8000dcc:	080175f4 	.word	0x080175f4
	}
	case 0x1D: {
		printf("Step Up\n");
 8000dd0:	4851      	ldr	r0, [pc, #324]	; (8000f18 <HAL_UART_RxCpltCallback+0x8a0>)
 8000dd2:	f015 ff69 	bl	8016ca8 <puts>
		if (step < 17) {
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b10      	cmp	r3, #16
 8000dde:	f200 808f 	bhi.w	8000f00 <HAL_UART_RxCpltCallback+0x888>
			step += 2;
 8000de2:	4b4e      	ldr	r3, [pc, #312]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	3302      	adds	r3, #2
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000dee:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000df0:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <HAL_UART_RxCpltCallback+0x8a8>)
 8000dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	4848      	ldr	r0, [pc, #288]	; (8000f24 <HAL_UART_RxCpltCallback+0x8ac>)
 8000e04:	f004 ff67 	bl	8005cd6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4846      	ldr	r0, [pc, #280]	; (8000f24 <HAL_UART_RxCpltCallback+0x8ac>)
 8000e0c:	f004 fda8 	bl	8005960 <HAL_DAC_Start>
		}
		break;
 8000e10:	e076      	b.n	8000f00 <HAL_UART_RxCpltCallback+0x888>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e12:	4845      	ldr	r0, [pc, #276]	; (8000f28 <HAL_UART_RxCpltCallback+0x8b0>)
 8000e14:	f015 ff48 	bl	8016ca8 <puts>
		if (step > 3) {
 8000e18:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d970      	bls.n	8000f04 <HAL_UART_RxCpltCallback+0x88c>
			step -= 2;
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3b02      	subs	r3, #2
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000e2e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e30:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <HAL_UART_RxCpltCallback+0x8a4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <HAL_UART_RxCpltCallback+0x8a8>)
 8000e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	4838      	ldr	r0, [pc, #224]	; (8000f24 <HAL_UART_RxCpltCallback+0x8ac>)
 8000e44:	f004 ff47 	bl	8005cd6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4836      	ldr	r0, [pc, #216]	; (8000f24 <HAL_UART_RxCpltCallback+0x8ac>)
 8000e4c:	f004 fd88 	bl	8005960 <HAL_DAC_Start>
		}
		break;
 8000e50:	e058      	b.n	8000f04 <HAL_UART_RxCpltCallback+0x88c>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e52:	4836      	ldr	r0, [pc, #216]	; (8000f2c <HAL_UART_RxCpltCallback+0x8b4>)
 8000e54:	f015 ff28 	bl	8016ca8 <puts>
		if (cadence <= 50000) {
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d851      	bhi.n	8000f08 <HAL_UART_RxCpltCallback+0x890>
			cadence *= 2;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4a31      	ldr	r2, [pc, #196]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e6c:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e78:	e046      	b.n	8000f08 <HAL_UART_RxCpltCallback+0x890>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e7a:	482e      	ldr	r0, [pc, #184]	; (8000f34 <HAL_UART_RxCpltCallback+0x8bc>)
 8000e7c:	f015 ff14 	bl	8016ca8 <puts>
		if (cadence >= 6250) {
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d93f      	bls.n	8000f0c <HAL_UART_RxCpltCallback+0x894>
			cadence /= 2;
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e94:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_UART_RxCpltCallback+0x8b8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ea0:	e034      	b.n	8000f0c <HAL_UART_RxCpltCallback+0x894>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000ea2:	4825      	ldr	r0, [pc, #148]	; (8000f38 <HAL_UART_RxCpltCallback+0x8c0>)
 8000ea4:	f015 ff00 	bl	8016ca8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <HAL_UART_RxCpltCallback+0x8c4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2116      	movs	r1, #22
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f012 f9b8 	bl	8013224 <osEventFlagsSet>
		break;
 8000eb4:	e02b      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000eb6:	4822      	ldr	r0, [pc, #136]	; (8000f40 <HAL_UART_RxCpltCallback+0x8c8>)
 8000eb8:	f015 fef6 	bl	8016ca8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_UART_RxCpltCallback+0x8cc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f013 ff55 	bl	8014d70 <xTaskResumeFromISR>
		break;
 8000ec6:	e022      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <HAL_UART_RxCpltCallback+0x8d0>)
 8000eca:	f015 feed 	bl	8016ca8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <HAL_UART_RxCpltCallback+0x8d4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f013 ff4c 	bl	8014d70 <xTaskResumeFromISR>
		break;
 8000ed8:	e019      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0xAF: {
		sync();
 8000eda:	f001 f9f7 	bl	80022cc <sync>
		break;
 8000ede:	e016      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0xBF: {
		xTaskResumeFromISR(Science_taskHandle);
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_UART_RxCpltCallback+0x8d8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f013 ff43 	bl	8014d70 <xTaskResumeFromISR>
		break;
 8000eea:	e010      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	case 0xCF: {
		xTaskResumeFromISR(Idle_taskHandle);
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f013 ff3d 	bl	8014d70 <xTaskResumeFromISR>
		break;
 8000ef6:	e00a      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
	}
	default: {
		printf("Unknown Command\n");
 8000ef8:	4817      	ldr	r0, [pc, #92]	; (8000f58 <HAL_UART_RxCpltCallback+0x8e0>)
 8000efa:	f015 fed5 	bl	8016ca8 <puts>
		break;
 8000efe:	e006      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
		break;
 8000f00:	bf00      	nop
 8000f02:	e004      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
		break;
 8000f04:	bf00      	nop
 8000f06:	e002      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
		break;
 8000f08:	bf00      	nop
 8000f0a:	e000      	b.n	8000f0e <HAL_UART_RxCpltCallback+0x896>
		break;
 8000f0c:	bf00      	nop
	}
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	080175fc 	.word	0x080175fc
 8000f1c:	24000008 	.word	0x24000008
 8000f20:	2400000c 	.word	0x2400000c
 8000f24:	240002f4 	.word	0x240002f4
 8000f28:	08017604 	.word	0x08017604
 8000f2c:	08017610 	.word	0x08017610
 8000f30:	24000004 	.word	0x24000004
 8000f34:	0801761c 	.word	0x0801761c
 8000f38:	08017628 	.word	0x08017628
 8000f3c:	24000c20 	.word	0x24000c20
 8000f40:	08017638 	.word	0x08017638
 8000f44:	24000704 	.word	0x24000704
 8000f48:	08017644 	.word	0x08017644
 8000f4c:	24000964 	.word	0x24000964
 8000f50:	24000bd0 	.word	0x24000bd0
 8000f54:	24000bd4 	.word	0x24000bd4
 8000f58:	08017650 	.word	0x08017650

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f002 ff6a 	bl	8003e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f8c6 	bl	80010f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f68:	f000 f944 	bl	80011f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 feba 	bl	8001ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f70:	f000 fe80 	bl	8001c74 <MX_DMA_Init>
  MX_TIM3_Init();
 8000f74:	f000 fdc8 	bl	8001b08 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f78:	f000 fe14 	bl	8001ba4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000f7c:	f000 fb50 	bl	8001620 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f80:	f000 fc46 	bl	8001810 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f84:	f000 fd4a 	bl	8001a1c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f88:	f000 fc9a 	bl	80018c0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f8c:	f000 fa84 	bl	8001498 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f90:	f000 f960 	bl	8001254 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f94:	f000 fb12 	bl	80015bc <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f98:	f000 fbe2 	bl	8001760 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f9c:	f000 fb82 	bl	80016a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fa0:	f011 ffc8 	bl	8012f34 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	f012 fa38 	bl	801341e <osMessageQueueNew>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <main+0x114>)
 8000fb2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000fb4:	4a2f      	ldr	r2, [pc, #188]	; (8001074 <main+0x118>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	482f      	ldr	r0, [pc, #188]	; (8001078 <main+0x11c>)
 8000fba:	f012 f805 	bl	8012fc8 <osThreadNew>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a2e      	ldr	r2, [pc, #184]	; (800107c <main+0x120>)
 8000fc2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <main+0x124>)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	482e      	ldr	r0, [pc, #184]	; (8001084 <main+0x128>)
 8000fca:	f011 fffd 	bl	8012fc8 <osThreadNew>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <main+0x12c>)
 8000fd2:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <main+0x130>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	482d      	ldr	r0, [pc, #180]	; (8001090 <main+0x134>)
 8000fda:	f011 fff5 	bl	8012fc8 <osThreadNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <main+0x138>)
 8000fe2:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000fe4:	4a2c      	ldr	r2, [pc, #176]	; (8001098 <main+0x13c>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <main+0x140>)
 8000fea:	f011 ffed 	bl	8012fc8 <osThreadNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a2b      	ldr	r2, [pc, #172]	; (80010a0 <main+0x144>)
 8000ff2:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000ff4:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <main+0x148>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	482b      	ldr	r0, [pc, #172]	; (80010a8 <main+0x14c>)
 8000ffa:	f011 ffe5 	bl	8012fc8 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <main+0x150>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001004:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <main+0x154>)
 8001006:	2100      	movs	r1, #0
 8001008:	482a      	ldr	r0, [pc, #168]	; (80010b4 <main+0x158>)
 800100a:	f011 ffdd 	bl	8012fc8 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <main+0x15c>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <main+0x160>)
 8001016:	2100      	movs	r1, #0
 8001018:	4829      	ldr	r0, [pc, #164]	; (80010c0 <main+0x164>)
 800101a:	f011 ffd5 	bl	8012fc8 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <main+0x168>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <main+0x16c>)
 8001026:	2100      	movs	r1, #0
 8001028:	4828      	ldr	r0, [pc, #160]	; (80010cc <main+0x170>)
 800102a:	f011 ffcd 	bl	8012fc8 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <main+0x174>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <main+0x178>)
 8001036:	2100      	movs	r1, #0
 8001038:	4827      	ldr	r0, [pc, #156]	; (80010d8 <main+0x17c>)
 800103a:	f011 ffc5 	bl	8012fc8 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <main+0x180>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <main+0x184>)
 8001046:	2100      	movs	r1, #0
 8001048:	4826      	ldr	r0, [pc, #152]	; (80010e4 <main+0x188>)
 800104a:	f011 ffbd 	bl	8012fc8 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <main+0x18c>)
 8001052:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001054:	2000      	movs	r0, #0
 8001056:	f012 f8a5 	bl	80131a4 <osEventFlagsNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a23      	ldr	r2, [pc, #140]	; (80010ec <main+0x190>)
 800105e:	6013      	str	r3, [r2, #0]
	system_setup();
 8001060:	f001 f99e 	bl	80023a0 <system_setup>
	printf("Starting kernal...\n");
 8001064:	4822      	ldr	r0, [pc, #136]	; (80010f0 <main+0x194>)
 8001066:	f015 fe1f 	bl	8016ca8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800106a:	f011 ff87 	bl	8012f7c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800106e:	e7fe      	b.n	800106e <main+0x112>
 8001070:	24000c04 	.word	0x24000c04
 8001074:	080176ac 	.word	0x080176ac
 8001078:	08002b11 	.word	0x08002b11
 800107c:	240006f8 	.word	0x240006f8
 8001080:	080176d0 	.word	0x080176d0
 8001084:	08002b55 	.word	0x08002b55
 8001088:	240006fc 	.word	0x240006fc
 800108c:	080176f4 	.word	0x080176f4
 8001090:	08002b99 	.word	0x08002b99
 8001094:	24000700 	.word	0x24000700
 8001098:	08017718 	.word	0x08017718
 800109c:	08002bdd 	.word	0x08002bdd
 80010a0:	24000704 	.word	0x24000704
 80010a4:	0801773c 	.word	0x0801773c
 80010a8:	08002c35 	.word	0x08002c35
 80010ac:	24000964 	.word	0x24000964
 80010b0:	08017760 	.word	0x08017760
 80010b4:	08002c8d 	.word	0x08002c8d
 80010b8:	24000bc4 	.word	0x24000bc4
 80010bc:	08017784 	.word	0x08017784
 80010c0:	08002d45 	.word	0x08002d45
 80010c4:	24000bc8 	.word	0x24000bc8
 80010c8:	080177a8 	.word	0x080177a8
 80010cc:	08002e3d 	.word	0x08002e3d
 80010d0:	24000bcc 	.word	0x24000bcc
 80010d4:	080177cc 	.word	0x080177cc
 80010d8:	08002e79 	.word	0x08002e79
 80010dc:	24000bd0 	.word	0x24000bd0
 80010e0:	080177f0 	.word	0x080177f0
 80010e4:	08002f51 	.word	0x08002f51
 80010e8:	24000bd4 	.word	0x24000bd4
 80010ec:	24000c20 	.word	0x24000c20
 80010f0:	08017660 	.word	0x08017660

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b09c      	sub	sp, #112	; 0x70
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	224c      	movs	r2, #76	; 0x4c
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f015 fc7a 	bl	80169fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2220      	movs	r2, #32
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f015 fc74 	bl	80169fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001114:	2002      	movs	r0, #2
 8001116:	f008 fe79 	bl	8009e0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <SystemClock_Config+0xf8>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	4a32      	ldr	r2, [pc, #200]	; (80011ec <SystemClock_Config+0xf8>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	62d3      	str	r3, [r2, #44]	; 0x2c
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <SystemClock_Config+0xf8>)
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <SystemClock_Config+0xfc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800113c:	4a2c      	ldr	r2, [pc, #176]	; (80011f0 <SystemClock_Config+0xfc>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <SystemClock_Config+0xfc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001150:	bf00      	nop
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <SystemClock_Config+0xfc>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800115e:	d1f8      	bne.n	8001152 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001160:	2303      	movs	r3, #3
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800116a:	2309      	movs	r3, #9
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	2302      	movs	r3, #2
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800117e:	2320      	movs	r3, #32
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001182:	2304      	movs	r3, #4
 8001184:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001186:	2304      	movs	r3, #4
 8001188:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800118e:	2308      	movs	r3, #8
 8001190:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001192:	2300      	movs	r3, #0
 8001194:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4618      	mov	r0, r3
 80011a0:	f008 fe6e 	bl	8009e80 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011aa:	f001 ff2d 	bl	8003008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	233f      	movs	r3, #63	; 0x3f
 80011b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2303      	movs	r3, #3
 80011b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2101      	movs	r1, #1
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 faae 	bl	800a734 <HAL_RCC_ClockConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011de:	f001 ff13 	bl	8003008 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3770      	adds	r7, #112	; 0x70
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	58000400 	.word	0x58000400
 80011f0:	58024800 	.word	0x58024800

080011f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0b0      	sub	sp, #192	; 0xc0
 80011f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	22c0      	movs	r2, #192	; 0xc0
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f015 fbfb 	bl	80169fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001206:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001212:	2304      	movs	r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001216:	2320      	movs	r3, #32
 8001218:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800121a:	2308      	movs	r3, #8
 800121c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800121e:	2304      	movs	r3, #4
 8001220:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4618      	mov	r0, r3
 800123c:	f009 fe48 	bl	800aed0 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001246:	f001 fedf 	bl	8003008 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	37c0      	adds	r7, #192	; 0xc0
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001278:	4b7a      	ldr	r3, [pc, #488]	; (8001464 <MX_ADC1_Init+0x210>)
 800127a:	4a7b      	ldr	r2, [pc, #492]	; (8001468 <MX_ADC1_Init+0x214>)
 800127c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800127e:	4b79      	ldr	r3, [pc, #484]	; (8001464 <MX_ADC1_Init+0x210>)
 8001280:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001284:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001286:	4b77      	ldr	r3, [pc, #476]	; (8001464 <MX_ADC1_Init+0x210>)
 8001288:	2208      	movs	r2, #8
 800128a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800128c:	4b75      	ldr	r3, [pc, #468]	; (8001464 <MX_ADC1_Init+0x210>)
 800128e:	2201      	movs	r2, #1
 8001290:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <MX_ADC1_Init+0x210>)
 8001294:	2204      	movs	r2, #4
 8001296:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001298:	4b72      	ldr	r3, [pc, #456]	; (8001464 <MX_ADC1_Init+0x210>)
 800129a:	2200      	movs	r2, #0
 800129c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129e:	4b71      	ldr	r3, [pc, #452]	; (8001464 <MX_ADC1_Init+0x210>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012a4:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <MX_ADC1_Init+0x210>)
 80012a6:	220b      	movs	r2, #11
 80012a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012aa:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <MX_ADC1_Init+0x210>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <MX_ADC1_Init+0x210>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b6:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <MX_ADC1_Init+0x210>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012bc:	4b69      	ldr	r3, [pc, #420]	; (8001464 <MX_ADC1_Init+0x210>)
 80012be:	2203      	movs	r2, #3
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012c2:	4b68      	ldr	r3, [pc, #416]	; (8001464 <MX_ADC1_Init+0x210>)
 80012c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ca:	4b66      	ldr	r3, [pc, #408]	; (8001464 <MX_ADC1_Init+0x210>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <MX_ADC1_Init+0x210>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d8:	4862      	ldr	r0, [pc, #392]	; (8001464 <MX_ADC1_Init+0x210>)
 80012da:	f003 f839 	bl	8004350 <HAL_ADC_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012e4:	f001 fe90 	bl	8003008 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	485c      	ldr	r0, [pc, #368]	; (8001464 <MX_ADC1_Init+0x210>)
 80012f4:	f004 f954 	bl	80055a0 <HAL_ADCEx_MultiModeConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012fe:	f001 fe83 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <MX_ADC1_Init+0x218>)
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001306:	2306      	movs	r3, #6
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800130a:	2307      	movs	r3, #7
 800130c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001312:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001314:	2304      	movs	r3, #4
 8001316:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	484f      	ldr	r0, [pc, #316]	; (8001464 <MX_ADC1_Init+0x210>)
 8001326:	f003 fa97 	bl	8004858 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001330:	f001 fe6a 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001334:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <MX_ADC1_Init+0x21c>)
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001338:	230c      	movs	r3, #12
 800133a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4848      	ldr	r0, [pc, #288]	; (8001464 <MX_ADC1_Init+0x210>)
 8001342:	f003 fa89 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800134c:	f001 fe5c 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001350:	4b48      	ldr	r3, [pc, #288]	; (8001474 <MX_ADC1_Init+0x220>)
 8001352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001354:	2312      	movs	r3, #18
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4841      	ldr	r0, [pc, #260]	; (8001464 <MX_ADC1_Init+0x210>)
 800135e:	f003 fa7b 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001368:	f001 fe4e 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <MX_ADC1_Init+0x224>)
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001370:	2318      	movs	r3, #24
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	483a      	ldr	r0, [pc, #232]	; (8001464 <MX_ADC1_Init+0x210>)
 800137a:	f003 fa6d 	bl	8004858 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001384:	f001 fe40 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <MX_ADC1_Init+0x228>)
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800138c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4833      	ldr	r0, [pc, #204]	; (8001464 <MX_ADC1_Init+0x210>)
 8001398:	f003 fa5e 	bl	8004858 <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013a2:	f001 fe31 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <MX_ADC1_Init+0x22c>)
 80013a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013aa:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <MX_ADC1_Init+0x210>)
 80013b6:	f003 fa4f 	bl	8004858 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013c0:	f001 fe22 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <MX_ADC1_Init+0x230>)
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013c8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4824      	ldr	r0, [pc, #144]	; (8001464 <MX_ADC1_Init+0x210>)
 80013d4:	f003 fa40 	bl	8004858 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013de:	f001 fe13 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_ADC1_Init+0x234>)
 80013e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013e6:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	481c      	ldr	r0, [pc, #112]	; (8001464 <MX_ADC1_Init+0x210>)
 80013f2:	f003 fa31 	bl	8004858 <HAL_ADC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013fc:	f001 fe04 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_ADC1_Init+0x238>)
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001404:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001408:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4815      	ldr	r0, [pc, #84]	; (8001464 <MX_ADC1_Init+0x210>)
 8001410:	f003 fa22 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800141a:	f001 fdf5 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_ADC1_Init+0x23c>)
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_ADC1_Init+0x210>)
 800142e:	f003 fa13 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001438:	f001 fde6 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_ADC1_Init+0x240>)
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001440:	f240 2306 	movw	r3, #518	; 0x206
 8001444:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <MX_ADC1_Init+0x210>)
 800144c:	f003 fa04 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001456:	f001 fdd7 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2400013c 	.word	0x2400013c
 8001468:	40022000 	.word	0x40022000
 800146c:	0c900008 	.word	0x0c900008
 8001470:	10c00010 	.word	0x10c00010
 8001474:	14f00020 	.word	0x14f00020
 8001478:	1d500080 	.word	0x1d500080
 800147c:	21800100 	.word	0x21800100
 8001480:	25b00200 	.word	0x25b00200
 8001484:	2a000400 	.word	0x2a000400
 8001488:	2e300800 	.word	0x2e300800
 800148c:	3ac04000 	.word	0x3ac04000
 8001490:	3ef08000 	.word	0x3ef08000
 8001494:	47520000 	.word	0x47520000

08001498 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014b2:	4a3e      	ldr	r2, [pc, #248]	; (80015ac <MX_ADC3_Init+0x114>)
 80014b4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014b8:	2208      	movs	r2, #8
 80014ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014bc:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014be:	2201      	movs	r2, #1
 80014c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014dc:	2200      	movs	r2, #0
 80014de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001508:	4827      	ldr	r0, [pc, #156]	; (80015a8 <MX_ADC3_Init+0x110>)
 800150a:	f002 ff21 	bl	8004350 <HAL_ADC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001514:	f001 fd78 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <MX_ADC3_Init+0x118>)
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151c:	2306      	movs	r3, #6
 800151e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001520:	2307      	movs	r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001524:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001528:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800152a:	2304      	movs	r3, #4
 800152c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_ADC3_Init+0x110>)
 800153c:	f003 f98c 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001546:	f001 fd5f 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_ADC3_Init+0x11c>)
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800154e:	230c      	movs	r3, #12
 8001550:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001558:	f003 f97e 	bl	8004858 <HAL_ADC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001562:	f001 fd51 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001566:	2301      	movs	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800156a:	2312      	movs	r3, #18
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001574:	f003 f970 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800157e:	f001 fd43 	bl	8003008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_ADC3_Init+0x120>)
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001586:	2318      	movs	r3, #24
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001590:	f003 f962 	bl	8004858 <HAL_ADC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800159a:	f001 fd35 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240001a0 	.word	0x240001a0
 80015ac:	58026000 	.word	0x58026000
 80015b0:	cb840000 	.word	0xcb840000
 80015b4:	cfb80000 	.word	0xcfb80000
 80015b8:	04300002 	.word	0x04300002

080015bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2224      	movs	r2, #36	; 0x24
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f015 fa17 	bl	80169fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_DAC1_Init+0x5c>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_DAC1_Init+0x60>)
 80015d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015d4:	4810      	ldr	r0, [pc, #64]	; (8001618 <MX_DAC1_Init+0x5c>)
 80015d6:	f004 f9a1 	bl	800591c <HAL_DAC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015e0:	f001 fd12 	bl	8003008 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015e8:	230a      	movs	r3, #10
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_DAC1_Init+0x5c>)
 8001600:	f004 fbbc 	bl	8005d7c <HAL_DAC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800160a:	f001 fcfd 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240002f4 	.word	0x240002f4
 800161c:	40007400 	.word	0x40007400

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_I2C1_Init+0x78>)
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <MX_I2C1_Init+0x7c>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_I2C1_Init+0x78>)
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <MX_I2C1_Init+0x80>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_I2C1_Init+0x78>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_I2C1_Init+0x78>)
 8001638:	2201      	movs	r2, #1
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_I2C1_Init+0x78>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_I2C1_Init+0x78>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_I2C1_Init+0x78>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_I2C1_Init+0x78>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_I2C1_Init+0x78>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165a:	480f      	ldr	r0, [pc, #60]	; (8001698 <MX_I2C1_Init+0x78>)
 800165c:	f007 fd8e 	bl	800917c <HAL_I2C_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001666:	f001 fccf 	bl	8003008 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <MX_I2C1_Init+0x78>)
 800166e:	f008 fad5 	bl	8009c1c <HAL_I2CEx_ConfigAnalogFilter>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001678:	f001 fcc6 	bl	8003008 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_I2C1_Init+0x78>)
 8001680:	f008 fb17 	bl	8009cb2 <HAL_I2CEx_ConfigDigitalFilter>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f001 fcbd 	bl	8003008 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800168e:	2001      	movs	r0, #1
 8001690:	f008 fb5c 	bl	8009d4c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000380 	.word	0x24000380
 800169c:	40005400 	.word	0x40005400
 80016a0:	0020081f 	.word	0x0020081f

080016a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <MX_RTC_Init+0xb4>)
 80016be:	4a27      	ldr	r2, [pc, #156]	; (800175c <MX_RTC_Init+0xb8>)
 80016c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_RTC_Init+0xb4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_RTC_Init+0xb4>)
 80016ca:	2263      	movs	r2, #99	; 0x63
 80016cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_RTC_Init+0xb4>)
 80016d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80016d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_RTC_Init+0xb4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_RTC_Init+0xb4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_RTC_Init+0xb4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_RTC_Init+0xb4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ee:	481a      	ldr	r0, [pc, #104]	; (8001758 <MX_RTC_Init+0xb4>)
 80016f0:	f00c f8ec 	bl	800d8cc <HAL_RTC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016fa:	f001 fc85 	bl	8003008 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016fe:	2300      	movs	r3, #0
 8001700:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001702:	2300      	movs	r3, #0
 8001704:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001706:	2300      	movs	r3, #0
 8001708:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2201      	movs	r2, #1
 8001716:	4619      	mov	r1, r3
 8001718:	480f      	ldr	r0, [pc, #60]	; (8001758 <MX_RTC_Init+0xb4>)
 800171a:	f00c f959 	bl	800d9d0 <HAL_RTC_SetTime>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001724:	f001 fc70 	bl	8003008 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001728:	2301      	movs	r3, #1
 800172a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800172c:	2301      	movs	r3, #1
 800172e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001730:	2301      	movs	r3, #1
 8001732:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001734:	2300      	movs	r3, #0
 8001736:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	2201      	movs	r2, #1
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_RTC_Init+0xb4>)
 8001740:	f00c fa40 	bl	800dbc4 <HAL_RTC_SetDate>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800174a:	f001 fc5d 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	240003d4 	.word	0x240003d4
 800175c:	58004000 	.word	0x58004000

08001760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <MX_SPI1_Init+0xac>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_SPI1_Init+0xa8>)
 800176c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001774:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001778:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <MX_SPI1_Init+0xa8>)
 800177c:	220f      	movs	r2, #15
 800177e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_SPI1_Init+0xa8>)
 800178e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001792:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001796:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800179a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_SPI1_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017f4:	f00c fb8c 	bl	800df10 <HAL_SPI_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017fe:	f001 fc03 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	240003f8 	.word	0x240003f8
 800180c:	40013000 	.word	0x40013000

08001810 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <MX_SPI2_Init+0xac>)
 8001818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800181c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001824:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001828:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800182c:	220f      	movs	r2, #15
 800182e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800183e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001842:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001846:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800184a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_SPI2_Init+0xa8>)
 80018a4:	f00c fb34 	bl	800df10 <HAL_SPI_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018ae:	f001 fbab 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	24000480 	.word	0x24000480
 80018bc:	40003800 	.word	0x40003800

080018c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b09a      	sub	sp, #104	; 0x68
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	222c      	movs	r2, #44	; 0x2c
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f015 f87e 	bl	80169fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001900:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <MX_TIM1_Init+0x154>)
 8001902:	4a45      	ldr	r2, [pc, #276]	; (8001a18 <MX_TIM1_Init+0x158>)
 8001904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <MX_TIM1_Init+0x154>)
 8001908:	2231      	movs	r2, #49	; 0x31
 800190a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <MX_TIM1_Init+0x154>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <MX_TIM1_Init+0x154>)
 8001914:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <MX_TIM1_Init+0x154>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <MX_TIM1_Init+0x154>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <MX_TIM1_Init+0x154>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800192c:	4839      	ldr	r0, [pc, #228]	; (8001a14 <MX_TIM1_Init+0x154>)
 800192e:	f00c ff40 	bl	800e7b2 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001938:	f001 fb66 	bl	8003008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001946:	4619      	mov	r1, r3
 8001948:	4832      	ldr	r0, [pc, #200]	; (8001a14 <MX_TIM1_Init+0x154>)
 800194a:	f00d fcbb 	bl	800f2c4 <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001954:	f001 fb58 	bl	8003008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001958:	482e      	ldr	r0, [pc, #184]	; (8001a14 <MX_TIM1_Init+0x154>)
 800195a:	f00d fa37 	bl	800edcc <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001964:	f001 fb50 	bl	8003008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001978:	4619      	mov	r1, r3
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <MX_TIM1_Init+0x154>)
 800197c:	f00e f9f8 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001986:	f001 fb3f 	bl	8003008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	; 0x60
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800198e:	f240 13df 	movw	r3, #479	; 0x1df
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_TIM1_Init+0x154>)
 80019b2:	f00d fb73 	bl	800f09c <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80019bc:	f001 fb24 	bl	8003008 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM1_Init+0x154>)
 80019f6:	f00e fa49 	bl	800fe8c <HAL_TIMEx_ConfigBreakDeadTime>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001a00:	f001 fb02 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM1_Init+0x154>)
 8001a06:	f001 fe8f 	bl	8003728 <HAL_TIM_MspPostInit>

}
 8001a0a:	bf00      	nop
 8001a0c:	3768      	adds	r7, #104	; 0x68
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	24000508 	.word	0x24000508
 8001a18:	40010000 	.word	0x40010000

08001a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a58:	2231      	movs	r2, #49	; 0x31
 8001a5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a64:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a76:	4823      	ldr	r0, [pc, #140]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a78:	f00c fe9b 	bl	800e7b2 <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a82:	f001 fac1 	bl	8003008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a90:	4619      	mov	r1, r3
 8001a92:	481c      	ldr	r0, [pc, #112]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001a94:	f00d fc16 	bl	800f2c4 <HAL_TIM_ConfigClockSource>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a9e:	f001 fab3 	bl	8003008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa2:	4818      	ldr	r0, [pc, #96]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001aa4:	f00d f992 	bl	800edcc <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001aae:	f001 faab 	bl	8003008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001ac2:	f00e f955 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001acc:	f001 fa9c 	bl	8003008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad0:	2360      	movs	r3, #96	; 0x60
 8001ad2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001ae8:	f00d fad8 	bl	800f09c <HAL_TIM_PWM_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001af2:	f001 fa89 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM2_Init+0xe8>)
 8001af8:	f001 fe16 	bl	8003728 <HAL_TIM_MspPostInit>

}
 8001afc:	bf00      	nop
 8001afe:	3738      	adds	r7, #56	; 0x38
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	24000554 	.word	0x24000554

08001b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <MX_TIM3_Init+0x98>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b2e:	2263      	movs	r2, #99	; 0x63
 8001b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b3a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b4c:	4813      	ldr	r0, [pc, #76]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b4e:	f00c fe30 	bl	800e7b2 <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b58:	f001 fa56 	bl	8003008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b6a:	f00d fbab 	bl	800f2c4 <HAL_TIM_ConfigClockSource>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b74:	f001 fa48 	bl	8003008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b86:	f00e f8f3 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b90:	f001 fa3a 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	240005a0 	.word	0x240005a0
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001baa:	4a31      	ldr	r2, [pc, #196]	; (8001c70 <MX_USART1_UART_Init+0xcc>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bb0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bec:	481f      	ldr	r0, [pc, #124]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001bee:	f00e f9e9 	bl	800ffc4 <HAL_UART_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bf8:	f001 fa06 	bl	8003008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	481b      	ldr	r0, [pc, #108]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c00:	f011 f889 	bl	8012d16 <HAL_UARTEx_SetTxFifoThreshold>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c0a:	f001 f9fd 	bl	8003008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4816      	ldr	r0, [pc, #88]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c12:	f011 f8be 	bl	8012d92 <HAL_UARTEx_SetRxFifoThreshold>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c1c:	f001 f9f4 	bl	8003008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c20:	4812      	ldr	r0, [pc, #72]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c22:	f011 f83f 	bl	8012ca4 <HAL_UARTEx_DisableFifoMode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c2c:	f001 f9ec 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001c30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c36:	f011 f8ac 	bl	8012d92 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c3c:	f010 fff7 	bl	8012c2e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001c40:	480a      	ldr	r0, [pc, #40]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c42:	f010 ffc1 	bl	8012bc8 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c54:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <MX_USART1_UART_Init+0xc8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c64:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	240005ec 	.word	0x240005ec
 8001c70:	40011000 	.word	0x40011000

08001c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_DMA_Init+0x6c>)
 8001c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <MX_DMA_Init+0x6c>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_DMA_Init+0x6c>)
 8001c8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2105      	movs	r1, #5
 8001c9c:	200b      	movs	r0, #11
 8001c9e:	f003 fe15 	bl	80058cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ca2:	200b      	movs	r0, #11
 8001ca4:	f003 fe2c 	bl	8005900 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	200c      	movs	r0, #12
 8001cae:	f003 fe0d 	bl	80058cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001cb2:	200c      	movs	r0, #12
 8001cb4:	f003 fe24 	bl	8005900 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2105      	movs	r1, #5
 8001cbc:	200d      	movs	r0, #13
 8001cbe:	f003 fe05 	bl	80058cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001cc2:	200d      	movs	r0, #13
 8001cc4:	f003 fe1c 	bl	8005900 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2105      	movs	r1, #5
 8001ccc:	2010      	movs	r0, #16
 8001cce:	f003 fdfd 	bl	80058cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cd2:	2010      	movs	r0, #16
 8001cd4:	f003 fe14 	bl	8005900 <HAL_NVIC_EnableIRQ>

}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58024400 	.word	0x58024400

08001ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d00:	4a32      	ldr	r2, [pc, #200]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1e:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <MX_GPIO_Init+0xe8>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001d78:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <MX_GPIO_Init+0xec>)
 8001d7a:	f007 f9e5 	bl	8009148 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2164      	movs	r1, #100	; 0x64
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d84:	f007 f9e0 	bl	8009148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d88:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <MX_GPIO_Init+0xec>)
 8001da2:	f007 f809 	bl	8008db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_GPIO_Init+0xf0>)
 8001dbe:	f006 fffb 	bl	8008db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	58020800 	.word	0x58020800
 8001dd4:	58020400 	.word	0x58020400

08001dd8 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001de2:	2300      	movs	r3, #0
 8001de4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	b299      	uxth	r1, r3
 8001dea:	f107 0208 	add.w	r2, r7, #8
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2301      	movs	r3, #1
 8001df6:	4817      	ldr	r0, [pc, #92]	; (8001e54 <poll_i2c_sensor+0x7c>)
 8001df8:	f007 fa5c 	bl	80092b4 <HAL_I2C_Master_Transmit>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e00:	7b7b      	ldrb	r3, [r7, #13]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e06:	4814      	ldr	r0, [pc, #80]	; (8001e58 <poll_i2c_sensor+0x80>)
 8001e08:	f014 ff4e 	bl	8016ca8 <puts>
 8001e0c:	e01c      	b.n	8001e48 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	b299      	uxth	r1, r3
 8001e12:	f107 0208 	add.w	r2, r7, #8
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <poll_i2c_sensor+0x7c>)
 8001e20:	f007 fb60 	bl	80094e4 <HAL_I2C_Master_Receive>
 8001e24:	4603      	mov	r3, r0
 8001e26:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e28:	7b7b      	ldrb	r3, [r7, #13]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <poll_i2c_sensor+0x84>)
 8001e30:	f014 ff3a 	bl	8016ca8 <puts>
 8001e34:	e008      	b.n	8001e48 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e36:	7a3b      	ldrb	r3, [r7, #8]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e40:	7a7a      	ldrb	r2, [r7, #9]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	10db      	asrs	r3, r3, #3
 8001e46:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	24000380 	.word	0x24000380
 8001e58:	08017674 	.word	0x08017674
 8001e5c:	08017684 	.word	0x08017684

08001e60 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e68:	f107 010c 	add.w	r1, r7, #12
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	2201      	movs	r2, #1
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <receive_pmt_spi+0x44>)
 8001e72:	f00c f971 	bl	800e158 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <receive_pmt_spi+0x44>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <receive_pmt_spi+0x44>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e8c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7bba      	ldrb	r2, [r7, #14]
 8001e92:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3301      	adds	r3, #1
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	701a      	strb	r2, [r3, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	240003f8 	.word	0x240003f8

08001ea8 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001eb0:	f107 010c 	add.w	r1, r7, #12
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <receive_erpa_spi+0x44>)
 8001eba:	f00c f94d 	bl	800e158 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001ec2:	7b7b      	ldrb	r3, [r7, #13]
 8001ec4:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <receive_erpa_spi+0x44>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <receive_erpa_spi+0x44>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed4:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7bba      	ldrb	r2, [r7, #14]
 8001eda:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	701a      	strb	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	24000480 	.word	0x24000480

08001ef0 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <receive_erpa_adc+0x20>)
 8001efa:	885b      	ldrh	r3, [r3, #2]
 8001efc:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	89fa      	ldrh	r2, [r7, #14]
 8001f02:	801a      	strh	r2, [r3, #0]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	24000c80 	.word	0x24000c80

08001f14 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f1c:	2390      	movs	r3, #144	; 0x90
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff5a 	bl	8001dd8 <poll_i2c_sensor>
 8001f24:	4603      	mov	r3, r0
 8001f26:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f28:	2394      	movs	r3, #148	; 0x94
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff54 	bl	8001dd8 <poll_i2c_sensor>
 8001f30:	4603      	mov	r3, r0
 8001f32:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f34:	2392      	movs	r3, #146	; 0x92
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff4e 	bl	8001dd8 <poll_i2c_sensor>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f40:	2396      	movs	r3, #150	; 0x96
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff48 	bl	8001dd8 <poll_i2c_sensor>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	89fa      	ldrh	r2, [r7, #14]
 8001f50:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3302      	adds	r3, #2
 8001f56:	89ba      	ldrh	r2, [r7, #12]
 8001f58:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	897a      	ldrh	r2, [r7, #10]
 8001f60:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3306      	adds	r3, #6
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	801a      	strh	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <receive_hk_adc1+0xa0>)
 8001f7e:	8a9b      	ldrh	r3, [r3, #20]
 8001f80:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <receive_hk_adc1+0xa0>)
 8001f84:	8a1b      	ldrh	r3, [r3, #16]
 8001f86:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <receive_hk_adc1+0xa0>)
 8001f8a:	899b      	ldrh	r3, [r3, #12]
 8001f8c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <receive_hk_adc1+0xa0>)
 8001f90:	8a5b      	ldrh	r3, [r3, #18]
 8001f92:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <receive_hk_adc1+0xa0>)
 8001f96:	889b      	ldrh	r3, [r3, #4]
 8001f98:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <receive_hk_adc1+0xa0>)
 8001f9c:	88db      	ldrh	r3, [r3, #6]
 8001f9e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <receive_hk_adc1+0xa0>)
 8001fa2:	89db      	ldrh	r3, [r3, #14]
 8001fa4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <receive_hk_adc1+0xa0>)
 8001fa8:	891b      	ldrh	r3, [r3, #8]
 8001faa:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <receive_hk_adc1+0xa0>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <receive_hk_adc1+0xa0>)
 8001fb4:	895b      	ldrh	r3, [r3, #10]
 8001fb6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	8bfa      	ldrh	r2, [r7, #30]
 8001fbc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	8bba      	ldrh	r2, [r7, #28]
 8001fc4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	8b7a      	ldrh	r2, [r7, #26]
 8001fcc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	8b3a      	ldrh	r2, [r7, #24]
 8001fd4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	8afa      	ldrh	r2, [r7, #22]
 8001fdc:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	330a      	adds	r3, #10
 8001fe2:	8aba      	ldrh	r2, [r7, #20]
 8001fe4:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	8a7a      	ldrh	r2, [r7, #18]
 8001fec:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	330e      	adds	r3, #14
 8001ff2:	8a3a      	ldrh	r2, [r7, #16]
 8001ff4:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3310      	adds	r3, #16
 8001ffa:	89fa      	ldrh	r2, [r7, #14]
 8001ffc:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3312      	adds	r3, #18
 8002002:	89ba      	ldrh	r2, [r7, #12]
 8002004:	801a      	strh	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	24000c80 	.word	0x24000c80

08002018 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <receive_hk_adc3+0x4c>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <receive_hk_adc3+0x4c>)
 8002028:	885b      	ldrh	r3, [r3, #2]
 800202a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <receive_hk_adc3+0x4c>)
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <receive_hk_adc3+0x4c>)
 8002034:	88db      	ldrh	r3, [r3, #6]
 8002036:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	89fa      	ldrh	r2, [r7, #14]
 800203c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3302      	adds	r3, #2
 8002042:	89ba      	ldrh	r2, [r7, #12]
 8002044:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	897a      	ldrh	r2, [r7, #10]
 800204c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3306      	adds	r3, #6
 8002052:	893a      	ldrh	r2, [r7, #8]
 8002054:	801a      	strh	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	24000ca0 	.word	0x24000ca0

08002068 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <get_current_step+0xc0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f640 72ff 	movw	r2, #4095	; 0xfff
 800207a:	4293      	cmp	r3, r2
 800207c:	d04a      	beq.n	8002114 <get_current_step+0xac>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002084:	da48      	bge.n	8002118 <get_current_step+0xb0>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f640 628b 	movw	r2, #3723	; 0xe8b
 800208c:	4293      	cmp	r3, r2
 800208e:	d03f      	beq.n	8002110 <get_current_step+0xa8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002096:	4293      	cmp	r3, r2
 8002098:	dc3e      	bgt.n	8002118 <get_current_step+0xb0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d033      	beq.n	800210c <get_current_step+0xa4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80020aa:	da35      	bge.n	8002118 <get_current_step+0xb0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d028      	beq.n	8002108 <get_current_step+0xa0>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020bc:	4293      	cmp	r3, r2
 80020be:	dc2b      	bgt.n	8002118 <get_current_step+0xb0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f240 7245 	movw	r2, #1861	; 0x745
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01c      	beq.n	8002104 <get_current_step+0x9c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f240 7245 	movw	r2, #1861	; 0x745
 80020d0:	4293      	cmp	r3, r2
 80020d2:	dc21      	bgt.n	8002118 <get_current_step+0xb0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80020da:	4293      	cmp	r3, r2
 80020dc:	d010      	beq.n	8002100 <get_current_step+0x98>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80020e4:	4293      	cmp	r3, r2
 80020e6:	dc17      	bgt.n	8002118 <get_current_step+0xb0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <get_current_step+0x90>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80020f4:	d002      	beq.n	80020fc <get_current_step+0x94>
 80020f6:	e00f      	b.n	8002118 <get_current_step+0xb0>
	case 0:
		return 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e00e      	b.n	800211a <get_current_step+0xb2>
	case 620:
		return 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e00c      	b.n	800211a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002100:	2302      	movs	r3, #2
 8002102:	e00a      	b.n	800211a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002104:	2303      	movs	r3, #3
 8002106:	e008      	b.n	800211a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002108:	2304      	movs	r3, #4
 800210a:	e006      	b.n	800211a <get_current_step+0xb2>
	case 3103:
		return 5;
 800210c:	2305      	movs	r3, #5
 800210e:	e004      	b.n	800211a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002110:	2306      	movs	r3, #6
 8002112:	e002      	b.n	800211a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002114:	2307      	movs	r3, #7
 8002116:	e000      	b.n	800211a <get_current_step+0xb2>
	default:
		return -1;
 8002118:	23ff      	movs	r3, #255	; 0xff
	}
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40007400 	.word	0x40007400

0800212c <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 8002130:	f000 f8f2 	bl	8002318 <send_ACK>

	vTaskSuspendAll();
 8002134:	f012 fef4 	bl	8014f20 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002138:	2101      	movs	r1, #1
 800213a:	2001      	movs	r0, #1
 800213c:	f007 fe2a 	bl	8009d94 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	SystemClock_Config();
 8002140:	f7fe ffd8 	bl	80010f4 <SystemClock_Config>
	xTaskResumeAll();
 8002144:	f012 fefa 	bl	8014f3c <xTaskResumeAll>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <RTC_SetTime>:

void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d051      	beq.n	8002206 <RTC_SetTime+0xba>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	22ca      	movs	r2, #202	; 0xca
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2253      	movs	r2, #83	; 0x53
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f00b fe18 	bl	800ddb8 <RTC_EnterInitMode>
 8002188:	4603      	mov	r3, r0
 800218a:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d129      	bne.n	80021e6 <RTC_SetTime+0x9a>

		sTime->TimeFormat = 0x00U;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2200      	movs	r2, #0
 8002196:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f00b fe7d 	bl	800de9c <RTC_ByteToBcd2>
 80021a2:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80021a4:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00b fe76 	bl	800de9c <RTC_ByteToBcd2>
 80021b0:	4603      	mov	r3, r0
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	789b      	ldrb	r3, [r3, #2]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f00b fe6e 	bl	800de9c <RTC_ByteToBcd2>
 80021c0:	4603      	mov	r3, r0
 80021c2:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	78db      	ldrb	r3, [r3, #3]
 80021ca:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	6939      	ldr	r1, [r7, #16]
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <RTC_SetTime+0xc4>)
 80021d8:	400b      	ands	r3, r1
 80021da:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f00b fe1f 	bl	800de20 <RTC_ExitInitMode>
 80021e2:	4603      	mov	r3, r0
 80021e4:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <RTC_SetTime+0xb0>
		hrtc->State = HAL_RTC_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2020 	strb.w	r2, [r3, #32]
 8002204:	e000      	b.n	8002208 <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 8002206:	bf00      	nop

}
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop
 8002210:	007f7f7f 	.word	0x007f7f7f

08002214 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	789b      	ldrb	r3, [r3, #2]
 8002228:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	78db      	ldrb	r3, [r3, #3]
 8002230:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	791b      	ldrb	r3, [r3, #4]
 8002238:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	795b      	ldrb	r3, [r3, #5]
 8002240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	799b      	ldrb	r3, [r3, #6]
 8002248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3307      	adds	r3, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	b21a      	sxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3308      	adds	r3, #8
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b21b      	sxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b21b      	sxth	r3, r3
 8002262:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8002264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 800226c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002270:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8002274:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 800227c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002280:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8002282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002286:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8002288:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800228c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800228e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002290:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	2200      	movs	r2, #0
 8002298:	4619      	mov	r1, r3
 800229a:	480b      	ldr	r0, [pc, #44]	; (80022c8 <calibrateRTC+0xb4>)
 800229c:	f00b fc92 	bl	800dbc4 <HAL_RTC_SetDate>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80022a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <calibrateRTC+0x9e>
		Error_Handler();
 80022ae:	f000 feab 	bl	8003008 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4803      	ldr	r0, [pc, #12]	; (80022c8 <calibrateRTC+0xb4>)
 80022bc:	f7ff ff46 	bl	800214c <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 80022c0:	bf00      	nop
 80022c2:	3730      	adds	r7, #48	; 0x30
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	240003d4 	.word	0x240003d4

080022cc <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
	send_ACK();
 80022d2:	f000 f821 	bl	8002318 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <sync+0x44>)
 80022d8:	f00e f8e6 	bl	80104a8 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	2209      	movs	r2, #9
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <sync+0x48>)
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <sync+0x44>)
 80022e4:	f00d ff4c 	bl	8010180 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <sync+0x48>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2bff      	cmp	r3, #255	; 0xff
 80022f2:	d1f3      	bne.n	80022dc <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 80022f4:	4807      	ldr	r0, [pc, #28]	; (8002314 <sync+0x48>)
 80022f6:	f7ff ff8d 	bl	8002214 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80022fa:	2201      	movs	r2, #1
 80022fc:	4905      	ldr	r1, [pc, #20]	; (8002314 <sync+0x48>)
 80022fe:	4804      	ldr	r0, [pc, #16]	; (8002310 <sync+0x44>)
 8002300:	f00e f806 	bl	8010310 <HAL_UART_Receive_IT>

	send_ACK();
 8002304:	f000 f808 	bl	8002318 <send_ACK>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	240005ec 	.word	0x240005ec
 8002314:	24000c24 	.word	0x24000c24

08002318 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <send_ACK+0x1c>)
 800231e:	22ff      	movs	r2, #255	; 0xff
 8002320:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002322:	2364      	movs	r3, #100	; 0x64
 8002324:	2201      	movs	r2, #1
 8002326:	4903      	ldr	r1, [pc, #12]	; (8002334 <send_ACK+0x1c>)
 8002328:	4803      	ldr	r0, [pc, #12]	; (8002338 <send_ACK+0x20>)
 800232a:	f00d fe9b 	bl	8010064 <HAL_UART_Transmit>
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	24000ca8 	.word	0x24000ca8
 8002338:	240005ec 	.word	0x240005ec

0800233c <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <HAL_UART_TxCpltCallback+0x1c>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	24000000 	.word	0x24000000

0800235c <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	4613      	mov	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4618      	mov	r0, r3
 800236e:	f014 fb27 	bl	80169c0 <malloc>
 8002372:	4603      	mov	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f014 fb2f 	bl	80169e0 <memcpy>
	packet.size = size;
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	82bb      	strh	r3, [r7, #20]
	return packet;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	461a      	mov	r2, r3
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002392:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80023a4:	2100      	movs	r1, #0
 80023a6:	481d      	ldr	r0, [pc, #116]	; (800241c <system_setup+0x7c>)
 80023a8:	f00c fad2 	bl	800e950 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80023ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023b0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80023b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023be:	4818      	ldr	r0, [pc, #96]	; (8002420 <system_setup+0x80>)
 80023c0:	f003 f88a 	bl	80054d8 <HAL_ADCEx_Calibration_Start>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80023ca:	f000 fe1d 	bl	8003008 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80023ce:	220b      	movs	r2, #11
 80023d0:	4914      	ldr	r1, [pc, #80]	; (8002424 <system_setup+0x84>)
 80023d2:	4813      	ldr	r0, [pc, #76]	; (8002420 <system_setup+0x80>)
 80023d4:	f002 f95e 	bl	8004694 <HAL_ADC_Start_DMA>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80023de:	f000 fe13 	bl	8003008 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80023e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ea:	480f      	ldr	r0, [pc, #60]	; (8002428 <system_setup+0x88>)
 80023ec:	f003 f874 	bl	80054d8 <HAL_ADCEx_Calibration_Start>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80023f6:	f000 fe07 	bl	8003008 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80023fa:	2204      	movs	r2, #4
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <system_setup+0x8c>)
 80023fe:	480a      	ldr	r0, [pc, #40]	; (8002428 <system_setup+0x88>)
 8002400:	f002 f948 	bl	8004694 <HAL_ADC_Start_DMA>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800240a:	f000 fdfd 	bl	8003008 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800240e:	2201      	movs	r2, #1
 8002410:	4907      	ldr	r1, [pc, #28]	; (8002430 <system_setup+0x90>)
 8002412:	4808      	ldr	r0, [pc, #32]	; (8002434 <system_setup+0x94>)
 8002414:	f00d ff7c 	bl	8010310 <HAL_UART_Receive_IT>
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	240005a0 	.word	0x240005a0
 8002420:	2400013c 	.word	0x2400013c
 8002424:	24000c80 	.word	0x24000c80
 8002428:	240001a0 	.word	0x240001a0
 800242c:	24000ca0 	.word	0x24000ca0
 8002430:	24000c24 	.word	0x24000c24
 8002434:	240005ec 	.word	0x240005ec

08002438 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <get_uptime+0x88>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <get_uptime+0x8c>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <get_uptime+0x88>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	429a      	cmp	r2, r3
 8002458:	d005      	beq.n	8002466 <get_uptime+0x2e>
		ms = uptime_millis;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <get_uptime+0x88>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <get_uptime+0x8c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800246c:	fb03 f202 	mul.w	r2, r3, r2
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <get_uptime+0x8c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	3301      	adds	r3, #1
 8002476:	4914      	ldr	r1, [pc, #80]	; (80024c8 <get_uptime+0x90>)
 8002478:	fba1 1303 	umull	r1, r3, r1, r3
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	fbb1 f3f3 	udiv	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	0e1b      	lsrs	r3, r3, #24
 800248c:	b2da      	uxtb	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	0c1a      	lsrs	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3301      	adds	r3, #1
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	0a1a      	lsrs	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3302      	adds	r3, #2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3303      	adds	r3, #3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	24000c00 	.word	0x24000c00
 80024c4:	e000e010 	.word	0xe000e010
 80024c8:	10624dd3 	.word	0x10624dd3

080024cc <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	2200      	movs	r2, #0
 80024da:	4619      	mov	r1, r3
 80024dc:	4821      	ldr	r0, [pc, #132]	; (8002564 <getTimestamp+0x98>)
 80024de:	f00b fb15 	bl	800db0c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	481e      	ldr	r0, [pc, #120]	; (8002564 <getTimestamp+0x98>)
 80024ec:	f00b fbf2 	bl	800dcd4 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2264      	movs	r2, #100	; 0x64
 80024f4:	fb03 f202 	mul.w	r2, r3, r2
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <getTimestamp+0x9c>)
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3301      	adds	r3, #1
 8002508:	7b7a      	ldrb	r2, [r7, #13]
 800250a:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3302      	adds	r3, #2
 8002510:	7bba      	ldrb	r2, [r7, #14]
 8002512:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3303      	adds	r3, #3
 8002518:	7c3a      	ldrb	r2, [r7, #16]
 800251a:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	7c7a      	ldrb	r2, [r7, #17]
 8002522:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3305      	adds	r3, #5
 8002528:	7cba      	ldrb	r2, [r7, #18]
 800252a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	0e1a      	lsrs	r2, r3, #24
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3306      	adds	r3, #6
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	0c1a      	lsrs	r2, r3, #16
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3307      	adds	r3, #7
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	0a1a      	lsrs	r2, r3, #8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3308      	adds	r3, #8
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3309      	adds	r3, #9
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	3728      	adds	r7, #40	; 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	240003d4 	.word	0x240003d4
 8002568:	000f4240 	.word	0x000f4240

0800256c <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002572:	bf00      	nop
 8002574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002578:	4833      	ldr	r0, [pc, #204]	; (8002648 <sample_pmt+0xdc>)
 800257a:	f006 fdcd 	bl	8009118 <HAL_GPIO_ReadPin>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f7      	bne.n	8002574 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002584:	200a      	movs	r0, #10
 8002586:	f014 fa1b 	bl	80169c0 <malloc>
 800258a:	4603      	mov	r3, r0
 800258c:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800258e:	2002      	movs	r0, #2
 8002590:	f014 fa16 	bl	80169c0 <malloc>
 8002594:	4603      	mov	r3, r0
 8002596:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002598:	2004      	movs	r0, #4
 800259a:	f014 fa11 	bl	80169c0 <malloc>
 800259e:	4603      	mov	r3, r0
 80025a0:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff ff48 	bl	8002438 <get_uptime>

	receive_pmt_spi(pmt_spi);
 80025a8:	6938      	ldr	r0, [r7, #16]
 80025aa:	f7ff fc59 	bl	8001e60 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	22bb      	movs	r2, #187	; 0xbb
 80025b2:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	22bb      	movs	r2, #187	; 0xbb
 80025ba:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <sample_pmt+0xe0>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3302      	adds	r3, #2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <sample_pmt+0xe0>)
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3303      	adds	r3, #3
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3304      	adds	r3, #4
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3305      	adds	r3, #5
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	7852      	ldrb	r2, [r2, #1]
 80025ea:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3306      	adds	r3, #6
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3307      	adds	r3, #7
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	7852      	ldrb	r2, [r2, #1]
 80025fe:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3308      	adds	r3, #8
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	7892      	ldrb	r2, [r2, #2]
 8002608:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3309      	adds	r3, #9
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	78d2      	ldrb	r2, [r2, #3]
 8002612:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	220a      	movs	r2, #10
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fe9e 	bl	800235c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <sample_pmt+0xe4>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	1d39      	adds	r1, r7, #4
 8002626:	2300      	movs	r3, #0
 8002628:	2200      	movs	r2, #0
 800262a:	f010 ff6b 	bl	8013504 <osMessageQueuePut>
	free(buffer);
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f014 f9ce 	bl	80169d0 <free>
	free(pmt_spi);
 8002634:	6938      	ldr	r0, [r7, #16]
 8002636:	f014 f9cb 	bl	80169d0 <free>
	free(uptime);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f014 f9c8 	bl	80169d0 <free>
}
 8002640:	bf00      	nop
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58020000 	.word	0x58020000
 800264c:	24000c10 	.word	0x24000c10
 8002650:	24000c04 	.word	0x24000c04

08002654 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800265a:	bf00      	nop
 800265c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002660:	4848      	ldr	r0, [pc, #288]	; (8002784 <sample_erpa+0x130>)
 8002662:	f006 fd59 	bl	8009118 <HAL_GPIO_ReadPin>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f7      	bne.n	800265c <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800266c:	200e      	movs	r0, #14
 800266e:	f014 f9a7 	bl	80169c0 <malloc>
 8002672:	4603      	mov	r3, r0
 8002674:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002676:	2002      	movs	r0, #2
 8002678:	f014 f9a2 	bl	80169c0 <malloc>
 800267c:	4603      	mov	r3, r0
 800267e:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002680:	2002      	movs	r0, #2
 8002682:	f014 f99d 	bl	80169c0 <malloc>
 8002686:	4603      	mov	r3, r0
 8002688:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800268a:	2004      	movs	r0, #4
 800268c:	f014 f998 	bl	80169c0 <malloc>
 8002690:	4603      	mov	r3, r0
 8002692:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002694:	23ff      	movs	r3, #255	; 0xff
 8002696:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002698:	6938      	ldr	r0, [r7, #16]
 800269a:	f7ff fecd 	bl	8002438 <get_uptime>
	sweep_step = get_current_step();
 800269e:	f7ff fce3 	bl	8002068 <get_current_step>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 80026a6:	69b8      	ldr	r0, [r7, #24]
 80026a8:	f7ff fbfe 	bl	8001ea8 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7ff fc1f 	bl	8001ef0 <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	22aa      	movs	r2, #170	; 0xaa
 80026b6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	22aa      	movs	r2, #170	; 0xaa
 80026be:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <sample_erpa+0x134>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0c1a      	lsrs	r2, r3, #16
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3302      	adds	r3, #2
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <sample_erpa+0x134>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0a1a      	lsrs	r2, r3, #8
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3303      	adds	r3, #3
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <sample_erpa+0x134>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3304      	adds	r3, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	3305      	adds	r3, #5
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	3306      	adds	r3, #6
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	881a      	ldrh	r2, [r3, #0]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3307      	adds	r3, #7
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3308      	adds	r3, #8
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	7812      	ldrb	r2, [r2, #0]
 8002714:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3309      	adds	r3, #9
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	7852      	ldrb	r2, [r2, #1]
 800271e:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	330a      	adds	r3, #10
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	7812      	ldrb	r2, [r2, #0]
 8002728:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	330b      	adds	r3, #11
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	7852      	ldrb	r2, [r2, #1]
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	330c      	adds	r3, #12
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	7892      	ldrb	r2, [r2, #2]
 800273c:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	330d      	adds	r3, #13
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	78d2      	ldrb	r2, [r2, #3]
 8002746:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	220e      	movs	r2, #14
 800274c:	69f9      	ldr	r1, [r7, #28]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe04 	bl	800235c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <sample_erpa+0x138>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	1d39      	adds	r1, r7, #4
 800275a:	2300      	movs	r3, #0
 800275c:	2200      	movs	r2, #0
 800275e:	f010 fed1 	bl	8013504 <osMessageQueuePut>
	free(buffer);
 8002762:	69f8      	ldr	r0, [r7, #28]
 8002764:	f014 f934 	bl	80169d0 <free>
	free(erpa_spi);
 8002768:	69b8      	ldr	r0, [r7, #24]
 800276a:	f014 f931 	bl	80169d0 <free>
	free(erpa_adc);
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f014 f92e 	bl	80169d0 <free>
	free(uptime);
 8002774:	6938      	ldr	r0, [r7, #16]
 8002776:	f014 f92b 	bl	80169d0 <free>
}
 800277a:	bf00      	nop
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	58020400 	.word	0x58020400
 8002788:	24000c14 	.word	0x24000c14
 800278c:	24000c04 	.word	0x24000c04

08002790 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002796:	2036      	movs	r0, #54	; 0x36
 8002798:	f014 f912 	bl	80169c0 <malloc>
 800279c:	4603      	mov	r3, r0
 800279e:	617b      	str	r3, [r7, #20]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80027a0:	2008      	movs	r0, #8
 80027a2:	f014 f90d 	bl	80169c0 <malloc>
 80027a6:	4603      	mov	r3, r0
 80027a8:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80027aa:	200a      	movs	r0, #10
 80027ac:	f014 f908 	bl	80169c0 <malloc>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80027b4:	2004      	movs	r0, #4
 80027b6:	f014 f903 	bl	80169c0 <malloc>
 80027ba:	4603      	mov	r3, r0
 80027bc:	60bb      	str	r3, [r7, #8]

	get_uptime(uptime);
 80027be:	68b8      	ldr	r0, [r7, #8]
 80027c0:	f7ff fe3a 	bl	8002438 <get_uptime>
	getTimestamp(timestamp);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fe81 	bl	80024cc <getTimestamp>
	receive_hk_i2c(hk_i2c);
 80027ca:	6938      	ldr	r0, [r7, #16]
 80027cc:	f7ff fba2 	bl	8001f14 <receive_hk_i2c>


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	22cc      	movs	r2, #204	; 0xcc
 80027d4:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	22cc      	movs	r2, #204	; 0xcc
 80027dc:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80027de:	4ba1      	ldr	r3, [pc, #644]	; (8002a64 <sample_hk+0x2d4>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	3302      	adds	r3, #2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80027ee:	4b9d      	ldr	r3, [pc, #628]	; (8002a64 <sample_hk+0x2d4>)
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3303      	adds	r3, #3
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80027fa:	4b9b      	ldr	r3, [pc, #620]	; (8002a68 <sample_hk+0x2d8>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29a      	uxth	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3304      	adds	r3, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800280a:	4b97      	ldr	r3, [pc, #604]	; (8002a68 <sample_hk+0x2d8>)
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3305      	adds	r3, #5
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 8002816:	4b95      	ldr	r3, [pc, #596]	; (8002a6c <sample_hk+0x2dc>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	b29a      	uxth	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3306      	adds	r3, #6
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002826:	4b91      	ldr	r3, [pc, #580]	; (8002a6c <sample_hk+0x2dc>)
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3307      	adds	r3, #7
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002838:	121a      	asrs	r2, r3, #8
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3308      	adds	r3, #8
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3309      	adds	r3, #9
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	3302      	adds	r3, #2
 8002854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002858:	121a      	asrs	r2, r3, #8
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	330a      	adds	r3, #10
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	3302      	adds	r3, #2
 8002866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	330b      	adds	r3, #11
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3304      	adds	r3, #4
 8002876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287a:	121a      	asrs	r2, r3, #8
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	330c      	adds	r3, #12
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	3304      	adds	r3, #4
 8002888:	f9b3 2000 	ldrsh.w	r2, [r3]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	330d      	adds	r3, #13
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	3306      	adds	r3, #6
 8002898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289c:	121a      	asrs	r2, r3, #8
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	330e      	adds	r3, #14
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3306      	adds	r3, #6
 80028aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	330f      	adds	r3, #15
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80028b6:	4b6e      	ldr	r3, [pc, #440]	; (8002a70 <sample_hk+0x2e0>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b29a      	uxth	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3310      	adds	r3, #16
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80028c6:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <sample_hk+0x2e0>)
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3311      	adds	r3, #17
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 80028d2:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <sample_hk+0x2e4>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	b29a      	uxth	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3312      	adds	r3, #18
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 80028e2:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <sample_hk+0x2e4>)
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3313      	adds	r3, #19
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <sample_hk+0x2e8>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3314      	adds	r3, #20
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 80028fe:	4b5e      	ldr	r3, [pc, #376]	; (8002a78 <sample_hk+0x2e8>)
 8002900:	881a      	ldrh	r2, [r3, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3315      	adds	r3, #21
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <sample_hk+0x2ec>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29a      	uxth	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3316      	adds	r3, #22
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 800291a:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <sample_hk+0x2ec>)
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3317      	adds	r3, #23
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002926:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <sample_hk+0x2f0>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29a      	uxth	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3318      	adds	r3, #24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002936:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <sample_hk+0x2f0>)
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3319      	adds	r3, #25
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002942:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <sample_hk+0x2f4>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	331a      	adds	r3, #26
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <sample_hk+0x2f4>)
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	331b      	adds	r3, #27
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <sample_hk+0x2f8>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	b29a      	uxth	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	331c      	adds	r3, #28
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 800296e:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <sample_hk+0x2f8>)
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	331d      	adds	r3, #29
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 800297a:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <sample_hk+0x2fc>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	331e      	adds	r3, #30
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <sample_hk+0x2fc>)
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	331f      	adds	r3, #31
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <sample_hk+0x300>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	b29a      	uxth	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3320      	adds	r3, #32
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <sample_hk+0x300>)
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3321      	adds	r3, #33	; 0x21
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <sample_hk+0x304>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3322      	adds	r3, #34	; 0x22
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <sample_hk+0x304>)
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3323      	adds	r3, #35	; 0x23
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <sample_hk+0x308>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3324      	adds	r3, #36	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <sample_hk+0x308>)
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3325      	adds	r3, #37	; 0x25
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <sample_hk+0x30c>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3326      	adds	r3, #38	; 0x26
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <sample_hk+0x30c>)
 80029fc:	881a      	ldrh	r2, [r3, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3327      	adds	r3, #39	; 0x27
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3328      	adds	r3, #40	; 0x28
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3329      	adds	r3, #41	; 0x29
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	7852      	ldrb	r2, [r2, #1]
 8002a18:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	332a      	adds	r3, #42	; 0x2a
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	7892      	ldrb	r2, [r2, #2]
 8002a22:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	332b      	adds	r3, #43	; 0x2b
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	78d2      	ldrb	r2, [r2, #3]
 8002a2c:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	332c      	adds	r3, #44	; 0x2c
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	7912      	ldrb	r2, [r2, #4]
 8002a36:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	332d      	adds	r3, #45	; 0x2d
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	7952      	ldrb	r2, [r2, #5]
 8002a40:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	332e      	adds	r3, #46	; 0x2e
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	7992      	ldrb	r2, [r2, #6]
 8002a4a:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	332f      	adds	r3, #47	; 0x2f
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	79d2      	ldrb	r2, [r2, #7]
 8002a54:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3330      	adds	r3, #48	; 0x30
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	7a12      	ldrb	r2, [r2, #8]
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e01e      	b.n	8002aa0 <sample_hk+0x310>
 8002a62:	bf00      	nop
 8002a64:	24000c18 	.word	0x24000c18
 8002a68:	24000be2 	.word	0x24000be2
 8002a6c:	24000be4 	.word	0x24000be4
 8002a70:	24000be6 	.word	0x24000be6
 8002a74:	24000be8 	.word	0x24000be8
 8002a78:	24000bea 	.word	0x24000bea
 8002a7c:	24000bec 	.word	0x24000bec
 8002a80:	24000bee 	.word	0x24000bee
 8002a84:	24000bf0 	.word	0x24000bf0
 8002a88:	24000bf2 	.word	0x24000bf2
 8002a8c:	24000bf4 	.word	0x24000bf4
 8002a90:	24000bf6 	.word	0x24000bf6
 8002a94:	24000bf8 	.word	0x24000bf8
 8002a98:	24000bfa 	.word	0x24000bfa
 8002a9c:	24000bfc 	.word	0x24000bfc
	buffer[49] = timestamp[9];
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3331      	adds	r3, #49	; 0x31
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	7a52      	ldrb	r2, [r2, #9]
 8002aa8:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3332      	adds	r3, #50	; 0x32
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3333      	adds	r3, #51	; 0x33
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	7852      	ldrb	r2, [r2, #1]
 8002abc:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3334      	adds	r3, #52	; 0x34
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	7892      	ldrb	r2, [r2, #2]
 8002ac6:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3335      	adds	r3, #53	; 0x35
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	78d2      	ldrb	r2, [r2, #3]
 8002ad0:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	2236      	movs	r2, #54	; 0x36
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fc3f 	bl	800235c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <sample_hk+0x37c>)
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	4639      	mov	r1, r7
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f010 fd0c 	bl	8013504 <osMessageQueuePut>

	free(buffer);
 8002aec:	6978      	ldr	r0, [r7, #20]
 8002aee:	f013 ff6f 	bl	80169d0 <free>
	free(hk_i2c);
 8002af2:	6938      	ldr	r0, [r7, #16]
 8002af4:	f013 ff6c 	bl	80169d0 <free>
	free(timestamp);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f013 ff69 	bl	80169d0 <free>
	free(uptime);
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f013 ff66 	bl	80169d0 <free>
}
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	24000c04 	.word	0x24000c04

08002b10 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <PMT_init+0x38>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b20:	2200      	movs	r2, #0
 8002b22:	2101      	movs	r1, #1
 8002b24:	f010 fc15 	bl	8013352 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <PMT_init+0x3c>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <PMT_init+0x32>
			sample_pmt();
 8002b32:	f7ff fd1b 	bl	800256c <sample_pmt>
			pmt_seq++;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <PMT_init+0x40>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <PMT_init+0x40>)
 8002b40:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002b42:	f010 fad3 	bl	80130ec <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b46:	e7e7      	b.n	8002b18 <PMT_init+0x8>
 8002b48:	24000c20 	.word	0x24000c20
 8002b4c:	24000c1a 	.word	0x24000c1a
 8002b50:	24000c10 	.word	0x24000c10

08002b54 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <ERPA_init+0x38>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b64:	2200      	movs	r2, #0
 8002b66:	2102      	movs	r1, #2
 8002b68:	f010 fbf3 	bl	8013352 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <ERPA_init+0x3c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <ERPA_init+0x30>
			sample_erpa();
 8002b76:	f7ff fd6d 	bl	8002654 <sample_erpa>
			erpa_seq++;
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <ERPA_init+0x40>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <ERPA_init+0x40>)
 8002b82:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002b84:	f010 fab2 	bl	80130ec <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b88:	e7e8      	b.n	8002b5c <ERPA_init+0x8>
 8002b8a:	bf00      	nop
 8002b8c:	24000c20 	.word	0x24000c20
 8002b90:	24000c1b 	.word	0x24000c1b
 8002b94:	24000c14 	.word	0x24000c14

08002b98 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HK_init+0x38>)
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2104      	movs	r1, #4
 8002bac:	f010 fbd1 	bl	8013352 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HK_init+0x3c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HK_init+0x32>
			sample_hk();
 8002bba:	f7ff fde9 	bl	8002790 <sample_hk>
			hk_seq++;
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HK_init+0x40>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HK_init+0x40>)
 8002bc8:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002bca:	f010 fa8f 	bl	80130ec <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002bce:	e7e7      	b.n	8002ba0 <HK_init+0x8>
 8002bd0:	24000c20 	.word	0x24000c20
 8002bd4:	24000c1c 	.word	0x24000c1c
 8002bd8:	24000c18 	.word	0x24000c18

08002bdc <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <GPIO_on_init+0x50>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f010 fa9f 	bl	801312c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e012      	b.n	8002c1a <GPIO_on_init+0x3e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <GPIO_on_init+0x54>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <GPIO_on_init+0x54>)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	889b      	ldrh	r3, [r3, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f006 fa9d 	bl	8009148 <HAL_GPIO_WritePin>
			osDelay(100);
 8002c0e:	2064      	movs	r0, #100	; 0x64
 8002c10:	f010 faad 	bl	801316e <osDelay>
		for (int i = 0; i < 7; i++) {
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	dde9      	ble.n	8002bf4 <GPIO_on_init+0x18>
		}

		osThreadSuspend(GPIO_on_taskHandle);
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <GPIO_on_init+0x50>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f010 fa81 	bl	801312c <osThreadSuspend>
		for (int i = 0; i < 7; i++) {
 8002c2a:	e7e0      	b.n	8002bee <GPIO_on_init+0x12>
 8002c2c:	24000704 	.word	0x24000704
 8002c30:	08017814 	.word	0x08017814

08002c34 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <GPIO_off_init+0x50>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f010 fa73 	bl	801312c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8002c46:	2306      	movs	r3, #6
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e012      	b.n	8002c72 <GPIO_off_init+0x3e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <GPIO_off_init+0x54>)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <GPIO_off_init+0x54>)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	889b      	ldrh	r3, [r3, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4619      	mov	r1, r3
 8002c62:	f006 fa71 	bl	8009148 <HAL_GPIO_WritePin>
			osDelay(100);
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	f010 fa81 	bl	801316e <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	dae9      	bge.n	8002c4c <GPIO_off_init+0x18>
		}

		osThreadSuspend(GPIO_off_taskHandle);
 8002c78:	4b02      	ldr	r3, [pc, #8]	; (8002c84 <GPIO_off_init+0x50>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f010 fa55 	bl	801312c <osThreadSuspend>
		for (int i = 6; i >= 0; i--) {
 8002c82:	e7e0      	b.n	8002c46 <GPIO_off_init+0x12>
 8002c84:	24000964 	.word	0x24000964
 8002c88:	08017814 	.word	0x08017814

08002c8c <UART_TX_init>:
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002c9c:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <UART_TX_init+0xa4>)
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4923      	ldr	r1, [pc, #140]	; (8002d34 <UART_TX_init+0xa8>)
 8002ca8:	f010 fc8c 	bl	80135c4 <osMessageQueueGet>
 8002cac:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d121      	bne.n	8002cf8 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <UART_TX_init+0xa8>)
 8002cb6:	889b      	ldrh	r3, [r3, #4]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc2:	d219      	bcs.n	8002cf8 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <UART_TX_init+0xac>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <UART_TX_init+0xa8>)
 8002ccc:	6811      	ldr	r1, [r2, #0]
 8002cce:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <UART_TX_init+0xa8>)
 8002cd0:	8892      	ldrh	r2, [r2, #4]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f013 fe84 	bl	80169e0 <memcpy>
					free(msg.array);
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <UART_TX_init+0xa8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f013 fe77 	bl	80169d0 <free>
					total_size += msg.size;
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <UART_TX_init+0xa8>)
 8002ce4:	889b      	ldrh	r3, [r3, #4]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f240 32b1 	movw	r2, #945	; 0x3b1
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d803      	bhi.n	8002d00 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ce      	beq.n	8002c9c <UART_TX_init+0x10>
 8002cfe:	e000      	b.n	8002d02 <UART_TX_init+0x76>
						break;
 8002d00:	bf00      	nop

		if (total_size > 0) {
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	490a      	ldr	r1, [pc, #40]	; (8002d38 <UART_TX_init+0xac>)
 8002d10:	480a      	ldr	r0, [pc, #40]	; (8002d3c <UART_TX_init+0xb0>)
 8002d12:	f00d fb49 	bl	80103a8 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002d16:	e001      	b.n	8002d1c <UART_TX_init+0x90>
				osThreadYield();
 8002d18:	f010 f9e8 	bl	80130ec <osThreadYield>
			while (tx_flag == 0) {
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <UART_TX_init+0xb4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f9      	beq.n	8002d18 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <UART_TX_init+0xb4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002d2a:	f010 f9df 	bl	80130ec <osThreadYield>
		total_size = 0;
 8002d2e:	e7b3      	b.n	8002c98 <UART_TX_init+0xc>
 8002d30:	24000c04 	.word	0x24000c04
 8002d34:	24000c08 	.word	0x24000c08
 8002d38:	24000cac 	.word	0x24000cac
 8002d3c:	240005ec 	.word	0x240005ec
 8002d40:	24000000 	.word	0x24000000

08002d44 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <Voltage_Monitor_init+0xbc>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d54:	2200      	movs	r2, #0
 8002d56:	2108      	movs	r1, #8
 8002d58:	f010 fafb 	bl	8013352 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002d5c:	2014      	movs	r0, #20
 8002d5e:	f013 fe2f 	bl	80169c0 <malloc>
 8002d62:	4603      	mov	r3, r0
 8002d64:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002d66:	2008      	movs	r0, #8
 8002d68:	f013 fe2a 	bl	80169c0 <malloc>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff f8ff 	bl	8001f74 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002d76:	68b8      	ldr	r0, [r7, #8]
 8002d78:	f7ff f94e 	bl	8002018 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	885a      	ldrh	r2, [r3, #2]
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <Voltage_Monitor_init+0xc0>)
 8002d82:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	881a      	ldrh	r2, [r3, #0]
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <Voltage_Monitor_init+0xc4>)
 8002d8a:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	881a      	ldrh	r2, [r3, #0]
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <Voltage_Monitor_init+0xc8>)
 8002d92:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	885a      	ldrh	r2, [r3, #2]
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <Voltage_Monitor_init+0xcc>)
 8002d9a:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	889a      	ldrh	r2, [r3, #4]
 8002da0:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <Voltage_Monitor_init+0xd0>)
 8002da2:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	88da      	ldrh	r2, [r3, #6]
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <Voltage_Monitor_init+0xd4>)
 8002daa:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	899a      	ldrh	r2, [r3, #12]
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <Voltage_Monitor_init+0xd8>)
 8002db2:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	88da      	ldrh	r2, [r3, #6]
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <Voltage_Monitor_init+0xdc>)
 8002dba:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	889a      	ldrh	r2, [r3, #4]
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <Voltage_Monitor_init+0xe0>)
 8002dc2:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	89da      	ldrh	r2, [r3, #14]
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <Voltage_Monitor_init+0xe4>)
 8002dca:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8a1a      	ldrh	r2, [r3, #16]
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <Voltage_Monitor_init+0xe8>)
 8002dd2:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	891a      	ldrh	r2, [r3, #8]
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <Voltage_Monitor_init+0xec>)
 8002dda:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	895a      	ldrh	r2, [r3, #10]
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <Voltage_Monitor_init+0xf0>)
 8002de2:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8a5a      	ldrh	r2, [r3, #18]
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <Voltage_Monitor_init+0xf4>)
 8002dea:	801a      	strh	r2, [r3, #0]
				error_protocol(RAIL_n800v);
			}
		}
#endif

		free(hk_adc1);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f013 fdef 	bl	80169d0 <free>
		free(hk_adc3);
 8002df2:	68b8      	ldr	r0, [r7, #8]
 8002df4:	f013 fdec 	bl	80169d0 <free>

		osThreadYield();
 8002df8:	f010 f978 	bl	80130ec <osThreadYield>
	for (;;) {
 8002dfc:	e7a6      	b.n	8002d4c <Voltage_Monitor_init+0x8>
 8002dfe:	bf00      	nop
 8002e00:	24000c20 	.word	0x24000c20
 8002e04:	24000be2 	.word	0x24000be2
 8002e08:	24000be4 	.word	0x24000be4
 8002e0c:	24000be6 	.word	0x24000be6
 8002e10:	24000be8 	.word	0x24000be8
 8002e14:	24000bea 	.word	0x24000bea
 8002e18:	24000bec 	.word	0x24000bec
 8002e1c:	24000bee 	.word	0x24000bee
 8002e20:	24000bf0 	.word	0x24000bf0
 8002e24:	24000bf2 	.word	0x24000bf2
 8002e28:	24000bf4 	.word	0x24000bf4
 8002e2c:	24000bf6 	.word	0x24000bf6
 8002e30:	24000bf8 	.word	0x24000bf8
 8002e34:	24000bfa 	.word	0x24000bfa
 8002e38:	24000bfc 	.word	0x24000bfc

08002e3c <FLAG_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <FLAG_init+0x38>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f010 fa61 	bl	8013310 <osEventFlagsGet>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0316 	and.w	r3, r3, #22
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <FLAG_init+0x38>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2116      	movs	r1, #22
 8002e62:	4618      	mov	r0, r3
 8002e64:	f010 fa22 	bl	80132ac <osEventFlagsClear>
			enter_stop();
 8002e68:	f7ff f960 	bl	800212c <enter_stop>
		}
		osDelay(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f010 f97e 	bl	801316e <osDelay>
	for (;;) {
 8002e72:	e7e7      	b.n	8002e44 <FLAG_init+0x8>
 8002e74:	24000c20 	.word	0x24000c20

08002e78 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
	osThreadSuspend(Science_taskHandle);
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <Science_init+0xb0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f010 f951 	bl	801312c <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	e012      	b.n	8002eb6 <Science_init+0x3e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002e90:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <Science_init+0xb4>)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e98:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <Science_init+0xb4>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	889b      	ldrh	r3, [r3, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f006 f94f 	bl	8009148 <HAL_GPIO_WritePin>
			osDelay(200);
 8002eaa:	20c8      	movs	r0, #200	; 0xc8
 8002eac:	f010 f95f 	bl	801316e <osDelay>
		for (int i = 0; i < 9; i++) {
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	dde9      	ble.n	8002e90 <Science_init+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ebc:	b672      	cpsid	i
}
 8002ebe:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <Science_init+0xb8>)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	481a      	ldr	r0, [pc, #104]	; (8002f34 <Science_init+0xbc>)
 8002ecc:	f002 fda0 	bl	8005a10 <HAL_DAC_Start_DMA>
		HK_ON = 1;
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <Science_init+0xc0>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8002ed6:	210c      	movs	r1, #12
 8002ed8:	4818      	ldr	r0, [pc, #96]	; (8002f3c <Science_init+0xc4>)
 8002eda:	f00b fd39 	bl	800e950 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <Science_init+0xc8>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);				// PMT packet on
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4817      	ldr	r0, [pc, #92]	; (8002f44 <Science_init+0xcc>)
 8002ee8:	f00b fd32 	bl	800e950 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <Science_init+0xd0>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]

		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <Science_init+0xd4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2104      	movs	r1, #4
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f010 f993 	bl	8013224 <osEventFlagsSet>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <Science_init+0xd4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2102      	movs	r1, #2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f010 f98d 	bl	8013224 <osEventFlagsSet>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <Science_init+0xd4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f010 f987 	bl	8013224 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f16:	b662      	cpsie	i
}
 8002f18:	bf00      	nop

		__enable_irq();

		osThreadSuspend(Science_taskHandle);
 8002f1a:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <Science_init+0xb0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f010 f904 	bl	801312c <osThreadSuspend>
		for (int i = 0; i < 9; i++) {
 8002f24:	e7b1      	b.n	8002e8a <Science_init+0x12>
 8002f26:	bf00      	nop
 8002f28:	24000bd0 	.word	0x24000bd0
 8002f2c:	08017814 	.word	0x08017814
 8002f30:	2400000c 	.word	0x2400000c
 8002f34:	240002f4 	.word	0x240002f4
 8002f38:	24000c1c 	.word	0x24000c1c
 8002f3c:	24000554 	.word	0x24000554
 8002f40:	24000c1b 	.word	0x24000c1b
 8002f44:	24000508 	.word	0x24000508
 8002f48:	24000c1a 	.word	0x24000c1a
 8002f4c:	24000c20 	.word	0x24000c20

08002f50 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
	osThreadSuspend(Idle_taskHandle);
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <Idle_init+0x78>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f010 f8e5 	bl	801312c <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002f62:	2100      	movs	r1, #0
 8002f64:	4819      	ldr	r0, [pc, #100]	; (8002fcc <Idle_init+0x7c>)
 8002f66:	f00b fe4d 	bl	800ec04 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <Idle_init+0x80>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8002f70:	210c      	movs	r1, #12
 8002f72:	4818      	ldr	r0, [pc, #96]	; (8002fd4 <Idle_init+0x84>)
 8002f74:	f00b fe46 	bl	800ec04 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <Idle_init+0x88>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
		HK_ON = 0;
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <Idle_init+0x8c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8002f84:	2064      	movs	r0, #100	; 0x64
 8002f86:	f010 f8f2 	bl	801316e <osDelay>

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e012      	b.n	8002fb6 <Idle_init+0x66>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <Idle_init+0x90>)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002f98:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <Idle_init+0x90>)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	889b      	ldrh	r3, [r3, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f006 f8cf 	bl	8009148 <HAL_GPIO_WritePin>
			osDelay(200);
 8002faa:	20c8      	movs	r0, #200	; 0xc8
 8002fac:	f010 f8df 	bl	801316e <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dae9      	bge.n	8002f90 <Idle_init+0x40>
		}

		osThreadSuspend(Idle_taskHandle);
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <Idle_init+0x78>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f010 f8b3 	bl	801312c <osThreadSuspend>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002fc6:	e7cc      	b.n	8002f62 <Idle_init+0x12>
 8002fc8:	24000bd4 	.word	0x24000bd4
 8002fcc:	24000508 	.word	0x24000508
 8002fd0:	24000c1a 	.word	0x24000c1a
 8002fd4:	24000554 	.word	0x24000554
 8002fd8:	24000c1b 	.word	0x24000c1b
 8002fdc:	24000c1c 	.word	0x24000c1c
 8002fe0:	08017814 	.word	0x08017814

08002fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ff6:	f000 ff5b 	bl	8003eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40001000 	.word	0x40001000

08003008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
}
 800300e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003010:	e7fe      	b.n	8003010 <Error_Handler+0x8>
	...

08003014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_MspInit+0x38>)
 800301c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_MspInit+0x38>)
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_MspInit+0x38>)
 800302c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	210f      	movs	r1, #15
 800303c:	f06f 0001 	mvn.w	r0, #1
 8003040:	f002 fc44 	bl	80058cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	58024400 	.word	0x58024400

08003050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7b      	ldr	r2, [pc, #492]	; (800325c <HAL_ADC_MspInit+0x20c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	f040 8091 	bne.w	8003196 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003074:	4b7a      	ldr	r3, [pc, #488]	; (8003260 <HAL_ADC_MspInit+0x210>)
 8003076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800307a:	4a79      	ldr	r2, [pc, #484]	; (8003260 <HAL_ADC_MspInit+0x210>)
 800307c:	f043 0320 	orr.w	r3, r3, #32
 8003080:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003084:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_ADC_MspInit+0x210>)
 8003086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	623b      	str	r3, [r7, #32]
 8003090:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	4b73      	ldr	r3, [pc, #460]	; (8003260 <HAL_ADC_MspInit+0x210>)
 8003094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003098:	4a71      	ldr	r2, [pc, #452]	; (8003260 <HAL_ADC_MspInit+0x210>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a2:	4b6f      	ldr	r3, [pc, #444]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80030a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	4b6b      	ldr	r3, [pc, #428]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b6:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c0:	4b67      	ldr	r3, [pc, #412]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ce:	4b64      	ldr	r3, [pc, #400]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80030d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d4:	4a62      	ldr	r2, [pc, #392]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030de:	4b60      	ldr	r3, [pc, #384]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80030ec:	2333      	movs	r3, #51	; 0x33
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030f0:	2303      	movs	r3, #3
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fc:	4619      	mov	r1, r3
 80030fe:	4859      	ldr	r0, [pc, #356]	; (8003264 <HAL_ADC_MspInit+0x214>)
 8003100:	f005 fe5a 	bl	8008db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003104:	23ce      	movs	r3, #206	; 0xce
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003108:	2303      	movs	r3, #3
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003114:	4619      	mov	r1, r3
 8003116:	4854      	ldr	r0, [pc, #336]	; (8003268 <HAL_ADC_MspInit+0x218>)
 8003118:	f005 fe4e 	bl	8008db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800311c:	2303      	movs	r3, #3
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003120:	2303      	movs	r3, #3
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312c:	4619      	mov	r1, r3
 800312e:	484f      	ldr	r0, [pc, #316]	; (800326c <HAL_ADC_MspInit+0x21c>)
 8003130:	f005 fe42 	bl	8008db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003134:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <HAL_ADC_MspInit+0x220>)
 8003136:	4a4f      	ldr	r2, [pc, #316]	; (8003274 <HAL_ADC_MspInit+0x224>)
 8003138:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <HAL_ADC_MspInit+0x220>)
 800313c:	2209      	movs	r2, #9
 800313e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003140:	4b4b      	ldr	r3, [pc, #300]	; (8003270 <HAL_ADC_MspInit+0x220>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <HAL_ADC_MspInit+0x220>)
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800314c:	4b48      	ldr	r3, [pc, #288]	; (8003270 <HAL_ADC_MspInit+0x220>)
 800314e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003152:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003154:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_ADC_MspInit+0x220>)
 8003156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_ADC_MspInit+0x220>)
 800315e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003162:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_ADC_MspInit+0x220>)
 8003166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800316a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800316c:	4b40      	ldr	r3, [pc, #256]	; (8003270 <HAL_ADC_MspInit+0x220>)
 800316e:	2200      	movs	r2, #0
 8003170:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_ADC_MspInit+0x220>)
 8003174:	2200      	movs	r2, #0
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003178:	483d      	ldr	r0, [pc, #244]	; (8003270 <HAL_ADC_MspInit+0x220>)
 800317a:	f002 ffd5 	bl	8006128 <HAL_DMA_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003184:	f7ff ff40 	bl	8003008 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a39      	ldr	r2, [pc, #228]	; (8003270 <HAL_ADC_MspInit+0x220>)
 800318c:	64da      	str	r2, [r3, #76]	; 0x4c
 800318e:	4a38      	ldr	r2, [pc, #224]	; (8003270 <HAL_ADC_MspInit+0x220>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003194:	e05e      	b.n	8003254 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a37      	ldr	r2, [pc, #220]	; (8003278 <HAL_ADC_MspInit+0x228>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d159      	bne.n	8003254 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a6:	4a2e      	ldr	r2, [pc, #184]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80031a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80031b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031be:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80031c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c4:	4a26      	ldr	r2, [pc, #152]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_ADC_MspInit+0x210>)
 80031d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80031dc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80031e0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80031e4:	f000 fe90 	bl	8003f08 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80031e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80031ec:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80031f0:	f000 fe8a 	bl	8003f08 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80031f4:	4b21      	ldr	r3, [pc, #132]	; (800327c <HAL_ADC_MspInit+0x22c>)
 80031f6:	4a22      	ldr	r2, [pc, #136]	; (8003280 <HAL_ADC_MspInit+0x230>)
 80031f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_ADC_MspInit+0x22c>)
 80031fc:	2273      	movs	r2, #115	; 0x73
 80031fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_ADC_MspInit+0x22c>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_ADC_MspInit+0x22c>)
 8003208:	2200      	movs	r2, #0
 800320a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_ADC_MspInit+0x22c>)
 800320e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003212:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_ADC_MspInit+0x22c>)
 8003216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800321a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800321c:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_ADC_MspInit+0x22c>)
 800321e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003222:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_ADC_MspInit+0x22c>)
 8003226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800322a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_ADC_MspInit+0x22c>)
 800322e:	2200      	movs	r2, #0
 8003230:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_ADC_MspInit+0x22c>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003238:	4810      	ldr	r0, [pc, #64]	; (800327c <HAL_ADC_MspInit+0x22c>)
 800323a:	f002 ff75 	bl	8006128 <HAL_DMA_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003244:	f7ff fee0 	bl	8003008 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <HAL_ADC_MspInit+0x22c>)
 800324c:	64da      	str	r2, [r3, #76]	; 0x4c
 800324e:	4a0b      	ldr	r2, [pc, #44]	; (800327c <HAL_ADC_MspInit+0x22c>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003254:	bf00      	nop
 8003256:	3738      	adds	r7, #56	; 0x38
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40022000 	.word	0x40022000
 8003260:	58024400 	.word	0x58024400
 8003264:	58020800 	.word	0x58020800
 8003268:	58020000 	.word	0x58020000
 800326c:	58020400 	.word	0x58020400
 8003270:	24000204 	.word	0x24000204
 8003274:	40020010 	.word	0x40020010
 8003278:	58026000 	.word	0x58026000
 800327c:	2400027c 	.word	0x2400027c
 8003280:	40020028 	.word	0x40020028

08003284 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a34      	ldr	r2, [pc, #208]	; (8003374 <HAL_DAC_MspInit+0xf0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d161      	bne.n	800336a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80032a6:	4b34      	ldr	r3, [pc, #208]	; (8003378 <HAL_DAC_MspInit+0xf4>)
 80032a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ac:	4a32      	ldr	r2, [pc, #200]	; (8003378 <HAL_DAC_MspInit+0xf4>)
 80032ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032b6:	4b30      	ldr	r3, [pc, #192]	; (8003378 <HAL_DAC_MspInit+0xf4>)
 80032b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_DAC_MspInit+0xf4>)
 80032c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ca:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <HAL_DAC_MspInit+0xf4>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_DAC_MspInit+0xf4>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032e2:	2310      	movs	r3, #16
 80032e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032e6:	2303      	movs	r3, #3
 80032e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4619      	mov	r1, r3
 80032f4:	4821      	ldr	r0, [pc, #132]	; (800337c <HAL_DAC_MspInit+0xf8>)
 80032f6:	f005 fd5f 	bl	8008db8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 80032fc:	4a21      	ldr	r2, [pc, #132]	; (8003384 <HAL_DAC_MspInit+0x100>)
 80032fe:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003302:	2243      	movs	r2, #67	; 0x43
 8003304:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003306:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003308:	2240      	movs	r2, #64	; 0x40
 800330a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003318:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 800331c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003320:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003324:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003328:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 800332c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003330:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003334:	2200      	movs	r2, #0
 8003336:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 800333a:	2200      	movs	r2, #0
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800333e:	4810      	ldr	r0, [pc, #64]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003340:	f002 fef2 	bl	8006128 <HAL_DMA_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800334a:	f7ff fe5d 	bl	8003008 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_DAC_MspInit+0xfc>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	2105      	movs	r1, #5
 800335e:	2036      	movs	r0, #54	; 0x36
 8003360:	f002 fab4 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003364:	2036      	movs	r0, #54	; 0x36
 8003366:	f002 facb 	bl	8005900 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800336a:	bf00      	nop
 800336c:	3728      	adds	r7, #40	; 0x28
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40007400 	.word	0x40007400
 8003378:	58024400 	.word	0x58024400
 800337c:	58020000 	.word	0x58020000
 8003380:	24000308 	.word	0x24000308
 8003384:	40020088 	.word	0x40020088

08003388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b0ba      	sub	sp, #232	; 0xe8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003390:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033a0:	f107 0310 	add.w	r3, r7, #16
 80033a4:	22c0      	movs	r2, #192	; 0xc0
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f013 fb27 	bl	80169fc <memset>
  if(hi2c->Instance==I2C1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d146      	bne.n	8003446 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033b8:	f04f 0208 	mov.w	r2, #8
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033ca:	f107 0310 	add.w	r3, r7, #16
 80033ce:	4618      	mov	r0, r3
 80033d0:	f007 fd7e 	bl	800aed0 <HAL_RCCEx_PeriphCLKConfig>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80033da:	f7ff fe15 	bl	8003008 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_I2C_MspInit+0xcc>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_I2C_MspInit+0xcc>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_I2C_MspInit+0xcc>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003404:	2312      	movs	r3, #18
 8003406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003416:	2304      	movs	r3, #4
 8003418:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003420:	4619      	mov	r1, r3
 8003422:	480d      	ldr	r0, [pc, #52]	; (8003458 <HAL_I2C_MspInit+0xd0>)
 8003424:	f005 fcc8 	bl	8008db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_I2C_MspInit+0xcc>)
 800342a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_I2C_MspInit+0xcc>)
 8003430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003434:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_I2C_MspInit+0xcc>)
 800343a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800343e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003446:	bf00      	nop
 8003448:	37e8      	adds	r7, #232	; 0xe8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40005400 	.word	0x40005400
 8003454:	58024400 	.word	0x58024400
 8003458:	58020400 	.word	0x58020400

0800345c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b0b2      	sub	sp, #200	; 0xc8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	22c0      	movs	r2, #192	; 0xc0
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f013 fac5 	bl	80169fc <memset>
  if(hrtc->Instance==RTC)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <HAL_RTC_MspInit+0x5c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d118      	bne.n	80034ae <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800347c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_RTC_MspInit+0x60>)
 800348a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	4618      	mov	r0, r3
 8003494:	f007 fd1c 	bl	800aed0 <HAL_RCCEx_PeriphCLKConfig>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800349e:	f7ff fdb3 	bl	8003008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RTC_MspInit+0x64>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <HAL_RTC_MspInit+0x64>)
 80034a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034ae:	bf00      	nop
 80034b0:	37c8      	adds	r7, #200	; 0xc8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	58004000 	.word	0x58004000
 80034bc:	00019300 	.word	0x00019300
 80034c0:	58024400 	.word	0x58024400

080034c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b0bc      	sub	sp, #240	; 0xf0
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034dc:	f107 0318 	add.w	r3, r7, #24
 80034e0:	22c0      	movs	r2, #192	; 0xc0
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f013 fa89 	bl	80169fc <memset>
  if(hspi->Instance==SPI1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4c      	ldr	r2, [pc, #304]	; (8003620 <HAL_SPI_MspInit+0x15c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d145      	bne.n	8003580 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80034f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003500:	2300      	movs	r3, #0
 8003502:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003504:	f107 0318 	add.w	r3, r7, #24
 8003508:	4618      	mov	r0, r3
 800350a:	f007 fce1 	bl	800aed0 <HAL_RCCEx_PeriphCLKConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003514:	f7ff fd78 	bl	8003008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003518:	4b42      	ldr	r3, [pc, #264]	; (8003624 <HAL_SPI_MspInit+0x160>)
 800351a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800351e:	4a41      	ldr	r2, [pc, #260]	; (8003624 <HAL_SPI_MspInit+0x160>)
 8003520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003524:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003528:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_SPI_MspInit+0x160>)
 800352a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800352e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_SPI_MspInit+0x160>)
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353c:	4a39      	ldr	r2, [pc, #228]	; (8003624 <HAL_SPI_MspInit+0x160>)
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003546:	4b37      	ldr	r3, [pc, #220]	; (8003624 <HAL_SPI_MspInit+0x160>)
 8003548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003554:	2318      	movs	r3, #24
 8003556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800356c:	2305      	movs	r3, #5
 800356e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003572:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003576:	4619      	mov	r1, r3
 8003578:	482b      	ldr	r0, [pc, #172]	; (8003628 <HAL_SPI_MspInit+0x164>)
 800357a:	f005 fc1d 	bl	8008db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800357e:	e04a      	b.n	8003616 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a29      	ldr	r2, [pc, #164]	; (800362c <HAL_SPI_MspInit+0x168>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d145      	bne.n	8003616 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800358a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003596:	2300      	movs	r3, #0
 8003598:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800359a:	f107 0318 	add.w	r3, r7, #24
 800359e:	4618      	mov	r0, r3
 80035a0:	f007 fc96 	bl	800aed0 <HAL_RCCEx_PeriphCLKConfig>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80035aa:	f7ff fd2d 	bl	8003008 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_SPI_MspInit+0x160>)
 80035b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <HAL_SPI_MspInit+0x160>)
 80035b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_SPI_MspInit+0x160>)
 80035c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_SPI_MspInit+0x160>)
 80035ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_SPI_MspInit+0x160>)
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_SPI_MspInit+0x160>)
 80035de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80035ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80035ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	2300      	movs	r3, #0
 8003600:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003604:	2305      	movs	r3, #5
 8003606:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800360e:	4619      	mov	r1, r3
 8003610:	4805      	ldr	r0, [pc, #20]	; (8003628 <HAL_SPI_MspInit+0x164>)
 8003612:	f005 fbd1 	bl	8008db8 <HAL_GPIO_Init>
}
 8003616:	bf00      	nop
 8003618:	37f0      	adds	r7, #240	; 0xf0
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40013000 	.word	0x40013000
 8003624:	58024400 	.word	0x58024400
 8003628:	58020400 	.word	0x58020400
 800362c:	40003800 	.word	0x40003800

08003630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a37      	ldr	r2, [pc, #220]	; (800371c <HAL_TIM_Base_MspInit+0xec>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d12f      	bne.n	80036a2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003642:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 8003644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003648:	4a35      	ldr	r2, [pc, #212]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 8003654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	2105      	movs	r1, #5
 8003664:	2018      	movs	r0, #24
 8003666:	f002 f931 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800366a:	2018      	movs	r0, #24
 800366c:	f002 f948 	bl	8005900 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003670:	2200      	movs	r2, #0
 8003672:	2105      	movs	r1, #5
 8003674:	2019      	movs	r0, #25
 8003676:	f002 f929 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800367a:	2019      	movs	r0, #25
 800367c:	f002 f940 	bl	8005900 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003680:	2200      	movs	r2, #0
 8003682:	2105      	movs	r1, #5
 8003684:	201a      	movs	r0, #26
 8003686:	f002 f921 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800368a:	201a      	movs	r0, #26
 800368c:	f002 f938 	bl	8005900 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2105      	movs	r1, #5
 8003694:	201b      	movs	r0, #27
 8003696:	f002 f919 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800369a:	201b      	movs	r0, #27
 800369c:	f002 f930 	bl	8005900 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036a0:	e038      	b.n	8003714 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d117      	bne.n	80036dc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ac:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 80036ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 80036be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2105      	movs	r1, #5
 80036ce:	201c      	movs	r0, #28
 80036d0:	f002 f8fc 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d4:	201c      	movs	r0, #28
 80036d6:	f002 f913 	bl	8005900 <HAL_NVIC_EnableIRQ>
}
 80036da:	e01b      	b.n	8003714 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a10      	ldr	r2, [pc, #64]	; (8003724 <HAL_TIM_Base_MspInit+0xf4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d116      	bne.n	8003714 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 80036e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ec:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 80036ee:	f043 0302 	orr.w	r3, r3, #2
 80036f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_TIM_Base_MspInit+0xf0>)
 80036f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003704:	2200      	movs	r2, #0
 8003706:	2105      	movs	r1, #5
 8003708:	201d      	movs	r0, #29
 800370a:	f002 f8df 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800370e:	201d      	movs	r0, #29
 8003710:	f002 f8f6 	bl	8005900 <HAL_NVIC_EnableIRQ>
}
 8003714:	bf00      	nop
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40010000 	.word	0x40010000
 8003720:	58024400 	.word	0x58024400
 8003724:	40000400 	.word	0x40000400

08003728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_TIM_MspPostInit+0xb8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d120      	bne.n	800378c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <HAL_TIM_MspPostInit+0xbc>)
 800374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003750:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <HAL_TIM_MspPostInit+0xbc>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375a:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_TIM_MspPostInit+0xbc>)
 800375c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800377a:	2301      	movs	r3, #1
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	4818      	ldr	r0, [pc, #96]	; (80037e8 <HAL_TIM_MspPostInit+0xc0>)
 8003786:	f005 fb17 	bl	8008db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800378a:	e024      	b.n	80037d6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d11f      	bne.n	80037d6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003796:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_TIM_MspPostInit+0xbc>)
 8003798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800379c:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <HAL_TIM_MspPostInit+0xbc>)
 800379e:	f043 0302 	orr.w	r3, r3, #2
 80037a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_TIM_MspPostInit+0xbc>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037c6:	2301      	movs	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	4806      	ldr	r0, [pc, #24]	; (80037ec <HAL_TIM_MspPostInit+0xc4>)
 80037d2:	f005 faf1 	bl	8008db8 <HAL_GPIO_Init>
}
 80037d6:	bf00      	nop
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	58024400 	.word	0x58024400
 80037e8:	58020000 	.word	0x58020000
 80037ec:	58020400 	.word	0x58020400

080037f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0ba      	sub	sp, #232	; 0xe8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	22c0      	movs	r2, #192	; 0xc0
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f013 f8f3 	bl	80169fc <memset>
  if(huart->Instance==USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a41      	ldr	r2, [pc, #260]	; (8003920 <HAL_UART_MspInit+0x130>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d17b      	bne.n	8003918 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003820:	f04f 0201 	mov.w	r2, #1
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800382c:	2318      	movs	r3, #24
 800382e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4618      	mov	r0, r3
 8003838:	f007 fb4a 	bl	800aed0 <HAL_RCCEx_PeriphCLKConfig>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003842:	f7ff fbe1 	bl	8003008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_UART_MspInit+0x134>)
 8003848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800384c:	4a35      	ldr	r2, [pc, #212]	; (8003924 <HAL_UART_MspInit+0x134>)
 800384e:	f043 0310 	orr.w	r3, r3, #16
 8003852:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003856:	4b33      	ldr	r3, [pc, #204]	; (8003924 <HAL_UART_MspInit+0x134>)
 8003858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003864:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <HAL_UART_MspInit+0x134>)
 8003866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386a:	4a2e      	ldr	r2, [pc, #184]	; (8003924 <HAL_UART_MspInit+0x134>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_UART_MspInit+0x134>)
 8003876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003882:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	2302      	movs	r3, #2
 800388c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800389c:	2307      	movs	r3, #7
 800389e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038a6:	4619      	mov	r1, r3
 80038a8:	481f      	ldr	r0, [pc, #124]	; (8003928 <HAL_UART_MspInit+0x138>)
 80038aa:	f005 fa85 	bl	8008db8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038b0:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <HAL_UART_MspInit+0x140>)
 80038b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038b6:	222a      	movs	r2, #42	; 0x2a
 80038b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80038ec:	480f      	ldr	r0, [pc, #60]	; (800392c <HAL_UART_MspInit+0x13c>)
 80038ee:	f002 fc1b 	bl	8006128 <HAL_DMA_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80038f8:	f7ff fb86 	bl	8003008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0b      	ldr	r2, [pc, #44]	; (800392c <HAL_UART_MspInit+0x13c>)
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_UART_MspInit+0x13c>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003908:	2200      	movs	r2, #0
 800390a:	2105      	movs	r1, #5
 800390c:	2025      	movs	r0, #37	; 0x25
 800390e:	f001 ffdd 	bl	80058cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003912:	2025      	movs	r0, #37	; 0x25
 8003914:	f001 fff4 	bl	8005900 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003918:	bf00      	nop
 800391a:	37e8      	adds	r7, #232	; 0xe8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40011000 	.word	0x40011000
 8003924:	58024400 	.word	0x58024400
 8003928:	58020000 	.word	0x58020000
 800392c:	24000680 	.word	0x24000680
 8003930:	40020040 	.word	0x40020040

08003934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b090      	sub	sp, #64	; 0x40
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	d827      	bhi.n	8003992 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003942:	2200      	movs	r2, #0
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	2036      	movs	r0, #54	; 0x36
 8003948:	f001 ffc0 	bl	80058cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800394c:	2036      	movs	r0, #54	; 0x36
 800394e:	f001 ffd7 	bl	8005900 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003952:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <HAL_InitTick+0xc4>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003958:	4b28      	ldr	r3, [pc, #160]	; (80039fc <HAL_InitTick+0xc8>)
 800395a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800395e:	4a27      	ldr	r2, [pc, #156]	; (80039fc <HAL_InitTick+0xc8>)
 8003960:	f043 0310 	orr.w	r3, r3, #16
 8003964:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_InitTick+0xc8>)
 800396a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003976:	f107 0210 	add.w	r2, r7, #16
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f007 fa63 	bl	800ae4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <HAL_InitTick+0x6a>
 8003990:	e001      	b.n	8003996 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e02b      	b.n	80039ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003996:	f007 fa2d 	bl	800adf4 <HAL_RCC_GetPCLK1Freq>
 800399a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800399c:	e004      	b.n	80039a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800399e:	f007 fa29 	bl	800adf4 <HAL_RCC_GetPCLK1Freq>
 80039a2:	4603      	mov	r3, r0
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <HAL_InitTick+0xcc>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	0c9b      	lsrs	r3, r3, #18
 80039b2:	3b01      	subs	r3, #1
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_InitTick+0xd0>)
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <HAL_InitTick+0xd4>)
 80039ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_InitTick+0xd0>)
 80039be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_InitTick+0xd0>)
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_InitTick+0xd0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_InitTick+0xd0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80039d6:	480b      	ldr	r0, [pc, #44]	; (8003a04 <HAL_InitTick+0xd0>)
 80039d8:	f00a feeb 	bl	800e7b2 <HAL_TIM_Base_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d104      	bne.n	80039ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80039e2:	4808      	ldr	r0, [pc, #32]	; (8003a04 <HAL_InitTick+0xd0>)
 80039e4:	f00a ff3c 	bl	800e860 <HAL_TIM_Base_Start_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	e000      	b.n	80039ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3740      	adds	r7, #64	; 0x40
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	24000094 	.word	0x24000094
 80039fc:	58024400 	.word	0x58024400
 8003a00:	431bde83 	.word	0x431bde83
 8003a04:	24001094 	.word	0x24001094
 8003a08:	40001000 	.word	0x40001000

08003a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003a10:	e7fe      	b.n	8003a10 <NMI_Handler+0x4>

08003a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a16:	e7fe      	b.n	8003a16 <HardFault_Handler+0x4>

08003a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <MemManage_Handler+0x4>

08003a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a22:	e7fe      	b.n	8003a22 <BusFault_Handler+0x4>

08003a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <UsageFault_Handler+0x4>

08003a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <DMA1_Stream0_IRQHandler+0x10>)
 8003a3e:	f003 fe9d 	bl	800777c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	24000204 	.word	0x24000204

08003a4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <DMA1_Stream1_IRQHandler+0x10>)
 8003a52:	f003 fe93 	bl	800777c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2400027c 	.word	0x2400027c

08003a60 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <DMA1_Stream2_IRQHandler+0x10>)
 8003a66:	f003 fe89 	bl	800777c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	24000680 	.word	0x24000680

08003a74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <DMA1_Stream5_IRQHandler+0x10>)
 8003a7a:	f003 fe7f 	bl	800777c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	24000308 	.word	0x24000308

08003a88 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <TIM1_BRK_IRQHandler+0x10>)
 8003a8e:	f00b f9fe 	bl	800ee8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	24000508 	.word	0x24000508

08003a9c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <TIM1_UP_IRQHandler+0x10>)
 8003aa2:	f00b f9f4 	bl	800ee8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24000508 	.word	0x24000508

08003ab0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003ab6:	f00b f9ea 	bl	800ee8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24000508 	.word	0x24000508

08003ac4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <TIM1_CC_IRQHandler+0x10>)
 8003aca:	f00b f9e0 	bl	800ee8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	24000508 	.word	0x24000508

08003ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <TIM2_IRQHandler+0x10>)
 8003ade:	f00b f9d6 	bl	800ee8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	24000554 	.word	0x24000554

08003aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <TIM3_IRQHandler+0x10>)
 8003af2:	f00b f9cc 	bl	800ee8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	240005a0 	.word	0x240005a0

08003b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <USART1_IRQHandler+0x10>)
 8003b06:	f00c fd85 	bl	8010614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	240005ec 	.word	0x240005ec

08003b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <TIM6_DAC_IRQHandler+0x20>)
 8003b1a:	791b      	ldrb	r3, [r3, #4]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003b22:	4804      	ldr	r0, [pc, #16]	; (8003b34 <TIM6_DAC_IRQHandler+0x20>)
 8003b24:	f002 f881 	bl	8005c2a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003b28:	4803      	ldr	r0, [pc, #12]	; (8003b38 <TIM6_DAC_IRQHandler+0x24>)
 8003b2a:	f00b f9b0 	bl	800ee8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	240002f4 	.word	0x240002f4
 8003b38:	24001094 	.word	0x24001094

08003b3c <ITM_SendChar>:
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <ITM_SendChar+0x48>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <ITM_SendChar+0x48>)
 8003b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <ITM_SendChar+0x4c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a0c      	ldr	r2, [pc, #48]	; (8003b88 <ITM_SendChar+0x4c>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	bf00      	nop
 8003b60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f8      	beq.n	8003b60 <ITM_SendChar+0x24>
 8003b6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	e000edfc 	.word	0xe000edfc
 8003b88:	e0000e00 	.word	0xe0000e00

08003b8c <_read>:
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e00a      	b.n	8003bb4 <_read+0x28>
 8003b9e:	f3af 8000 	nop.w
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	60ba      	str	r2, [r7, #8]
 8003baa:	b2ca      	uxtb	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	dbf0      	blt.n	8003b9e <_read+0x12>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_write>:
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e009      	b.n	8003bec <_write+0x26>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60ba      	str	r2, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ffab 	bl	8003b3c <ITM_SendChar>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dbf1      	blt.n	8003bd8 <_write+0x12>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_close>:
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <_fstat>:
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_isatty>:
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_lseek>:
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <_sbrk>:
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <_sbrk+0x5c>)
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <_sbrk+0x60>)
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <_sbrk+0x22>
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <_sbrk+0x64>)
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <_sbrk+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <_sbrk+0x64>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d207      	bcs.n	8003ca8 <_sbrk+0x40>
 8003c98:	f012 fe68 	bl	801696c <__errno>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ca6:	e009      	b.n	8003cbc <_sbrk+0x54>
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <_sbrk+0x64>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <_sbrk+0x64>)
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	24080000 	.word	0x24080000
 8003cc8:	00000400 	.word	0x00000400
 8003ccc:	240010e0 	.word	0x240010e0
 8003cd0:	24005a48 	.word	0x24005a48

08003cd4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003cd8:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <SystemInit+0xe4>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	4a36      	ldr	r2, [pc, #216]	; (8003db8 <SystemInit+0xe4>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <SystemInit+0xe8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d807      	bhi.n	8003d04 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003cf4:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <SystemInit+0xe8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 030f 	bic.w	r3, r3, #15
 8003cfc:	4a2f      	ldr	r2, [pc, #188]	; (8003dbc <SystemInit+0xe8>)
 8003cfe:	f043 0307 	orr.w	r3, r3, #7
 8003d02:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003d04:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <SystemInit+0xec>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2d      	ldr	r2, [pc, #180]	; (8003dc0 <SystemInit+0xec>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <SystemInit+0xec>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <SystemInit+0xec>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4929      	ldr	r1, [pc, #164]	; (8003dc0 <SystemInit+0xec>)
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <SystemInit+0xf0>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <SystemInit+0xe8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003d2e:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <SystemInit+0xe8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 030f 	bic.w	r3, r3, #15
 8003d36:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <SystemInit+0xe8>)
 8003d38:	f043 0307 	orr.w	r3, r3, #7
 8003d3c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <SystemInit+0xec>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <SystemInit+0xec>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <SystemInit+0xec>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003d50:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <SystemInit+0xec>)
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <SystemInit+0xf4>)
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003d56:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <SystemInit+0xec>)
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <SystemInit+0xf8>)
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <SystemInit+0xec>)
 8003d5e:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <SystemInit+0xfc>)
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <SystemInit+0xec>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003d68:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <SystemInit+0xec>)
 8003d6a:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <SystemInit+0xfc>)
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <SystemInit+0xec>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <SystemInit+0xec>)
 8003d76:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <SystemInit+0xfc>)
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <SystemInit+0xec>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <SystemInit+0xec>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <SystemInit+0xec>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <SystemInit+0xec>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <SystemInit+0x100>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <SystemInit+0x104>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9e:	d202      	bcs.n	8003da6 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <SystemInit+0x108>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <SystemInit+0x10c>)
 8003da8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003dac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00
 8003dbc:	52002000 	.word	0x52002000
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003dc8:	02020200 	.word	0x02020200
 8003dcc:	01ff0000 	.word	0x01ff0000
 8003dd0:	01010280 	.word	0x01010280
 8003dd4:	5c001000 	.word	0x5c001000
 8003dd8:	ffff0000 	.word	0xffff0000
 8003ddc:	51008108 	.word	0x51008108
 8003de0:	52004000 	.word	0x52004000

08003de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003de8:	f7ff ff74 	bl	8003cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dec:	480c      	ldr	r0, [pc, #48]	; (8003e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dee:	490d      	ldr	r1, [pc, #52]	; (8003e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003df0:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003df4:	e002      	b.n	8003dfc <LoopCopyDataInit>

08003df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dfa:	3304      	adds	r3, #4

08003dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e00:	d3f9      	bcc.n	8003df6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e04:	4c0a      	ldr	r4, [pc, #40]	; (8003e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e08:	e001      	b.n	8003e0e <LoopFillZerobss>

08003e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e0c:	3204      	adds	r2, #4

08003e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e10:	d3fb      	bcc.n	8003e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e12:	f012 fdb1 	bl	8016978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e16:	f7fd f8a1 	bl	8000f5c <main>
  bx  lr
 8003e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e24:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8003e28:	08017910 	.word	0x08017910
  ldr r2, =_sbss
 8003e2c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8003e30:	24005a48 	.word	0x24005a48

08003e34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e34:	e7fe      	b.n	8003e34 <ADC3_IRQHandler>
	...

08003e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e3e:	2003      	movs	r0, #3
 8003e40:	f001 fd39 	bl	80058b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e44:	f006 fe2c 	bl	800aaa0 <HAL_RCC_GetSysClockFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_Init+0x68>)
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	4913      	ldr	r1, [pc, #76]	; (8003ea4 <HAL_Init+0x6c>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_Init+0x68>)
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <HAL_Init+0x6c>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <HAL_Init+0x70>)
 8003e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e7c:	4a0b      	ldr	r2, [pc, #44]	; (8003eac <HAL_Init+0x74>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e82:	2005      	movs	r0, #5
 8003e84:	f7ff fd56 	bl	8003934 <HAL_InitTick>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e002      	b.n	8003e98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e92:	f7ff f8bf 	bl	8003014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	0801785c 	.word	0x0801785c
 8003ea8:	24000090 	.word	0x24000090
 8003eac:	2400008c 	.word	0x2400008c

08003eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_IncTick+0x20>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_IncTick+0x24>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_IncTick+0x24>)
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	24000098 	.word	0x24000098
 8003ed4:	240010e4 	.word	0x240010e4

08003ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return uwTick;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_GetTick+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	240010e4 	.word	0x240010e4

08003ef0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_GetREVID+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	5c001000 	.word	0x5c001000

08003f08 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	58000400 	.word	0x58000400

08003f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3360      	adds	r3, #96	; 0x60
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	611a      	str	r2, [r3, #16]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3360      	adds	r3, #96	; 0x60
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	431a      	orrs	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	601a      	str	r2, [r3, #0]
  }
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800406a:	b480      	push	{r7}
 800406c:	b087      	sub	sp, #28
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3330      	adds	r3, #48	; 0x30
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	4413      	add	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	211f      	movs	r1, #31
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	401a      	ands	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	f003 011f 	and.w	r1, r3, #31
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	431a      	orrs	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f023 0203 	bic.w	r2, r3, #3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3314      	adds	r3, #20
 80040f8:	461a      	mov	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	0e5b      	lsrs	r3, r3, #25
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	4413      	add	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	0d1b      	lsrs	r3, r3, #20
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2107      	movs	r1, #7
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	401a      	ands	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	0d1b      	lsrs	r3, r3, #20
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0318 	and.w	r3, r3, #24
 8004162:	4908      	ldr	r1, [pc, #32]	; (8004184 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004164:	40d9      	lsrs	r1, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	400b      	ands	r3, r1
 800416a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416e:	431a      	orrs	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	000fffff 	.word	0x000fffff

08004188 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 031f 	and.w	r3, r3, #31
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6093      	str	r3, [r2, #8]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	5fffffc0 	.word	0x5fffffc0

080041c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041dc:	d101      	bne.n	80041e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <LL_ADC_EnableInternalRegulator+0x24>)
 80041fe:	4013      	ands	r3, r2
 8004200:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	6fffffc0 	.word	0x6fffffc0

08004218 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422c:	d101      	bne.n	8004232 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <LL_ADC_Enable+0x24>)
 800424e:	4013      	ands	r3, r2
 8004250:	f043 0201 	orr.w	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	7fffffc0 	.word	0x7fffffc0

08004268 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <LL_ADC_Disable+0x24>)
 8004276:	4013      	ands	r3, r2
 8004278:	f043 0202 	orr.w	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	7fffffc0 	.word	0x7fffffc0

08004290 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <LL_ADC_IsEnabled+0x18>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_ADC_IsEnabled+0x1a>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d101      	bne.n	80042ce <LL_ADC_IsDisableOngoing+0x18>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <LL_ADC_IsDisableOngoing+0x1a>
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <LL_ADC_REG_StartConversion+0x24>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	f043 0204 	orr.w	r2, r3, #4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	7fffffc0 	.word	0x7fffffc0

08004304 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d101      	bne.n	800431c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d101      	bne.n	8004342 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e18f      	b.n	800468a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fe fe69 	bl	8003050 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff19 	bl	80041c8 <LL_ADC_IsDeepPowerDownEnabled>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff feff 	bl	80041a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff ff34 	bl	8004218 <LL_ADC_IsInternalRegulatorEnabled>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d114      	bne.n	80043e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff18 	bl	80041f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043c0:	4b87      	ldr	r3, [pc, #540]	; (80045e0 <HAL_ADC_Init+0x290>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	4a87      	ldr	r2, [pc, #540]	; (80045e4 <HAL_ADC_Init+0x294>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	3301      	adds	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043d2:	e002      	b.n	80043da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f9      	bne.n	80043d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff17 	bl	8004218 <LL_ADC_IsInternalRegulatorEnabled>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0210 	orr.w	r2, r3, #16
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff77 	bl	8004304 <LL_ADC_REG_IsConversionOngoing>
 8004416:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8129 	bne.w	8004678 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f040 8125 	bne.w	8004678 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff24 	bl	8004290 <LL_ADC_IsEnabled>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d136      	bne.n	80044bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a65      	ldr	r2, [pc, #404]	; (80045e8 <HAL_ADC_Init+0x298>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d004      	beq.n	8004462 <HAL_ADC_Init+0x112>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a63      	ldr	r2, [pc, #396]	; (80045ec <HAL_ADC_Init+0x29c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10e      	bne.n	8004480 <HAL_ADC_Init+0x130>
 8004462:	4861      	ldr	r0, [pc, #388]	; (80045e8 <HAL_ADC_Init+0x298>)
 8004464:	f7ff ff14 	bl	8004290 <LL_ADC_IsEnabled>
 8004468:	4604      	mov	r4, r0
 800446a:	4860      	ldr	r0, [pc, #384]	; (80045ec <HAL_ADC_Init+0x29c>)
 800446c:	f7ff ff10 	bl	8004290 <LL_ADC_IsEnabled>
 8004470:	4603      	mov	r3, r0
 8004472:	4323      	orrs	r3, r4
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e008      	b.n	8004492 <HAL_ADC_Init+0x142>
 8004480:	485b      	ldr	r0, [pc, #364]	; (80045f0 <HAL_ADC_Init+0x2a0>)
 8004482:	f7ff ff05 	bl	8004290 <LL_ADC_IsEnabled>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d012      	beq.n	80044bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a53      	ldr	r2, [pc, #332]	; (80045e8 <HAL_ADC_Init+0x298>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_ADC_Init+0x15a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a51      	ldr	r2, [pc, #324]	; (80045ec <HAL_ADC_Init+0x29c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_Init+0x15e>
 80044aa:	4a52      	ldr	r2, [pc, #328]	; (80045f4 <HAL_ADC_Init+0x2a4>)
 80044ac:	e000      	b.n	80044b0 <HAL_ADC_Init+0x160>
 80044ae:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_ADC_Init+0x2a8>)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f7ff fd3c 	bl	8003f34 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80044bc:	f7ff fd18 	bl	8003ef0 <HAL_GetREVID>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d914      	bls.n	80044f4 <HAL_ADC_Init+0x1a4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d110      	bne.n	80044f4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7d5b      	ldrb	r3, [r3, #21]
 80044d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80044e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7f1b      	ldrb	r3, [r3, #28]
 80044e8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80044ea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044ec:	f043 030c 	orr.w	r3, r3, #12
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e00d      	b.n	8004510 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7d5b      	ldrb	r3, [r3, #21]
 80044f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004504:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7f1b      	ldrb	r3, [r3, #28]
 800450a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7f1b      	ldrb	r3, [r3, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	3b01      	subs	r3, #1
 800451e:	045b      	lsls	r3, r3, #17
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_ADC_Init+0x2ac>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	430b      	orrs	r3, r1
 8004554:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fed2 	bl	8004304 <LL_ADC_REG_IsConversionOngoing>
 8004560:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fedf 	bl	800432a <LL_ADC_INJ_IsConversionOngoing>
 800456c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d15f      	bne.n	8004634 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d15c      	bne.n	8004634 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7d1b      	ldrb	r3, [r3, #20]
 800457e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <HAL_ADC_Init+0x2b0>)
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	430b      	orrs	r3, r1
 800459a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d130      	bne.n	8004608 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <HAL_ADC_Init+0x2b4>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045ba:	3a01      	subs	r2, #1
 80045bc:	0411      	lsls	r1, r2, #16
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045ce:	430a      	orrs	r2, r1
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	611a      	str	r2, [r3, #16]
 80045dc:	e01c      	b.n	8004618 <HAL_ADC_Init+0x2c8>
 80045de:	bf00      	nop
 80045e0:	2400008c 	.word	0x2400008c
 80045e4:	053e2d63 	.word	0x053e2d63
 80045e8:	40022000 	.word	0x40022000
 80045ec:	40022100 	.word	0x40022100
 80045f0:	58026000 	.word	0x58026000
 80045f4:	40022300 	.word	0x40022300
 80045f8:	58026300 	.word	0x58026300
 80045fc:	fff0c003 	.word	0xfff0c003
 8004600:	ffffbffc 	.word	0xffffbffc
 8004604:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fdec 	bl	800520c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f023 010f 	bic.w	r1, r3, #15
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
 8004654:	e007      	b.n	8004666 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 020f 	bic.w	r2, r2, #15
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f023 0303 	bic.w	r3, r3, #3
 800466e:	f043 0201 	orr.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
 8004676:	e007      	b.n	8004688 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f043 0210 	orr.w	r2, r3, #16
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004688:	7ffb      	ldrb	r3, [r7, #31]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd90      	pop	{r4, r7, pc}
 8004692:	bf00      	nop

08004694 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a55      	ldr	r2, [pc, #340]	; (80047fc <HAL_ADC_Start_DMA+0x168>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_ADC_Start_DMA+0x20>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a54      	ldr	r2, [pc, #336]	; (8004800 <HAL_ADC_Start_DMA+0x16c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_ADC_Start_DMA+0x24>
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_ADC_Start_DMA+0x170>)
 80046b6:	e000      	b.n	80046ba <HAL_ADC_Start_DMA+0x26>
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <HAL_ADC_Start_DMA+0x174>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fd64 	bl	8004188 <LL_ADC_GetMultimode>
 80046c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fe1c 	bl	8004304 <LL_ADC_REG_IsConversionOngoing>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 808c 	bne.w	80047ec <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_ADC_Start_DMA+0x4e>
 80046de:	2302      	movs	r3, #2
 80046e0:	e087      	b.n	80047f2 <HAL_ADC_Start_DMA+0x15e>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d002      	beq.n	80046fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b09      	cmp	r3, #9
 80046fa:	d170      	bne.n	80047de <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fc07 	bl	8004f10 <ADC_Enable>
 8004702:	4603      	mov	r3, r0
 8004704:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d163      	bne.n	80047d4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004710:	4b3e      	ldr	r3, [pc, #248]	; (800480c <HAL_ADC_Start_DMA+0x178>)
 8004712:	4013      	ands	r3, r2
 8004714:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a37      	ldr	r2, [pc, #220]	; (8004800 <HAL_ADC_Start_DMA+0x16c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d002      	beq.n	800472c <HAL_ADC_Start_DMA+0x98>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	e000      	b.n	800472e <HAL_ADC_Start_DMA+0x9a>
 800472c:	4b33      	ldr	r3, [pc, #204]	; (80047fc <HAL_ADC_Start_DMA+0x168>)
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	4293      	cmp	r3, r2
 8004734:	d002      	beq.n	800473c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f023 0206 	bic.w	r2, r3, #6
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	659a      	str	r2, [r3, #88]	; 0x58
 8004760:	e002      	b.n	8004768 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476c:	4a28      	ldr	r2, [pc, #160]	; (8004810 <HAL_ADC_Start_DMA+0x17c>)
 800476e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004774:	4a27      	ldr	r2, [pc, #156]	; (8004814 <HAL_ADC_Start_DMA+0x180>)
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <HAL_ADC_Start_DMA+0x184>)
 800477e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	221c      	movs	r2, #28
 8004786:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0210 	orr.w	r2, r2, #16
 800479e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f7ff fc89 	bl	80040c2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3340      	adds	r3, #64	; 0x40
 80047ba:	4619      	mov	r1, r3
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f002 f80e 	bl	80067e0 <HAL_DMA_Start_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fd85 	bl	80042dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80047d2:	e00d      	b.n	80047f0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80047dc:	e008      	b.n	80047f0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80047ea:	e001      	b.n	80047f0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
 80047ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40022000 	.word	0x40022000
 8004800:	40022100 	.word	0x40022100
 8004804:	40022300 	.word	0x40022300
 8004808:	58026300 	.word	0x58026300
 800480c:	fffff0fe 	.word	0xfffff0fe
 8004810:	080050e3 	.word	0x080050e3
 8004814:	080051bb 	.word	0x080051bb
 8004818:	080051d7 	.word	0x080051d7

0800481c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b0a1      	sub	sp, #132	; 0x84
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a65      	ldr	r2, [pc, #404]	; (8004a08 <HAL_ADC_ConfigChannel+0x1b0>)
 8004872:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x2a>
 800487e:	2302      	movs	r3, #2
 8004880:	e32e      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x688>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fd38 	bl	8004304 <LL_ADC_REG_IsConversionOngoing>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 8313 	bne.w	8004ec2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db2c      	blt.n	80048fe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d108      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x6a>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0e9b      	lsrs	r3, r3, #26
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2201      	movs	r2, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	e016      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x98>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80048da:	2320      	movs	r3, #32
 80048dc:	e003      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80048de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2201      	movs	r2, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	69d1      	ldr	r1, [r2, #28]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	430b      	orrs	r3, r1
 80048fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7ff fbad 	bl	800406a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fcf5 	bl	8004304 <LL_ADC_REG_IsConversionOngoing>
 800491a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fd02 	bl	800432a <LL_ADC_INJ_IsConversionOngoing>
 8004926:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 80b8 	bne.w	8004aa0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 80b4 	bne.w	8004aa0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	461a      	mov	r2, r3
 8004946:	f7ff fbcf 	bl	80040e8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <HAL_ADC_ConfigChannel+0x1b4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004956:	d10b      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x118>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	e01d      	b.n	80049ac <HAL_ADC_ConfigChannel+0x154>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x13e>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	e00a      	b.n	80049ac <HAL_ADC_ConfigChannel+0x154>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d02c      	beq.n	8004a10 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6919      	ldr	r1, [r3, #16]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049c4:	f7ff faea 	bl	8003f9c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6919      	ldr	r1, [r3, #16]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	7e5b      	ldrb	r3, [r3, #25]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <HAL_ADC_ConfigChannel+0x186>
 80049d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049dc:	e000      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x188>
 80049de:	2300      	movs	r3, #0
 80049e0:	461a      	mov	r2, r3
 80049e2:	f7ff fb14 	bl	800400e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6919      	ldr	r1, [r3, #16]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	7e1b      	ldrb	r3, [r3, #24]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d102      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x1a4>
 80049f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049fa:	e000      	b.n	80049fe <HAL_ADC_ConfigChannel+0x1a6>
 80049fc:	2300      	movs	r3, #0
 80049fe:	461a      	mov	r2, r3
 8004a00:	f7ff faec 	bl	8003fdc <LL_ADC_SetDataRightShift>
 8004a04:	e04c      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x248>
 8004a06:	bf00      	nop
 8004a08:	47ff0000 	.word	0x47ff0000
 8004a0c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	069b      	lsls	r3, r3, #26
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d107      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a32:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	069b      	lsls	r3, r3, #26
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d107      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a56:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	069b      	lsls	r3, r3, #26
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d107      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a7a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	069b      	lsls	r3, r3, #26
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a9e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fbf3 	bl	8004290 <LL_ADC_IsEnabled>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 8211 	bne.w	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7ff fb3e 	bl	8004140 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4aa1      	ldr	r2, [pc, #644]	; (8004d50 <HAL_ADC_ConfigChannel+0x4f8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	f040 812e 	bne.w	8004d2c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x2a0>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0e9b      	lsrs	r3, r3, #26
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2b09      	cmp	r3, #9
 8004aee:	bf94      	ite	ls
 8004af0:	2301      	movls	r3, #1
 8004af2:	2300      	movhi	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e019      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x2d4>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004b10:	2320      	movs	r3, #32
 8004b12:	e003      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2b09      	cmp	r3, #9
 8004b24:	bf94      	ite	ls
 8004b26:	2301      	movls	r3, #1
 8004b28:	2300      	movhi	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d079      	beq.n	8004c24 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x2f4>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	0e9b      	lsrs	r3, r3, #26
 8004b42:	3301      	adds	r3, #1
 8004b44:	069b      	lsls	r3, r3, #26
 8004b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b4a:	e015      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x320>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b54:	fa93 f3a3 	rbit	r3, r3
 8004b58:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004b64:	2320      	movs	r3, #32
 8004b66:	e003      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	069b      	lsls	r3, r3, #26
 8004b74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <HAL_ADC_ConfigChannel+0x340>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	0e9b      	lsrs	r3, r3, #26
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	e017      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x370>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	e003      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	ea42 0103 	orr.w	r1, r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x396>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	3301      	adds	r3, #1
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4613      	mov	r3, r2
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	4413      	add	r3, r2
 8004bea:	051b      	lsls	r3, r3, #20
 8004bec:	e018      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x3c8>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e003      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	f003 021f 	and.w	r2, r3, #31
 8004c18:	4613      	mov	r3, r2
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4413      	add	r3, r2
 8004c1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c20:	430b      	orrs	r3, r1
 8004c22:	e07e      	b.n	8004d22 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d107      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x3e8>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e9b      	lsrs	r3, r3, #26
 8004c36:	3301      	adds	r3, #1
 8004c38:	069b      	lsls	r3, r3, #26
 8004c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c3e:	e015      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x414>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	e003      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	069b      	lsls	r3, r3, #26
 8004c68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x434>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	0e9b      	lsrs	r3, r3, #26
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8a:	e017      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x464>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	fa93 f3a3 	rbit	r3, r3
 8004c98:	61bb      	str	r3, [r7, #24]
  return result;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	e003      	b.n	8004cb0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	ea42 0103 	orr.w	r1, r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10d      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x490>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f003 021f 	and.w	r2, r3, #31
 8004cd8:	4613      	mov	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	4413      	add	r3, r2
 8004cde:	3b1e      	subs	r3, #30
 8004ce0:	051b      	lsls	r3, r3, #20
 8004ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	e01b      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x4c8>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
  return result;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004d00:	2320      	movs	r3, #32
 8004d02:	e003      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f003 021f 	and.w	r2, r3, #31
 8004d12:	4613      	mov	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4413      	add	r3, r2
 8004d18:	3b1e      	subs	r3, #30
 8004d1a:	051b      	lsls	r3, r3, #20
 8004d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d20:	430b      	orrs	r3, r1
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	6892      	ldr	r2, [r2, #8]
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7ff f9de 	bl	80040e8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f280 80cf 	bge.w	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <HAL_ADC_ConfigChannel+0x4fc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_ADC_ConfigChannel+0x4f2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <HAL_ADC_ConfigChannel+0x500>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10a      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x508>
 8004d4a:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <HAL_ADC_ConfigChannel+0x504>)
 8004d4c:	e009      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x50a>
 8004d4e:	bf00      	nop
 8004d50:	47ff0000 	.word	0x47ff0000
 8004d54:	40022000 	.word	0x40022000
 8004d58:	40022100 	.word	0x40022100
 8004d5c:	40022300 	.word	0x40022300
 8004d60:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <HAL_ADC_ConfigChannel+0x690>)
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f90c 	bl	8003f80 <LL_ADC_GetCommonPathInternalCh>
 8004d68:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a5f      	ldr	r2, [pc, #380]	; (8004eec <HAL_ADC_ConfigChannel+0x694>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_ADC_ConfigChannel+0x526>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a5d      	ldr	r2, [pc, #372]	; (8004ef0 <HAL_ADC_ConfigChannel+0x698>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10e      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x544>
 8004d7e:	485b      	ldr	r0, [pc, #364]	; (8004eec <HAL_ADC_ConfigChannel+0x694>)
 8004d80:	f7ff fa86 	bl	8004290 <LL_ADC_IsEnabled>
 8004d84:	4604      	mov	r4, r0
 8004d86:	485a      	ldr	r0, [pc, #360]	; (8004ef0 <HAL_ADC_ConfigChannel+0x698>)
 8004d88:	f7ff fa82 	bl	8004290 <LL_ADC_IsEnabled>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4323      	orrs	r3, r4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e008      	b.n	8004dae <HAL_ADC_ConfigChannel+0x556>
 8004d9c:	4855      	ldr	r0, [pc, #340]	; (8004ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8004d9e:	f7ff fa77 	bl	8004290 <LL_ADC_IsEnabled>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d07d      	beq.n	8004eae <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a50      	ldr	r2, [pc, #320]	; (8004ef8 <HAL_ADC_ConfigChannel+0x6a0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d130      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x5c6>
 8004dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d12b      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a4a      	ldr	r2, [pc, #296]	; (8004ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	f040 8081 	bne.w	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a45      	ldr	r2, [pc, #276]	; (8004eec <HAL_ADC_ConfigChannel+0x694>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_ADC_ConfigChannel+0x58e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a43      	ldr	r2, [pc, #268]	; (8004ef0 <HAL_ADC_ConfigChannel+0x698>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x592>
 8004de6:	4a45      	ldr	r2, [pc, #276]	; (8004efc <HAL_ADC_ConfigChannel+0x6a4>)
 8004de8:	e000      	b.n	8004dec <HAL_ADC_ConfigChannel+0x594>
 8004dea:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <HAL_ADC_ConfigChannel+0x690>)
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7ff f8b0 	bl	8003f5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dfa:	4b41      	ldr	r3, [pc, #260]	; (8004f00 <HAL_ADC_ConfigChannel+0x6a8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	4a40      	ldr	r2, [pc, #256]	; (8004f04 <HAL_ADC_ConfigChannel+0x6ac>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	3301      	adds	r3, #1
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e0e:	e002      	b.n	8004e16 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f9      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e1c:	e05a      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a39      	ldr	r2, [pc, #228]	; (8004f08 <HAL_ADC_ConfigChannel+0x6b0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d11e      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x60e>
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d119      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2f      	ldr	r2, [pc, #188]	; (8004ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d14b      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <HAL_ADC_ConfigChannel+0x694>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_ADC_ConfigChannel+0x5f8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <HAL_ADC_ConfigChannel+0x698>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x5fc>
 8004e50:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <HAL_ADC_ConfigChannel+0x6a4>)
 8004e52:	e000      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x5fe>
 8004e54:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <HAL_ADC_ConfigChannel+0x690>)
 8004e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7ff f87b 	bl	8003f5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e64:	e036      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a28      	ldr	r2, [pc, #160]	; (8004f0c <HAL_ADC_ConfigChannel+0x6b4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d131      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
 8004e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d12c      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_ADC_ConfigChannel+0x69c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d127      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_ADC_ConfigChannel+0x694>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_ADC_ConfigChannel+0x640>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <HAL_ADC_ConfigChannel+0x698>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d101      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x644>
 8004e98:	4a18      	ldr	r2, [pc, #96]	; (8004efc <HAL_ADC_ConfigChannel+0x6a4>)
 8004e9a:	e000      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x646>
 8004e9c:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <HAL_ADC_ConfigChannel+0x690>)
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f7ff f857 	bl	8003f5a <LL_ADC_SetCommonPathInternalCh>
 8004eac:	e012      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ec0:	e008      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004edc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3784      	adds	r7, #132	; 0x84
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd90      	pop	{r4, r7, pc}
 8004ee8:	58026300 	.word	0x58026300
 8004eec:	40022000 	.word	0x40022000
 8004ef0:	40022100 	.word	0x40022100
 8004ef4:	58026000 	.word	0x58026000
 8004ef8:	cb840000 	.word	0xcb840000
 8004efc:	40022300 	.word	0x40022300
 8004f00:	2400008c 	.word	0x2400008c
 8004f04:	053e2d63 	.word	0x053e2d63
 8004f08:	c7520000 	.word	0xc7520000
 8004f0c:	cfb80000 	.word	0xcfb80000

08004f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff f9b7 	bl	8004290 <LL_ADC_IsEnabled>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d16e      	bne.n	8005006 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	4b38      	ldr	r3, [pc, #224]	; (8005010 <ADC_Enable+0x100>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	f043 0210 	orr.w	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f043 0201 	orr.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e05a      	b.n	8005008 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff f972 	bl	8004240 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f5c:	f7fe ffbc 	bl	8003ed8 <HAL_GetTick>
 8004f60:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2b      	ldr	r2, [pc, #172]	; (8005014 <ADC_Enable+0x104>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <ADC_Enable+0x66>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <ADC_Enable+0x108>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <ADC_Enable+0x6a>
 8004f76:	4b29      	ldr	r3, [pc, #164]	; (800501c <ADC_Enable+0x10c>)
 8004f78:	e000      	b.n	8004f7c <ADC_Enable+0x6c>
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <ADC_Enable+0x110>)
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff f903 	bl	8004188 <LL_ADC_GetMultimode>
 8004f82:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a23      	ldr	r2, [pc, #140]	; (8005018 <ADC_Enable+0x108>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d002      	beq.n	8004f94 <ADC_Enable+0x84>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	e000      	b.n	8004f96 <ADC_Enable+0x86>
 8004f94:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <ADC_Enable+0x104>)
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02c      	beq.n	8004ff8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d130      	bne.n	8005006 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fa4:	e028      	b.n	8004ff8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff f970 	bl	8004290 <LL_ADC_IsEnabled>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff f940 	bl	8004240 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fc0:	f7fe ff8a 	bl	8003ed8 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d914      	bls.n	8004ff8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d00d      	beq.n	8004ff8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f043 0210 	orr.w	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	f043 0201 	orr.w	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e007      	b.n	8005008 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d1cf      	bne.n	8004fa6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	8000003f 	.word	0x8000003f
 8005014:	40022000 	.word	0x40022000
 8005018:	40022100 	.word	0x40022100
 800501c:	40022300 	.word	0x40022300
 8005020:	58026300 	.word	0x58026300

08005024 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff f940 	bl	80042b6 <LL_ADC_IsDisableOngoing>
 8005036:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff f927 	bl	8004290 <LL_ADC_IsEnabled>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d047      	beq.n	80050d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d144      	bne.n	80050d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030d 	and.w	r3, r3, #13
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10c      	bne.n	8005076 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff f901 	bl	8004268 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2203      	movs	r2, #3
 800506c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800506e:	f7fe ff33 	bl	8003ed8 <HAL_GetTick>
 8005072:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005074:	e029      	b.n	80050ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	f043 0210 	orr.w	r2, r3, #16
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e023      	b.n	80050da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005092:	f7fe ff21 	bl	8003ed8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d914      	bls.n	80050ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00d      	beq.n	80050ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	f043 0210 	orr.w	r2, r3, #16
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050be:	f043 0201 	orr.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e007      	b.n	80050da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1dc      	bne.n	8005092 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d14b      	bne.n	8005194 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d021      	beq.n	800515a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe ff92 	bl	8004044 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d032      	beq.n	800518c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d12b      	bne.n	800518c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11f      	bne.n	800518c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f043 0201 	orr.w	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
 8005158:	e018      	b.n	800518c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d111      	bne.n	800518c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f043 0201 	orr.w	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fb45 	bl	800481c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005192:	e00e      	b.n	80051b2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fb4f 	bl	8004844 <HAL_ADC_ErrorCallback>
}
 80051a6:	e004      	b.n	80051b2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7ff fb31 	bl	8004830 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f4:	f043 0204 	orr.w	r2, r3, #4
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff fb21 	bl	8004844 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a7a      	ldr	r2, [pc, #488]	; (8005404 <ADC_ConfigureBoostMode+0x1f8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <ADC_ConfigureBoostMode+0x1c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a79      	ldr	r2, [pc, #484]	; (8005408 <ADC_ConfigureBoostMode+0x1fc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d109      	bne.n	800523c <ADC_ConfigureBoostMode+0x30>
 8005228:	4b78      	ldr	r3, [pc, #480]	; (800540c <ADC_ConfigureBoostMode+0x200>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e008      	b.n	800524e <ADC_ConfigureBoostMode+0x42>
 800523c:	4b74      	ldr	r3, [pc, #464]	; (8005410 <ADC_ConfigureBoostMode+0x204>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01c      	beq.n	800528c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005252:	f005 fd9f 	bl	800ad94 <HAL_RCC_GetHCLKFreq>
 8005256:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005260:	d010      	beq.n	8005284 <ADC_ConfigureBoostMode+0x78>
 8005262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005266:	d873      	bhi.n	8005350 <ADC_ConfigureBoostMode+0x144>
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d002      	beq.n	8005274 <ADC_ConfigureBoostMode+0x68>
 800526e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005272:	d16d      	bne.n	8005350 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	60fb      	str	r3, [r7, #12]
        break;
 8005282:	e068      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	60fb      	str	r3, [r7, #12]
        break;
 800528a:	e064      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800528c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	f007 f826 	bl	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005298:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052a2:	d051      	beq.n	8005348 <ADC_ConfigureBoostMode+0x13c>
 80052a4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052a8:	d854      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052aa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052ae:	d047      	beq.n	8005340 <ADC_ConfigureBoostMode+0x134>
 80052b0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052b4:	d84e      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052b6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052ba:	d03d      	beq.n	8005338 <ADC_ConfigureBoostMode+0x12c>
 80052bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052c0:	d848      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052c6:	d033      	beq.n	8005330 <ADC_ConfigureBoostMode+0x124>
 80052c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052cc:	d842      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052d2:	d029      	beq.n	8005328 <ADC_ConfigureBoostMode+0x11c>
 80052d4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052d8:	d83c      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052da:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80052de:	d01a      	beq.n	8005316 <ADC_ConfigureBoostMode+0x10a>
 80052e0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80052e4:	d836      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052e6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80052ea:	d014      	beq.n	8005316 <ADC_ConfigureBoostMode+0x10a>
 80052ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80052f0:	d830      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f6:	d00e      	beq.n	8005316 <ADC_ConfigureBoostMode+0x10a>
 80052f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fc:	d82a      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 80052fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005302:	d008      	beq.n	8005316 <ADC_ConfigureBoostMode+0x10a>
 8005304:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005308:	d824      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x148>
 800530a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800530e:	d002      	beq.n	8005316 <ADC_ConfigureBoostMode+0x10a>
 8005310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005314:	d11e      	bne.n	8005354 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	0c9b      	lsrs	r3, r3, #18
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	60fb      	str	r3, [r7, #12]
        break;
 8005326:	e016      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	60fb      	str	r3, [r7, #12]
        break;
 800532e:	e012      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	60fb      	str	r3, [r7, #12]
        break;
 8005336:	e00e      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	099b      	lsrs	r3, r3, #6
 800533c:	60fb      	str	r3, [r7, #12]
        break;
 800533e:	e00a      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	60fb      	str	r3, [r7, #12]
        break;
 8005346:	e006      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	60fb      	str	r3, [r7, #12]
        break;
 800534e:	e002      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005354:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005356:	f7fe fdcb 	bl	8003ef0 <HAL_GetREVID>
 800535a:	4603      	mov	r3, r0
 800535c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005360:	4293      	cmp	r3, r2
 8005362:	d815      	bhi.n	8005390 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a2b      	ldr	r2, [pc, #172]	; (8005414 <ADC_ConfigureBoostMode+0x208>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d908      	bls.n	800537e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800537a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800537c:	e03e      	b.n	80053fc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800538c:	609a      	str	r2, [r3, #8]
}
 800538e:	e035      	b.n	80053fc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <ADC_ConfigureBoostMode+0x20c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d808      	bhi.n	80053b0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053ac:	609a      	str	r2, [r3, #8]
}
 80053ae:	e025      	b.n	80053fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <ADC_ConfigureBoostMode+0x210>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d80a      	bhi.n	80053ce <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	e016      	b.n	80053fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a13      	ldr	r2, [pc, #76]	; (8005420 <ADC_ConfigureBoostMode+0x214>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d80a      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	609a      	str	r2, [r3, #8]
}
 80053ea:	e007      	b.n	80053fc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40022000 	.word	0x40022000
 8005408:	40022100 	.word	0x40022100
 800540c:	40022300 	.word	0x40022300
 8005410:	58026300 	.word	0x58026300
 8005414:	01312d00 	.word	0x01312d00
 8005418:	005f5e10 	.word	0x005f5e10
 800541c:	00bebc20 	.word	0x00bebc20
 8005420:	017d7840 	.word	0x017d7840

08005424 <LL_ADC_IsEnabled>:
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <LL_ADC_IsEnabled+0x18>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <LL_ADC_IsEnabled+0x1a>
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <LL_ADC_StartCalibration>:
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <LL_ADC_StartCalibration+0x38>)
 800545e:	4013      	ands	r3, r2
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800546c:	430a      	orrs	r2, r1
 800546e:	4313      	orrs	r3, r2
 8005470:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	609a      	str	r2, [r3, #8]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	3ffeffc0 	.word	0x3ffeffc0

08005488 <LL_ADC_IsCalibrationOnGoing>:
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800549c:	d101      	bne.n	80054a2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <LL_ADC_REG_IsConversionOngoing>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d101      	bne.n	80054c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_ADCEx_Calibration_Start+0x1e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e04c      	b.n	8005590 <HAL_ADCEx_Calibration_Start+0xb8>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fd90 	bl	8005024 <ADC_Disable>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d135      	bne.n	800557a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005512:	4b21      	ldr	r3, [pc, #132]	; (8005598 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005514:	4013      	ands	r3, r2
 8005516:	f043 0202 	orr.w	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff ff90 	bl	800544c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800552c:	e014      	b.n	8005558 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	3301      	adds	r3, #1
 8005532:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4a19      	ldr	r2, [pc, #100]	; (800559c <HAL_ADCEx_Calibration_Start+0xc4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d30d      	bcc.n	8005558 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f023 0312 	bic.w	r3, r3, #18
 8005544:	f043 0210 	orr.w	r2, r3, #16
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e01b      	b.n	8005590 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ff93 	bl	8005488 <LL_ADC_IsCalibrationOnGoing>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e2      	bne.n	800552e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	f043 0201 	orr.w	r2, r3, #1
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	655a      	str	r2, [r3, #84]	; 0x54
 8005578:	e005      	b.n	8005586 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	f043 0210 	orr.w	r2, r3, #16
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800558e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	ffffeefd 	.word	0xffffeefd
 800559c:	25c3f800 	.word	0x25c3f800

080055a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b09f      	sub	sp, #124	; 0x7c
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e0be      	b.n	800573c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80055c6:	2300      	movs	r3, #0
 80055c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a5c      	ldr	r2, [pc, #368]	; (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d102      	bne.n	80055de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80055d8:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	e001      	b.n	80055e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	f043 0220 	orr.w	r2, r3, #32
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e09d      	b.n	800573c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff ff54 	bl	80054b0 <LL_ADC_REG_IsConversionOngoing>
 8005608:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff ff4e 	bl	80054b0 <LL_ADC_REG_IsConversionOngoing>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d17f      	bne.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800561a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800561c:	2b00      	cmp	r3, #0
 800561e:	d17c      	bne.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a47      	ldr	r2, [pc, #284]	; (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a46      	ldr	r2, [pc, #280]	; (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d101      	bne.n	8005638 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005634:	4b45      	ldr	r3, [pc, #276]	; (800574c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005636:	e000      	b.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005638:	4b45      	ldr	r3, [pc, #276]	; (8005750 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800563a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d039      	beq.n	80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	431a      	orrs	r2, r3
 8005652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005654:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a3a      	ldr	r2, [pc, #232]	; (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a38      	ldr	r2, [pc, #224]	; (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d10e      	bne.n	8005688 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800566a:	4836      	ldr	r0, [pc, #216]	; (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800566c:	f7ff feda 	bl	8005424 <LL_ADC_IsEnabled>
 8005670:	4604      	mov	r4, r0
 8005672:	4835      	ldr	r0, [pc, #212]	; (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005674:	f7ff fed6 	bl	8005424 <LL_ADC_IsEnabled>
 8005678:	4603      	mov	r3, r0
 800567a:	4323      	orrs	r3, r4
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e008      	b.n	800569a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005688:	4832      	ldr	r0, [pc, #200]	; (8005754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800568a:	f7ff fecb 	bl	8005424 <LL_ADC_IsEnabled>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf0c      	ite	eq
 8005694:	2301      	moveq	r3, #1
 8005696:	2300      	movne	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d047      	beq.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	6811      	ldr	r1, [r2, #0]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	6892      	ldr	r2, [r2, #8]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	431a      	orrs	r2, r3
 80056b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056b6:	e03a      	b.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d10e      	bne.n	80056f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80056d8:	481a      	ldr	r0, [pc, #104]	; (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056da:	f7ff fea3 	bl	8005424 <LL_ADC_IsEnabled>
 80056de:	4604      	mov	r4, r0
 80056e0:	4819      	ldr	r0, [pc, #100]	; (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056e2:	f7ff fe9f 	bl	8005424 <LL_ADC_IsEnabled>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4323      	orrs	r3, r4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e008      	b.n	8005708 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80056f6:	4817      	ldr	r0, [pc, #92]	; (8005754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80056f8:	f7ff fe94 	bl	8005424 <LL_ADC_IsEnabled>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005712:	4013      	ands	r3, r2
 8005714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005716:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005718:	e009      	b.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	f043 0220 	orr.w	r2, r3, #32
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800572c:	e000      	b.n	8005730 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800572e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005738:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800573c:	4618      	mov	r0, r3
 800573e:	377c      	adds	r7, #124	; 0x7c
 8005740:	46bd      	mov	sp, r7
 8005742:	bd90      	pop	{r4, r7, pc}
 8005744:	40022000 	.word	0x40022000
 8005748:	40022100 	.word	0x40022100
 800574c:	40022300 	.word	0x40022300
 8005750:	58026300 	.word	0x58026300
 8005754:	58026000 	.word	0x58026000
 8005758:	fffff0e0 	.word	0xfffff0e0

0800575c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <__NVIC_SetPriorityGrouping+0x40>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005778:	4013      	ands	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005786:	4313      	orrs	r3, r2
 8005788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800578a:	4a04      	ldr	r2, [pc, #16]	; (800579c <__NVIC_SetPriorityGrouping+0x40>)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	60d3      	str	r3, [r2, #12]
}
 8005790:	bf00      	nop
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	e000ed00 	.word	0xe000ed00
 80057a0:	05fa0000 	.word	0x05fa0000

080057a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <__NVIC_GetPriorityGrouping+0x18>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	f003 0307 	and.w	r3, r3, #7
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db0b      	blt.n	80057ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	4907      	ldr	r1, [pc, #28]	; (80057f8 <__NVIC_EnableIRQ+0x38>)
 80057da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	2001      	movs	r0, #1
 80057e2:	fa00 f202 	lsl.w	r2, r0, r2
 80057e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e100 	.word	0xe000e100

080057fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	db0a      	blt.n	8005826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	490c      	ldr	r1, [pc, #48]	; (8005848 <__NVIC_SetPriority+0x4c>)
 8005816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581a:	0112      	lsls	r2, r2, #4
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	440b      	add	r3, r1
 8005820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005824:	e00a      	b.n	800583c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4908      	ldr	r1, [pc, #32]	; (800584c <__NVIC_SetPriority+0x50>)
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	3b04      	subs	r3, #4
 8005834:	0112      	lsls	r2, r2, #4
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	440b      	add	r3, r1
 800583a:	761a      	strb	r2, [r3, #24]
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	e000e100 	.word	0xe000e100
 800584c:	e000ed00 	.word	0xe000ed00

08005850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f1c3 0307 	rsb	r3, r3, #7
 800586a:	2b04      	cmp	r3, #4
 800586c:	bf28      	it	cs
 800586e:	2304      	movcs	r3, #4
 8005870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3304      	adds	r3, #4
 8005876:	2b06      	cmp	r3, #6
 8005878:	d902      	bls.n	8005880 <NVIC_EncodePriority+0x30>
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3b03      	subs	r3, #3
 800587e:	e000      	b.n	8005882 <NVIC_EncodePriority+0x32>
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43da      	mvns	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	401a      	ands	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	fa01 f303 	lsl.w	r3, r1, r3
 80058a2:	43d9      	mvns	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a8:	4313      	orrs	r3, r2
         );
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3724      	adds	r7, #36	; 0x24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff ff4c 	bl	800575c <__NVIC_SetPriorityGrouping>
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058da:	f7ff ff63 	bl	80057a4 <__NVIC_GetPriorityGrouping>
 80058de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	6978      	ldr	r0, [r7, #20]
 80058e6:	f7ff ffb3 	bl	8005850 <NVIC_EncodePriority>
 80058ea:	4602      	mov	r2, r0
 80058ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff ff82 	bl	80057fc <__NVIC_SetPriority>
}
 80058f8:	bf00      	nop
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800590a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff ff56 	bl	80057c0 <__NVIC_EnableIRQ>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e014      	b.n	8005958 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	791b      	ldrb	r3, [r3, #4]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fd fca0 	bl	8003284 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e046      	b.n	8005a02 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	795b      	ldrb	r3, [r3, #5]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_DAC_Start+0x20>
 800597c:	2302      	movs	r3, #2
 800597e:	e040      	b.n	8005a02 <HAL_DAC_Start+0xa2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2201      	movs	r2, #1
 800599a:	409a      	lsls	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10f      	bne.n	80059ca <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d11d      	bne.n	80059f4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	605a      	str	r2, [r3, #4]
 80059c8:	e014      	b.n	80059f4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2102      	movs	r1, #2
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d107      	bne.n	80059f4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0202 	orr.w	r2, r2, #2
 80059f2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0a2      	b.n	8005b6e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	795b      	ldrb	r3, [r3, #5]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_DAC_Start_DMA+0x24>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e09c      	b.n	8005b6e <HAL_DAC_Start_DMA+0x15e>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d129      	bne.n	8005a9a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4a4b      	ldr	r2, [pc, #300]	; (8005b78 <HAL_DAC_Start_DMA+0x168>)
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4a4a      	ldr	r2, [pc, #296]	; (8005b7c <HAL_DAC_Start_DMA+0x16c>)
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a49      	ldr	r2, [pc, #292]	; (8005b80 <HAL_DAC_Start_DMA+0x170>)
 8005a5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a6c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_DAC_Start_DMA+0x6c>
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d005      	beq.n	8005a86 <HAL_DAC_Start_DMA+0x76>
 8005a7a:	e009      	b.n	8005a90 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	613b      	str	r3, [r7, #16]
        break;
 8005a84:	e033      	b.n	8005aee <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	613b      	str	r3, [r7, #16]
        break;
 8005a8e:	e02e      	b.n	8005aee <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3310      	adds	r3, #16
 8005a96:	613b      	str	r3, [r7, #16]
        break;
 8005a98:	e029      	b.n	8005aee <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	4a39      	ldr	r2, [pc, #228]	; (8005b84 <HAL_DAC_Start_DMA+0x174>)
 8005aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4a38      	ldr	r2, [pc, #224]	; (8005b88 <HAL_DAC_Start_DMA+0x178>)
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <HAL_DAC_Start_DMA+0x17c>)
 8005ab0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_DAC_Start_DMA+0xc0>
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d005      	beq.n	8005ada <HAL_DAC_Start_DMA+0xca>
 8005ace:	e009      	b.n	8005ae4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	613b      	str	r3, [r7, #16]
        break;
 8005ad8:	e009      	b.n	8005aee <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3318      	adds	r3, #24
 8005ae0:	613b      	str	r3, [r7, #16]
        break;
 8005ae2:	e004      	b.n	8005aee <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	331c      	adds	r3, #28
 8005aea:	613b      	str	r3, [r7, #16]
        break;
 8005aec:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d111      	bne.n	8005b18 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6898      	ldr	r0, [r3, #8]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	f000 fe67 	bl	80067e0 <HAL_DMA_Start_IT>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]
 8005b16:	e010      	b.n	8005b3a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005b26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68d8      	ldr	r0, [r3, #12]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	f000 fe55 	bl	80067e0 <HAL_DMA_Start_IT>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10c      	bne.n	8005b60 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6819      	ldr	r1, [r3, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2201      	movs	r2, #1
 8005b54:	409a      	lsls	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e005      	b.n	8005b6c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f043 0204 	orr.w	r2, r3, #4
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	08006001 	.word	0x08006001
 8005b7c:	08006023 	.word	0x08006023
 8005b80:	0800603f 	.word	0x0800603f
 8005b84:	080060bd 	.word	0x080060bd
 8005b88:	080060df 	.word	0x080060df
 8005b8c:	080060fb 	.word	0x080060fb

08005b90 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e03e      	b.n	8005c22 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6819      	ldr	r1, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	43da      	mvns	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6819      	ldr	r1, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2201      	movs	r2, #1
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	43da      	mvns	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	400a      	ands	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10d      	bne.n	8005c00 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 f863 	bl	8006cb4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e00c      	b.n	8005c1a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 f855 	bl	8006cb4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005c18:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01d      	beq.n	8005c88 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c80:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f86f 	bl	8005d66 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01d      	beq.n	8005cce <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d018      	beq.n	8005cce <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f043 0202 	orr.w	r2, r3, #2
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005cb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005cc6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f9ed 	bl	80060a8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b087      	sub	sp, #28
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e015      	b.n	8005d1e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d105      	bne.n	8005d0a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4413      	add	r3, r2
 8005d04:	3308      	adds	r3, #8
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	e004      	b.n	8005d14 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3314      	adds	r3, #20
 8005d12:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	461a      	mov	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_DAC_ConfigChannel+0x1e>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e12a      	b.n	8005ff4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	795b      	ldrb	r3, [r3, #5]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_DAC_ConfigChannel+0x2e>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e124      	b.n	8005ff4 <HAL_DAC_ConfigChannel+0x278>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2202      	movs	r2, #2
 8005db4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d17a      	bne.n	8005eb4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005dbe:	f7fe f88b 	bl	8003ed8 <HAL_GetTick>
 8005dc2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d13d      	bne.n	8005e46 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005dca:	e018      	b.n	8005dfe <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005dcc:	f7fe f884 	bl	8003ed8 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d911      	bls.n	8005dfe <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de0:	4b86      	ldr	r3, [pc, #536]	; (8005ffc <HAL_DAC_ConfigChannel+0x280>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f043 0208 	orr.w	r2, r3, #8
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2203      	movs	r2, #3
 8005df8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e0fa      	b.n	8005ff4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e04:	4b7d      	ldr	r3, [pc, #500]	; (8005ffc <HAL_DAC_ConfigChannel+0x280>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1df      	bne.n	8005dcc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	6992      	ldr	r2, [r2, #24]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
 8005e16:	e020      	b.n	8005e5a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e18:	f7fe f85e 	bl	8003ed8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d90f      	bls.n	8005e46 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da0a      	bge.n	8005e46 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f043 0208 	orr.w	r2, r3, #8
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2203      	movs	r2, #3
 8005e40:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e0d6      	b.n	8005ff4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dbe3      	blt.n	8005e18 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	6992      	ldr	r2, [r2, #24]
 8005e58:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	ea02 0103 	and.w	r1, r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	21ff      	movs	r1, #255	; 0xff
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	ea02 0103 	and.w	r1, r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d11d      	bne.n	8005ef8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	221f      	movs	r2, #31
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2207      	movs	r2, #7
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d102      	bne.n	8005f22 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	e00f      	b.n	8005f42 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d102      	bne.n	8005f30 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2e:	e008      	b.n	8005f42 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3c:	e001      	b.n	8005f42 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	43da      	mvns	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	400a      	ands	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6819      	ldr	r1, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	22c0      	movs	r2, #192	; 0xc0
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	400a      	ands	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20008000 	.word	0x20008000

08006000 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fe8b 	bl	8005d2a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	711a      	strb	r2, [r3, #4]
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff fe84 	bl	8005d3e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f043 0204 	orr.w	r2, r3, #4
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fe7a 	bl	8005d52 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	711a      	strb	r2, [r3, #4]
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff ffce 	bl	800606c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	711a      	strb	r2, [r3, #4]
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff ffc7 	bl	8006080 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f043 0204 	orr.w	r2, r3, #4
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ffbd 	bl	8006094 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	711a      	strb	r2, [r3, #4]
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006130:	f7fd fed2 	bl	8003ed8 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e316      	b.n	800676e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a66      	ldr	r2, [pc, #408]	; (80062e0 <HAL_DMA_Init+0x1b8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04a      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a65      	ldr	r2, [pc, #404]	; (80062e4 <HAL_DMA_Init+0x1bc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d045      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a63      	ldr	r2, [pc, #396]	; (80062e8 <HAL_DMA_Init+0x1c0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d040      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a62      	ldr	r2, [pc, #392]	; (80062ec <HAL_DMA_Init+0x1c4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d03b      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a60      	ldr	r2, [pc, #384]	; (80062f0 <HAL_DMA_Init+0x1c8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d036      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5f      	ldr	r2, [pc, #380]	; (80062f4 <HAL_DMA_Init+0x1cc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d031      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5d      	ldr	r2, [pc, #372]	; (80062f8 <HAL_DMA_Init+0x1d0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d02c      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a5c      	ldr	r2, [pc, #368]	; (80062fc <HAL_DMA_Init+0x1d4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d027      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5a      	ldr	r2, [pc, #360]	; (8006300 <HAL_DMA_Init+0x1d8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a59      	ldr	r2, [pc, #356]	; (8006304 <HAL_DMA_Init+0x1dc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d01d      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a57      	ldr	r2, [pc, #348]	; (8006308 <HAL_DMA_Init+0x1e0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a56      	ldr	r2, [pc, #344]	; (800630c <HAL_DMA_Init+0x1e4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a54      	ldr	r2, [pc, #336]	; (8006310 <HAL_DMA_Init+0x1e8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a53      	ldr	r2, [pc, #332]	; (8006314 <HAL_DMA_Init+0x1ec>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a51      	ldr	r2, [pc, #324]	; (8006318 <HAL_DMA_Init+0x1f0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a50      	ldr	r2, [pc, #320]	; (800631c <HAL_DMA_Init+0x1f4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_DMA_Init+0xbc>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_DMA_Init+0xbe>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 813b 	beq.w	8006462 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a37      	ldr	r2, [pc, #220]	; (80062e0 <HAL_DMA_Init+0x1b8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d04a      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a36      	ldr	r2, [pc, #216]	; (80062e4 <HAL_DMA_Init+0x1bc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d045      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a34      	ldr	r2, [pc, #208]	; (80062e8 <HAL_DMA_Init+0x1c0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d040      	beq.n	800629c <HAL_DMA_Init+0x174>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a33      	ldr	r2, [pc, #204]	; (80062ec <HAL_DMA_Init+0x1c4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d03b      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a31      	ldr	r2, [pc, #196]	; (80062f0 <HAL_DMA_Init+0x1c8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d036      	beq.n	800629c <HAL_DMA_Init+0x174>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a30      	ldr	r2, [pc, #192]	; (80062f4 <HAL_DMA_Init+0x1cc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d031      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2e      	ldr	r2, [pc, #184]	; (80062f8 <HAL_DMA_Init+0x1d0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d02c      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2d      	ldr	r2, [pc, #180]	; (80062fc <HAL_DMA_Init+0x1d4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d027      	beq.n	800629c <HAL_DMA_Init+0x174>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <HAL_DMA_Init+0x1d8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d022      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <HAL_DMA_Init+0x1dc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d01d      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <HAL_DMA_Init+0x1e0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d018      	beq.n	800629c <HAL_DMA_Init+0x174>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a27      	ldr	r2, [pc, #156]	; (800630c <HAL_DMA_Init+0x1e4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a25      	ldr	r2, [pc, #148]	; (8006310 <HAL_DMA_Init+0x1e8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <HAL_DMA_Init+0x174>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a24      	ldr	r2, [pc, #144]	; (8006314 <HAL_DMA_Init+0x1ec>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d009      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_DMA_Init+0x1f0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <HAL_DMA_Init+0x1f4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <HAL_DMA_Init+0x186>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e007      	b.n	80062be <HAL_DMA_Init+0x196>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062be:	e02f      	b.n	8006320 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062c0:	f7fd fe0a 	bl	8003ed8 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d928      	bls.n	8006320 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2203      	movs	r2, #3
 80062d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e246      	b.n	800676e <HAL_DMA_Init+0x646>
 80062e0:	40020010 	.word	0x40020010
 80062e4:	40020028 	.word	0x40020028
 80062e8:	40020040 	.word	0x40020040
 80062ec:	40020058 	.word	0x40020058
 80062f0:	40020070 	.word	0x40020070
 80062f4:	40020088 	.word	0x40020088
 80062f8:	400200a0 	.word	0x400200a0
 80062fc:	400200b8 	.word	0x400200b8
 8006300:	40020410 	.word	0x40020410
 8006304:	40020428 	.word	0x40020428
 8006308:	40020440 	.word	0x40020440
 800630c:	40020458 	.word	0x40020458
 8006310:	40020470 	.word	0x40020470
 8006314:	40020488 	.word	0x40020488
 8006318:	400204a0 	.word	0x400204a0
 800631c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1c8      	bne.n	80062c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4b83      	ldr	r3, [pc, #524]	; (8006548 <HAL_DMA_Init+0x420>)
 800633a:	4013      	ands	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006346:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006352:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800635e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b04      	cmp	r3, #4
 8006372:	d107      	bne.n	8006384 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	4313      	orrs	r3, r2
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006384:	4b71      	ldr	r3, [pc, #452]	; (800654c <HAL_DMA_Init+0x424>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4b71      	ldr	r3, [pc, #452]	; (8006550 <HAL_DMA_Init+0x428>)
 800638a:	4013      	ands	r3, r2
 800638c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006390:	d328      	bcc.n	80063e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b28      	cmp	r3, #40	; 0x28
 8006398:	d903      	bls.n	80063a2 <HAL_DMA_Init+0x27a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b2e      	cmp	r3, #46	; 0x2e
 80063a0:	d917      	bls.n	80063d2 <HAL_DMA_Init+0x2aa>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b3e      	cmp	r3, #62	; 0x3e
 80063a8:	d903      	bls.n	80063b2 <HAL_DMA_Init+0x28a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b42      	cmp	r3, #66	; 0x42
 80063b0:	d90f      	bls.n	80063d2 <HAL_DMA_Init+0x2aa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b46      	cmp	r3, #70	; 0x46
 80063b8:	d903      	bls.n	80063c2 <HAL_DMA_Init+0x29a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b48      	cmp	r3, #72	; 0x48
 80063c0:	d907      	bls.n	80063d2 <HAL_DMA_Init+0x2aa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b4e      	cmp	r3, #78	; 0x4e
 80063c8:	d905      	bls.n	80063d6 <HAL_DMA_Init+0x2ae>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b52      	cmp	r3, #82	; 0x52
 80063d0:	d801      	bhi.n	80063d6 <HAL_DMA_Init+0x2ae>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <HAL_DMA_Init+0x2b0>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0307 	bic.w	r3, r3, #7
 80063fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b04      	cmp	r3, #4
 800640c:	d117      	bne.n	800643e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00e      	beq.n	800643e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f002 fb3f 	bl	8008aa4 <DMA_CheckFifoParam>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2240      	movs	r2, #64	; 0x40
 8006430:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e197      	b.n	800676e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f002 fa7a 	bl	8008940 <DMA_CalcBaseAndBitshift>
 800644c:	4603      	mov	r3, r0
 800644e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	223f      	movs	r2, #63	; 0x3f
 800645a:	409a      	lsls	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	e0cd      	b.n	80065fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a3b      	ldr	r2, [pc, #236]	; (8006554 <HAL_DMA_Init+0x42c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d022      	beq.n	80064b2 <HAL_DMA_Init+0x38a>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a39      	ldr	r2, [pc, #228]	; (8006558 <HAL_DMA_Init+0x430>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01d      	beq.n	80064b2 <HAL_DMA_Init+0x38a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a38      	ldr	r2, [pc, #224]	; (800655c <HAL_DMA_Init+0x434>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d018      	beq.n	80064b2 <HAL_DMA_Init+0x38a>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a36      	ldr	r2, [pc, #216]	; (8006560 <HAL_DMA_Init+0x438>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_DMA_Init+0x38a>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a35      	ldr	r2, [pc, #212]	; (8006564 <HAL_DMA_Init+0x43c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00e      	beq.n	80064b2 <HAL_DMA_Init+0x38a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a33      	ldr	r2, [pc, #204]	; (8006568 <HAL_DMA_Init+0x440>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_DMA_Init+0x38a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a32      	ldr	r2, [pc, #200]	; (800656c <HAL_DMA_Init+0x444>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_DMA_Init+0x38a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a30      	ldr	r2, [pc, #192]	; (8006570 <HAL_DMA_Init+0x448>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d101      	bne.n	80064b6 <HAL_DMA_Init+0x38e>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <HAL_DMA_Init+0x390>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8097 	beq.w	80065ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a24      	ldr	r2, [pc, #144]	; (8006554 <HAL_DMA_Init+0x42c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d021      	beq.n	800650c <HAL_DMA_Init+0x3e4>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a22      	ldr	r2, [pc, #136]	; (8006558 <HAL_DMA_Init+0x430>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01c      	beq.n	800650c <HAL_DMA_Init+0x3e4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a21      	ldr	r2, [pc, #132]	; (800655c <HAL_DMA_Init+0x434>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d017      	beq.n	800650c <HAL_DMA_Init+0x3e4>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <HAL_DMA_Init+0x438>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d012      	beq.n	800650c <HAL_DMA_Init+0x3e4>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <HAL_DMA_Init+0x43c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00d      	beq.n	800650c <HAL_DMA_Init+0x3e4>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1c      	ldr	r2, [pc, #112]	; (8006568 <HAL_DMA_Init+0x440>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d008      	beq.n	800650c <HAL_DMA_Init+0x3e4>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1b      	ldr	r2, [pc, #108]	; (800656c <HAL_DMA_Init+0x444>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <HAL_DMA_Init+0x3e4>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a19      	ldr	r2, [pc, #100]	; (8006570 <HAL_DMA_Init+0x448>)
 800650a:	4293      	cmp	r3, r2
 800650c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4b12      	ldr	r3, [pc, #72]	; (8006574 <HAL_DMA_Init+0x44c>)
 800652a:	4013      	ands	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d020      	beq.n	8006578 <HAL_DMA_Init+0x450>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d102      	bne.n	8006544 <HAL_DMA_Init+0x41c>
 800653e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006542:	e01a      	b.n	800657a <HAL_DMA_Init+0x452>
 8006544:	2300      	movs	r3, #0
 8006546:	e018      	b.n	800657a <HAL_DMA_Init+0x452>
 8006548:	fe10803f 	.word	0xfe10803f
 800654c:	5c001000 	.word	0x5c001000
 8006550:	ffff0000 	.word	0xffff0000
 8006554:	58025408 	.word	0x58025408
 8006558:	5802541c 	.word	0x5802541c
 800655c:	58025430 	.word	0x58025430
 8006560:	58025444 	.word	0x58025444
 8006564:	58025458 	.word	0x58025458
 8006568:	5802546c 	.word	0x5802546c
 800656c:	58025480 	.word	0x58025480
 8006570:	58025494 	.word	0x58025494
 8006574:	fffe000f 	.word	0xfffe000f
 8006578:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68d2      	ldr	r2, [r2, #12]
 800657e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	4b6e      	ldr	r3, [pc, #440]	; (8006778 <HAL_DMA_Init+0x650>)
 80065c0:	4413      	add	r3, r2
 80065c2:	4a6e      	ldr	r2, [pc, #440]	; (800677c <HAL_DMA_Init+0x654>)
 80065c4:	fba2 2303 	umull	r2, r3, r2, r3
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	009a      	lsls	r2, r3, #2
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f002 f9b5 	bl	8008940 <DMA_CalcBaseAndBitshift>
 80065d6:	4603      	mov	r3, r0
 80065d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2201      	movs	r2, #1
 80065e4:	409a      	lsls	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	e008      	b.n	80065fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2240      	movs	r2, #64	; 0x40
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2203      	movs	r2, #3
 80065f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0b7      	b.n	800676e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a5f      	ldr	r2, [pc, #380]	; (8006780 <HAL_DMA_Init+0x658>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d072      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a5d      	ldr	r2, [pc, #372]	; (8006784 <HAL_DMA_Init+0x65c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d06d      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a5c      	ldr	r2, [pc, #368]	; (8006788 <HAL_DMA_Init+0x660>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d068      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a5a      	ldr	r2, [pc, #360]	; (800678c <HAL_DMA_Init+0x664>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d063      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a59      	ldr	r2, [pc, #356]	; (8006790 <HAL_DMA_Init+0x668>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d05e      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a57      	ldr	r2, [pc, #348]	; (8006794 <HAL_DMA_Init+0x66c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d059      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a56      	ldr	r2, [pc, #344]	; (8006798 <HAL_DMA_Init+0x670>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d054      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a54      	ldr	r2, [pc, #336]	; (800679c <HAL_DMA_Init+0x674>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d04f      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a53      	ldr	r2, [pc, #332]	; (80067a0 <HAL_DMA_Init+0x678>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d04a      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a51      	ldr	r2, [pc, #324]	; (80067a4 <HAL_DMA_Init+0x67c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d045      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a50      	ldr	r2, [pc, #320]	; (80067a8 <HAL_DMA_Init+0x680>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d040      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a4e      	ldr	r2, [pc, #312]	; (80067ac <HAL_DMA_Init+0x684>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d03b      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a4d      	ldr	r2, [pc, #308]	; (80067b0 <HAL_DMA_Init+0x688>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d036      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a4b      	ldr	r2, [pc, #300]	; (80067b4 <HAL_DMA_Init+0x68c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d031      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a4a      	ldr	r2, [pc, #296]	; (80067b8 <HAL_DMA_Init+0x690>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d02c      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a48      	ldr	r2, [pc, #288]	; (80067bc <HAL_DMA_Init+0x694>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d027      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a47      	ldr	r2, [pc, #284]	; (80067c0 <HAL_DMA_Init+0x698>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a45      	ldr	r2, [pc, #276]	; (80067c4 <HAL_DMA_Init+0x69c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01d      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a44      	ldr	r2, [pc, #272]	; (80067c8 <HAL_DMA_Init+0x6a0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a42      	ldr	r2, [pc, #264]	; (80067cc <HAL_DMA_Init+0x6a4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a41      	ldr	r2, [pc, #260]	; (80067d0 <HAL_DMA_Init+0x6a8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3f      	ldr	r2, [pc, #252]	; (80067d4 <HAL_DMA_Init+0x6ac>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a3e      	ldr	r2, [pc, #248]	; (80067d8 <HAL_DMA_Init+0x6b0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_DMA_Init+0x5c6>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a3c      	ldr	r2, [pc, #240]	; (80067dc <HAL_DMA_Init+0x6b4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d101      	bne.n	80066f2 <HAL_DMA_Init+0x5ca>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <HAL_DMA_Init+0x5cc>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d032      	beq.n	800675e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 fa4f 	bl	8008b9c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b80      	cmp	r3, #128	; 0x80
 8006704:	d102      	bne.n	800670c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006720:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d010      	beq.n	800674c <HAL_DMA_Init+0x624>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b08      	cmp	r3, #8
 8006730:	d80c      	bhi.n	800674c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f002 facc 	bl	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	e008      	b.n	800675e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	a7fdabf8 	.word	0xa7fdabf8
 800677c:	cccccccd 	.word	0xcccccccd
 8006780:	40020010 	.word	0x40020010
 8006784:	40020028 	.word	0x40020028
 8006788:	40020040 	.word	0x40020040
 800678c:	40020058 	.word	0x40020058
 8006790:	40020070 	.word	0x40020070
 8006794:	40020088 	.word	0x40020088
 8006798:	400200a0 	.word	0x400200a0
 800679c:	400200b8 	.word	0x400200b8
 80067a0:	40020410 	.word	0x40020410
 80067a4:	40020428 	.word	0x40020428
 80067a8:	40020440 	.word	0x40020440
 80067ac:	40020458 	.word	0x40020458
 80067b0:	40020470 	.word	0x40020470
 80067b4:	40020488 	.word	0x40020488
 80067b8:	400204a0 	.word	0x400204a0
 80067bc:	400204b8 	.word	0x400204b8
 80067c0:	58025408 	.word	0x58025408
 80067c4:	5802541c 	.word	0x5802541c
 80067c8:	58025430 	.word	0x58025430
 80067cc:	58025444 	.word	0x58025444
 80067d0:	58025458 	.word	0x58025458
 80067d4:	5802546c 	.word	0x5802546c
 80067d8:	58025480 	.word	0x58025480
 80067dc:	58025494 	.word	0x58025494

080067e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e226      	b.n	8006c4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_DMA_Start_IT+0x2a>
 8006806:	2302      	movs	r3, #2
 8006808:	e21f      	b.n	8006c4a <HAL_DMA_Start_IT+0x46a>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b01      	cmp	r3, #1
 800681c:	f040 820a 	bne.w	8006c34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a68      	ldr	r2, [pc, #416]	; (80069d4 <HAL_DMA_Start_IT+0x1f4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d04a      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a66      	ldr	r2, [pc, #408]	; (80069d8 <HAL_DMA_Start_IT+0x1f8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d045      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a65      	ldr	r2, [pc, #404]	; (80069dc <HAL_DMA_Start_IT+0x1fc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d040      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a63      	ldr	r2, [pc, #396]	; (80069e0 <HAL_DMA_Start_IT+0x200>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d03b      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a62      	ldr	r2, [pc, #392]	; (80069e4 <HAL_DMA_Start_IT+0x204>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d036      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a60      	ldr	r2, [pc, #384]	; (80069e8 <HAL_DMA_Start_IT+0x208>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d031      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a5f      	ldr	r2, [pc, #380]	; (80069ec <HAL_DMA_Start_IT+0x20c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d02c      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a5d      	ldr	r2, [pc, #372]	; (80069f0 <HAL_DMA_Start_IT+0x210>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d027      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a5c      	ldr	r2, [pc, #368]	; (80069f4 <HAL_DMA_Start_IT+0x214>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d022      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a5a      	ldr	r2, [pc, #360]	; (80069f8 <HAL_DMA_Start_IT+0x218>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01d      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a59      	ldr	r2, [pc, #356]	; (80069fc <HAL_DMA_Start_IT+0x21c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d018      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a57      	ldr	r2, [pc, #348]	; (8006a00 <HAL_DMA_Start_IT+0x220>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a56      	ldr	r2, [pc, #344]	; (8006a04 <HAL_DMA_Start_IT+0x224>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00e      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a54      	ldr	r2, [pc, #336]	; (8006a08 <HAL_DMA_Start_IT+0x228>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d009      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a53      	ldr	r2, [pc, #332]	; (8006a0c <HAL_DMA_Start_IT+0x22c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <HAL_DMA_Start_IT+0xee>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a51      	ldr	r2, [pc, #324]	; (8006a10 <HAL_DMA_Start_IT+0x230>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d108      	bne.n	80068e0 <HAL_DMA_Start_IT+0x100>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0201 	bic.w	r2, r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e007      	b.n	80068f0 <HAL_DMA_Start_IT+0x110>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f001 fe76 	bl	80085e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a34      	ldr	r2, [pc, #208]	; (80069d4 <HAL_DMA_Start_IT+0x1f4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d04a      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a33      	ldr	r2, [pc, #204]	; (80069d8 <HAL_DMA_Start_IT+0x1f8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d045      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a31      	ldr	r2, [pc, #196]	; (80069dc <HAL_DMA_Start_IT+0x1fc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d040      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a30      	ldr	r2, [pc, #192]	; (80069e0 <HAL_DMA_Start_IT+0x200>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d03b      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2e      	ldr	r2, [pc, #184]	; (80069e4 <HAL_DMA_Start_IT+0x204>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d036      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a2d      	ldr	r2, [pc, #180]	; (80069e8 <HAL_DMA_Start_IT+0x208>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d031      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2b      	ldr	r2, [pc, #172]	; (80069ec <HAL_DMA_Start_IT+0x20c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d02c      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <HAL_DMA_Start_IT+0x210>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d027      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a28      	ldr	r2, [pc, #160]	; (80069f4 <HAL_DMA_Start_IT+0x214>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d022      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <HAL_DMA_Start_IT+0x218>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d01d      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a25      	ldr	r2, [pc, #148]	; (80069fc <HAL_DMA_Start_IT+0x21c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d018      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <HAL_DMA_Start_IT+0x220>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d013      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a22      	ldr	r2, [pc, #136]	; (8006a04 <HAL_DMA_Start_IT+0x224>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00e      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a21      	ldr	r2, [pc, #132]	; (8006a08 <HAL_DMA_Start_IT+0x228>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d009      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1f      	ldr	r2, [pc, #124]	; (8006a0c <HAL_DMA_Start_IT+0x22c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <HAL_DMA_Start_IT+0x1bc>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_DMA_Start_IT+0x230>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d101      	bne.n	80069a0 <HAL_DMA_Start_IT+0x1c0>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <HAL_DMA_Start_IT+0x1c2>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d036      	beq.n	8006a14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f023 021e 	bic.w	r2, r3, #30
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0216 	orr.w	r2, r2, #22
 80069b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d03e      	beq.n	8006a40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0208 	orr.w	r2, r2, #8
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e035      	b.n	8006a40 <HAL_DMA_Start_IT+0x260>
 80069d4:	40020010 	.word	0x40020010
 80069d8:	40020028 	.word	0x40020028
 80069dc:	40020040 	.word	0x40020040
 80069e0:	40020058 	.word	0x40020058
 80069e4:	40020070 	.word	0x40020070
 80069e8:	40020088 	.word	0x40020088
 80069ec:	400200a0 	.word	0x400200a0
 80069f0:	400200b8 	.word	0x400200b8
 80069f4:	40020410 	.word	0x40020410
 80069f8:	40020428 	.word	0x40020428
 80069fc:	40020440 	.word	0x40020440
 8006a00:	40020458 	.word	0x40020458
 8006a04:	40020470 	.word	0x40020470
 8006a08:	40020488 	.word	0x40020488
 8006a0c:	400204a0 	.word	0x400204a0
 8006a10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f023 020e 	bic.w	r2, r3, #14
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 020a 	orr.w	r2, r2, #10
 8006a26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0204 	orr.w	r2, r2, #4
 8006a3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a83      	ldr	r2, [pc, #524]	; (8006c54 <HAL_DMA_Start_IT+0x474>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d072      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a82      	ldr	r2, [pc, #520]	; (8006c58 <HAL_DMA_Start_IT+0x478>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d06d      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a80      	ldr	r2, [pc, #512]	; (8006c5c <HAL_DMA_Start_IT+0x47c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d068      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7f      	ldr	r2, [pc, #508]	; (8006c60 <HAL_DMA_Start_IT+0x480>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d063      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7d      	ldr	r2, [pc, #500]	; (8006c64 <HAL_DMA_Start_IT+0x484>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d05e      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a7c      	ldr	r2, [pc, #496]	; (8006c68 <HAL_DMA_Start_IT+0x488>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d059      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a7a      	ldr	r2, [pc, #488]	; (8006c6c <HAL_DMA_Start_IT+0x48c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d054      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a79      	ldr	r2, [pc, #484]	; (8006c70 <HAL_DMA_Start_IT+0x490>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d04f      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a77      	ldr	r2, [pc, #476]	; (8006c74 <HAL_DMA_Start_IT+0x494>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d04a      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a76      	ldr	r2, [pc, #472]	; (8006c78 <HAL_DMA_Start_IT+0x498>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d045      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a74      	ldr	r2, [pc, #464]	; (8006c7c <HAL_DMA_Start_IT+0x49c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d040      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a73      	ldr	r2, [pc, #460]	; (8006c80 <HAL_DMA_Start_IT+0x4a0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d03b      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a71      	ldr	r2, [pc, #452]	; (8006c84 <HAL_DMA_Start_IT+0x4a4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d036      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a70      	ldr	r2, [pc, #448]	; (8006c88 <HAL_DMA_Start_IT+0x4a8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d031      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a6e      	ldr	r2, [pc, #440]	; (8006c8c <HAL_DMA_Start_IT+0x4ac>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d02c      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a6d      	ldr	r2, [pc, #436]	; (8006c90 <HAL_DMA_Start_IT+0x4b0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d027      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a6b      	ldr	r2, [pc, #428]	; (8006c94 <HAL_DMA_Start_IT+0x4b4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d022      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a6a      	ldr	r2, [pc, #424]	; (8006c98 <HAL_DMA_Start_IT+0x4b8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d01d      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a68      	ldr	r2, [pc, #416]	; (8006c9c <HAL_DMA_Start_IT+0x4bc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d018      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a67      	ldr	r2, [pc, #412]	; (8006ca0 <HAL_DMA_Start_IT+0x4c0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a65      	ldr	r2, [pc, #404]	; (8006ca4 <HAL_DMA_Start_IT+0x4c4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00e      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a64      	ldr	r2, [pc, #400]	; (8006ca8 <HAL_DMA_Start_IT+0x4c8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d009      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a62      	ldr	r2, [pc, #392]	; (8006cac <HAL_DMA_Start_IT+0x4cc>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d004      	beq.n	8006b30 <HAL_DMA_Start_IT+0x350>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a61      	ldr	r2, [pc, #388]	; (8006cb0 <HAL_DMA_Start_IT+0x4d0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d101      	bne.n	8006b34 <HAL_DMA_Start_IT+0x354>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <HAL_DMA_Start_IT+0x356>
 8006b34:	2300      	movs	r3, #0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01a      	beq.n	8006b70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a37      	ldr	r2, [pc, #220]	; (8006c54 <HAL_DMA_Start_IT+0x474>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d04a      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a36      	ldr	r2, [pc, #216]	; (8006c58 <HAL_DMA_Start_IT+0x478>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d045      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a34      	ldr	r2, [pc, #208]	; (8006c5c <HAL_DMA_Start_IT+0x47c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d040      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a33      	ldr	r2, [pc, #204]	; (8006c60 <HAL_DMA_Start_IT+0x480>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d03b      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a31      	ldr	r2, [pc, #196]	; (8006c64 <HAL_DMA_Start_IT+0x484>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d036      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a30      	ldr	r2, [pc, #192]	; (8006c68 <HAL_DMA_Start_IT+0x488>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d031      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2e      	ldr	r2, [pc, #184]	; (8006c6c <HAL_DMA_Start_IT+0x48c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d02c      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <HAL_DMA_Start_IT+0x490>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d027      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <HAL_DMA_Start_IT+0x494>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d022      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <HAL_DMA_Start_IT+0x498>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d01d      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a28      	ldr	r2, [pc, #160]	; (8006c7c <HAL_DMA_Start_IT+0x49c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d018      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a27      	ldr	r2, [pc, #156]	; (8006c80 <HAL_DMA_Start_IT+0x4a0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d013      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <HAL_DMA_Start_IT+0x4a4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00e      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <HAL_DMA_Start_IT+0x4a8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a22      	ldr	r2, [pc, #136]	; (8006c8c <HAL_DMA_Start_IT+0x4ac>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_DMA_Start_IT+0x430>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a21      	ldr	r2, [pc, #132]	; (8006c90 <HAL_DMA_Start_IT+0x4b0>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d108      	bne.n	8006c22 <HAL_DMA_Start_IT+0x442>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e012      	b.n	8006c48 <HAL_DMA_Start_IT+0x468>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e009      	b.n	8006c48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40020010 	.word	0x40020010
 8006c58:	40020028 	.word	0x40020028
 8006c5c:	40020040 	.word	0x40020040
 8006c60:	40020058 	.word	0x40020058
 8006c64:	40020070 	.word	0x40020070
 8006c68:	40020088 	.word	0x40020088
 8006c6c:	400200a0 	.word	0x400200a0
 8006c70:	400200b8 	.word	0x400200b8
 8006c74:	40020410 	.word	0x40020410
 8006c78:	40020428 	.word	0x40020428
 8006c7c:	40020440 	.word	0x40020440
 8006c80:	40020458 	.word	0x40020458
 8006c84:	40020470 	.word	0x40020470
 8006c88:	40020488 	.word	0x40020488
 8006c8c:	400204a0 	.word	0x400204a0
 8006c90:	400204b8 	.word	0x400204b8
 8006c94:	58025408 	.word	0x58025408
 8006c98:	5802541c 	.word	0x5802541c
 8006c9c:	58025430 	.word	0x58025430
 8006ca0:	58025444 	.word	0x58025444
 8006ca4:	58025458 	.word	0x58025458
 8006ca8:	5802546c 	.word	0x5802546c
 8006cac:	58025480 	.word	0x58025480
 8006cb0:	58025494 	.word	0x58025494

08006cb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006cbc:	f7fd f90c 	bl	8003ed8 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e2dc      	b.n	8007286 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d008      	beq.n	8006cea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2280      	movs	r2, #128	; 0x80
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e2cd      	b.n	8007286 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a76      	ldr	r2, [pc, #472]	; (8006ec8 <HAL_DMA_Abort+0x214>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d04a      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a74      	ldr	r2, [pc, #464]	; (8006ecc <HAL_DMA_Abort+0x218>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d045      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a73      	ldr	r2, [pc, #460]	; (8006ed0 <HAL_DMA_Abort+0x21c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d040      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a71      	ldr	r2, [pc, #452]	; (8006ed4 <HAL_DMA_Abort+0x220>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d03b      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a70      	ldr	r2, [pc, #448]	; (8006ed8 <HAL_DMA_Abort+0x224>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d036      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a6e      	ldr	r2, [pc, #440]	; (8006edc <HAL_DMA_Abort+0x228>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d031      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a6d      	ldr	r2, [pc, #436]	; (8006ee0 <HAL_DMA_Abort+0x22c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d02c      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a6b      	ldr	r2, [pc, #428]	; (8006ee4 <HAL_DMA_Abort+0x230>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d027      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a6a      	ldr	r2, [pc, #424]	; (8006ee8 <HAL_DMA_Abort+0x234>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d022      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a68      	ldr	r2, [pc, #416]	; (8006eec <HAL_DMA_Abort+0x238>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01d      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a67      	ldr	r2, [pc, #412]	; (8006ef0 <HAL_DMA_Abort+0x23c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d018      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a65      	ldr	r2, [pc, #404]	; (8006ef4 <HAL_DMA_Abort+0x240>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a64      	ldr	r2, [pc, #400]	; (8006ef8 <HAL_DMA_Abort+0x244>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a62      	ldr	r2, [pc, #392]	; (8006efc <HAL_DMA_Abort+0x248>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a61      	ldr	r2, [pc, #388]	; (8006f00 <HAL_DMA_Abort+0x24c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_DMA_Abort+0xd6>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a5f      	ldr	r2, [pc, #380]	; (8006f04 <HAL_DMA_Abort+0x250>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d101      	bne.n	8006d8e <HAL_DMA_Abort+0xda>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <HAL_DMA_Abort+0xdc>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d013      	beq.n	8006dbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 021e 	bic.w	r2, r2, #30
 8006da2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695a      	ldr	r2, [r3, #20]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006db2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	e00a      	b.n	8006dd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 020e 	bic.w	r2, r2, #14
 8006dca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a3c      	ldr	r2, [pc, #240]	; (8006ec8 <HAL_DMA_Abort+0x214>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d072      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a3a      	ldr	r2, [pc, #232]	; (8006ecc <HAL_DMA_Abort+0x218>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d06d      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a39      	ldr	r2, [pc, #228]	; (8006ed0 <HAL_DMA_Abort+0x21c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d068      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a37      	ldr	r2, [pc, #220]	; (8006ed4 <HAL_DMA_Abort+0x220>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d063      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a36      	ldr	r2, [pc, #216]	; (8006ed8 <HAL_DMA_Abort+0x224>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d05e      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a34      	ldr	r2, [pc, #208]	; (8006edc <HAL_DMA_Abort+0x228>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d059      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a33      	ldr	r2, [pc, #204]	; (8006ee0 <HAL_DMA_Abort+0x22c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d054      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a31      	ldr	r2, [pc, #196]	; (8006ee4 <HAL_DMA_Abort+0x230>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d04f      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a30      	ldr	r2, [pc, #192]	; (8006ee8 <HAL_DMA_Abort+0x234>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d04a      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2e      	ldr	r2, [pc, #184]	; (8006eec <HAL_DMA_Abort+0x238>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d045      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a2d      	ldr	r2, [pc, #180]	; (8006ef0 <HAL_DMA_Abort+0x23c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d040      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <HAL_DMA_Abort+0x240>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d03b      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <HAL_DMA_Abort+0x244>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d036      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a28      	ldr	r2, [pc, #160]	; (8006efc <HAL_DMA_Abort+0x248>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d031      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a27      	ldr	r2, [pc, #156]	; (8006f00 <HAL_DMA_Abort+0x24c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d02c      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <HAL_DMA_Abort+0x250>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d027      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a24      	ldr	r2, [pc, #144]	; (8006f08 <HAL_DMA_Abort+0x254>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a22      	ldr	r2, [pc, #136]	; (8006f0c <HAL_DMA_Abort+0x258>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d01d      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <HAL_DMA_Abort+0x25c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <HAL_DMA_Abort+0x260>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <HAL_DMA_Abort+0x264>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <HAL_DMA_Abort+0x268>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <HAL_DMA_Abort+0x26c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_DMA_Abort+0x20e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <HAL_DMA_Abort+0x270>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d132      	bne.n	8006f28 <HAL_DMA_Abort+0x274>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e031      	b.n	8006f2a <HAL_DMA_Abort+0x276>
 8006ec6:	bf00      	nop
 8006ec8:	40020010 	.word	0x40020010
 8006ecc:	40020028 	.word	0x40020028
 8006ed0:	40020040 	.word	0x40020040
 8006ed4:	40020058 	.word	0x40020058
 8006ed8:	40020070 	.word	0x40020070
 8006edc:	40020088 	.word	0x40020088
 8006ee0:	400200a0 	.word	0x400200a0
 8006ee4:	400200b8 	.word	0x400200b8
 8006ee8:	40020410 	.word	0x40020410
 8006eec:	40020428 	.word	0x40020428
 8006ef0:	40020440 	.word	0x40020440
 8006ef4:	40020458 	.word	0x40020458
 8006ef8:	40020470 	.word	0x40020470
 8006efc:	40020488 	.word	0x40020488
 8006f00:	400204a0 	.word	0x400204a0
 8006f04:	400204b8 	.word	0x400204b8
 8006f08:	58025408 	.word	0x58025408
 8006f0c:	5802541c 	.word	0x5802541c
 8006f10:	58025430 	.word	0x58025430
 8006f14:	58025444 	.word	0x58025444
 8006f18:	58025458 	.word	0x58025458
 8006f1c:	5802546c 	.word	0x5802546c
 8006f20:	58025480 	.word	0x58025480
 8006f24:	58025494 	.word	0x58025494
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a6d      	ldr	r2, [pc, #436]	; (80070f8 <HAL_DMA_Abort+0x444>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d04a      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a6b      	ldr	r2, [pc, #428]	; (80070fc <HAL_DMA_Abort+0x448>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d045      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a6a      	ldr	r2, [pc, #424]	; (8007100 <HAL_DMA_Abort+0x44c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d040      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a68      	ldr	r2, [pc, #416]	; (8007104 <HAL_DMA_Abort+0x450>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d03b      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a67      	ldr	r2, [pc, #412]	; (8007108 <HAL_DMA_Abort+0x454>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d036      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a65      	ldr	r2, [pc, #404]	; (800710c <HAL_DMA_Abort+0x458>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d031      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a64      	ldr	r2, [pc, #400]	; (8007110 <HAL_DMA_Abort+0x45c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d02c      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a62      	ldr	r2, [pc, #392]	; (8007114 <HAL_DMA_Abort+0x460>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d027      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a61      	ldr	r2, [pc, #388]	; (8007118 <HAL_DMA_Abort+0x464>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d022      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a5f      	ldr	r2, [pc, #380]	; (800711c <HAL_DMA_Abort+0x468>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01d      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a5e      	ldr	r2, [pc, #376]	; (8007120 <HAL_DMA_Abort+0x46c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d018      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a5c      	ldr	r2, [pc, #368]	; (8007124 <HAL_DMA_Abort+0x470>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a5b      	ldr	r2, [pc, #364]	; (8007128 <HAL_DMA_Abort+0x474>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00e      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a59      	ldr	r2, [pc, #356]	; (800712c <HAL_DMA_Abort+0x478>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d009      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a58      	ldr	r2, [pc, #352]	; (8007130 <HAL_DMA_Abort+0x47c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d004      	beq.n	8006fde <HAL_DMA_Abort+0x32a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a56      	ldr	r2, [pc, #344]	; (8007134 <HAL_DMA_Abort+0x480>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d108      	bne.n	8006ff0 <HAL_DMA_Abort+0x33c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e007      	b.n	8007000 <HAL_DMA_Abort+0x34c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007000:	e013      	b.n	800702a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007002:	f7fc ff69 	bl	8003ed8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b05      	cmp	r3, #5
 800700e:	d90c      	bls.n	800702a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2203      	movs	r2, #3
 800701a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e12d      	b.n	8007286 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e5      	bne.n	8007002 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2f      	ldr	r2, [pc, #188]	; (80070f8 <HAL_DMA_Abort+0x444>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d04a      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2d      	ldr	r2, [pc, #180]	; (80070fc <HAL_DMA_Abort+0x448>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d045      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2c      	ldr	r2, [pc, #176]	; (8007100 <HAL_DMA_Abort+0x44c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d040      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2a      	ldr	r2, [pc, #168]	; (8007104 <HAL_DMA_Abort+0x450>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d03b      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a29      	ldr	r2, [pc, #164]	; (8007108 <HAL_DMA_Abort+0x454>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d036      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a27      	ldr	r2, [pc, #156]	; (800710c <HAL_DMA_Abort+0x458>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d031      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a26      	ldr	r2, [pc, #152]	; (8007110 <HAL_DMA_Abort+0x45c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d02c      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a24      	ldr	r2, [pc, #144]	; (8007114 <HAL_DMA_Abort+0x460>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d027      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a23      	ldr	r2, [pc, #140]	; (8007118 <HAL_DMA_Abort+0x464>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d022      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a21      	ldr	r2, [pc, #132]	; (800711c <HAL_DMA_Abort+0x468>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01d      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a20      	ldr	r2, [pc, #128]	; (8007120 <HAL_DMA_Abort+0x46c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d018      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1e      	ldr	r2, [pc, #120]	; (8007124 <HAL_DMA_Abort+0x470>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <HAL_DMA_Abort+0x474>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1b      	ldr	r2, [pc, #108]	; (800712c <HAL_DMA_Abort+0x478>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1a      	ldr	r2, [pc, #104]	; (8007130 <HAL_DMA_Abort+0x47c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_DMA_Abort+0x422>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a18      	ldr	r2, [pc, #96]	; (8007134 <HAL_DMA_Abort+0x480>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d101      	bne.n	80070da <HAL_DMA_Abort+0x426>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <HAL_DMA_Abort+0x428>
 80070da:	2300      	movs	r3, #0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02b      	beq.n	8007138 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	223f      	movs	r2, #63	; 0x3f
 80070f0:	409a      	lsls	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	609a      	str	r2, [r3, #8]
 80070f6:	e02a      	b.n	800714e <HAL_DMA_Abort+0x49a>
 80070f8:	40020010 	.word	0x40020010
 80070fc:	40020028 	.word	0x40020028
 8007100:	40020040 	.word	0x40020040
 8007104:	40020058 	.word	0x40020058
 8007108:	40020070 	.word	0x40020070
 800710c:	40020088 	.word	0x40020088
 8007110:	400200a0 	.word	0x400200a0
 8007114:	400200b8 	.word	0x400200b8
 8007118:	40020410 	.word	0x40020410
 800711c:	40020428 	.word	0x40020428
 8007120:	40020440 	.word	0x40020440
 8007124:	40020458 	.word	0x40020458
 8007128:	40020470 	.word	0x40020470
 800712c:	40020488 	.word	0x40020488
 8007130:	400204a0 	.word	0x400204a0
 8007134:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2201      	movs	r2, #1
 8007148:	409a      	lsls	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a4f      	ldr	r2, [pc, #316]	; (8007290 <HAL_DMA_Abort+0x5dc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d072      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a4d      	ldr	r2, [pc, #308]	; (8007294 <HAL_DMA_Abort+0x5e0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d06d      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a4c      	ldr	r2, [pc, #304]	; (8007298 <HAL_DMA_Abort+0x5e4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d068      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a4a      	ldr	r2, [pc, #296]	; (800729c <HAL_DMA_Abort+0x5e8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d063      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a49      	ldr	r2, [pc, #292]	; (80072a0 <HAL_DMA_Abort+0x5ec>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d05e      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a47      	ldr	r2, [pc, #284]	; (80072a4 <HAL_DMA_Abort+0x5f0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d059      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a46      	ldr	r2, [pc, #280]	; (80072a8 <HAL_DMA_Abort+0x5f4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d054      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a44      	ldr	r2, [pc, #272]	; (80072ac <HAL_DMA_Abort+0x5f8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04f      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a43      	ldr	r2, [pc, #268]	; (80072b0 <HAL_DMA_Abort+0x5fc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d04a      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a41      	ldr	r2, [pc, #260]	; (80072b4 <HAL_DMA_Abort+0x600>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d045      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a40      	ldr	r2, [pc, #256]	; (80072b8 <HAL_DMA_Abort+0x604>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d040      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a3e      	ldr	r2, [pc, #248]	; (80072bc <HAL_DMA_Abort+0x608>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d03b      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3d      	ldr	r2, [pc, #244]	; (80072c0 <HAL_DMA_Abort+0x60c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d036      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a3b      	ldr	r2, [pc, #236]	; (80072c4 <HAL_DMA_Abort+0x610>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d031      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3a      	ldr	r2, [pc, #232]	; (80072c8 <HAL_DMA_Abort+0x614>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d02c      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a38      	ldr	r2, [pc, #224]	; (80072cc <HAL_DMA_Abort+0x618>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d027      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a37      	ldr	r2, [pc, #220]	; (80072d0 <HAL_DMA_Abort+0x61c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d022      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a35      	ldr	r2, [pc, #212]	; (80072d4 <HAL_DMA_Abort+0x620>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01d      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a34      	ldr	r2, [pc, #208]	; (80072d8 <HAL_DMA_Abort+0x624>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d018      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a32      	ldr	r2, [pc, #200]	; (80072dc <HAL_DMA_Abort+0x628>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a31      	ldr	r2, [pc, #196]	; (80072e0 <HAL_DMA_Abort+0x62c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <HAL_DMA_Abort+0x630>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <HAL_DMA_Abort+0x634>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_DMA_Abort+0x58a>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <HAL_DMA_Abort+0x638>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_DMA_Abort+0x58e>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <HAL_DMA_Abort+0x590>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d015      	beq.n	8007274 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007250:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007268:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007272:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	58025408 	.word	0x58025408
 80072d4:	5802541c 	.word	0x5802541c
 80072d8:	58025430 	.word	0x58025430
 80072dc:	58025444 	.word	0x58025444
 80072e0:	58025458 	.word	0x58025458
 80072e4:	5802546c 	.word	0x5802546c
 80072e8:	58025480 	.word	0x58025480
 80072ec:	58025494 	.word	0x58025494

080072f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e237      	b.n	8007772 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d004      	beq.n	8007318 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2280      	movs	r2, #128	; 0x80
 8007312:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e22c      	b.n	8007772 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5c      	ldr	r2, [pc, #368]	; (8007490 <HAL_DMA_Abort_IT+0x1a0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d04a      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5b      	ldr	r2, [pc, #364]	; (8007494 <HAL_DMA_Abort_IT+0x1a4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d045      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a59      	ldr	r2, [pc, #356]	; (8007498 <HAL_DMA_Abort_IT+0x1a8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d040      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a58      	ldr	r2, [pc, #352]	; (800749c <HAL_DMA_Abort_IT+0x1ac>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d03b      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a56      	ldr	r2, [pc, #344]	; (80074a0 <HAL_DMA_Abort_IT+0x1b0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d036      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a55      	ldr	r2, [pc, #340]	; (80074a4 <HAL_DMA_Abort_IT+0x1b4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d031      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a53      	ldr	r2, [pc, #332]	; (80074a8 <HAL_DMA_Abort_IT+0x1b8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d02c      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a52      	ldr	r2, [pc, #328]	; (80074ac <HAL_DMA_Abort_IT+0x1bc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d027      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a50      	ldr	r2, [pc, #320]	; (80074b0 <HAL_DMA_Abort_IT+0x1c0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d022      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a4f      	ldr	r2, [pc, #316]	; (80074b4 <HAL_DMA_Abort_IT+0x1c4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d01d      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a4d      	ldr	r2, [pc, #308]	; (80074b8 <HAL_DMA_Abort_IT+0x1c8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d018      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a4c      	ldr	r2, [pc, #304]	; (80074bc <HAL_DMA_Abort_IT+0x1cc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a4a      	ldr	r2, [pc, #296]	; (80074c0 <HAL_DMA_Abort_IT+0x1d0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00e      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a49      	ldr	r2, [pc, #292]	; (80074c4 <HAL_DMA_Abort_IT+0x1d4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d009      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a47      	ldr	r2, [pc, #284]	; (80074c8 <HAL_DMA_Abort_IT+0x1d8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_DMA_Abort_IT+0xc8>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a46      	ldr	r2, [pc, #280]	; (80074cc <HAL_DMA_Abort_IT+0x1dc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d101      	bne.n	80073bc <HAL_DMA_Abort_IT+0xcc>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <HAL_DMA_Abort_IT+0xce>
 80073bc:	2300      	movs	r3, #0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8086 	beq.w	80074d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2204      	movs	r2, #4
 80073c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a2f      	ldr	r2, [pc, #188]	; (8007490 <HAL_DMA_Abort_IT+0x1a0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d04a      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a2e      	ldr	r2, [pc, #184]	; (8007494 <HAL_DMA_Abort_IT+0x1a4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d045      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a2c      	ldr	r2, [pc, #176]	; (8007498 <HAL_DMA_Abort_IT+0x1a8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d040      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a2b      	ldr	r2, [pc, #172]	; (800749c <HAL_DMA_Abort_IT+0x1ac>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d03b      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <HAL_DMA_Abort_IT+0x1b0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d036      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <HAL_DMA_Abort_IT+0x1b4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d031      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <HAL_DMA_Abort_IT+0x1b8>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d02c      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a25      	ldr	r2, [pc, #148]	; (80074ac <HAL_DMA_Abort_IT+0x1bc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d027      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a23      	ldr	r2, [pc, #140]	; (80074b0 <HAL_DMA_Abort_IT+0x1c0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d022      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a22      	ldr	r2, [pc, #136]	; (80074b4 <HAL_DMA_Abort_IT+0x1c4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d01d      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <HAL_DMA_Abort_IT+0x1c8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d018      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <HAL_DMA_Abort_IT+0x1cc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d013      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <HAL_DMA_Abort_IT+0x1d0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00e      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <HAL_DMA_Abort_IT+0x1d4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <HAL_DMA_Abort_IT+0x1d8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <HAL_DMA_Abort_IT+0x17c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a19      	ldr	r2, [pc, #100]	; (80074cc <HAL_DMA_Abort_IT+0x1dc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d108      	bne.n	800747e <HAL_DMA_Abort_IT+0x18e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e178      	b.n	8007770 <HAL_DMA_Abort_IT+0x480>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e16f      	b.n	8007770 <HAL_DMA_Abort_IT+0x480>
 8007490:	40020010 	.word	0x40020010
 8007494:	40020028 	.word	0x40020028
 8007498:	40020040 	.word	0x40020040
 800749c:	40020058 	.word	0x40020058
 80074a0:	40020070 	.word	0x40020070
 80074a4:	40020088 	.word	0x40020088
 80074a8:	400200a0 	.word	0x400200a0
 80074ac:	400200b8 	.word	0x400200b8
 80074b0:	40020410 	.word	0x40020410
 80074b4:	40020428 	.word	0x40020428
 80074b8:	40020440 	.word	0x40020440
 80074bc:	40020458 	.word	0x40020458
 80074c0:	40020470 	.word	0x40020470
 80074c4:	40020488 	.word	0x40020488
 80074c8:	400204a0 	.word	0x400204a0
 80074cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 020e 	bic.w	r2, r2, #14
 80074de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a6c      	ldr	r2, [pc, #432]	; (8007698 <HAL_DMA_Abort_IT+0x3a8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d04a      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a6b      	ldr	r2, [pc, #428]	; (800769c <HAL_DMA_Abort_IT+0x3ac>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d045      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a69      	ldr	r2, [pc, #420]	; (80076a0 <HAL_DMA_Abort_IT+0x3b0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d040      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a68      	ldr	r2, [pc, #416]	; (80076a4 <HAL_DMA_Abort_IT+0x3b4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d03b      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a66      	ldr	r2, [pc, #408]	; (80076a8 <HAL_DMA_Abort_IT+0x3b8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d036      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a65      	ldr	r2, [pc, #404]	; (80076ac <HAL_DMA_Abort_IT+0x3bc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d031      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a63      	ldr	r2, [pc, #396]	; (80076b0 <HAL_DMA_Abort_IT+0x3c0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d02c      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a62      	ldr	r2, [pc, #392]	; (80076b4 <HAL_DMA_Abort_IT+0x3c4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d027      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a60      	ldr	r2, [pc, #384]	; (80076b8 <HAL_DMA_Abort_IT+0x3c8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d022      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a5f      	ldr	r2, [pc, #380]	; (80076bc <HAL_DMA_Abort_IT+0x3cc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d01d      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a5d      	ldr	r2, [pc, #372]	; (80076c0 <HAL_DMA_Abort_IT+0x3d0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d018      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a5c      	ldr	r2, [pc, #368]	; (80076c4 <HAL_DMA_Abort_IT+0x3d4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d013      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a5a      	ldr	r2, [pc, #360]	; (80076c8 <HAL_DMA_Abort_IT+0x3d8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00e      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a59      	ldr	r2, [pc, #356]	; (80076cc <HAL_DMA_Abort_IT+0x3dc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d009      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a57      	ldr	r2, [pc, #348]	; (80076d0 <HAL_DMA_Abort_IT+0x3e0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <HAL_DMA_Abort_IT+0x290>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a56      	ldr	r2, [pc, #344]	; (80076d4 <HAL_DMA_Abort_IT+0x3e4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d108      	bne.n	8007592 <HAL_DMA_Abort_IT+0x2a2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	e007      	b.n	80075a2 <HAL_DMA_Abort_IT+0x2b2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a3c      	ldr	r2, [pc, #240]	; (8007698 <HAL_DMA_Abort_IT+0x3a8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d072      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a3a      	ldr	r2, [pc, #232]	; (800769c <HAL_DMA_Abort_IT+0x3ac>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d06d      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a39      	ldr	r2, [pc, #228]	; (80076a0 <HAL_DMA_Abort_IT+0x3b0>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d068      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a37      	ldr	r2, [pc, #220]	; (80076a4 <HAL_DMA_Abort_IT+0x3b4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d063      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a36      	ldr	r2, [pc, #216]	; (80076a8 <HAL_DMA_Abort_IT+0x3b8>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d05e      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a34      	ldr	r2, [pc, #208]	; (80076ac <HAL_DMA_Abort_IT+0x3bc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d059      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a33      	ldr	r2, [pc, #204]	; (80076b0 <HAL_DMA_Abort_IT+0x3c0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d054      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a31      	ldr	r2, [pc, #196]	; (80076b4 <HAL_DMA_Abort_IT+0x3c4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d04f      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a30      	ldr	r2, [pc, #192]	; (80076b8 <HAL_DMA_Abort_IT+0x3c8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d04a      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a2e      	ldr	r2, [pc, #184]	; (80076bc <HAL_DMA_Abort_IT+0x3cc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d045      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a2d      	ldr	r2, [pc, #180]	; (80076c0 <HAL_DMA_Abort_IT+0x3d0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d040      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a2b      	ldr	r2, [pc, #172]	; (80076c4 <HAL_DMA_Abort_IT+0x3d4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d03b      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2a      	ldr	r2, [pc, #168]	; (80076c8 <HAL_DMA_Abort_IT+0x3d8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d036      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a28      	ldr	r2, [pc, #160]	; (80076cc <HAL_DMA_Abort_IT+0x3dc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d031      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a27      	ldr	r2, [pc, #156]	; (80076d0 <HAL_DMA_Abort_IT+0x3e0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d02c      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a25      	ldr	r2, [pc, #148]	; (80076d4 <HAL_DMA_Abort_IT+0x3e4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d027      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a24      	ldr	r2, [pc, #144]	; (80076d8 <HAL_DMA_Abort_IT+0x3e8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d022      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a22      	ldr	r2, [pc, #136]	; (80076dc <HAL_DMA_Abort_IT+0x3ec>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d01d      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a21      	ldr	r2, [pc, #132]	; (80076e0 <HAL_DMA_Abort_IT+0x3f0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d018      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1f      	ldr	r2, [pc, #124]	; (80076e4 <HAL_DMA_Abort_IT+0x3f4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d013      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1e      	ldr	r2, [pc, #120]	; (80076e8 <HAL_DMA_Abort_IT+0x3f8>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1c      	ldr	r2, [pc, #112]	; (80076ec <HAL_DMA_Abort_IT+0x3fc>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <HAL_DMA_Abort_IT+0x400>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_DMA_Abort_IT+0x3a2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a19      	ldr	r2, [pc, #100]	; (80076f4 <HAL_DMA_Abort_IT+0x404>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d132      	bne.n	80076f8 <HAL_DMA_Abort_IT+0x408>
 8007692:	2301      	movs	r3, #1
 8007694:	e031      	b.n	80076fa <HAL_DMA_Abort_IT+0x40a>
 8007696:	bf00      	nop
 8007698:	40020010 	.word	0x40020010
 800769c:	40020028 	.word	0x40020028
 80076a0:	40020040 	.word	0x40020040
 80076a4:	40020058 	.word	0x40020058
 80076a8:	40020070 	.word	0x40020070
 80076ac:	40020088 	.word	0x40020088
 80076b0:	400200a0 	.word	0x400200a0
 80076b4:	400200b8 	.word	0x400200b8
 80076b8:	40020410 	.word	0x40020410
 80076bc:	40020428 	.word	0x40020428
 80076c0:	40020440 	.word	0x40020440
 80076c4:	40020458 	.word	0x40020458
 80076c8:	40020470 	.word	0x40020470
 80076cc:	40020488 	.word	0x40020488
 80076d0:	400204a0 	.word	0x400204a0
 80076d4:	400204b8 	.word	0x400204b8
 80076d8:	58025408 	.word	0x58025408
 80076dc:	5802541c 	.word	0x5802541c
 80076e0:	58025430 	.word	0x58025430
 80076e4:	58025444 	.word	0x58025444
 80076e8:	58025458 	.word	0x58025458
 80076ec:	5802546c 	.word	0x5802546c
 80076f0:	58025480 	.word	0x58025480
 80076f4:	58025494 	.word	0x58025494
 80076f8:	2300      	movs	r3, #0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d028      	beq.n	8007750 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800770c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007712:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	2201      	movs	r2, #1
 800771e:	409a      	lsls	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800772c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007744:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800774e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop

0800777c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007788:	4b67      	ldr	r3, [pc, #412]	; (8007928 <HAL_DMA_IRQHandler+0x1ac>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a67      	ldr	r2, [pc, #412]	; (800792c <HAL_DMA_IRQHandler+0x1b0>)
 800778e:	fba2 2303 	umull	r2, r3, r2, r3
 8007792:	0a9b      	lsrs	r3, r3, #10
 8007794:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a5f      	ldr	r2, [pc, #380]	; (8007930 <HAL_DMA_IRQHandler+0x1b4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d04a      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a5d      	ldr	r2, [pc, #372]	; (8007934 <HAL_DMA_IRQHandler+0x1b8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d045      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a5c      	ldr	r2, [pc, #368]	; (8007938 <HAL_DMA_IRQHandler+0x1bc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d040      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a5a      	ldr	r2, [pc, #360]	; (800793c <HAL_DMA_IRQHandler+0x1c0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d03b      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a59      	ldr	r2, [pc, #356]	; (8007940 <HAL_DMA_IRQHandler+0x1c4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d036      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a57      	ldr	r2, [pc, #348]	; (8007944 <HAL_DMA_IRQHandler+0x1c8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d031      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a56      	ldr	r2, [pc, #344]	; (8007948 <HAL_DMA_IRQHandler+0x1cc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d02c      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a54      	ldr	r2, [pc, #336]	; (800794c <HAL_DMA_IRQHandler+0x1d0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d027      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a53      	ldr	r2, [pc, #332]	; (8007950 <HAL_DMA_IRQHandler+0x1d4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d022      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a51      	ldr	r2, [pc, #324]	; (8007954 <HAL_DMA_IRQHandler+0x1d8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d01d      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a50      	ldr	r2, [pc, #320]	; (8007958 <HAL_DMA_IRQHandler+0x1dc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d018      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a4e      	ldr	r2, [pc, #312]	; (800795c <HAL_DMA_IRQHandler+0x1e0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d013      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a4d      	ldr	r2, [pc, #308]	; (8007960 <HAL_DMA_IRQHandler+0x1e4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00e      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a4b      	ldr	r2, [pc, #300]	; (8007964 <HAL_DMA_IRQHandler+0x1e8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d009      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a4a      	ldr	r2, [pc, #296]	; (8007968 <HAL_DMA_IRQHandler+0x1ec>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d004      	beq.n	800784e <HAL_DMA_IRQHandler+0xd2>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a48      	ldr	r2, [pc, #288]	; (800796c <HAL_DMA_IRQHandler+0x1f0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d101      	bne.n	8007852 <HAL_DMA_IRQHandler+0xd6>
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <HAL_DMA_IRQHandler+0xd8>
 8007852:	2300      	movs	r3, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 842b 	beq.w	80080b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2208      	movs	r2, #8
 8007864:	409a      	lsls	r2, r3
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	4013      	ands	r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80a2 	beq.w	80079b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2e      	ldr	r2, [pc, #184]	; (8007930 <HAL_DMA_IRQHandler+0x1b4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d04a      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <HAL_DMA_IRQHandler+0x1b8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d045      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a2b      	ldr	r2, [pc, #172]	; (8007938 <HAL_DMA_IRQHandler+0x1bc>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d040      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a2a      	ldr	r2, [pc, #168]	; (800793c <HAL_DMA_IRQHandler+0x1c0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d03b      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a28      	ldr	r2, [pc, #160]	; (8007940 <HAL_DMA_IRQHandler+0x1c4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d036      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a27      	ldr	r2, [pc, #156]	; (8007944 <HAL_DMA_IRQHandler+0x1c8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d031      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a25      	ldr	r2, [pc, #148]	; (8007948 <HAL_DMA_IRQHandler+0x1cc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02c      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a24      	ldr	r2, [pc, #144]	; (800794c <HAL_DMA_IRQHandler+0x1d0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d027      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a22      	ldr	r2, [pc, #136]	; (8007950 <HAL_DMA_IRQHandler+0x1d4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a21      	ldr	r2, [pc, #132]	; (8007954 <HAL_DMA_IRQHandler+0x1d8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <HAL_DMA_IRQHandler+0x1dc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1e      	ldr	r2, [pc, #120]	; (800795c <HAL_DMA_IRQHandler+0x1e0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <HAL_DMA_IRQHandler+0x1e4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <HAL_DMA_IRQHandler+0x1e8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a19      	ldr	r2, [pc, #100]	; (8007968 <HAL_DMA_IRQHandler+0x1ec>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_DMA_IRQHandler+0x194>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a18      	ldr	r2, [pc, #96]	; (800796c <HAL_DMA_IRQHandler+0x1f0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d12f      	bne.n	8007970 <HAL_DMA_IRQHandler+0x1f4>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf14      	ite	ne
 800791e:	2301      	movne	r3, #1
 8007920:	2300      	moveq	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	e02e      	b.n	8007984 <HAL_DMA_IRQHandler+0x208>
 8007926:	bf00      	nop
 8007928:	2400008c 	.word	0x2400008c
 800792c:	1b4e81b5 	.word	0x1b4e81b5
 8007930:	40020010 	.word	0x40020010
 8007934:	40020028 	.word	0x40020028
 8007938:	40020040 	.word	0x40020040
 800793c:	40020058 	.word	0x40020058
 8007940:	40020070 	.word	0x40020070
 8007944:	40020088 	.word	0x40020088
 8007948:	400200a0 	.word	0x400200a0
 800794c:	400200b8 	.word	0x400200b8
 8007950:	40020410 	.word	0x40020410
 8007954:	40020428 	.word	0x40020428
 8007958:	40020440 	.word	0x40020440
 800795c:	40020458 	.word	0x40020458
 8007960:	40020470 	.word	0x40020470
 8007964:	40020488 	.word	0x40020488
 8007968:	400204a0 	.word	0x400204a0
 800796c:	400204b8 	.word	0x400204b8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf14      	ite	ne
 800797e:	2301      	movne	r3, #1
 8007980:	2300      	moveq	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d015      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0204 	bic.w	r2, r2, #4
 8007996:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	2208      	movs	r2, #8
 80079a2:	409a      	lsls	r2, r3
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ac:	f043 0201 	orr.w	r2, r3, #1
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	fa22 f303 	lsr.w	r3, r2, r3
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d06e      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a69      	ldr	r2, [pc, #420]	; (8007b74 <HAL_DMA_IRQHandler+0x3f8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d04a      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a67      	ldr	r2, [pc, #412]	; (8007b78 <HAL_DMA_IRQHandler+0x3fc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d045      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a66      	ldr	r2, [pc, #408]	; (8007b7c <HAL_DMA_IRQHandler+0x400>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d040      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a64      	ldr	r2, [pc, #400]	; (8007b80 <HAL_DMA_IRQHandler+0x404>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d03b      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a63      	ldr	r2, [pc, #396]	; (8007b84 <HAL_DMA_IRQHandler+0x408>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d036      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a61      	ldr	r2, [pc, #388]	; (8007b88 <HAL_DMA_IRQHandler+0x40c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d031      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a60      	ldr	r2, [pc, #384]	; (8007b8c <HAL_DMA_IRQHandler+0x410>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d02c      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a5e      	ldr	r2, [pc, #376]	; (8007b90 <HAL_DMA_IRQHandler+0x414>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d027      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a5d      	ldr	r2, [pc, #372]	; (8007b94 <HAL_DMA_IRQHandler+0x418>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d022      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a5b      	ldr	r2, [pc, #364]	; (8007b98 <HAL_DMA_IRQHandler+0x41c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01d      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a5a      	ldr	r2, [pc, #360]	; (8007b9c <HAL_DMA_IRQHandler+0x420>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d018      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a58      	ldr	r2, [pc, #352]	; (8007ba0 <HAL_DMA_IRQHandler+0x424>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d013      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a57      	ldr	r2, [pc, #348]	; (8007ba4 <HAL_DMA_IRQHandler+0x428>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00e      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a55      	ldr	r2, [pc, #340]	; (8007ba8 <HAL_DMA_IRQHandler+0x42c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d009      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a54      	ldr	r2, [pc, #336]	; (8007bac <HAL_DMA_IRQHandler+0x430>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2ee>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a52      	ldr	r2, [pc, #328]	; (8007bb0 <HAL_DMA_IRQHandler+0x434>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d10a      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x304>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bf14      	ite	ne
 8007a78:	2301      	movne	r3, #1
 8007a7a:	2300      	moveq	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	e003      	b.n	8007a88 <HAL_DMA_IRQHandler+0x30c>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	2201      	movs	r2, #1
 8007a96:	409a      	lsls	r2, r3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa0:	f043 0202 	orr.w	r2, r3, #2
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	2204      	movs	r2, #4
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 808f 	beq.w	8007bdc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a2c      	ldr	r2, [pc, #176]	; (8007b74 <HAL_DMA_IRQHandler+0x3f8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d04a      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2a      	ldr	r2, [pc, #168]	; (8007b78 <HAL_DMA_IRQHandler+0x3fc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d045      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a29      	ldr	r2, [pc, #164]	; (8007b7c <HAL_DMA_IRQHandler+0x400>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d040      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a27      	ldr	r2, [pc, #156]	; (8007b80 <HAL_DMA_IRQHandler+0x404>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d03b      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a26      	ldr	r2, [pc, #152]	; (8007b84 <HAL_DMA_IRQHandler+0x408>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d036      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a24      	ldr	r2, [pc, #144]	; (8007b88 <HAL_DMA_IRQHandler+0x40c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d031      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a23      	ldr	r2, [pc, #140]	; (8007b8c <HAL_DMA_IRQHandler+0x410>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d02c      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a21      	ldr	r2, [pc, #132]	; (8007b90 <HAL_DMA_IRQHandler+0x414>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d027      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a20      	ldr	r2, [pc, #128]	; (8007b94 <HAL_DMA_IRQHandler+0x418>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a1e      	ldr	r2, [pc, #120]	; (8007b98 <HAL_DMA_IRQHandler+0x41c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01d      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <HAL_DMA_IRQHandler+0x420>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_DMA_IRQHandler+0x424>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <HAL_DMA_IRQHandler+0x428>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a18      	ldr	r2, [pc, #96]	; (8007ba8 <HAL_DMA_IRQHandler+0x42c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a17      	ldr	r2, [pc, #92]	; (8007bac <HAL_DMA_IRQHandler+0x430>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x3e2>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <HAL_DMA_IRQHandler+0x434>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d12a      	bne.n	8007bb4 <HAL_DMA_IRQHandler+0x438>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bf14      	ite	ne
 8007b6c:	2301      	movne	r3, #1
 8007b6e:	2300      	moveq	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e023      	b.n	8007bbc <HAL_DMA_IRQHandler+0x440>
 8007b74:	40020010 	.word	0x40020010
 8007b78:	40020028 	.word	0x40020028
 8007b7c:	40020040 	.word	0x40020040
 8007b80:	40020058 	.word	0x40020058
 8007b84:	40020070 	.word	0x40020070
 8007b88:	40020088 	.word	0x40020088
 8007b8c:	400200a0 	.word	0x400200a0
 8007b90:	400200b8 	.word	0x400200b8
 8007b94:	40020410 	.word	0x40020410
 8007b98:	40020428 	.word	0x40020428
 8007b9c:	40020440 	.word	0x40020440
 8007ba0:	40020458 	.word	0x40020458
 8007ba4:	40020470 	.word	0x40020470
 8007ba8:	40020488 	.word	0x40020488
 8007bac:	400204a0 	.word	0x400204a0
 8007bb0:	400204b8 	.word	0x400204b8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00d      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc4:	f003 031f 	and.w	r3, r3, #31
 8007bc8:	2204      	movs	r2, #4
 8007bca:	409a      	lsls	r2, r3
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd4:	f043 0204 	orr.w	r2, r3, #4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	2210      	movs	r2, #16
 8007be6:	409a      	lsls	r2, r3
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80a6 	beq.w	8007d3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a85      	ldr	r2, [pc, #532]	; (8007e0c <HAL_DMA_IRQHandler+0x690>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d04a      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a83      	ldr	r2, [pc, #524]	; (8007e10 <HAL_DMA_IRQHandler+0x694>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d045      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a82      	ldr	r2, [pc, #520]	; (8007e14 <HAL_DMA_IRQHandler+0x698>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d040      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a80      	ldr	r2, [pc, #512]	; (8007e18 <HAL_DMA_IRQHandler+0x69c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d03b      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a7f      	ldr	r2, [pc, #508]	; (8007e1c <HAL_DMA_IRQHandler+0x6a0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d036      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a7d      	ldr	r2, [pc, #500]	; (8007e20 <HAL_DMA_IRQHandler+0x6a4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d031      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a7c      	ldr	r2, [pc, #496]	; (8007e24 <HAL_DMA_IRQHandler+0x6a8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d02c      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a7a      	ldr	r2, [pc, #488]	; (8007e28 <HAL_DMA_IRQHandler+0x6ac>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d027      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a79      	ldr	r2, [pc, #484]	; (8007e2c <HAL_DMA_IRQHandler+0x6b0>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d022      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a77      	ldr	r2, [pc, #476]	; (8007e30 <HAL_DMA_IRQHandler+0x6b4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01d      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a76      	ldr	r2, [pc, #472]	; (8007e34 <HAL_DMA_IRQHandler+0x6b8>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d018      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a74      	ldr	r2, [pc, #464]	; (8007e38 <HAL_DMA_IRQHandler+0x6bc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a73      	ldr	r2, [pc, #460]	; (8007e3c <HAL_DMA_IRQHandler+0x6c0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a71      	ldr	r2, [pc, #452]	; (8007e40 <HAL_DMA_IRQHandler+0x6c4>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d009      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a70      	ldr	r2, [pc, #448]	; (8007e44 <HAL_DMA_IRQHandler+0x6c8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_DMA_IRQHandler+0x516>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a6e      	ldr	r2, [pc, #440]	; (8007e48 <HAL_DMA_IRQHandler+0x6cc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d10a      	bne.n	8007ca8 <HAL_DMA_IRQHandler+0x52c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf14      	ite	ne
 8007ca0:	2301      	movne	r3, #1
 8007ca2:	2300      	moveq	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e009      	b.n	8007cbc <HAL_DMA_IRQHandler+0x540>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bf14      	ite	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	2300      	moveq	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d03e      	beq.n	8007d3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc4:	f003 031f 	and.w	r3, r3, #31
 8007cc8:	2210      	movs	r2, #16
 8007cca:	409a      	lsls	r2, r3
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d018      	beq.n	8007d10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d108      	bne.n	8007cfe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d024      	beq.n	8007d3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
 8007cfc:	e01f      	b.n	8007d3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01b      	beq.n	8007d3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
 8007d0e:	e016      	b.n	8007d3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d107      	bne.n	8007d2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0208 	bic.w	r2, r2, #8
 8007d2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2220      	movs	r2, #32
 8007d48:	409a      	lsls	r2, r3
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 8110 	beq.w	8007f74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a2c      	ldr	r2, [pc, #176]	; (8007e0c <HAL_DMA_IRQHandler+0x690>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d04a      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a2b      	ldr	r2, [pc, #172]	; (8007e10 <HAL_DMA_IRQHandler+0x694>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d045      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a29      	ldr	r2, [pc, #164]	; (8007e14 <HAL_DMA_IRQHandler+0x698>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d040      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a28      	ldr	r2, [pc, #160]	; (8007e18 <HAL_DMA_IRQHandler+0x69c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d03b      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a26      	ldr	r2, [pc, #152]	; (8007e1c <HAL_DMA_IRQHandler+0x6a0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d036      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a25      	ldr	r2, [pc, #148]	; (8007e20 <HAL_DMA_IRQHandler+0x6a4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d031      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a23      	ldr	r2, [pc, #140]	; (8007e24 <HAL_DMA_IRQHandler+0x6a8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d02c      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a22      	ldr	r2, [pc, #136]	; (8007e28 <HAL_DMA_IRQHandler+0x6ac>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d027      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a20      	ldr	r2, [pc, #128]	; (8007e2c <HAL_DMA_IRQHandler+0x6b0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d022      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1f      	ldr	r2, [pc, #124]	; (8007e30 <HAL_DMA_IRQHandler+0x6b4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d01d      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <HAL_DMA_IRQHandler+0x6b8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d018      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1c      	ldr	r2, [pc, #112]	; (8007e38 <HAL_DMA_IRQHandler+0x6bc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d013      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a1a      	ldr	r2, [pc, #104]	; (8007e3c <HAL_DMA_IRQHandler+0x6c0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00e      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a19      	ldr	r2, [pc, #100]	; (8007e40 <HAL_DMA_IRQHandler+0x6c4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d009      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a17      	ldr	r2, [pc, #92]	; (8007e44 <HAL_DMA_IRQHandler+0x6c8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x678>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a16      	ldr	r2, [pc, #88]	; (8007e48 <HAL_DMA_IRQHandler+0x6cc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d12b      	bne.n	8007e4c <HAL_DMA_IRQHandler+0x6d0>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bf14      	ite	ne
 8007e02:	2301      	movne	r3, #1
 8007e04:	2300      	moveq	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	e02a      	b.n	8007e60 <HAL_DMA_IRQHandler+0x6e4>
 8007e0a:	bf00      	nop
 8007e0c:	40020010 	.word	0x40020010
 8007e10:	40020028 	.word	0x40020028
 8007e14:	40020040 	.word	0x40020040
 8007e18:	40020058 	.word	0x40020058
 8007e1c:	40020070 	.word	0x40020070
 8007e20:	40020088 	.word	0x40020088
 8007e24:	400200a0 	.word	0x400200a0
 8007e28:	400200b8 	.word	0x400200b8
 8007e2c:	40020410 	.word	0x40020410
 8007e30:	40020428 	.word	0x40020428
 8007e34:	40020440 	.word	0x40020440
 8007e38:	40020458 	.word	0x40020458
 8007e3c:	40020470 	.word	0x40020470
 8007e40:	40020488 	.word	0x40020488
 8007e44:	400204a0 	.word	0x400204a0
 8007e48:	400204b8 	.word	0x400204b8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8087 	beq.w	8007f74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6a:	f003 031f 	and.w	r3, r3, #31
 8007e6e:	2220      	movs	r2, #32
 8007e70:	409a      	lsls	r2, r3
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d139      	bne.n	8007ef6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0216 	bic.w	r2, r2, #22
 8007e90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695a      	ldr	r2, [r3, #20]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ea0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <HAL_DMA_IRQHandler+0x736>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0208 	bic.w	r2, r2, #8
 8007ec0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	223f      	movs	r2, #63	; 0x3f
 8007ecc:	409a      	lsls	r2, r3
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 834a 	beq.w	8008580 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	4798      	blx	r3
          }
          return;
 8007ef4:	e344      	b.n	8008580 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d018      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d02c      	beq.n	8007f74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
 8007f22:	e027      	b.n	8007f74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d023      	beq.n	8007f74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
 8007f34:	e01e      	b.n	8007f74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10f      	bne.n	8007f64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0210 	bic.w	r2, r2, #16
 8007f52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8306 	beq.w	800858a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 8088 	beq.w	800809c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a7a      	ldr	r2, [pc, #488]	; (8008184 <HAL_DMA_IRQHandler+0xa08>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d04a      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a79      	ldr	r2, [pc, #484]	; (8008188 <HAL_DMA_IRQHandler+0xa0c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d045      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a77      	ldr	r2, [pc, #476]	; (800818c <HAL_DMA_IRQHandler+0xa10>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d040      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a76      	ldr	r2, [pc, #472]	; (8008190 <HAL_DMA_IRQHandler+0xa14>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d03b      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a74      	ldr	r2, [pc, #464]	; (8008194 <HAL_DMA_IRQHandler+0xa18>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d036      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a73      	ldr	r2, [pc, #460]	; (8008198 <HAL_DMA_IRQHandler+0xa1c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d031      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a71      	ldr	r2, [pc, #452]	; (800819c <HAL_DMA_IRQHandler+0xa20>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d02c      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a70      	ldr	r2, [pc, #448]	; (80081a0 <HAL_DMA_IRQHandler+0xa24>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d027      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a6e      	ldr	r2, [pc, #440]	; (80081a4 <HAL_DMA_IRQHandler+0xa28>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d022      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a6d      	ldr	r2, [pc, #436]	; (80081a8 <HAL_DMA_IRQHandler+0xa2c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d01d      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a6b      	ldr	r2, [pc, #428]	; (80081ac <HAL_DMA_IRQHandler+0xa30>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d018      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a6a      	ldr	r2, [pc, #424]	; (80081b0 <HAL_DMA_IRQHandler+0xa34>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d013      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a68      	ldr	r2, [pc, #416]	; (80081b4 <HAL_DMA_IRQHandler+0xa38>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00e      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a67      	ldr	r2, [pc, #412]	; (80081b8 <HAL_DMA_IRQHandler+0xa3c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a65      	ldr	r2, [pc, #404]	; (80081bc <HAL_DMA_IRQHandler+0xa40>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <HAL_DMA_IRQHandler+0x8b8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a64      	ldr	r2, [pc, #400]	; (80081c0 <HAL_DMA_IRQHandler+0xa44>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d108      	bne.n	8008046 <HAL_DMA_IRQHandler+0x8ca>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0201 	bic.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e007      	b.n	8008056 <HAL_DMA_IRQHandler+0x8da>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805e:	429a      	cmp	r2, r3
 8008060:	d307      	bcc.n	8008072 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f2      	bne.n	8008056 <HAL_DMA_IRQHandler+0x8da>
 8008070:	e000      	b.n	8008074 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008072:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2203      	movs	r2, #3
 8008086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800808a:	e003      	b.n	8008094 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8272 	beq.w	800858a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
 80080ae:	e26c      	b.n	800858a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a43      	ldr	r2, [pc, #268]	; (80081c4 <HAL_DMA_IRQHandler+0xa48>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d022      	beq.n	8008100 <HAL_DMA_IRQHandler+0x984>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a42      	ldr	r2, [pc, #264]	; (80081c8 <HAL_DMA_IRQHandler+0xa4c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d01d      	beq.n	8008100 <HAL_DMA_IRQHandler+0x984>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a40      	ldr	r2, [pc, #256]	; (80081cc <HAL_DMA_IRQHandler+0xa50>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d018      	beq.n	8008100 <HAL_DMA_IRQHandler+0x984>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a3f      	ldr	r2, [pc, #252]	; (80081d0 <HAL_DMA_IRQHandler+0xa54>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <HAL_DMA_IRQHandler+0x984>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a3d      	ldr	r2, [pc, #244]	; (80081d4 <HAL_DMA_IRQHandler+0xa58>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00e      	beq.n	8008100 <HAL_DMA_IRQHandler+0x984>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a3c      	ldr	r2, [pc, #240]	; (80081d8 <HAL_DMA_IRQHandler+0xa5c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d009      	beq.n	8008100 <HAL_DMA_IRQHandler+0x984>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a3a      	ldr	r2, [pc, #232]	; (80081dc <HAL_DMA_IRQHandler+0xa60>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_DMA_IRQHandler+0x984>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a39      	ldr	r2, [pc, #228]	; (80081e0 <HAL_DMA_IRQHandler+0xa64>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d101      	bne.n	8008104 <HAL_DMA_IRQHandler+0x988>
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <HAL_DMA_IRQHandler+0x98a>
 8008104:	2300      	movs	r3, #0
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 823f 	beq.w	800858a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008118:	f003 031f 	and.w	r3, r3, #31
 800811c:	2204      	movs	r2, #4
 800811e:	409a      	lsls	r2, r3
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80cd 	beq.w	80082c4 <HAL_DMA_IRQHandler+0xb48>
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80c7 	beq.w	80082c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813a:	f003 031f 	and.w	r3, r3, #31
 800813e:	2204      	movs	r2, #4
 8008140:	409a      	lsls	r2, r3
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d049      	beq.n	80081e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8210 	beq.w	8008584 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800816c:	e20a      	b.n	8008584 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8206 	beq.w	8008584 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008180:	e200      	b.n	8008584 <HAL_DMA_IRQHandler+0xe08>
 8008182:	bf00      	nop
 8008184:	40020010 	.word	0x40020010
 8008188:	40020028 	.word	0x40020028
 800818c:	40020040 	.word	0x40020040
 8008190:	40020058 	.word	0x40020058
 8008194:	40020070 	.word	0x40020070
 8008198:	40020088 	.word	0x40020088
 800819c:	400200a0 	.word	0x400200a0
 80081a0:	400200b8 	.word	0x400200b8
 80081a4:	40020410 	.word	0x40020410
 80081a8:	40020428 	.word	0x40020428
 80081ac:	40020440 	.word	0x40020440
 80081b0:	40020458 	.word	0x40020458
 80081b4:	40020470 	.word	0x40020470
 80081b8:	40020488 	.word	0x40020488
 80081bc:	400204a0 	.word	0x400204a0
 80081c0:	400204b8 	.word	0x400204b8
 80081c4:	58025408 	.word	0x58025408
 80081c8:	5802541c 	.word	0x5802541c
 80081cc:	58025430 	.word	0x58025430
 80081d0:	58025444 	.word	0x58025444
 80081d4:	58025458 	.word	0x58025458
 80081d8:	5802546c 	.word	0x5802546c
 80081dc:	58025480 	.word	0x58025480
 80081e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d160      	bne.n	80082b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a7f      	ldr	r2, [pc, #508]	; (80083f0 <HAL_DMA_IRQHandler+0xc74>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d04a      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a7d      	ldr	r2, [pc, #500]	; (80083f4 <HAL_DMA_IRQHandler+0xc78>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d045      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a7c      	ldr	r2, [pc, #496]	; (80083f8 <HAL_DMA_IRQHandler+0xc7c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d040      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a7a      	ldr	r2, [pc, #488]	; (80083fc <HAL_DMA_IRQHandler+0xc80>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d03b      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a79      	ldr	r2, [pc, #484]	; (8008400 <HAL_DMA_IRQHandler+0xc84>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d036      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a77      	ldr	r2, [pc, #476]	; (8008404 <HAL_DMA_IRQHandler+0xc88>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d031      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a76      	ldr	r2, [pc, #472]	; (8008408 <HAL_DMA_IRQHandler+0xc8c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d02c      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a74      	ldr	r2, [pc, #464]	; (800840c <HAL_DMA_IRQHandler+0xc90>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d027      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a73      	ldr	r2, [pc, #460]	; (8008410 <HAL_DMA_IRQHandler+0xc94>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d022      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a71      	ldr	r2, [pc, #452]	; (8008414 <HAL_DMA_IRQHandler+0xc98>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d01d      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a70      	ldr	r2, [pc, #448]	; (8008418 <HAL_DMA_IRQHandler+0xc9c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d018      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a6e      	ldr	r2, [pc, #440]	; (800841c <HAL_DMA_IRQHandler+0xca0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a6d      	ldr	r2, [pc, #436]	; (8008420 <HAL_DMA_IRQHandler+0xca4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00e      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a6b      	ldr	r2, [pc, #428]	; (8008424 <HAL_DMA_IRQHandler+0xca8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d009      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a6a      	ldr	r2, [pc, #424]	; (8008428 <HAL_DMA_IRQHandler+0xcac>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d004      	beq.n	800828e <HAL_DMA_IRQHandler+0xb12>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a68      	ldr	r2, [pc, #416]	; (800842c <HAL_DMA_IRQHandler+0xcb0>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d108      	bne.n	80082a0 <HAL_DMA_IRQHandler+0xb24>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0208 	bic.w	r2, r2, #8
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e007      	b.n	80082b0 <HAL_DMA_IRQHandler+0xb34>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0204 	bic.w	r2, r2, #4
 80082ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8165 	beq.w	8008584 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082c2:	e15f      	b.n	8008584 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c8:	f003 031f 	and.w	r3, r3, #31
 80082cc:	2202      	movs	r2, #2
 80082ce:	409a      	lsls	r2, r3
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	4013      	ands	r3, r2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80c5 	beq.w	8008464 <HAL_DMA_IRQHandler+0xce8>
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80bf 	beq.w	8008464 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	2202      	movs	r2, #2
 80082f0:	409a      	lsls	r2, r3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d018      	beq.n	8008332 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 813a 	beq.w	8008588 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800831c:	e134      	b.n	8008588 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 8130 	beq.w	8008588 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008330:	e12a      	b.n	8008588 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 8089 	bne.w	8008450 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <HAL_DMA_IRQHandler+0xc74>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d04a      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a29      	ldr	r2, [pc, #164]	; (80083f4 <HAL_DMA_IRQHandler+0xc78>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d045      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <HAL_DMA_IRQHandler+0xc7c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d040      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a26      	ldr	r2, [pc, #152]	; (80083fc <HAL_DMA_IRQHandler+0xc80>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d03b      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a25      	ldr	r2, [pc, #148]	; (8008400 <HAL_DMA_IRQHandler+0xc84>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d036      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a23      	ldr	r2, [pc, #140]	; (8008404 <HAL_DMA_IRQHandler+0xc88>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d031      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a22      	ldr	r2, [pc, #136]	; (8008408 <HAL_DMA_IRQHandler+0xc8c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d02c      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a20      	ldr	r2, [pc, #128]	; (800840c <HAL_DMA_IRQHandler+0xc90>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d027      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <HAL_DMA_IRQHandler+0xc94>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d022      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <HAL_DMA_IRQHandler+0xc98>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d01d      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1c      	ldr	r2, [pc, #112]	; (8008418 <HAL_DMA_IRQHandler+0xc9c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d018      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1a      	ldr	r2, [pc, #104]	; (800841c <HAL_DMA_IRQHandler+0xca0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d013      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a19      	ldr	r2, [pc, #100]	; (8008420 <HAL_DMA_IRQHandler+0xca4>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00e      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a17      	ldr	r2, [pc, #92]	; (8008424 <HAL_DMA_IRQHandler+0xca8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d009      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a16      	ldr	r2, [pc, #88]	; (8008428 <HAL_DMA_IRQHandler+0xcac>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d004      	beq.n	80083de <HAL_DMA_IRQHandler+0xc62>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a14      	ldr	r2, [pc, #80]	; (800842c <HAL_DMA_IRQHandler+0xcb0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d128      	bne.n	8008430 <HAL_DMA_IRQHandler+0xcb4>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0214 	bic.w	r2, r2, #20
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e027      	b.n	8008440 <HAL_DMA_IRQHandler+0xcc4>
 80083f0:	40020010 	.word	0x40020010
 80083f4:	40020028 	.word	0x40020028
 80083f8:	40020040 	.word	0x40020040
 80083fc:	40020058 	.word	0x40020058
 8008400:	40020070 	.word	0x40020070
 8008404:	40020088 	.word	0x40020088
 8008408:	400200a0 	.word	0x400200a0
 800840c:	400200b8 	.word	0x400200b8
 8008410:	40020410 	.word	0x40020410
 8008414:	40020428 	.word	0x40020428
 8008418:	40020440 	.word	0x40020440
 800841c:	40020458 	.word	0x40020458
 8008420:	40020470 	.word	0x40020470
 8008424:	40020488 	.word	0x40020488
 8008428:	400204a0 	.word	0x400204a0
 800842c:	400204b8 	.word	0x400204b8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 020a 	bic.w	r2, r2, #10
 800843e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8097 	beq.w	8008588 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008462:	e091      	b.n	8008588 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008468:	f003 031f 	and.w	r3, r3, #31
 800846c:	2208      	movs	r2, #8
 800846e:	409a      	lsls	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	4013      	ands	r3, r2
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8088 	beq.w	800858a <HAL_DMA_IRQHandler+0xe0e>
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8082 	beq.w	800858a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a41      	ldr	r2, [pc, #260]	; (8008590 <HAL_DMA_IRQHandler+0xe14>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d04a      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a3f      	ldr	r2, [pc, #252]	; (8008594 <HAL_DMA_IRQHandler+0xe18>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d045      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a3e      	ldr	r2, [pc, #248]	; (8008598 <HAL_DMA_IRQHandler+0xe1c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d040      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a3c      	ldr	r2, [pc, #240]	; (800859c <HAL_DMA_IRQHandler+0xe20>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d03b      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a3b      	ldr	r2, [pc, #236]	; (80085a0 <HAL_DMA_IRQHandler+0xe24>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d036      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a39      	ldr	r2, [pc, #228]	; (80085a4 <HAL_DMA_IRQHandler+0xe28>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d031      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a38      	ldr	r2, [pc, #224]	; (80085a8 <HAL_DMA_IRQHandler+0xe2c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d02c      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a36      	ldr	r2, [pc, #216]	; (80085ac <HAL_DMA_IRQHandler+0xe30>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d027      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a35      	ldr	r2, [pc, #212]	; (80085b0 <HAL_DMA_IRQHandler+0xe34>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d022      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a33      	ldr	r2, [pc, #204]	; (80085b4 <HAL_DMA_IRQHandler+0xe38>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01d      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a32      	ldr	r2, [pc, #200]	; (80085b8 <HAL_DMA_IRQHandler+0xe3c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d018      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a30      	ldr	r2, [pc, #192]	; (80085bc <HAL_DMA_IRQHandler+0xe40>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a2f      	ldr	r2, [pc, #188]	; (80085c0 <HAL_DMA_IRQHandler+0xe44>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00e      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a2d      	ldr	r2, [pc, #180]	; (80085c4 <HAL_DMA_IRQHandler+0xe48>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d009      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a2c      	ldr	r2, [pc, #176]	; (80085c8 <HAL_DMA_IRQHandler+0xe4c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <HAL_DMA_IRQHandler+0xdaa>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a2a      	ldr	r2, [pc, #168]	; (80085cc <HAL_DMA_IRQHandler+0xe50>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d108      	bne.n	8008538 <HAL_DMA_IRQHandler+0xdbc>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 021c 	bic.w	r2, r2, #28
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e007      	b.n	8008548 <HAL_DMA_IRQHandler+0xdcc>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 020e 	bic.w	r2, r2, #14
 8008546:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800854c:	f003 031f 	and.w	r3, r3, #31
 8008550:	2201      	movs	r2, #1
 8008552:	409a      	lsls	r2, r3
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
 800857e:	e004      	b.n	800858a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008580:	bf00      	nop
 8008582:	e002      	b.n	800858a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008584:	bf00      	nop
 8008586:	e000      	b.n	800858a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008588:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800858a:	3728      	adds	r7, #40	; 0x28
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40020010 	.word	0x40020010
 8008594:	40020028 	.word	0x40020028
 8008598:	40020040 	.word	0x40020040
 800859c:	40020058 	.word	0x40020058
 80085a0:	40020070 	.word	0x40020070
 80085a4:	40020088 	.word	0x40020088
 80085a8:	400200a0 	.word	0x400200a0
 80085ac:	400200b8 	.word	0x400200b8
 80085b0:	40020410 	.word	0x40020410
 80085b4:	40020428 	.word	0x40020428
 80085b8:	40020440 	.word	0x40020440
 80085bc:	40020458 	.word	0x40020458
 80085c0:	40020470 	.word	0x40020470
 80085c4:	40020488 	.word	0x40020488
 80085c8:	400204a0 	.word	0x400204a0
 80085cc:	400204b8 	.word	0x400204b8

080085d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008600:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a7f      	ldr	r2, [pc, #508]	; (8008804 <DMA_SetConfig+0x21c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d072      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a7d      	ldr	r2, [pc, #500]	; (8008808 <DMA_SetConfig+0x220>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d06d      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a7c      	ldr	r2, [pc, #496]	; (800880c <DMA_SetConfig+0x224>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d068      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a7a      	ldr	r2, [pc, #488]	; (8008810 <DMA_SetConfig+0x228>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d063      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a79      	ldr	r2, [pc, #484]	; (8008814 <DMA_SetConfig+0x22c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d05e      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a77      	ldr	r2, [pc, #476]	; (8008818 <DMA_SetConfig+0x230>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d059      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a76      	ldr	r2, [pc, #472]	; (800881c <DMA_SetConfig+0x234>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d054      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a74      	ldr	r2, [pc, #464]	; (8008820 <DMA_SetConfig+0x238>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d04f      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a73      	ldr	r2, [pc, #460]	; (8008824 <DMA_SetConfig+0x23c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d04a      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a71      	ldr	r2, [pc, #452]	; (8008828 <DMA_SetConfig+0x240>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d045      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a70      	ldr	r2, [pc, #448]	; (800882c <DMA_SetConfig+0x244>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d040      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a6e      	ldr	r2, [pc, #440]	; (8008830 <DMA_SetConfig+0x248>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d03b      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a6d      	ldr	r2, [pc, #436]	; (8008834 <DMA_SetConfig+0x24c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d036      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a6b      	ldr	r2, [pc, #428]	; (8008838 <DMA_SetConfig+0x250>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d031      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a6a      	ldr	r2, [pc, #424]	; (800883c <DMA_SetConfig+0x254>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d02c      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a68      	ldr	r2, [pc, #416]	; (8008840 <DMA_SetConfig+0x258>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d027      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a67      	ldr	r2, [pc, #412]	; (8008844 <DMA_SetConfig+0x25c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d022      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a65      	ldr	r2, [pc, #404]	; (8008848 <DMA_SetConfig+0x260>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d01d      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a64      	ldr	r2, [pc, #400]	; (800884c <DMA_SetConfig+0x264>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d018      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a62      	ldr	r2, [pc, #392]	; (8008850 <DMA_SetConfig+0x268>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d013      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a61      	ldr	r2, [pc, #388]	; (8008854 <DMA_SetConfig+0x26c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00e      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a5f      	ldr	r2, [pc, #380]	; (8008858 <DMA_SetConfig+0x270>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d009      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a5e      	ldr	r2, [pc, #376]	; (800885c <DMA_SetConfig+0x274>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d004      	beq.n	80086f2 <DMA_SetConfig+0x10a>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a5c      	ldr	r2, [pc, #368]	; (8008860 <DMA_SetConfig+0x278>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d101      	bne.n	80086f6 <DMA_SetConfig+0x10e>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <DMA_SetConfig+0x110>
 80086f6:	2300      	movs	r3, #0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00d      	beq.n	8008718 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008704:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008716:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a39      	ldr	r2, [pc, #228]	; (8008804 <DMA_SetConfig+0x21c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d04a      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a38      	ldr	r2, [pc, #224]	; (8008808 <DMA_SetConfig+0x220>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d045      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a36      	ldr	r2, [pc, #216]	; (800880c <DMA_SetConfig+0x224>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d040      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a35      	ldr	r2, [pc, #212]	; (8008810 <DMA_SetConfig+0x228>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d03b      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a33      	ldr	r2, [pc, #204]	; (8008814 <DMA_SetConfig+0x22c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d036      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a32      	ldr	r2, [pc, #200]	; (8008818 <DMA_SetConfig+0x230>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d031      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a30      	ldr	r2, [pc, #192]	; (800881c <DMA_SetConfig+0x234>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d02c      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a2f      	ldr	r2, [pc, #188]	; (8008820 <DMA_SetConfig+0x238>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d027      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a2d      	ldr	r2, [pc, #180]	; (8008824 <DMA_SetConfig+0x23c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d022      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a2c      	ldr	r2, [pc, #176]	; (8008828 <DMA_SetConfig+0x240>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d01d      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a2a      	ldr	r2, [pc, #168]	; (800882c <DMA_SetConfig+0x244>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d018      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a29      	ldr	r2, [pc, #164]	; (8008830 <DMA_SetConfig+0x248>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d013      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a27      	ldr	r2, [pc, #156]	; (8008834 <DMA_SetConfig+0x24c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00e      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a26      	ldr	r2, [pc, #152]	; (8008838 <DMA_SetConfig+0x250>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d009      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a24      	ldr	r2, [pc, #144]	; (800883c <DMA_SetConfig+0x254>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <DMA_SetConfig+0x1d0>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a23      	ldr	r2, [pc, #140]	; (8008840 <DMA_SetConfig+0x258>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d101      	bne.n	80087bc <DMA_SetConfig+0x1d4>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <DMA_SetConfig+0x1d6>
 80087bc:	2300      	movs	r3, #0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d059      	beq.n	8008876 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c6:	f003 031f 	and.w	r3, r3, #31
 80087ca:	223f      	movs	r2, #63	; 0x3f
 80087cc:	409a      	lsls	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	2b40      	cmp	r3, #64	; 0x40
 80087f0:	d138      	bne.n	8008864 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008802:	e086      	b.n	8008912 <DMA_SetConfig+0x32a>
 8008804:	40020010 	.word	0x40020010
 8008808:	40020028 	.word	0x40020028
 800880c:	40020040 	.word	0x40020040
 8008810:	40020058 	.word	0x40020058
 8008814:	40020070 	.word	0x40020070
 8008818:	40020088 	.word	0x40020088
 800881c:	400200a0 	.word	0x400200a0
 8008820:	400200b8 	.word	0x400200b8
 8008824:	40020410 	.word	0x40020410
 8008828:	40020428 	.word	0x40020428
 800882c:	40020440 	.word	0x40020440
 8008830:	40020458 	.word	0x40020458
 8008834:	40020470 	.word	0x40020470
 8008838:	40020488 	.word	0x40020488
 800883c:	400204a0 	.word	0x400204a0
 8008840:	400204b8 	.word	0x400204b8
 8008844:	58025408 	.word	0x58025408
 8008848:	5802541c 	.word	0x5802541c
 800884c:	58025430 	.word	0x58025430
 8008850:	58025444 	.word	0x58025444
 8008854:	58025458 	.word	0x58025458
 8008858:	5802546c 	.word	0x5802546c
 800885c:	58025480 	.word	0x58025480
 8008860:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	60da      	str	r2, [r3, #12]
}
 8008874:	e04d      	b.n	8008912 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a29      	ldr	r2, [pc, #164]	; (8008920 <DMA_SetConfig+0x338>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d022      	beq.n	80088c6 <DMA_SetConfig+0x2de>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a27      	ldr	r2, [pc, #156]	; (8008924 <DMA_SetConfig+0x33c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01d      	beq.n	80088c6 <DMA_SetConfig+0x2de>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a26      	ldr	r2, [pc, #152]	; (8008928 <DMA_SetConfig+0x340>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d018      	beq.n	80088c6 <DMA_SetConfig+0x2de>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a24      	ldr	r2, [pc, #144]	; (800892c <DMA_SetConfig+0x344>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d013      	beq.n	80088c6 <DMA_SetConfig+0x2de>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a23      	ldr	r2, [pc, #140]	; (8008930 <DMA_SetConfig+0x348>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00e      	beq.n	80088c6 <DMA_SetConfig+0x2de>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a21      	ldr	r2, [pc, #132]	; (8008934 <DMA_SetConfig+0x34c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d009      	beq.n	80088c6 <DMA_SetConfig+0x2de>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a20      	ldr	r2, [pc, #128]	; (8008938 <DMA_SetConfig+0x350>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d004      	beq.n	80088c6 <DMA_SetConfig+0x2de>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1e      	ldr	r2, [pc, #120]	; (800893c <DMA_SetConfig+0x354>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d101      	bne.n	80088ca <DMA_SetConfig+0x2e2>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <DMA_SetConfig+0x2e4>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d020      	beq.n	8008912 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d4:	f003 031f 	and.w	r3, r3, #31
 80088d8:	2201      	movs	r2, #1
 80088da:	409a      	lsls	r2, r3
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b40      	cmp	r3, #64	; 0x40
 80088ee:	d108      	bne.n	8008902 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	60da      	str	r2, [r3, #12]
}
 8008900:	e007      	b.n	8008912 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	60da      	str	r2, [r3, #12]
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	58025408 	.word	0x58025408
 8008924:	5802541c 	.word	0x5802541c
 8008928:	58025430 	.word	0x58025430
 800892c:	58025444 	.word	0x58025444
 8008930:	58025458 	.word	0x58025458
 8008934:	5802546c 	.word	0x5802546c
 8008938:	58025480 	.word	0x58025480
 800893c:	58025494 	.word	0x58025494

08008940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a42      	ldr	r2, [pc, #264]	; (8008a58 <DMA_CalcBaseAndBitshift+0x118>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d04a      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a41      	ldr	r2, [pc, #260]	; (8008a5c <DMA_CalcBaseAndBitshift+0x11c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d045      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a3f      	ldr	r2, [pc, #252]	; (8008a60 <DMA_CalcBaseAndBitshift+0x120>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d040      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a3e      	ldr	r2, [pc, #248]	; (8008a64 <DMA_CalcBaseAndBitshift+0x124>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d03b      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a3c      	ldr	r2, [pc, #240]	; (8008a68 <DMA_CalcBaseAndBitshift+0x128>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d036      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a3b      	ldr	r2, [pc, #236]	; (8008a6c <DMA_CalcBaseAndBitshift+0x12c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d031      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a39      	ldr	r2, [pc, #228]	; (8008a70 <DMA_CalcBaseAndBitshift+0x130>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d02c      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a38      	ldr	r2, [pc, #224]	; (8008a74 <DMA_CalcBaseAndBitshift+0x134>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d027      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a36      	ldr	r2, [pc, #216]	; (8008a78 <DMA_CalcBaseAndBitshift+0x138>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d022      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a35      	ldr	r2, [pc, #212]	; (8008a7c <DMA_CalcBaseAndBitshift+0x13c>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d01d      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a33      	ldr	r2, [pc, #204]	; (8008a80 <DMA_CalcBaseAndBitshift+0x140>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d018      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a32      	ldr	r2, [pc, #200]	; (8008a84 <DMA_CalcBaseAndBitshift+0x144>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d013      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a30      	ldr	r2, [pc, #192]	; (8008a88 <DMA_CalcBaseAndBitshift+0x148>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00e      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a2f      	ldr	r2, [pc, #188]	; (8008a8c <DMA_CalcBaseAndBitshift+0x14c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d009      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a2d      	ldr	r2, [pc, #180]	; (8008a90 <DMA_CalcBaseAndBitshift+0x150>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d004      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xa8>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a2c      	ldr	r2, [pc, #176]	; (8008a94 <DMA_CalcBaseAndBitshift+0x154>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d101      	bne.n	80089ec <DMA_CalcBaseAndBitshift+0xac>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <DMA_CalcBaseAndBitshift+0xae>
 80089ec:	2300      	movs	r3, #0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d024      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	3b10      	subs	r3, #16
 80089fa:	4a27      	ldr	r2, [pc, #156]	; (8008a98 <DMA_CalcBaseAndBitshift+0x158>)
 80089fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008a00:	091b      	lsrs	r3, r3, #4
 8008a02:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	4a24      	ldr	r2, [pc, #144]	; (8008a9c <DMA_CalcBaseAndBitshift+0x15c>)
 8008a0c:	5cd3      	ldrb	r3, [r2, r3]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d908      	bls.n	8008a2c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4b1f      	ldr	r3, [pc, #124]	; (8008aa0 <DMA_CalcBaseAndBitshift+0x160>)
 8008a22:	4013      	ands	r3, r2
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	659a      	str	r2, [r3, #88]	; 0x58
 8008a2a:	e00d      	b.n	8008a48 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <DMA_CalcBaseAndBitshift+0x160>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6593      	str	r3, [r2, #88]	; 0x58
 8008a3a:	e005      	b.n	8008a48 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	40020010 	.word	0x40020010
 8008a5c:	40020028 	.word	0x40020028
 8008a60:	40020040 	.word	0x40020040
 8008a64:	40020058 	.word	0x40020058
 8008a68:	40020070 	.word	0x40020070
 8008a6c:	40020088 	.word	0x40020088
 8008a70:	400200a0 	.word	0x400200a0
 8008a74:	400200b8 	.word	0x400200b8
 8008a78:	40020410 	.word	0x40020410
 8008a7c:	40020428 	.word	0x40020428
 8008a80:	40020440 	.word	0x40020440
 8008a84:	40020458 	.word	0x40020458
 8008a88:	40020470 	.word	0x40020470
 8008a8c:	40020488 	.word	0x40020488
 8008a90:	400204a0 	.word	0x400204a0
 8008a94:	400204b8 	.word	0x400204b8
 8008a98:	aaaaaaab 	.word	0xaaaaaaab
 8008a9c:	0801786c 	.word	0x0801786c
 8008aa0:	fffffc00 	.word	0xfffffc00

08008aa4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d120      	bne.n	8008afa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d858      	bhi.n	8008b72 <DMA_CheckFifoParam+0xce>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <DMA_CheckFifoParam+0x24>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008ad9 	.word	0x08008ad9
 8008acc:	08008aeb 	.word	0x08008aeb
 8008ad0:	08008ad9 	.word	0x08008ad9
 8008ad4:	08008b73 	.word	0x08008b73
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d048      	beq.n	8008b76 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ae8:	e045      	b.n	8008b76 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008af2:	d142      	bne.n	8008b7a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008af8:	e03f      	b.n	8008b7a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b02:	d123      	bne.n	8008b4c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d838      	bhi.n	8008b7e <DMA_CheckFifoParam+0xda>
 8008b0c:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <DMA_CheckFifoParam+0x70>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b2b 	.word	0x08008b2b
 8008b1c:	08008b25 	.word	0x08008b25
 8008b20:	08008b3d 	.word	0x08008b3d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
        break;
 8008b28:	e030      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d025      	beq.n	8008b82 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b3a:	e022      	b.n	8008b82 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b44:	d11f      	bne.n	8008b86 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b4a:	e01c      	b.n	8008b86 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d902      	bls.n	8008b5a <DMA_CheckFifoParam+0xb6>
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d003      	beq.n	8008b60 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008b58:	e018      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8008b5e:	e015      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00e      	beq.n	8008b8a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b70:	e00b      	b.n	8008b8a <DMA_CheckFifoParam+0xe6>
        break;
 8008b72:	bf00      	nop
 8008b74:	e00a      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
        break;
 8008b76:	bf00      	nop
 8008b78:	e008      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
        break;
 8008b7a:	bf00      	nop
 8008b7c:	e006      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
        break;
 8008b7e:	bf00      	nop
 8008b80:	e004      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
        break;
 8008b82:	bf00      	nop
 8008b84:	e002      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
        break;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <DMA_CheckFifoParam+0xe8>
    break;
 8008b8a:	bf00      	nop
    }
  }

  return status;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop

08008b9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a38      	ldr	r2, [pc, #224]	; (8008c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d022      	beq.n	8008bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a36      	ldr	r2, [pc, #216]	; (8008c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d01d      	beq.n	8008bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a35      	ldr	r2, [pc, #212]	; (8008c98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d018      	beq.n	8008bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a33      	ldr	r2, [pc, #204]	; (8008c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a32      	ldr	r2, [pc, #200]	; (8008ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00e      	beq.n	8008bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a30      	ldr	r2, [pc, #192]	; (8008ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d009      	beq.n	8008bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a2f      	ldr	r2, [pc, #188]	; (8008ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d004      	beq.n	8008bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a2d      	ldr	r2, [pc, #180]	; (8008cac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d101      	bne.n	8008bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01a      	beq.n	8008c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	3b08      	subs	r3, #8
 8008c0c:	4a28      	ldr	r2, [pc, #160]	; (8008cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c12:	091b      	lsrs	r3, r3, #4
 8008c14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4b26      	ldr	r3, [pc, #152]	; (8008cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	461a      	mov	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a24      	ldr	r2, [pc, #144]	; (8008cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008c28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	2201      	movs	r2, #1
 8008c32:	409a      	lsls	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008c38:	e024      	b.n	8008c84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	3b10      	subs	r3, #16
 8008c42:	4a1e      	ldr	r2, [pc, #120]	; (8008cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008c44:	fba2 2303 	umull	r2, r3, r2, r3
 8008c48:	091b      	lsrs	r3, r3, #4
 8008c4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4a1c      	ldr	r2, [pc, #112]	; (8008cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d806      	bhi.n	8008c62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4a1b      	ldr	r2, [pc, #108]	; (8008cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d902      	bls.n	8008c62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008c74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 031f 	and.w	r3, r3, #31
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	409a      	lsls	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008c84:	bf00      	nop
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	58025408 	.word	0x58025408
 8008c94:	5802541c 	.word	0x5802541c
 8008c98:	58025430 	.word	0x58025430
 8008c9c:	58025444 	.word	0x58025444
 8008ca0:	58025458 	.word	0x58025458
 8008ca4:	5802546c 	.word	0x5802546c
 8008ca8:	58025480 	.word	0x58025480
 8008cac:	58025494 	.word	0x58025494
 8008cb0:	cccccccd 	.word	0xcccccccd
 8008cb4:	16009600 	.word	0x16009600
 8008cb8:	58025880 	.word	0x58025880
 8008cbc:	aaaaaaab 	.word	0xaaaaaaab
 8008cc0:	400204b8 	.word	0x400204b8
 8008cc4:	4002040f 	.word	0x4002040f
 8008cc8:	10008200 	.word	0x10008200
 8008ccc:	40020880 	.word	0x40020880

08008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d04a      	beq.n	8008d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d847      	bhi.n	8008d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a25      	ldr	r2, [pc, #148]	; (8008d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d022      	beq.n	8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a24      	ldr	r2, [pc, #144]	; (8008d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d01d      	beq.n	8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a22      	ldr	r2, [pc, #136]	; (8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d018      	beq.n	8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a21      	ldr	r2, [pc, #132]	; (8008d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d013      	beq.n	8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00e      	beq.n	8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a1e      	ldr	r2, [pc, #120]	; (8008d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d009      	beq.n	8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1c      	ldr	r2, [pc, #112]	; (8008da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1b      	ldr	r2, [pc, #108]	; (8008da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d101      	bne.n	8008d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008d40:	2300      	movs	r3, #0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4b17      	ldr	r3, [pc, #92]	; (8008da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	461a      	mov	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a15      	ldr	r2, [pc, #84]	; (8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008d58:	671a      	str	r2, [r3, #112]	; 0x70
 8008d5a:	e009      	b.n	8008d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a11      	ldr	r2, [pc, #68]	; (8008db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008d6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2201      	movs	r2, #1
 8008d76:	409a      	lsls	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	58025408 	.word	0x58025408
 8008d8c:	5802541c 	.word	0x5802541c
 8008d90:	58025430 	.word	0x58025430
 8008d94:	58025444 	.word	0x58025444
 8008d98:	58025458 	.word	0x58025458
 8008d9c:	5802546c 	.word	0x5802546c
 8008da0:	58025480 	.word	0x58025480
 8008da4:	58025494 	.word	0x58025494
 8008da8:	1600963f 	.word	0x1600963f
 8008dac:	58025940 	.word	0x58025940
 8008db0:	1000823f 	.word	0x1000823f
 8008db4:	40020940 	.word	0x40020940

08008db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008dc6:	4b89      	ldr	r3, [pc, #548]	; (8008fec <HAL_GPIO_Init+0x234>)
 8008dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008dca:	e194      	b.n	80090f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd8:	4013      	ands	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 8186 	beq.w	80090f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d005      	beq.n	8008dfc <HAL_GPIO_Init+0x44>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d130      	bne.n	8008e5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	2203      	movs	r2, #3
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	4013      	ands	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e32:	2201      	movs	r2, #1
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	4013      	ands	r3, r2
 8008e40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	091b      	lsrs	r3, r3, #4
 8008e48:	f003 0201 	and.w	r2, r3, #1
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d017      	beq.n	8008e9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	2203      	movs	r2, #3
 8008e76:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d123      	bne.n	8008eee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	08da      	lsrs	r2, r3, #3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3208      	adds	r2, #8
 8008eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	220f      	movs	r2, #15
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	43db      	mvns	r3, r3
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	08da      	lsrs	r2, r3, #3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3208      	adds	r2, #8
 8008ee8:	69b9      	ldr	r1, [r7, #24]
 8008eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	2203      	movs	r2, #3
 8008efa:	fa02 f303 	lsl.w	r3, r2, r3
 8008efe:	43db      	mvns	r3, r3
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	4013      	ands	r3, r2
 8008f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f003 0203 	and.w	r2, r3, #3
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	fa02 f303 	lsl.w	r3, r2, r3
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 80e0 	beq.w	80090f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f30:	4b2f      	ldr	r3, [pc, #188]	; (8008ff0 <HAL_GPIO_Init+0x238>)
 8008f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f36:	4a2e      	ldr	r2, [pc, #184]	; (8008ff0 <HAL_GPIO_Init+0x238>)
 8008f38:	f043 0302 	orr.w	r3, r3, #2
 8008f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008f40:	4b2b      	ldr	r3, [pc, #172]	; (8008ff0 <HAL_GPIO_Init+0x238>)
 8008f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f4e:	4a29      	ldr	r2, [pc, #164]	; (8008ff4 <HAL_GPIO_Init+0x23c>)
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	089b      	lsrs	r3, r3, #2
 8008f54:	3302      	adds	r3, #2
 8008f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	220f      	movs	r2, #15
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a20      	ldr	r2, [pc, #128]	; (8008ff8 <HAL_GPIO_Init+0x240>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d052      	beq.n	8009020 <HAL_GPIO_Init+0x268>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a1f      	ldr	r2, [pc, #124]	; (8008ffc <HAL_GPIO_Init+0x244>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d031      	beq.n	8008fe6 <HAL_GPIO_Init+0x22e>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <HAL_GPIO_Init+0x248>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d02b      	beq.n	8008fe2 <HAL_GPIO_Init+0x22a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a1d      	ldr	r2, [pc, #116]	; (8009004 <HAL_GPIO_Init+0x24c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d025      	beq.n	8008fde <HAL_GPIO_Init+0x226>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a1c      	ldr	r2, [pc, #112]	; (8009008 <HAL_GPIO_Init+0x250>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d01f      	beq.n	8008fda <HAL_GPIO_Init+0x222>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a1b      	ldr	r2, [pc, #108]	; (800900c <HAL_GPIO_Init+0x254>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d019      	beq.n	8008fd6 <HAL_GPIO_Init+0x21e>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a1a      	ldr	r2, [pc, #104]	; (8009010 <HAL_GPIO_Init+0x258>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d013      	beq.n	8008fd2 <HAL_GPIO_Init+0x21a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a19      	ldr	r2, [pc, #100]	; (8009014 <HAL_GPIO_Init+0x25c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00d      	beq.n	8008fce <HAL_GPIO_Init+0x216>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a18      	ldr	r2, [pc, #96]	; (8009018 <HAL_GPIO_Init+0x260>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d007      	beq.n	8008fca <HAL_GPIO_Init+0x212>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a17      	ldr	r2, [pc, #92]	; (800901c <HAL_GPIO_Init+0x264>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d101      	bne.n	8008fc6 <HAL_GPIO_Init+0x20e>
 8008fc2:	2309      	movs	r3, #9
 8008fc4:	e02d      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fc6:	230a      	movs	r3, #10
 8008fc8:	e02b      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fca:	2308      	movs	r3, #8
 8008fcc:	e029      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fce:	2307      	movs	r3, #7
 8008fd0:	e027      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fd2:	2306      	movs	r3, #6
 8008fd4:	e025      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fd6:	2305      	movs	r3, #5
 8008fd8:	e023      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fda:	2304      	movs	r3, #4
 8008fdc:	e021      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e01f      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	e01d      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e01b      	b.n	8009022 <HAL_GPIO_Init+0x26a>
 8008fea:	bf00      	nop
 8008fec:	58000080 	.word	0x58000080
 8008ff0:	58024400 	.word	0x58024400
 8008ff4:	58000400 	.word	0x58000400
 8008ff8:	58020000 	.word	0x58020000
 8008ffc:	58020400 	.word	0x58020400
 8009000:	58020800 	.word	0x58020800
 8009004:	58020c00 	.word	0x58020c00
 8009008:	58021000 	.word	0x58021000
 800900c:	58021400 	.word	0x58021400
 8009010:	58021800 	.word	0x58021800
 8009014:	58021c00 	.word	0x58021c00
 8009018:	58022000 	.word	0x58022000
 800901c:	58022400 	.word	0x58022400
 8009020:	2300      	movs	r3, #0
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	f002 0203 	and.w	r2, r2, #3
 8009028:	0092      	lsls	r2, r2, #2
 800902a:	4093      	lsls	r3, r2
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	4313      	orrs	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009032:	4938      	ldr	r1, [pc, #224]	; (8009114 <HAL_GPIO_Init+0x35c>)
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	089b      	lsrs	r3, r3, #2
 8009038:	3302      	adds	r3, #2
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	43db      	mvns	r3, r3
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	4013      	ands	r3, r2
 8009050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	4313      	orrs	r3, r2
 8009064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800906e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	43db      	mvns	r3, r3
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	4013      	ands	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	4313      	orrs	r3, r2
 8009092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	43db      	mvns	r3, r3
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	4013      	ands	r3, r2
 80090aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	43db      	mvns	r3, r3
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	4013      	ands	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	3301      	adds	r3, #1
 80090f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	f47f ae63 	bne.w	8008dcc <HAL_GPIO_Init+0x14>
  }
}
 8009106:	bf00      	nop
 8009108:	bf00      	nop
 800910a:	3724      	adds	r7, #36	; 0x24
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	58000400 	.word	0x58000400

08009118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	887b      	ldrh	r3, [r7, #2]
 800912a:	4013      	ands	r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]
 8009134:	e001      	b.n	800913a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	807b      	strh	r3, [r7, #2]
 8009154:	4613      	mov	r3, r2
 8009156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009158:	787b      	ldrb	r3, [r7, #1]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800915e:	887a      	ldrh	r2, [r7, #2]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009164:	e003      	b.n	800916e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009166:	887b      	ldrh	r3, [r7, #2]
 8009168:	041a      	lsls	r2, r3, #16
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	619a      	str	r2, [r3, #24]
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e08b      	b.n	80092a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7fa f8f0 	bl	8003388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2224      	movs	r2, #36	; 0x24
 80091ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0201 	bic.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d107      	bne.n	80091f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689a      	ldr	r2, [r3, #8]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091f2:	609a      	str	r2, [r3, #8]
 80091f4:	e006      	b.n	8009204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d108      	bne.n	800921e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800921a:	605a      	str	r2, [r3, #4]
 800921c:	e007      	b.n	800922e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800922c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6859      	ldr	r1, [r3, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <HAL_I2C_Init+0x134>)
 800923a:	430b      	orrs	r3, r1
 800923c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800924c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691a      	ldr	r2, [r3, #16]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	69d9      	ldr	r1, [r3, #28]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1a      	ldr	r2, [r3, #32]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	02008000 	.word	0x02008000

080092b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	607a      	str	r2, [r7, #4]
 80092be:	461a      	mov	r2, r3
 80092c0:	460b      	mov	r3, r1
 80092c2:	817b      	strh	r3, [r7, #10]
 80092c4:	4613      	mov	r3, r2
 80092c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	f040 80fd 	bne.w	80094d0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d101      	bne.n	80092e4 <HAL_I2C_Master_Transmit+0x30>
 80092e0:	2302      	movs	r3, #2
 80092e2:	e0f6      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x21e>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092ec:	f7fa fdf4 	bl	8003ed8 <HAL_GetTick>
 80092f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2319      	movs	r3, #25
 80092f8:	2201      	movs	r2, #1
 80092fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 fa0a 	bl	8009718 <I2C_WaitOnFlagUntilTimeout>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e0e1      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2221      	movs	r2, #33	; 0x21
 8009312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2210      	movs	r2, #16
 800931a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	893a      	ldrh	r2, [r7, #8]
 800932e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933a:	b29b      	uxth	r3, r3
 800933c:	2bff      	cmp	r3, #255	; 0xff
 800933e:	d906      	bls.n	800934e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	22ff      	movs	r2, #255	; 0xff
 8009344:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	e007      	b.n	800935e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800935c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	d024      	beq.n	80093b0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	781a      	ldrb	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938e:	3b01      	subs	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800939a:	b2db      	uxtb	r3, r3
 800939c:	3301      	adds	r3, #1
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	8979      	ldrh	r1, [r7, #10]
 80093a2:	4b4e      	ldr	r3, [pc, #312]	; (80094dc <HAL_I2C_Master_Transmit+0x228>)
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fc05 	bl	8009bb8 <I2C_TransferConfig>
 80093ae:	e066      	b.n	800947e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	8979      	ldrh	r1, [r7, #10]
 80093b8:	4b48      	ldr	r3, [pc, #288]	; (80094dc <HAL_I2C_Master_Transmit+0x228>)
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fbfa 	bl	8009bb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80093c4:	e05b      	b.n	800947e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	6a39      	ldr	r1, [r7, #32]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f9fd 	bl	80097ca <I2C_WaitOnTXISFlagUntilTimeout>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e07b      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009402:	3b01      	subs	r3, #1
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940e:	b29b      	uxth	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d034      	beq.n	800947e <HAL_I2C_Master_Transmit+0x1ca>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009418:	2b00      	cmp	r3, #0
 800941a:	d130      	bne.n	800947e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	2200      	movs	r2, #0
 8009424:	2180      	movs	r1, #128	; 0x80
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 f976 	bl	8009718 <I2C_WaitOnFlagUntilTimeout>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e04d      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943a:	b29b      	uxth	r3, r3
 800943c:	2bff      	cmp	r3, #255	; 0xff
 800943e:	d90e      	bls.n	800945e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	22ff      	movs	r2, #255	; 0xff
 8009444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944a:	b2da      	uxtb	r2, r3
 800944c:	8979      	ldrh	r1, [r7, #10]
 800944e:	2300      	movs	r3, #0
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fbae 	bl	8009bb8 <I2C_TransferConfig>
 800945c:	e00f      	b.n	800947e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946c:	b2da      	uxtb	r2, r3
 800946e:	8979      	ldrh	r1, [r7, #10]
 8009470:	2300      	movs	r3, #0
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fb9d 	bl	8009bb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009482:	b29b      	uxth	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d19e      	bne.n	80093c6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	6a39      	ldr	r1, [r7, #32]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 f9e3 	bl	8009858 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e01a      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2220      	movs	r2, #32
 80094a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6859      	ldr	r1, [r3, #4]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4b0c      	ldr	r3, [pc, #48]	; (80094e0 <HAL_I2C_Master_Transmit+0x22c>)
 80094b0:	400b      	ands	r3, r1
 80094b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	e000      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80094d0:	2302      	movs	r3, #2
  }
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	80002000 	.word	0x80002000
 80094e0:	fe00e800 	.word	0xfe00e800

080094e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af02      	add	r7, sp, #8
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	461a      	mov	r2, r3
 80094f0:	460b      	mov	r3, r1
 80094f2:	817b      	strh	r3, [r7, #10]
 80094f4:	4613      	mov	r3, r2
 80094f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b20      	cmp	r3, #32
 8009502:	f040 80db 	bne.w	80096bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800950c:	2b01      	cmp	r3, #1
 800950e:	d101      	bne.n	8009514 <HAL_I2C_Master_Receive+0x30>
 8009510:	2302      	movs	r3, #2
 8009512:	e0d4      	b.n	80096be <HAL_I2C_Master_Receive+0x1da>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800951c:	f7fa fcdc 	bl	8003ed8 <HAL_GetTick>
 8009520:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	2319      	movs	r3, #25
 8009528:	2201      	movs	r2, #1
 800952a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 f8f2 	bl	8009718 <I2C_WaitOnFlagUntilTimeout>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e0bf      	b.n	80096be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2222      	movs	r2, #34	; 0x22
 8009542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2210      	movs	r2, #16
 800954a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	893a      	ldrh	r2, [r7, #8]
 800955e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956a:	b29b      	uxth	r3, r3
 800956c:	2bff      	cmp	r3, #255	; 0xff
 800956e:	d90e      	bls.n	800958e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	22ff      	movs	r2, #255	; 0xff
 8009574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957a:	b2da      	uxtb	r2, r3
 800957c:	8979      	ldrh	r1, [r7, #10]
 800957e:	4b52      	ldr	r3, [pc, #328]	; (80096c8 <HAL_I2C_Master_Receive+0x1e4>)
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fb16 	bl	8009bb8 <I2C_TransferConfig>
 800958c:	e06d      	b.n	800966a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009592:	b29a      	uxth	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959c:	b2da      	uxtb	r2, r3
 800959e:	8979      	ldrh	r1, [r7, #10]
 80095a0:	4b49      	ldr	r3, [pc, #292]	; (80096c8 <HAL_I2C_Master_Receive+0x1e4>)
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fb05 	bl	8009bb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80095ae:	e05c      	b.n	800966a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	6a39      	ldr	r1, [r7, #32]
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f993 	bl	80098e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e07c      	b.n	80096be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e0:	3b01      	subs	r3, #1
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d034      	beq.n	800966a <HAL_I2C_Master_Receive+0x186>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009604:	2b00      	cmp	r3, #0
 8009606:	d130      	bne.n	800966a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	2200      	movs	r2, #0
 8009610:	2180      	movs	r1, #128	; 0x80
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f880 	bl	8009718 <I2C_WaitOnFlagUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e04d      	b.n	80096be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009626:	b29b      	uxth	r3, r3
 8009628:	2bff      	cmp	r3, #255	; 0xff
 800962a:	d90e      	bls.n	800964a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	22ff      	movs	r2, #255	; 0xff
 8009630:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009636:	b2da      	uxtb	r2, r3
 8009638:	8979      	ldrh	r1, [r7, #10]
 800963a:	2300      	movs	r3, #0
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fab8 	bl	8009bb8 <I2C_TransferConfig>
 8009648:	e00f      	b.n	800966a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	b2da      	uxtb	r2, r3
 800965a:	8979      	ldrh	r1, [r7, #10]
 800965c:	2300      	movs	r3, #0
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 faa7 	bl	8009bb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d19d      	bne.n	80095b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	6a39      	ldr	r1, [r7, #32]
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f8ed 	bl	8009858 <I2C_WaitOnSTOPFlagUntilTimeout>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e01a      	b.n	80096be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2220      	movs	r2, #32
 800968e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6859      	ldr	r1, [r3, #4]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <HAL_I2C_Master_Receive+0x1e8>)
 800969c:	400b      	ands	r3, r1
 800969e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	e000      	b.n	80096be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80096bc:	2302      	movs	r3, #2
  }
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	80002400 	.word	0x80002400
 80096cc:	fe00e800 	.word	0xfe00e800

080096d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d103      	bne.n	80096ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2200      	movs	r2, #0
 80096ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d007      	beq.n	800970c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699a      	ldr	r2, [r3, #24]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	619a      	str	r2, [r3, #24]
  }
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	4613      	mov	r3, r2
 8009726:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009728:	e03b      	b.n	80097a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 f962 	bl	80099f8 <I2C_IsErrorOccurred>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e041      	b.n	80097c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009744:	d02d      	beq.n	80097a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009746:	f7fa fbc7 	bl	8003ed8 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d302      	bcc.n	800975c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d122      	bne.n	80097a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699a      	ldr	r2, [r3, #24]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	4013      	ands	r3, r2
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	429a      	cmp	r2, r3
 800976a:	bf0c      	ite	eq
 800976c:	2301      	moveq	r3, #1
 800976e:	2300      	movne	r3, #0
 8009770:	b2db      	uxtb	r3, r3
 8009772:	461a      	mov	r2, r3
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	429a      	cmp	r2, r3
 8009778:	d113      	bne.n	80097a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977e:	f043 0220 	orr.w	r2, r3, #32
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2220      	movs	r2, #32
 800978a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e00f      	b.n	80097c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	699a      	ldr	r2, [r3, #24]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	4013      	ands	r3, r2
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	bf0c      	ite	eq
 80097b2:	2301      	moveq	r3, #1
 80097b4:	2300      	movne	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d0b4      	beq.n	800972a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	60f8      	str	r0, [r7, #12]
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097d6:	e033      	b.n	8009840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	68b9      	ldr	r1, [r7, #8]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 f90b 	bl	80099f8 <I2C_IsErrorOccurred>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e031      	b.n	8009850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f2:	d025      	beq.n	8009840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097f4:	f7fa fb70 	bl	8003ed8 <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	429a      	cmp	r2, r3
 8009802:	d302      	bcc.n	800980a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d11a      	bne.n	8009840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b02      	cmp	r3, #2
 8009816:	d013      	beq.n	8009840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981c:	f043 0220 	orr.w	r2, r3, #32
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e007      	b.n	8009850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b02      	cmp	r3, #2
 800984c:	d1c4      	bne.n	80097d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009864:	e02f      	b.n	80098c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f8c4 	bl	80099f8 <I2C_IsErrorOccurred>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e02d      	b.n	80098d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800987a:	f7fa fb2d 	bl	8003ed8 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	429a      	cmp	r2, r3
 8009888:	d302      	bcc.n	8009890 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d11a      	bne.n	80098c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	f003 0320 	and.w	r3, r3, #32
 800989a:	2b20      	cmp	r3, #32
 800989c:	d013      	beq.n	80098c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a2:	f043 0220 	orr.w	r2, r3, #32
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e007      	b.n	80098d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b20      	cmp	r3, #32
 80098d2:	d1c8      	bne.n	8009866 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80098f0:	e071      	b.n	80099d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	68b9      	ldr	r1, [r7, #8]
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 f87e 	bl	80099f8 <I2C_IsErrorOccurred>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	f003 0320 	and.w	r3, r3, #32
 8009910:	2b20      	cmp	r3, #32
 8009912:	d13b      	bne.n	800998c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d138      	bne.n	800998c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b04      	cmp	r3, #4
 8009926:	d105      	bne.n	8009934 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	f003 0310 	and.w	r3, r3, #16
 800993e:	2b10      	cmp	r3, #16
 8009940:	d121      	bne.n	8009986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2210      	movs	r2, #16
 8009948:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2204      	movs	r2, #4
 800994e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2220      	movs	r2, #32
 8009956:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6859      	ldr	r1, [r3, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b24      	ldr	r3, [pc, #144]	; (80099f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009964:	400b      	ands	r3, r1
 8009966:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2220      	movs	r2, #32
 800996c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	75fb      	strb	r3, [r7, #23]
 8009984:	e002      	b.n	800998c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800998c:	f7fa faa4 	bl	8003ed8 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	429a      	cmp	r2, r3
 800999a:	d302      	bcc.n	80099a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d119      	bne.n	80099d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d116      	bne.n	80099d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d00f      	beq.n	80099d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ba:	f043 0220 	orr.w	r2, r3, #32
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d002      	beq.n	80099ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d083      	beq.n	80098f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	fe00e800 	.word	0xfe00e800

080099f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08a      	sub	sp, #40	; 0x28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	f003 0310 	and.w	r3, r3, #16
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d068      	beq.n	8009af6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2210      	movs	r2, #16
 8009a2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a2c:	e049      	b.n	8009ac2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a34:	d045      	beq.n	8009ac2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a36:	f7fa fa4f 	bl	8003ed8 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d302      	bcc.n	8009a4c <I2C_IsErrorOccurred+0x54>
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d13a      	bne.n	8009ac2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a6e:	d121      	bne.n	8009ab4 <I2C_IsErrorOccurred+0xbc>
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a76:	d01d      	beq.n	8009ab4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a78:	7cfb      	ldrb	r3, [r7, #19]
 8009a7a:	2b20      	cmp	r3, #32
 8009a7c:	d01a      	beq.n	8009ab4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a8e:	f7fa fa23 	bl	8003ed8 <HAL_GetTick>
 8009a92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a94:	e00e      	b.n	8009ab4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a96:	f7fa fa1f 	bl	8003ed8 <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b19      	cmp	r3, #25
 8009aa2:	d907      	bls.n	8009ab4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	f043 0320 	orr.w	r3, r3, #32
 8009aaa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009ab2:	e006      	b.n	8009ac2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d1e9      	bne.n	8009a96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b20      	cmp	r3, #32
 8009ace:	d003      	beq.n	8009ad8 <I2C_IsErrorOccurred+0xe0>
 8009ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0aa      	beq.n	8009a2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d103      	bne.n	8009ae8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	f043 0304 	orr.w	r3, r3, #4
 8009aee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	f043 0301 	orr.w	r3, r3, #1
 8009b0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00b      	beq.n	8009b42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	f043 0308 	orr.w	r3, r3, #8
 8009b30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	f043 0302 	orr.w	r3, r3, #2
 8009b52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01c      	beq.n	8009ba6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7ff fdaf 	bl	80096d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6859      	ldr	r1, [r3, #4]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <I2C_IsErrorOccurred+0x1bc>)
 8009b7e:	400b      	ands	r3, r1
 8009b80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3728      	adds	r7, #40	; 0x28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	fe00e800 	.word	0xfe00e800

08009bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	607b      	str	r3, [r7, #4]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	817b      	strh	r3, [r7, #10]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bca:	897b      	ldrh	r3, [r7, #10]
 8009bcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bd0:	7a7b      	ldrb	r3, [r7, #9]
 8009bd2:	041b      	lsls	r3, r3, #16
 8009bd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009be6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	0d5b      	lsrs	r3, r3, #21
 8009bf2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009bf6:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <I2C_TransferConfig+0x60>)
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	ea02 0103 	and.w	r1, r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c0a:	bf00      	nop
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	03ff63ff 	.word	0x03ff63ff

08009c1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b20      	cmp	r3, #32
 8009c30:	d138      	bne.n	8009ca4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e032      	b.n	8009ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2224      	movs	r2, #36	; 0x24
 8009c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0201 	bic.w	r2, r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6819      	ldr	r1, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0201 	orr.w	r2, r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ca4:	2302      	movs	r3, #2
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b085      	sub	sp, #20
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d139      	bne.n	8009d3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e033      	b.n	8009d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2224      	movs	r2, #36	; 0x24
 8009ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0201 	bic.w	r2, r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0201 	orr.w	r2, r2, #1
 8009d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e000      	b.n	8009d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d3c:	2302      	movs	r3, #2
  }
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
	...

08009d4c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d54:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d5a:	4a0c      	ldr	r2, [pc, #48]	; (8009d8c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009d5c:	f043 0302 	orr.w	r3, r3, #2
 8009d60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009d64:	4b09      	ldr	r3, [pc, #36]	; (8009d8c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009d72:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4906      	ldr	r1, [pc, #24]	; (8009d90 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	604b      	str	r3, [r1, #4]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	58024400 	.word	0x58024400
 8009d90:	58000400 	.word	0x58000400

08009d94 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009da0:	4b18      	ldr	r3, [pc, #96]	; (8009e04 <HAL_PWR_EnterSTOPMode+0x70>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f023 0201 	bic.w	r2, r3, #1
 8009da8:	4916      	ldr	r1, [pc, #88]	; (8009e04 <HAL_PWR_EnterSTOPMode+0x70>)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009db0:	4b14      	ldr	r3, [pc, #80]	; (8009e04 <HAL_PWR_EnterSTOPMode+0x70>)
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	4a13      	ldr	r2, [pc, #76]	; (8009e04 <HAL_PWR_EnterSTOPMode+0x70>)
 8009db6:	f023 0305 	bic.w	r3, r3, #5
 8009dba:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009dbc:	4b11      	ldr	r3, [pc, #68]	; (8009e04 <HAL_PWR_EnterSTOPMode+0x70>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	4a10      	ldr	r2, [pc, #64]	; (8009e04 <HAL_PWR_EnterSTOPMode+0x70>)
 8009dc2:	f023 0302 	bic.w	r3, r3, #2
 8009dc6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009dc8:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <HAL_PWR_EnterSTOPMode+0x74>)
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	4a0e      	ldr	r2, [pc, #56]	; (8009e08 <HAL_PWR_EnterSTOPMode+0x74>)
 8009dce:	f043 0304 	orr.w	r3, r3, #4
 8009dd2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009dd4:	f3bf 8f4f 	dsb	sy
}
 8009dd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009dda:	f3bf 8f6f 	isb	sy
}
 8009dde:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009de6:	bf30      	wfi
 8009de8:	e000      	b.n	8009dec <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009dea:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009dec:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <HAL_PWR_EnterSTOPMode+0x74>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	4a05      	ldr	r2, [pc, #20]	; (8009e08 <HAL_PWR_EnterSTOPMode+0x74>)
 8009df2:	f023 0304 	bic.w	r3, r3, #4
 8009df6:	6113      	str	r3, [r2, #16]
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	58024800 	.word	0x58024800
 8009e08:	e000ed00 	.word	0xe000ed00

08009e0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e14:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <HAL_PWREx_ConfigSupply+0x70>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d00a      	beq.n	8009e36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e20:	4b16      	ldr	r3, [pc, #88]	; (8009e7c <HAL_PWREx_ConfigSupply+0x70>)
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f003 0307 	and.w	r3, r3, #7
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d001      	beq.n	8009e32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e01f      	b.n	8009e72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	e01d      	b.n	8009e72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e36:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <HAL_PWREx_ConfigSupply+0x70>)
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	f023 0207 	bic.w	r2, r3, #7
 8009e3e:	490f      	ldr	r1, [pc, #60]	; (8009e7c <HAL_PWREx_ConfigSupply+0x70>)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009e46:	f7fa f847 	bl	8003ed8 <HAL_GetTick>
 8009e4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e4c:	e009      	b.n	8009e62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009e4e:	f7fa f843 	bl	8003ed8 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e5c:	d901      	bls.n	8009e62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e007      	b.n	8009e72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e62:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <HAL_PWREx_ConfigSupply+0x70>)
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e6e:	d1ee      	bne.n	8009e4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	58024800 	.word	0x58024800

08009e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08c      	sub	sp, #48	; 0x30
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f000 bc48 	b.w	800a724 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8088 	beq.w	8009fb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ea2:	4b99      	ldr	r3, [pc, #612]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009eac:	4b96      	ldr	r3, [pc, #600]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	2b10      	cmp	r3, #16
 8009eb6:	d007      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x48>
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	2b18      	cmp	r3, #24
 8009ebc:	d111      	bne.n	8009ee2 <HAL_RCC_OscConfig+0x62>
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d10c      	bne.n	8009ee2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ec8:	4b8f      	ldr	r3, [pc, #572]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d06d      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x130>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d169      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	f000 bc21 	b.w	800a724 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eea:	d106      	bne.n	8009efa <HAL_RCC_OscConfig+0x7a>
 8009eec:	4b86      	ldr	r3, [pc, #536]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a85      	ldr	r2, [pc, #532]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	e02e      	b.n	8009f58 <HAL_RCC_OscConfig+0xd8>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10c      	bne.n	8009f1c <HAL_RCC_OscConfig+0x9c>
 8009f02:	4b81      	ldr	r3, [pc, #516]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a80      	ldr	r2, [pc, #512]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	4b7e      	ldr	r3, [pc, #504]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a7d      	ldr	r2, [pc, #500]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	e01d      	b.n	8009f58 <HAL_RCC_OscConfig+0xd8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f24:	d10c      	bne.n	8009f40 <HAL_RCC_OscConfig+0xc0>
 8009f26:	4b78      	ldr	r3, [pc, #480]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a77      	ldr	r2, [pc, #476]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	4b75      	ldr	r3, [pc, #468]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a74      	ldr	r2, [pc, #464]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f3c:	6013      	str	r3, [r2, #0]
 8009f3e:	e00b      	b.n	8009f58 <HAL_RCC_OscConfig+0xd8>
 8009f40:	4b71      	ldr	r3, [pc, #452]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a70      	ldr	r2, [pc, #448]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	4b6e      	ldr	r3, [pc, #440]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a6d      	ldr	r2, [pc, #436]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d013      	beq.n	8009f88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f60:	f7f9 ffba 	bl	8003ed8 <HAL_GetTick>
 8009f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f66:	e008      	b.n	8009f7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f68:	f7f9 ffb6 	bl	8003ed8 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b64      	cmp	r3, #100	; 0x64
 8009f74:	d901      	bls.n	8009f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e3d4      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f7a:	4b63      	ldr	r3, [pc, #396]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0f0      	beq.n	8009f68 <HAL_RCC_OscConfig+0xe8>
 8009f86:	e014      	b.n	8009fb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f88:	f7f9 ffa6 	bl	8003ed8 <HAL_GetTick>
 8009f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f90:	f7f9 ffa2 	bl	8003ed8 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b64      	cmp	r3, #100	; 0x64
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e3c0      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fa2:	4b59      	ldr	r3, [pc, #356]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1f0      	bne.n	8009f90 <HAL_RCC_OscConfig+0x110>
 8009fae:	e000      	b.n	8009fb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0302 	and.w	r3, r3, #2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80ca 	beq.w	800a154 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fc0:	4b51      	ldr	r3, [pc, #324]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fca:	4b4f      	ldr	r3, [pc, #316]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d007      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x166>
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	2b18      	cmp	r3, #24
 8009fda:	d156      	bne.n	800a08a <HAL_RCC_OscConfig+0x20a>
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f003 0303 	and.w	r3, r3, #3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d151      	bne.n	800a08a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fe6:	4b48      	ldr	r3, [pc, #288]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d005      	beq.n	8009ffe <HAL_RCC_OscConfig+0x17e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e392      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ffe:	4b42      	ldr	r3, [pc, #264]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f023 0219 	bic.w	r2, r3, #25
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	493f      	ldr	r1, [pc, #252]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7f9 ff62 	bl	8003ed8 <HAL_GetTick>
 800a014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a018:	f7f9 ff5e 	bl	8003ed8 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e37c      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a02a:	4b37      	ldr	r3, [pc, #220]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a036:	f7f9 ff5b 	bl	8003ef0 <HAL_GetREVID>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a040:	4293      	cmp	r3, r2
 800a042:	d817      	bhi.n	800a074 <HAL_RCC_OscConfig+0x1f4>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d108      	bne.n	800a05e <HAL_RCC_OscConfig+0x1de>
 800a04c:	4b2e      	ldr	r3, [pc, #184]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a054:	4a2c      	ldr	r2, [pc, #176]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a05a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a05c:	e07a      	b.n	800a154 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a05e:	4b2a      	ldr	r3, [pc, #168]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	031b      	lsls	r3, r3, #12
 800a06c:	4926      	ldr	r1, [pc, #152]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a072:	e06f      	b.n	800a154 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a074:	4b24      	ldr	r3, [pc, #144]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	061b      	lsls	r3, r3, #24
 800a082:	4921      	ldr	r1, [pc, #132]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a084:	4313      	orrs	r3, r2
 800a086:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a088:	e064      	b.n	800a154 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d047      	beq.n	800a122 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a092:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f023 0219 	bic.w	r2, r3, #25
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	491a      	ldr	r1, [pc, #104]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a4:	f7f9 ff18 	bl	8003ed8 <HAL_GetTick>
 800a0a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0aa:	e008      	b.n	800a0be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0ac:	f7f9 ff14 	bl	8003ed8 <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e332      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0be:	4b12      	ldr	r3, [pc, #72]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0304 	and.w	r3, r3, #4
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0f0      	beq.n	800a0ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0ca:	f7f9 ff11 	bl	8003ef0 <HAL_GetREVID>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d819      	bhi.n	800a10c <HAL_RCC_OscConfig+0x28c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	d108      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x272>
 800a0e0:	4b09      	ldr	r3, [pc, #36]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0e8:	4a07      	ldr	r2, [pc, #28]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a0ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ee:	6053      	str	r3, [r2, #4]
 800a0f0:	e030      	b.n	800a154 <HAL_RCC_OscConfig+0x2d4>
 800a0f2:	4b05      	ldr	r3, [pc, #20]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	031b      	lsls	r3, r3, #12
 800a100:	4901      	ldr	r1, [pc, #4]	; (800a108 <HAL_RCC_OscConfig+0x288>)
 800a102:	4313      	orrs	r3, r2
 800a104:	604b      	str	r3, [r1, #4]
 800a106:	e025      	b.n	800a154 <HAL_RCC_OscConfig+0x2d4>
 800a108:	58024400 	.word	0x58024400
 800a10c:	4b9a      	ldr	r3, [pc, #616]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	061b      	lsls	r3, r3, #24
 800a11a:	4997      	ldr	r1, [pc, #604]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	604b      	str	r3, [r1, #4]
 800a120:	e018      	b.n	800a154 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a122:	4b95      	ldr	r3, [pc, #596]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a94      	ldr	r2, [pc, #592]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a128:	f023 0301 	bic.w	r3, r3, #1
 800a12c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a12e:	f7f9 fed3 	bl	8003ed8 <HAL_GetTick>
 800a132:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a134:	e008      	b.n	800a148 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a136:	f7f9 fecf 	bl	8003ed8 <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d901      	bls.n	800a148 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e2ed      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a148:	4b8b      	ldr	r3, [pc, #556]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1f0      	bne.n	800a136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0310 	and.w	r3, r3, #16
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 80a9 	beq.w	800a2b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a162:	4b85      	ldr	r3, [pc, #532]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a16a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a16c:	4b82      	ldr	r3, [pc, #520]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a170:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	2b08      	cmp	r3, #8
 800a176:	d007      	beq.n	800a188 <HAL_RCC_OscConfig+0x308>
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	2b18      	cmp	r3, #24
 800a17c:	d13a      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x374>
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f003 0303 	and.w	r3, r3, #3
 800a184:	2b01      	cmp	r3, #1
 800a186:	d135      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a188:	4b7b      	ldr	r3, [pc, #492]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x320>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	2b80      	cmp	r3, #128	; 0x80
 800a19a:	d001      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e2c1      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1a0:	f7f9 fea6 	bl	8003ef0 <HAL_GetREVID>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d817      	bhi.n	800a1de <HAL_RCC_OscConfig+0x35e>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d108      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x348>
 800a1b6:	4b70      	ldr	r3, [pc, #448]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a1be:	4a6e      	ldr	r2, [pc, #440]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a1c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1c6:	e075      	b.n	800a2b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1c8:	4b6b      	ldr	r3, [pc, #428]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	069b      	lsls	r3, r3, #26
 800a1d6:	4968      	ldr	r1, [pc, #416]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1dc:	e06a      	b.n	800a2b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1de:	4b66      	ldr	r3, [pc, #408]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	061b      	lsls	r3, r3, #24
 800a1ec:	4962      	ldr	r1, [pc, #392]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1f2:	e05f      	b.n	800a2b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d042      	beq.n	800a282 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a1fc:	4b5e      	ldr	r3, [pc, #376]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a5d      	ldr	r2, [pc, #372]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a208:	f7f9 fe66 	bl	8003ed8 <HAL_GetTick>
 800a20c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a20e:	e008      	b.n	800a222 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a210:	f7f9 fe62 	bl	8003ed8 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e280      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a222:	4b55      	ldr	r3, [pc, #340]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a22e:	f7f9 fe5f 	bl	8003ef0 <HAL_GetREVID>
 800a232:	4603      	mov	r3, r0
 800a234:	f241 0203 	movw	r2, #4099	; 0x1003
 800a238:	4293      	cmp	r3, r2
 800a23a:	d817      	bhi.n	800a26c <HAL_RCC_OscConfig+0x3ec>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	2b20      	cmp	r3, #32
 800a242:	d108      	bne.n	800a256 <HAL_RCC_OscConfig+0x3d6>
 800a244:	4b4c      	ldr	r3, [pc, #304]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a24c:	4a4a      	ldr	r2, [pc, #296]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a24e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a252:	6053      	str	r3, [r2, #4]
 800a254:	e02e      	b.n	800a2b4 <HAL_RCC_OscConfig+0x434>
 800a256:	4b48      	ldr	r3, [pc, #288]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	069b      	lsls	r3, r3, #26
 800a264:	4944      	ldr	r1, [pc, #272]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a266:	4313      	orrs	r3, r2
 800a268:	604b      	str	r3, [r1, #4]
 800a26a:	e023      	b.n	800a2b4 <HAL_RCC_OscConfig+0x434>
 800a26c:	4b42      	ldr	r3, [pc, #264]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	061b      	lsls	r3, r3, #24
 800a27a:	493f      	ldr	r1, [pc, #252]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60cb      	str	r3, [r1, #12]
 800a280:	e018      	b.n	800a2b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a282:	4b3d      	ldr	r3, [pc, #244]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a3c      	ldr	r2, [pc, #240]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a28c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28e:	f7f9 fe23 	bl	8003ed8 <HAL_GetTick>
 800a292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a294:	e008      	b.n	800a2a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a296:	f7f9 fe1f 	bl	8003ed8 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e23d      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2a8:	4b33      	ldr	r3, [pc, #204]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1f0      	bne.n	800a296 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0308 	and.w	r3, r3, #8
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d036      	beq.n	800a32e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d019      	beq.n	800a2fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2c8:	4b2b      	ldr	r3, [pc, #172]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a2ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2cc:	4a2a      	ldr	r2, [pc, #168]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a2ce:	f043 0301 	orr.w	r3, r3, #1
 800a2d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2d4:	f7f9 fe00 	bl	8003ed8 <HAL_GetTick>
 800a2d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2da:	e008      	b.n	800a2ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2dc:	f7f9 fdfc 	bl	8003ed8 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d901      	bls.n	800a2ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e21a      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2ee:	4b22      	ldr	r3, [pc, #136]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a2f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0f0      	beq.n	800a2dc <HAL_RCC_OscConfig+0x45c>
 800a2fa:	e018      	b.n	800a32e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2fc:	4b1e      	ldr	r3, [pc, #120]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a300:	4a1d      	ldr	r2, [pc, #116]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a302:	f023 0301 	bic.w	r3, r3, #1
 800a306:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a308:	f7f9 fde6 	bl	8003ed8 <HAL_GetTick>
 800a30c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a310:	f7f9 fde2 	bl	8003ed8 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e200      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a322:	4b15      	ldr	r3, [pc, #84]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1f0      	bne.n	800a310 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0320 	and.w	r3, r3, #32
 800a336:	2b00      	cmp	r3, #0
 800a338:	d039      	beq.n	800a3ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d01c      	beq.n	800a37c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a342:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a0c      	ldr	r2, [pc, #48]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a34c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a34e:	f7f9 fdc3 	bl	8003ed8 <HAL_GetTick>
 800a352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a354:	e008      	b.n	800a368 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a356:	f7f9 fdbf 	bl	8003ed8 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e1dd      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a368:	4b03      	ldr	r3, [pc, #12]	; (800a378 <HAL_RCC_OscConfig+0x4f8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0f0      	beq.n	800a356 <HAL_RCC_OscConfig+0x4d6>
 800a374:	e01b      	b.n	800a3ae <HAL_RCC_OscConfig+0x52e>
 800a376:	bf00      	nop
 800a378:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a37c:	4b9b      	ldr	r3, [pc, #620]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a9a      	ldr	r2, [pc, #616]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a386:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a388:	f7f9 fda6 	bl	8003ed8 <HAL_GetTick>
 800a38c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a38e:	e008      	b.n	800a3a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a390:	f7f9 fda2 	bl	8003ed8 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e1c0      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3a2:	4b92      	ldr	r3, [pc, #584]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f0      	bne.n	800a390 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 8081 	beq.w	800a4be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a3bc:	4b8c      	ldr	r3, [pc, #560]	; (800a5f0 <HAL_RCC_OscConfig+0x770>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a8b      	ldr	r2, [pc, #556]	; (800a5f0 <HAL_RCC_OscConfig+0x770>)
 800a3c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3c8:	f7f9 fd86 	bl	8003ed8 <HAL_GetTick>
 800a3cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3ce:	e008      	b.n	800a3e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3d0:	f7f9 fd82 	bl	8003ed8 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b64      	cmp	r3, #100	; 0x64
 800a3dc:	d901      	bls.n	800a3e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e1a0      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3e2:	4b83      	ldr	r3, [pc, #524]	; (800a5f0 <HAL_RCC_OscConfig+0x770>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0f0      	beq.n	800a3d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d106      	bne.n	800a404 <HAL_RCC_OscConfig+0x584>
 800a3f6:	4b7d      	ldr	r3, [pc, #500]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fa:	4a7c      	ldr	r2, [pc, #496]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a3fc:	f043 0301 	orr.w	r3, r3, #1
 800a400:	6713      	str	r3, [r2, #112]	; 0x70
 800a402:	e02d      	b.n	800a460 <HAL_RCC_OscConfig+0x5e0>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10c      	bne.n	800a426 <HAL_RCC_OscConfig+0x5a6>
 800a40c:	4b77      	ldr	r3, [pc, #476]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a410:	4a76      	ldr	r2, [pc, #472]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a412:	f023 0301 	bic.w	r3, r3, #1
 800a416:	6713      	str	r3, [r2, #112]	; 0x70
 800a418:	4b74      	ldr	r3, [pc, #464]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41c:	4a73      	ldr	r2, [pc, #460]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a41e:	f023 0304 	bic.w	r3, r3, #4
 800a422:	6713      	str	r3, [r2, #112]	; 0x70
 800a424:	e01c      	b.n	800a460 <HAL_RCC_OscConfig+0x5e0>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	2b05      	cmp	r3, #5
 800a42c:	d10c      	bne.n	800a448 <HAL_RCC_OscConfig+0x5c8>
 800a42e:	4b6f      	ldr	r3, [pc, #444]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a432:	4a6e      	ldr	r2, [pc, #440]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a434:	f043 0304 	orr.w	r3, r3, #4
 800a438:	6713      	str	r3, [r2, #112]	; 0x70
 800a43a:	4b6c      	ldr	r3, [pc, #432]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43e:	4a6b      	ldr	r2, [pc, #428]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	6713      	str	r3, [r2, #112]	; 0x70
 800a446:	e00b      	b.n	800a460 <HAL_RCC_OscConfig+0x5e0>
 800a448:	4b68      	ldr	r3, [pc, #416]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a44c:	4a67      	ldr	r2, [pc, #412]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a44e:	f023 0301 	bic.w	r3, r3, #1
 800a452:	6713      	str	r3, [r2, #112]	; 0x70
 800a454:	4b65      	ldr	r3, [pc, #404]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a458:	4a64      	ldr	r2, [pc, #400]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a45a:	f023 0304 	bic.w	r3, r3, #4
 800a45e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d015      	beq.n	800a494 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a468:	f7f9 fd36 	bl	8003ed8 <HAL_GetTick>
 800a46c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a46e:	e00a      	b.n	800a486 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a470:	f7f9 fd32 	bl	8003ed8 <HAL_GetTick>
 800a474:	4602      	mov	r2, r0
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a47e:	4293      	cmp	r3, r2
 800a480:	d901      	bls.n	800a486 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e14e      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a486:	4b59      	ldr	r3, [pc, #356]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0ee      	beq.n	800a470 <HAL_RCC_OscConfig+0x5f0>
 800a492:	e014      	b.n	800a4be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a494:	f7f9 fd20 	bl	8003ed8 <HAL_GetTick>
 800a498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a49a:	e00a      	b.n	800a4b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a49c:	f7f9 fd1c 	bl	8003ed8 <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d901      	bls.n	800a4b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e138      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a4b2:	4b4e      	ldr	r3, [pc, #312]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1ee      	bne.n	800a49c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 812d 	beq.w	800a722 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a4c8:	4b48      	ldr	r3, [pc, #288]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4d0:	2b18      	cmp	r3, #24
 800a4d2:	f000 80bd 	beq.w	800a650 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	f040 809e 	bne.w	800a61c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4e0:	4b42      	ldr	r3, [pc, #264]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a41      	ldr	r2, [pc, #260]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a4e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ec:	f7f9 fcf4 	bl	8003ed8 <HAL_GetTick>
 800a4f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4f2:	e008      	b.n	800a506 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4f4:	f7f9 fcf0 	bl	8003ed8 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e10e      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a506:	4b39      	ldr	r3, [pc, #228]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1f0      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a512:	4b36      	ldr	r3, [pc, #216]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a516:	4b37      	ldr	r3, [pc, #220]	; (800a5f4 <HAL_RCC_OscConfig+0x774>)
 800a518:	4013      	ands	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a522:	0112      	lsls	r2, r2, #4
 800a524:	430a      	orrs	r2, r1
 800a526:	4931      	ldr	r1, [pc, #196]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	628b      	str	r3, [r1, #40]	; 0x28
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a530:	3b01      	subs	r3, #1
 800a532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53a:	3b01      	subs	r3, #1
 800a53c:	025b      	lsls	r3, r3, #9
 800a53e:	b29b      	uxth	r3, r3
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	3b01      	subs	r3, #1
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a554:	3b01      	subs	r3, #1
 800a556:	061b      	lsls	r3, r3, #24
 800a558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a55c:	4923      	ldr	r1, [pc, #140]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a562:	4b22      	ldr	r3, [pc, #136]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a566:	4a21      	ldr	r2, [pc, #132]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a568:	f023 0301 	bic.w	r3, r3, #1
 800a56c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a56e:	4b1f      	ldr	r3, [pc, #124]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a572:	4b21      	ldr	r3, [pc, #132]	; (800a5f8 <HAL_RCC_OscConfig+0x778>)
 800a574:	4013      	ands	r3, r2
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a57a:	00d2      	lsls	r2, r2, #3
 800a57c:	491b      	ldr	r1, [pc, #108]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a582:	4b1a      	ldr	r3, [pc, #104]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	f023 020c 	bic.w	r2, r3, #12
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	4917      	ldr	r1, [pc, #92]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a590:	4313      	orrs	r3, r2
 800a592:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a594:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	f023 0202 	bic.w	r2, r3, #2
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a0:	4912      	ldr	r1, [pc, #72]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a5a6:	4b11      	ldr	r3, [pc, #68]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	4a10      	ldr	r2, [pc, #64]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b2:	4b0e      	ldr	r3, [pc, #56]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a5ca:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ce:	4a07      	ldr	r2, [pc, #28]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5d0:	f043 0301 	orr.w	r3, r3, #1
 800a5d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a04      	ldr	r2, [pc, #16]	; (800a5ec <HAL_RCC_OscConfig+0x76c>)
 800a5dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e2:	f7f9 fc79 	bl	8003ed8 <HAL_GetTick>
 800a5e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5e8:	e011      	b.n	800a60e <HAL_RCC_OscConfig+0x78e>
 800a5ea:	bf00      	nop
 800a5ec:	58024400 	.word	0x58024400
 800a5f0:	58024800 	.word	0x58024800
 800a5f4:	fffffc0c 	.word	0xfffffc0c
 800a5f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5fc:	f7f9 fc6c 	bl	8003ed8 <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	2b02      	cmp	r3, #2
 800a608:	d901      	bls.n	800a60e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e08a      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a60e:	4b47      	ldr	r3, [pc, #284]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0f0      	beq.n	800a5fc <HAL_RCC_OscConfig+0x77c>
 800a61a:	e082      	b.n	800a722 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a61c:	4b43      	ldr	r3, [pc, #268]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a42      	ldr	r2, [pc, #264]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a628:	f7f9 fc56 	bl	8003ed8 <HAL_GetTick>
 800a62c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a62e:	e008      	b.n	800a642 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a630:	f7f9 fc52 	bl	8003ed8 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e070      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a642:	4b3a      	ldr	r3, [pc, #232]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1f0      	bne.n	800a630 <HAL_RCC_OscConfig+0x7b0>
 800a64e:	e068      	b.n	800a722 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a650:	4b36      	ldr	r3, [pc, #216]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a656:	4b35      	ldr	r3, [pc, #212]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b01      	cmp	r3, #1
 800a662:	d031      	beq.n	800a6c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f003 0203 	and.w	r2, r3, #3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a66e:	429a      	cmp	r2, r3
 800a670:	d12a      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	091b      	lsrs	r3, r3, #4
 800a676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a67e:	429a      	cmp	r2, r3
 800a680:	d122      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a68e:	429a      	cmp	r2, r3
 800a690:	d11a      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	0a5b      	lsrs	r3, r3, #9
 800a696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d111      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	0c1b      	lsrs	r3, r3, #16
 800a6a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d108      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	0e1b      	lsrs	r3, r3, #24
 800a6ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d001      	beq.n	800a6cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e02b      	b.n	800a724 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a6cc:	4b17      	ldr	r3, [pc, #92]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d0:	08db      	lsrs	r3, r3, #3
 800a6d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d01f      	beq.n	800a722 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	4a11      	ldr	r2, [pc, #68]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a6e8:	f023 0301 	bic.w	r3, r3, #1
 800a6ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a6ee:	f7f9 fbf3 	bl	8003ed8 <HAL_GetTick>
 800a6f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a6f4:	bf00      	nop
 800a6f6:	f7f9 fbef 	bl	8003ed8 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d0f9      	beq.n	800a6f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a702:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a706:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <HAL_RCC_OscConfig+0x8b0>)
 800a708:	4013      	ands	r3, r2
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a70e:	00d2      	lsls	r2, r2, #3
 800a710:	4906      	ldr	r1, [pc, #24]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a712:	4313      	orrs	r3, r2
 800a714:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a716:	4b05      	ldr	r3, [pc, #20]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71a:	4a04      	ldr	r2, [pc, #16]	; (800a72c <HAL_RCC_OscConfig+0x8ac>)
 800a71c:	f043 0301 	orr.w	r3, r3, #1
 800a720:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3730      	adds	r7, #48	; 0x30
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	58024400 	.word	0x58024400
 800a730:	ffff0007 	.word	0xffff0007

0800a734 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e19c      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a748:	4b8a      	ldr	r3, [pc, #552]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 030f 	and.w	r3, r3, #15
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d910      	bls.n	800a778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a756:	4b87      	ldr	r3, [pc, #540]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f023 020f 	bic.w	r2, r3, #15
 800a75e:	4985      	ldr	r1, [pc, #532]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	4313      	orrs	r3, r2
 800a764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a766:	4b83      	ldr	r3, [pc, #524]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 030f 	and.w	r3, r3, #15
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	429a      	cmp	r2, r3
 800a772:	d001      	beq.n	800a778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e184      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b00      	cmp	r3, #0
 800a782:	d010      	beq.n	800a7a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	691a      	ldr	r2, [r3, #16]
 800a788:	4b7b      	ldr	r3, [pc, #492]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a790:	429a      	cmp	r2, r3
 800a792:	d908      	bls.n	800a7a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a794:	4b78      	ldr	r3, [pc, #480]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	4975      	ldr	r1, [pc, #468]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d010      	beq.n	800a7d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	695a      	ldr	r2, [r3, #20]
 800a7b6:	4b70      	ldr	r3, [pc, #448]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d908      	bls.n	800a7d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7c2:	4b6d      	ldr	r3, [pc, #436]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	496a      	ldr	r1, [pc, #424]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d010      	beq.n	800a802 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	699a      	ldr	r2, [r3, #24]
 800a7e4:	4b64      	ldr	r3, [pc, #400]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d908      	bls.n	800a802 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a7f0:	4b61      	ldr	r3, [pc, #388]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	495e      	ldr	r1, [pc, #376]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a7fe:	4313      	orrs	r3, r2
 800a800:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0320 	and.w	r3, r3, #32
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d010      	beq.n	800a830 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	69da      	ldr	r2, [r3, #28]
 800a812:	4b59      	ldr	r3, [pc, #356]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d908      	bls.n	800a830 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a81e:	4b56      	ldr	r3, [pc, #344]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	4953      	ldr	r1, [pc, #332]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d010      	beq.n	800a85e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68da      	ldr	r2, [r3, #12]
 800a840:	4b4d      	ldr	r3, [pc, #308]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	f003 030f 	and.w	r3, r3, #15
 800a848:	429a      	cmp	r2, r3
 800a84a:	d908      	bls.n	800a85e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a84c:	4b4a      	ldr	r3, [pc, #296]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	f023 020f 	bic.w	r2, r3, #15
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	4947      	ldr	r1, [pc, #284]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d055      	beq.n	800a916 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a86a:	4b43      	ldr	r3, [pc, #268]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	4940      	ldr	r1, [pc, #256]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d107      	bne.n	800a894 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a884:	4b3c      	ldr	r3, [pc, #240]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d121      	bne.n	800a8d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e0f6      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d107      	bne.n	800a8ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a89c:	4b36      	ldr	r3, [pc, #216]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d115      	bne.n	800a8d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e0ea      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d107      	bne.n	800a8c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8b4:	4b30      	ldr	r3, [pc, #192]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d109      	bne.n	800a8d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e0de      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8c4:	4b2c      	ldr	r3, [pc, #176]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e0d6      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8d4:	4b28      	ldr	r3, [pc, #160]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	f023 0207 	bic.w	r2, r3, #7
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	4925      	ldr	r1, [pc, #148]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8e6:	f7f9 faf7 	bl	8003ed8 <HAL_GetTick>
 800a8ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8ec:	e00a      	b.n	800a904 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8ee:	f7f9 faf3 	bl	8003ed8 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d901      	bls.n	800a904 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e0be      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a904:	4b1c      	ldr	r3, [pc, #112]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	429a      	cmp	r2, r3
 800a914:	d1eb      	bne.n	800a8ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0302 	and.w	r3, r3, #2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d010      	beq.n	800a944 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	4b14      	ldr	r3, [pc, #80]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	429a      	cmp	r2, r3
 800a930:	d208      	bcs.n	800a944 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a932:	4b11      	ldr	r3, [pc, #68]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	f023 020f 	bic.w	r2, r3, #15
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	490e      	ldr	r1, [pc, #56]	; (800a978 <HAL_RCC_ClockConfig+0x244>)
 800a940:	4313      	orrs	r3, r2
 800a942:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a944:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 030f 	and.w	r3, r3, #15
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d214      	bcs.n	800a97c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a952:	4b08      	ldr	r3, [pc, #32]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f023 020f 	bic.w	r2, r3, #15
 800a95a:	4906      	ldr	r1, [pc, #24]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	4313      	orrs	r3, r2
 800a960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a962:	4b04      	ldr	r3, [pc, #16]	; (800a974 <HAL_RCC_ClockConfig+0x240>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d005      	beq.n	800a97c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e086      	b.n	800aa82 <HAL_RCC_ClockConfig+0x34e>
 800a974:	52002000 	.word	0x52002000
 800a978:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	d010      	beq.n	800a9aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691a      	ldr	r2, [r3, #16]
 800a98c:	4b3f      	ldr	r3, [pc, #252]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a994:	429a      	cmp	r2, r3
 800a996:	d208      	bcs.n	800a9aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a998:	4b3c      	ldr	r3, [pc, #240]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	4939      	ldr	r1, [pc, #228]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0308 	and.w	r3, r3, #8
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d010      	beq.n	800a9d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	695a      	ldr	r2, [r3, #20]
 800a9ba:	4b34      	ldr	r3, [pc, #208]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d208      	bcs.n	800a9d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9c6:	4b31      	ldr	r3, [pc, #196]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	492e      	ldr	r1, [pc, #184]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d010      	beq.n	800aa06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	699a      	ldr	r2, [r3, #24]
 800a9e8:	4b28      	ldr	r3, [pc, #160]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d208      	bcs.n	800aa06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9f4:	4b25      	ldr	r3, [pc, #148]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	4922      	ldr	r1, [pc, #136]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0320 	and.w	r3, r3, #32
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d010      	beq.n	800aa34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	69da      	ldr	r2, [r3, #28]
 800aa16:	4b1d      	ldr	r3, [pc, #116]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d208      	bcs.n	800aa34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa22:	4b1a      	ldr	r3, [pc, #104]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	4917      	ldr	r1, [pc, #92]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa34:	f000 f834 	bl	800aaa0 <HAL_RCC_GetSysClockFreq>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	4b14      	ldr	r3, [pc, #80]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	0a1b      	lsrs	r3, r3, #8
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	4912      	ldr	r1, [pc, #72]	; (800aa90 <HAL_RCC_ClockConfig+0x35c>)
 800aa46:	5ccb      	ldrb	r3, [r1, r3]
 800aa48:	f003 031f 	and.w	r3, r3, #31
 800aa4c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa52:	4b0e      	ldr	r3, [pc, #56]	; (800aa8c <HAL_RCC_ClockConfig+0x358>)
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f003 030f 	and.w	r3, r3, #15
 800aa5a:	4a0d      	ldr	r2, [pc, #52]	; (800aa90 <HAL_RCC_ClockConfig+0x35c>)
 800aa5c:	5cd3      	ldrb	r3, [r2, r3]
 800aa5e:	f003 031f 	and.w	r3, r3, #31
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	fa22 f303 	lsr.w	r3, r2, r3
 800aa68:	4a0a      	ldr	r2, [pc, #40]	; (800aa94 <HAL_RCC_ClockConfig+0x360>)
 800aa6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa6c:	4a0a      	ldr	r2, [pc, #40]	; (800aa98 <HAL_RCC_ClockConfig+0x364>)
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aa72:	4b0a      	ldr	r3, [pc, #40]	; (800aa9c <HAL_RCC_ClockConfig+0x368>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f8 ff5c 	bl	8003934 <HAL_InitTick>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	58024400 	.word	0x58024400
 800aa90:	0801785c 	.word	0x0801785c
 800aa94:	24000090 	.word	0x24000090
 800aa98:	2400008c 	.word	0x2400008c
 800aa9c:	24000094 	.word	0x24000094

0800aaa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b089      	sub	sp, #36	; 0x24
 800aaa4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaa6:	4bb3      	ldr	r3, [pc, #716]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaae:	2b18      	cmp	r3, #24
 800aab0:	f200 8155 	bhi.w	800ad5e <HAL_RCC_GetSysClockFreq+0x2be>
 800aab4:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <HAL_RCC_GetSysClockFreq+0x1c>)
 800aab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaba:	bf00      	nop
 800aabc:	0800ab21 	.word	0x0800ab21
 800aac0:	0800ad5f 	.word	0x0800ad5f
 800aac4:	0800ad5f 	.word	0x0800ad5f
 800aac8:	0800ad5f 	.word	0x0800ad5f
 800aacc:	0800ad5f 	.word	0x0800ad5f
 800aad0:	0800ad5f 	.word	0x0800ad5f
 800aad4:	0800ad5f 	.word	0x0800ad5f
 800aad8:	0800ad5f 	.word	0x0800ad5f
 800aadc:	0800ab47 	.word	0x0800ab47
 800aae0:	0800ad5f 	.word	0x0800ad5f
 800aae4:	0800ad5f 	.word	0x0800ad5f
 800aae8:	0800ad5f 	.word	0x0800ad5f
 800aaec:	0800ad5f 	.word	0x0800ad5f
 800aaf0:	0800ad5f 	.word	0x0800ad5f
 800aaf4:	0800ad5f 	.word	0x0800ad5f
 800aaf8:	0800ad5f 	.word	0x0800ad5f
 800aafc:	0800ab4d 	.word	0x0800ab4d
 800ab00:	0800ad5f 	.word	0x0800ad5f
 800ab04:	0800ad5f 	.word	0x0800ad5f
 800ab08:	0800ad5f 	.word	0x0800ad5f
 800ab0c:	0800ad5f 	.word	0x0800ad5f
 800ab10:	0800ad5f 	.word	0x0800ad5f
 800ab14:	0800ad5f 	.word	0x0800ad5f
 800ab18:	0800ad5f 	.word	0x0800ad5f
 800ab1c:	0800ab53 	.word	0x0800ab53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab20:	4b94      	ldr	r3, [pc, #592]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d009      	beq.n	800ab40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab2c:	4b91      	ldr	r3, [pc, #580]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	08db      	lsrs	r3, r3, #3
 800ab32:	f003 0303 	and.w	r3, r3, #3
 800ab36:	4a90      	ldr	r2, [pc, #576]	; (800ad78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab38:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ab3e:	e111      	b.n	800ad64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab40:	4b8d      	ldr	r3, [pc, #564]	; (800ad78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab42:	61bb      	str	r3, [r7, #24]
      break;
 800ab44:	e10e      	b.n	800ad64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ab46:	4b8d      	ldr	r3, [pc, #564]	; (800ad7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab48:	61bb      	str	r3, [r7, #24]
      break;
 800ab4a:	e10b      	b.n	800ad64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ab4c:	4b8c      	ldr	r3, [pc, #560]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ab4e:	61bb      	str	r3, [r7, #24]
      break;
 800ab50:	e108      	b.n	800ad64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab52:	4b88      	ldr	r3, [pc, #544]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	f003 0303 	and.w	r3, r3, #3
 800ab5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ab5c:	4b85      	ldr	r3, [pc, #532]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab60:	091b      	lsrs	r3, r3, #4
 800ab62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ab68:	4b82      	ldr	r3, [pc, #520]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab72:	4b80      	ldr	r3, [pc, #512]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab76:	08db      	lsrs	r3, r3, #3
 800ab78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 80e1 	beq.w	800ad58 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	f000 8083 	beq.w	800aca4 <HAL_RCC_GetSysClockFreq+0x204>
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	f200 80a1 	bhi.w	800ace8 <HAL_RCC_GetSysClockFreq+0x248>
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_RCC_GetSysClockFreq+0x114>
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d056      	beq.n	800ac60 <HAL_RCC_GetSysClockFreq+0x1c0>
 800abb2:	e099      	b.n	800ace8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abb4:	4b6f      	ldr	r3, [pc, #444]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0320 	and.w	r3, r3, #32
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d02d      	beq.n	800ac1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc0:	4b6c      	ldr	r3, [pc, #432]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a6b      	ldr	r2, [pc, #428]	; (800ad78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	ee07 3a90 	vmov	s15, r3
 800abd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abea:	4b62      	ldr	r3, [pc, #392]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfa:	ed97 6a02 	vldr	s12, [r7, #8]
 800abfe:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ad84 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ac1a:	e087      	b.n	800ad2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ad88 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ac2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2e:	4b51      	ldr	r3, [pc, #324]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac42:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ad84 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac5e:	e065      	b.n	800ad2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ad8c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac72:	4b40      	ldr	r3, [pc, #256]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac82:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ad84 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aca2:	e043      	b.n	800ad2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ad90 <HAL_RCC_GetSysClockFreq+0x2f0>
 800acb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb6:	4b2f      	ldr	r3, [pc, #188]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800acca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ad84 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ace6:	e021      	b.n	800ad2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ad8c <HAL_RCC_GetSysClockFreq+0x2ec>
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b1e      	ldr	r3, [pc, #120]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ad84 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ad2c:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad30:	0a5b      	lsrs	r3, r3, #9
 800ad32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad36:	3301      	adds	r3, #1
 800ad38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	ee07 3a90 	vmov	s15, r3
 800ad40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad50:	ee17 3a90 	vmov	r3, s15
 800ad54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ad56:	e005      	b.n	800ad64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	61bb      	str	r3, [r7, #24]
      break;
 800ad5c:	e002      	b.n	800ad64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ad5e:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad60:	61bb      	str	r3, [r7, #24]
      break;
 800ad62:	bf00      	nop
  }

  return sysclockfreq;
 800ad64:	69bb      	ldr	r3, [r7, #24]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3724      	adds	r7, #36	; 0x24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	58024400 	.word	0x58024400
 800ad78:	03d09000 	.word	0x03d09000
 800ad7c:	003d0900 	.word	0x003d0900
 800ad80:	017d7840 	.word	0x017d7840
 800ad84:	46000000 	.word	0x46000000
 800ad88:	4c742400 	.word	0x4c742400
 800ad8c:	4a742400 	.word	0x4a742400
 800ad90:	4bbebc20 	.word	0x4bbebc20

0800ad94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad9a:	f7ff fe81 	bl	800aaa0 <HAL_RCC_GetSysClockFreq>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	4b10      	ldr	r3, [pc, #64]	; (800ade4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	0a1b      	lsrs	r3, r3, #8
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	490f      	ldr	r1, [pc, #60]	; (800ade8 <HAL_RCC_GetHCLKFreq+0x54>)
 800adac:	5ccb      	ldrb	r3, [r1, r3]
 800adae:	f003 031f 	and.w	r3, r3, #31
 800adb2:	fa22 f303 	lsr.w	r3, r2, r3
 800adb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <HAL_RCC_GetHCLKFreq+0x50>)
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	f003 030f 	and.w	r3, r3, #15
 800adc0:	4a09      	ldr	r2, [pc, #36]	; (800ade8 <HAL_RCC_GetHCLKFreq+0x54>)
 800adc2:	5cd3      	ldrb	r3, [r2, r3]
 800adc4:	f003 031f 	and.w	r3, r3, #31
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	fa22 f303 	lsr.w	r3, r2, r3
 800adce:	4a07      	ldr	r2, [pc, #28]	; (800adec <HAL_RCC_GetHCLKFreq+0x58>)
 800add0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800add2:	4a07      	ldr	r2, [pc, #28]	; (800adf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800add8:	4b04      	ldr	r3, [pc, #16]	; (800adec <HAL_RCC_GetHCLKFreq+0x58>)
 800adda:	681b      	ldr	r3, [r3, #0]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	58024400 	.word	0x58024400
 800ade8:	0801785c 	.word	0x0801785c
 800adec:	24000090 	.word	0x24000090
 800adf0:	2400008c 	.word	0x2400008c

0800adf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800adf8:	f7ff ffcc 	bl	800ad94 <HAL_RCC_GetHCLKFreq>
 800adfc:	4602      	mov	r2, r0
 800adfe:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	091b      	lsrs	r3, r3, #4
 800ae04:	f003 0307 	and.w	r3, r3, #7
 800ae08:	4904      	ldr	r1, [pc, #16]	; (800ae1c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae0a:	5ccb      	ldrb	r3, [r1, r3]
 800ae0c:	f003 031f 	and.w	r3, r3, #31
 800ae10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	58024400 	.word	0x58024400
 800ae1c:	0801785c 	.word	0x0801785c

0800ae20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ae24:	f7ff ffb6 	bl	800ad94 <HAL_RCC_GetHCLKFreq>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	4b06      	ldr	r3, [pc, #24]	; (800ae44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	4904      	ldr	r1, [pc, #16]	; (800ae48 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ae36:	5ccb      	ldrb	r3, [r1, r3]
 800ae38:	f003 031f 	and.w	r3, r3, #31
 800ae3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	58024400 	.word	0x58024400
 800ae48:	0801785c 	.word	0x0801785c

0800ae4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	223f      	movs	r2, #63	; 0x3f
 800ae5a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ae5c:	4b1a      	ldr	r3, [pc, #104]	; (800aec8 <HAL_RCC_GetClockConfig+0x7c>)
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	f003 0207 	and.w	r2, r3, #7
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ae68:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <HAL_RCC_GetClockConfig+0x7c>)
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ae74:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <HAL_RCC_GetClockConfig+0x7c>)
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	f003 020f 	and.w	r2, r3, #15
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ae80:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <HAL_RCC_GetClockConfig+0x7c>)
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ae8c:	4b0e      	ldr	r3, [pc, #56]	; (800aec8 <HAL_RCC_GetClockConfig+0x7c>)
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <HAL_RCC_GetClockConfig+0x7c>)
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800aea4:	4b08      	ldr	r3, [pc, #32]	; (800aec8 <HAL_RCC_GetClockConfig+0x7c>)
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aeb0:	4b06      	ldr	r3, [pc, #24]	; (800aecc <HAL_RCC_GetClockConfig+0x80>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 020f 	and.w	r2, r3, #15
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	601a      	str	r2, [r3, #0]
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	58024400 	.word	0x58024400
 800aecc:	52002000 	.word	0x52002000

0800aed0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed4:	b0ca      	sub	sp, #296	; 0x128
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aedc:	2300      	movs	r3, #0
 800aede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aee2:	2300      	movs	r3, #0
 800aee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800aef4:	2500      	movs	r5, #0
 800aef6:	ea54 0305 	orrs.w	r3, r4, r5
 800aefa:	d049      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af06:	d02f      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800af08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af0c:	d828      	bhi.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af12:	d01a      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af18:	d822      	bhi.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800af1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af22:	d007      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800af24:	e01c      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af26:	4bb8      	ldr	r3, [pc, #736]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	4ab7      	ldr	r2, [pc, #732]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af32:	e01a      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af38:	3308      	adds	r3, #8
 800af3a:	2102      	movs	r1, #2
 800af3c:	4618      	mov	r0, r3
 800af3e:	f002 fb61 	bl	800d604 <RCCEx_PLL2_Config>
 800af42:	4603      	mov	r3, r0
 800af44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af48:	e00f      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4e:	3328      	adds	r3, #40	; 0x28
 800af50:	2102      	movs	r1, #2
 800af52:	4618      	mov	r0, r3
 800af54:	f002 fc08 	bl	800d768 <RCCEx_PLL3_Config>
 800af58:	4603      	mov	r3, r0
 800af5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af5e:	e004      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af66:	e000      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800af68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800af72:	4ba5      	ldr	r3, [pc, #660]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800af7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af80:	4aa1      	ldr	r2, [pc, #644]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af82:	430b      	orrs	r3, r1
 800af84:	6513      	str	r3, [r2, #80]	; 0x50
 800af86:	e003      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800af90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800af9c:	f04f 0900 	mov.w	r9, #0
 800afa0:	ea58 0309 	orrs.w	r3, r8, r9
 800afa4:	d047      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800afa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afac:	2b04      	cmp	r3, #4
 800afae:	d82a      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800afb0:	a201      	add	r2, pc, #4	; (adr r2, 800afb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800afb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb6:	bf00      	nop
 800afb8:	0800afcd 	.word	0x0800afcd
 800afbc:	0800afdb 	.word	0x0800afdb
 800afc0:	0800aff1 	.word	0x0800aff1
 800afc4:	0800b00f 	.word	0x0800b00f
 800afc8:	0800b00f 	.word	0x0800b00f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afcc:	4b8e      	ldr	r3, [pc, #568]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	4a8d      	ldr	r2, [pc, #564]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afd8:	e01a      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afde:	3308      	adds	r3, #8
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f002 fb0e 	bl	800d604 <RCCEx_PLL2_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afee:	e00f      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff4:	3328      	adds	r3, #40	; 0x28
 800aff6:	2100      	movs	r1, #0
 800aff8:	4618      	mov	r0, r3
 800affa:	f002 fbb5 	bl	800d768 <RCCEx_PLL3_Config>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b004:	e004      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b00c:	e000      	b.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b00e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10a      	bne.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b018:	4b7b      	ldr	r3, [pc, #492]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b01c:	f023 0107 	bic.w	r1, r3, #7
 800b020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b026:	4a78      	ldr	r2, [pc, #480]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b028:	430b      	orrs	r3, r1
 800b02a:	6513      	str	r3, [r2, #80]	; 0x50
 800b02c:	e003      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b042:	f04f 0b00 	mov.w	fp, #0
 800b046:	ea5a 030b 	orrs.w	r3, sl, fp
 800b04a:	d04c      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b056:	d030      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b05c:	d829      	bhi.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b05e:	2bc0      	cmp	r3, #192	; 0xc0
 800b060:	d02d      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b062:	2bc0      	cmp	r3, #192	; 0xc0
 800b064:	d825      	bhi.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b066:	2b80      	cmp	r3, #128	; 0x80
 800b068:	d018      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b06a:	2b80      	cmp	r3, #128	; 0x80
 800b06c:	d821      	bhi.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b072:	2b40      	cmp	r3, #64	; 0x40
 800b074:	d007      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b076:	e01c      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b078:	4b63      	ldr	r3, [pc, #396]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07c:	4a62      	ldr	r2, [pc, #392]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b07e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b084:	e01c      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b08a:	3308      	adds	r3, #8
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f002 fab8 	bl	800d604 <RCCEx_PLL2_Config>
 800b094:	4603      	mov	r3, r0
 800b096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b09a:	e011      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a0:	3328      	adds	r3, #40	; 0x28
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f002 fb5f 	bl	800d768 <RCCEx_PLL3_Config>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0b0:	e006      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0b8:	e002      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b0ba:	bf00      	nop
 800b0bc:	e000      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b0be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10a      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b0c8:	4b4f      	ldr	r3, [pc, #316]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0cc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0d6:	4a4c      	ldr	r2, [pc, #304]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	6513      	str	r3, [r2, #80]	; 0x50
 800b0dc:	e003      	b.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b0f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b0fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b100:	460b      	mov	r3, r1
 800b102:	4313      	orrs	r3, r2
 800b104:	d053      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b10a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b10e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b112:	d035      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b118:	d82e      	bhi.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b11a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b11e:	d031      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b120:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b124:	d828      	bhi.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b12a:	d01a      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b12c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b130:	d822      	bhi.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b13a:	d007      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b13c:	e01c      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b13e:	4b32      	ldr	r3, [pc, #200]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b142:	4a31      	ldr	r2, [pc, #196]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b148:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b14a:	e01c      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b150:	3308      	adds	r3, #8
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f002 fa55 	bl	800d604 <RCCEx_PLL2_Config>
 800b15a:	4603      	mov	r3, r0
 800b15c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b160:	e011      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b166:	3328      	adds	r3, #40	; 0x28
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f002 fafc 	bl	800d768 <RCCEx_PLL3_Config>
 800b170:	4603      	mov	r3, r0
 800b172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b176:	e006      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b17e:	e002      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b180:	bf00      	nop
 800b182:	e000      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b184:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b18e:	4b1e      	ldr	r3, [pc, #120]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b192:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b19e:	4a1a      	ldr	r2, [pc, #104]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b1a4:	e003      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b1ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b1c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	d056      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1da:	d038      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b1dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1e0:	d831      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b1e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1e6:	d034      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b1e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1ec:	d82b      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1f2:	d01d      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b1f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1f8:	d825      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d006      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b1fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b202:	d00a      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b204:	e01f      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b206:	bf00      	nop
 800b208:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b20c:	4ba2      	ldr	r3, [pc, #648]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	4aa1      	ldr	r2, [pc, #644]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b218:	e01c      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b21e:	3308      	adds	r3, #8
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f002 f9ee 	bl	800d604 <RCCEx_PLL2_Config>
 800b228:	4603      	mov	r3, r0
 800b22a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b22e:	e011      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b234:	3328      	adds	r3, #40	; 0x28
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f002 fa95 	bl	800d768 <RCCEx_PLL3_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b244:	e006      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b24c:	e002      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b252:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10b      	bne.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b25c:	4b8e      	ldr	r3, [pc, #568]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b260:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b268:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b26c:	4a8a      	ldr	r2, [pc, #552]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b26e:	430b      	orrs	r3, r1
 800b270:	6593      	str	r3, [r2, #88]	; 0x58
 800b272:	e003      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b28c:	2300      	movs	r3, #0
 800b28e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b292:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b296:	460b      	mov	r3, r1
 800b298:	4313      	orrs	r3, r2
 800b29a:	d03a      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a2:	2b30      	cmp	r3, #48	; 0x30
 800b2a4:	d01f      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b2a6:	2b30      	cmp	r3, #48	; 0x30
 800b2a8:	d819      	bhi.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b2aa:	2b20      	cmp	r3, #32
 800b2ac:	d00c      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d815      	bhi.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d019      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b2b6:	2b10      	cmp	r3, #16
 800b2b8:	d111      	bne.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2ba:	4b77      	ldr	r3, [pc, #476]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2be:	4a76      	ldr	r2, [pc, #472]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b2c6:	e011      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	2102      	movs	r1, #2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f002 f997 	bl	800d604 <RCCEx_PLL2_Config>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b2dc:	e006      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2e4:	e002      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b2e6:	bf00      	nop
 800b2e8:	e000      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b2ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10a      	bne.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b2f4:	4b68      	ldr	r3, [pc, #416]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b302:	4a65      	ldr	r2, [pc, #404]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b304:	430b      	orrs	r3, r1
 800b306:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b308:	e003      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b30e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b31e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b322:	2300      	movs	r3, #0
 800b324:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b328:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4313      	orrs	r3, r2
 800b330:	d051      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b33c:	d035      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b33e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b342:	d82e      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b344:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b348:	d031      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b34a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b34e:	d828      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b354:	d01a      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b35a:	d822      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b364:	d007      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b366:	e01c      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b368:	4b4b      	ldr	r3, [pc, #300]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	4a4a      	ldr	r2, [pc, #296]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b374:	e01c      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37a:	3308      	adds	r3, #8
 800b37c:	2100      	movs	r1, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	f002 f940 	bl	800d604 <RCCEx_PLL2_Config>
 800b384:	4603      	mov	r3, r0
 800b386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b38a:	e011      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b390:	3328      	adds	r3, #40	; 0x28
 800b392:	2100      	movs	r1, #0
 800b394:	4618      	mov	r0, r3
 800b396:	f002 f9e7 	bl	800d768 <RCCEx_PLL3_Config>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3a0:	e006      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3a8:	e002      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b3aa:	bf00      	nop
 800b3ac:	e000      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b3ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10a      	bne.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b3b8:	4b37      	ldr	r3, [pc, #220]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3c6:	4a34      	ldr	r2, [pc, #208]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c8:	430b      	orrs	r3, r1
 800b3ca:	6513      	str	r3, [r2, #80]	; 0x50
 800b3cc:	e003      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b3e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b3ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	d056      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b400:	d033      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b406:	d82c      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b40c:	d02f      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b40e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b412:	d826      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b414:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b418:	d02b      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b41a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b41e:	d820      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b424:	d012      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b42a:	d81a      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d022      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b434:	d115      	bne.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b43a:	3308      	adds	r3, #8
 800b43c:	2101      	movs	r1, #1
 800b43e:	4618      	mov	r0, r3
 800b440:	f002 f8e0 	bl	800d604 <RCCEx_PLL2_Config>
 800b444:	4603      	mov	r3, r0
 800b446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b44a:	e015      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b450:	3328      	adds	r3, #40	; 0x28
 800b452:	2101      	movs	r1, #1
 800b454:	4618      	mov	r0, r3
 800b456:	f002 f987 	bl	800d768 <RCCEx_PLL3_Config>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b460:	e00a      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b468:	e006      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b46a:	bf00      	nop
 800b46c:	e004      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b46e:	bf00      	nop
 800b470:	e002      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b472:	bf00      	nop
 800b474:	e000      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b476:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10d      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b484:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b48e:	4a02      	ldr	r2, [pc, #8]	; (800b498 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b490:	430b      	orrs	r3, r1
 800b492:	6513      	str	r3, [r2, #80]	; 0x50
 800b494:	e006      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b496:	bf00      	nop
 800b498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b4b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	d055      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4d0:	d033      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b4d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4d6:	d82c      	bhi.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4dc:	d02f      	beq.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e2:	d826      	bhi.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b4e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4e8:	d02b      	beq.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b4ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4ee:	d820      	bhi.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b4f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f4:	d012      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b4f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4fa:	d81a      	bhi.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d022      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b504:	d115      	bne.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50a:	3308      	adds	r3, #8
 800b50c:	2101      	movs	r1, #1
 800b50e:	4618      	mov	r0, r3
 800b510:	f002 f878 	bl	800d604 <RCCEx_PLL2_Config>
 800b514:	4603      	mov	r3, r0
 800b516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b51a:	e015      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b520:	3328      	adds	r3, #40	; 0x28
 800b522:	2101      	movs	r1, #1
 800b524:	4618      	mov	r0, r3
 800b526:	f002 f91f 	bl	800d768 <RCCEx_PLL3_Config>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b530:	e00a      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b538:	e006      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b53a:	bf00      	nop
 800b53c:	e004      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b53e:	bf00      	nop
 800b540:	e002      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b542:	bf00      	nop
 800b544:	e000      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b546:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10b      	bne.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b550:	4ba3      	ldr	r3, [pc, #652]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b554:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b560:	4a9f      	ldr	r2, [pc, #636]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b562:	430b      	orrs	r3, r1
 800b564:	6593      	str	r3, [r2, #88]	; 0x58
 800b566:	e003      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b56c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b57c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b580:	2300      	movs	r3, #0
 800b582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b58a:	460b      	mov	r3, r1
 800b58c:	4313      	orrs	r3, r2
 800b58e:	d037      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b59a:	d00e      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b59c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a0:	d816      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d018      	beq.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b5a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5aa:	d111      	bne.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5ac:	4b8c      	ldr	r3, [pc, #560]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	4a8b      	ldr	r2, [pc, #556]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b5b8:	e00f      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5be:	3308      	adds	r3, #8
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f002 f81e 	bl	800d604 <RCCEx_PLL2_Config>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b5ce:	e004      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5d6:	e000      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b5d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b5e2:	4b7f      	ldr	r3, [pc, #508]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f0:	4a7b      	ldr	r2, [pc, #492]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	6513      	str	r3, [r2, #80]	; 0x50
 800b5f6:	e003      	b.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b60c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b610:	2300      	movs	r3, #0
 800b612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b616:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4313      	orrs	r3, r2
 800b61e:	d039      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b626:	2b03      	cmp	r3, #3
 800b628:	d81c      	bhi.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b62a:	a201      	add	r2, pc, #4	; (adr r2, 800b630 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b630:	0800b66d 	.word	0x0800b66d
 800b634:	0800b641 	.word	0x0800b641
 800b638:	0800b64f 	.word	0x0800b64f
 800b63c:	0800b66d 	.word	0x0800b66d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b640:	4b67      	ldr	r3, [pc, #412]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	4a66      	ldr	r2, [pc, #408]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b64a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b64c:	e00f      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b652:	3308      	adds	r3, #8
 800b654:	2102      	movs	r1, #2
 800b656:	4618      	mov	r0, r3
 800b658:	f001 ffd4 	bl	800d604 <RCCEx_PLL2_Config>
 800b65c:	4603      	mov	r3, r0
 800b65e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b662:	e004      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b66a:	e000      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b66c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b66e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10a      	bne.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b676:	4b5a      	ldr	r3, [pc, #360]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b67a:	f023 0103 	bic.w	r1, r3, #3
 800b67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b684:	4a56      	ldr	r2, [pc, #344]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b686:	430b      	orrs	r3, r1
 800b688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b68a:	e003      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b68c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b6a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	f000 809f 	beq.w	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6b6:	4b4b      	ldr	r3, [pc, #300]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a4a      	ldr	r2, [pc, #296]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6c2:	f7f8 fc09 	bl	8003ed8 <HAL_GetTick>
 800b6c6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6ca:	e00b      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6cc:	f7f8 fc04 	bl	8003ed8 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	2b64      	cmp	r3, #100	; 0x64
 800b6da:	d903      	bls.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6e2:	e005      	b.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6e4:	4b3f      	ldr	r3, [pc, #252]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0ed      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b6f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d179      	bne.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b6f8:	4b39      	ldr	r3, [pc, #228]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b700:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b704:	4053      	eors	r3, r2
 800b706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d015      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b70e:	4b34      	ldr	r3, [pc, #208]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b716:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b71a:	4b31      	ldr	r3, [pc, #196]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b71e:	4a30      	ldr	r2, [pc, #192]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b724:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b726:	4b2e      	ldr	r3, [pc, #184]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72a:	4a2d      	ldr	r2, [pc, #180]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b72c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b730:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b732:	4a2b      	ldr	r2, [pc, #172]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b734:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b738:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b746:	d118      	bne.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b748:	f7f8 fbc6 	bl	8003ed8 <HAL_GetTick>
 800b74c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b750:	e00d      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b752:	f7f8 fbc1 	bl	8003ed8 <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b75c:	1ad2      	subs	r2, r2, r3
 800b75e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b762:	429a      	cmp	r2, r3
 800b764:	d903      	bls.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b76c:	e005      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b76e:	4b1c      	ldr	r3, [pc, #112]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b772:	f003 0302 	and.w	r3, r3, #2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0eb      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b77a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d129      	bne.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b786:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b78a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b78e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b792:	d10e      	bne.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b794:	4b12      	ldr	r3, [pc, #72]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7a4:	091a      	lsrs	r2, r3, #4
 800b7a6:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	4a0d      	ldr	r2, [pc, #52]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	6113      	str	r3, [r2, #16]
 800b7b0:	e005      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b7b2:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	4a0a      	ldr	r2, [pc, #40]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b7bc:	6113      	str	r3, [r2, #16]
 800b7be:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7ce:	4a04      	ldr	r2, [pc, #16]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	6713      	str	r3, [r2, #112]	; 0x70
 800b7d4:	e00e      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b7de:	e009      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b7e0:	58024400 	.word	0x58024400
 800b7e4:	58024800 	.word	0x58024800
 800b7e8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f002 0301 	and.w	r3, r2, #1
 800b800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b804:	2300      	movs	r3, #0
 800b806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b80a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b80e:	460b      	mov	r3, r1
 800b810:	4313      	orrs	r3, r2
 800b812:	f000 8089 	beq.w	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b81a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b81c:	2b28      	cmp	r3, #40	; 0x28
 800b81e:	d86b      	bhi.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b820:	a201      	add	r2, pc, #4	; (adr r2, 800b828 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b826:	bf00      	nop
 800b828:	0800b901 	.word	0x0800b901
 800b82c:	0800b8f9 	.word	0x0800b8f9
 800b830:	0800b8f9 	.word	0x0800b8f9
 800b834:	0800b8f9 	.word	0x0800b8f9
 800b838:	0800b8f9 	.word	0x0800b8f9
 800b83c:	0800b8f9 	.word	0x0800b8f9
 800b840:	0800b8f9 	.word	0x0800b8f9
 800b844:	0800b8f9 	.word	0x0800b8f9
 800b848:	0800b8cd 	.word	0x0800b8cd
 800b84c:	0800b8f9 	.word	0x0800b8f9
 800b850:	0800b8f9 	.word	0x0800b8f9
 800b854:	0800b8f9 	.word	0x0800b8f9
 800b858:	0800b8f9 	.word	0x0800b8f9
 800b85c:	0800b8f9 	.word	0x0800b8f9
 800b860:	0800b8f9 	.word	0x0800b8f9
 800b864:	0800b8f9 	.word	0x0800b8f9
 800b868:	0800b8e3 	.word	0x0800b8e3
 800b86c:	0800b8f9 	.word	0x0800b8f9
 800b870:	0800b8f9 	.word	0x0800b8f9
 800b874:	0800b8f9 	.word	0x0800b8f9
 800b878:	0800b8f9 	.word	0x0800b8f9
 800b87c:	0800b8f9 	.word	0x0800b8f9
 800b880:	0800b8f9 	.word	0x0800b8f9
 800b884:	0800b8f9 	.word	0x0800b8f9
 800b888:	0800b901 	.word	0x0800b901
 800b88c:	0800b8f9 	.word	0x0800b8f9
 800b890:	0800b8f9 	.word	0x0800b8f9
 800b894:	0800b8f9 	.word	0x0800b8f9
 800b898:	0800b8f9 	.word	0x0800b8f9
 800b89c:	0800b8f9 	.word	0x0800b8f9
 800b8a0:	0800b8f9 	.word	0x0800b8f9
 800b8a4:	0800b8f9 	.word	0x0800b8f9
 800b8a8:	0800b901 	.word	0x0800b901
 800b8ac:	0800b8f9 	.word	0x0800b8f9
 800b8b0:	0800b8f9 	.word	0x0800b8f9
 800b8b4:	0800b8f9 	.word	0x0800b8f9
 800b8b8:	0800b8f9 	.word	0x0800b8f9
 800b8bc:	0800b8f9 	.word	0x0800b8f9
 800b8c0:	0800b8f9 	.word	0x0800b8f9
 800b8c4:	0800b8f9 	.word	0x0800b8f9
 800b8c8:	0800b901 	.word	0x0800b901
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f001 fe95 	bl	800d604 <RCCEx_PLL2_Config>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b8e0:	e00f      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e6:	3328      	adds	r3, #40	; 0x28
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f001 ff3c 	bl	800d768 <RCCEx_PLL3_Config>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b8f6:	e004      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8fe:	e000      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b900:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b90a:	4bbf      	ldr	r3, [pc, #764]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b90c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b90e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b918:	4abb      	ldr	r2, [pc, #748]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b91a:	430b      	orrs	r3, r1
 800b91c:	6553      	str	r3, [r2, #84]	; 0x54
 800b91e:	e003      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f002 0302 	and.w	r3, r2, #2
 800b934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b938:	2300      	movs	r3, #0
 800b93a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b93e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b942:	460b      	mov	r3, r1
 800b944:	4313      	orrs	r3, r2
 800b946:	d041      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b94e:	2b05      	cmp	r3, #5
 800b950:	d824      	bhi.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b952:	a201      	add	r2, pc, #4	; (adr r2, 800b958 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b9a5 	.word	0x0800b9a5
 800b95c:	0800b971 	.word	0x0800b971
 800b960:	0800b987 	.word	0x0800b987
 800b964:	0800b9a5 	.word	0x0800b9a5
 800b968:	0800b9a5 	.word	0x0800b9a5
 800b96c:	0800b9a5 	.word	0x0800b9a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b974:	3308      	adds	r3, #8
 800b976:	2101      	movs	r1, #1
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 fe43 	bl	800d604 <RCCEx_PLL2_Config>
 800b97e:	4603      	mov	r3, r0
 800b980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b984:	e00f      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98a:	3328      	adds	r3, #40	; 0x28
 800b98c:	2101      	movs	r1, #1
 800b98e:	4618      	mov	r0, r3
 800b990:	f001 feea 	bl	800d768 <RCCEx_PLL3_Config>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b99a:	e004      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9a2:	e000      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b9a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10a      	bne.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b9ae:	4b96      	ldr	r3, [pc, #600]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b2:	f023 0107 	bic.w	r1, r3, #7
 800b9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9bc:	4a92      	ldr	r2, [pc, #584]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9be:	430b      	orrs	r3, r1
 800b9c0:	6553      	str	r3, [r2, #84]	; 0x54
 800b9c2:	e003      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f002 0304 	and.w	r3, r2, #4
 800b9d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	d044      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9f4:	2b05      	cmp	r3, #5
 800b9f6:	d825      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ba00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fe:	bf00      	nop
 800ba00:	0800ba4d 	.word	0x0800ba4d
 800ba04:	0800ba19 	.word	0x0800ba19
 800ba08:	0800ba2f 	.word	0x0800ba2f
 800ba0c:	0800ba4d 	.word	0x0800ba4d
 800ba10:	0800ba4d 	.word	0x0800ba4d
 800ba14:	0800ba4d 	.word	0x0800ba4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	2101      	movs	r1, #1
 800ba20:	4618      	mov	r0, r3
 800ba22:	f001 fdef 	bl	800d604 <RCCEx_PLL2_Config>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba2c:	e00f      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba32:	3328      	adds	r3, #40	; 0x28
 800ba34:	2101      	movs	r1, #1
 800ba36:	4618      	mov	r0, r3
 800ba38:	f001 fe96 	bl	800d768 <RCCEx_PLL3_Config>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba42:	e004      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba4a:	e000      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ba4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10b      	bne.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba56:	4b6c      	ldr	r3, [pc, #432]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba5a:	f023 0107 	bic.w	r1, r3, #7
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba66:	4a68      	ldr	r2, [pc, #416]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	6593      	str	r3, [r2, #88]	; 0x58
 800ba6c:	e003      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f002 0320 	and.w	r3, r2, #32
 800ba82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba86:	2300      	movs	r3, #0
 800ba88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba90:	460b      	mov	r3, r1
 800ba92:	4313      	orrs	r3, r2
 800ba94:	d055      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ba96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800baa2:	d033      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800baa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800baa8:	d82c      	bhi.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800baaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baae:	d02f      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bab4:	d826      	bhi.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baba:	d02b      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800babc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bac0:	d820      	bhi.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac6:	d012      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bacc:	d81a      	bhi.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d022      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bad6:	d115      	bne.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800badc:	3308      	adds	r3, #8
 800bade:	2100      	movs	r1, #0
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 fd8f 	bl	800d604 <RCCEx_PLL2_Config>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800baec:	e015      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800baee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf2:	3328      	adds	r3, #40	; 0x28
 800baf4:	2102      	movs	r1, #2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f001 fe36 	bl	800d768 <RCCEx_PLL3_Config>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb02:	e00a      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb0a:	e006      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb0c:	bf00      	nop
 800bb0e:	e004      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb10:	bf00      	nop
 800bb12:	e002      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb14:	bf00      	nop
 800bb16:	e000      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10b      	bne.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb22:	4b39      	ldr	r3, [pc, #228]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb32:	4a35      	ldr	r2, [pc, #212]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb34:	430b      	orrs	r3, r1
 800bb36:	6553      	str	r3, [r2, #84]	; 0x54
 800bb38:	e003      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bb4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb52:	2300      	movs	r3, #0
 800bb54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bb58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	d058      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bb6e:	d033      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bb70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bb74:	d82c      	bhi.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb7a:	d02f      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bb7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb80:	d826      	bhi.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb86:	d02b      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bb88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb8c:	d820      	bhi.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb92:	d012      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bb94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb98:	d81a      	bhi.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d022      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bb9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bba2:	d115      	bne.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba8:	3308      	adds	r3, #8
 800bbaa:	2100      	movs	r1, #0
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 fd29 	bl	800d604 <RCCEx_PLL2_Config>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bbb8:	e015      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbbe:	3328      	adds	r3, #40	; 0x28
 800bbc0:	2102      	movs	r1, #2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f001 fdd0 	bl	800d768 <RCCEx_PLL3_Config>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bbce:	e00a      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbd6:	e006      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbd8:	bf00      	nop
 800bbda:	e004      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbdc:	bf00      	nop
 800bbde:	e002      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbe0:	bf00      	nop
 800bbe2:	e000      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10e      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bbee:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bbf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbfe:	4a02      	ldr	r2, [pc, #8]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc00:	430b      	orrs	r3, r1
 800bc02:	6593      	str	r3, [r2, #88]	; 0x58
 800bc04:	e006      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bc06:	bf00      	nop
 800bc08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bc20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4313      	orrs	r3, r2
 800bc32:	d055      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc40:	d033      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bc42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc46:	d82c      	bhi.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc4c:	d02f      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bc4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc52:	d826      	bhi.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc58:	d02b      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bc5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc5e:	d820      	bhi.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc64:	d012      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bc66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc6a:	d81a      	bhi.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d022      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bc70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc74:	d115      	bne.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f001 fcc0 	bl	800d604 <RCCEx_PLL2_Config>
 800bc84:	4603      	mov	r3, r0
 800bc86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bc8a:	e015      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc90:	3328      	adds	r3, #40	; 0x28
 800bc92:	2102      	movs	r1, #2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f001 fd67 	bl	800d768 <RCCEx_PLL3_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bca0:	e00a      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bca8:	e006      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcaa:	bf00      	nop
 800bcac:	e004      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcae:	bf00      	nop
 800bcb0:	e002      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcb2:	bf00      	nop
 800bcb4:	e000      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10b      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bcc0:	4ba1      	ldr	r3, [pc, #644]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcc4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bccc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcd0:	4a9d      	ldr	r2, [pc, #628]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcd2:	430b      	orrs	r3, r1
 800bcd4:	6593      	str	r3, [r2, #88]	; 0x58
 800bcd6:	e003      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f002 0308 	and.w	r3, r2, #8
 800bcec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bcf6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	d01e      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd0c:	d10c      	bne.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd12:	3328      	adds	r3, #40	; 0x28
 800bd14:	2102      	movs	r1, #2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f001 fd26 	bl	800d768 <RCCEx_PLL3_Config>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d002      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd28:	4b87      	ldr	r3, [pc, #540]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd38:	4a83      	ldr	r2, [pc, #524]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	f002 0310 	and.w	r3, r2, #16
 800bd4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd54:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bd58:	460b      	mov	r3, r1
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	d01e      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bd5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd6a:	d10c      	bne.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd70:	3328      	adds	r3, #40	; 0x28
 800bd72:	2102      	movs	r1, #2
 800bd74:	4618      	mov	r0, r3
 800bd76:	f001 fcf7 	bl	800d768 <RCCEx_PLL3_Config>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d002      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd86:	4b70      	ldr	r3, [pc, #448]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd96:	4a6c      	ldr	r2, [pc, #432]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bda8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bdac:	2300      	movs	r3, #0
 800bdae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bdb2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	d03e      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bdbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdc8:	d022      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bdca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdce:	d81b      	bhi.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd8:	d00b      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bdda:	e015      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde0:	3308      	adds	r3, #8
 800bde2:	2100      	movs	r1, #0
 800bde4:	4618      	mov	r0, r3
 800bde6:	f001 fc0d 	bl	800d604 <RCCEx_PLL2_Config>
 800bdea:	4603      	mov	r3, r0
 800bdec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bdf0:	e00f      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf6:	3328      	adds	r3, #40	; 0x28
 800bdf8:	2102      	movs	r1, #2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f001 fcb4 	bl	800d768 <RCCEx_PLL3_Config>
 800be00:	4603      	mov	r3, r0
 800be02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be06:	e004      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be0e:	e000      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800be10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10b      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be1a:	4b4b      	ldr	r3, [pc, #300]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be1e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800be22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be2a:	4a47      	ldr	r2, [pc, #284]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be2c:	430b      	orrs	r3, r1
 800be2e:	6593      	str	r3, [r2, #88]	; 0x58
 800be30:	e003      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800be46:	67bb      	str	r3, [r7, #120]	; 0x78
 800be48:	2300      	movs	r3, #0
 800be4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be4c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800be50:	460b      	mov	r3, r1
 800be52:	4313      	orrs	r3, r2
 800be54:	d03b      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800be56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be62:	d01f      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800be64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be68:	d818      	bhi.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800be6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be6e:	d003      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800be70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be74:	d007      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800be76:	e011      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be78:	4b33      	ldr	r3, [pc, #204]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7c:	4a32      	ldr	r2, [pc, #200]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800be84:	e00f      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8a:	3328      	adds	r3, #40	; 0x28
 800be8c:	2101      	movs	r1, #1
 800be8e:	4618      	mov	r0, r3
 800be90:	f001 fc6a 	bl	800d768 <RCCEx_PLL3_Config>
 800be94:	4603      	mov	r3, r0
 800be96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800be9a:	e004      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bea2:	e000      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10b      	bne.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800beae:	4b26      	ldr	r3, [pc, #152]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800beb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bebe:	4a22      	ldr	r2, [pc, #136]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bec0:	430b      	orrs	r3, r1
 800bec2:	6553      	str	r3, [r2, #84]	; 0x54
 800bec4:	e003      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800beda:	673b      	str	r3, [r7, #112]	; 0x70
 800bedc:	2300      	movs	r3, #0
 800bede:	677b      	str	r3, [r7, #116]	; 0x74
 800bee0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bee4:	460b      	mov	r3, r1
 800bee6:	4313      	orrs	r3, r2
 800bee8:	d034      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800beea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef8:	d007      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800befa:	e011      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800befc:	4b12      	ldr	r3, [pc, #72]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800befe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf00:	4a11      	ldr	r2, [pc, #68]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf08:	e00e      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf0e:	3308      	adds	r3, #8
 800bf10:	2102      	movs	r1, #2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f001 fb76 	bl	800d604 <RCCEx_PLL2_Config>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf1e:	e003      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10d      	bne.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3e:	4a02      	ldr	r2, [pc, #8]	; (800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf40:	430b      	orrs	r3, r1
 800bf42:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf44:	e006      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bf46:	bf00      	nop
 800bf48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bf60:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf62:	2300      	movs	r3, #0
 800bf64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	d00c      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf74:	3328      	adds	r3, #40	; 0x28
 800bf76:	2102      	movs	r1, #2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f001 fbf5 	bl	800d768 <RCCEx_PLL3_Config>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d002      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bf96:	663b      	str	r3, [r7, #96]	; 0x60
 800bf98:	2300      	movs	r3, #0
 800bf9a:	667b      	str	r3, [r7, #100]	; 0x64
 800bf9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	d038      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bfa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfb2:	d018      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bfb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfb8:	d811      	bhi.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bfba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfbe:	d014      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bfc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfc4:	d80b      	bhi.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d011      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bfca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfce:	d106      	bne.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfd0:	4bc3      	ldr	r3, [pc, #780]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	4ac2      	ldr	r2, [pc, #776]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bfdc:	e008      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfe4:	e004      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bfe6:	bf00      	nop
 800bfe8:	e002      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bfea:	bf00      	nop
 800bfec:	e000      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bfee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10b      	bne.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bff8:	4bb9      	ldr	r3, [pc, #740]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bffc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c008:	4ab5      	ldr	r2, [pc, #724]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c00a:	430b      	orrs	r3, r1
 800c00c:	6553      	str	r3, [r2, #84]	; 0x54
 800c00e:	e003      	b.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c024:	65bb      	str	r3, [r7, #88]	; 0x58
 800c026:	2300      	movs	r3, #0
 800c028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c02a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c02e:	460b      	mov	r3, r1
 800c030:	4313      	orrs	r3, r2
 800c032:	d009      	beq.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c034:	4baa      	ldr	r3, [pc, #680]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c042:	4aa7      	ldr	r2, [pc, #668]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c044:	430b      	orrs	r3, r1
 800c046:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c054:	653b      	str	r3, [r7, #80]	; 0x50
 800c056:	2300      	movs	r3, #0
 800c058:	657b      	str	r3, [r7, #84]	; 0x54
 800c05a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c05e:	460b      	mov	r3, r1
 800c060:	4313      	orrs	r3, r2
 800c062:	d00a      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c064:	4b9e      	ldr	r3, [pc, #632]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c070:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c074:	4a9a      	ldr	r2, [pc, #616]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c076:	430b      	orrs	r3, r1
 800c078:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c086:	64bb      	str	r3, [r7, #72]	; 0x48
 800c088:	2300      	movs	r3, #0
 800c08a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c08c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c090:	460b      	mov	r3, r1
 800c092:	4313      	orrs	r3, r2
 800c094:	d009      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c096:	4b92      	ldr	r3, [pc, #584]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c09a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a4:	4a8e      	ldr	r2, [pc, #568]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0a6:	430b      	orrs	r3, r1
 800c0a8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c0b6:	643b      	str	r3, [r7, #64]	; 0x40
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c0bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	d00e      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0c6:	4b86      	ldr	r3, [pc, #536]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	4a85      	ldr	r2, [pc, #532]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0d0:	6113      	str	r3, [r2, #16]
 800c0d2:	4b83      	ldr	r3, [pc, #524]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0d4:	6919      	ldr	r1, [r3, #16]
 800c0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c0de:	4a80      	ldr	r2, [pc, #512]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0e0:	430b      	orrs	r3, r1
 800c0e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c0f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	d009      	beq.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c100:	4b77      	ldr	r3, [pc, #476]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c104:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10e:	4a74      	ldr	r2, [pc, #464]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c110:	430b      	orrs	r3, r1
 800c112:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c120:	633b      	str	r3, [r7, #48]	; 0x30
 800c122:	2300      	movs	r3, #0
 800c124:	637b      	str	r3, [r7, #52]	; 0x34
 800c126:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c12a:	460b      	mov	r3, r1
 800c12c:	4313      	orrs	r3, r2
 800c12e:	d00a      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c130:	4b6b      	ldr	r3, [pc, #428]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c134:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c140:	4a67      	ldr	r2, [pc, #412]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c142:	430b      	orrs	r3, r1
 800c144:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	2100      	movs	r1, #0
 800c150:	62b9      	str	r1, [r7, #40]	; 0x28
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c158:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c15c:	460b      	mov	r3, r1
 800c15e:	4313      	orrs	r3, r2
 800c160:	d011      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c166:	3308      	adds	r3, #8
 800c168:	2100      	movs	r1, #0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f001 fa4a 	bl	800d604 <RCCEx_PLL2_Config>
 800c170:	4603      	mov	r3, r0
 800c172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c17e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	2100      	movs	r1, #0
 800c190:	6239      	str	r1, [r7, #32]
 800c192:	f003 0302 	and.w	r3, r3, #2
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
 800c198:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c19c:	460b      	mov	r3, r1
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	d011      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f001 fa2a 	bl	800d604 <RCCEx_PLL2_Config>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	61b9      	str	r1, [r7, #24]
 800c1d2:	f003 0304 	and.w	r3, r3, #4
 800c1d6:	61fb      	str	r3, [r7, #28]
 800c1d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	d011      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1e6:	3308      	adds	r3, #8
 800c1e8:	2102      	movs	r1, #2
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f001 fa0a 	bl	800d604 <RCCEx_PLL2_Config>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	2100      	movs	r1, #0
 800c210:	6139      	str	r1, [r7, #16]
 800c212:	f003 0308 	and.w	r3, r3, #8
 800c216:	617b      	str	r3, [r7, #20]
 800c218:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c21c:	460b      	mov	r3, r1
 800c21e:	4313      	orrs	r3, r2
 800c220:	d011      	beq.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c226:	3328      	adds	r3, #40	; 0x28
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f001 fa9c 	bl	800d768 <RCCEx_PLL3_Config>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c23e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	2100      	movs	r1, #0
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	f003 0310 	and.w	r3, r3, #16
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c25c:	460b      	mov	r3, r1
 800c25e:	4313      	orrs	r3, r2
 800c260:	d011      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c266:	3328      	adds	r3, #40	; 0x28
 800c268:	2101      	movs	r1, #1
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 fa7c 	bl	800d768 <RCCEx_PLL3_Config>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	2100      	movs	r1, #0
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	f003 0320 	and.w	r3, r3, #32
 800c296:	607b      	str	r3, [r7, #4]
 800c298:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c29c:	460b      	mov	r3, r1
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	d011      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a6:	3328      	adds	r3, #40	; 0x28
 800c2a8:	2102      	movs	r1, #2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f001 fa5c 	bl	800d768 <RCCEx_PLL3_Config>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c2c6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e000      	b.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2e0:	58024400 	.word	0x58024400

0800c2e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b090      	sub	sp, #64	; 0x40
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c2f6:	430b      	orrs	r3, r1
 800c2f8:	f040 8094 	bne.w	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c2fc:	4b9e      	ldr	r3, [pc, #632]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c300:	f003 0307 	and.w	r3, r3, #7
 800c304:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	2b04      	cmp	r3, #4
 800c30a:	f200 8087 	bhi.w	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c30e:	a201      	add	r2, pc, #4	; (adr r2, 800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c314:	0800c329 	.word	0x0800c329
 800c318:	0800c351 	.word	0x0800c351
 800c31c:	0800c379 	.word	0x0800c379
 800c320:	0800c415 	.word	0x0800c415
 800c324:	0800c3a1 	.word	0x0800c3a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c328:	4b93      	ldr	r3, [pc, #588]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c334:	d108      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c33a:	4618      	mov	r0, r3
 800c33c:	f001 f810 	bl	800d360 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c344:	f000 bd45 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34c:	f000 bd41 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c350:	4b89      	ldr	r3, [pc, #548]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c35c:	d108      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c35e:	f107 0318 	add.w	r3, r7, #24
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fd54 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c36c:	f000 bd31 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c374:	f000 bd2d 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c378:	4b7f      	ldr	r3, [pc, #508]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c384:	d108      	bne.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c386:	f107 030c 	add.w	r3, r7, #12
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 fe94 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c394:	f000 bd1d 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c39c:	f000 bd19 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3a0:	4b75      	ldr	r3, [pc, #468]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3aa:	4b73      	ldr	r3, [pc, #460]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f003 0304 	and.w	r3, r3, #4
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d10c      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d109      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3bc:	4b6e      	ldr	r3, [pc, #440]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	08db      	lsrs	r3, r3, #3
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	4a6d      	ldr	r2, [pc, #436]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ce:	e01f      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3d0:	4b69      	ldr	r3, [pc, #420]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3dc:	d106      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3e4:	d102      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3e6:	4b66      	ldr	r3, [pc, #408]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ea:	e011      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3ec:	4b62      	ldr	r3, [pc, #392]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3f8:	d106      	bne.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c400:	d102      	bne.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c402:	4b60      	ldr	r3, [pc, #384]	; (800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c406:	e003      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c40c:	f000 bce1 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c410:	f000 bcdf 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c414:	4b5c      	ldr	r3, [pc, #368]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c418:	f000 bcdb 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c420:	f000 bcd7 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c424:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c428:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c42c:	430b      	orrs	r3, r1
 800c42e:	f040 80ad 	bne.w	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c432:	4b51      	ldr	r3, [pc, #324]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c436:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c43a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c442:	d056      	beq.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c44a:	f200 8090 	bhi.w	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	2bc0      	cmp	r3, #192	; 0xc0
 800c452:	f000 8088 	beq.w	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	2bc0      	cmp	r3, #192	; 0xc0
 800c45a:	f200 8088 	bhi.w	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	2b80      	cmp	r3, #128	; 0x80
 800c462:	d032      	beq.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	2b80      	cmp	r3, #128	; 0x80
 800c468:	f200 8081 	bhi.w	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	2b40      	cmp	r3, #64	; 0x40
 800c476:	d014      	beq.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c478:	e079      	b.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c47a:	4b3f      	ldr	r3, [pc, #252]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c486:	d108      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 ff67 	bl	800d360 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c496:	f000 bc9c 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c49e:	f000 bc98 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4a2:	4b35      	ldr	r3, [pc, #212]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4ae:	d108      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b0:	f107 0318 	add.w	r3, r7, #24
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f000 fcab 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4be:	f000 bc88 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c6:	f000 bc84 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4ca:	4b2b      	ldr	r3, [pc, #172]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4d6:	d108      	bne.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4d8:	f107 030c 	add.w	r3, r7, #12
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fdeb 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e6:	f000 bc74 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ee:	f000 bc70 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4f2:	4b21      	ldr	r3, [pc, #132]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4fc:	4b1e      	ldr	r3, [pc, #120]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b04      	cmp	r3, #4
 800c506:	d10c      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d109      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c50e:	4b1a      	ldr	r3, [pc, #104]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	08db      	lsrs	r3, r3, #3
 800c514:	f003 0303 	and.w	r3, r3, #3
 800c518:	4a18      	ldr	r2, [pc, #96]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c51a:	fa22 f303 	lsr.w	r3, r2, r3
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c520:	e01f      	b.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c522:	4b15      	ldr	r3, [pc, #84]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c52e:	d106      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c536:	d102      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c538:	4b11      	ldr	r3, [pc, #68]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53c:	e011      	b.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c53e:	4b0e      	ldr	r3, [pc, #56]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c54a:	d106      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c552:	d102      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c554:	4b0b      	ldr	r3, [pc, #44]	; (800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c558:	e003      	b.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c55e:	f000 bc38 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c562:	f000 bc36 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c566:	4b08      	ldr	r3, [pc, #32]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56a:	f000 bc32 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c572:	f000 bc2e 	b.w	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c576:	bf00      	nop
 800c578:	58024400 	.word	0x58024400
 800c57c:	03d09000 	.word	0x03d09000
 800c580:	003d0900 	.word	0x003d0900
 800c584:	017d7840 	.word	0x017d7840
 800c588:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c58c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c590:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c594:	430b      	orrs	r3, r1
 800c596:	f040 809c 	bne.w	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c59a:	4b9e      	ldr	r3, [pc, #632]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c59c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c59e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c5a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5aa:	d054      	beq.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5b2:	f200 808b 	bhi.w	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5bc:	f000 8083 	beq.w	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5c6:	f200 8081 	bhi.w	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5d0:	d02f      	beq.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5d8:	d878      	bhi.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d004      	beq.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5e6:	d012      	beq.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c5e8:	e070      	b.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5ea:	4b8a      	ldr	r3, [pc, #552]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5f6:	d107      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 feaf 	bl	800d360 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c606:	e3e4      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c60c:	e3e1      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c60e:	4b81      	ldr	r3, [pc, #516]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c61a:	d107      	bne.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c61c:	f107 0318 	add.w	r3, r7, #24
 800c620:	4618      	mov	r0, r3
 800c622:	f000 fbf5 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c62a:	e3d2      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c630:	e3cf      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c632:	4b78      	ldr	r3, [pc, #480]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c63e:	d107      	bne.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c640:	f107 030c 	add.w	r3, r7, #12
 800c644:	4618      	mov	r0, r3
 800c646:	f000 fd37 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c64e:	e3c0      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c654:	e3bd      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c656:	4b6f      	ldr	r3, [pc, #444]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c65a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c65e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c660:	4b6c      	ldr	r3, [pc, #432]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f003 0304 	and.w	r3, r3, #4
 800c668:	2b04      	cmp	r3, #4
 800c66a:	d10c      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c672:	4b68      	ldr	r3, [pc, #416]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	08db      	lsrs	r3, r3, #3
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	4a66      	ldr	r2, [pc, #408]	; (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c67e:	fa22 f303 	lsr.w	r3, r2, r3
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c684:	e01e      	b.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c686:	4b63      	ldr	r3, [pc, #396]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c692:	d106      	bne.n	800c6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c69a:	d102      	bne.n	800c6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c69c:	4b5f      	ldr	r3, [pc, #380]	; (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c69e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6a0:	e010      	b.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6a2:	4b5c      	ldr	r3, [pc, #368]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ae:	d106      	bne.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6b6:	d102      	bne.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6b8:	4b59      	ldr	r3, [pc, #356]	; (800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6bc:	e002      	b.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6c2:	e386      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6c4:	e385      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6c6:	4b57      	ldr	r3, [pc, #348]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ca:	e382      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d0:	e37f      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6d6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c6da:	430b      	orrs	r3, r1
 800c6dc:	f040 80a7 	bne.w	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c6e0:	4b4c      	ldr	r3, [pc, #304]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6e4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c6e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6f0:	d055      	beq.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6f8:	f200 8096 	bhi.w	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c702:	f000 8084 	beq.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c70c:	f200 808c 	bhi.w	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c716:	d030      	beq.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c71e:	f200 8083 	bhi.w	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	2b00      	cmp	r3, #0
 800c726:	d004      	beq.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c72e:	d012      	beq.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c730:	e07a      	b.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c732:	4b38      	ldr	r3, [pc, #224]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c73a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c73e:	d107      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c744:	4618      	mov	r0, r3
 800c746:	f000 fe0b 	bl	800d360 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c74e:	e340      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c754:	e33d      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c756:	4b2f      	ldr	r3, [pc, #188]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c75e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c762:	d107      	bne.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c764:	f107 0318 	add.w	r3, r7, #24
 800c768:	4618      	mov	r0, r3
 800c76a:	f000 fb51 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c772:	e32e      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c778:	e32b      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c77a:	4b26      	ldr	r3, [pc, #152]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c786:	d107      	bne.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c788:	f107 030c 	add.w	r3, r7, #12
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 fc93 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c796:	e31c      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c79c:	e319      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c79e:	4b1d      	ldr	r3, [pc, #116]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7a8:	4b1a      	ldr	r3, [pc, #104]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0304 	and.w	r3, r3, #4
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d10c      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d109      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7ba:	4b16      	ldr	r3, [pc, #88]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	08db      	lsrs	r3, r3, #3
 800c7c0:	f003 0303 	and.w	r3, r3, #3
 800c7c4:	4a14      	ldr	r2, [pc, #80]	; (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c7c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7cc:	e01e      	b.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7ce:	4b11      	ldr	r3, [pc, #68]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7da:	d106      	bne.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7e2:	d102      	bne.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7e4:	4b0d      	ldr	r3, [pc, #52]	; (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7e8:	e010      	b.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7ea:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7f6:	d106      	bne.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7fe:	d102      	bne.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c804:	e002      	b.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c80a:	e2e2      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c80c:	e2e1      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c80e:	4b05      	ldr	r3, [pc, #20]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c812:	e2de      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c814:	58024400 	.word	0x58024400
 800c818:	03d09000 	.word	0x03d09000
 800c81c:	003d0900 	.word	0x003d0900
 800c820:	017d7840 	.word	0x017d7840
 800c824:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82c:	e2d1      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c832:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c836:	430b      	orrs	r3, r1
 800c838:	f040 809c 	bne.w	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c83c:	4b93      	ldr	r3, [pc, #588]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c840:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c844:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c84c:	d054      	beq.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c854:	f200 808b 	bhi.w	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c85e:	f000 8083 	beq.w	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c864:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c868:	f200 8081 	bhi.w	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c872:	d02f      	beq.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c87a:	d878      	bhi.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d004      	beq.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c888:	d012      	beq.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c88a:	e070      	b.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c88c:	4b7f      	ldr	r3, [pc, #508]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c898:	d107      	bne.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 fd5e 	bl	800d360 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a8:	e293      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ae:	e290      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8b0:	4b76      	ldr	r3, [pc, #472]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8bc:	d107      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8be:	f107 0318 	add.w	r3, r7, #24
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 faa4 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8cc:	e281      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d2:	e27e      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8d4:	4b6d      	ldr	r3, [pc, #436]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e0:	d107      	bne.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8e2:	f107 030c 	add.w	r3, r7, #12
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 fbe6 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f0:	e26f      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f6:	e26c      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8f8:	4b64      	ldr	r3, [pc, #400]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c900:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c902:	4b62      	ldr	r3, [pc, #392]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 0304 	and.w	r3, r3, #4
 800c90a:	2b04      	cmp	r3, #4
 800c90c:	d10c      	bne.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c910:	2b00      	cmp	r3, #0
 800c912:	d109      	bne.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c914:	4b5d      	ldr	r3, [pc, #372]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	08db      	lsrs	r3, r3, #3
 800c91a:	f003 0303 	and.w	r3, r3, #3
 800c91e:	4a5c      	ldr	r2, [pc, #368]	; (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c920:	fa22 f303 	lsr.w	r3, r2, r3
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c926:	e01e      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c928:	4b58      	ldr	r3, [pc, #352]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c934:	d106      	bne.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c93c:	d102      	bne.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c93e:	4b55      	ldr	r3, [pc, #340]	; (800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c940:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c942:	e010      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c944:	4b51      	ldr	r3, [pc, #324]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c94c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c950:	d106      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c958:	d102      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c95a:	4b4f      	ldr	r3, [pc, #316]	; (800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c95e:	e002      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c964:	e235      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c966:	e234      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c968:	4b4c      	ldr	r3, [pc, #304]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96c:	e231      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c972:	e22e      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c974:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c978:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c97c:	430b      	orrs	r3, r1
 800c97e:	f040 808f 	bne.w	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c982:	4b42      	ldr	r3, [pc, #264]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c986:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c98a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c992:	d06b      	beq.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c99a:	d874      	bhi.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c9a2:	d056      	beq.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c9aa:	d86c      	bhi.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c9b2:	d03b      	beq.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c9ba:	d864      	bhi.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9c2:	d021      	beq.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9ca:	d85c      	bhi.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9d8:	d004      	beq.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c9da:	e054      	b.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c9dc:	f7fe fa0a 	bl	800adf4 <HAL_RCC_GetPCLK1Freq>
 800c9e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9e2:	e1f6      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9e4:	4b29      	ldr	r3, [pc, #164]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9f0:	d107      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9f2:	f107 0318 	add.w	r3, r7, #24
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fa0a 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca00:	e1e7      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca06:	e1e4      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca08:	4b20      	ldr	r3, [pc, #128]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca14:	d107      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca16:	f107 030c 	add.w	r3, r7, #12
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 fb4c 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca24:	e1d5      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca2a:	e1d2      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca2c:	4b17      	ldr	r3, [pc, #92]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0304 	and.w	r3, r3, #4
 800ca34:	2b04      	cmp	r3, #4
 800ca36:	d109      	bne.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca38:	4b14      	ldr	r3, [pc, #80]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	08db      	lsrs	r3, r3, #3
 800ca3e:	f003 0303 	and.w	r3, r3, #3
 800ca42:	4a13      	ldr	r2, [pc, #76]	; (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca44:	fa22 f303 	lsr.w	r3, r2, r3
 800ca48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca4a:	e1c2      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca50:	e1bf      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ca52:	4b0e      	ldr	r3, [pc, #56]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca5e:	d102      	bne.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ca60:	4b0c      	ldr	r3, [pc, #48]	; (800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca64:	e1b5      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca6a:	e1b2      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca6c:	4b07      	ldr	r3, [pc, #28]	; (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca78:	d102      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ca7a:	4b07      	ldr	r3, [pc, #28]	; (800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7e:	e1a8      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca84:	e1a5      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca8a:	e1a2      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca8c:	58024400 	.word	0x58024400
 800ca90:	03d09000 	.word	0x03d09000
 800ca94:	003d0900 	.word	0x003d0900
 800ca98:	017d7840 	.word	0x017d7840
 800ca9c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800caa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caa4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800caa8:	430b      	orrs	r3, r1
 800caaa:	d173      	bne.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800caac:	4b9c      	ldr	r3, [pc, #624]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cab4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cabc:	d02f      	beq.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cac4:	d863      	bhi.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d004      	beq.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cad2:	d012      	beq.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cad4:	e05b      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cad6:	4b92      	ldr	r3, [pc, #584]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cae2:	d107      	bne.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cae4:	f107 0318 	add.w	r3, r7, #24
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 f991 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf2:	e16e      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf8:	e16b      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cafa:	4b89      	ldr	r3, [pc, #548]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb06:	d107      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb08:	f107 030c 	add.w	r3, r7, #12
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 fad3 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb16:	e15c      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1c:	e159      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb1e:	4b80      	ldr	r3, [pc, #512]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb28:	4b7d      	ldr	r3, [pc, #500]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b04      	cmp	r3, #4
 800cb32:	d10c      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d109      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb3a:	4b79      	ldr	r3, [pc, #484]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	08db      	lsrs	r3, r3, #3
 800cb40:	f003 0303 	and.w	r3, r3, #3
 800cb44:	4a77      	ldr	r2, [pc, #476]	; (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cb46:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb4c:	e01e      	b.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb4e:	4b74      	ldr	r3, [pc, #464]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb5a:	d106      	bne.n	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb62:	d102      	bne.n	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb64:	4b70      	ldr	r3, [pc, #448]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cb66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb68:	e010      	b.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb6a:	4b6d      	ldr	r3, [pc, #436]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb76:	d106      	bne.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb7e:	d102      	bne.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb80:	4b6a      	ldr	r3, [pc, #424]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cb82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb84:	e002      	b.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb8a:	e122      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb8c:	e121      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb92:	e11e      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb98:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cb9c:	430b      	orrs	r3, r1
 800cb9e:	d133      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cba0:	4b5f      	ldr	r3, [pc, #380]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cba8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d004      	beq.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbb6:	d012      	beq.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cbb8:	e023      	b.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbba:	4b59      	ldr	r3, [pc, #356]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbc6:	d107      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fbc7 	bl	800d360 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd6:	e0fc      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbdc:	e0f9      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbde:	4b50      	ldr	r3, [pc, #320]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbea:	d107      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbec:	f107 0318 	add.w	r3, r7, #24
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 f90d 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbfa:	e0ea      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc00:	e0e7      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc06:	e0e4      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cc08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc0c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cc10:	430b      	orrs	r3, r1
 800cc12:	f040 808d 	bne.w	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cc16:	4b42      	ldr	r3, [pc, #264]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cc1e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc26:	d06b      	beq.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc2e:	d874      	bhi.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc36:	d056      	beq.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc3e:	d86c      	bhi.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc46:	d03b      	beq.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc4e:	d864      	bhi.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc56:	d021      	beq.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc5e:	d85c      	bhi.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d004      	beq.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc6c:	d004      	beq.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cc6e:	e054      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cc70:	f000 f8b8 	bl	800cde4 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc74:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc76:	e0ac      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc78:	4b29      	ldr	r3, [pc, #164]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc84:	d107      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc86:	f107 0318 	add.w	r3, r7, #24
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 f8c0 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc94:	e09d      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc9a:	e09a      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc9c:	4b20      	ldr	r3, [pc, #128]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cca8:	d107      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccaa:	f107 030c 	add.w	r3, r7, #12
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 fa02 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccb8:	e08b      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccbe:	e088      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccc0:	4b17      	ldr	r3, [pc, #92]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d109      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cccc:	4b14      	ldr	r3, [pc, #80]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	08db      	lsrs	r3, r3, #3
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	4a13      	ldr	r2, [pc, #76]	; (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ccd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccde:	e078      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce4:	e075      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cce6:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccf2:	d102      	bne.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ccf4:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ccf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf8:	e06b      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccfe:	e068      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd00:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd0c:	d102      	bne.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cd0e:	4b07      	ldr	r3, [pc, #28]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd12:	e05e      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd18:	e05b      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd1e:	e058      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd20:	58024400 	.word	0x58024400
 800cd24:	03d09000 	.word	0x03d09000
 800cd28:	003d0900 	.word	0x003d0900
 800cd2c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cd30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd34:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cd38:	430b      	orrs	r3, r1
 800cd3a:	d148      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cd3c:	4b27      	ldr	r3, [pc, #156]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd4c:	d02a      	beq.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd54:	d838      	bhi.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd62:	d00d      	beq.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cd64:	e030      	b.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd66:	4b1d      	ldr	r3, [pc, #116]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd72:	d102      	bne.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cd74:	4b1a      	ldr	r3, [pc, #104]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd78:	e02b      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7e:	e028      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd80:	4b16      	ldr	r3, [pc, #88]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd8c:	d107      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 fae4 	bl	800d360 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd9c:	e019      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda2:	e016      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cda4:	4b0d      	ldr	r3, [pc, #52]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdb0:	d107      	bne.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdb2:	f107 0318 	add.w	r3, r7, #24
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 f82a 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc0:	e007      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc6:	e004      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdcc:	e001      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3740      	adds	r7, #64	; 0x40
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	58024400 	.word	0x58024400
 800cde0:	017d7840 	.word	0x017d7840

0800cde4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cde8:	f7fd ffd4 	bl	800ad94 <HAL_RCC_GetHCLKFreq>
 800cdec:	4602      	mov	r2, r0
 800cdee:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	091b      	lsrs	r3, r3, #4
 800cdf4:	f003 0307 	and.w	r3, r3, #7
 800cdf8:	4904      	ldr	r1, [pc, #16]	; (800ce0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cdfa:	5ccb      	ldrb	r3, [r1, r3]
 800cdfc:	f003 031f 	and.w	r3, r3, #31
 800ce00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	58024400 	.word	0x58024400
 800ce0c:	0801785c 	.word	0x0801785c

0800ce10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b089      	sub	sp, #36	; 0x24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce18:	4ba1      	ldr	r3, [pc, #644]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1c:	f003 0303 	and.w	r3, r3, #3
 800ce20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ce22:	4b9f      	ldr	r3, [pc, #636]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce26:	0b1b      	lsrs	r3, r3, #12
 800ce28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ce2e:	4b9c      	ldr	r3, [pc, #624]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce32:	091b      	lsrs	r3, r3, #4
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ce3a:	4b99      	ldr	r3, [pc, #612]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3e:	08db      	lsrs	r3, r3, #3
 800ce40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	fb02 f303 	mul.w	r3, r2, r3
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 8111 	beq.w	800d080 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	f000 8083 	beq.w	800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	f200 80a1 	bhi.w	800cfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d003      	beq.n	800ce7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d056      	beq.n	800cf28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ce7a:	e099      	b.n	800cfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce7c:	4b88      	ldr	r3, [pc, #544]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 0320 	and.w	r3, r3, #32
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d02d      	beq.n	800cee4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce88:	4b85      	ldr	r3, [pc, #532]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	08db      	lsrs	r3, r3, #3
 800ce8e:	f003 0303 	and.w	r3, r3, #3
 800ce92:	4a84      	ldr	r2, [pc, #528]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce94:	fa22 f303 	lsr.w	r3, r2, r3
 800ce98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	ee07 3a90 	vmov	s15, r3
 800cea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb2:	4b7b      	ldr	r3, [pc, #492]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ceca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cede:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cee2:	e087      	b.n	800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	ee07 3a90 	vmov	s15, r3
 800ceea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef6:	4b6a      	ldr	r3, [pc, #424]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf26:	e065      	b.n	800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf3a:	4b59      	ldr	r3, [pc, #356]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf42:	ee07 3a90 	vmov	s15, r3
 800cf46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf6a:	e043      	b.n	800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	ee07 3a90 	vmov	s15, r3
 800cf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cf7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf7e:	4b48      	ldr	r3, [pc, #288]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf86:	ee07 3a90 	vmov	s15, r3
 800cf8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfae:	e021      	b.n	800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	ee07 3a90 	vmov	s15, r3
 800cfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfc2:	4b37      	ldr	r3, [pc, #220]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cff2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cff4:	4b2a      	ldr	r3, [pc, #168]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff8:	0a5b      	lsrs	r3, r3, #9
 800cffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d00a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d00e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d01a:	ee17 2a90 	vmov	r2, s15
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d022:	4b1f      	ldr	r3, [pc, #124]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d026:	0c1b      	lsrs	r3, r3, #16
 800d028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d02c:	ee07 3a90 	vmov	s15, r3
 800d030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d03c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d048:	ee17 2a90 	vmov	r2, s15
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d050:	4b13      	ldr	r3, [pc, #76]	; (800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d054:	0e1b      	lsrs	r3, r3, #24
 800d056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d05a:	ee07 3a90 	vmov	s15, r3
 800d05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d06a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d06e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d076:	ee17 2a90 	vmov	r2, s15
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d07e:	e008      	b.n	800d092 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	609a      	str	r2, [r3, #8]
}
 800d092:	bf00      	nop
 800d094:	3724      	adds	r7, #36	; 0x24
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	58024400 	.word	0x58024400
 800d0a4:	03d09000 	.word	0x03d09000
 800d0a8:	46000000 	.word	0x46000000
 800d0ac:	4c742400 	.word	0x4c742400
 800d0b0:	4a742400 	.word	0x4a742400
 800d0b4:	4bbebc20 	.word	0x4bbebc20

0800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b089      	sub	sp, #36	; 0x24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0c0:	4ba1      	ldr	r3, [pc, #644]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c4:	f003 0303 	and.w	r3, r3, #3
 800d0c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d0ca:	4b9f      	ldr	r3, [pc, #636]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ce:	0d1b      	lsrs	r3, r3, #20
 800d0d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d0d6:	4b9c      	ldr	r3, [pc, #624]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0da:	0a1b      	lsrs	r3, r3, #8
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d0e2:	4b99      	ldr	r3, [pc, #612]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0e6:	08db      	lsrs	r3, r3, #3
 800d0e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0ec:	693a      	ldr	r2, [r7, #16]
 800d0ee:	fb02 f303 	mul.w	r3, r2, r3
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2b00      	cmp	r3, #0
 800d102:	f000 8111 	beq.w	800d328 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	f000 8083 	beq.w	800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	2b02      	cmp	r3, #2
 800d112:	f200 80a1 	bhi.w	800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d003      	beq.n	800d124 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d056      	beq.n	800d1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d122:	e099      	b.n	800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d124:	4b88      	ldr	r3, [pc, #544]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f003 0320 	and.w	r3, r3, #32
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d02d      	beq.n	800d18c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d130:	4b85      	ldr	r3, [pc, #532]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	08db      	lsrs	r3, r3, #3
 800d136:	f003 0303 	and.w	r3, r3, #3
 800d13a:	4a84      	ldr	r2, [pc, #528]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d13c:	fa22 f303 	lsr.w	r3, r2, r3
 800d140:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	ee07 3a90 	vmov	s15, r3
 800d148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	ee07 3a90 	vmov	s15, r3
 800d152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d15a:	4b7b      	ldr	r3, [pc, #492]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d162:	ee07 3a90 	vmov	s15, r3
 800d166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d16a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d16e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d17a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d186:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d18a:	e087      	b.n	800d29c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d196:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d19e:	4b6a      	ldr	r3, [pc, #424]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a6:	ee07 3a90 	vmov	s15, r3
 800d1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1ce:	e065      	b.n	800d29c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d358 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1e2:	4b59      	ldr	r3, [pc, #356]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ea:	ee07 3a90 	vmov	s15, r3
 800d1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d20e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d212:	e043      	b.n	800d29c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	ee07 3a90 	vmov	s15, r3
 800d21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d35c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d226:	4b48      	ldr	r3, [pc, #288]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d22e:	ee07 3a90 	vmov	s15, r3
 800d232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d236:	ed97 6a03 	vldr	s12, [r7, #12]
 800d23a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d256:	e021      	b.n	800d29c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	ee07 3a90 	vmov	s15, r3
 800d25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d262:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d358 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d26a:	4b37      	ldr	r3, [pc, #220]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d272:	ee07 3a90 	vmov	s15, r3
 800d276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d27e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d28a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d29a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d29c:	4b2a      	ldr	r3, [pc, #168]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a0:	0a5b      	lsrs	r3, r3, #9
 800d2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c2:	ee17 2a90 	vmov	r2, s15
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d2ca:	4b1f      	ldr	r3, [pc, #124]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ce:	0c1b      	lsrs	r3, r3, #16
 800d2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2d4:	ee07 3a90 	vmov	s15, r3
 800d2d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f0:	ee17 2a90 	vmov	r2, s15
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d2f8:	4b13      	ldr	r3, [pc, #76]	; (800d348 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fc:	0e1b      	lsrs	r3, r3, #24
 800d2fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d302:	ee07 3a90 	vmov	s15, r3
 800d306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d30e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d312:	edd7 6a07 	vldr	s13, [r7, #28]
 800d316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d31a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d31e:	ee17 2a90 	vmov	r2, s15
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d326:	e008      	b.n	800d33a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	609a      	str	r2, [r3, #8]
}
 800d33a:	bf00      	nop
 800d33c:	3724      	adds	r7, #36	; 0x24
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	58024400 	.word	0x58024400
 800d34c:	03d09000 	.word	0x03d09000
 800d350:	46000000 	.word	0x46000000
 800d354:	4c742400 	.word	0x4c742400
 800d358:	4a742400 	.word	0x4a742400
 800d35c:	4bbebc20 	.word	0x4bbebc20

0800d360 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d360:	b480      	push	{r7}
 800d362:	b089      	sub	sp, #36	; 0x24
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d368:	4ba0      	ldr	r3, [pc, #640]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36c:	f003 0303 	and.w	r3, r3, #3
 800d370:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d372:	4b9e      	ldr	r3, [pc, #632]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d376:	091b      	lsrs	r3, r3, #4
 800d378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d37c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d37e:	4b9b      	ldr	r3, [pc, #620]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d388:	4b98      	ldr	r3, [pc, #608]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38c:	08db      	lsrs	r3, r3, #3
 800d38e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	fb02 f303 	mul.w	r3, r2, r3
 800d398:	ee07 3a90 	vmov	s15, r3
 800d39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 8111 	beq.w	800d5ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	f000 8083 	beq.w	800d4ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	f200 80a1 	bhi.w	800d4fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d056      	beq.n	800d476 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d3c8:	e099      	b.n	800d4fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3ca:	4b88      	ldr	r3, [pc, #544]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d02d      	beq.n	800d432 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3d6:	4b85      	ldr	r3, [pc, #532]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	08db      	lsrs	r3, r3, #3
 800d3dc:	f003 0303 	and.w	r3, r3, #3
 800d3e0:	4a83      	ldr	r2, [pc, #524]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3e6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	ee07 3a90 	vmov	s15, r3
 800d3f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d400:	4b7a      	ldr	r3, [pc, #488]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d408:	ee07 3a90 	vmov	s15, r3
 800d40c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d410:	ed97 6a03 	vldr	s12, [r7, #12]
 800d414:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d41c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d42c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d430:	e087      	b.n	800d542 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	ee07 3a90 	vmov	s15, r3
 800d438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d43c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d444:	4b69      	ldr	r3, [pc, #420]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d44c:	ee07 3a90 	vmov	s15, r3
 800d450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d454:	ed97 6a03 	vldr	s12, [r7, #12]
 800d458:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d45c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d46c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d470:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d474:	e065      	b.n	800d542 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	ee07 3a90 	vmov	s15, r3
 800d47c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d480:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d5fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d488:	4b58      	ldr	r3, [pc, #352]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d490:	ee07 3a90 	vmov	s15, r3
 800d494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d498:	ed97 6a03 	vldr	s12, [r7, #12]
 800d49c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4b8:	e043      	b.n	800d542 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	ee07 3a90 	vmov	s15, r3
 800d4c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d600 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d4c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4cc:	4b47      	ldr	r3, [pc, #284]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4d4:	ee07 3a90 	vmov	s15, r3
 800d4d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4fc:	e021      	b.n	800d542 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	ee07 3a90 	vmov	s15, r3
 800d504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d508:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d50c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d510:	4b36      	ldr	r3, [pc, #216]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d518:	ee07 3a90 	vmov	s15, r3
 800d51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d520:	ed97 6a03 	vldr	s12, [r7, #12]
 800d524:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d52c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d53c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d540:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d542:	4b2a      	ldr	r3, [pc, #168]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d546:	0a5b      	lsrs	r3, r3, #9
 800d548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d54c:	ee07 3a90 	vmov	s15, r3
 800d550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d55c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d568:	ee17 2a90 	vmov	r2, s15
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d570:	4b1e      	ldr	r3, [pc, #120]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d574:	0c1b      	lsrs	r3, r3, #16
 800d576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d57a:	ee07 3a90 	vmov	s15, r3
 800d57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d58a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d58e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d596:	ee17 2a90 	vmov	r2, s15
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d59e:	4b13      	ldr	r3, [pc, #76]	; (800d5ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a2:	0e1b      	lsrs	r3, r3, #24
 800d5a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5a8:	ee07 3a90 	vmov	s15, r3
 800d5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5c4:	ee17 2a90 	vmov	r2, s15
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d5cc:	e008      	b.n	800d5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	609a      	str	r2, [r3, #8]
}
 800d5e0:	bf00      	nop
 800d5e2:	3724      	adds	r7, #36	; 0x24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	58024400 	.word	0x58024400
 800d5f0:	03d09000 	.word	0x03d09000
 800d5f4:	46000000 	.word	0x46000000
 800d5f8:	4c742400 	.word	0x4c742400
 800d5fc:	4a742400 	.word	0x4a742400
 800d600:	4bbebc20 	.word	0x4bbebc20

0800d604 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d612:	4b53      	ldr	r3, [pc, #332]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d616:	f003 0303 	and.w	r3, r3, #3
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d101      	bne.n	800d622 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e099      	b.n	800d756 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d622:	4b4f      	ldr	r3, [pc, #316]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a4e      	ldr	r2, [pc, #312]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d628:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d62c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d62e:	f7f6 fc53 	bl	8003ed8 <HAL_GetTick>
 800d632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d634:	e008      	b.n	800d648 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d636:	f7f6 fc4f 	bl	8003ed8 <HAL_GetTick>
 800d63a:	4602      	mov	r2, r0
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	2b02      	cmp	r3, #2
 800d642:	d901      	bls.n	800d648 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d644:	2303      	movs	r3, #3
 800d646:	e086      	b.n	800d756 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d648:	4b45      	ldr	r3, [pc, #276]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1f0      	bne.n	800d636 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d654:	4b42      	ldr	r3, [pc, #264]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d658:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	031b      	lsls	r3, r3, #12
 800d662:	493f      	ldr	r1, [pc, #252]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d664:	4313      	orrs	r3, r2
 800d666:	628b      	str	r3, [r1, #40]	; 0x28
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	3b01      	subs	r3, #1
 800d678:	025b      	lsls	r3, r3, #9
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	431a      	orrs	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	3b01      	subs	r3, #1
 800d684:	041b      	lsls	r3, r3, #16
 800d686:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d68a:	431a      	orrs	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	3b01      	subs	r3, #1
 800d692:	061b      	lsls	r3, r3, #24
 800d694:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d698:	4931      	ldr	r1, [pc, #196]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d69a:	4313      	orrs	r3, r2
 800d69c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d69e:	4b30      	ldr	r3, [pc, #192]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	492d      	ldr	r1, [pc, #180]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d6b0:	4b2b      	ldr	r3, [pc, #172]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b4:	f023 0220 	bic.w	r2, r3, #32
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	4928      	ldr	r1, [pc, #160]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d6c2:	4b27      	ldr	r3, [pc, #156]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c6:	4a26      	ldr	r2, [pc, #152]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6c8:	f023 0310 	bic.w	r3, r3, #16
 800d6cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d6ce:	4b24      	ldr	r3, [pc, #144]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6d2:	4b24      	ldr	r3, [pc, #144]	; (800d764 <RCCEx_PLL2_Config+0x160>)
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	69d2      	ldr	r2, [r2, #28]
 800d6da:	00d2      	lsls	r2, r2, #3
 800d6dc:	4920      	ldr	r1, [pc, #128]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d6e2:	4b1f      	ldr	r3, [pc, #124]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e6:	4a1e      	ldr	r2, [pc, #120]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6e8:	f043 0310 	orr.w	r3, r3, #16
 800d6ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d106      	bne.n	800d702 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d6f4:	4b1a      	ldr	r3, [pc, #104]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f8:	4a19      	ldr	r2, [pc, #100]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d6fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d700:	e00f      	b.n	800d722 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d106      	bne.n	800d716 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d708:	4b15      	ldr	r3, [pc, #84]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70c:	4a14      	ldr	r2, [pc, #80]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d70e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d712:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d714:	e005      	b.n	800d722 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d716:	4b12      	ldr	r3, [pc, #72]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71a:	4a11      	ldr	r2, [pc, #68]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d71c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d720:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d722:	4b0f      	ldr	r3, [pc, #60]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a0e      	ldr	r2, [pc, #56]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d728:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d72c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d72e:	f7f6 fbd3 	bl	8003ed8 <HAL_GetTick>
 800d732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d734:	e008      	b.n	800d748 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d736:	f7f6 fbcf 	bl	8003ed8 <HAL_GetTick>
 800d73a:	4602      	mov	r2, r0
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	2b02      	cmp	r3, #2
 800d742:	d901      	bls.n	800d748 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d744:	2303      	movs	r3, #3
 800d746:	e006      	b.n	800d756 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d748:	4b05      	ldr	r3, [pc, #20]	; (800d760 <RCCEx_PLL2_Config+0x15c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d750:	2b00      	cmp	r3, #0
 800d752:	d0f0      	beq.n	800d736 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d754:	7bfb      	ldrb	r3, [r7, #15]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	58024400 	.word	0x58024400
 800d764:	ffff0007 	.word	0xffff0007

0800d768 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d776:	4b53      	ldr	r3, [pc, #332]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d77a:	f003 0303 	and.w	r3, r3, #3
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d101      	bne.n	800d786 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e099      	b.n	800d8ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d786:	4b4f      	ldr	r3, [pc, #316]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a4e      	ldr	r2, [pc, #312]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d78c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d792:	f7f6 fba1 	bl	8003ed8 <HAL_GetTick>
 800d796:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d798:	e008      	b.n	800d7ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d79a:	f7f6 fb9d 	bl	8003ed8 <HAL_GetTick>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d901      	bls.n	800d7ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e086      	b.n	800d8ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7ac:	4b45      	ldr	r3, [pc, #276]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1f0      	bne.n	800d79a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d7b8:	4b42      	ldr	r3, [pc, #264]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	051b      	lsls	r3, r3, #20
 800d7c6:	493f      	ldr	r1, [pc, #252]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	628b      	str	r3, [r1, #40]	; 0x28
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	025b      	lsls	r3, r3, #9
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	041b      	lsls	r3, r3, #16
 800d7ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	061b      	lsls	r3, r3, #24
 800d7f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7fc:	4931      	ldr	r1, [pc, #196]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d7fe:	4313      	orrs	r3, r2
 800d800:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d802:	4b30      	ldr	r3, [pc, #192]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d806:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	492d      	ldr	r1, [pc, #180]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d810:	4313      	orrs	r3, r2
 800d812:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d814:	4b2b      	ldr	r3, [pc, #172]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	4928      	ldr	r1, [pc, #160]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d822:	4313      	orrs	r3, r2
 800d824:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d826:	4b27      	ldr	r3, [pc, #156]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82a:	4a26      	ldr	r2, [pc, #152]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d82c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d832:	4b24      	ldr	r3, [pc, #144]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d836:	4b24      	ldr	r3, [pc, #144]	; (800d8c8 <RCCEx_PLL3_Config+0x160>)
 800d838:	4013      	ands	r3, r2
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	69d2      	ldr	r2, [r2, #28]
 800d83e:	00d2      	lsls	r2, r2, #3
 800d840:	4920      	ldr	r1, [pc, #128]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d842:	4313      	orrs	r3, r2
 800d844:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d846:	4b1f      	ldr	r3, [pc, #124]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84a:	4a1e      	ldr	r2, [pc, #120]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d84c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d850:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d106      	bne.n	800d866 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d858:	4b1a      	ldr	r3, [pc, #104]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	4a19      	ldr	r2, [pc, #100]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d85e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d862:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d864:	e00f      	b.n	800d886 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d106      	bne.n	800d87a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d86c:	4b15      	ldr	r3, [pc, #84]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d870:	4a14      	ldr	r2, [pc, #80]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d872:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d876:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d878:	e005      	b.n	800d886 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d87a:	4b12      	ldr	r3, [pc, #72]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87e:	4a11      	ldr	r2, [pc, #68]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d884:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d886:	4b0f      	ldr	r3, [pc, #60]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a0e      	ldr	r2, [pc, #56]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d88c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d892:	f7f6 fb21 	bl	8003ed8 <HAL_GetTick>
 800d896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d898:	e008      	b.n	800d8ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d89a:	f7f6 fb1d 	bl	8003ed8 <HAL_GetTick>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d901      	bls.n	800d8ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e006      	b.n	800d8ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8ac:	4b05      	ldr	r3, [pc, #20]	; (800d8c4 <RCCEx_PLL3_Config+0x15c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d0f0      	beq.n	800d89a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	58024400 	.word	0x58024400
 800d8c8:	ffff0007 	.word	0xffff0007

0800d8cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d071      	beq.n	800d9c2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d106      	bne.n	800d8f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7f5 fdb2 	bl	800345c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	f003 0310 	and.w	r3, r3, #16
 800d90a:	2b10      	cmp	r3, #16
 800d90c:	d050      	beq.n	800d9b0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	22ca      	movs	r2, #202	; 0xca
 800d914:	625a      	str	r2, [r3, #36]	; 0x24
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2253      	movs	r2, #83	; 0x53
 800d91c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fa4a 	bl	800ddb8 <RTC_EnterInitMode>
 800d924:	4603      	mov	r3, r0
 800d926:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d124      	bne.n	800d978 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6899      	ldr	r1, [r3, #8]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	4b24      	ldr	r3, [pc, #144]	; (800d9cc <HAL_RTC_Init+0x100>)
 800d93a:	400b      	ands	r3, r1
 800d93c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6899      	ldr	r1, [r3, #8]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	431a      	orrs	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	431a      	orrs	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	430a      	orrs	r2, r1
 800d95a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	0419      	lsls	r1, r3, #16
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fa56 	bl	800de20 <RTC_ExitInitMode>
 800d974:	4603      	mov	r3, r0
 800d976:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d113      	bne.n	800d9a6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f022 0203 	bic.w	r2, r2, #3
 800d98c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	69da      	ldr	r2, [r3, #28]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	431a      	orrs	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	22ff      	movs	r2, #255	; 0xff
 800d9ac:	625a      	str	r2, [r3, #36]	; 0x24
 800d9ae:	e001      	b.n	800d9b4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d103      	bne.n	800d9c2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	ff8fffbf 	.word	0xff8fffbf

0800d9d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d9d0:	b590      	push	{r4, r7, lr}
 800d9d2:	b087      	sub	sp, #28
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d101      	bne.n	800d9ea <HAL_RTC_SetTime+0x1a>
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	e089      	b.n	800dafe <HAL_RTC_SetTime+0x12e>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	22ca      	movs	r2, #202	; 0xca
 800da00:	625a      	str	r2, [r3, #36]	; 0x24
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2253      	movs	r2, #83	; 0x53
 800da08:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f000 f9d4 	bl	800ddb8 <RTC_EnterInitMode>
 800da10:	4603      	mov	r3, r0
 800da12:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da14:	7cfb      	ldrb	r3, [r7, #19]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d161      	bne.n	800dade <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d126      	bne.n	800da6e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d102      	bne.n	800da34 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2200      	movs	r2, #0
 800da32:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 fa2f 	bl	800de9c <RTC_ByteToBcd2>
 800da3e:	4603      	mov	r3, r0
 800da40:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	785b      	ldrb	r3, [r3, #1]
 800da46:	4618      	mov	r0, r3
 800da48:	f000 fa28 	bl	800de9c <RTC_ByteToBcd2>
 800da4c:	4603      	mov	r3, r0
 800da4e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da50:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	789b      	ldrb	r3, [r3, #2]
 800da56:	4618      	mov	r0, r3
 800da58:	f000 fa20 	bl	800de9c <RTC_ByteToBcd2>
 800da5c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da5e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	78db      	ldrb	r3, [r3, #3]
 800da66:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da68:	4313      	orrs	r3, r2
 800da6a:	617b      	str	r3, [r7, #20]
 800da6c:	e018      	b.n	800daa0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2200      	movs	r2, #0
 800da80:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	785b      	ldrb	r3, [r3, #1]
 800da8c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da8e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da94:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	78db      	ldrb	r3, [r3, #3]
 800da9a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da9c:	4313      	orrs	r3, r2
 800da9e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	6979      	ldr	r1, [r7, #20]
 800daa6:	4b18      	ldr	r3, [pc, #96]	; (800db08 <HAL_RTC_SetTime+0x138>)
 800daa8:	400b      	ands	r3, r1
 800daaa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	689a      	ldr	r2, [r3, #8]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800daba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6899      	ldr	r1, [r3, #8]
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	68da      	ldr	r2, [r3, #12]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	431a      	orrs	r2, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	430a      	orrs	r2, r1
 800dad2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f000 f9a3 	bl	800de20 <RTC_ExitInitMode>
 800dada:	4603      	mov	r3, r0
 800dadc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	22ff      	movs	r2, #255	; 0xff
 800dae4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dae6:	7cfb      	ldrb	r3, [r7, #19]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d103      	bne.n	800daf4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dafc:	7cfb      	ldrb	r3, [r7, #19]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	bd90      	pop	{r4, r7, pc}
 800db06:	bf00      	nop
 800db08:	007f7f7f 	.word	0x007f7f7f

0800db0c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	4b22      	ldr	r3, [pc, #136]	; (800dbc0 <HAL_RTC_GetTime+0xb4>)
 800db38:	4013      	ands	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	0c1b      	lsrs	r3, r3, #16
 800db40:	b2db      	uxtb	r3, r3
 800db42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db46:	b2da      	uxtb	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	0a1b      	lsrs	r3, r3, #8
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db56:	b2da      	uxtb	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db64:	b2da      	uxtb	r2, r3
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	0d9b      	lsrs	r3, r3, #22
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	f003 0301 	and.w	r3, r3, #1
 800db74:	b2da      	uxtb	r2, r3
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d11a      	bne.n	800dbb6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	4618      	mov	r0, r3
 800db86:	f000 f9a9 	bl	800dedc <RTC_Bcd2ToByte>
 800db8a:	4603      	mov	r3, r0
 800db8c:	461a      	mov	r2, r3
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	785b      	ldrb	r3, [r3, #1]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 f9a0 	bl	800dedc <RTC_Bcd2ToByte>
 800db9c:	4603      	mov	r3, r0
 800db9e:	461a      	mov	r2, r3
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	789b      	ldrb	r3, [r3, #2]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f997 	bl	800dedc <RTC_Bcd2ToByte>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	007f7f7f 	.word	0x007f7f7f

0800dbc4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dbc4:	b590      	push	{r4, r7, lr}
 800dbc6:	b087      	sub	sp, #28
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d101      	bne.n	800dbde <HAL_RTC_SetDate+0x1a>
 800dbda:	2302      	movs	r3, #2
 800dbdc:	e073      	b.n	800dcc6 <HAL_RTC_SetDate+0x102>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2202      	movs	r2, #2
 800dbea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10e      	bne.n	800dc12 <HAL_RTC_SetDate+0x4e>
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	785b      	ldrb	r3, [r3, #1]
 800dbf8:	f003 0310 	and.w	r3, r3, #16
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d008      	beq.n	800dc12 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	785b      	ldrb	r3, [r3, #1]
 800dc04:	f023 0310 	bic.w	r3, r3, #16
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	330a      	adds	r3, #10
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d11c      	bne.n	800dc52 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	78db      	ldrb	r3, [r3, #3]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f000 f93d 	bl	800de9c <RTC_ByteToBcd2>
 800dc22:	4603      	mov	r3, r0
 800dc24:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	785b      	ldrb	r3, [r3, #1]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 f936 	bl	800de9c <RTC_ByteToBcd2>
 800dc30:	4603      	mov	r3, r0
 800dc32:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dc34:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	789b      	ldrb	r3, [r3, #2]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 f92e 	bl	800de9c <RTC_ByteToBcd2>
 800dc40:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dc42:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	617b      	str	r3, [r7, #20]
 800dc50:	e00e      	b.n	800dc70 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	78db      	ldrb	r3, [r3, #3]
 800dc56:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	785b      	ldrb	r3, [r3, #1]
 800dc5c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dc5e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dc64:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dc6c:	4313      	orrs	r3, r2
 800dc6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	22ca      	movs	r2, #202	; 0xca
 800dc76:	625a      	str	r2, [r3, #36]	; 0x24
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2253      	movs	r2, #83	; 0x53
 800dc7e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f000 f899 	bl	800ddb8 <RTC_EnterInitMode>
 800dc86:	4603      	mov	r3, r0
 800dc88:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dc8a:	7cfb      	ldrb	r3, [r7, #19]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10a      	bne.n	800dca6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	6979      	ldr	r1, [r7, #20]
 800dc96:	4b0e      	ldr	r3, [pc, #56]	; (800dcd0 <HAL_RTC_SetDate+0x10c>)
 800dc98:	400b      	ands	r3, r1
 800dc9a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f000 f8bf 	bl	800de20 <RTC_ExitInitMode>
 800dca2:	4603      	mov	r3, r0
 800dca4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	22ff      	movs	r2, #255	; 0xff
 800dcac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dcae:	7cfb      	ldrb	r3, [r7, #19]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d103      	bne.n	800dcbc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dcc4:	7cfb      	ldrb	r3, [r7, #19]


}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	371c      	adds	r7, #28
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd90      	pop	{r4, r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	00ffff3f 	.word	0x00ffff3f

0800dcd4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685a      	ldr	r2, [r3, #4]
 800dce6:	4b21      	ldr	r3, [pc, #132]	; (800dd6c <HAL_RTC_GetDate+0x98>)
 800dce8:	4013      	ands	r3, r2
 800dcea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	0c1b      	lsrs	r3, r3, #16
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	0a1b      	lsrs	r3, r3, #8
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 031f 	and.w	r3, r3, #31
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	0b5b      	lsrs	r3, r3, #13
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	f003 0307 	and.w	r3, r3, #7
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d11a      	bne.n	800dd60 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	78db      	ldrb	r3, [r3, #3]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 f8d4 	bl	800dedc <RTC_Bcd2ToByte>
 800dd34:	4603      	mov	r3, r0
 800dd36:	461a      	mov	r2, r3
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	785b      	ldrb	r3, [r3, #1]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 f8cb 	bl	800dedc <RTC_Bcd2ToByte>
 800dd46:	4603      	mov	r3, r0
 800dd48:	461a      	mov	r2, r3
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	789b      	ldrb	r3, [r3, #2]
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 f8c2 	bl	800dedc <RTC_Bcd2ToByte>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	00ffff3f 	.word	0x00ffff3f

0800dd70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a0d      	ldr	r2, [pc, #52]	; (800ddb4 <HAL_RTC_WaitForSynchro+0x44>)
 800dd7e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dd80:	f7f6 f8aa 	bl	8003ed8 <HAL_GetTick>
 800dd84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd86:	e009      	b.n	800dd9c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd88:	f7f6 f8a6 	bl	8003ed8 <HAL_GetTick>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd96:	d901      	bls.n	800dd9c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	e007      	b.n	800ddac <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	f003 0320 	and.w	r3, r3, #32
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0ee      	beq.n	800dd88 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	0003ff5f 	.word	0x0003ff5f

0800ddb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d120      	bne.n	800de14 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddda:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dddc:	f7f6 f87c 	bl	8003ed8 <HAL_GetTick>
 800dde0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dde2:	e00d      	b.n	800de00 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dde4:	f7f6 f878 	bl	8003ed8 <HAL_GetTick>
 800dde8:	4602      	mov	r2, r0
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	1ad3      	subs	r3, r2, r3
 800ddee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddf2:	d905      	bls.n	800de00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2203      	movs	r2, #3
 800ddfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d102      	bne.n	800de14 <RTC_EnterInitMode+0x5c>
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
 800de10:	2b03      	cmp	r3, #3
 800de12:	d1e7      	bne.n	800dde4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
	...

0800de20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de28:	2300      	movs	r3, #0
 800de2a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800de2c:	4b1a      	ldr	r3, [pc, #104]	; (800de98 <RTC_ExitInitMode+0x78>)
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	4a19      	ldr	r2, [pc, #100]	; (800de98 <RTC_ExitInitMode+0x78>)
 800de32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de36:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800de38:	4b17      	ldr	r3, [pc, #92]	; (800de98 <RTC_ExitInitMode+0x78>)
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	f003 0320 	and.w	r3, r3, #32
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10c      	bne.n	800de5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7ff ff93 	bl	800dd70 <HAL_RTC_WaitForSynchro>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01e      	beq.n	800de8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2203      	movs	r2, #3
 800de54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800de58:	2303      	movs	r3, #3
 800de5a:	73fb      	strb	r3, [r7, #15]
 800de5c:	e017      	b.n	800de8e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800de5e:	4b0e      	ldr	r3, [pc, #56]	; (800de98 <RTC_ExitInitMode+0x78>)
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	4a0d      	ldr	r2, [pc, #52]	; (800de98 <RTC_ExitInitMode+0x78>)
 800de64:	f023 0320 	bic.w	r3, r3, #32
 800de68:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7ff ff80 	bl	800dd70 <HAL_RTC_WaitForSynchro>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d005      	beq.n	800de82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2203      	movs	r2, #3
 800de7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800de7e:	2303      	movs	r3, #3
 800de80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800de82:	4b05      	ldr	r3, [pc, #20]	; (800de98 <RTC_ExitInitMode+0x78>)
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	4a04      	ldr	r2, [pc, #16]	; (800de98 <RTC_ExitInitMode+0x78>)
 800de88:	f043 0320 	orr.w	r3, r3, #32
 800de8c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800de8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	58004000 	.word	0x58004000

0800de9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	4603      	mov	r3, r0
 800dea4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dea6:	2300      	movs	r3, #0
 800dea8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800deae:	e005      	b.n	800debc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3301      	adds	r3, #1
 800deb4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	3b0a      	subs	r3, #10
 800deba:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800debc:	7afb      	ldrb	r3, [r7, #11]
 800debe:	2b09      	cmp	r3, #9
 800dec0:	d8f6      	bhi.n	800deb0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	011b      	lsls	r3, r3, #4
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	7afb      	ldrb	r3, [r7, #11]
 800decc:	4313      	orrs	r3, r2
 800dece:	b2db      	uxtb	r3, r3
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3714      	adds	r7, #20
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	091b      	lsrs	r3, r3, #4
 800deea:	b2db      	uxtb	r3, r3
 800deec:	461a      	mov	r2, r3
 800deee:	0092      	lsls	r2, r2, #2
 800def0:	4413      	add	r3, r2
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800def6:	79fb      	ldrb	r3, [r7, #7]
 800def8:	f003 030f 	and.w	r3, r3, #15
 800defc:	b2da      	uxtb	r2, r3
 800defe:	7bfb      	ldrb	r3, [r7, #15]
 800df00:	4413      	add	r3, r2
 800df02:	b2db      	uxtb	r3, r3
}
 800df04:	4618      	mov	r0, r3
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	e10f      	b.n	800e142 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a87      	ldr	r2, [pc, #540]	; (800e14c <HAL_SPI_Init+0x23c>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d00f      	beq.n	800df52 <HAL_SPI_Init+0x42>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a86      	ldr	r2, [pc, #536]	; (800e150 <HAL_SPI_Init+0x240>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d00a      	beq.n	800df52 <HAL_SPI_Init+0x42>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a84      	ldr	r2, [pc, #528]	; (800e154 <HAL_SPI_Init+0x244>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d005      	beq.n	800df52 <HAL_SPI_Init+0x42>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	2b0f      	cmp	r3, #15
 800df4c:	d901      	bls.n	800df52 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e0f7      	b.n	800e142 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 fc12 	bl	800e77c <SPI_GetPacketSize>
 800df58:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a7b      	ldr	r2, [pc, #492]	; (800e14c <HAL_SPI_Init+0x23c>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d00c      	beq.n	800df7e <HAL_SPI_Init+0x6e>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a79      	ldr	r2, [pc, #484]	; (800e150 <HAL_SPI_Init+0x240>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d007      	beq.n	800df7e <HAL_SPI_Init+0x6e>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a78      	ldr	r2, [pc, #480]	; (800e154 <HAL_SPI_Init+0x244>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d002      	beq.n	800df7e <HAL_SPI_Init+0x6e>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b08      	cmp	r3, #8
 800df7c:	d811      	bhi.n	800dfa2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df82:	4a72      	ldr	r2, [pc, #456]	; (800e14c <HAL_SPI_Init+0x23c>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d009      	beq.n	800df9c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a70      	ldr	r2, [pc, #448]	; (800e150 <HAL_SPI_Init+0x240>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d004      	beq.n	800df9c <HAL_SPI_Init+0x8c>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a6f      	ldr	r2, [pc, #444]	; (800e154 <HAL_SPI_Init+0x244>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d104      	bne.n	800dfa6 <HAL_SPI_Init+0x96>
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b10      	cmp	r3, #16
 800dfa0:	d901      	bls.n	800dfa6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e0cd      	b.n	800e142 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7f5 fa82 	bl	80034c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0201 	bic.w	r2, r2, #1
 800dfd6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dfe2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dfec:	d119      	bne.n	800e022 <HAL_SPI_Init+0x112>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dff6:	d103      	bne.n	800e000 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d008      	beq.n	800e012 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10c      	bne.n	800e022 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e00c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e010:	d107      	bne.n	800e022 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e020:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00f      	beq.n	800e04e <HAL_SPI_Init+0x13e>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	2b06      	cmp	r3, #6
 800e034:	d90b      	bls.n	800e04e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	430a      	orrs	r2, r1
 800e04a:	601a      	str	r2, [r3, #0]
 800e04c:	e007      	b.n	800e05e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e05c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	69da      	ldr	r2, [r3, #28]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e066:	431a      	orrs	r2, r3
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	431a      	orrs	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e070:	ea42 0103 	orr.w	r1, r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	68da      	ldr	r2, [r3, #12]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e088:	431a      	orrs	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08e:	431a      	orrs	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	699b      	ldr	r3, [r3, #24]
 800e094:	431a      	orrs	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	431a      	orrs	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	695b      	ldr	r3, [r3, #20]
 800e0a0:	431a      	orrs	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	431a      	orrs	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0b2:	431a      	orrs	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	431a      	orrs	r2, r3
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0be:	ea42 0103 	orr.w	r1, r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	430a      	orrs	r2, r1
 800e0cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d113      	bne.n	800e0fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f022 0201 	bic.w	r2, r2, #1
 800e10c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	430a      	orrs	r2, r1
 800e12e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	40013000 	.word	0x40013000
 800e150:	40003800 	.word	0x40003800
 800e154:	40003c00 	.word	0x40003c00

0800e158 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b088      	sub	sp, #32
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	603b      	str	r3, [r7, #0]
 800e164:	4613      	mov	r3, r2
 800e166:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e16c:	095b      	lsrs	r3, r3, #5
 800e16e:	b29b      	uxth	r3, r3
 800e170:	3301      	adds	r3, #1
 800e172:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	3330      	adds	r3, #48	; 0x30
 800e17a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e17c:	f7f5 feac 	bl	8003ed8 <HAL_GetTick>
 800e180:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d001      	beq.n	800e192 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e18e:	2302      	movs	r3, #2
 800e190:	e250      	b.n	800e634 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <HAL_SPI_Receive+0x46>
 800e198:	88fb      	ldrh	r3, [r7, #6]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d101      	bne.n	800e1a2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e248      	b.n	800e634 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d101      	bne.n	800e1b0 <HAL_SPI_Receive+0x58>
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	e241      	b.n	800e634 <HAL_SPI_Receive+0x4dc>
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2204      	movs	r2, #4
 800e1bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	88fa      	ldrh	r2, [r7, #6]
 800e1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	88fa      	ldrh	r2, [r7, #6]
 800e1da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e208:	d108      	bne.n	800e21c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e218:	601a      	str	r2, [r3, #0]
 800e21a:	e009      	b.n	800e230 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e22e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	4b95      	ldr	r3, [pc, #596]	; (800e48c <HAL_SPI_Receive+0x334>)
 800e238:	4013      	ands	r3, r2
 800e23a:	88f9      	ldrh	r1, [r7, #6]
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	6812      	ldr	r2, [r2, #0]
 800e240:	430b      	orrs	r3, r1
 800e242:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f042 0201 	orr.w	r2, r2, #1
 800e252:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e25c:	d107      	bne.n	800e26e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e26c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	2b0f      	cmp	r3, #15
 800e274:	d96c      	bls.n	800e350 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e276:	e064      	b.n	800e342 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	f003 0301 	and.w	r3, r3, #1
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d114      	bne.n	800e2b8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e296:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e298:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e29e:	1d1a      	adds	r2, r3, #4
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2b6:	e044      	b.n	800e342 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	8bfa      	ldrh	r2, [r7, #30]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d919      	bls.n	800e2fa <HAL_SPI_Receive+0x1a2>
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d014      	beq.n	800e2fa <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e2da:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e0:	1d1a      	adds	r2, r3, #4
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2f8:	e023      	b.n	800e342 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2fa:	f7f5 fded 	bl	8003ed8 <HAL_GetTick>
 800e2fe:	4602      	mov	r2, r0
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	429a      	cmp	r2, r3
 800e308:	d803      	bhi.n	800e312 <HAL_SPI_Receive+0x1ba>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e310:	d102      	bne.n	800e318 <HAL_SPI_Receive+0x1c0>
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d114      	bne.n	800e342 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f000 f98f 	bl	800e63c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e324:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e33e:	2303      	movs	r3, #3
 800e340:	e178      	b.n	800e634 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e348:	b29b      	uxth	r3, r3
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d194      	bne.n	800e278 <HAL_SPI_Receive+0x120>
 800e34e:	e15e      	b.n	800e60e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	2b07      	cmp	r3, #7
 800e356:	f240 8153 	bls.w	800e600 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e35a:	e08f      	b.n	800e47c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d114      	bne.n	800e39c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e376:	69ba      	ldr	r2, [r7, #24]
 800e378:	8812      	ldrh	r2, [r2, #0]
 800e37a:	b292      	uxth	r2, r2
 800e37c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e382:	1c9a      	adds	r2, r3, #2
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e38e:	b29b      	uxth	r3, r3
 800e390:	3b01      	subs	r3, #1
 800e392:	b29a      	uxth	r2, r3
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e39a:	e06f      	b.n	800e47c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	8bfa      	ldrh	r2, [r7, #30]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d924      	bls.n	800e3f4 <HAL_SPI_Receive+0x29c>
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d01f      	beq.n	800e3f4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3b8:	69ba      	ldr	r2, [r7, #24]
 800e3ba:	8812      	ldrh	r2, [r2, #0]
 800e3bc:	b292      	uxth	r2, r2
 800e3be:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3c4:	1c9a      	adds	r2, r3, #2
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ce:	69ba      	ldr	r2, [r7, #24]
 800e3d0:	8812      	ldrh	r2, [r2, #0]
 800e3d2:	b292      	uxth	r2, r2
 800e3d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3da:	1c9a      	adds	r2, r3, #2
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	3b02      	subs	r3, #2
 800e3ea:	b29a      	uxth	r2, r3
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3f2:	e043      	b.n	800e47c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d119      	bne.n	800e434 <HAL_SPI_Receive+0x2dc>
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e406:	2b00      	cmp	r3, #0
 800e408:	d014      	beq.n	800e434 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e40e:	69ba      	ldr	r2, [r7, #24]
 800e410:	8812      	ldrh	r2, [r2, #0]
 800e412:	b292      	uxth	r2, r2
 800e414:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e41a:	1c9a      	adds	r2, r3, #2
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e426:	b29b      	uxth	r3, r3
 800e428:	3b01      	subs	r3, #1
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e432:	e023      	b.n	800e47c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e434:	f7f5 fd50 	bl	8003ed8 <HAL_GetTick>
 800e438:	4602      	mov	r2, r0
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	429a      	cmp	r2, r3
 800e442:	d803      	bhi.n	800e44c <HAL_SPI_Receive+0x2f4>
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e44a:	d102      	bne.n	800e452 <HAL_SPI_Receive+0x2fa>
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d114      	bne.n	800e47c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f000 f8f2 	bl	800e63c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e45e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	e0db      	b.n	800e634 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e482:	b29b      	uxth	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	f47f af69 	bne.w	800e35c <HAL_SPI_Receive+0x204>
 800e48a:	e0c0      	b.n	800e60e <HAL_SPI_Receive+0x4b6>
 800e48c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	695b      	ldr	r3, [r3, #20]
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d117      	bne.n	800e4d6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b2:	7812      	ldrb	r2, [r2, #0]
 800e4b4:	b2d2      	uxtb	r2, r2
 800e4b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4bc:	1c5a      	adds	r2, r3, #1
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4d4:	e094      	b.n	800e600 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	8bfa      	ldrh	r2, [r7, #30]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d946      	bls.n	800e572 <HAL_SPI_Receive+0x41a>
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d041      	beq.n	800e572 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4fa:	7812      	ldrb	r2, [r2, #0]
 800e4fc:	b2d2      	uxtb	r2, r2
 800e4fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e516:	7812      	ldrb	r2, [r2, #0]
 800e518:	b2d2      	uxtb	r2, r2
 800e51a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e520:	1c5a      	adds	r2, r3, #1
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e532:	7812      	ldrb	r2, [r2, #0]
 800e534:	b2d2      	uxtb	r2, r2
 800e536:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e54e:	7812      	ldrb	r2, [r2, #0]
 800e550:	b2d2      	uxtb	r2, r2
 800e552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e564:	b29b      	uxth	r3, r3
 800e566:	3b04      	subs	r3, #4
 800e568:	b29a      	uxth	r2, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e570:	e046      	b.n	800e600 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e578:	b29b      	uxth	r3, r3
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d81c      	bhi.n	800e5b8 <HAL_SPI_Receive+0x460>
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d017      	beq.n	800e5b8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e594:	7812      	ldrb	r2, [r2, #0]
 800e596:	b2d2      	uxtb	r2, r2
 800e598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5b6:	e023      	b.n	800e600 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5b8:	f7f5 fc8e 	bl	8003ed8 <HAL_GetTick>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d803      	bhi.n	800e5d0 <HAL_SPI_Receive+0x478>
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5ce:	d102      	bne.n	800e5d6 <HAL_SPI_Receive+0x47e>
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d114      	bne.n	800e600 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f000 f830 	bl	800e63c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e019      	b.n	800e634 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e606:	b29b      	uxth	r3, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f47f af41 	bne.w	800e490 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f000 f814 	bl	800e63c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	e000      	b.n	800e634 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e632:	2300      	movs	r3, #0
  }
}
 800e634:	4618      	mov	r0, r3
 800e636:	3720      	adds	r7, #32
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	699a      	ldr	r2, [r3, #24]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f042 0208 	orr.w	r2, r2, #8
 800e65a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	699a      	ldr	r2, [r3, #24]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f042 0210 	orr.w	r2, r2, #16
 800e66a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f022 0201 	bic.w	r2, r2, #1
 800e67a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6919      	ldr	r1, [r3, #16]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	4b3c      	ldr	r3, [pc, #240]	; (800e778 <SPI_CloseTransfer+0x13c>)
 800e688:	400b      	ands	r3, r1
 800e68a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689a      	ldr	r2, [r3, #8]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e69a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d014      	beq.n	800e6d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f003 0320 	and.w	r3, r3, #32
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00f      	beq.n	800e6d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	699a      	ldr	r2, [r3, #24]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f042 0220 	orr.w	r2, r2, #32
 800e6d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	2b03      	cmp	r3, #3
 800e6dc:	d014      	beq.n	800e708 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00f      	beq.n	800e708 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6ee:	f043 0204 	orr.w	r2, r3, #4
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	699a      	ldr	r2, [r3, #24]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e706:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00f      	beq.n	800e732 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e718:	f043 0201 	orr.w	r2, r3, #1
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	699a      	ldr	r2, [r3, #24]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e730:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00f      	beq.n	800e75c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e742:	f043 0208 	orr.w	r2, r3, #8
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	699a      	ldr	r2, [r3, #24]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e75a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e76c:	bf00      	nop
 800e76e:	3714      	adds	r7, #20
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr
 800e778:	fffffc90 	.word	0xfffffc90

0800e77c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e788:	095b      	lsrs	r3, r3, #5
 800e78a:	3301      	adds	r3, #1
 800e78c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	3301      	adds	r3, #1
 800e794:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	3307      	adds	r3, #7
 800e79a:	08db      	lsrs	r3, r3, #3
 800e79c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b082      	sub	sp, #8
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e049      	b.n	800e858 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d106      	bne.n	800e7de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7f4 ff29 	bl	8003630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	f000 fe7d 	bl	800f4f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2201      	movs	r2, #1
 800e802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2201      	movs	r2, #1
 800e80a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2201      	movs	r2, #1
 800e812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2201      	movs	r2, #1
 800e81a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2201      	movs	r2, #1
 800e82a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2201      	movs	r2, #1
 800e832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2201      	movs	r2, #1
 800e83a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e856:	2300      	movs	r3, #0
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e860:	b480      	push	{r7}
 800e862:	b085      	sub	sp, #20
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b01      	cmp	r3, #1
 800e872:	d001      	beq.n	800e878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	e054      	b.n	800e922 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2202      	movs	r2, #2
 800e87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	68da      	ldr	r2, [r3, #12]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f042 0201 	orr.w	r2, r2, #1
 800e88e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a26      	ldr	r2, [pc, #152]	; (800e930 <HAL_TIM_Base_Start_IT+0xd0>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d022      	beq.n	800e8e0 <HAL_TIM_Base_Start_IT+0x80>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8a2:	d01d      	beq.n	800e8e0 <HAL_TIM_Base_Start_IT+0x80>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a22      	ldr	r2, [pc, #136]	; (800e934 <HAL_TIM_Base_Start_IT+0xd4>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d018      	beq.n	800e8e0 <HAL_TIM_Base_Start_IT+0x80>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a21      	ldr	r2, [pc, #132]	; (800e938 <HAL_TIM_Base_Start_IT+0xd8>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d013      	beq.n	800e8e0 <HAL_TIM_Base_Start_IT+0x80>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a1f      	ldr	r2, [pc, #124]	; (800e93c <HAL_TIM_Base_Start_IT+0xdc>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d00e      	beq.n	800e8e0 <HAL_TIM_Base_Start_IT+0x80>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a1e      	ldr	r2, [pc, #120]	; (800e940 <HAL_TIM_Base_Start_IT+0xe0>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d009      	beq.n	800e8e0 <HAL_TIM_Base_Start_IT+0x80>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a1c      	ldr	r2, [pc, #112]	; (800e944 <HAL_TIM_Base_Start_IT+0xe4>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d004      	beq.n	800e8e0 <HAL_TIM_Base_Start_IT+0x80>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a1b      	ldr	r2, [pc, #108]	; (800e948 <HAL_TIM_Base_Start_IT+0xe8>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d115      	bne.n	800e90c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	689a      	ldr	r2, [r3, #8]
 800e8e6:	4b19      	ldr	r3, [pc, #100]	; (800e94c <HAL_TIM_Base_Start_IT+0xec>)
 800e8e8:	4013      	ands	r3, r2
 800e8ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2b06      	cmp	r3, #6
 800e8f0:	d015      	beq.n	800e91e <HAL_TIM_Base_Start_IT+0xbe>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8f8:	d011      	beq.n	800e91e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f042 0201 	orr.w	r2, r2, #1
 800e908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e90a:	e008      	b.n	800e91e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f042 0201 	orr.w	r2, r2, #1
 800e91a:	601a      	str	r2, [r3, #0]
 800e91c:	e000      	b.n	800e920 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e91e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3714      	adds	r7, #20
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	40010000 	.word	0x40010000
 800e934:	40000400 	.word	0x40000400
 800e938:	40000800 	.word	0x40000800
 800e93c:	40000c00 	.word	0x40000c00
 800e940:	40010400 	.word	0x40010400
 800e944:	40001800 	.word	0x40001800
 800e948:	40014000 	.word	0x40014000
 800e94c:	00010007 	.word	0x00010007

0800e950 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d109      	bne.n	800e978 <HAL_TIM_OC_Start_IT+0x28>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	bf14      	ite	ne
 800e970:	2301      	movne	r3, #1
 800e972:	2300      	moveq	r3, #0
 800e974:	b2db      	uxtb	r3, r3
 800e976:	e03c      	b.n	800e9f2 <HAL_TIM_OC_Start_IT+0xa2>
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2b04      	cmp	r3, #4
 800e97c:	d109      	bne.n	800e992 <HAL_TIM_OC_Start_IT+0x42>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e984:	b2db      	uxtb	r3, r3
 800e986:	2b01      	cmp	r3, #1
 800e988:	bf14      	ite	ne
 800e98a:	2301      	movne	r3, #1
 800e98c:	2300      	moveq	r3, #0
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	e02f      	b.n	800e9f2 <HAL_TIM_OC_Start_IT+0xa2>
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b08      	cmp	r3, #8
 800e996:	d109      	bne.n	800e9ac <HAL_TIM_OC_Start_IT+0x5c>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	bf14      	ite	ne
 800e9a4:	2301      	movne	r3, #1
 800e9a6:	2300      	moveq	r3, #0
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	e022      	b.n	800e9f2 <HAL_TIM_OC_Start_IT+0xa2>
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	2b0c      	cmp	r3, #12
 800e9b0:	d109      	bne.n	800e9c6 <HAL_TIM_OC_Start_IT+0x76>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	bf14      	ite	ne
 800e9be:	2301      	movne	r3, #1
 800e9c0:	2300      	moveq	r3, #0
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	e015      	b.n	800e9f2 <HAL_TIM_OC_Start_IT+0xa2>
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b10      	cmp	r3, #16
 800e9ca:	d109      	bne.n	800e9e0 <HAL_TIM_OC_Start_IT+0x90>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	bf14      	ite	ne
 800e9d8:	2301      	movne	r3, #1
 800e9da:	2300      	moveq	r3, #0
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	e008      	b.n	800e9f2 <HAL_TIM_OC_Start_IT+0xa2>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	bf14      	ite	ne
 800e9ec:	2301      	movne	r3, #1
 800e9ee:	2300      	moveq	r3, #0
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d001      	beq.n	800e9fa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e0ec      	b.n	800ebd4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d104      	bne.n	800ea0a <HAL_TIM_OC_Start_IT+0xba>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2202      	movs	r2, #2
 800ea04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea08:	e023      	b.n	800ea52 <HAL_TIM_OC_Start_IT+0x102>
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	2b04      	cmp	r3, #4
 800ea0e:	d104      	bne.n	800ea1a <HAL_TIM_OC_Start_IT+0xca>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2202      	movs	r2, #2
 800ea14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea18:	e01b      	b.n	800ea52 <HAL_TIM_OC_Start_IT+0x102>
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	2b08      	cmp	r3, #8
 800ea1e:	d104      	bne.n	800ea2a <HAL_TIM_OC_Start_IT+0xda>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2202      	movs	r2, #2
 800ea24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea28:	e013      	b.n	800ea52 <HAL_TIM_OC_Start_IT+0x102>
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	2b0c      	cmp	r3, #12
 800ea2e:	d104      	bne.n	800ea3a <HAL_TIM_OC_Start_IT+0xea>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2202      	movs	r2, #2
 800ea34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea38:	e00b      	b.n	800ea52 <HAL_TIM_OC_Start_IT+0x102>
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b10      	cmp	r3, #16
 800ea3e:	d104      	bne.n	800ea4a <HAL_TIM_OC_Start_IT+0xfa>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2202      	movs	r2, #2
 800ea44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea48:	e003      	b.n	800ea52 <HAL_TIM_OC_Start_IT+0x102>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	2b0c      	cmp	r3, #12
 800ea56:	d841      	bhi.n	800eadc <HAL_TIM_OC_Start_IT+0x18c>
 800ea58:	a201      	add	r2, pc, #4	; (adr r2, 800ea60 <HAL_TIM_OC_Start_IT+0x110>)
 800ea5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea5e:	bf00      	nop
 800ea60:	0800ea95 	.word	0x0800ea95
 800ea64:	0800eadd 	.word	0x0800eadd
 800ea68:	0800eadd 	.word	0x0800eadd
 800ea6c:	0800eadd 	.word	0x0800eadd
 800ea70:	0800eaa7 	.word	0x0800eaa7
 800ea74:	0800eadd 	.word	0x0800eadd
 800ea78:	0800eadd 	.word	0x0800eadd
 800ea7c:	0800eadd 	.word	0x0800eadd
 800ea80:	0800eab9 	.word	0x0800eab9
 800ea84:	0800eadd 	.word	0x0800eadd
 800ea88:	0800eadd 	.word	0x0800eadd
 800ea8c:	0800eadd 	.word	0x0800eadd
 800ea90:	0800eacb 	.word	0x0800eacb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	68da      	ldr	r2, [r3, #12]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f042 0202 	orr.w	r2, r2, #2
 800eaa2:	60da      	str	r2, [r3, #12]
      break;
 800eaa4:	e01d      	b.n	800eae2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68da      	ldr	r2, [r3, #12]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f042 0204 	orr.w	r2, r2, #4
 800eab4:	60da      	str	r2, [r3, #12]
      break;
 800eab6:	e014      	b.n	800eae2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68da      	ldr	r2, [r3, #12]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f042 0208 	orr.w	r2, r2, #8
 800eac6:	60da      	str	r2, [r3, #12]
      break;
 800eac8:	e00b      	b.n	800eae2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68da      	ldr	r2, [r3, #12]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f042 0210 	orr.w	r2, r2, #16
 800ead8:	60da      	str	r2, [r3, #12]
      break;
 800eada:	e002      	b.n	800eae2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	73fb      	strb	r3, [r7, #15]
      break;
 800eae0:	bf00      	nop
  }

  if (status == HAL_OK)
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d174      	bne.n	800ebd2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2201      	movs	r2, #1
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f001 f917 	bl	800fd24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a38      	ldr	r2, [pc, #224]	; (800ebdc <HAL_TIM_OC_Start_IT+0x28c>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d013      	beq.n	800eb28 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a36      	ldr	r2, [pc, #216]	; (800ebe0 <HAL_TIM_OC_Start_IT+0x290>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d00e      	beq.n	800eb28 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a35      	ldr	r2, [pc, #212]	; (800ebe4 <HAL_TIM_OC_Start_IT+0x294>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d009      	beq.n	800eb28 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a33      	ldr	r2, [pc, #204]	; (800ebe8 <HAL_TIM_OC_Start_IT+0x298>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d004      	beq.n	800eb28 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a32      	ldr	r2, [pc, #200]	; (800ebec <HAL_TIM_OC_Start_IT+0x29c>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d101      	bne.n	800eb2c <HAL_TIM_OC_Start_IT+0x1dc>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e000      	b.n	800eb2e <HAL_TIM_OC_Start_IT+0x1de>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d007      	beq.n	800eb42 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eb40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4a25      	ldr	r2, [pc, #148]	; (800ebdc <HAL_TIM_OC_Start_IT+0x28c>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d022      	beq.n	800eb92 <HAL_TIM_OC_Start_IT+0x242>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb54:	d01d      	beq.n	800eb92 <HAL_TIM_OC_Start_IT+0x242>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	4a25      	ldr	r2, [pc, #148]	; (800ebf0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d018      	beq.n	800eb92 <HAL_TIM_OC_Start_IT+0x242>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a23      	ldr	r2, [pc, #140]	; (800ebf4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d013      	beq.n	800eb92 <HAL_TIM_OC_Start_IT+0x242>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4a22      	ldr	r2, [pc, #136]	; (800ebf8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d00e      	beq.n	800eb92 <HAL_TIM_OC_Start_IT+0x242>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a19      	ldr	r2, [pc, #100]	; (800ebe0 <HAL_TIM_OC_Start_IT+0x290>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d009      	beq.n	800eb92 <HAL_TIM_OC_Start_IT+0x242>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a1e      	ldr	r2, [pc, #120]	; (800ebfc <HAL_TIM_OC_Start_IT+0x2ac>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d004      	beq.n	800eb92 <HAL_TIM_OC_Start_IT+0x242>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a15      	ldr	r2, [pc, #84]	; (800ebe4 <HAL_TIM_OC_Start_IT+0x294>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d115      	bne.n	800ebbe <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	689a      	ldr	r2, [r3, #8]
 800eb98:	4b19      	ldr	r3, [pc, #100]	; (800ec00 <HAL_TIM_OC_Start_IT+0x2b0>)
 800eb9a:	4013      	ands	r3, r2
 800eb9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	2b06      	cmp	r3, #6
 800eba2:	d015      	beq.n	800ebd0 <HAL_TIM_OC_Start_IT+0x280>
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebaa:	d011      	beq.n	800ebd0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f042 0201 	orr.w	r2, r2, #1
 800ebba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebbc:	e008      	b.n	800ebd0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f042 0201 	orr.w	r2, r2, #1
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	e000      	b.n	800ebd2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebd0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	40010000 	.word	0x40010000
 800ebe0:	40010400 	.word	0x40010400
 800ebe4:	40014000 	.word	0x40014000
 800ebe8:	40014400 	.word	0x40014400
 800ebec:	40014800 	.word	0x40014800
 800ebf0:	40000400 	.word	0x40000400
 800ebf4:	40000800 	.word	0x40000800
 800ebf8:	40000c00 	.word	0x40000c00
 800ebfc:	40001800 	.word	0x40001800
 800ec00:	00010007 	.word	0x00010007

0800ec04 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b0c      	cmp	r3, #12
 800ec16:	d841      	bhi.n	800ec9c <HAL_TIM_OC_Stop_IT+0x98>
 800ec18:	a201      	add	r2, pc, #4	; (adr r2, 800ec20 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ec1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec1e:	bf00      	nop
 800ec20:	0800ec55 	.word	0x0800ec55
 800ec24:	0800ec9d 	.word	0x0800ec9d
 800ec28:	0800ec9d 	.word	0x0800ec9d
 800ec2c:	0800ec9d 	.word	0x0800ec9d
 800ec30:	0800ec67 	.word	0x0800ec67
 800ec34:	0800ec9d 	.word	0x0800ec9d
 800ec38:	0800ec9d 	.word	0x0800ec9d
 800ec3c:	0800ec9d 	.word	0x0800ec9d
 800ec40:	0800ec79 	.word	0x0800ec79
 800ec44:	0800ec9d 	.word	0x0800ec9d
 800ec48:	0800ec9d 	.word	0x0800ec9d
 800ec4c:	0800ec9d 	.word	0x0800ec9d
 800ec50:	0800ec8b 	.word	0x0800ec8b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68da      	ldr	r2, [r3, #12]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f022 0202 	bic.w	r2, r2, #2
 800ec62:	60da      	str	r2, [r3, #12]
      break;
 800ec64:	e01d      	b.n	800eca2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68da      	ldr	r2, [r3, #12]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f022 0204 	bic.w	r2, r2, #4
 800ec74:	60da      	str	r2, [r3, #12]
      break;
 800ec76:	e014      	b.n	800eca2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	68da      	ldr	r2, [r3, #12]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f022 0208 	bic.w	r2, r2, #8
 800ec86:	60da      	str	r2, [r3, #12]
      break;
 800ec88:	e00b      	b.n	800eca2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68da      	ldr	r2, [r3, #12]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f022 0210 	bic.w	r2, r2, #16
 800ec98:	60da      	str	r2, [r3, #12]
      break;
 800ec9a:	e002      	b.n	800eca2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	73fb      	strb	r3, [r7, #15]
      break;
 800eca0:	bf00      	nop
  }

  if (status == HAL_OK)
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f040 8081 	bne.w	800edac <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	6839      	ldr	r1, [r7, #0]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f001 f836 	bl	800fd24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a3e      	ldr	r2, [pc, #248]	; (800edb8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d013      	beq.n	800ecea <HAL_TIM_OC_Stop_IT+0xe6>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a3d      	ldr	r2, [pc, #244]	; (800edbc <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d00e      	beq.n	800ecea <HAL_TIM_OC_Stop_IT+0xe6>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a3b      	ldr	r2, [pc, #236]	; (800edc0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d009      	beq.n	800ecea <HAL_TIM_OC_Stop_IT+0xe6>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a3a      	ldr	r2, [pc, #232]	; (800edc4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d004      	beq.n	800ecea <HAL_TIM_OC_Stop_IT+0xe6>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a38      	ldr	r2, [pc, #224]	; (800edc8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d101      	bne.n	800ecee <HAL_TIM_OC_Stop_IT+0xea>
 800ecea:	2301      	movs	r3, #1
 800ecec:	e000      	b.n	800ecf0 <HAL_TIM_OC_Stop_IT+0xec>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d017      	beq.n	800ed24 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	6a1a      	ldr	r2, [r3, #32]
 800ecfa:	f241 1311 	movw	r3, #4369	; 0x1111
 800ecfe:	4013      	ands	r3, r2
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10f      	bne.n	800ed24 <HAL_TIM_OC_Stop_IT+0x120>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	6a1a      	ldr	r2, [r3, #32]
 800ed0a:	f240 4344 	movw	r3, #1092	; 0x444
 800ed0e:	4013      	ands	r3, r2
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d107      	bne.n	800ed24 <HAL_TIM_OC_Stop_IT+0x120>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ed22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6a1a      	ldr	r2, [r3, #32]
 800ed2a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ed2e:	4013      	ands	r3, r2
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10f      	bne.n	800ed54 <HAL_TIM_OC_Stop_IT+0x150>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6a1a      	ldr	r2, [r3, #32]
 800ed3a:	f240 4344 	movw	r3, #1092	; 0x444
 800ed3e:	4013      	ands	r3, r2
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d107      	bne.n	800ed54 <HAL_TIM_OC_Stop_IT+0x150>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f022 0201 	bic.w	r2, r2, #1
 800ed52:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d104      	bne.n	800ed64 <HAL_TIM_OC_Stop_IT+0x160>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed62:	e023      	b.n	800edac <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2b04      	cmp	r3, #4
 800ed68:	d104      	bne.n	800ed74 <HAL_TIM_OC_Stop_IT+0x170>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed72:	e01b      	b.n	800edac <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2b08      	cmp	r3, #8
 800ed78:	d104      	bne.n	800ed84 <HAL_TIM_OC_Stop_IT+0x180>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed82:	e013      	b.n	800edac <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	2b0c      	cmp	r3, #12
 800ed88:	d104      	bne.n	800ed94 <HAL_TIM_OC_Stop_IT+0x190>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed92:	e00b      	b.n	800edac <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	2b10      	cmp	r3, #16
 800ed98:	d104      	bne.n	800eda4 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eda2:	e003      	b.n	800edac <HAL_TIM_OC_Stop_IT+0x1a8>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800edac:	7bfb      	ldrb	r3, [r7, #15]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	40010000 	.word	0x40010000
 800edbc:	40010400 	.word	0x40010400
 800edc0:	40014000 	.word	0x40014000
 800edc4:	40014400 	.word	0x40014400
 800edc8:	40014800 	.word	0x40014800

0800edcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d101      	bne.n	800edde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800edda:	2301      	movs	r3, #1
 800eddc:	e049      	b.n	800ee72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d106      	bne.n	800edf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 f841 	bl	800ee7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2202      	movs	r2, #2
 800edfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	3304      	adds	r3, #4
 800ee08:	4619      	mov	r1, r3
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	f000 fb70 	bl	800f4f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	b083      	sub	sp, #12
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ee82:	bf00      	nop
 800ee84:	370c      	adds	r7, #12
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr

0800ee8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b084      	sub	sp, #16
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	f003 0302 	and.w	r3, r3, #2
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d020      	beq.n	800eef2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f003 0302 	and.w	r3, r3, #2
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d01b      	beq.n	800eef2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f06f 0202 	mvn.w	r2, #2
 800eec2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2201      	movs	r2, #1
 800eec8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	f003 0303 	and.w	r3, r3, #3
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d003      	beq.n	800eee0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 faeb 	bl	800f4b4 <HAL_TIM_IC_CaptureCallback>
 800eede:	e005      	b.n	800eeec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f7f1 fb8d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 faee 	bl	800f4c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	f003 0304 	and.w	r3, r3, #4
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d020      	beq.n	800ef3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f003 0304 	and.w	r3, r3, #4
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d01b      	beq.n	800ef3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f06f 0204 	mvn.w	r2, #4
 800ef0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2202      	movs	r2, #2
 800ef14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	699b      	ldr	r3, [r3, #24]
 800ef1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d003      	beq.n	800ef2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 fac5 	bl	800f4b4 <HAL_TIM_IC_CaptureCallback>
 800ef2a:	e005      	b.n	800ef38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7f1 fb67 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 fac8 	bl	800f4c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f003 0308 	and.w	r3, r3, #8
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d020      	beq.n	800ef8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f003 0308 	and.w	r3, r3, #8
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d01b      	beq.n	800ef8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f06f 0208 	mvn.w	r2, #8
 800ef5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2204      	movs	r2, #4
 800ef60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	69db      	ldr	r3, [r3, #28]
 800ef68:	f003 0303 	and.w	r3, r3, #3
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d003      	beq.n	800ef78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 fa9f 	bl	800f4b4 <HAL_TIM_IC_CaptureCallback>
 800ef76:	e005      	b.n	800ef84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7f1 fb41 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 faa2 	bl	800f4c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	f003 0310 	and.w	r3, r3, #16
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d020      	beq.n	800efd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f003 0310 	and.w	r3, r3, #16
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d01b      	beq.n	800efd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f06f 0210 	mvn.w	r2, #16
 800efa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2208      	movs	r2, #8
 800efac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69db      	ldr	r3, [r3, #28]
 800efb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d003      	beq.n	800efc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fa79 	bl	800f4b4 <HAL_TIM_IC_CaptureCallback>
 800efc2:	e005      	b.n	800efd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7f1 fb1b 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 fa7c 	bl	800f4c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00c      	beq.n	800effa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f003 0301 	and.w	r3, r3, #1
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d007      	beq.n	800effa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f06f 0201 	mvn.w	r2, #1
 800eff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7f3 fff5 	bl	8002fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f000:	2b00      	cmp	r3, #0
 800f002:	d104      	bne.n	800f00e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00c      	beq.n	800f028 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f014:	2b00      	cmp	r3, #0
 800f016:	d007      	beq.n	800f028 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 ffba 	bl	800ff9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00c      	beq.n	800f04c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d007      	beq.n	800f04c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 ffb2 	bl	800ffb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00c      	beq.n	800f070 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d007      	beq.n	800f070 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 fa36 	bl	800f4dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f003 0320 	and.w	r3, r3, #32
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00c      	beq.n	800f094 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f003 0320 	and.w	r3, r3, #32
 800f080:	2b00      	cmp	r3, #0
 800f082:	d007      	beq.n	800f094 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f06f 0220 	mvn.w	r2, #32
 800f08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 ff7a 	bl	800ff88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f094:	bf00      	nop
 800f096:	3710      	adds	r7, #16
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d101      	bne.n	800f0ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f0b6:	2302      	movs	r3, #2
 800f0b8:	e0ff      	b.n	800f2ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b14      	cmp	r3, #20
 800f0c6:	f200 80f0 	bhi.w	800f2aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f0ca:	a201      	add	r2, pc, #4	; (adr r2, 800f0d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d0:	0800f125 	.word	0x0800f125
 800f0d4:	0800f2ab 	.word	0x0800f2ab
 800f0d8:	0800f2ab 	.word	0x0800f2ab
 800f0dc:	0800f2ab 	.word	0x0800f2ab
 800f0e0:	0800f165 	.word	0x0800f165
 800f0e4:	0800f2ab 	.word	0x0800f2ab
 800f0e8:	0800f2ab 	.word	0x0800f2ab
 800f0ec:	0800f2ab 	.word	0x0800f2ab
 800f0f0:	0800f1a7 	.word	0x0800f1a7
 800f0f4:	0800f2ab 	.word	0x0800f2ab
 800f0f8:	0800f2ab 	.word	0x0800f2ab
 800f0fc:	0800f2ab 	.word	0x0800f2ab
 800f100:	0800f1e7 	.word	0x0800f1e7
 800f104:	0800f2ab 	.word	0x0800f2ab
 800f108:	0800f2ab 	.word	0x0800f2ab
 800f10c:	0800f2ab 	.word	0x0800f2ab
 800f110:	0800f229 	.word	0x0800f229
 800f114:	0800f2ab 	.word	0x0800f2ab
 800f118:	0800f2ab 	.word	0x0800f2ab
 800f11c:	0800f2ab 	.word	0x0800f2ab
 800f120:	0800f269 	.word	0x0800f269
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68b9      	ldr	r1, [r7, #8]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 fa86 	bl	800f63c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	699a      	ldr	r2, [r3, #24]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f042 0208 	orr.w	r2, r2, #8
 800f13e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	699a      	ldr	r2, [r3, #24]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f022 0204 	bic.w	r2, r2, #4
 800f14e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6999      	ldr	r1, [r3, #24]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	691a      	ldr	r2, [r3, #16]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	430a      	orrs	r2, r1
 800f160:	619a      	str	r2, [r3, #24]
      break;
 800f162:	e0a5      	b.n	800f2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68b9      	ldr	r1, [r7, #8]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f000 faf6 	bl	800f75c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	699a      	ldr	r2, [r3, #24]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f17e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	699a      	ldr	r2, [r3, #24]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f18e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6999      	ldr	r1, [r3, #24]
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	691b      	ldr	r3, [r3, #16]
 800f19a:	021a      	lsls	r2, r3, #8
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	430a      	orrs	r2, r1
 800f1a2:	619a      	str	r2, [r3, #24]
      break;
 800f1a4:	e084      	b.n	800f2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	68b9      	ldr	r1, [r7, #8]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f000 fb5f 	bl	800f870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	69da      	ldr	r2, [r3, #28]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f042 0208 	orr.w	r2, r2, #8
 800f1c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	69da      	ldr	r2, [r3, #28]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f022 0204 	bic.w	r2, r2, #4
 800f1d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	69d9      	ldr	r1, [r3, #28]
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	691a      	ldr	r2, [r3, #16]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	430a      	orrs	r2, r1
 800f1e2:	61da      	str	r2, [r3, #28]
      break;
 800f1e4:	e064      	b.n	800f2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	68b9      	ldr	r1, [r7, #8]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f000 fbc7 	bl	800f980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	69da      	ldr	r2, [r3, #28]
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	69da      	ldr	r2, [r3, #28]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	69d9      	ldr	r1, [r3, #28]
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	021a      	lsls	r2, r3, #8
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	430a      	orrs	r2, r1
 800f224:	61da      	str	r2, [r3, #28]
      break;
 800f226:	e043      	b.n	800f2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	68b9      	ldr	r1, [r7, #8]
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 fc10 	bl	800fa54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f042 0208 	orr.w	r2, r2, #8
 800f242:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f022 0204 	bic.w	r2, r2, #4
 800f252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	691a      	ldr	r2, [r3, #16]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	430a      	orrs	r2, r1
 800f264:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f266:	e023      	b.n	800f2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	68b9      	ldr	r1, [r7, #8]
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 fc54 	bl	800fb1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f282:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f292:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	691b      	ldr	r3, [r3, #16]
 800f29e:	021a      	lsls	r2, r3, #8
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	430a      	orrs	r2, r1
 800f2a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f2a8:	e002      	b.n	800f2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800f2ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f2b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3718      	adds	r7, #24
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop

0800f2c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d101      	bne.n	800f2e0 <HAL_TIM_ConfigClockSource+0x1c>
 800f2dc:	2302      	movs	r3, #2
 800f2de:	e0dc      	b.n	800f49a <HAL_TIM_ConfigClockSource+0x1d6>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	4b6a      	ldr	r3, [pc, #424]	; (800f4a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a64      	ldr	r2, [pc, #400]	; (800f4a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f316:	4293      	cmp	r3, r2
 800f318:	f000 80a9 	beq.w	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f31c:	4a62      	ldr	r2, [pc, #392]	; (800f4a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	f200 80ae 	bhi.w	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f324:	4a61      	ldr	r2, [pc, #388]	; (800f4ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800f326:	4293      	cmp	r3, r2
 800f328:	f000 80a1 	beq.w	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f32c:	4a5f      	ldr	r2, [pc, #380]	; (800f4ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	f200 80a6 	bhi.w	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f334:	4a5e      	ldr	r2, [pc, #376]	; (800f4b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f336:	4293      	cmp	r3, r2
 800f338:	f000 8099 	beq.w	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f33c:	4a5c      	ldr	r2, [pc, #368]	; (800f4b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	f200 809e 	bhi.w	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f344:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f348:	f000 8091 	beq.w	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f34c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f350:	f200 8096 	bhi.w	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f358:	f000 8089 	beq.w	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f35c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f360:	f200 808e 	bhi.w	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f368:	d03e      	beq.n	800f3e8 <HAL_TIM_ConfigClockSource+0x124>
 800f36a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f36e:	f200 8087 	bhi.w	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f376:	f000 8086 	beq.w	800f486 <HAL_TIM_ConfigClockSource+0x1c2>
 800f37a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f37e:	d87f      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f380:	2b70      	cmp	r3, #112	; 0x70
 800f382:	d01a      	beq.n	800f3ba <HAL_TIM_ConfigClockSource+0xf6>
 800f384:	2b70      	cmp	r3, #112	; 0x70
 800f386:	d87b      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f388:	2b60      	cmp	r3, #96	; 0x60
 800f38a:	d050      	beq.n	800f42e <HAL_TIM_ConfigClockSource+0x16a>
 800f38c:	2b60      	cmp	r3, #96	; 0x60
 800f38e:	d877      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f390:	2b50      	cmp	r3, #80	; 0x50
 800f392:	d03c      	beq.n	800f40e <HAL_TIM_ConfigClockSource+0x14a>
 800f394:	2b50      	cmp	r3, #80	; 0x50
 800f396:	d873      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f398:	2b40      	cmp	r3, #64	; 0x40
 800f39a:	d058      	beq.n	800f44e <HAL_TIM_ConfigClockSource+0x18a>
 800f39c:	2b40      	cmp	r3, #64	; 0x40
 800f39e:	d86f      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3a0:	2b30      	cmp	r3, #48	; 0x30
 800f3a2:	d064      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f3a4:	2b30      	cmp	r3, #48	; 0x30
 800f3a6:	d86b      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3a8:	2b20      	cmp	r3, #32
 800f3aa:	d060      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f3ac:	2b20      	cmp	r3, #32
 800f3ae:	d867      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d05c      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f3b4:	2b10      	cmp	r3, #16
 800f3b6:	d05a      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x1aa>
 800f3b8:	e062      	b.n	800f480 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	6899      	ldr	r1, [r3, #8]
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	685a      	ldr	r2, [r3, #4]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	f000 fc8b 	bl	800fce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f3dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	609a      	str	r2, [r3, #8]
      break;
 800f3e6:	e04f      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6818      	ldr	r0, [r3, #0]
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	6899      	ldr	r1, [r3, #8]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	685a      	ldr	r2, [r3, #4]
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	f000 fc74 	bl	800fce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	689a      	ldr	r2, [r3, #8]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f40a:	609a      	str	r2, [r3, #8]
      break;
 800f40c:	e03c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6818      	ldr	r0, [r3, #0]
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	6859      	ldr	r1, [r3, #4]
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	461a      	mov	r2, r3
 800f41c:	f000 fbe4 	bl	800fbe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2150      	movs	r1, #80	; 0x50
 800f426:	4618      	mov	r0, r3
 800f428:	f000 fc3e 	bl	800fca8 <TIM_ITRx_SetConfig>
      break;
 800f42c:	e02c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6818      	ldr	r0, [r3, #0]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	6859      	ldr	r1, [r3, #4]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	461a      	mov	r2, r3
 800f43c:	f000 fc03 	bl	800fc46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2160      	movs	r1, #96	; 0x60
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fc2e 	bl	800fca8 <TIM_ITRx_SetConfig>
      break;
 800f44c:	e01c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6818      	ldr	r0, [r3, #0]
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	6859      	ldr	r1, [r3, #4]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	461a      	mov	r2, r3
 800f45c:	f000 fbc4 	bl	800fbe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2140      	movs	r1, #64	; 0x40
 800f466:	4618      	mov	r0, r3
 800f468:	f000 fc1e 	bl	800fca8 <TIM_ITRx_SetConfig>
      break;
 800f46c:	e00c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4619      	mov	r1, r3
 800f478:	4610      	mov	r0, r2
 800f47a:	f000 fc15 	bl	800fca8 <TIM_ITRx_SetConfig>
      break;
 800f47e:	e003      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f480:	2301      	movs	r3, #1
 800f482:	73fb      	strb	r3, [r7, #15]
      break;
 800f484:	e000      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f498:	7bfb      	ldrb	r3, [r7, #15]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	ffceff88 	.word	0xffceff88
 800f4a8:	00100040 	.word	0x00100040
 800f4ac:	00100030 	.word	0x00100030
 800f4b0:	00100020 	.word	0x00100020

0800f4b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4d0:	bf00      	nop
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4e4:	bf00      	nop
 800f4e6:	370c      	adds	r7, #12
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a46      	ldr	r2, [pc, #280]	; (800f61c <TIM_Base_SetConfig+0x12c>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d013      	beq.n	800f530 <TIM_Base_SetConfig+0x40>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f50e:	d00f      	beq.n	800f530 <TIM_Base_SetConfig+0x40>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a43      	ldr	r2, [pc, #268]	; (800f620 <TIM_Base_SetConfig+0x130>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d00b      	beq.n	800f530 <TIM_Base_SetConfig+0x40>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a42      	ldr	r2, [pc, #264]	; (800f624 <TIM_Base_SetConfig+0x134>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d007      	beq.n	800f530 <TIM_Base_SetConfig+0x40>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a41      	ldr	r2, [pc, #260]	; (800f628 <TIM_Base_SetConfig+0x138>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d003      	beq.n	800f530 <TIM_Base_SetConfig+0x40>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a40      	ldr	r2, [pc, #256]	; (800f62c <TIM_Base_SetConfig+0x13c>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d108      	bne.n	800f542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	4313      	orrs	r3, r2
 800f540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a35      	ldr	r2, [pc, #212]	; (800f61c <TIM_Base_SetConfig+0x12c>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d01f      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f550:	d01b      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4a32      	ldr	r2, [pc, #200]	; (800f620 <TIM_Base_SetConfig+0x130>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d017      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4a31      	ldr	r2, [pc, #196]	; (800f624 <TIM_Base_SetConfig+0x134>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d013      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4a30      	ldr	r2, [pc, #192]	; (800f628 <TIM_Base_SetConfig+0x138>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d00f      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4a2f      	ldr	r2, [pc, #188]	; (800f62c <TIM_Base_SetConfig+0x13c>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d00b      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	4a2e      	ldr	r2, [pc, #184]	; (800f630 <TIM_Base_SetConfig+0x140>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d007      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4a2d      	ldr	r2, [pc, #180]	; (800f634 <TIM_Base_SetConfig+0x144>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d003      	beq.n	800f58a <TIM_Base_SetConfig+0x9a>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	4a2c      	ldr	r2, [pc, #176]	; (800f638 <TIM_Base_SetConfig+0x148>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d108      	bne.n	800f59c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	4313      	orrs	r3, r2
 800f59a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	689a      	ldr	r2, [r3, #8]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a16      	ldr	r2, [pc, #88]	; (800f61c <TIM_Base_SetConfig+0x12c>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d00f      	beq.n	800f5e8 <TIM_Base_SetConfig+0xf8>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a18      	ldr	r2, [pc, #96]	; (800f62c <TIM_Base_SetConfig+0x13c>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d00b      	beq.n	800f5e8 <TIM_Base_SetConfig+0xf8>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a17      	ldr	r2, [pc, #92]	; (800f630 <TIM_Base_SetConfig+0x140>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d007      	beq.n	800f5e8 <TIM_Base_SetConfig+0xf8>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a16      	ldr	r2, [pc, #88]	; (800f634 <TIM_Base_SetConfig+0x144>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d003      	beq.n	800f5e8 <TIM_Base_SetConfig+0xf8>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a15      	ldr	r2, [pc, #84]	; (800f638 <TIM_Base_SetConfig+0x148>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d103      	bne.n	800f5f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	691a      	ldr	r2, [r3, #16]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	f003 0301 	and.w	r3, r3, #1
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d105      	bne.n	800f60e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	691b      	ldr	r3, [r3, #16]
 800f606:	f023 0201 	bic.w	r2, r3, #1
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	611a      	str	r2, [r3, #16]
  }
}
 800f60e:	bf00      	nop
 800f610:	3714      	adds	r7, #20
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	40010000 	.word	0x40010000
 800f620:	40000400 	.word	0x40000400
 800f624:	40000800 	.word	0x40000800
 800f628:	40000c00 	.word	0x40000c00
 800f62c:	40010400 	.word	0x40010400
 800f630:	40014000 	.word	0x40014000
 800f634:	40014400 	.word	0x40014400
 800f638:	40014800 	.word	0x40014800

0800f63c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b087      	sub	sp, #28
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a1b      	ldr	r3, [r3, #32]
 800f650:	f023 0201 	bic.w	r2, r3, #1
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	699b      	ldr	r3, [r3, #24]
 800f662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	4b37      	ldr	r3, [pc, #220]	; (800f744 <TIM_OC1_SetConfig+0x108>)
 800f668:	4013      	ands	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f023 0303 	bic.w	r3, r3, #3
 800f672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	f023 0302 	bic.w	r3, r3, #2
 800f684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	689b      	ldr	r3, [r3, #8]
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a2d      	ldr	r2, [pc, #180]	; (800f748 <TIM_OC1_SetConfig+0x10c>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d00f      	beq.n	800f6b8 <TIM_OC1_SetConfig+0x7c>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a2c      	ldr	r2, [pc, #176]	; (800f74c <TIM_OC1_SetConfig+0x110>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d00b      	beq.n	800f6b8 <TIM_OC1_SetConfig+0x7c>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a2b      	ldr	r2, [pc, #172]	; (800f750 <TIM_OC1_SetConfig+0x114>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d007      	beq.n	800f6b8 <TIM_OC1_SetConfig+0x7c>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a2a      	ldr	r2, [pc, #168]	; (800f754 <TIM_OC1_SetConfig+0x118>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d003      	beq.n	800f6b8 <TIM_OC1_SetConfig+0x7c>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a29      	ldr	r2, [pc, #164]	; (800f758 <TIM_OC1_SetConfig+0x11c>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d10c      	bne.n	800f6d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	f023 0308 	bic.w	r3, r3, #8
 800f6be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	697a      	ldr	r2, [r7, #20]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f023 0304 	bic.w	r3, r3, #4
 800f6d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4a1c      	ldr	r2, [pc, #112]	; (800f748 <TIM_OC1_SetConfig+0x10c>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d00f      	beq.n	800f6fa <TIM_OC1_SetConfig+0xbe>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4a1b      	ldr	r2, [pc, #108]	; (800f74c <TIM_OC1_SetConfig+0x110>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d00b      	beq.n	800f6fa <TIM_OC1_SetConfig+0xbe>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4a1a      	ldr	r2, [pc, #104]	; (800f750 <TIM_OC1_SetConfig+0x114>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d007      	beq.n	800f6fa <TIM_OC1_SetConfig+0xbe>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4a19      	ldr	r2, [pc, #100]	; (800f754 <TIM_OC1_SetConfig+0x118>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d003      	beq.n	800f6fa <TIM_OC1_SetConfig+0xbe>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4a18      	ldr	r2, [pc, #96]	; (800f758 <TIM_OC1_SetConfig+0x11c>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d111      	bne.n	800f71e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	695b      	ldr	r3, [r3, #20]
 800f70e:	693a      	ldr	r2, [r7, #16]
 800f710:	4313      	orrs	r3, r2
 800f712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	699b      	ldr	r3, [r3, #24]
 800f718:	693a      	ldr	r2, [r7, #16]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	693a      	ldr	r2, [r7, #16]
 800f722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	68fa      	ldr	r2, [r7, #12]
 800f728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	685a      	ldr	r2, [r3, #4]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	621a      	str	r2, [r3, #32]
}
 800f738:	bf00      	nop
 800f73a:	371c      	adds	r7, #28
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr
 800f744:	fffeff8f 	.word	0xfffeff8f
 800f748:	40010000 	.word	0x40010000
 800f74c:	40010400 	.word	0x40010400
 800f750:	40014000 	.word	0x40014000
 800f754:	40014400 	.word	0x40014400
 800f758:	40014800 	.word	0x40014800

0800f75c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b087      	sub	sp, #28
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6a1b      	ldr	r3, [r3, #32]
 800f770:	f023 0210 	bic.w	r2, r3, #16
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	699b      	ldr	r3, [r3, #24]
 800f782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	4b34      	ldr	r3, [pc, #208]	; (800f858 <TIM_OC2_SetConfig+0xfc>)
 800f788:	4013      	ands	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	021b      	lsls	r3, r3, #8
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	4313      	orrs	r3, r2
 800f79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	f023 0320 	bic.w	r3, r3, #32
 800f7a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	011b      	lsls	r3, r3, #4
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a29      	ldr	r2, [pc, #164]	; (800f85c <TIM_OC2_SetConfig+0x100>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d003      	beq.n	800f7c4 <TIM_OC2_SetConfig+0x68>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a28      	ldr	r2, [pc, #160]	; (800f860 <TIM_OC2_SetConfig+0x104>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d10d      	bne.n	800f7e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a1e      	ldr	r2, [pc, #120]	; (800f85c <TIM_OC2_SetConfig+0x100>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d00f      	beq.n	800f808 <TIM_OC2_SetConfig+0xac>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a1d      	ldr	r2, [pc, #116]	; (800f860 <TIM_OC2_SetConfig+0x104>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d00b      	beq.n	800f808 <TIM_OC2_SetConfig+0xac>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a1c      	ldr	r2, [pc, #112]	; (800f864 <TIM_OC2_SetConfig+0x108>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d007      	beq.n	800f808 <TIM_OC2_SetConfig+0xac>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4a1b      	ldr	r2, [pc, #108]	; (800f868 <TIM_OC2_SetConfig+0x10c>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d003      	beq.n	800f808 <TIM_OC2_SetConfig+0xac>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a1a      	ldr	r2, [pc, #104]	; (800f86c <TIM_OC2_SetConfig+0x110>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d113      	bne.n	800f830 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f80e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	695b      	ldr	r3, [r3, #20]
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	4313      	orrs	r3, r2
 800f822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	699b      	ldr	r3, [r3, #24]
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	693a      	ldr	r2, [r7, #16]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	685a      	ldr	r2, [r3, #4]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	697a      	ldr	r2, [r7, #20]
 800f848:	621a      	str	r2, [r3, #32]
}
 800f84a:	bf00      	nop
 800f84c:	371c      	adds	r7, #28
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	feff8fff 	.word	0xfeff8fff
 800f85c:	40010000 	.word	0x40010000
 800f860:	40010400 	.word	0x40010400
 800f864:	40014000 	.word	0x40014000
 800f868:	40014400 	.word	0x40014400
 800f86c:	40014800 	.word	0x40014800

0800f870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f870:	b480      	push	{r7}
 800f872:	b087      	sub	sp, #28
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	69db      	ldr	r3, [r3, #28]
 800f896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	4b33      	ldr	r3, [pc, #204]	; (800f968 <TIM_OC3_SetConfig+0xf8>)
 800f89c:	4013      	ands	r3, r2
 800f89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f023 0303 	bic.w	r3, r3, #3
 800f8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	021b      	lsls	r3, r3, #8
 800f8c0:	697a      	ldr	r2, [r7, #20]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a28      	ldr	r2, [pc, #160]	; (800f96c <TIM_OC3_SetConfig+0xfc>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d003      	beq.n	800f8d6 <TIM_OC3_SetConfig+0x66>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a27      	ldr	r2, [pc, #156]	; (800f970 <TIM_OC3_SetConfig+0x100>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d10d      	bne.n	800f8f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	021b      	lsls	r3, r3, #8
 800f8e4:	697a      	ldr	r2, [r7, #20]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4a1d      	ldr	r2, [pc, #116]	; (800f96c <TIM_OC3_SetConfig+0xfc>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d00f      	beq.n	800f91a <TIM_OC3_SetConfig+0xaa>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4a1c      	ldr	r2, [pc, #112]	; (800f970 <TIM_OC3_SetConfig+0x100>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d00b      	beq.n	800f91a <TIM_OC3_SetConfig+0xaa>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a1b      	ldr	r2, [pc, #108]	; (800f974 <TIM_OC3_SetConfig+0x104>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d007      	beq.n	800f91a <TIM_OC3_SetConfig+0xaa>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4a1a      	ldr	r2, [pc, #104]	; (800f978 <TIM_OC3_SetConfig+0x108>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d003      	beq.n	800f91a <TIM_OC3_SetConfig+0xaa>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4a19      	ldr	r2, [pc, #100]	; (800f97c <TIM_OC3_SetConfig+0x10c>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d113      	bne.n	800f942 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	695b      	ldr	r3, [r3, #20]
 800f92e:	011b      	lsls	r3, r3, #4
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	4313      	orrs	r3, r2
 800f934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	699b      	ldr	r3, [r3, #24]
 800f93a:	011b      	lsls	r3, r3, #4
 800f93c:	693a      	ldr	r2, [r7, #16]
 800f93e:	4313      	orrs	r3, r2
 800f940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	693a      	ldr	r2, [r7, #16]
 800f946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	685a      	ldr	r2, [r3, #4]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	621a      	str	r2, [r3, #32]
}
 800f95c:	bf00      	nop
 800f95e:	371c      	adds	r7, #28
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr
 800f968:	fffeff8f 	.word	0xfffeff8f
 800f96c:	40010000 	.word	0x40010000
 800f970:	40010400 	.word	0x40010400
 800f974:	40014000 	.word	0x40014000
 800f978:	40014400 	.word	0x40014400
 800f97c:	40014800 	.word	0x40014800

0800f980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f980:	b480      	push	{r7}
 800f982:	b087      	sub	sp, #28
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a1b      	ldr	r3, [r3, #32]
 800f994:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	69db      	ldr	r3, [r3, #28]
 800f9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	4b24      	ldr	r3, [pc, #144]	; (800fa3c <TIM_OC4_SetConfig+0xbc>)
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	021b      	lsls	r3, r3, #8
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	031b      	lsls	r3, r3, #12
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a19      	ldr	r2, [pc, #100]	; (800fa40 <TIM_OC4_SetConfig+0xc0>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d00f      	beq.n	800fa00 <TIM_OC4_SetConfig+0x80>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a18      	ldr	r2, [pc, #96]	; (800fa44 <TIM_OC4_SetConfig+0xc4>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d00b      	beq.n	800fa00 <TIM_OC4_SetConfig+0x80>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a17      	ldr	r2, [pc, #92]	; (800fa48 <TIM_OC4_SetConfig+0xc8>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d007      	beq.n	800fa00 <TIM_OC4_SetConfig+0x80>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a16      	ldr	r2, [pc, #88]	; (800fa4c <TIM_OC4_SetConfig+0xcc>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d003      	beq.n	800fa00 <TIM_OC4_SetConfig+0x80>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a15      	ldr	r2, [pc, #84]	; (800fa50 <TIM_OC4_SetConfig+0xd0>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d109      	bne.n	800fa14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	695b      	ldr	r3, [r3, #20]
 800fa0c:	019b      	lsls	r3, r3, #6
 800fa0e:	697a      	ldr	r2, [r7, #20]
 800fa10:	4313      	orrs	r3, r2
 800fa12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	697a      	ldr	r2, [r7, #20]
 800fa18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	685a      	ldr	r2, [r3, #4]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	693a      	ldr	r2, [r7, #16]
 800fa2c:	621a      	str	r2, [r3, #32]
}
 800fa2e:	bf00      	nop
 800fa30:	371c      	adds	r7, #28
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	feff8fff 	.word	0xfeff8fff
 800fa40:	40010000 	.word	0x40010000
 800fa44:	40010400 	.word	0x40010400
 800fa48:	40014000 	.word	0x40014000
 800fa4c:	40014400 	.word	0x40014400
 800fa50:	40014800 	.word	0x40014800

0800fa54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b087      	sub	sp, #28
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6a1b      	ldr	r3, [r3, #32]
 800fa62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6a1b      	ldr	r3, [r3, #32]
 800fa68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	4b21      	ldr	r3, [pc, #132]	; (800fb04 <TIM_OC5_SetConfig+0xb0>)
 800fa80:	4013      	ands	r3, r2
 800fa82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	041b      	lsls	r3, r3, #16
 800fa9c:	693a      	ldr	r2, [r7, #16]
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a18      	ldr	r2, [pc, #96]	; (800fb08 <TIM_OC5_SetConfig+0xb4>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d00f      	beq.n	800faca <TIM_OC5_SetConfig+0x76>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a17      	ldr	r2, [pc, #92]	; (800fb0c <TIM_OC5_SetConfig+0xb8>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d00b      	beq.n	800faca <TIM_OC5_SetConfig+0x76>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a16      	ldr	r2, [pc, #88]	; (800fb10 <TIM_OC5_SetConfig+0xbc>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d007      	beq.n	800faca <TIM_OC5_SetConfig+0x76>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a15      	ldr	r2, [pc, #84]	; (800fb14 <TIM_OC5_SetConfig+0xc0>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d003      	beq.n	800faca <TIM_OC5_SetConfig+0x76>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a14      	ldr	r2, [pc, #80]	; (800fb18 <TIM_OC5_SetConfig+0xc4>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d109      	bne.n	800fade <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fad0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	695b      	ldr	r3, [r3, #20]
 800fad6:	021b      	lsls	r3, r3, #8
 800fad8:	697a      	ldr	r2, [r7, #20]
 800fada:	4313      	orrs	r3, r2
 800fadc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	697a      	ldr	r2, [r7, #20]
 800fae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	685a      	ldr	r2, [r3, #4]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	693a      	ldr	r2, [r7, #16]
 800faf6:	621a      	str	r2, [r3, #32]
}
 800faf8:	bf00      	nop
 800fafa:	371c      	adds	r7, #28
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr
 800fb04:	fffeff8f 	.word	0xfffeff8f
 800fb08:	40010000 	.word	0x40010000
 800fb0c:	40010400 	.word	0x40010400
 800fb10:	40014000 	.word	0x40014000
 800fb14:	40014400 	.word	0x40014400
 800fb18:	40014800 	.word	0x40014800

0800fb1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b087      	sub	sp, #28
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a1b      	ldr	r3, [r3, #32]
 800fb2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a1b      	ldr	r3, [r3, #32]
 800fb30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb44:	68fa      	ldr	r2, [r7, #12]
 800fb46:	4b22      	ldr	r3, [pc, #136]	; (800fbd0 <TIM_OC6_SetConfig+0xb4>)
 800fb48:	4013      	ands	r3, r2
 800fb4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	021b      	lsls	r3, r3, #8
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	051b      	lsls	r3, r3, #20
 800fb66:	693a      	ldr	r2, [r7, #16]
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4a19      	ldr	r2, [pc, #100]	; (800fbd4 <TIM_OC6_SetConfig+0xb8>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d00f      	beq.n	800fb94 <TIM_OC6_SetConfig+0x78>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	4a18      	ldr	r2, [pc, #96]	; (800fbd8 <TIM_OC6_SetConfig+0xbc>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d00b      	beq.n	800fb94 <TIM_OC6_SetConfig+0x78>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	4a17      	ldr	r2, [pc, #92]	; (800fbdc <TIM_OC6_SetConfig+0xc0>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d007      	beq.n	800fb94 <TIM_OC6_SetConfig+0x78>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4a16      	ldr	r2, [pc, #88]	; (800fbe0 <TIM_OC6_SetConfig+0xc4>)
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d003      	beq.n	800fb94 <TIM_OC6_SetConfig+0x78>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4a15      	ldr	r2, [pc, #84]	; (800fbe4 <TIM_OC6_SetConfig+0xc8>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d109      	bne.n	800fba8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	695b      	ldr	r3, [r3, #20]
 800fba0:	029b      	lsls	r3, r3, #10
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	697a      	ldr	r2, [r7, #20]
 800fbac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	621a      	str	r2, [r3, #32]
}
 800fbc2:	bf00      	nop
 800fbc4:	371c      	adds	r7, #28
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	feff8fff 	.word	0xfeff8fff
 800fbd4:	40010000 	.word	0x40010000
 800fbd8:	40010400 	.word	0x40010400
 800fbdc:	40014000 	.word	0x40014000
 800fbe0:	40014400 	.word	0x40014400
 800fbe4:	40014800 	.word	0x40014800

0800fbe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6a1b      	ldr	r3, [r3, #32]
 800fbfe:	f023 0201 	bic.w	r2, r3, #1
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	699b      	ldr	r3, [r3, #24]
 800fc0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f023 030a 	bic.w	r3, r3, #10
 800fc24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	621a      	str	r2, [r3, #32]
}
 800fc3a:	bf00      	nop
 800fc3c:	371c      	adds	r7, #28
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr

0800fc46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc46:	b480      	push	{r7}
 800fc48:	b087      	sub	sp, #28
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	60f8      	str	r0, [r7, #12]
 800fc4e:	60b9      	str	r1, [r7, #8]
 800fc50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	f023 0210 	bic.w	r2, r3, #16
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	699b      	ldr	r3, [r3, #24]
 800fc68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	031b      	lsls	r3, r3, #12
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	4313      	orrs	r3, r2
 800fc7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	011b      	lsls	r3, r3, #4
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	693a      	ldr	r2, [r7, #16]
 800fc92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	621a      	str	r2, [r3, #32]
}
 800fc9a:	bf00      	nop
 800fc9c:	371c      	adds	r7, #28
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr
	...

0800fca8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b085      	sub	sp, #20
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	4b09      	ldr	r3, [pc, #36]	; (800fce0 <TIM_ITRx_SetConfig+0x38>)
 800fcbc:	4013      	ands	r3, r2
 800fcbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fcc0:	683a      	ldr	r2, [r7, #0]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	f043 0307 	orr.w	r3, r3, #7
 800fcca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	609a      	str	r2, [r3, #8]
}
 800fcd2:	bf00      	nop
 800fcd4:	3714      	adds	r7, #20
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	ffcfff8f 	.word	0xffcfff8f

0800fce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b087      	sub	sp, #28
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
 800fcf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	689b      	ldr	r3, [r3, #8]
 800fcf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fcfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	021a      	lsls	r2, r3, #8
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	431a      	orrs	r2, r3
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	697a      	ldr	r2, [r7, #20]
 800fd16:	609a      	str	r2, [r3, #8]
}
 800fd18:	bf00      	nop
 800fd1a:	371c      	adds	r7, #28
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	f003 031f 	and.w	r3, r3, #31
 800fd36:	2201      	movs	r2, #1
 800fd38:	fa02 f303 	lsl.w	r3, r2, r3
 800fd3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	6a1a      	ldr	r2, [r3, #32]
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	43db      	mvns	r3, r3
 800fd46:	401a      	ands	r2, r3
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6a1a      	ldr	r2, [r3, #32]
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f003 031f 	and.w	r3, r3, #31
 800fd56:	6879      	ldr	r1, [r7, #4]
 800fd58:	fa01 f303 	lsl.w	r3, r1, r3
 800fd5c:	431a      	orrs	r2, r3
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	621a      	str	r2, [r3, #32]
}
 800fd62:	bf00      	nop
 800fd64:	371c      	adds	r7, #28
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
	...

0800fd70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d101      	bne.n	800fd88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd84:	2302      	movs	r3, #2
 800fd86:	e06d      	b.n	800fe64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2202      	movs	r2, #2
 800fd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a30      	ldr	r2, [pc, #192]	; (800fe70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d004      	beq.n	800fdbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a2f      	ldr	r2, [pc, #188]	; (800fe74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d108      	bne.n	800fdce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fdc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	4313      	orrs	r3, r2
 800fdde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a20      	ldr	r2, [pc, #128]	; (800fe70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d022      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdfa:	d01d      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a1d      	ldr	r2, [pc, #116]	; (800fe78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d018      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a1c      	ldr	r2, [pc, #112]	; (800fe7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d013      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a1a      	ldr	r2, [pc, #104]	; (800fe80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d00e      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	4a15      	ldr	r2, [pc, #84]	; (800fe74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d009      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a16      	ldr	r2, [pc, #88]	; (800fe84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d004      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a15      	ldr	r2, [pc, #84]	; (800fe88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d10c      	bne.n	800fe52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	68ba      	ldr	r2, [r7, #8]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2201      	movs	r2, #1
 800fe56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3714      	adds	r7, #20
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr
 800fe70:	40010000 	.word	0x40010000
 800fe74:	40010400 	.word	0x40010400
 800fe78:	40000400 	.word	0x40000400
 800fe7c:	40000800 	.word	0x40000800
 800fe80:	40000c00 	.word	0x40000c00
 800fe84:	40001800 	.word	0x40001800
 800fe88:	40014000 	.word	0x40014000

0800fe8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe96:	2300      	movs	r3, #0
 800fe98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d101      	bne.n	800fea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fea4:	2302      	movs	r3, #2
 800fea6:	e065      	b.n	800ff74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2201      	movs	r2, #1
 800feac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	4313      	orrs	r3, r2
 800febc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	4313      	orrs	r3, r2
 800feca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	4313      	orrs	r3, r2
 800fed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	4313      	orrs	r3, r2
 800fef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	695b      	ldr	r3, [r3, #20]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	699b      	ldr	r3, [r3, #24]
 800ff1c:	041b      	lsls	r3, r3, #16
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4a16      	ldr	r2, [pc, #88]	; (800ff80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d004      	beq.n	800ff36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a14      	ldr	r2, [pc, #80]	; (800ff84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d115      	bne.n	800ff62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	051b      	lsls	r3, r3, #20
 800ff42:	4313      	orrs	r3, r2
 800ff44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	69db      	ldr	r3, [r3, #28]
 800ff50:	4313      	orrs	r3, r2
 800ff52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	6a1b      	ldr	r3, [r3, #32]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	40010000 	.word	0x40010000
 800ff84:	40010400 	.word	0x40010400

0800ff88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff90:	bf00      	nop
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ffa4:	bf00      	nop
 800ffa6:	370c      	adds	r7, #12
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d101      	bne.n	800ffd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e042      	b.n	801005c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7f3 fc01 	bl	80037f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2224      	movs	r2, #36	; 0x24
 800fff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f022 0201 	bic.w	r2, r2, #1
 8010004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801000a:	2b00      	cmp	r3, #0
 801000c:	d002      	beq.n	8010014 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f001 fc42 	bl	8011898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 fed7 	bl	8010dc8 <UART_SetConfig>
 801001a:	4603      	mov	r3, r0
 801001c:	2b01      	cmp	r3, #1
 801001e:	d101      	bne.n	8010024 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010020:	2301      	movs	r3, #1
 8010022:	e01b      	b.n	801005c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	685a      	ldr	r2, [r3, #4]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	689a      	ldr	r2, [r3, #8]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f042 0201 	orr.w	r2, r2, #1
 8010052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f001 fcc1 	bl	80119dc <UART_CheckIdleState>
 801005a:	4603      	mov	r3, r0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08a      	sub	sp, #40	; 0x28
 8010068:	af02      	add	r7, sp, #8
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	603b      	str	r3, [r7, #0]
 8010070:	4613      	mov	r3, r2
 8010072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801007a:	2b20      	cmp	r3, #32
 801007c:	d17b      	bne.n	8010176 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d002      	beq.n	801008a <HAL_UART_Transmit+0x26>
 8010084:	88fb      	ldrh	r3, [r7, #6]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d101      	bne.n	801008e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801008a:	2301      	movs	r3, #1
 801008c:	e074      	b.n	8010178 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2200      	movs	r2, #0
 8010092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2221      	movs	r2, #33	; 0x21
 801009a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801009e:	f7f3 ff1b 	bl	8003ed8 <HAL_GetTick>
 80100a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	88fa      	ldrh	r2, [r7, #6]
 80100a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	88fa      	ldrh	r2, [r7, #6]
 80100b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100bc:	d108      	bne.n	80100d0 <HAL_UART_Transmit+0x6c>
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d104      	bne.n	80100d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80100c6:	2300      	movs	r3, #0
 80100c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	61bb      	str	r3, [r7, #24]
 80100ce:	e003      	b.n	80100d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80100d4:	2300      	movs	r3, #0
 80100d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80100d8:	e030      	b.n	801013c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2200      	movs	r2, #0
 80100e2:	2180      	movs	r1, #128	; 0x80
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f001 fd23 	bl	8011b30 <UART_WaitOnFlagUntilTimeout>
 80100ea:	4603      	mov	r3, r0
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d005      	beq.n	80100fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2220      	movs	r2, #32
 80100f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80100f8:	2303      	movs	r3, #3
 80100fa:	e03d      	b.n	8010178 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d10b      	bne.n	801011a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	881b      	ldrh	r3, [r3, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	3302      	adds	r3, #2
 8010116:	61bb      	str	r3, [r7, #24]
 8010118:	e007      	b.n	801012a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	781a      	ldrb	r2, [r3, #0]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	3301      	adds	r3, #1
 8010128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010130:	b29b      	uxth	r3, r3
 8010132:	3b01      	subs	r3, #1
 8010134:	b29a      	uxth	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010142:	b29b      	uxth	r3, r3
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1c8      	bne.n	80100da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	2200      	movs	r2, #0
 8010150:	2140      	movs	r1, #64	; 0x40
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f001 fcec 	bl	8011b30 <UART_WaitOnFlagUntilTimeout>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d005      	beq.n	801016a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2220      	movs	r2, #32
 8010162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010166:	2303      	movs	r3, #3
 8010168:	e006      	b.n	8010178 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2220      	movs	r2, #32
 801016e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010172:	2300      	movs	r3, #0
 8010174:	e000      	b.n	8010178 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010176:	2302      	movs	r3, #2
  }
}
 8010178:	4618      	mov	r0, r3
 801017a:	3720      	adds	r7, #32
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b08a      	sub	sp, #40	; 0x28
 8010184:	af02      	add	r7, sp, #8
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	4613      	mov	r3, r2
 801018e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010196:	2b20      	cmp	r3, #32
 8010198:	f040 80b5 	bne.w	8010306 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d002      	beq.n	80101a8 <HAL_UART_Receive+0x28>
 80101a2:	88fb      	ldrh	r3, [r7, #6]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	e0ad      	b.n	8010308 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2222      	movs	r2, #34	; 0x22
 80101b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2200      	movs	r2, #0
 80101c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101c2:	f7f3 fe89 	bl	8003ed8 <HAL_GetTick>
 80101c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	88fa      	ldrh	r2, [r7, #6]
 80101cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	88fa      	ldrh	r2, [r7, #6]
 80101d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101e0:	d10e      	bne.n	8010200 <HAL_UART_Receive+0x80>
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	691b      	ldr	r3, [r3, #16]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d105      	bne.n	80101f6 <HAL_UART_Receive+0x76>
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f240 12ff 	movw	r2, #511	; 0x1ff
 80101f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101f4:	e02d      	b.n	8010252 <HAL_UART_Receive+0xd2>
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	22ff      	movs	r2, #255	; 0xff
 80101fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101fe:	e028      	b.n	8010252 <HAL_UART_Receive+0xd2>
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10d      	bne.n	8010224 <HAL_UART_Receive+0xa4>
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d104      	bne.n	801021a <HAL_UART_Receive+0x9a>
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	22ff      	movs	r2, #255	; 0xff
 8010214:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010218:	e01b      	b.n	8010252 <HAL_UART_Receive+0xd2>
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	227f      	movs	r2, #127	; 0x7f
 801021e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010222:	e016      	b.n	8010252 <HAL_UART_Receive+0xd2>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801022c:	d10d      	bne.n	801024a <HAL_UART_Receive+0xca>
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	691b      	ldr	r3, [r3, #16]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d104      	bne.n	8010240 <HAL_UART_Receive+0xc0>
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	227f      	movs	r2, #127	; 0x7f
 801023a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801023e:	e008      	b.n	8010252 <HAL_UART_Receive+0xd2>
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	223f      	movs	r2, #63	; 0x3f
 8010244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010248:	e003      	b.n	8010252 <HAL_UART_Receive+0xd2>
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2200      	movs	r2, #0
 801024e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010258:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010262:	d108      	bne.n	8010276 <HAL_UART_Receive+0xf6>
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d104      	bne.n	8010276 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801026c:	2300      	movs	r3, #0
 801026e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	61bb      	str	r3, [r7, #24]
 8010274:	e003      	b.n	801027e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801027a:	2300      	movs	r3, #0
 801027c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801027e:	e036      	b.n	80102ee <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	2200      	movs	r2, #0
 8010288:	2120      	movs	r1, #32
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f001 fc50 	bl	8011b30 <UART_WaitOnFlagUntilTimeout>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2220      	movs	r2, #32
 801029a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801029e:	2303      	movs	r3, #3
 80102a0:	e032      	b.n	8010308 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d10c      	bne.n	80102c2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	8a7b      	ldrh	r3, [r7, #18]
 80102b2:	4013      	ands	r3, r2
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	3302      	adds	r3, #2
 80102be:	61bb      	str	r3, [r7, #24]
 80102c0:	e00c      	b.n	80102dc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	8a7b      	ldrh	r3, [r7, #18]
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	4013      	ands	r3, r2
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	3301      	adds	r3, #1
 80102da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	3b01      	subs	r3, #1
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1c2      	bne.n	8010280 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2220      	movs	r2, #32
 80102fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010302:	2300      	movs	r3, #0
 8010304:	e000      	b.n	8010308 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010306:	2302      	movs	r3, #2
  }
}
 8010308:	4618      	mov	r0, r3
 801030a:	3720      	adds	r7, #32
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b08a      	sub	sp, #40	; 0x28
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	4613      	mov	r3, r2
 801031c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010324:	2b20      	cmp	r3, #32
 8010326:	d137      	bne.n	8010398 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <HAL_UART_Receive_IT+0x24>
 801032e:	88fb      	ldrh	r3, [r7, #6]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010334:	2301      	movs	r3, #1
 8010336:	e030      	b.n	801039a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a18      	ldr	r2, [pc, #96]	; (80103a4 <HAL_UART_Receive_IT+0x94>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d01f      	beq.n	8010388 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010352:	2b00      	cmp	r3, #0
 8010354:	d018      	beq.n	8010388 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	e853 3f00 	ldrex	r3, [r3]
 8010362:	613b      	str	r3, [r7, #16]
   return(result);
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801036a:	627b      	str	r3, [r7, #36]	; 0x24
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	461a      	mov	r2, r3
 8010372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010374:	623b      	str	r3, [r7, #32]
 8010376:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010378:	69f9      	ldr	r1, [r7, #28]
 801037a:	6a3a      	ldr	r2, [r7, #32]
 801037c:	e841 2300 	strex	r3, r2, [r1]
 8010380:	61bb      	str	r3, [r7, #24]
   return(result);
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1e6      	bne.n	8010356 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010388:	88fb      	ldrh	r3, [r7, #6]
 801038a:	461a      	mov	r2, r3
 801038c:	68b9      	ldr	r1, [r7, #8]
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	f001 fc3c 	bl	8011c0c <UART_Start_Receive_IT>
 8010394:	4603      	mov	r3, r0
 8010396:	e000      	b.n	801039a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010398:	2302      	movs	r3, #2
  }
}
 801039a:	4618      	mov	r0, r3
 801039c:	3728      	adds	r7, #40	; 0x28
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	58000c00 	.word	0x58000c00

080103a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b08a      	sub	sp, #40	; 0x28
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	4613      	mov	r3, r2
 80103b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103bc:	2b20      	cmp	r3, #32
 80103be:	d167      	bne.n	8010490 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d002      	beq.n	80103cc <HAL_UART_Transmit_DMA+0x24>
 80103c6:	88fb      	ldrh	r3, [r7, #6]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d101      	bne.n	80103d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80103cc:	2301      	movs	r3, #1
 80103ce:	e060      	b.n	8010492 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	68ba      	ldr	r2, [r7, #8]
 80103d4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	88fa      	ldrh	r2, [r7, #6]
 80103da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	88fa      	ldrh	r2, [r7, #6]
 80103e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2200      	movs	r2, #0
 80103ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2221      	movs	r2, #33	; 0x21
 80103f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d028      	beq.n	8010450 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010402:	4a26      	ldr	r2, [pc, #152]	; (801049c <HAL_UART_Transmit_DMA+0xf4>)
 8010404:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801040a:	4a25      	ldr	r2, [pc, #148]	; (80104a0 <HAL_UART_Transmit_DMA+0xf8>)
 801040c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010412:	4a24      	ldr	r2, [pc, #144]	; (80104a4 <HAL_UART_Transmit_DMA+0xfc>)
 8010414:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801041a:	2200      	movs	r2, #0
 801041c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010426:	4619      	mov	r1, r3
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	3328      	adds	r3, #40	; 0x28
 801042e:	461a      	mov	r2, r3
 8010430:	88fb      	ldrh	r3, [r7, #6]
 8010432:	f7f6 f9d5 	bl	80067e0 <HAL_DMA_Start_IT>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d009      	beq.n	8010450 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2210      	movs	r2, #16
 8010440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2220      	movs	r2, #32
 8010448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 801044c:	2301      	movs	r3, #1
 801044e:	e020      	b.n	8010492 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2240      	movs	r2, #64	; 0x40
 8010456:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	3308      	adds	r3, #8
 801045e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	e853 3f00 	ldrex	r3, [r3]
 8010466:	613b      	str	r3, [r7, #16]
   return(result);
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801046e:	627b      	str	r3, [r7, #36]	; 0x24
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	3308      	adds	r3, #8
 8010476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010478:	623a      	str	r2, [r7, #32]
 801047a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047c:	69f9      	ldr	r1, [r7, #28]
 801047e:	6a3a      	ldr	r2, [r7, #32]
 8010480:	e841 2300 	strex	r3, r2, [r1]
 8010484:	61bb      	str	r3, [r7, #24]
   return(result);
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d1e5      	bne.n	8010458 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801048c:	2300      	movs	r3, #0
 801048e:	e000      	b.n	8010492 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010490:	2302      	movs	r3, #2
  }
}
 8010492:	4618      	mov	r0, r3
 8010494:	3728      	adds	r7, #40	; 0x28
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	08011fa1 	.word	0x08011fa1
 80104a0:	08012037 	.word	0x08012037
 80104a4:	08012053 	.word	0x08012053

080104a8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b09a      	sub	sp, #104	; 0x68
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80104be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80104c4:	667b      	str	r3, [r7, #100]	; 0x64
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	461a      	mov	r2, r3
 80104cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104ce:	657b      	str	r3, [r7, #84]	; 0x54
 80104d0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104d6:	e841 2300 	strex	r3, r2, [r1]
 80104da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80104dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1e6      	bne.n	80104b0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	3308      	adds	r3, #8
 80104e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ec:	e853 3f00 	ldrex	r3, [r3]
 80104f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104f4:	4b46      	ldr	r3, [pc, #280]	; (8010610 <HAL_UART_AbortReceive+0x168>)
 80104f6:	4013      	ands	r3, r2
 80104f8:	663b      	str	r3, [r7, #96]	; 0x60
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	3308      	adds	r3, #8
 8010500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010502:	643a      	str	r2, [r7, #64]	; 0x40
 8010504:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010506:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801050a:	e841 2300 	strex	r3, r2, [r1]
 801050e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010512:	2b00      	cmp	r3, #0
 8010514:	d1e5      	bne.n	80104e2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801051a:	2b01      	cmp	r3, #1
 801051c:	d118      	bne.n	8010550 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010524:	6a3b      	ldr	r3, [r7, #32]
 8010526:	e853 3f00 	ldrex	r3, [r3]
 801052a:	61fb      	str	r3, [r7, #28]
   return(result);
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	f023 0310 	bic.w	r3, r3, #16
 8010532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	461a      	mov	r2, r3
 801053a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801053c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801053e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010544:	e841 2300 	strex	r3, r2, [r1]
 8010548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1e6      	bne.n	801051e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801055a:	2b40      	cmp	r3, #64	; 0x40
 801055c:	d13b      	bne.n	80105d6 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3308      	adds	r3, #8
 8010564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	e853 3f00 	ldrex	r3, [r3]
 801056c:	60bb      	str	r3, [r7, #8]
   return(result);
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010574:	65bb      	str	r3, [r7, #88]	; 0x58
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	3308      	adds	r3, #8
 801057c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801057e:	61ba      	str	r2, [r7, #24]
 8010580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010582:	6979      	ldr	r1, [r7, #20]
 8010584:	69ba      	ldr	r2, [r7, #24]
 8010586:	e841 2300 	strex	r3, r2, [r1]
 801058a:	613b      	str	r3, [r7, #16]
   return(result);
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1e5      	bne.n	801055e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010598:	2b00      	cmp	r3, #0
 801059a:	d01c      	beq.n	80105d6 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105a2:	2200      	movs	r2, #0
 80105a4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7f6 fb81 	bl	8006cb4 <HAL_DMA_Abort>
 80105b2:	4603      	mov	r3, r0
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00e      	beq.n	80105d6 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105be:	4618      	mov	r0, r3
 80105c0:	f7f8 f806 	bl	80085d0 <HAL_DMA_GetError>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b20      	cmp	r3, #32
 80105c8:	d105      	bne.n	80105d6 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2210      	movs	r2, #16
 80105ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80105d2:	2303      	movs	r3, #3
 80105d4:	e017      	b.n	8010606 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	220f      	movs	r2, #15
 80105e4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	699a      	ldr	r2, [r3, #24]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f042 0208 	orr.w	r2, r2, #8
 80105f4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2220      	movs	r2, #32
 80105fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2200      	movs	r2, #0
 8010602:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3768      	adds	r7, #104	; 0x68
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	effffffe 	.word	0xeffffffe

08010614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b0ba      	sub	sp, #232	; 0xe8
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	689b      	ldr	r3, [r3, #8]
 8010636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801063a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801063e:	f640 030f 	movw	r3, #2063	; 0x80f
 8010642:	4013      	ands	r3, r2
 8010644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801064c:	2b00      	cmp	r3, #0
 801064e:	d11b      	bne.n	8010688 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010654:	f003 0320 	and.w	r3, r3, #32
 8010658:	2b00      	cmp	r3, #0
 801065a:	d015      	beq.n	8010688 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801065c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010660:	f003 0320 	and.w	r3, r3, #32
 8010664:	2b00      	cmp	r3, #0
 8010666:	d105      	bne.n	8010674 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010670:	2b00      	cmp	r3, #0
 8010672:	d009      	beq.n	8010688 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 8377 	beq.w	8010d6c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	4798      	blx	r3
      }
      return;
 8010686:	e371      	b.n	8010d6c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801068c:	2b00      	cmp	r3, #0
 801068e:	f000 8123 	beq.w	80108d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010692:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010696:	4b8d      	ldr	r3, [pc, #564]	; (80108cc <HAL_UART_IRQHandler+0x2b8>)
 8010698:	4013      	ands	r3, r2
 801069a:	2b00      	cmp	r3, #0
 801069c:	d106      	bne.n	80106ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801069e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80106a2:	4b8b      	ldr	r3, [pc, #556]	; (80108d0 <HAL_UART_IRQHandler+0x2bc>)
 80106a4:	4013      	ands	r3, r2
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f000 8116 	beq.w	80108d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80106ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106b0:	f003 0301 	and.w	r3, r3, #1
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d011      	beq.n	80106dc <HAL_UART_IRQHandler+0xc8>
 80106b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d00b      	beq.n	80106dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2201      	movs	r2, #1
 80106ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106d2:	f043 0201 	orr.w	r2, r3, #1
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80106dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106e0:	f003 0302 	and.w	r3, r3, #2
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d011      	beq.n	801070c <HAL_UART_IRQHandler+0xf8>
 80106e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106ec:	f003 0301 	and.w	r3, r3, #1
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d00b      	beq.n	801070c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2202      	movs	r2, #2
 80106fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010702:	f043 0204 	orr.w	r2, r3, #4
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801070c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010710:	f003 0304 	and.w	r3, r3, #4
 8010714:	2b00      	cmp	r3, #0
 8010716:	d011      	beq.n	801073c <HAL_UART_IRQHandler+0x128>
 8010718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801071c:	f003 0301 	and.w	r3, r3, #1
 8010720:	2b00      	cmp	r3, #0
 8010722:	d00b      	beq.n	801073c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2204      	movs	r2, #4
 801072a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010732:	f043 0202 	orr.w	r2, r3, #2
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801073c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010740:	f003 0308 	and.w	r3, r3, #8
 8010744:	2b00      	cmp	r3, #0
 8010746:	d017      	beq.n	8010778 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801074c:	f003 0320 	and.w	r3, r3, #32
 8010750:	2b00      	cmp	r3, #0
 8010752:	d105      	bne.n	8010760 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010754:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010758:	4b5c      	ldr	r3, [pc, #368]	; (80108cc <HAL_UART_IRQHandler+0x2b8>)
 801075a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00b      	beq.n	8010778 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	2208      	movs	r2, #8
 8010766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801076e:	f043 0208 	orr.w	r2, r3, #8
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801077c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010780:	2b00      	cmp	r3, #0
 8010782:	d012      	beq.n	80107aa <HAL_UART_IRQHandler+0x196>
 8010784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00c      	beq.n	80107aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107a0:	f043 0220 	orr.w	r2, r3, #32
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 82dd 	beq.w	8010d70 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80107b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107ba:	f003 0320 	and.w	r3, r3, #32
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d013      	beq.n	80107ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80107c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107c6:	f003 0320 	and.w	r3, r3, #32
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d105      	bne.n	80107da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80107ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d007      	beq.n	80107ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d003      	beq.n	80107ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107fe:	2b40      	cmp	r3, #64	; 0x40
 8010800:	d005      	beq.n	801080e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010806:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801080a:	2b00      	cmp	r3, #0
 801080c:	d054      	beq.n	80108b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f001 fb60 	bl	8011ed4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801081e:	2b40      	cmp	r3, #64	; 0x40
 8010820:	d146      	bne.n	80108b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3308      	adds	r3, #8
 8010828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010830:	e853 3f00 	ldrex	r3, [r3]
 8010834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801083c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	3308      	adds	r3, #8
 801084a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801084e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801085a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801085e:	e841 2300 	strex	r3, r2, [r1]
 8010862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d1d9      	bne.n	8010822 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010874:	2b00      	cmp	r3, #0
 8010876:	d017      	beq.n	80108a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801087e:	4a15      	ldr	r2, [pc, #84]	; (80108d4 <HAL_UART_IRQHandler+0x2c0>)
 8010880:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010888:	4618      	mov	r0, r3
 801088a:	f7f6 fd31 	bl	80072f0 <HAL_DMA_Abort_IT>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d019      	beq.n	80108c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801089a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80108a2:	4610      	mov	r0, r2
 80108a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108a6:	e00f      	b.n	80108c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 fa77 	bl	8010d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108ae:	e00b      	b.n	80108c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 fa73 	bl	8010d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108b6:	e007      	b.n	80108c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 fa6f 	bl	8010d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80108c6:	e253      	b.n	8010d70 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108c8:	bf00      	nop
    return;
 80108ca:	e251      	b.n	8010d70 <HAL_UART_IRQHandler+0x75c>
 80108cc:	10000001 	.word	0x10000001
 80108d0:	04000120 	.word	0x04000120
 80108d4:	080120d3 	.word	0x080120d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108dc:	2b01      	cmp	r3, #1
 80108de:	f040 81e7 	bne.w	8010cb0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80108e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108e6:	f003 0310 	and.w	r3, r3, #16
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 81e0 	beq.w	8010cb0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80108f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108f4:	f003 0310 	and.w	r3, r3, #16
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	f000 81d9 	beq.w	8010cb0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2210      	movs	r2, #16
 8010904:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010910:	2b40      	cmp	r3, #64	; 0x40
 8010912:	f040 8151 	bne.w	8010bb8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	4a96      	ldr	r2, [pc, #600]	; (8010b78 <HAL_UART_IRQHandler+0x564>)
 8010920:	4293      	cmp	r3, r2
 8010922:	d068      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a93      	ldr	r2, [pc, #588]	; (8010b7c <HAL_UART_IRQHandler+0x568>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d061      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a91      	ldr	r2, [pc, #580]	; (8010b80 <HAL_UART_IRQHandler+0x56c>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d05a      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a8e      	ldr	r2, [pc, #568]	; (8010b84 <HAL_UART_IRQHandler+0x570>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d053      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4a8c      	ldr	r2, [pc, #560]	; (8010b88 <HAL_UART_IRQHandler+0x574>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d04c      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4a89      	ldr	r2, [pc, #548]	; (8010b8c <HAL_UART_IRQHandler+0x578>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d045      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4a87      	ldr	r2, [pc, #540]	; (8010b90 <HAL_UART_IRQHandler+0x57c>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d03e      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	4a84      	ldr	r2, [pc, #528]	; (8010b94 <HAL_UART_IRQHandler+0x580>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d037      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a82      	ldr	r2, [pc, #520]	; (8010b98 <HAL_UART_IRQHandler+0x584>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d030      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a7f      	ldr	r2, [pc, #508]	; (8010b9c <HAL_UART_IRQHandler+0x588>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d029      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4a7d      	ldr	r2, [pc, #500]	; (8010ba0 <HAL_UART_IRQHandler+0x58c>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d022      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4a7a      	ldr	r2, [pc, #488]	; (8010ba4 <HAL_UART_IRQHandler+0x590>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d01b      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a78      	ldr	r2, [pc, #480]	; (8010ba8 <HAL_UART_IRQHandler+0x594>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d014      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a75      	ldr	r2, [pc, #468]	; (8010bac <HAL_UART_IRQHandler+0x598>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d00d      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4a73      	ldr	r2, [pc, #460]	; (8010bb0 <HAL_UART_IRQHandler+0x59c>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d006      	beq.n	80109f6 <HAL_UART_IRQHandler+0x3e2>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a70      	ldr	r2, [pc, #448]	; (8010bb4 <HAL_UART_IRQHandler+0x5a0>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d106      	bne.n	8010a04 <HAL_UART_IRQHandler+0x3f0>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	e005      	b.n	8010a10 <HAL_UART_IRQHandler+0x3fc>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f000 81ab 	beq.w	8010d74 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	f080 81a3 	bcs.w	8010d74 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010a34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a3e:	69db      	ldr	r3, [r3, #28]
 8010a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a44:	f000 8087 	beq.w	8010b56 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a54:	e853 3f00 	ldrex	r3, [r3]
 8010a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a82:	e841 2300 	strex	r3, r2, [r1]
 8010a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1da      	bne.n	8010a48 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	3308      	adds	r3, #8
 8010a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a9c:	e853 3f00 	ldrex	r3, [r3]
 8010aa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010aa4:	f023 0301 	bic.w	r3, r3, #1
 8010aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3308      	adds	r3, #8
 8010ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010ab6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010aba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010abc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010ac2:	e841 2300 	strex	r3, r2, [r1]
 8010ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1e1      	bne.n	8010a92 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	3308      	adds	r3, #8
 8010ad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ad8:	e853 3f00 	ldrex	r3, [r3]
 8010adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	3308      	adds	r3, #8
 8010aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010af4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010af8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010afa:	e841 2300 	strex	r3, r2, [r1]
 8010afe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d1e3      	bne.n	8010ace <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2220      	movs	r2, #32
 8010b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2200      	movs	r2, #0
 8010b12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b1c:	e853 3f00 	ldrex	r3, [r3]
 8010b20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b24:	f023 0310 	bic.w	r3, r3, #16
 8010b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	461a      	mov	r2, r3
 8010b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b36:	65bb      	str	r3, [r7, #88]	; 0x58
 8010b38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b3e:	e841 2300 	strex	r3, r2, [r1]
 8010b42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d1e4      	bne.n	8010b14 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f6 f8af 	bl	8006cb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2202      	movs	r2, #2
 8010b5a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	4619      	mov	r1, r3
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 f91d 	bl	8010db0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010b76:	e0fd      	b.n	8010d74 <HAL_UART_IRQHandler+0x760>
 8010b78:	40020010 	.word	0x40020010
 8010b7c:	40020028 	.word	0x40020028
 8010b80:	40020040 	.word	0x40020040
 8010b84:	40020058 	.word	0x40020058
 8010b88:	40020070 	.word	0x40020070
 8010b8c:	40020088 	.word	0x40020088
 8010b90:	400200a0 	.word	0x400200a0
 8010b94:	400200b8 	.word	0x400200b8
 8010b98:	40020410 	.word	0x40020410
 8010b9c:	40020428 	.word	0x40020428
 8010ba0:	40020440 	.word	0x40020440
 8010ba4:	40020458 	.word	0x40020458
 8010ba8:	40020470 	.word	0x40020470
 8010bac:	40020488 	.word	0x40020488
 8010bb0:	400204a0 	.word	0x400204a0
 8010bb4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	1ad3      	subs	r3, r2, r3
 8010bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f000 80cf 	beq.w	8010d78 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010bda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f000 80ca 	beq.w	8010d78 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bec:	e853 3f00 	ldrex	r3, [r3]
 8010bf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	461a      	mov	r2, r3
 8010c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010c06:	647b      	str	r3, [r7, #68]	; 0x44
 8010c08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c0e:	e841 2300 	strex	r3, r2, [r1]
 8010c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1e4      	bne.n	8010be4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	3308      	adds	r3, #8
 8010c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	e853 3f00 	ldrex	r3, [r3]
 8010c28:	623b      	str	r3, [r7, #32]
   return(result);
 8010c2a:	6a3a      	ldr	r2, [r7, #32]
 8010c2c:	4b55      	ldr	r3, [pc, #340]	; (8010d84 <HAL_UART_IRQHandler+0x770>)
 8010c2e:	4013      	ands	r3, r2
 8010c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	3308      	adds	r3, #8
 8010c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8010c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c46:	e841 2300 	strex	r3, r2, [r1]
 8010c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1e3      	bne.n	8010c1a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2220      	movs	r2, #32
 8010c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	e853 3f00 	ldrex	r3, [r3]
 8010c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f023 0310 	bic.w	r3, r3, #16
 8010c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	461a      	mov	r2, r3
 8010c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010c88:	61fb      	str	r3, [r7, #28]
 8010c8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c8c:	69b9      	ldr	r1, [r7, #24]
 8010c8e:	69fa      	ldr	r2, [r7, #28]
 8010c90:	e841 2300 	strex	r3, r2, [r1]
 8010c94:	617b      	str	r3, [r7, #20]
   return(result);
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d1e4      	bne.n	8010c66 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2202      	movs	r2, #2
 8010ca0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 f881 	bl	8010db0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010cae:	e063      	b.n	8010d78 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d00e      	beq.n	8010cda <HAL_UART_IRQHandler+0x6c6>
 8010cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d008      	beq.n	8010cda <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f001 ff5a 	bl	8012b8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010cd8:	e051      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d014      	beq.n	8010d10 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d105      	bne.n	8010cfe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d008      	beq.n	8010d10 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d03a      	beq.n	8010d7c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	4798      	blx	r3
    }
    return;
 8010d0e:	e035      	b.n	8010d7c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d009      	beq.n	8010d30 <HAL_UART_IRQHandler+0x71c>
 8010d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d003      	beq.n	8010d30 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f001 f9e8 	bl	80120fe <UART_EndTransmit_IT>
    return;
 8010d2e:	e026      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d009      	beq.n	8010d50 <HAL_UART_IRQHandler+0x73c>
 8010d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d003      	beq.n	8010d50 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f001 ff33 	bl	8012bb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010d4e:	e016      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d010      	beq.n	8010d7e <HAL_UART_IRQHandler+0x76a>
 8010d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	da0c      	bge.n	8010d7e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f001 ff1b 	bl	8012ba0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010d6a:	e008      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
      return;
 8010d6c:	bf00      	nop
 8010d6e:	e006      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
    return;
 8010d70:	bf00      	nop
 8010d72:	e004      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
      return;
 8010d74:	bf00      	nop
 8010d76:	e002      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
      return;
 8010d78:	bf00      	nop
 8010d7a:	e000      	b.n	8010d7e <HAL_UART_IRQHandler+0x76a>
    return;
 8010d7c:	bf00      	nop
  }
}
 8010d7e:	37e8      	adds	r7, #232	; 0xe8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	effffffe 	.word	0xeffffffe

08010d88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010d90:	bf00      	nop
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010da4:	bf00      	nop
 8010da6:	370c      	adds	r7, #12
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	460b      	mov	r3, r1
 8010dba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010dbc:	bf00      	nop
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010dcc:	b092      	sub	sp, #72	; 0x48
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	689a      	ldr	r2, [r3, #8]
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	431a      	orrs	r2, r3
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	695b      	ldr	r3, [r3, #20]
 8010de6:	431a      	orrs	r2, r3
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	69db      	ldr	r3, [r3, #28]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	4bbe      	ldr	r3, [pc, #760]	; (80110f0 <UART_SetConfig+0x328>)
 8010df8:	4013      	ands	r3, r2
 8010dfa:	697a      	ldr	r2, [r7, #20]
 8010dfc:	6812      	ldr	r2, [r2, #0]
 8010dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e00:	430b      	orrs	r3, r1
 8010e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	68da      	ldr	r2, [r3, #12]
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	430a      	orrs	r2, r1
 8010e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4ab3      	ldr	r2, [pc, #716]	; (80110f4 <UART_SetConfig+0x32c>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d004      	beq.n	8010e34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	6a1b      	ldr	r3, [r3, #32]
 8010e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e30:	4313      	orrs	r3, r2
 8010e32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	689a      	ldr	r2, [r3, #8]
 8010e3a:	4baf      	ldr	r3, [pc, #700]	; (80110f8 <UART_SetConfig+0x330>)
 8010e3c:	4013      	ands	r3, r2
 8010e3e:	697a      	ldr	r2, [r7, #20]
 8010e40:	6812      	ldr	r2, [r2, #0]
 8010e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e44:	430b      	orrs	r3, r1
 8010e46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e4e:	f023 010f 	bic.w	r1, r3, #15
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	430a      	orrs	r2, r1
 8010e5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4aa6      	ldr	r2, [pc, #664]	; (80110fc <UART_SetConfig+0x334>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d177      	bne.n	8010f58 <UART_SetConfig+0x190>
 8010e68:	4ba5      	ldr	r3, [pc, #660]	; (8011100 <UART_SetConfig+0x338>)
 8010e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010e70:	2b28      	cmp	r3, #40	; 0x28
 8010e72:	d86d      	bhi.n	8010f50 <UART_SetConfig+0x188>
 8010e74:	a201      	add	r2, pc, #4	; (adr r2, 8010e7c <UART_SetConfig+0xb4>)
 8010e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7a:	bf00      	nop
 8010e7c:	08010f21 	.word	0x08010f21
 8010e80:	08010f51 	.word	0x08010f51
 8010e84:	08010f51 	.word	0x08010f51
 8010e88:	08010f51 	.word	0x08010f51
 8010e8c:	08010f51 	.word	0x08010f51
 8010e90:	08010f51 	.word	0x08010f51
 8010e94:	08010f51 	.word	0x08010f51
 8010e98:	08010f51 	.word	0x08010f51
 8010e9c:	08010f29 	.word	0x08010f29
 8010ea0:	08010f51 	.word	0x08010f51
 8010ea4:	08010f51 	.word	0x08010f51
 8010ea8:	08010f51 	.word	0x08010f51
 8010eac:	08010f51 	.word	0x08010f51
 8010eb0:	08010f51 	.word	0x08010f51
 8010eb4:	08010f51 	.word	0x08010f51
 8010eb8:	08010f51 	.word	0x08010f51
 8010ebc:	08010f31 	.word	0x08010f31
 8010ec0:	08010f51 	.word	0x08010f51
 8010ec4:	08010f51 	.word	0x08010f51
 8010ec8:	08010f51 	.word	0x08010f51
 8010ecc:	08010f51 	.word	0x08010f51
 8010ed0:	08010f51 	.word	0x08010f51
 8010ed4:	08010f51 	.word	0x08010f51
 8010ed8:	08010f51 	.word	0x08010f51
 8010edc:	08010f39 	.word	0x08010f39
 8010ee0:	08010f51 	.word	0x08010f51
 8010ee4:	08010f51 	.word	0x08010f51
 8010ee8:	08010f51 	.word	0x08010f51
 8010eec:	08010f51 	.word	0x08010f51
 8010ef0:	08010f51 	.word	0x08010f51
 8010ef4:	08010f51 	.word	0x08010f51
 8010ef8:	08010f51 	.word	0x08010f51
 8010efc:	08010f41 	.word	0x08010f41
 8010f00:	08010f51 	.word	0x08010f51
 8010f04:	08010f51 	.word	0x08010f51
 8010f08:	08010f51 	.word	0x08010f51
 8010f0c:	08010f51 	.word	0x08010f51
 8010f10:	08010f51 	.word	0x08010f51
 8010f14:	08010f51 	.word	0x08010f51
 8010f18:	08010f51 	.word	0x08010f51
 8010f1c:	08010f49 	.word	0x08010f49
 8010f20:	2301      	movs	r3, #1
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e222      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f28:	2304      	movs	r3, #4
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e21e      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f30:	2308      	movs	r3, #8
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e21a      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f38:	2310      	movs	r3, #16
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e216      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f40:	2320      	movs	r3, #32
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e212      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f48:	2340      	movs	r3, #64	; 0x40
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e20e      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f50:	2380      	movs	r3, #128	; 0x80
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e20a      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4a69      	ldr	r2, [pc, #420]	; (8011104 <UART_SetConfig+0x33c>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d130      	bne.n	8010fc4 <UART_SetConfig+0x1fc>
 8010f62:	4b67      	ldr	r3, [pc, #412]	; (8011100 <UART_SetConfig+0x338>)
 8010f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f66:	f003 0307 	and.w	r3, r3, #7
 8010f6a:	2b05      	cmp	r3, #5
 8010f6c:	d826      	bhi.n	8010fbc <UART_SetConfig+0x1f4>
 8010f6e:	a201      	add	r2, pc, #4	; (adr r2, 8010f74 <UART_SetConfig+0x1ac>)
 8010f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f74:	08010f8d 	.word	0x08010f8d
 8010f78:	08010f95 	.word	0x08010f95
 8010f7c:	08010f9d 	.word	0x08010f9d
 8010f80:	08010fa5 	.word	0x08010fa5
 8010f84:	08010fad 	.word	0x08010fad
 8010f88:	08010fb5 	.word	0x08010fb5
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f92:	e1ec      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f94:	2304      	movs	r3, #4
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9a:	e1e8      	b.n	801136e <UART_SetConfig+0x5a6>
 8010f9c:	2308      	movs	r3, #8
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa2:	e1e4      	b.n	801136e <UART_SetConfig+0x5a6>
 8010fa4:	2310      	movs	r3, #16
 8010fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010faa:	e1e0      	b.n	801136e <UART_SetConfig+0x5a6>
 8010fac:	2320      	movs	r3, #32
 8010fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb2:	e1dc      	b.n	801136e <UART_SetConfig+0x5a6>
 8010fb4:	2340      	movs	r3, #64	; 0x40
 8010fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fba:	e1d8      	b.n	801136e <UART_SetConfig+0x5a6>
 8010fbc:	2380      	movs	r3, #128	; 0x80
 8010fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc2:	e1d4      	b.n	801136e <UART_SetConfig+0x5a6>
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4a4f      	ldr	r2, [pc, #316]	; (8011108 <UART_SetConfig+0x340>)
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d130      	bne.n	8011030 <UART_SetConfig+0x268>
 8010fce:	4b4c      	ldr	r3, [pc, #304]	; (8011100 <UART_SetConfig+0x338>)
 8010fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fd2:	f003 0307 	and.w	r3, r3, #7
 8010fd6:	2b05      	cmp	r3, #5
 8010fd8:	d826      	bhi.n	8011028 <UART_SetConfig+0x260>
 8010fda:	a201      	add	r2, pc, #4	; (adr r2, 8010fe0 <UART_SetConfig+0x218>)
 8010fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe0:	08010ff9 	.word	0x08010ff9
 8010fe4:	08011001 	.word	0x08011001
 8010fe8:	08011009 	.word	0x08011009
 8010fec:	08011011 	.word	0x08011011
 8010ff0:	08011019 	.word	0x08011019
 8010ff4:	08011021 	.word	0x08011021
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffe:	e1b6      	b.n	801136e <UART_SetConfig+0x5a6>
 8011000:	2304      	movs	r3, #4
 8011002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011006:	e1b2      	b.n	801136e <UART_SetConfig+0x5a6>
 8011008:	2308      	movs	r3, #8
 801100a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100e:	e1ae      	b.n	801136e <UART_SetConfig+0x5a6>
 8011010:	2310      	movs	r3, #16
 8011012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011016:	e1aa      	b.n	801136e <UART_SetConfig+0x5a6>
 8011018:	2320      	movs	r3, #32
 801101a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101e:	e1a6      	b.n	801136e <UART_SetConfig+0x5a6>
 8011020:	2340      	movs	r3, #64	; 0x40
 8011022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011026:	e1a2      	b.n	801136e <UART_SetConfig+0x5a6>
 8011028:	2380      	movs	r3, #128	; 0x80
 801102a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102e:	e19e      	b.n	801136e <UART_SetConfig+0x5a6>
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4a35      	ldr	r2, [pc, #212]	; (801110c <UART_SetConfig+0x344>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d130      	bne.n	801109c <UART_SetConfig+0x2d4>
 801103a:	4b31      	ldr	r3, [pc, #196]	; (8011100 <UART_SetConfig+0x338>)
 801103c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801103e:	f003 0307 	and.w	r3, r3, #7
 8011042:	2b05      	cmp	r3, #5
 8011044:	d826      	bhi.n	8011094 <UART_SetConfig+0x2cc>
 8011046:	a201      	add	r2, pc, #4	; (adr r2, 801104c <UART_SetConfig+0x284>)
 8011048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801104c:	08011065 	.word	0x08011065
 8011050:	0801106d 	.word	0x0801106d
 8011054:	08011075 	.word	0x08011075
 8011058:	0801107d 	.word	0x0801107d
 801105c:	08011085 	.word	0x08011085
 8011060:	0801108d 	.word	0x0801108d
 8011064:	2300      	movs	r3, #0
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e180      	b.n	801136e <UART_SetConfig+0x5a6>
 801106c:	2304      	movs	r3, #4
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e17c      	b.n	801136e <UART_SetConfig+0x5a6>
 8011074:	2308      	movs	r3, #8
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107a:	e178      	b.n	801136e <UART_SetConfig+0x5a6>
 801107c:	2310      	movs	r3, #16
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011082:	e174      	b.n	801136e <UART_SetConfig+0x5a6>
 8011084:	2320      	movs	r3, #32
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108a:	e170      	b.n	801136e <UART_SetConfig+0x5a6>
 801108c:	2340      	movs	r3, #64	; 0x40
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e16c      	b.n	801136e <UART_SetConfig+0x5a6>
 8011094:	2380      	movs	r3, #128	; 0x80
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109a:	e168      	b.n	801136e <UART_SetConfig+0x5a6>
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a1b      	ldr	r2, [pc, #108]	; (8011110 <UART_SetConfig+0x348>)
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d142      	bne.n	801112c <UART_SetConfig+0x364>
 80110a6:	4b16      	ldr	r3, [pc, #88]	; (8011100 <UART_SetConfig+0x338>)
 80110a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110aa:	f003 0307 	and.w	r3, r3, #7
 80110ae:	2b05      	cmp	r3, #5
 80110b0:	d838      	bhi.n	8011124 <UART_SetConfig+0x35c>
 80110b2:	a201      	add	r2, pc, #4	; (adr r2, 80110b8 <UART_SetConfig+0x2f0>)
 80110b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b8:	080110d1 	.word	0x080110d1
 80110bc:	080110d9 	.word	0x080110d9
 80110c0:	080110e1 	.word	0x080110e1
 80110c4:	080110e9 	.word	0x080110e9
 80110c8:	08011115 	.word	0x08011115
 80110cc:	0801111d 	.word	0x0801111d
 80110d0:	2300      	movs	r3, #0
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e14a      	b.n	801136e <UART_SetConfig+0x5a6>
 80110d8:	2304      	movs	r3, #4
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e146      	b.n	801136e <UART_SetConfig+0x5a6>
 80110e0:	2308      	movs	r3, #8
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e142      	b.n	801136e <UART_SetConfig+0x5a6>
 80110e8:	2310      	movs	r3, #16
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ee:	e13e      	b.n	801136e <UART_SetConfig+0x5a6>
 80110f0:	cfff69f3 	.word	0xcfff69f3
 80110f4:	58000c00 	.word	0x58000c00
 80110f8:	11fff4ff 	.word	0x11fff4ff
 80110fc:	40011000 	.word	0x40011000
 8011100:	58024400 	.word	0x58024400
 8011104:	40004400 	.word	0x40004400
 8011108:	40004800 	.word	0x40004800
 801110c:	40004c00 	.word	0x40004c00
 8011110:	40005000 	.word	0x40005000
 8011114:	2320      	movs	r3, #32
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e128      	b.n	801136e <UART_SetConfig+0x5a6>
 801111c:	2340      	movs	r3, #64	; 0x40
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e124      	b.n	801136e <UART_SetConfig+0x5a6>
 8011124:	2380      	movs	r3, #128	; 0x80
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e120      	b.n	801136e <UART_SetConfig+0x5a6>
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4acb      	ldr	r2, [pc, #812]	; (8011460 <UART_SetConfig+0x698>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d176      	bne.n	8011224 <UART_SetConfig+0x45c>
 8011136:	4bcb      	ldr	r3, [pc, #812]	; (8011464 <UART_SetConfig+0x69c>)
 8011138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801113a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801113e:	2b28      	cmp	r3, #40	; 0x28
 8011140:	d86c      	bhi.n	801121c <UART_SetConfig+0x454>
 8011142:	a201      	add	r2, pc, #4	; (adr r2, 8011148 <UART_SetConfig+0x380>)
 8011144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011148:	080111ed 	.word	0x080111ed
 801114c:	0801121d 	.word	0x0801121d
 8011150:	0801121d 	.word	0x0801121d
 8011154:	0801121d 	.word	0x0801121d
 8011158:	0801121d 	.word	0x0801121d
 801115c:	0801121d 	.word	0x0801121d
 8011160:	0801121d 	.word	0x0801121d
 8011164:	0801121d 	.word	0x0801121d
 8011168:	080111f5 	.word	0x080111f5
 801116c:	0801121d 	.word	0x0801121d
 8011170:	0801121d 	.word	0x0801121d
 8011174:	0801121d 	.word	0x0801121d
 8011178:	0801121d 	.word	0x0801121d
 801117c:	0801121d 	.word	0x0801121d
 8011180:	0801121d 	.word	0x0801121d
 8011184:	0801121d 	.word	0x0801121d
 8011188:	080111fd 	.word	0x080111fd
 801118c:	0801121d 	.word	0x0801121d
 8011190:	0801121d 	.word	0x0801121d
 8011194:	0801121d 	.word	0x0801121d
 8011198:	0801121d 	.word	0x0801121d
 801119c:	0801121d 	.word	0x0801121d
 80111a0:	0801121d 	.word	0x0801121d
 80111a4:	0801121d 	.word	0x0801121d
 80111a8:	08011205 	.word	0x08011205
 80111ac:	0801121d 	.word	0x0801121d
 80111b0:	0801121d 	.word	0x0801121d
 80111b4:	0801121d 	.word	0x0801121d
 80111b8:	0801121d 	.word	0x0801121d
 80111bc:	0801121d 	.word	0x0801121d
 80111c0:	0801121d 	.word	0x0801121d
 80111c4:	0801121d 	.word	0x0801121d
 80111c8:	0801120d 	.word	0x0801120d
 80111cc:	0801121d 	.word	0x0801121d
 80111d0:	0801121d 	.word	0x0801121d
 80111d4:	0801121d 	.word	0x0801121d
 80111d8:	0801121d 	.word	0x0801121d
 80111dc:	0801121d 	.word	0x0801121d
 80111e0:	0801121d 	.word	0x0801121d
 80111e4:	0801121d 	.word	0x0801121d
 80111e8:	08011215 	.word	0x08011215
 80111ec:	2301      	movs	r3, #1
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e0bc      	b.n	801136e <UART_SetConfig+0x5a6>
 80111f4:	2304      	movs	r3, #4
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e0b8      	b.n	801136e <UART_SetConfig+0x5a6>
 80111fc:	2308      	movs	r3, #8
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e0b4      	b.n	801136e <UART_SetConfig+0x5a6>
 8011204:	2310      	movs	r3, #16
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e0b0      	b.n	801136e <UART_SetConfig+0x5a6>
 801120c:	2320      	movs	r3, #32
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e0ac      	b.n	801136e <UART_SetConfig+0x5a6>
 8011214:	2340      	movs	r3, #64	; 0x40
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e0a8      	b.n	801136e <UART_SetConfig+0x5a6>
 801121c:	2380      	movs	r3, #128	; 0x80
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e0a4      	b.n	801136e <UART_SetConfig+0x5a6>
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	4a8f      	ldr	r2, [pc, #572]	; (8011468 <UART_SetConfig+0x6a0>)
 801122a:	4293      	cmp	r3, r2
 801122c:	d130      	bne.n	8011290 <UART_SetConfig+0x4c8>
 801122e:	4b8d      	ldr	r3, [pc, #564]	; (8011464 <UART_SetConfig+0x69c>)
 8011230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011232:	f003 0307 	and.w	r3, r3, #7
 8011236:	2b05      	cmp	r3, #5
 8011238:	d826      	bhi.n	8011288 <UART_SetConfig+0x4c0>
 801123a:	a201      	add	r2, pc, #4	; (adr r2, 8011240 <UART_SetConfig+0x478>)
 801123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011240:	08011259 	.word	0x08011259
 8011244:	08011261 	.word	0x08011261
 8011248:	08011269 	.word	0x08011269
 801124c:	08011271 	.word	0x08011271
 8011250:	08011279 	.word	0x08011279
 8011254:	08011281 	.word	0x08011281
 8011258:	2300      	movs	r3, #0
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125e:	e086      	b.n	801136e <UART_SetConfig+0x5a6>
 8011260:	2304      	movs	r3, #4
 8011262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011266:	e082      	b.n	801136e <UART_SetConfig+0x5a6>
 8011268:	2308      	movs	r3, #8
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126e:	e07e      	b.n	801136e <UART_SetConfig+0x5a6>
 8011270:	2310      	movs	r3, #16
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011276:	e07a      	b.n	801136e <UART_SetConfig+0x5a6>
 8011278:	2320      	movs	r3, #32
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e076      	b.n	801136e <UART_SetConfig+0x5a6>
 8011280:	2340      	movs	r3, #64	; 0x40
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e072      	b.n	801136e <UART_SetConfig+0x5a6>
 8011288:	2380      	movs	r3, #128	; 0x80
 801128a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128e:	e06e      	b.n	801136e <UART_SetConfig+0x5a6>
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4a75      	ldr	r2, [pc, #468]	; (801146c <UART_SetConfig+0x6a4>)
 8011296:	4293      	cmp	r3, r2
 8011298:	d130      	bne.n	80112fc <UART_SetConfig+0x534>
 801129a:	4b72      	ldr	r3, [pc, #456]	; (8011464 <UART_SetConfig+0x69c>)
 801129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801129e:	f003 0307 	and.w	r3, r3, #7
 80112a2:	2b05      	cmp	r3, #5
 80112a4:	d826      	bhi.n	80112f4 <UART_SetConfig+0x52c>
 80112a6:	a201      	add	r2, pc, #4	; (adr r2, 80112ac <UART_SetConfig+0x4e4>)
 80112a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ac:	080112c5 	.word	0x080112c5
 80112b0:	080112cd 	.word	0x080112cd
 80112b4:	080112d5 	.word	0x080112d5
 80112b8:	080112dd 	.word	0x080112dd
 80112bc:	080112e5 	.word	0x080112e5
 80112c0:	080112ed 	.word	0x080112ed
 80112c4:	2300      	movs	r3, #0
 80112c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ca:	e050      	b.n	801136e <UART_SetConfig+0x5a6>
 80112cc:	2304      	movs	r3, #4
 80112ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d2:	e04c      	b.n	801136e <UART_SetConfig+0x5a6>
 80112d4:	2308      	movs	r3, #8
 80112d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112da:	e048      	b.n	801136e <UART_SetConfig+0x5a6>
 80112dc:	2310      	movs	r3, #16
 80112de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e2:	e044      	b.n	801136e <UART_SetConfig+0x5a6>
 80112e4:	2320      	movs	r3, #32
 80112e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ea:	e040      	b.n	801136e <UART_SetConfig+0x5a6>
 80112ec:	2340      	movs	r3, #64	; 0x40
 80112ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f2:	e03c      	b.n	801136e <UART_SetConfig+0x5a6>
 80112f4:	2380      	movs	r3, #128	; 0x80
 80112f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fa:	e038      	b.n	801136e <UART_SetConfig+0x5a6>
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	4a5b      	ldr	r2, [pc, #364]	; (8011470 <UART_SetConfig+0x6a8>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d130      	bne.n	8011368 <UART_SetConfig+0x5a0>
 8011306:	4b57      	ldr	r3, [pc, #348]	; (8011464 <UART_SetConfig+0x69c>)
 8011308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801130a:	f003 0307 	and.w	r3, r3, #7
 801130e:	2b05      	cmp	r3, #5
 8011310:	d826      	bhi.n	8011360 <UART_SetConfig+0x598>
 8011312:	a201      	add	r2, pc, #4	; (adr r2, 8011318 <UART_SetConfig+0x550>)
 8011314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011318:	08011331 	.word	0x08011331
 801131c:	08011339 	.word	0x08011339
 8011320:	08011341 	.word	0x08011341
 8011324:	08011349 	.word	0x08011349
 8011328:	08011351 	.word	0x08011351
 801132c:	08011359 	.word	0x08011359
 8011330:	2302      	movs	r3, #2
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e01a      	b.n	801136e <UART_SetConfig+0x5a6>
 8011338:	2304      	movs	r3, #4
 801133a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133e:	e016      	b.n	801136e <UART_SetConfig+0x5a6>
 8011340:	2308      	movs	r3, #8
 8011342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011346:	e012      	b.n	801136e <UART_SetConfig+0x5a6>
 8011348:	2310      	movs	r3, #16
 801134a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134e:	e00e      	b.n	801136e <UART_SetConfig+0x5a6>
 8011350:	2320      	movs	r3, #32
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011356:	e00a      	b.n	801136e <UART_SetConfig+0x5a6>
 8011358:	2340      	movs	r3, #64	; 0x40
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135e:	e006      	b.n	801136e <UART_SetConfig+0x5a6>
 8011360:	2380      	movs	r3, #128	; 0x80
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e002      	b.n	801136e <UART_SetConfig+0x5a6>
 8011368:	2380      	movs	r3, #128	; 0x80
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4a3f      	ldr	r2, [pc, #252]	; (8011470 <UART_SetConfig+0x6a8>)
 8011374:	4293      	cmp	r3, r2
 8011376:	f040 80f8 	bne.w	801156a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801137a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801137e:	2b20      	cmp	r3, #32
 8011380:	dc46      	bgt.n	8011410 <UART_SetConfig+0x648>
 8011382:	2b02      	cmp	r3, #2
 8011384:	f2c0 8082 	blt.w	801148c <UART_SetConfig+0x6c4>
 8011388:	3b02      	subs	r3, #2
 801138a:	2b1e      	cmp	r3, #30
 801138c:	d87e      	bhi.n	801148c <UART_SetConfig+0x6c4>
 801138e:	a201      	add	r2, pc, #4	; (adr r2, 8011394 <UART_SetConfig+0x5cc>)
 8011390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011394:	08011417 	.word	0x08011417
 8011398:	0801148d 	.word	0x0801148d
 801139c:	0801141f 	.word	0x0801141f
 80113a0:	0801148d 	.word	0x0801148d
 80113a4:	0801148d 	.word	0x0801148d
 80113a8:	0801148d 	.word	0x0801148d
 80113ac:	0801142f 	.word	0x0801142f
 80113b0:	0801148d 	.word	0x0801148d
 80113b4:	0801148d 	.word	0x0801148d
 80113b8:	0801148d 	.word	0x0801148d
 80113bc:	0801148d 	.word	0x0801148d
 80113c0:	0801148d 	.word	0x0801148d
 80113c4:	0801148d 	.word	0x0801148d
 80113c8:	0801148d 	.word	0x0801148d
 80113cc:	0801143f 	.word	0x0801143f
 80113d0:	0801148d 	.word	0x0801148d
 80113d4:	0801148d 	.word	0x0801148d
 80113d8:	0801148d 	.word	0x0801148d
 80113dc:	0801148d 	.word	0x0801148d
 80113e0:	0801148d 	.word	0x0801148d
 80113e4:	0801148d 	.word	0x0801148d
 80113e8:	0801148d 	.word	0x0801148d
 80113ec:	0801148d 	.word	0x0801148d
 80113f0:	0801148d 	.word	0x0801148d
 80113f4:	0801148d 	.word	0x0801148d
 80113f8:	0801148d 	.word	0x0801148d
 80113fc:	0801148d 	.word	0x0801148d
 8011400:	0801148d 	.word	0x0801148d
 8011404:	0801148d 	.word	0x0801148d
 8011408:	0801148d 	.word	0x0801148d
 801140c:	0801147f 	.word	0x0801147f
 8011410:	2b40      	cmp	r3, #64	; 0x40
 8011412:	d037      	beq.n	8011484 <UART_SetConfig+0x6bc>
 8011414:	e03a      	b.n	801148c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011416:	f7fb fce5 	bl	800cde4 <HAL_RCCEx_GetD3PCLK1Freq>
 801141a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801141c:	e03c      	b.n	8011498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011422:	4618      	mov	r0, r3
 8011424:	f7fb fcf4 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801142c:	e034      	b.n	8011498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801142e:	f107 0318 	add.w	r3, r7, #24
 8011432:	4618      	mov	r0, r3
 8011434:	f7fb fe40 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801143c:	e02c      	b.n	8011498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801143e:	4b09      	ldr	r3, [pc, #36]	; (8011464 <UART_SetConfig+0x69c>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	f003 0320 	and.w	r3, r3, #32
 8011446:	2b00      	cmp	r3, #0
 8011448:	d016      	beq.n	8011478 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801144a:	4b06      	ldr	r3, [pc, #24]	; (8011464 <UART_SetConfig+0x69c>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	08db      	lsrs	r3, r3, #3
 8011450:	f003 0303 	and.w	r3, r3, #3
 8011454:	4a07      	ldr	r2, [pc, #28]	; (8011474 <UART_SetConfig+0x6ac>)
 8011456:	fa22 f303 	lsr.w	r3, r2, r3
 801145a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801145c:	e01c      	b.n	8011498 <UART_SetConfig+0x6d0>
 801145e:	bf00      	nop
 8011460:	40011400 	.word	0x40011400
 8011464:	58024400 	.word	0x58024400
 8011468:	40007800 	.word	0x40007800
 801146c:	40007c00 	.word	0x40007c00
 8011470:	58000c00 	.word	0x58000c00
 8011474:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011478:	4b9d      	ldr	r3, [pc, #628]	; (80116f0 <UART_SetConfig+0x928>)
 801147a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801147c:	e00c      	b.n	8011498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801147e:	4b9d      	ldr	r3, [pc, #628]	; (80116f4 <UART_SetConfig+0x92c>)
 8011480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011482:	e009      	b.n	8011498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801148a:	e005      	b.n	8011498 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801148c:	2300      	movs	r3, #0
 801148e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011490:	2301      	movs	r3, #1
 8011492:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011496:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801149a:	2b00      	cmp	r3, #0
 801149c:	f000 81de 	beq.w	801185c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a4:	4a94      	ldr	r2, [pc, #592]	; (80116f8 <UART_SetConfig+0x930>)
 80114a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114aa:	461a      	mov	r2, r3
 80114ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80114b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	685a      	ldr	r2, [r3, #4]
 80114b8:	4613      	mov	r3, r2
 80114ba:	005b      	lsls	r3, r3, #1
 80114bc:	4413      	add	r3, r2
 80114be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d305      	bcc.n	80114d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d903      	bls.n	80114d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80114d0:	2301      	movs	r3, #1
 80114d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114d6:	e1c1      	b.n	801185c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114da:	2200      	movs	r2, #0
 80114dc:	60bb      	str	r3, [r7, #8]
 80114de:	60fa      	str	r2, [r7, #12]
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e4:	4a84      	ldr	r2, [pc, #528]	; (80116f8 <UART_SetConfig+0x930>)
 80114e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	2200      	movs	r2, #0
 80114ee:	603b      	str	r3, [r7, #0]
 80114f0:	607a      	str	r2, [r7, #4]
 80114f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80114fa:	f7ee fef1 	bl	80002e0 <__aeabi_uldivmod>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4610      	mov	r0, r2
 8011504:	4619      	mov	r1, r3
 8011506:	f04f 0200 	mov.w	r2, #0
 801150a:	f04f 0300 	mov.w	r3, #0
 801150e:	020b      	lsls	r3, r1, #8
 8011510:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011514:	0202      	lsls	r2, r0, #8
 8011516:	6979      	ldr	r1, [r7, #20]
 8011518:	6849      	ldr	r1, [r1, #4]
 801151a:	0849      	lsrs	r1, r1, #1
 801151c:	2000      	movs	r0, #0
 801151e:	460c      	mov	r4, r1
 8011520:	4605      	mov	r5, r0
 8011522:	eb12 0804 	adds.w	r8, r2, r4
 8011526:	eb43 0905 	adc.w	r9, r3, r5
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	2200      	movs	r2, #0
 8011530:	469a      	mov	sl, r3
 8011532:	4693      	mov	fp, r2
 8011534:	4652      	mov	r2, sl
 8011536:	465b      	mov	r3, fp
 8011538:	4640      	mov	r0, r8
 801153a:	4649      	mov	r1, r9
 801153c:	f7ee fed0 	bl	80002e0 <__aeabi_uldivmod>
 8011540:	4602      	mov	r2, r0
 8011542:	460b      	mov	r3, r1
 8011544:	4613      	mov	r3, r2
 8011546:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801154e:	d308      	bcc.n	8011562 <UART_SetConfig+0x79a>
 8011550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011556:	d204      	bcs.n	8011562 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801155e:	60da      	str	r2, [r3, #12]
 8011560:	e17c      	b.n	801185c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011562:	2301      	movs	r3, #1
 8011564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011568:	e178      	b.n	801185c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	69db      	ldr	r3, [r3, #28]
 801156e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011572:	f040 80c5 	bne.w	8011700 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011576:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801157a:	2b20      	cmp	r3, #32
 801157c:	dc48      	bgt.n	8011610 <UART_SetConfig+0x848>
 801157e:	2b00      	cmp	r3, #0
 8011580:	db7b      	blt.n	801167a <UART_SetConfig+0x8b2>
 8011582:	2b20      	cmp	r3, #32
 8011584:	d879      	bhi.n	801167a <UART_SetConfig+0x8b2>
 8011586:	a201      	add	r2, pc, #4	; (adr r2, 801158c <UART_SetConfig+0x7c4>)
 8011588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801158c:	08011617 	.word	0x08011617
 8011590:	0801161f 	.word	0x0801161f
 8011594:	0801167b 	.word	0x0801167b
 8011598:	0801167b 	.word	0x0801167b
 801159c:	08011627 	.word	0x08011627
 80115a0:	0801167b 	.word	0x0801167b
 80115a4:	0801167b 	.word	0x0801167b
 80115a8:	0801167b 	.word	0x0801167b
 80115ac:	08011637 	.word	0x08011637
 80115b0:	0801167b 	.word	0x0801167b
 80115b4:	0801167b 	.word	0x0801167b
 80115b8:	0801167b 	.word	0x0801167b
 80115bc:	0801167b 	.word	0x0801167b
 80115c0:	0801167b 	.word	0x0801167b
 80115c4:	0801167b 	.word	0x0801167b
 80115c8:	0801167b 	.word	0x0801167b
 80115cc:	08011647 	.word	0x08011647
 80115d0:	0801167b 	.word	0x0801167b
 80115d4:	0801167b 	.word	0x0801167b
 80115d8:	0801167b 	.word	0x0801167b
 80115dc:	0801167b 	.word	0x0801167b
 80115e0:	0801167b 	.word	0x0801167b
 80115e4:	0801167b 	.word	0x0801167b
 80115e8:	0801167b 	.word	0x0801167b
 80115ec:	0801167b 	.word	0x0801167b
 80115f0:	0801167b 	.word	0x0801167b
 80115f4:	0801167b 	.word	0x0801167b
 80115f8:	0801167b 	.word	0x0801167b
 80115fc:	0801167b 	.word	0x0801167b
 8011600:	0801167b 	.word	0x0801167b
 8011604:	0801167b 	.word	0x0801167b
 8011608:	0801167b 	.word	0x0801167b
 801160c:	0801166d 	.word	0x0801166d
 8011610:	2b40      	cmp	r3, #64	; 0x40
 8011612:	d02e      	beq.n	8011672 <UART_SetConfig+0x8aa>
 8011614:	e031      	b.n	801167a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011616:	f7f9 fbed 	bl	800adf4 <HAL_RCC_GetPCLK1Freq>
 801161a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801161c:	e033      	b.n	8011686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801161e:	f7f9 fbff 	bl	800ae20 <HAL_RCC_GetPCLK2Freq>
 8011622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011624:	e02f      	b.n	8011686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801162a:	4618      	mov	r0, r3
 801162c:	f7fb fbf0 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011634:	e027      	b.n	8011686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011636:	f107 0318 	add.w	r3, r7, #24
 801163a:	4618      	mov	r0, r3
 801163c:	f7fb fd3c 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011644:	e01f      	b.n	8011686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011646:	4b2d      	ldr	r3, [pc, #180]	; (80116fc <UART_SetConfig+0x934>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f003 0320 	and.w	r3, r3, #32
 801164e:	2b00      	cmp	r3, #0
 8011650:	d009      	beq.n	8011666 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011652:	4b2a      	ldr	r3, [pc, #168]	; (80116fc <UART_SetConfig+0x934>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	08db      	lsrs	r3, r3, #3
 8011658:	f003 0303 	and.w	r3, r3, #3
 801165c:	4a24      	ldr	r2, [pc, #144]	; (80116f0 <UART_SetConfig+0x928>)
 801165e:	fa22 f303 	lsr.w	r3, r2, r3
 8011662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011664:	e00f      	b.n	8011686 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011666:	4b22      	ldr	r3, [pc, #136]	; (80116f0 <UART_SetConfig+0x928>)
 8011668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801166a:	e00c      	b.n	8011686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801166c:	4b21      	ldr	r3, [pc, #132]	; (80116f4 <UART_SetConfig+0x92c>)
 801166e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011670:	e009      	b.n	8011686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011678:	e005      	b.n	8011686 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801167a:	2300      	movs	r3, #0
 801167c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801167e:	2301      	movs	r3, #1
 8011680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011684:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011688:	2b00      	cmp	r3, #0
 801168a:	f000 80e7 	beq.w	801185c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011692:	4a19      	ldr	r2, [pc, #100]	; (80116f8 <UART_SetConfig+0x930>)
 8011694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011698:	461a      	mov	r2, r3
 801169a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801169c:	fbb3 f3f2 	udiv	r3, r3, r2
 80116a0:	005a      	lsls	r2, r3, #1
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	085b      	lsrs	r3, r3, #1
 80116a8:	441a      	add	r2, r3
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80116b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b6:	2b0f      	cmp	r3, #15
 80116b8:	d916      	bls.n	80116e8 <UART_SetConfig+0x920>
 80116ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116c0:	d212      	bcs.n	80116e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80116c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	f023 030f 	bic.w	r3, r3, #15
 80116ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80116cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ce:	085b      	lsrs	r3, r3, #1
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	f003 0307 	and.w	r3, r3, #7
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116da:	4313      	orrs	r3, r2
 80116dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80116e4:	60da      	str	r2, [r3, #12]
 80116e6:	e0b9      	b.n	801185c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80116e8:	2301      	movs	r3, #1
 80116ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116ee:	e0b5      	b.n	801185c <UART_SetConfig+0xa94>
 80116f0:	03d09000 	.word	0x03d09000
 80116f4:	003d0900 	.word	0x003d0900
 80116f8:	08017874 	.word	0x08017874
 80116fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011700:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011704:	2b20      	cmp	r3, #32
 8011706:	dc49      	bgt.n	801179c <UART_SetConfig+0x9d4>
 8011708:	2b00      	cmp	r3, #0
 801170a:	db7c      	blt.n	8011806 <UART_SetConfig+0xa3e>
 801170c:	2b20      	cmp	r3, #32
 801170e:	d87a      	bhi.n	8011806 <UART_SetConfig+0xa3e>
 8011710:	a201      	add	r2, pc, #4	; (adr r2, 8011718 <UART_SetConfig+0x950>)
 8011712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011716:	bf00      	nop
 8011718:	080117a3 	.word	0x080117a3
 801171c:	080117ab 	.word	0x080117ab
 8011720:	08011807 	.word	0x08011807
 8011724:	08011807 	.word	0x08011807
 8011728:	080117b3 	.word	0x080117b3
 801172c:	08011807 	.word	0x08011807
 8011730:	08011807 	.word	0x08011807
 8011734:	08011807 	.word	0x08011807
 8011738:	080117c3 	.word	0x080117c3
 801173c:	08011807 	.word	0x08011807
 8011740:	08011807 	.word	0x08011807
 8011744:	08011807 	.word	0x08011807
 8011748:	08011807 	.word	0x08011807
 801174c:	08011807 	.word	0x08011807
 8011750:	08011807 	.word	0x08011807
 8011754:	08011807 	.word	0x08011807
 8011758:	080117d3 	.word	0x080117d3
 801175c:	08011807 	.word	0x08011807
 8011760:	08011807 	.word	0x08011807
 8011764:	08011807 	.word	0x08011807
 8011768:	08011807 	.word	0x08011807
 801176c:	08011807 	.word	0x08011807
 8011770:	08011807 	.word	0x08011807
 8011774:	08011807 	.word	0x08011807
 8011778:	08011807 	.word	0x08011807
 801177c:	08011807 	.word	0x08011807
 8011780:	08011807 	.word	0x08011807
 8011784:	08011807 	.word	0x08011807
 8011788:	08011807 	.word	0x08011807
 801178c:	08011807 	.word	0x08011807
 8011790:	08011807 	.word	0x08011807
 8011794:	08011807 	.word	0x08011807
 8011798:	080117f9 	.word	0x080117f9
 801179c:	2b40      	cmp	r3, #64	; 0x40
 801179e:	d02e      	beq.n	80117fe <UART_SetConfig+0xa36>
 80117a0:	e031      	b.n	8011806 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117a2:	f7f9 fb27 	bl	800adf4 <HAL_RCC_GetPCLK1Freq>
 80117a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117a8:	e033      	b.n	8011812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117aa:	f7f9 fb39 	bl	800ae20 <HAL_RCC_GetPCLK2Freq>
 80117ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117b0:	e02f      	b.n	8011812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fb fb2a 	bl	800ce10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c0:	e027      	b.n	8011812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117c2:	f107 0318 	add.w	r3, r7, #24
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fb fc76 	bl	800d0b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117d0:	e01f      	b.n	8011812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117d2:	4b2d      	ldr	r3, [pc, #180]	; (8011888 <UART_SetConfig+0xac0>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f003 0320 	and.w	r3, r3, #32
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d009      	beq.n	80117f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117de:	4b2a      	ldr	r3, [pc, #168]	; (8011888 <UART_SetConfig+0xac0>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	08db      	lsrs	r3, r3, #3
 80117e4:	f003 0303 	and.w	r3, r3, #3
 80117e8:	4a28      	ldr	r2, [pc, #160]	; (801188c <UART_SetConfig+0xac4>)
 80117ea:	fa22 f303 	lsr.w	r3, r2, r3
 80117ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117f0:	e00f      	b.n	8011812 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80117f2:	4b26      	ldr	r3, [pc, #152]	; (801188c <UART_SetConfig+0xac4>)
 80117f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117f6:	e00c      	b.n	8011812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117f8:	4b25      	ldr	r3, [pc, #148]	; (8011890 <UART_SetConfig+0xac8>)
 80117fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117fc:	e009      	b.n	8011812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011804:	e005      	b.n	8011812 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011806:	2300      	movs	r3, #0
 8011808:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801180a:	2301      	movs	r3, #1
 801180c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011810:	bf00      	nop
    }

    if (pclk != 0U)
 8011812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d021      	beq.n	801185c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181c:	4a1d      	ldr	r2, [pc, #116]	; (8011894 <UART_SetConfig+0xacc>)
 801181e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011822:	461a      	mov	r2, r3
 8011824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011826:	fbb3 f2f2 	udiv	r2, r3, r2
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	085b      	lsrs	r3, r3, #1
 8011830:	441a      	add	r2, r3
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	fbb2 f3f3 	udiv	r3, r2, r3
 801183a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183e:	2b0f      	cmp	r3, #15
 8011840:	d909      	bls.n	8011856 <UART_SetConfig+0xa8e>
 8011842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011848:	d205      	bcs.n	8011856 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184c:	b29a      	uxth	r2, r3
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	60da      	str	r2, [r3, #12]
 8011854:	e002      	b.n	801185c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011856:	2301      	movs	r3, #1
 8011858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	2201      	movs	r2, #1
 8011860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	2201      	movs	r2, #1
 8011868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2200      	movs	r2, #0
 8011870:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	2200      	movs	r2, #0
 8011876:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011878:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801187c:	4618      	mov	r0, r3
 801187e:	3748      	adds	r7, #72	; 0x48
 8011880:	46bd      	mov	sp, r7
 8011882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011886:	bf00      	nop
 8011888:	58024400 	.word	0x58024400
 801188c:	03d09000 	.word	0x03d09000
 8011890:	003d0900 	.word	0x003d0900
 8011894:	08017874 	.word	0x08017874

08011898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011898:	b480      	push	{r7}
 801189a:	b083      	sub	sp, #12
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a4:	f003 0308 	and.w	r3, r3, #8
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00a      	beq.n	80118c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	430a      	orrs	r2, r1
 80118c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c6:	f003 0301 	and.w	r3, r3, #1
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00a      	beq.n	80118e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	430a      	orrs	r2, r1
 80118e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e8:	f003 0302 	and.w	r3, r3, #2
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00a      	beq.n	8011906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	430a      	orrs	r2, r1
 8011904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801190a:	f003 0304 	and.w	r3, r3, #4
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00a      	beq.n	8011928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	430a      	orrs	r2, r1
 8011926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192c:	f003 0310 	and.w	r3, r3, #16
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00a      	beq.n	801194a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	689b      	ldr	r3, [r3, #8]
 801193a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	430a      	orrs	r2, r1
 8011948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801194e:	f003 0320 	and.w	r3, r3, #32
 8011952:	2b00      	cmp	r3, #0
 8011954:	d00a      	beq.n	801196c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	430a      	orrs	r2, r1
 801196a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011974:	2b00      	cmp	r3, #0
 8011976:	d01a      	beq.n	80119ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	430a      	orrs	r2, r1
 801198c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011996:	d10a      	bne.n	80119ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	430a      	orrs	r2, r1
 80119ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00a      	beq.n	80119d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	430a      	orrs	r2, r1
 80119ce:	605a      	str	r2, [r3, #4]
  }
}
 80119d0:	bf00      	nop
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr

080119dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b098      	sub	sp, #96	; 0x60
 80119e0:	af02      	add	r7, sp, #8
 80119e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80119ec:	f7f2 fa74 	bl	8003ed8 <HAL_GetTick>
 80119f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f003 0308 	and.w	r3, r3, #8
 80119fc:	2b08      	cmp	r3, #8
 80119fe:	d12f      	bne.n	8011a60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 f88e 	bl	8011b30 <UART_WaitOnFlagUntilTimeout>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d022      	beq.n	8011a60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a22:	e853 3f00 	ldrex	r3, [r3]
 8011a26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	461a      	mov	r2, r3
 8011a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a38:	647b      	str	r3, [r7, #68]	; 0x44
 8011a3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a40:	e841 2300 	strex	r3, r2, [r1]
 8011a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d1e6      	bne.n	8011a1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2220      	movs	r2, #32
 8011a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a5c:	2303      	movs	r3, #3
 8011a5e:	e063      	b.n	8011b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f003 0304 	and.w	r3, r3, #4
 8011a6a:	2b04      	cmp	r3, #4
 8011a6c:	d149      	bne.n	8011b02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a72:	9300      	str	r3, [sp, #0]
 8011a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a76:	2200      	movs	r2, #0
 8011a78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 f857 	bl	8011b30 <UART_WaitOnFlagUntilTimeout>
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d03c      	beq.n	8011b02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a90:	e853 3f00 	ldrex	r3, [r3]
 8011a94:	623b      	str	r3, [r7, #32]
   return(result);
 8011a96:	6a3b      	ldr	r3, [r7, #32]
 8011a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8011aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aae:	e841 2300 	strex	r3, r2, [r1]
 8011ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d1e6      	bne.n	8011a88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3308      	adds	r3, #8
 8011ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	e853 3f00 	ldrex	r3, [r3]
 8011ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f023 0301 	bic.w	r3, r3, #1
 8011ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ada:	61fa      	str	r2, [r7, #28]
 8011adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ade:	69b9      	ldr	r1, [r7, #24]
 8011ae0:	69fa      	ldr	r2, [r7, #28]
 8011ae2:	e841 2300 	strex	r3, r2, [r1]
 8011ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1e5      	bne.n	8011aba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2220      	movs	r2, #32
 8011af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011afe:	2303      	movs	r3, #3
 8011b00:	e012      	b.n	8011b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2220      	movs	r2, #32
 8011b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2220      	movs	r2, #32
 8011b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3758      	adds	r7, #88	; 0x58
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	603b      	str	r3, [r7, #0]
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b40:	e04f      	b.n	8011be2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b48:	d04b      	beq.n	8011be2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b4a:	f7f2 f9c5 	bl	8003ed8 <HAL_GetTick>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	69ba      	ldr	r2, [r7, #24]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d302      	bcc.n	8011b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d101      	bne.n	8011b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011b60:	2303      	movs	r3, #3
 8011b62:	e04e      	b.n	8011c02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f003 0304 	and.w	r3, r3, #4
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d037      	beq.n	8011be2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	2b80      	cmp	r3, #128	; 0x80
 8011b76:	d034      	beq.n	8011be2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	2b40      	cmp	r3, #64	; 0x40
 8011b7c:	d031      	beq.n	8011be2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	69db      	ldr	r3, [r3, #28]
 8011b84:	f003 0308 	and.w	r3, r3, #8
 8011b88:	2b08      	cmp	r3, #8
 8011b8a:	d110      	bne.n	8011bae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2208      	movs	r2, #8
 8011b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f000 f99d 	bl	8011ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2208      	movs	r2, #8
 8011b9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011baa:	2301      	movs	r3, #1
 8011bac:	e029      	b.n	8011c02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011bbc:	d111      	bne.n	8011be2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f000 f983 	bl	8011ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2220      	movs	r2, #32
 8011bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011bde:	2303      	movs	r3, #3
 8011be0:	e00f      	b.n	8011c02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	69da      	ldr	r2, [r3, #28]
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	4013      	ands	r3, r2
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	bf0c      	ite	eq
 8011bf2:	2301      	moveq	r3, #1
 8011bf4:	2300      	movne	r3, #0
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	79fb      	ldrb	r3, [r7, #7]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d0a0      	beq.n	8011b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c00:	2300      	movs	r3, #0
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
	...

08011c0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b0a3      	sub	sp, #140	; 0x8c
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	4613      	mov	r3, r2
 8011c18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	68ba      	ldr	r2, [r7, #8]
 8011c1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	88fa      	ldrh	r2, [r7, #6]
 8011c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	88fa      	ldrh	r2, [r7, #6]
 8011c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2200      	movs	r2, #0
 8011c34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	689b      	ldr	r3, [r3, #8]
 8011c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c3e:	d10e      	bne.n	8011c5e <UART_Start_Receive_IT+0x52>
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	691b      	ldr	r3, [r3, #16]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d105      	bne.n	8011c54 <UART_Start_Receive_IT+0x48>
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011c4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c52:	e02d      	b.n	8011cb0 <UART_Start_Receive_IT+0xa4>
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	22ff      	movs	r2, #255	; 0xff
 8011c58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c5c:	e028      	b.n	8011cb0 <UART_Start_Receive_IT+0xa4>
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	689b      	ldr	r3, [r3, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10d      	bne.n	8011c82 <UART_Start_Receive_IT+0x76>
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	691b      	ldr	r3, [r3, #16]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d104      	bne.n	8011c78 <UART_Start_Receive_IT+0x6c>
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	22ff      	movs	r2, #255	; 0xff
 8011c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c76:	e01b      	b.n	8011cb0 <UART_Start_Receive_IT+0xa4>
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	227f      	movs	r2, #127	; 0x7f
 8011c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c80:	e016      	b.n	8011cb0 <UART_Start_Receive_IT+0xa4>
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011c8a:	d10d      	bne.n	8011ca8 <UART_Start_Receive_IT+0x9c>
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	691b      	ldr	r3, [r3, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d104      	bne.n	8011c9e <UART_Start_Receive_IT+0x92>
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	227f      	movs	r2, #127	; 0x7f
 8011c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c9c:	e008      	b.n	8011cb0 <UART_Start_Receive_IT+0xa4>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	223f      	movs	r2, #63	; 0x3f
 8011ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ca6:	e003      	b.n	8011cb0 <UART_Start_Receive_IT+0xa4>
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2200      	movs	r2, #0
 8011cac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2222      	movs	r2, #34	; 0x22
 8011cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	3308      	adds	r3, #8
 8011cc6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cca:	e853 3f00 	ldrex	r3, [r3]
 8011cce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cd2:	f043 0301 	orr.w	r3, r3, #1
 8011cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	3308      	adds	r3, #8
 8011ce0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ce4:	673a      	str	r2, [r7, #112]	; 0x70
 8011ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011cea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011cec:	e841 2300 	strex	r3, r2, [r1]
 8011cf0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1e3      	bne.n	8011cc0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d00:	d14f      	bne.n	8011da2 <UART_Start_Receive_IT+0x196>
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d08:	88fa      	ldrh	r2, [r7, #6]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d349      	bcc.n	8011da2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d16:	d107      	bne.n	8011d28 <UART_Start_Receive_IT+0x11c>
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	691b      	ldr	r3, [r3, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d103      	bne.n	8011d28 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	4a47      	ldr	r2, [pc, #284]	; (8011e40 <UART_Start_Receive_IT+0x234>)
 8011d24:	675a      	str	r2, [r3, #116]	; 0x74
 8011d26:	e002      	b.n	8011d2e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	4a46      	ldr	r2, [pc, #280]	; (8011e44 <UART_Start_Receive_IT+0x238>)
 8011d2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	691b      	ldr	r3, [r3, #16]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d01a      	beq.n	8011d6c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d3e:	e853 3f00 	ldrex	r3, [r3]
 8011d42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d5a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011d5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d60:	e841 2300 	strex	r3, r2, [r1]
 8011d64:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d1e4      	bne.n	8011d36 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	3308      	adds	r3, #8
 8011d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d76:	e853 3f00 	ldrex	r3, [r3]
 8011d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	3308      	adds	r3, #8
 8011d8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8011d8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d94:	e841 2300 	strex	r3, r2, [r1]
 8011d98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1e5      	bne.n	8011d6c <UART_Start_Receive_IT+0x160>
 8011da0:	e046      	b.n	8011e30 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011daa:	d107      	bne.n	8011dbc <UART_Start_Receive_IT+0x1b0>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	691b      	ldr	r3, [r3, #16]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d103      	bne.n	8011dbc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	4a24      	ldr	r2, [pc, #144]	; (8011e48 <UART_Start_Receive_IT+0x23c>)
 8011db8:	675a      	str	r2, [r3, #116]	; 0x74
 8011dba:	e002      	b.n	8011dc2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	4a23      	ldr	r2, [pc, #140]	; (8011e4c <UART_Start_Receive_IT+0x240>)
 8011dc0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	691b      	ldr	r3, [r3, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d019      	beq.n	8011dfe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd2:	e853 3f00 	ldrex	r3, [r3]
 8011dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011dde:	677b      	str	r3, [r7, #116]	; 0x74
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	461a      	mov	r2, r3
 8011de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011de8:	637b      	str	r3, [r7, #52]	; 0x34
 8011dea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011df0:	e841 2300 	strex	r3, r2, [r1]
 8011df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d1e6      	bne.n	8011dca <UART_Start_Receive_IT+0x1be>
 8011dfc:	e018      	b.n	8011e30 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	e853 3f00 	ldrex	r3, [r3]
 8011e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	f043 0320 	orr.w	r3, r3, #32
 8011e12:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	461a      	mov	r2, r3
 8011e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e1c:	623b      	str	r3, [r7, #32]
 8011e1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e20:	69f9      	ldr	r1, [r7, #28]
 8011e22:	6a3a      	ldr	r2, [r7, #32]
 8011e24:	e841 2300 	strex	r3, r2, [r1]
 8011e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d1e6      	bne.n	8011dfe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	378c      	adds	r7, #140	; 0x8c
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop
 8011e40:	08012825 	.word	0x08012825
 8011e44:	080124c5 	.word	0x080124c5
 8011e48:	0801230d 	.word	0x0801230d
 8011e4c:	08012155 	.word	0x08012155

08011e50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011e50:	b480      	push	{r7}
 8011e52:	b08f      	sub	sp, #60	; 0x3c
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e5e:	6a3b      	ldr	r3, [r7, #32]
 8011e60:	e853 3f00 	ldrex	r3, [r3]
 8011e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	461a      	mov	r2, r3
 8011e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e78:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e7e:	e841 2300 	strex	r3, r2, [r1]
 8011e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1e6      	bne.n	8011e58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3308      	adds	r3, #8
 8011e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	e853 3f00 	ldrex	r3, [r3]
 8011e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	3308      	adds	r3, #8
 8011ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011eaa:	61ba      	str	r2, [r7, #24]
 8011eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eae:	6979      	ldr	r1, [r7, #20]
 8011eb0:	69ba      	ldr	r2, [r7, #24]
 8011eb2:	e841 2300 	strex	r3, r2, [r1]
 8011eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1e5      	bne.n	8011e8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2220      	movs	r2, #32
 8011ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011ec6:	bf00      	nop
 8011ec8:	373c      	adds	r7, #60	; 0x3c
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr
	...

08011ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b095      	sub	sp, #84	; 0x54
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ee4:	e853 3f00 	ldrex	r3, [r3]
 8011ee8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011efa:	643b      	str	r3, [r7, #64]	; 0x40
 8011efc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011efe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f02:	e841 2300 	strex	r3, r2, [r1]
 8011f06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d1e6      	bne.n	8011edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	3308      	adds	r3, #8
 8011f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f16:	6a3b      	ldr	r3, [r7, #32]
 8011f18:	e853 3f00 	ldrex	r3, [r3]
 8011f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f1e:	69fa      	ldr	r2, [r7, #28]
 8011f20:	4b1e      	ldr	r3, [pc, #120]	; (8011f9c <UART_EndRxTransfer+0xc8>)
 8011f22:	4013      	ands	r3, r2
 8011f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	3308      	adds	r3, #8
 8011f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f36:	e841 2300 	strex	r3, r2, [r1]
 8011f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d1e5      	bne.n	8011f0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d118      	bne.n	8011f7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	e853 3f00 	ldrex	r3, [r3]
 8011f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	f023 0310 	bic.w	r3, r3, #16
 8011f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	461a      	mov	r2, r3
 8011f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f68:	61bb      	str	r3, [r7, #24]
 8011f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f6c:	6979      	ldr	r1, [r7, #20]
 8011f6e:	69ba      	ldr	r2, [r7, #24]
 8011f70:	e841 2300 	strex	r3, r2, [r1]
 8011f74:	613b      	str	r3, [r7, #16]
   return(result);
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1e6      	bne.n	8011f4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2220      	movs	r2, #32
 8011f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2200      	movs	r2, #0
 8011f88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011f90:	bf00      	nop
 8011f92:	3754      	adds	r7, #84	; 0x54
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr
 8011f9c:	effffffe 	.word	0xeffffffe

08011fa0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b090      	sub	sp, #64	; 0x40
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	69db      	ldr	r3, [r3, #28]
 8011fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011fb6:	d037      	beq.n	8012028 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	3308      	adds	r3, #8
 8011fc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fca:	e853 3f00 	ldrex	r3, [r3]
 8011fce:	623b      	str	r3, [r7, #32]
   return(result);
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	3308      	adds	r3, #8
 8011fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fe0:	633a      	str	r2, [r7, #48]	; 0x30
 8011fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fe8:	e841 2300 	strex	r3, r2, [r1]
 8011fec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d1e5      	bne.n	8011fc0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	e853 3f00 	ldrex	r3, [r3]
 8012000:	60fb      	str	r3, [r7, #12]
   return(result);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012008:	637b      	str	r3, [r7, #52]	; 0x34
 801200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	461a      	mov	r2, r3
 8012010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012012:	61fb      	str	r3, [r7, #28]
 8012014:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012016:	69b9      	ldr	r1, [r7, #24]
 8012018:	69fa      	ldr	r2, [r7, #28]
 801201a:	e841 2300 	strex	r3, r2, [r1]
 801201e:	617b      	str	r3, [r7, #20]
   return(result);
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d1e6      	bne.n	8011ff4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012026:	e002      	b.n	801202e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012028:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801202a:	f7f0 f987 	bl	800233c <HAL_UART_TxCpltCallback>
}
 801202e:	bf00      	nop
 8012030:	3740      	adds	r7, #64	; 0x40
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b084      	sub	sp, #16
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012042:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f7fe fe9f 	bl	8010d88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801204a:	bf00      	nop
 801204c:	3710      	adds	r7, #16
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b086      	sub	sp, #24
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801205e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012066:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801206e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	689b      	ldr	r3, [r3, #8]
 8012076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801207a:	2b80      	cmp	r3, #128	; 0x80
 801207c:	d109      	bne.n	8012092 <UART_DMAError+0x40>
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	2b21      	cmp	r3, #33	; 0x21
 8012082:	d106      	bne.n	8012092 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	2200      	movs	r2, #0
 8012088:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801208c:	6978      	ldr	r0, [r7, #20]
 801208e:	f7ff fedf 	bl	8011e50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	689b      	ldr	r3, [r3, #8]
 8012098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801209c:	2b40      	cmp	r3, #64	; 0x40
 801209e:	d109      	bne.n	80120b4 <UART_DMAError+0x62>
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	2b22      	cmp	r3, #34	; 0x22
 80120a4:	d106      	bne.n	80120b4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	2200      	movs	r2, #0
 80120aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80120ae:	6978      	ldr	r0, [r7, #20]
 80120b0:	f7ff ff10 	bl	8011ed4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120ba:	f043 0210 	orr.w	r2, r3, #16
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80120c4:	6978      	ldr	r0, [r7, #20]
 80120c6:	f7fe fe69 	bl	8010d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120ca:	bf00      	nop
 80120cc:	3718      	adds	r7, #24
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b084      	sub	sp, #16
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2200      	movs	r2, #0
 80120e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f7fe fe53 	bl	8010d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120f6:	bf00      	nop
 80120f8:	3710      	adds	r7, #16
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}

080120fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80120fe:	b580      	push	{r7, lr}
 8012100:	b088      	sub	sp, #32
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	e853 3f00 	ldrex	r3, [r3]
 8012112:	60bb      	str	r3, [r7, #8]
   return(result);
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801211a:	61fb      	str	r3, [r7, #28]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	461a      	mov	r2, r3
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	61bb      	str	r3, [r7, #24]
 8012126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012128:	6979      	ldr	r1, [r7, #20]
 801212a:	69ba      	ldr	r2, [r7, #24]
 801212c:	e841 2300 	strex	r3, r2, [r1]
 8012130:	613b      	str	r3, [r7, #16]
   return(result);
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1e6      	bne.n	8012106 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2220      	movs	r2, #32
 801213c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7f0 f8f8 	bl	800233c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801214c:	bf00      	nop
 801214e:	3720      	adds	r7, #32
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b09c      	sub	sp, #112	; 0x70
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012162:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801216c:	2b22      	cmp	r3, #34	; 0x22
 801216e:	f040 80be 	bne.w	80122ee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012178:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801217c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012180:	b2d9      	uxtb	r1, r3
 8012182:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012186:	b2da      	uxtb	r2, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801218c:	400a      	ands	r2, r1
 801218e:	b2d2      	uxtb	r2, r2
 8012190:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012196:	1c5a      	adds	r2, r3, #1
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	3b01      	subs	r3, #1
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f040 80a1 	bne.w	80122fe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c4:	e853 3f00 	ldrex	r3, [r3]
 80121c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80121ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80121d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	461a      	mov	r2, r3
 80121d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80121da:	65bb      	str	r3, [r7, #88]	; 0x58
 80121dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80121e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80121e2:	e841 2300 	strex	r3, r2, [r1]
 80121e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80121e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1e6      	bne.n	80121bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	3308      	adds	r3, #8
 80121f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f8:	e853 3f00 	ldrex	r3, [r3]
 80121fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80121fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012200:	f023 0301 	bic.w	r3, r3, #1
 8012204:	667b      	str	r3, [r7, #100]	; 0x64
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	3308      	adds	r3, #8
 801220c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801220e:	647a      	str	r2, [r7, #68]	; 0x44
 8012210:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012216:	e841 2300 	strex	r3, r2, [r1]
 801221a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1e5      	bne.n	80121ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2220      	movs	r2, #32
 8012226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2200      	movs	r2, #0
 801222e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a33      	ldr	r2, [pc, #204]	; (8012308 <UART_RxISR_8BIT+0x1b4>)
 801223c:	4293      	cmp	r3, r2
 801223e:	d01f      	beq.n	8012280 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801224a:	2b00      	cmp	r3, #0
 801224c:	d018      	beq.n	8012280 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012256:	e853 3f00 	ldrex	r3, [r3]
 801225a:	623b      	str	r3, [r7, #32]
   return(result);
 801225c:	6a3b      	ldr	r3, [r7, #32]
 801225e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012262:	663b      	str	r3, [r7, #96]	; 0x60
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	461a      	mov	r2, r3
 801226a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801226c:	633b      	str	r3, [r7, #48]	; 0x30
 801226e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012274:	e841 2300 	strex	r3, r2, [r1]
 8012278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227c:	2b00      	cmp	r3, #0
 801227e:	d1e6      	bne.n	801224e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012284:	2b01      	cmp	r3, #1
 8012286:	d12e      	bne.n	80122e6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	e853 3f00 	ldrex	r3, [r3]
 801229a:	60fb      	str	r3, [r7, #12]
   return(result);
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f023 0310 	bic.w	r3, r3, #16
 80122a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	461a      	mov	r2, r3
 80122aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122ac:	61fb      	str	r3, [r7, #28]
 80122ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b0:	69b9      	ldr	r1, [r7, #24]
 80122b2:	69fa      	ldr	r2, [r7, #28]
 80122b4:	e841 2300 	strex	r3, r2, [r1]
 80122b8:	617b      	str	r3, [r7, #20]
   return(result);
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1e6      	bne.n	801228e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	69db      	ldr	r3, [r3, #28]
 80122c6:	f003 0310 	and.w	r3, r3, #16
 80122ca:	2b10      	cmp	r3, #16
 80122cc:	d103      	bne.n	80122d6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2210      	movs	r2, #16
 80122d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122dc:	4619      	mov	r1, r3
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f7fe fd66 	bl	8010db0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80122e4:	e00b      	b.n	80122fe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ee f9c6 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 80122ec:	e007      	b.n	80122fe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	699a      	ldr	r2, [r3, #24]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f042 0208 	orr.w	r2, r2, #8
 80122fc:	619a      	str	r2, [r3, #24]
}
 80122fe:	bf00      	nop
 8012300:	3770      	adds	r7, #112	; 0x70
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	58000c00 	.word	0x58000c00

0801230c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b09c      	sub	sp, #112	; 0x70
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801231a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012324:	2b22      	cmp	r3, #34	; 0x22
 8012326:	f040 80be 	bne.w	80124a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012330:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012338:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801233a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801233e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012342:	4013      	ands	r3, r2
 8012344:	b29a      	uxth	r2, r3
 8012346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012348:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801234e:	1c9a      	adds	r2, r3, #2
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801235a:	b29b      	uxth	r3, r3
 801235c:	3b01      	subs	r3, #1
 801235e:	b29a      	uxth	r2, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801236c:	b29b      	uxth	r3, r3
 801236e:	2b00      	cmp	r3, #0
 8012370:	f040 80a1 	bne.w	80124b6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801237a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801237c:	e853 3f00 	ldrex	r3, [r3]
 8012380:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012388:	667b      	str	r3, [r7, #100]	; 0x64
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	461a      	mov	r2, r3
 8012390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012392:	657b      	str	r3, [r7, #84]	; 0x54
 8012394:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012396:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012398:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801239a:	e841 2300 	strex	r3, r2, [r1]
 801239e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80123a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d1e6      	bne.n	8012374 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	3308      	adds	r3, #8
 80123ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b0:	e853 3f00 	ldrex	r3, [r3]
 80123b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b8:	f023 0301 	bic.w	r3, r3, #1
 80123bc:	663b      	str	r3, [r7, #96]	; 0x60
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	3308      	adds	r3, #8
 80123c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80123c6:	643a      	str	r2, [r7, #64]	; 0x40
 80123c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80123cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123ce:	e841 2300 	strex	r3, r2, [r1]
 80123d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80123d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d1e5      	bne.n	80123a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2220      	movs	r2, #32
 80123de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2200      	movs	r2, #0
 80123e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	4a33      	ldr	r2, [pc, #204]	; (80124c0 <UART_RxISR_16BIT+0x1b4>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d01f      	beq.n	8012438 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012402:	2b00      	cmp	r3, #0
 8012404:	d018      	beq.n	8012438 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801240c:	6a3b      	ldr	r3, [r7, #32]
 801240e:	e853 3f00 	ldrex	r3, [r3]
 8012412:	61fb      	str	r3, [r7, #28]
   return(result);
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801241a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	461a      	mov	r2, r3
 8012422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012426:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801242a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801242c:	e841 2300 	strex	r3, r2, [r1]
 8012430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012434:	2b00      	cmp	r3, #0
 8012436:	d1e6      	bne.n	8012406 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801243c:	2b01      	cmp	r3, #1
 801243e:	d12e      	bne.n	801249e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	e853 3f00 	ldrex	r3, [r3]
 8012452:	60bb      	str	r3, [r7, #8]
   return(result);
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	f023 0310 	bic.w	r3, r3, #16
 801245a:	65bb      	str	r3, [r7, #88]	; 0x58
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	461a      	mov	r2, r3
 8012462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012464:	61bb      	str	r3, [r7, #24]
 8012466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012468:	6979      	ldr	r1, [r7, #20]
 801246a:	69ba      	ldr	r2, [r7, #24]
 801246c:	e841 2300 	strex	r3, r2, [r1]
 8012470:	613b      	str	r3, [r7, #16]
   return(result);
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1e6      	bne.n	8012446 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	69db      	ldr	r3, [r3, #28]
 801247e:	f003 0310 	and.w	r3, r3, #16
 8012482:	2b10      	cmp	r3, #16
 8012484:	d103      	bne.n	801248e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2210      	movs	r2, #16
 801248c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012494:	4619      	mov	r1, r3
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f7fe fc8a 	bl	8010db0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801249c:	e00b      	b.n	80124b6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ee f8ea 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 80124a4:	e007      	b.n	80124b6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	699a      	ldr	r2, [r3, #24]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f042 0208 	orr.w	r2, r2, #8
 80124b4:	619a      	str	r2, [r3, #24]
}
 80124b6:	bf00      	nop
 80124b8:	3770      	adds	r7, #112	; 0x70
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	58000c00 	.word	0x58000c00

080124c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b0ac      	sub	sp, #176	; 0xb0
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	69db      	ldr	r3, [r3, #28]
 80124dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	689b      	ldr	r3, [r3, #8]
 80124f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124fa:	2b22      	cmp	r3, #34	; 0x22
 80124fc:	f040 8180 	bne.w	8012800 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012506:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801250a:	e123      	b.n	8012754 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012512:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012516:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801251a:	b2d9      	uxtb	r1, r3
 801251c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012520:	b2da      	uxtb	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012526:	400a      	ands	r2, r1
 8012528:	b2d2      	uxtb	r2, r2
 801252a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012530:	1c5a      	adds	r2, r3, #1
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801253c:	b29b      	uxth	r3, r3
 801253e:	3b01      	subs	r3, #1
 8012540:	b29a      	uxth	r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	69db      	ldr	r3, [r3, #28]
 801254e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012556:	f003 0307 	and.w	r3, r3, #7
 801255a:	2b00      	cmp	r3, #0
 801255c:	d053      	beq.n	8012606 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801255e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012562:	f003 0301 	and.w	r3, r3, #1
 8012566:	2b00      	cmp	r3, #0
 8012568:	d011      	beq.n	801258e <UART_RxISR_8BIT_FIFOEN+0xca>
 801256a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012572:	2b00      	cmp	r3, #0
 8012574:	d00b      	beq.n	801258e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	2201      	movs	r2, #1
 801257c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012584:	f043 0201 	orr.w	r2, r3, #1
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801258e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012592:	f003 0302 	and.w	r3, r3, #2
 8012596:	2b00      	cmp	r3, #0
 8012598:	d011      	beq.n	80125be <UART_RxISR_8BIT_FIFOEN+0xfa>
 801259a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801259e:	f003 0301 	and.w	r3, r3, #1
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00b      	beq.n	80125be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2202      	movs	r2, #2
 80125ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125b4:	f043 0204 	orr.w	r2, r3, #4
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80125c2:	f003 0304 	and.w	r3, r3, #4
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d011      	beq.n	80125ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80125ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80125ce:	f003 0301 	and.w	r3, r3, #1
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d00b      	beq.n	80125ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2204      	movs	r2, #4
 80125dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e4:	f043 0202 	orr.w	r2, r3, #2
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d006      	beq.n	8012606 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f7fe fbcf 	bl	8010d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2200      	movs	r2, #0
 8012602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801260c:	b29b      	uxth	r3, r3
 801260e:	2b00      	cmp	r3, #0
 8012610:	f040 80a0 	bne.w	8012754 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801261c:	e853 3f00 	ldrex	r3, [r3]
 8012620:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	461a      	mov	r2, r3
 8012632:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012636:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012638:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801263a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801263c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801263e:	e841 2300 	strex	r3, r2, [r1]
 8012642:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012646:	2b00      	cmp	r3, #0
 8012648:	d1e4      	bne.n	8012614 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	3308      	adds	r3, #8
 8012650:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012654:	e853 3f00 	ldrex	r3, [r3]
 8012658:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801265a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801265c:	4b6e      	ldr	r3, [pc, #440]	; (8012818 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801265e:	4013      	ands	r3, r2
 8012660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	3308      	adds	r3, #8
 801266a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801266e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012670:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012672:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012674:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012676:	e841 2300 	strex	r3, r2, [r1]
 801267a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801267c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1e3      	bne.n	801264a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2220      	movs	r2, #32
 8012686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	4a60      	ldr	r2, [pc, #384]	; (801281c <UART_RxISR_8BIT_FIFOEN+0x358>)
 801269c:	4293      	cmp	r3, r2
 801269e:	d021      	beq.n	80126e4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d01a      	beq.n	80126e4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126b6:	e853 3f00 	ldrex	r3, [r3]
 80126ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80126bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80126c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	461a      	mov	r2, r3
 80126cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80126d0:	657b      	str	r3, [r7, #84]	; 0x54
 80126d2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80126d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80126d8:	e841 2300 	strex	r3, r2, [r1]
 80126dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80126de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d1e4      	bne.n	80126ae <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d130      	bne.n	801274e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2200      	movs	r2, #0
 80126f0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126fa:	e853 3f00 	ldrex	r3, [r3]
 80126fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012702:	f023 0310 	bic.w	r3, r3, #16
 8012706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	461a      	mov	r2, r3
 8012710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012714:	643b      	str	r3, [r7, #64]	; 0x40
 8012716:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801271a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801271c:	e841 2300 	strex	r3, r2, [r1]
 8012720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1e4      	bne.n	80126f2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	69db      	ldr	r3, [r3, #28]
 801272e:	f003 0310 	and.w	r3, r3, #16
 8012732:	2b10      	cmp	r3, #16
 8012734:	d103      	bne.n	801273e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	2210      	movs	r2, #16
 801273c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012744:	4619      	mov	r1, r3
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7fe fb32 	bl	8010db0 <HAL_UARTEx_RxEventCallback>
 801274c:	e002      	b.n	8012754 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ed ff92 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012754:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012758:	2b00      	cmp	r3, #0
 801275a:	d006      	beq.n	801276a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801275c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012760:	f003 0320 	and.w	r3, r3, #32
 8012764:	2b00      	cmp	r3, #0
 8012766:	f47f aed1 	bne.w	801250c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012770:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012774:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012778:	2b00      	cmp	r3, #0
 801277a:	d049      	beq.n	8012810 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012782:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012786:	429a      	cmp	r2, r3
 8012788:	d242      	bcs.n	8012810 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	3308      	adds	r3, #8
 8012790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012792:	6a3b      	ldr	r3, [r7, #32]
 8012794:	e853 3f00 	ldrex	r3, [r3]
 8012798:	61fb      	str	r3, [r7, #28]
   return(result);
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80127a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	3308      	adds	r3, #8
 80127aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80127ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80127b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80127b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127b6:	e841 2300 	strex	r3, r2, [r1]
 80127ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80127bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d1e3      	bne.n	801278a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4a16      	ldr	r2, [pc, #88]	; (8012820 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80127c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	e853 3f00 	ldrex	r3, [r3]
 80127d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	f043 0320 	orr.w	r3, r3, #32
 80127dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	461a      	mov	r2, r3
 80127e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127ea:	61bb      	str	r3, [r7, #24]
 80127ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ee:	6979      	ldr	r1, [r7, #20]
 80127f0:	69ba      	ldr	r2, [r7, #24]
 80127f2:	e841 2300 	strex	r3, r2, [r1]
 80127f6:	613b      	str	r3, [r7, #16]
   return(result);
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d1e4      	bne.n	80127c8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80127fe:	e007      	b.n	8012810 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	699a      	ldr	r2, [r3, #24]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	f042 0208 	orr.w	r2, r2, #8
 801280e:	619a      	str	r2, [r3, #24]
}
 8012810:	bf00      	nop
 8012812:	37b0      	adds	r7, #176	; 0xb0
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	effffffe 	.word	0xeffffffe
 801281c:	58000c00 	.word	0x58000c00
 8012820:	08012155 	.word	0x08012155

08012824 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b0ae      	sub	sp, #184	; 0xb8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012832:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	69db      	ldr	r3, [r3, #28]
 801283c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801285a:	2b22      	cmp	r3, #34	; 0x22
 801285c:	f040 8184 	bne.w	8012b68 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012866:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801286a:	e127      	b.n	8012abc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012872:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801287a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801287e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012882:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012886:	4013      	ands	r3, r2
 8012888:	b29a      	uxth	r2, r3
 801288a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801288e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012894:	1c9a      	adds	r2, r3, #2
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	3b01      	subs	r3, #1
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	69db      	ldr	r3, [r3, #28]
 80128b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80128b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80128ba:	f003 0307 	and.w	r3, r3, #7
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d053      	beq.n	801296a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80128c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80128c6:	f003 0301 	and.w	r3, r3, #1
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d011      	beq.n	80128f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80128ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00b      	beq.n	80128f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2201      	movs	r2, #1
 80128e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128e8:	f043 0201 	orr.w	r2, r3, #1
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80128f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80128f6:	f003 0302 	and.w	r3, r3, #2
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d011      	beq.n	8012922 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80128fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012902:	f003 0301 	and.w	r3, r3, #1
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00b      	beq.n	8012922 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2202      	movs	r2, #2
 8012910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012918:	f043 0204 	orr.w	r2, r3, #4
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012926:	f003 0304 	and.w	r3, r3, #4
 801292a:	2b00      	cmp	r3, #0
 801292c:	d011      	beq.n	8012952 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801292e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012932:	f003 0301 	and.w	r3, r3, #1
 8012936:	2b00      	cmp	r3, #0
 8012938:	d00b      	beq.n	8012952 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2204      	movs	r2, #4
 8012940:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012948:	f043 0202 	orr.w	r2, r3, #2
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012958:	2b00      	cmp	r3, #0
 801295a:	d006      	beq.n	801296a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f7fe fa1d 	bl	8010d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2200      	movs	r2, #0
 8012966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012970:	b29b      	uxth	r3, r3
 8012972:	2b00      	cmp	r3, #0
 8012974:	f040 80a2 	bne.w	8012abc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012980:	e853 3f00 	ldrex	r3, [r3]
 8012984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801298c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	461a      	mov	r2, r3
 8012996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801299a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801299e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80129a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80129a6:	e841 2300 	strex	r3, r2, [r1]
 80129aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80129ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d1e2      	bne.n	8012978 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	3308      	adds	r3, #8
 80129b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129bc:	e853 3f00 	ldrex	r3, [r3]
 80129c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80129c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80129c4:	4b6e      	ldr	r3, [pc, #440]	; (8012b80 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80129c6:	4013      	ands	r3, r2
 80129c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	3308      	adds	r3, #8
 80129d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80129d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80129d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80129dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80129de:	e841 2300 	strex	r3, r2, [r1]
 80129e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80129e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d1e3      	bne.n	80129b2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2220      	movs	r2, #32
 80129ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2200      	movs	r2, #0
 80129f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4a60      	ldr	r2, [pc, #384]	; (8012b84 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d021      	beq.n	8012a4c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d01a      	beq.n	8012a4c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a1e:	e853 3f00 	ldrex	r3, [r3]
 8012a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	461a      	mov	r2, r3
 8012a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8012a3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a40:	e841 2300 	strex	r3, r2, [r1]
 8012a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d1e4      	bne.n	8012a16 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	d130      	bne.n	8012ab6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2200      	movs	r2, #0
 8012a58:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	e853 3f00 	ldrex	r3, [r3]
 8012a66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a6a:	f023 0310 	bic.w	r3, r3, #16
 8012a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	461a      	mov	r2, r3
 8012a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8012a7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a84:	e841 2300 	strex	r3, r2, [r1]
 8012a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d1e4      	bne.n	8012a5a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	69db      	ldr	r3, [r3, #28]
 8012a96:	f003 0310 	and.w	r3, r3, #16
 8012a9a:	2b10      	cmp	r3, #16
 8012a9c:	d103      	bne.n	8012aa6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2210      	movs	r2, #16
 8012aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012aac:	4619      	mov	r1, r3
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7fe f97e 	bl	8010db0 <HAL_UARTEx_RxEventCallback>
 8012ab4:	e002      	b.n	8012abc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f7ed fdde 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012abc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d006      	beq.n	8012ad2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012ac4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012ac8:	f003 0320 	and.w	r3, r3, #32
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	f47f aecd 	bne.w	801286c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ad8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012adc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d049      	beq.n	8012b78 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012aea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d242      	bcs.n	8012b78 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	3308      	adds	r3, #8
 8012af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afc:	e853 3f00 	ldrex	r3, [r3]
 8012b00:	623b      	str	r3, [r7, #32]
   return(result);
 8012b02:	6a3b      	ldr	r3, [r7, #32]
 8012b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	3308      	adds	r3, #8
 8012b12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012b16:	633a      	str	r2, [r7, #48]	; 0x30
 8012b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b1e:	e841 2300 	strex	r3, r2, [r1]
 8012b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1e3      	bne.n	8012af2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4a16      	ldr	r2, [pc, #88]	; (8012b88 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012b2e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	e853 3f00 	ldrex	r3, [r3]
 8012b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	f043 0320 	orr.w	r3, r3, #32
 8012b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b52:	61fb      	str	r3, [r7, #28]
 8012b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b56:	69b9      	ldr	r1, [r7, #24]
 8012b58:	69fa      	ldr	r2, [r7, #28]
 8012b5a:	e841 2300 	strex	r3, r2, [r1]
 8012b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d1e4      	bne.n	8012b30 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012b66:	e007      	b.n	8012b78 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	699a      	ldr	r2, [r3, #24]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f042 0208 	orr.w	r2, r2, #8
 8012b76:	619a      	str	r2, [r3, #24]
}
 8012b78:	bf00      	nop
 8012b7a:	37b8      	adds	r7, #184	; 0xb8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	effffffe 	.word	0xeffffffe
 8012b84:	58000c00 	.word	0x58000c00
 8012b88:	0801230d 	.word	0x0801230d

08012b8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012b94:	bf00      	nop
 8012b96:	370c      	adds	r7, #12
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9e:	4770      	bx	lr

08012ba0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012ba0:	b480      	push	{r7}
 8012ba2:	b083      	sub	sp, #12
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012ba8:	bf00      	nop
 8012baa:	370c      	adds	r7, #12
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr

08012bb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b083      	sub	sp, #12
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012bbc:	bf00      	nop
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr

08012bc8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b089      	sub	sp, #36	; 0x24
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d101      	bne.n	8012bde <HAL_UARTEx_EnableStopMode+0x16>
 8012bda:	2302      	movs	r3, #2
 8012bdc:	e021      	b.n	8012c22 <HAL_UARTEx_EnableStopMode+0x5a>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2201      	movs	r2, #1
 8012be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	e853 3f00 	ldrex	r3, [r3]
 8012bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	f043 0302 	orr.w	r3, r3, #2
 8012bfa:	61fb      	str	r3, [r7, #28]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	461a      	mov	r2, r3
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	61bb      	str	r3, [r7, #24]
 8012c06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c08:	6979      	ldr	r1, [r7, #20]
 8012c0a:	69ba      	ldr	r2, [r7, #24]
 8012c0c:	e841 2300 	strex	r3, r2, [r1]
 8012c10:	613b      	str	r3, [r7, #16]
   return(result);
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d1e6      	bne.n	8012be6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c20:	2300      	movs	r3, #0
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3724      	adds	r7, #36	; 0x24
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr

08012c2e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012c2e:	b580      	push	{r7, lr}
 8012c30:	b084      	sub	sp, #16
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d101      	bne.n	8012c44 <HAL_UARTEx_EnableFifoMode+0x16>
 8012c40:	2302      	movs	r3, #2
 8012c42:	e02b      	b.n	8012c9c <HAL_UARTEx_EnableFifoMode+0x6e>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2201      	movs	r2, #1
 8012c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2224      	movs	r2, #36	; 0x24
 8012c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f022 0201 	bic.w	r2, r2, #1
 8012c6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012c72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012c7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 f8c3 	bl	8012e10 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2220      	movs	r2, #32
 8012c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2200      	movs	r2, #0
 8012c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c9a:	2300      	movs	r3, #0
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3710      	adds	r7, #16
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b085      	sub	sp, #20
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d101      	bne.n	8012cba <HAL_UARTEx_DisableFifoMode+0x16>
 8012cb6:	2302      	movs	r3, #2
 8012cb8:	e027      	b.n	8012d0a <HAL_UARTEx_DisableFifoMode+0x66>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2224      	movs	r2, #36	; 0x24
 8012cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f022 0201 	bic.w	r2, r2, #1
 8012ce0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012ce8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2200      	movs	r2, #0
 8012cee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	68fa      	ldr	r2, [r7, #12]
 8012cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2220      	movs	r2, #32
 8012cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2200      	movs	r2, #0
 8012d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d16:	b580      	push	{r7, lr}
 8012d18:	b084      	sub	sp, #16
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
 8012d1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d26:	2b01      	cmp	r3, #1
 8012d28:	d101      	bne.n	8012d2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012d2a:	2302      	movs	r3, #2
 8012d2c:	e02d      	b.n	8012d8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2201      	movs	r2, #1
 8012d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2224      	movs	r2, #36	; 0x24
 8012d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f022 0201 	bic.w	r2, r2, #1
 8012d54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	689b      	ldr	r3, [r3, #8]
 8012d5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	683a      	ldr	r2, [r7, #0]
 8012d66:	430a      	orrs	r2, r1
 8012d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 f850 	bl	8012e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	68fa      	ldr	r2, [r7, #12]
 8012d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2220      	movs	r2, #32
 8012d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d88:	2300      	movs	r3, #0
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3710      	adds	r7, #16
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}

08012d92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d92:	b580      	push	{r7, lr}
 8012d94:	b084      	sub	sp, #16
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	6078      	str	r0, [r7, #4]
 8012d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d101      	bne.n	8012daa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012da6:	2302      	movs	r3, #2
 8012da8:	e02d      	b.n	8012e06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2201      	movs	r2, #1
 8012dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2224      	movs	r2, #36	; 0x24
 8012db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f022 0201 	bic.w	r2, r2, #1
 8012dd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	683a      	ldr	r2, [r7, #0]
 8012de2:	430a      	orrs	r2, r1
 8012de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f000 f812 	bl	8012e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2220      	movs	r2, #32
 8012df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3710      	adds	r7, #16
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
	...

08012e10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b085      	sub	sp, #20
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d108      	bne.n	8012e32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2201      	movs	r2, #1
 8012e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012e30:	e031      	b.n	8012e96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012e32:	2310      	movs	r3, #16
 8012e34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012e36:	2310      	movs	r3, #16
 8012e38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	689b      	ldr	r3, [r3, #8]
 8012e40:	0e5b      	lsrs	r3, r3, #25
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	f003 0307 	and.w	r3, r3, #7
 8012e48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	689b      	ldr	r3, [r3, #8]
 8012e50:	0f5b      	lsrs	r3, r3, #29
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	f003 0307 	and.w	r3, r3, #7
 8012e58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e5a:	7bbb      	ldrb	r3, [r7, #14]
 8012e5c:	7b3a      	ldrb	r2, [r7, #12]
 8012e5e:	4911      	ldr	r1, [pc, #68]	; (8012ea4 <UARTEx_SetNbDataToProcess+0x94>)
 8012e60:	5c8a      	ldrb	r2, [r1, r2]
 8012e62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012e66:	7b3a      	ldrb	r2, [r7, #12]
 8012e68:	490f      	ldr	r1, [pc, #60]	; (8012ea8 <UARTEx_SetNbDataToProcess+0x98>)
 8012e6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e78:	7bfb      	ldrb	r3, [r7, #15]
 8012e7a:	7b7a      	ldrb	r2, [r7, #13]
 8012e7c:	4909      	ldr	r1, [pc, #36]	; (8012ea4 <UARTEx_SetNbDataToProcess+0x94>)
 8012e7e:	5c8a      	ldrb	r2, [r1, r2]
 8012e80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012e84:	7b7a      	ldrb	r2, [r7, #13]
 8012e86:	4908      	ldr	r1, [pc, #32]	; (8012ea8 <UARTEx_SetNbDataToProcess+0x98>)
 8012e88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e8e:	b29a      	uxth	r2, r3
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012e96:	bf00      	nop
 8012e98:	3714      	adds	r7, #20
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	0801788c 	.word	0x0801788c
 8012ea8:	08017894 	.word	0x08017894

08012eac <__NVIC_SetPriority>:
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	6039      	str	r1, [r7, #0]
 8012eb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	db0a      	blt.n	8012ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	b2da      	uxtb	r2, r3
 8012ec4:	490c      	ldr	r1, [pc, #48]	; (8012ef8 <__NVIC_SetPriority+0x4c>)
 8012ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012eca:	0112      	lsls	r2, r2, #4
 8012ecc:	b2d2      	uxtb	r2, r2
 8012ece:	440b      	add	r3, r1
 8012ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012ed4:	e00a      	b.n	8012eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	b2da      	uxtb	r2, r3
 8012eda:	4908      	ldr	r1, [pc, #32]	; (8012efc <__NVIC_SetPriority+0x50>)
 8012edc:	88fb      	ldrh	r3, [r7, #6]
 8012ede:	f003 030f 	and.w	r3, r3, #15
 8012ee2:	3b04      	subs	r3, #4
 8012ee4:	0112      	lsls	r2, r2, #4
 8012ee6:	b2d2      	uxtb	r2, r2
 8012ee8:	440b      	add	r3, r1
 8012eea:	761a      	strb	r2, [r3, #24]
}
 8012eec:	bf00      	nop
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	e000e100 	.word	0xe000e100
 8012efc:	e000ed00 	.word	0xe000ed00

08012f00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012f00:	b580      	push	{r7, lr}
 8012f02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012f04:	4b05      	ldr	r3, [pc, #20]	; (8012f1c <SysTick_Handler+0x1c>)
 8012f06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012f08:	f002 fc92 	bl	8015830 <xTaskGetSchedulerState>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d001      	beq.n	8012f16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012f12:	f003 fab1 	bl	8016478 <xPortSysTickHandler>
  }
}
 8012f16:	bf00      	nop
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	e000e010 	.word	0xe000e010

08012f20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012f20:	b580      	push	{r7, lr}
 8012f22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012f24:	2100      	movs	r1, #0
 8012f26:	f06f 0004 	mvn.w	r0, #4
 8012f2a:	f7ff ffbf 	bl	8012eac <__NVIC_SetPriority>
#endif
}
 8012f2e:	bf00      	nop
 8012f30:	bd80      	pop	{r7, pc}
	...

08012f34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012f34:	b480      	push	{r7}
 8012f36:	b083      	sub	sp, #12
 8012f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f3a:	f3ef 8305 	mrs	r3, IPSR
 8012f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8012f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d003      	beq.n	8012f4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012f46:	f06f 0305 	mvn.w	r3, #5
 8012f4a:	607b      	str	r3, [r7, #4]
 8012f4c:	e00c      	b.n	8012f68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012f4e:	4b0a      	ldr	r3, [pc, #40]	; (8012f78 <osKernelInitialize+0x44>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d105      	bne.n	8012f62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012f56:	4b08      	ldr	r3, [pc, #32]	; (8012f78 <osKernelInitialize+0x44>)
 8012f58:	2201      	movs	r2, #1
 8012f5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	607b      	str	r3, [r7, #4]
 8012f60:	e002      	b.n	8012f68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012f68:	687b      	ldr	r3, [r7, #4]
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	370c      	adds	r7, #12
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop
 8012f78:	240010e8 	.word	0x240010e8

08012f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f82:	f3ef 8305 	mrs	r3, IPSR
 8012f86:	603b      	str	r3, [r7, #0]
  return(result);
 8012f88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d003      	beq.n	8012f96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012f8e:	f06f 0305 	mvn.w	r3, #5
 8012f92:	607b      	str	r3, [r7, #4]
 8012f94:	e010      	b.n	8012fb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012f96:	4b0b      	ldr	r3, [pc, #44]	; (8012fc4 <osKernelStart+0x48>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d109      	bne.n	8012fb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012f9e:	f7ff ffbf 	bl	8012f20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012fa2:	4b08      	ldr	r3, [pc, #32]	; (8012fc4 <osKernelStart+0x48>)
 8012fa4:	2202      	movs	r2, #2
 8012fa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012fa8:	f001 ff54 	bl	8014e54 <vTaskStartScheduler>
      stat = osOK;
 8012fac:	2300      	movs	r3, #0
 8012fae:	607b      	str	r3, [r7, #4]
 8012fb0:	e002      	b.n	8012fb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012fb8:	687b      	ldr	r3, [r7, #4]
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	240010e8 	.word	0x240010e8

08012fc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b08e      	sub	sp, #56	; 0x38
 8012fcc:	af04      	add	r7, sp, #16
 8012fce:	60f8      	str	r0, [r7, #12]
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fd8:	f3ef 8305 	mrs	r3, IPSR
 8012fdc:	617b      	str	r3, [r7, #20]
  return(result);
 8012fde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d17e      	bne.n	80130e2 <osThreadNew+0x11a>
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d07b      	beq.n	80130e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012fea:	2380      	movs	r3, #128	; 0x80
 8012fec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012fee:	2318      	movs	r3, #24
 8012ff0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d045      	beq.n	801308e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d002      	beq.n	8013010 <osThreadNew+0x48>
        name = attr->name;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	699b      	ldr	r3, [r3, #24]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	699b      	ldr	r3, [r3, #24]
 801301c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d008      	beq.n	8013036 <osThreadNew+0x6e>
 8013024:	69fb      	ldr	r3, [r7, #28]
 8013026:	2b38      	cmp	r3, #56	; 0x38
 8013028:	d805      	bhi.n	8013036 <osThreadNew+0x6e>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	f003 0301 	and.w	r3, r3, #1
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <osThreadNew+0x72>
        return (NULL);
 8013036:	2300      	movs	r3, #0
 8013038:	e054      	b.n	80130e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	695b      	ldr	r3, [r3, #20]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d003      	beq.n	801304a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	695b      	ldr	r3, [r3, #20]
 8013046:	089b      	lsrs	r3, r3, #2
 8013048:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	689b      	ldr	r3, [r3, #8]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d00e      	beq.n	8013070 <osThreadNew+0xa8>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	2b5b      	cmp	r3, #91	; 0x5b
 8013058:	d90a      	bls.n	8013070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801305e:	2b00      	cmp	r3, #0
 8013060:	d006      	beq.n	8013070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	695b      	ldr	r3, [r3, #20]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d002      	beq.n	8013070 <osThreadNew+0xa8>
        mem = 1;
 801306a:	2301      	movs	r3, #1
 801306c:	61bb      	str	r3, [r7, #24]
 801306e:	e010      	b.n	8013092 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	689b      	ldr	r3, [r3, #8]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d10c      	bne.n	8013092 <osThreadNew+0xca>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d108      	bne.n	8013092 <osThreadNew+0xca>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	691b      	ldr	r3, [r3, #16]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d104      	bne.n	8013092 <osThreadNew+0xca>
          mem = 0;
 8013088:	2300      	movs	r3, #0
 801308a:	61bb      	str	r3, [r7, #24]
 801308c:	e001      	b.n	8013092 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801308e:	2300      	movs	r3, #0
 8013090:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	2b01      	cmp	r3, #1
 8013096:	d110      	bne.n	80130ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80130a0:	9202      	str	r2, [sp, #8]
 80130a2:	9301      	str	r3, [sp, #4]
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	6a3a      	ldr	r2, [r7, #32]
 80130ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f001 fbe0 	bl	8014874 <xTaskCreateStatic>
 80130b4:	4603      	mov	r3, r0
 80130b6:	613b      	str	r3, [r7, #16]
 80130b8:	e013      	b.n	80130e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d110      	bne.n	80130e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80130c0:	6a3b      	ldr	r3, [r7, #32]
 80130c2:	b29a      	uxth	r2, r3
 80130c4:	f107 0310 	add.w	r3, r7, #16
 80130c8:	9301      	str	r3, [sp, #4]
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	9300      	str	r3, [sp, #0]
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130d2:	68f8      	ldr	r0, [r7, #12]
 80130d4:	f001 fc2b 	bl	801492e <xTaskCreate>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d001      	beq.n	80130e2 <osThreadNew+0x11a>
            hTask = NULL;
 80130de:	2300      	movs	r3, #0
 80130e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80130e2:	693b      	ldr	r3, [r7, #16]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3728      	adds	r7, #40	; 0x28
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130f2:	f3ef 8305 	mrs	r3, IPSR
 80130f6:	603b      	str	r3, [r7, #0]
  return(result);
 80130f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d003      	beq.n	8013106 <osThreadYield+0x1a>
    stat = osErrorISR;
 80130fe:	f06f 0305 	mvn.w	r3, #5
 8013102:	607b      	str	r3, [r7, #4]
 8013104:	e009      	b.n	801311a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8013106:	2300      	movs	r3, #0
 8013108:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801310a:	4b07      	ldr	r3, [pc, #28]	; (8013128 <osThreadYield+0x3c>)
 801310c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	f3bf 8f4f 	dsb	sy
 8013116:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801311a:	687b      	ldr	r3, [r7, #4]
}
 801311c:	4618      	mov	r0, r3
 801311e:	370c      	adds	r7, #12
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr
 8013128:	e000ed04 	.word	0xe000ed04

0801312c <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 801312c:	b580      	push	{r7, lr}
 801312e:	b086      	sub	sp, #24
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013138:	f3ef 8305 	mrs	r3, IPSR
 801313c:	60fb      	str	r3, [r7, #12]
  return(result);
 801313e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013140:	2b00      	cmp	r3, #0
 8013142:	d003      	beq.n	801314c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8013144:	f06f 0305 	mvn.w	r3, #5
 8013148:	617b      	str	r3, [r7, #20]
 801314a:	e00b      	b.n	8013164 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d103      	bne.n	801315a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8013152:	f06f 0303 	mvn.w	r3, #3
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	e004      	b.n	8013164 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801315a:	2300      	movs	r3, #0
 801315c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801315e:	6938      	ldr	r0, [r7, #16]
 8013160:	f001 fd5e 	bl	8014c20 <vTaskSuspend>
  }

  return (stat);
 8013164:	697b      	ldr	r3, [r7, #20]
}
 8013166:	4618      	mov	r0, r3
 8013168:	3718      	adds	r7, #24
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801316e:	b580      	push	{r7, lr}
 8013170:	b084      	sub	sp, #16
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013176:	f3ef 8305 	mrs	r3, IPSR
 801317a:	60bb      	str	r3, [r7, #8]
  return(result);
 801317c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801317e:	2b00      	cmp	r3, #0
 8013180:	d003      	beq.n	801318a <osDelay+0x1c>
    stat = osErrorISR;
 8013182:	f06f 0305 	mvn.w	r3, #5
 8013186:	60fb      	str	r3, [r7, #12]
 8013188:	e007      	b.n	801319a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801318a:	2300      	movs	r3, #0
 801318c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d002      	beq.n	801319a <osDelay+0x2c>
      vTaskDelay(ticks);
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f001 fd0f 	bl	8014bb8 <vTaskDelay>
    }
  }

  return (stat);
 801319a:	68fb      	ldr	r3, [r7, #12]
}
 801319c:	4618      	mov	r0, r3
 801319e:	3710      	adds	r7, #16
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b086      	sub	sp, #24
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80131ac:	2300      	movs	r3, #0
 80131ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131b0:	f3ef 8305 	mrs	r3, IPSR
 80131b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80131b6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d12d      	bne.n	8013218 <osEventFlagsNew+0x74>
    mem = -1;
 80131bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131c0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d015      	beq.n	80131f4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	689b      	ldr	r3, [r3, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d006      	beq.n	80131de <osEventFlagsNew+0x3a>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	2b1f      	cmp	r3, #31
 80131d6:	d902      	bls.n	80131de <osEventFlagsNew+0x3a>
        mem = 1;
 80131d8:	2301      	movs	r3, #1
 80131da:	613b      	str	r3, [r7, #16]
 80131dc:	e00c      	b.n	80131f8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	689b      	ldr	r3, [r3, #8]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d108      	bne.n	80131f8 <osEventFlagsNew+0x54>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	68db      	ldr	r3, [r3, #12]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d104      	bne.n	80131f8 <osEventFlagsNew+0x54>
          mem = 0;
 80131ee:	2300      	movs	r3, #0
 80131f0:	613b      	str	r3, [r7, #16]
 80131f2:	e001      	b.n	80131f8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80131f4:	2300      	movs	r3, #0
 80131f6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	2b01      	cmp	r3, #1
 80131fc:	d106      	bne.n	801320c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	689b      	ldr	r3, [r3, #8]
 8013202:	4618      	mov	r0, r3
 8013204:	f000 fa70 	bl	80136e8 <xEventGroupCreateStatic>
 8013208:	6178      	str	r0, [r7, #20]
 801320a:	e005      	b.n	8013218 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d102      	bne.n	8013218 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013212:	f000 faa0 	bl	8013756 <xEventGroupCreate>
 8013216:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013218:	697b      	ldr	r3, [r7, #20]
}
 801321a:	4618      	mov	r0, r3
 801321c:	3718      	adds	r7, #24
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
	...

08013224 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013224:	b580      	push	{r7, lr}
 8013226:	b086      	sub	sp, #24
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d004      	beq.n	8013242 <osEventFlagsSet+0x1e>
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801323e:	2b00      	cmp	r3, #0
 8013240:	d003      	beq.n	801324a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013242:	f06f 0303 	mvn.w	r3, #3
 8013246:	617b      	str	r3, [r7, #20]
 8013248:	e028      	b.n	801329c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801324a:	f3ef 8305 	mrs	r3, IPSR
 801324e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013250:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013252:	2b00      	cmp	r3, #0
 8013254:	d01d      	beq.n	8013292 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8013256:	2300      	movs	r3, #0
 8013258:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801325a:	f107 0308 	add.w	r3, r7, #8
 801325e:	461a      	mov	r2, r3
 8013260:	6839      	ldr	r1, [r7, #0]
 8013262:	6938      	ldr	r0, [r7, #16]
 8013264:	f000 fc98 	bl	8013b98 <xEventGroupSetBitsFromISR>
 8013268:	4603      	mov	r3, r0
 801326a:	2b00      	cmp	r3, #0
 801326c:	d103      	bne.n	8013276 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801326e:	f06f 0302 	mvn.w	r3, #2
 8013272:	617b      	str	r3, [r7, #20]
 8013274:	e012      	b.n	801329c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d00d      	beq.n	801329c <osEventFlagsSet+0x78>
 8013280:	4b09      	ldr	r3, [pc, #36]	; (80132a8 <osEventFlagsSet+0x84>)
 8013282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013286:	601a      	str	r2, [r3, #0]
 8013288:	f3bf 8f4f 	dsb	sy
 801328c:	f3bf 8f6f 	isb	sy
 8013290:	e004      	b.n	801329c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013292:	6839      	ldr	r1, [r7, #0]
 8013294:	6938      	ldr	r0, [r7, #16]
 8013296:	f000 fbb7 	bl	8013a08 <xEventGroupSetBits>
 801329a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801329c:	697b      	ldr	r3, [r7, #20]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3718      	adds	r7, #24
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	e000ed04 	.word	0xe000ed04

080132ac <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b086      	sub	sp, #24
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d004      	beq.n	80132ca <osEventFlagsClear+0x1e>
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d003      	beq.n	80132d2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80132ca:	f06f 0303 	mvn.w	r3, #3
 80132ce:	617b      	str	r3, [r7, #20]
 80132d0:	e019      	b.n	8013306 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132d2:	f3ef 8305 	mrs	r3, IPSR
 80132d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80132d8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00e      	beq.n	80132fc <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80132de:	6938      	ldr	r0, [r7, #16]
 80132e0:	f000 fb6e 	bl	80139c0 <xEventGroupGetBitsFromISR>
 80132e4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80132e6:	6839      	ldr	r1, [r7, #0]
 80132e8:	6938      	ldr	r0, [r7, #16]
 80132ea:	f000 fb55 	bl	8013998 <xEventGroupClearBitsFromISR>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d108      	bne.n	8013306 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80132f4:	f06f 0302 	mvn.w	r3, #2
 80132f8:	617b      	str	r3, [r7, #20]
 80132fa:	e004      	b.n	8013306 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80132fc:	6839      	ldr	r1, [r7, #0]
 80132fe:	6938      	ldr	r0, [r7, #16]
 8013300:	f000 fb12 	bl	8013928 <xEventGroupClearBits>
 8013304:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013306:	697b      	ldr	r3, [r7, #20]
}
 8013308:	4618      	mov	r0, r3
 801330a:	3718      	adds	r7, #24
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013310:	b580      	push	{r7, lr}
 8013312:	b086      	sub	sp, #24
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d102      	bne.n	8013328 <osEventFlagsGet+0x18>
    rflags = 0U;
 8013322:	2300      	movs	r3, #0
 8013324:	617b      	str	r3, [r7, #20]
 8013326:	e00f      	b.n	8013348 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013328:	f3ef 8305 	mrs	r3, IPSR
 801332c:	60fb      	str	r3, [r7, #12]
  return(result);
 801332e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013330:	2b00      	cmp	r3, #0
 8013332:	d004      	beq.n	801333e <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013334:	6938      	ldr	r0, [r7, #16]
 8013336:	f000 fb43 	bl	80139c0 <xEventGroupGetBitsFromISR>
 801333a:	6178      	str	r0, [r7, #20]
 801333c:	e004      	b.n	8013348 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 801333e:	2100      	movs	r1, #0
 8013340:	6938      	ldr	r0, [r7, #16]
 8013342:	f000 faf1 	bl	8013928 <xEventGroupClearBits>
 8013346:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013348:	697b      	ldr	r3, [r7, #20]
}
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013352:	b580      	push	{r7, lr}
 8013354:	b08c      	sub	sp, #48	; 0x30
 8013356:	af02      	add	r7, sp, #8
 8013358:	60f8      	str	r0, [r7, #12]
 801335a:	60b9      	str	r1, [r7, #8]
 801335c:	607a      	str	r2, [r7, #4]
 801335e:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d004      	beq.n	8013374 <osEventFlagsWait+0x22>
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013370:	2b00      	cmp	r3, #0
 8013372:	d003      	beq.n	801337c <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013374:	f06f 0303 	mvn.w	r3, #3
 8013378:	61fb      	str	r3, [r7, #28]
 801337a:	e04b      	b.n	8013414 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801337c:	f3ef 8305 	mrs	r3, IPSR
 8013380:	617b      	str	r3, [r7, #20]
  return(result);
 8013382:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013384:	2b00      	cmp	r3, #0
 8013386:	d003      	beq.n	8013390 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8013388:	f06f 0305 	mvn.w	r3, #5
 801338c:	61fb      	str	r3, [r7, #28]
 801338e:	e041      	b.n	8013414 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f003 0301 	and.w	r3, r3, #1
 8013396:	2b00      	cmp	r3, #0
 8013398:	d002      	beq.n	80133a0 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801339a:	2301      	movs	r3, #1
 801339c:	627b      	str	r3, [r7, #36]	; 0x24
 801339e:	e001      	b.n	80133a4 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80133a0:	2300      	movs	r3, #0
 80133a2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f003 0302 	and.w	r3, r3, #2
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d002      	beq.n	80133b4 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80133ae:	2300      	movs	r3, #0
 80133b0:	623b      	str	r3, [r7, #32]
 80133b2:	e001      	b.n	80133b8 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80133b4:	2301      	movs	r3, #1
 80133b6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133be:	6a3a      	ldr	r2, [r7, #32]
 80133c0:	68b9      	ldr	r1, [r7, #8]
 80133c2:	69b8      	ldr	r0, [r7, #24]
 80133c4:	f000 f9e2 	bl	801378c <xEventGroupWaitBits>
 80133c8:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f003 0301 	and.w	r3, r3, #1
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d010      	beq.n	80133f6 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80133d4:	68ba      	ldr	r2, [r7, #8]
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	4013      	ands	r3, r2
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d019      	beq.n	8013414 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d003      	beq.n	80133ee <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80133e6:	f06f 0301 	mvn.w	r3, #1
 80133ea:	61fb      	str	r3, [r7, #28]
 80133ec:	e012      	b.n	8013414 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80133ee:	f06f 0302 	mvn.w	r3, #2
 80133f2:	61fb      	str	r3, [r7, #28]
 80133f4:	e00e      	b.n	8013414 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80133f6:	68ba      	ldr	r2, [r7, #8]
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	4013      	ands	r3, r2
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d109      	bne.n	8013414 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d003      	beq.n	801340e <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013406:	f06f 0301 	mvn.w	r3, #1
 801340a:	61fb      	str	r3, [r7, #28]
 801340c:	e002      	b.n	8013414 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801340e:	f06f 0302 	mvn.w	r3, #2
 8013412:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013414:	69fb      	ldr	r3, [r7, #28]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3728      	adds	r7, #40	; 0x28
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801341e:	b580      	push	{r7, lr}
 8013420:	b08a      	sub	sp, #40	; 0x28
 8013422:	af02      	add	r7, sp, #8
 8013424:	60f8      	str	r0, [r7, #12]
 8013426:	60b9      	str	r1, [r7, #8]
 8013428:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801342a:	2300      	movs	r3, #0
 801342c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801342e:	f3ef 8305 	mrs	r3, IPSR
 8013432:	613b      	str	r3, [r7, #16]
  return(result);
 8013434:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013436:	2b00      	cmp	r3, #0
 8013438:	d15f      	bne.n	80134fa <osMessageQueueNew+0xdc>
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d05c      	beq.n	80134fa <osMessageQueueNew+0xdc>
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d059      	beq.n	80134fa <osMessageQueueNew+0xdc>
    mem = -1;
 8013446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801344a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d029      	beq.n	80134a6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	689b      	ldr	r3, [r3, #8]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d012      	beq.n	8013480 <osMessageQueueNew+0x62>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	2b4f      	cmp	r3, #79	; 0x4f
 8013460:	d90e      	bls.n	8013480 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00a      	beq.n	8013480 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	695a      	ldr	r2, [r3, #20]
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	68b9      	ldr	r1, [r7, #8]
 8013472:	fb01 f303 	mul.w	r3, r1, r3
 8013476:	429a      	cmp	r2, r3
 8013478:	d302      	bcc.n	8013480 <osMessageQueueNew+0x62>
        mem = 1;
 801347a:	2301      	movs	r3, #1
 801347c:	61bb      	str	r3, [r7, #24]
 801347e:	e014      	b.n	80134aa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	689b      	ldr	r3, [r3, #8]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d110      	bne.n	80134aa <osMessageQueueNew+0x8c>
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	68db      	ldr	r3, [r3, #12]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d10c      	bne.n	80134aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013494:	2b00      	cmp	r3, #0
 8013496:	d108      	bne.n	80134aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	695b      	ldr	r3, [r3, #20]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d104      	bne.n	80134aa <osMessageQueueNew+0x8c>
          mem = 0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	61bb      	str	r3, [r7, #24]
 80134a4:	e001      	b.n	80134aa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80134a6:	2300      	movs	r3, #0
 80134a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d10b      	bne.n	80134c8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	691a      	ldr	r2, [r3, #16]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	2100      	movs	r1, #0
 80134ba:	9100      	str	r1, [sp, #0]
 80134bc:	68b9      	ldr	r1, [r7, #8]
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f000 fc9a 	bl	8013df8 <xQueueGenericCreateStatic>
 80134c4:	61f8      	str	r0, [r7, #28]
 80134c6:	e008      	b.n	80134da <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d105      	bne.n	80134da <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80134ce:	2200      	movs	r2, #0
 80134d0:	68b9      	ldr	r1, [r7, #8]
 80134d2:	68f8      	ldr	r0, [r7, #12]
 80134d4:	f000 fd08 	bl	8013ee8 <xQueueGenericCreate>
 80134d8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d00c      	beq.n	80134fa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d003      	beq.n	80134ee <osMessageQueueNew+0xd0>
        name = attr->name;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	617b      	str	r3, [r7, #20]
 80134ec:	e001      	b.n	80134f2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80134ee:	2300      	movs	r3, #0
 80134f0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80134f2:	6979      	ldr	r1, [r7, #20]
 80134f4:	69f8      	ldr	r0, [r7, #28]
 80134f6:	f001 f95f 	bl	80147b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80134fa:	69fb      	ldr	r3, [r7, #28]
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3720      	adds	r7, #32
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013504:	b580      	push	{r7, lr}
 8013506:	b088      	sub	sp, #32
 8013508:	af00      	add	r7, sp, #0
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	603b      	str	r3, [r7, #0]
 8013510:	4613      	mov	r3, r2
 8013512:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013518:	2300      	movs	r3, #0
 801351a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801351c:	f3ef 8305 	mrs	r3, IPSR
 8013520:	617b      	str	r3, [r7, #20]
  return(result);
 8013522:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013524:	2b00      	cmp	r3, #0
 8013526:	d028      	beq.n	801357a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d005      	beq.n	801353a <osMessageQueuePut+0x36>
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <osMessageQueuePut+0x36>
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d003      	beq.n	8013542 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801353a:	f06f 0303 	mvn.w	r3, #3
 801353e:	61fb      	str	r3, [r7, #28]
 8013540:	e038      	b.n	80135b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013542:	2300      	movs	r3, #0
 8013544:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013546:	f107 0210 	add.w	r2, r7, #16
 801354a:	2300      	movs	r3, #0
 801354c:	68b9      	ldr	r1, [r7, #8]
 801354e:	69b8      	ldr	r0, [r7, #24]
 8013550:	f000 fe26 	bl	80141a0 <xQueueGenericSendFromISR>
 8013554:	4603      	mov	r3, r0
 8013556:	2b01      	cmp	r3, #1
 8013558:	d003      	beq.n	8013562 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801355a:	f06f 0302 	mvn.w	r3, #2
 801355e:	61fb      	str	r3, [r7, #28]
 8013560:	e028      	b.n	80135b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d025      	beq.n	80135b4 <osMessageQueuePut+0xb0>
 8013568:	4b15      	ldr	r3, [pc, #84]	; (80135c0 <osMessageQueuePut+0xbc>)
 801356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801356e:	601a      	str	r2, [r3, #0]
 8013570:	f3bf 8f4f 	dsb	sy
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	e01c      	b.n	80135b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d002      	beq.n	8013586 <osMessageQueuePut+0x82>
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d103      	bne.n	801358e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8013586:	f06f 0303 	mvn.w	r3, #3
 801358a:	61fb      	str	r3, [r7, #28]
 801358c:	e012      	b.n	80135b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801358e:	2300      	movs	r3, #0
 8013590:	683a      	ldr	r2, [r7, #0]
 8013592:	68b9      	ldr	r1, [r7, #8]
 8013594:	69b8      	ldr	r0, [r7, #24]
 8013596:	f000 fd05 	bl	8013fa4 <xQueueGenericSend>
 801359a:	4603      	mov	r3, r0
 801359c:	2b01      	cmp	r3, #1
 801359e:	d009      	beq.n	80135b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d003      	beq.n	80135ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80135a6:	f06f 0301 	mvn.w	r3, #1
 80135aa:	61fb      	str	r3, [r7, #28]
 80135ac:	e002      	b.n	80135b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80135ae:	f06f 0302 	mvn.w	r3, #2
 80135b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80135b4:	69fb      	ldr	r3, [r7, #28]
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3720      	adds	r7, #32
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	e000ed04 	.word	0xe000ed04

080135c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b088      	sub	sp, #32
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80135d6:	2300      	movs	r3, #0
 80135d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135da:	f3ef 8305 	mrs	r3, IPSR
 80135de:	617b      	str	r3, [r7, #20]
  return(result);
 80135e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d028      	beq.n	8013638 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d005      	beq.n	80135f8 <osMessageQueueGet+0x34>
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d002      	beq.n	80135f8 <osMessageQueueGet+0x34>
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d003      	beq.n	8013600 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80135f8:	f06f 0303 	mvn.w	r3, #3
 80135fc:	61fb      	str	r3, [r7, #28]
 80135fe:	e037      	b.n	8013670 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013600:	2300      	movs	r3, #0
 8013602:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013604:	f107 0310 	add.w	r3, r7, #16
 8013608:	461a      	mov	r2, r3
 801360a:	68b9      	ldr	r1, [r7, #8]
 801360c:	69b8      	ldr	r0, [r7, #24]
 801360e:	f000 ff43 	bl	8014498 <xQueueReceiveFromISR>
 8013612:	4603      	mov	r3, r0
 8013614:	2b01      	cmp	r3, #1
 8013616:	d003      	beq.n	8013620 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013618:	f06f 0302 	mvn.w	r3, #2
 801361c:	61fb      	str	r3, [r7, #28]
 801361e:	e027      	b.n	8013670 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d024      	beq.n	8013670 <osMessageQueueGet+0xac>
 8013626:	4b15      	ldr	r3, [pc, #84]	; (801367c <osMessageQueueGet+0xb8>)
 8013628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	f3bf 8f6f 	isb	sy
 8013636:	e01b      	b.n	8013670 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d002      	beq.n	8013644 <osMessageQueueGet+0x80>
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d103      	bne.n	801364c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013644:	f06f 0303 	mvn.w	r3, #3
 8013648:	61fb      	str	r3, [r7, #28]
 801364a:	e011      	b.n	8013670 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801364c:	683a      	ldr	r2, [r7, #0]
 801364e:	68b9      	ldr	r1, [r7, #8]
 8013650:	69b8      	ldr	r0, [r7, #24]
 8013652:	f000 fe41 	bl	80142d8 <xQueueReceive>
 8013656:	4603      	mov	r3, r0
 8013658:	2b01      	cmp	r3, #1
 801365a:	d009      	beq.n	8013670 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d003      	beq.n	801366a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013662:	f06f 0301 	mvn.w	r3, #1
 8013666:	61fb      	str	r3, [r7, #28]
 8013668:	e002      	b.n	8013670 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801366a:	f06f 0302 	mvn.w	r3, #2
 801366e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013670:	69fb      	ldr	r3, [r7, #28]
}
 8013672:	4618      	mov	r0, r3
 8013674:	3720      	adds	r7, #32
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	e000ed04 	.word	0xe000ed04

08013680 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013680:	b480      	push	{r7}
 8013682:	b085      	sub	sp, #20
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	4a07      	ldr	r2, [pc, #28]	; (80136ac <vApplicationGetIdleTaskMemory+0x2c>)
 8013690:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	4a06      	ldr	r2, [pc, #24]	; (80136b0 <vApplicationGetIdleTaskMemory+0x30>)
 8013696:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2280      	movs	r2, #128	; 0x80
 801369c:	601a      	str	r2, [r3, #0]
}
 801369e:	bf00      	nop
 80136a0:	3714      	adds	r7, #20
 80136a2:	46bd      	mov	sp, r7
 80136a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	240010ec 	.word	0x240010ec
 80136b0:	24001148 	.word	0x24001148

080136b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80136b4:	b480      	push	{r7}
 80136b6:	b085      	sub	sp, #20
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	4a07      	ldr	r2, [pc, #28]	; (80136e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80136c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	4a06      	ldr	r2, [pc, #24]	; (80136e4 <vApplicationGetTimerTaskMemory+0x30>)
 80136ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80136d2:	601a      	str	r2, [r3, #0]
}
 80136d4:	bf00      	nop
 80136d6:	3714      	adds	r7, #20
 80136d8:	46bd      	mov	sp, r7
 80136da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136de:	4770      	bx	lr
 80136e0:	24001348 	.word	0x24001348
 80136e4:	240013a4 	.word	0x240013a4

080136e8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b086      	sub	sp, #24
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d10a      	bne.n	801370c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80136f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fa:	f383 8811 	msr	BASEPRI, r3
 80136fe:	f3bf 8f6f 	isb	sy
 8013702:	f3bf 8f4f 	dsb	sy
 8013706:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013708:	bf00      	nop
 801370a:	e7fe      	b.n	801370a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801370c:	2320      	movs	r3, #32
 801370e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	2b20      	cmp	r3, #32
 8013714:	d00a      	beq.n	801372c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371a:	f383 8811 	msr	BASEPRI, r3
 801371e:	f3bf 8f6f 	isb	sy
 8013722:	f3bf 8f4f 	dsb	sy
 8013726:	60fb      	str	r3, [r7, #12]
}
 8013728:	bf00      	nop
 801372a:	e7fe      	b.n	801372a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d00a      	beq.n	801374c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	2200      	movs	r2, #0
 801373a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	3304      	adds	r3, #4
 8013740:	4618      	mov	r0, r3
 8013742:	f000 fa3d 	bl	8013bc0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	2201      	movs	r2, #1
 801374a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801374c:	697b      	ldr	r3, [r7, #20]
	}
 801374e:	4618      	mov	r0, r3
 8013750:	3718      	adds	r7, #24
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013756:	b580      	push	{r7, lr}
 8013758:	b082      	sub	sp, #8
 801375a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801375c:	2020      	movs	r0, #32
 801375e:	f002 ff1b 	bl	8016598 <pvPortMalloc>
 8013762:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d00a      	beq.n	8013780 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2200      	movs	r2, #0
 801376e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	3304      	adds	r3, #4
 8013774:	4618      	mov	r0, r3
 8013776:	f000 fa23 	bl	8013bc0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2200      	movs	r2, #0
 801377e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013780:	687b      	ldr	r3, [r7, #4]
	}
 8013782:	4618      	mov	r0, r3
 8013784:	3708      	adds	r7, #8
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
	...

0801378c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b090      	sub	sp, #64	; 0x40
 8013790:	af00      	add	r7, sp, #0
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	60b9      	str	r1, [r7, #8]
 8013796:	607a      	str	r2, [r7, #4]
 8013798:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801379e:	2300      	movs	r3, #0
 80137a0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80137a2:	2300      	movs	r3, #0
 80137a4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d10a      	bne.n	80137c2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80137ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b0:	f383 8811 	msr	BASEPRI, r3
 80137b4:	f3bf 8f6f 	isb	sy
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	623b      	str	r3, [r7, #32]
}
 80137be:	bf00      	nop
 80137c0:	e7fe      	b.n	80137c0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d00a      	beq.n	80137e2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80137cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d0:	f383 8811 	msr	BASEPRI, r3
 80137d4:	f3bf 8f6f 	isb	sy
 80137d8:	f3bf 8f4f 	dsb	sy
 80137dc:	61fb      	str	r3, [r7, #28]
}
 80137de:	bf00      	nop
 80137e0:	e7fe      	b.n	80137e0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10a      	bne.n	80137fe <xEventGroupWaitBits+0x72>
	__asm volatile
 80137e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ec:	f383 8811 	msr	BASEPRI, r3
 80137f0:	f3bf 8f6f 	isb	sy
 80137f4:	f3bf 8f4f 	dsb	sy
 80137f8:	61bb      	str	r3, [r7, #24]
}
 80137fa:	bf00      	nop
 80137fc:	e7fe      	b.n	80137fc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137fe:	f002 f817 	bl	8015830 <xTaskGetSchedulerState>
 8013802:	4603      	mov	r3, r0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d102      	bne.n	801380e <xEventGroupWaitBits+0x82>
 8013808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801380a:	2b00      	cmp	r3, #0
 801380c:	d101      	bne.n	8013812 <xEventGroupWaitBits+0x86>
 801380e:	2301      	movs	r3, #1
 8013810:	e000      	b.n	8013814 <xEventGroupWaitBits+0x88>
 8013812:	2300      	movs	r3, #0
 8013814:	2b00      	cmp	r3, #0
 8013816:	d10a      	bne.n	801382e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381c:	f383 8811 	msr	BASEPRI, r3
 8013820:	f3bf 8f6f 	isb	sy
 8013824:	f3bf 8f4f 	dsb	sy
 8013828:	617b      	str	r3, [r7, #20]
}
 801382a:	bf00      	nop
 801382c:	e7fe      	b.n	801382c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801382e:	f001 fb77 	bl	8014f20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013838:	683a      	ldr	r2, [r7, #0]
 801383a:	68b9      	ldr	r1, [r7, #8]
 801383c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801383e:	f000 f988 	bl	8013b52 <prvTestWaitCondition>
 8013842:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013846:	2b00      	cmp	r3, #0
 8013848:	d00e      	beq.n	8013868 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801384e:	2300      	movs	r3, #0
 8013850:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d028      	beq.n	80138aa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	43db      	mvns	r3, r3
 8013860:	401a      	ands	r2, r3
 8013862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	e020      	b.n	80138aa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801386a:	2b00      	cmp	r3, #0
 801386c:	d104      	bne.n	8013878 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013870:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013872:	2301      	movs	r3, #1
 8013874:	633b      	str	r3, [r7, #48]	; 0x30
 8013876:	e018      	b.n	80138aa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013884:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d003      	beq.n	8013894 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013892:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013896:	1d18      	adds	r0, r3, #4
 8013898:	68ba      	ldr	r2, [r7, #8]
 801389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801389c:	4313      	orrs	r3, r2
 801389e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80138a0:	4619      	mov	r1, r3
 80138a2:	f001 fd3d 	bl	8015320 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80138a6:	2300      	movs	r3, #0
 80138a8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80138aa:	f001 fb47 	bl	8014f3c <xTaskResumeAll>
 80138ae:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80138b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d031      	beq.n	801391a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80138b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d107      	bne.n	80138cc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80138bc:	4b19      	ldr	r3, [pc, #100]	; (8013924 <xEventGroupWaitBits+0x198>)
 80138be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138c2:	601a      	str	r2, [r3, #0]
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80138cc:	f002 f83c 	bl	8015948 <uxTaskResetEventItemValue>
 80138d0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80138d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d11a      	bne.n	8013912 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80138dc:	f002 fd3a 	bl	8016354 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80138e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80138e6:	683a      	ldr	r2, [r7, #0]
 80138e8:	68b9      	ldr	r1, [r7, #8]
 80138ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80138ec:	f000 f931 	bl	8013b52 <prvTestWaitCondition>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d009      	beq.n	801390a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d006      	beq.n	801390a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80138fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	43db      	mvns	r3, r3
 8013904:	401a      	ands	r2, r3
 8013906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013908:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801390a:	2301      	movs	r3, #1
 801390c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801390e:	f002 fd51 	bl	80163b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013918:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801391c:	4618      	mov	r0, r3
 801391e:	3740      	adds	r7, #64	; 0x40
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	e000ed04 	.word	0xe000ed04

08013928 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b086      	sub	sp, #24
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d10a      	bne.n	8013952 <xEventGroupClearBits+0x2a>
	__asm volatile
 801393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013940:	f383 8811 	msr	BASEPRI, r3
 8013944:	f3bf 8f6f 	isb	sy
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	60fb      	str	r3, [r7, #12]
}
 801394e:	bf00      	nop
 8013950:	e7fe      	b.n	8013950 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00a      	beq.n	8013972 <xEventGroupClearBits+0x4a>
	__asm volatile
 801395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013960:	f383 8811 	msr	BASEPRI, r3
 8013964:	f3bf 8f6f 	isb	sy
 8013968:	f3bf 8f4f 	dsb	sy
 801396c:	60bb      	str	r3, [r7, #8]
}
 801396e:	bf00      	nop
 8013970:	e7fe      	b.n	8013970 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013972:	f002 fcef 	bl	8016354 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	43db      	mvns	r3, r3
 8013984:	401a      	ands	r2, r3
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801398a:	f002 fd13 	bl	80163b4 <vPortExitCritical>

	return uxReturn;
 801398e:	693b      	ldr	r3, [r7, #16]
}
 8013990:	4618      	mov	r0, r3
 8013992:	3718      	adds	r7, #24
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80139a2:	2300      	movs	r3, #0
 80139a4:	683a      	ldr	r2, [r7, #0]
 80139a6:	6879      	ldr	r1, [r7, #4]
 80139a8:	4804      	ldr	r0, [pc, #16]	; (80139bc <xEventGroupClearBitsFromISR+0x24>)
 80139aa:	f002 fb87 	bl	80160bc <xTimerPendFunctionCallFromISR>
 80139ae:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80139b0:	68fb      	ldr	r3, [r7, #12]
	}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3710      	adds	r7, #16
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	08013b39 	.word	0x08013b39

080139c0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80139c0:	b480      	push	{r7}
 80139c2:	b089      	sub	sp, #36	; 0x24
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80139cc:	f3ef 8211 	mrs	r2, BASEPRI
 80139d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d4:	f383 8811 	msr	BASEPRI, r3
 80139d8:	f3bf 8f6f 	isb	sy
 80139dc:	f3bf 8f4f 	dsb	sy
 80139e0:	60fa      	str	r2, [r7, #12]
 80139e2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80139e4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139e6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	617b      	str	r3, [r7, #20]
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80139f8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80139fa:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80139fc:	4618      	mov	r0, r3
 80139fe:	3724      	adds	r7, #36	; 0x24
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b08e      	sub	sp, #56	; 0x38
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013a12:	2300      	movs	r3, #0
 8013a14:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d10a      	bne.n	8013a3a <xEventGroupSetBits+0x32>
	__asm volatile
 8013a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a28:	f383 8811 	msr	BASEPRI, r3
 8013a2c:	f3bf 8f6f 	isb	sy
 8013a30:	f3bf 8f4f 	dsb	sy
 8013a34:	613b      	str	r3, [r7, #16]
}
 8013a36:	bf00      	nop
 8013a38:	e7fe      	b.n	8013a38 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d00a      	beq.n	8013a5a <xEventGroupSetBits+0x52>
	__asm volatile
 8013a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a48:	f383 8811 	msr	BASEPRI, r3
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	f3bf 8f4f 	dsb	sy
 8013a54:	60fb      	str	r3, [r7, #12]
}
 8013a56:	bf00      	nop
 8013a58:	e7fe      	b.n	8013a58 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5c:	3304      	adds	r3, #4
 8013a5e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a62:	3308      	adds	r3, #8
 8013a64:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013a66:	f001 fa5b 	bl	8014f20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	431a      	orrs	r2, r3
 8013a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013a7c:	e03c      	b.n	8013af8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013a94:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a9c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d108      	bne.n	8013aba <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	4013      	ands	r3, r2
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d00b      	beq.n	8013acc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ab8:	e008      	b.n	8013acc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	681a      	ldr	r2, [r3, #0]
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	4013      	ands	r3, r2
 8013ac2:	69ba      	ldr	r2, [r7, #24]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d101      	bne.n	8013acc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013ac8:	2301      	movs	r3, #1
 8013aca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d010      	beq.n	8013af4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d003      	beq.n	8013ae4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013aec:	4619      	mov	r1, r3
 8013aee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013af0:	f001 fce2 	bl	80154b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013afa:	6a3b      	ldr	r3, [r7, #32]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d1be      	bne.n	8013a7e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b06:	43db      	mvns	r3, r3
 8013b08:	401a      	ands	r2, r3
 8013b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013b0e:	f001 fa15 	bl	8014f3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b14:	681b      	ldr	r3, [r3, #0]
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3738      	adds	r7, #56	; 0x38
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}

08013b1e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013b1e:	b580      	push	{r7, lr}
 8013b20:	b082      	sub	sp, #8
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	6078      	str	r0, [r7, #4]
 8013b26:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013b28:	6839      	ldr	r1, [r7, #0]
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7ff ff6c 	bl	8013a08 <xEventGroupSetBits>
}
 8013b30:	bf00      	nop
 8013b32:	3708      	adds	r7, #8
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013b42:	6839      	ldr	r1, [r7, #0]
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7ff feef 	bl	8013928 <xEventGroupClearBits>
}
 8013b4a:	bf00      	nop
 8013b4c:	3708      	adds	r7, #8
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013b52:	b480      	push	{r7}
 8013b54:	b087      	sub	sp, #28
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d107      	bne.n	8013b78 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	4013      	ands	r3, r2
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d00a      	beq.n	8013b88 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013b72:	2301      	movs	r3, #1
 8013b74:	617b      	str	r3, [r7, #20]
 8013b76:	e007      	b.n	8013b88 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	4013      	ands	r3, r2
 8013b7e:	68ba      	ldr	r2, [r7, #8]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d101      	bne.n	8013b88 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013b84:	2301      	movs	r3, #1
 8013b86:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013b88:	697b      	ldr	r3, [r7, #20]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	371c      	adds	r7, #28
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b94:	4770      	bx	lr
	...

08013b98 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b086      	sub	sp, #24
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	68f9      	ldr	r1, [r7, #12]
 8013baa:	4804      	ldr	r0, [pc, #16]	; (8013bbc <xEventGroupSetBitsFromISR+0x24>)
 8013bac:	f002 fa86 	bl	80160bc <xTimerPendFunctionCallFromISR>
 8013bb0:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013bb2:	697b      	ldr	r3, [r7, #20]
	}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3718      	adds	r7, #24
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	08013b1f 	.word	0x08013b1f

08013bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b083      	sub	sp, #12
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f103 0208 	add.w	r2, r3, #8
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f103 0208 	add.w	r2, r3, #8
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f103 0208 	add.w	r2, r3, #8
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013bf4:	bf00      	nop
 8013bf6:	370c      	adds	r7, #12
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013c0e:	bf00      	nop
 8013c10:	370c      	adds	r7, #12
 8013c12:	46bd      	mov	sp, r7
 8013c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c18:	4770      	bx	lr

08013c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c1a:	b480      	push	{r7}
 8013c1c:	b085      	sub	sp, #20
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	6078      	str	r0, [r7, #4]
 8013c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	68fa      	ldr	r2, [r7, #12]
 8013c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	689a      	ldr	r2, [r3, #8]
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	689b      	ldr	r3, [r3, #8]
 8013c3c:	683a      	ldr	r2, [r7, #0]
 8013c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	683a      	ldr	r2, [r7, #0]
 8013c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	687a      	ldr	r2, [r7, #4]
 8013c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	1c5a      	adds	r2, r3, #1
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	601a      	str	r2, [r3, #0]
}
 8013c56:	bf00      	nop
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr

08013c62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c62:	b480      	push	{r7}
 8013c64:	b085      	sub	sp, #20
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
 8013c6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c78:	d103      	bne.n	8013c82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	691b      	ldr	r3, [r3, #16]
 8013c7e:	60fb      	str	r3, [r7, #12]
 8013c80:	e00c      	b.n	8013c9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	3308      	adds	r3, #8
 8013c86:	60fb      	str	r3, [r7, #12]
 8013c88:	e002      	b.n	8013c90 <vListInsert+0x2e>
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	60fb      	str	r3, [r7, #12]
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	68ba      	ldr	r2, [r7, #8]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d2f6      	bcs.n	8013c8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	685a      	ldr	r2, [r3, #4]
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	683a      	ldr	r2, [r7, #0]
 8013caa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	68fa      	ldr	r2, [r7, #12]
 8013cb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	683a      	ldr	r2, [r7, #0]
 8013cb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	1c5a      	adds	r2, r3, #1
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	601a      	str	r2, [r3, #0]
}
 8013cc8:	bf00      	nop
 8013cca:	3714      	adds	r7, #20
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b085      	sub	sp, #20
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	691b      	ldr	r3, [r3, #16]
 8013ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	6892      	ldr	r2, [r2, #8]
 8013cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	689b      	ldr	r3, [r3, #8]
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	6852      	ldr	r2, [r2, #4]
 8013cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	685b      	ldr	r3, [r3, #4]
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d103      	bne.n	8013d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	689a      	ldr	r2, [r3, #8]
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	1e5a      	subs	r2, r3, #1
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3714      	adds	r7, #20
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr

08013d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d10a      	bne.n	8013d52 <xQueueGenericReset+0x2a>
	__asm volatile
 8013d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d40:	f383 8811 	msr	BASEPRI, r3
 8013d44:	f3bf 8f6f 	isb	sy
 8013d48:	f3bf 8f4f 	dsb	sy
 8013d4c:	60bb      	str	r3, [r7, #8]
}
 8013d4e:	bf00      	nop
 8013d50:	e7fe      	b.n	8013d50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013d52:	f002 faff 	bl	8016354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d5e:	68f9      	ldr	r1, [r7, #12]
 8013d60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d62:	fb01 f303 	mul.w	r3, r1, r3
 8013d66:	441a      	add	r2, r3
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d82:	3b01      	subs	r3, #1
 8013d84:	68f9      	ldr	r1, [r7, #12]
 8013d86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d88:	fb01 f303 	mul.w	r3, r1, r3
 8013d8c:	441a      	add	r2, r3
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	22ff      	movs	r2, #255	; 0xff
 8013d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	22ff      	movs	r2, #255	; 0xff
 8013d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d114      	bne.n	8013dd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	691b      	ldr	r3, [r3, #16]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d01a      	beq.n	8013de6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	3310      	adds	r3, #16
 8013db4:	4618      	mov	r0, r3
 8013db6:	f001 fb1b 	bl	80153f0 <xTaskRemoveFromEventList>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d012      	beq.n	8013de6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013dc0:	4b0c      	ldr	r3, [pc, #48]	; (8013df4 <xQueueGenericReset+0xcc>)
 8013dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dc6:	601a      	str	r2, [r3, #0]
 8013dc8:	f3bf 8f4f 	dsb	sy
 8013dcc:	f3bf 8f6f 	isb	sy
 8013dd0:	e009      	b.n	8013de6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	3310      	adds	r3, #16
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7ff fef2 	bl	8013bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	3324      	adds	r3, #36	; 0x24
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7ff feed 	bl	8013bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013de6:	f002 fae5 	bl	80163b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013dea:	2301      	movs	r3, #1
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3710      	adds	r7, #16
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}
 8013df4:	e000ed04 	.word	0xe000ed04

08013df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b08e      	sub	sp, #56	; 0x38
 8013dfc:	af02      	add	r7, sp, #8
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d10a      	bne.n	8013e22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e10:	f383 8811 	msr	BASEPRI, r3
 8013e14:	f3bf 8f6f 	isb	sy
 8013e18:	f3bf 8f4f 	dsb	sy
 8013e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013e1e:	bf00      	nop
 8013e20:	e7fe      	b.n	8013e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d10a      	bne.n	8013e3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e2c:	f383 8811 	msr	BASEPRI, r3
 8013e30:	f3bf 8f6f 	isb	sy
 8013e34:	f3bf 8f4f 	dsb	sy
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e3a:	bf00      	nop
 8013e3c:	e7fe      	b.n	8013e3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d002      	beq.n	8013e4a <xQueueGenericCreateStatic+0x52>
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d001      	beq.n	8013e4e <xQueueGenericCreateStatic+0x56>
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e000      	b.n	8013e50 <xQueueGenericCreateStatic+0x58>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d10a      	bne.n	8013e6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e58:	f383 8811 	msr	BASEPRI, r3
 8013e5c:	f3bf 8f6f 	isb	sy
 8013e60:	f3bf 8f4f 	dsb	sy
 8013e64:	623b      	str	r3, [r7, #32]
}
 8013e66:	bf00      	nop
 8013e68:	e7fe      	b.n	8013e68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d102      	bne.n	8013e76 <xQueueGenericCreateStatic+0x7e>
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d101      	bne.n	8013e7a <xQueueGenericCreateStatic+0x82>
 8013e76:	2301      	movs	r3, #1
 8013e78:	e000      	b.n	8013e7c <xQueueGenericCreateStatic+0x84>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d10a      	bne.n	8013e96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e84:	f383 8811 	msr	BASEPRI, r3
 8013e88:	f3bf 8f6f 	isb	sy
 8013e8c:	f3bf 8f4f 	dsb	sy
 8013e90:	61fb      	str	r3, [r7, #28]
}
 8013e92:	bf00      	nop
 8013e94:	e7fe      	b.n	8013e94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013e96:	2350      	movs	r3, #80	; 0x50
 8013e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	2b50      	cmp	r3, #80	; 0x50
 8013e9e:	d00a      	beq.n	8013eb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea4:	f383 8811 	msr	BASEPRI, r3
 8013ea8:	f3bf 8f6f 	isb	sy
 8013eac:	f3bf 8f4f 	dsb	sy
 8013eb0:	61bb      	str	r3, [r7, #24]
}
 8013eb2:	bf00      	nop
 8013eb4:	e7fe      	b.n	8013eb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013eb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d00d      	beq.n	8013ede <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec4:	2201      	movs	r2, #1
 8013ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013eca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed0:	9300      	str	r3, [sp, #0]
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	687a      	ldr	r2, [r7, #4]
 8013ed6:	68b9      	ldr	r1, [r7, #8]
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f000 f83f 	bl	8013f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3730      	adds	r7, #48	; 0x30
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}

08013ee8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b08a      	sub	sp, #40	; 0x28
 8013eec:	af02      	add	r7, sp, #8
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	4613      	mov	r3, r2
 8013ef4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d10a      	bne.n	8013f12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f00:	f383 8811 	msr	BASEPRI, r3
 8013f04:	f3bf 8f6f 	isb	sy
 8013f08:	f3bf 8f4f 	dsb	sy
 8013f0c:	613b      	str	r3, [r7, #16]
}
 8013f0e:	bf00      	nop
 8013f10:	e7fe      	b.n	8013f10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	68ba      	ldr	r2, [r7, #8]
 8013f16:	fb02 f303 	mul.w	r3, r2, r3
 8013f1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013f1c:	69fb      	ldr	r3, [r7, #28]
 8013f1e:	3350      	adds	r3, #80	; 0x50
 8013f20:	4618      	mov	r0, r3
 8013f22:	f002 fb39 	bl	8016598 <pvPortMalloc>
 8013f26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013f28:	69bb      	ldr	r3, [r7, #24]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d011      	beq.n	8013f52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013f2e:	69bb      	ldr	r3, [r7, #24]
 8013f30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	3350      	adds	r3, #80	; 0x50
 8013f36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013f40:	79fa      	ldrb	r2, [r7, #7]
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	4613      	mov	r3, r2
 8013f48:	697a      	ldr	r2, [r7, #20]
 8013f4a:	68b9      	ldr	r1, [r7, #8]
 8013f4c:	68f8      	ldr	r0, [r7, #12]
 8013f4e:	f000 f805 	bl	8013f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013f52:	69bb      	ldr	r3, [r7, #24]
	}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3720      	adds	r7, #32
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
 8013f68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d103      	bne.n	8013f78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	69ba      	ldr	r2, [r7, #24]
 8013f74:	601a      	str	r2, [r3, #0]
 8013f76:	e002      	b.n	8013f7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	687a      	ldr	r2, [r7, #4]
 8013f7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	68fa      	ldr	r2, [r7, #12]
 8013f82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	68ba      	ldr	r2, [r7, #8]
 8013f88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013f8a:	2101      	movs	r1, #1
 8013f8c:	69b8      	ldr	r0, [r7, #24]
 8013f8e:	f7ff fecb 	bl	8013d28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	78fa      	ldrb	r2, [r7, #3]
 8013f96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013f9a:	bf00      	nop
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
	...

08013fa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b08e      	sub	sp, #56	; 0x38
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	60b9      	str	r1, [r7, #8]
 8013fae:	607a      	str	r2, [r7, #4]
 8013fb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d10a      	bne.n	8013fd6 <xQueueGenericSend+0x32>
	__asm volatile
 8013fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc4:	f383 8811 	msr	BASEPRI, r3
 8013fc8:	f3bf 8f6f 	isb	sy
 8013fcc:	f3bf 8f4f 	dsb	sy
 8013fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013fd2:	bf00      	nop
 8013fd4:	e7fe      	b.n	8013fd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d103      	bne.n	8013fe4 <xQueueGenericSend+0x40>
 8013fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d101      	bne.n	8013fe8 <xQueueGenericSend+0x44>
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e000      	b.n	8013fea <xQueueGenericSend+0x46>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d10a      	bne.n	8014004 <xQueueGenericSend+0x60>
	__asm volatile
 8013fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff2:	f383 8811 	msr	BASEPRI, r3
 8013ff6:	f3bf 8f6f 	isb	sy
 8013ffa:	f3bf 8f4f 	dsb	sy
 8013ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014000:	bf00      	nop
 8014002:	e7fe      	b.n	8014002 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	2b02      	cmp	r3, #2
 8014008:	d103      	bne.n	8014012 <xQueueGenericSend+0x6e>
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801400e:	2b01      	cmp	r3, #1
 8014010:	d101      	bne.n	8014016 <xQueueGenericSend+0x72>
 8014012:	2301      	movs	r3, #1
 8014014:	e000      	b.n	8014018 <xQueueGenericSend+0x74>
 8014016:	2300      	movs	r3, #0
 8014018:	2b00      	cmp	r3, #0
 801401a:	d10a      	bne.n	8014032 <xQueueGenericSend+0x8e>
	__asm volatile
 801401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014020:	f383 8811 	msr	BASEPRI, r3
 8014024:	f3bf 8f6f 	isb	sy
 8014028:	f3bf 8f4f 	dsb	sy
 801402c:	623b      	str	r3, [r7, #32]
}
 801402e:	bf00      	nop
 8014030:	e7fe      	b.n	8014030 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014032:	f001 fbfd 	bl	8015830 <xTaskGetSchedulerState>
 8014036:	4603      	mov	r3, r0
 8014038:	2b00      	cmp	r3, #0
 801403a:	d102      	bne.n	8014042 <xQueueGenericSend+0x9e>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d101      	bne.n	8014046 <xQueueGenericSend+0xa2>
 8014042:	2301      	movs	r3, #1
 8014044:	e000      	b.n	8014048 <xQueueGenericSend+0xa4>
 8014046:	2300      	movs	r3, #0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d10a      	bne.n	8014062 <xQueueGenericSend+0xbe>
	__asm volatile
 801404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014050:	f383 8811 	msr	BASEPRI, r3
 8014054:	f3bf 8f6f 	isb	sy
 8014058:	f3bf 8f4f 	dsb	sy
 801405c:	61fb      	str	r3, [r7, #28]
}
 801405e:	bf00      	nop
 8014060:	e7fe      	b.n	8014060 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014062:	f002 f977 	bl	8016354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801406e:	429a      	cmp	r2, r3
 8014070:	d302      	bcc.n	8014078 <xQueueGenericSend+0xd4>
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	2b02      	cmp	r3, #2
 8014076:	d129      	bne.n	80140cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014078:	683a      	ldr	r2, [r7, #0]
 801407a:	68b9      	ldr	r1, [r7, #8]
 801407c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801407e:	f000 fa8b 	bl	8014598 <prvCopyDataToQueue>
 8014082:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014088:	2b00      	cmp	r3, #0
 801408a:	d010      	beq.n	80140ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408e:	3324      	adds	r3, #36	; 0x24
 8014090:	4618      	mov	r0, r3
 8014092:	f001 f9ad 	bl	80153f0 <xTaskRemoveFromEventList>
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d013      	beq.n	80140c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801409c:	4b3f      	ldr	r3, [pc, #252]	; (801419c <xQueueGenericSend+0x1f8>)
 801409e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140a2:	601a      	str	r2, [r3, #0]
 80140a4:	f3bf 8f4f 	dsb	sy
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	e00a      	b.n	80140c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80140ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d007      	beq.n	80140c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80140b4:	4b39      	ldr	r3, [pc, #228]	; (801419c <xQueueGenericSend+0x1f8>)
 80140b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140ba:	601a      	str	r2, [r3, #0]
 80140bc:	f3bf 8f4f 	dsb	sy
 80140c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80140c4:	f002 f976 	bl	80163b4 <vPortExitCritical>
				return pdPASS;
 80140c8:	2301      	movs	r3, #1
 80140ca:	e063      	b.n	8014194 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d103      	bne.n	80140da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80140d2:	f002 f96f 	bl	80163b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80140d6:	2300      	movs	r3, #0
 80140d8:	e05c      	b.n	8014194 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80140da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d106      	bne.n	80140ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80140e0:	f107 0314 	add.w	r3, r7, #20
 80140e4:	4618      	mov	r0, r3
 80140e6:	f001 fa49 	bl	801557c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80140ea:	2301      	movs	r3, #1
 80140ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80140ee:	f002 f961 	bl	80163b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80140f2:	f000 ff15 	bl	8014f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80140f6:	f002 f92d 	bl	8016354 <vPortEnterCritical>
 80140fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014100:	b25b      	sxtb	r3, r3
 8014102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014106:	d103      	bne.n	8014110 <xQueueGenericSend+0x16c>
 8014108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410a:	2200      	movs	r2, #0
 801410c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014116:	b25b      	sxtb	r3, r3
 8014118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801411c:	d103      	bne.n	8014126 <xQueueGenericSend+0x182>
 801411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014120:	2200      	movs	r2, #0
 8014122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014126:	f002 f945 	bl	80163b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801412a:	1d3a      	adds	r2, r7, #4
 801412c:	f107 0314 	add.w	r3, r7, #20
 8014130:	4611      	mov	r1, r2
 8014132:	4618      	mov	r0, r3
 8014134:	f001 fa38 	bl	80155a8 <xTaskCheckForTimeOut>
 8014138:	4603      	mov	r3, r0
 801413a:	2b00      	cmp	r3, #0
 801413c:	d124      	bne.n	8014188 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801413e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014140:	f000 fb22 	bl	8014788 <prvIsQueueFull>
 8014144:	4603      	mov	r3, r0
 8014146:	2b00      	cmp	r3, #0
 8014148:	d018      	beq.n	801417c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414c:	3310      	adds	r3, #16
 801414e:	687a      	ldr	r2, [r7, #4]
 8014150:	4611      	mov	r1, r2
 8014152:	4618      	mov	r0, r3
 8014154:	f001 f8c0 	bl	80152d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801415a:	f000 faad 	bl	80146b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801415e:	f000 feed 	bl	8014f3c <xTaskResumeAll>
 8014162:	4603      	mov	r3, r0
 8014164:	2b00      	cmp	r3, #0
 8014166:	f47f af7c 	bne.w	8014062 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801416a:	4b0c      	ldr	r3, [pc, #48]	; (801419c <xQueueGenericSend+0x1f8>)
 801416c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014170:	601a      	str	r2, [r3, #0]
 8014172:	f3bf 8f4f 	dsb	sy
 8014176:	f3bf 8f6f 	isb	sy
 801417a:	e772      	b.n	8014062 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801417c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801417e:	f000 fa9b 	bl	80146b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014182:	f000 fedb 	bl	8014f3c <xTaskResumeAll>
 8014186:	e76c      	b.n	8014062 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801418a:	f000 fa95 	bl	80146b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801418e:	f000 fed5 	bl	8014f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014192:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014194:	4618      	mov	r0, r3
 8014196:	3738      	adds	r7, #56	; 0x38
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	e000ed04 	.word	0xe000ed04

080141a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b090      	sub	sp, #64	; 0x40
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
 80141ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80141b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d10a      	bne.n	80141ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80141b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141bc:	f383 8811 	msr	BASEPRI, r3
 80141c0:	f3bf 8f6f 	isb	sy
 80141c4:	f3bf 8f4f 	dsb	sy
 80141c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80141ca:	bf00      	nop
 80141cc:	e7fe      	b.n	80141cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d103      	bne.n	80141dc <xQueueGenericSendFromISR+0x3c>
 80141d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d101      	bne.n	80141e0 <xQueueGenericSendFromISR+0x40>
 80141dc:	2301      	movs	r3, #1
 80141de:	e000      	b.n	80141e2 <xQueueGenericSendFromISR+0x42>
 80141e0:	2300      	movs	r3, #0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d10a      	bne.n	80141fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80141e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ea:	f383 8811 	msr	BASEPRI, r3
 80141ee:	f3bf 8f6f 	isb	sy
 80141f2:	f3bf 8f4f 	dsb	sy
 80141f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141f8:	bf00      	nop
 80141fa:	e7fe      	b.n	80141fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	2b02      	cmp	r3, #2
 8014200:	d103      	bne.n	801420a <xQueueGenericSendFromISR+0x6a>
 8014202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014206:	2b01      	cmp	r3, #1
 8014208:	d101      	bne.n	801420e <xQueueGenericSendFromISR+0x6e>
 801420a:	2301      	movs	r3, #1
 801420c:	e000      	b.n	8014210 <xQueueGenericSendFromISR+0x70>
 801420e:	2300      	movs	r3, #0
 8014210:	2b00      	cmp	r3, #0
 8014212:	d10a      	bne.n	801422a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014218:	f383 8811 	msr	BASEPRI, r3
 801421c:	f3bf 8f6f 	isb	sy
 8014220:	f3bf 8f4f 	dsb	sy
 8014224:	623b      	str	r3, [r7, #32]
}
 8014226:	bf00      	nop
 8014228:	e7fe      	b.n	8014228 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801422a:	f002 f975 	bl	8016518 <vPortValidateInterruptPriority>
	__asm volatile
 801422e:	f3ef 8211 	mrs	r2, BASEPRI
 8014232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014236:	f383 8811 	msr	BASEPRI, r3
 801423a:	f3bf 8f6f 	isb	sy
 801423e:	f3bf 8f4f 	dsb	sy
 8014242:	61fa      	str	r2, [r7, #28]
 8014244:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8014246:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014248:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014252:	429a      	cmp	r2, r3
 8014254:	d302      	bcc.n	801425c <xQueueGenericSendFromISR+0xbc>
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	2b02      	cmp	r3, #2
 801425a:	d12f      	bne.n	80142bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801426a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801426c:	683a      	ldr	r2, [r7, #0]
 801426e:	68b9      	ldr	r1, [r7, #8]
 8014270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014272:	f000 f991 	bl	8014598 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014276:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801427a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801427e:	d112      	bne.n	80142a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014284:	2b00      	cmp	r3, #0
 8014286:	d016      	beq.n	80142b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801428a:	3324      	adds	r3, #36	; 0x24
 801428c:	4618      	mov	r0, r3
 801428e:	f001 f8af 	bl	80153f0 <xTaskRemoveFromEventList>
 8014292:	4603      	mov	r3, r0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00e      	beq.n	80142b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00b      	beq.n	80142b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2201      	movs	r2, #1
 80142a2:	601a      	str	r2, [r3, #0]
 80142a4:	e007      	b.n	80142b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80142a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80142aa:	3301      	adds	r3, #1
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	b25a      	sxtb	r2, r3
 80142b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80142b6:	2301      	movs	r3, #1
 80142b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80142ba:	e001      	b.n	80142c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80142bc:	2300      	movs	r3, #0
 80142be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80142c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	f383 8811 	msr	BASEPRI, r3
}
 80142ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80142cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3740      	adds	r7, #64	; 0x40
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
	...

080142d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b08c      	sub	sp, #48	; 0x30
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80142e4:	2300      	movs	r3, #0
 80142e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80142ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d10a      	bne.n	8014308 <xQueueReceive+0x30>
	__asm volatile
 80142f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f6:	f383 8811 	msr	BASEPRI, r3
 80142fa:	f3bf 8f6f 	isb	sy
 80142fe:	f3bf 8f4f 	dsb	sy
 8014302:	623b      	str	r3, [r7, #32]
}
 8014304:	bf00      	nop
 8014306:	e7fe      	b.n	8014306 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d103      	bne.n	8014316 <xQueueReceive+0x3e>
 801430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014312:	2b00      	cmp	r3, #0
 8014314:	d101      	bne.n	801431a <xQueueReceive+0x42>
 8014316:	2301      	movs	r3, #1
 8014318:	e000      	b.n	801431c <xQueueReceive+0x44>
 801431a:	2300      	movs	r3, #0
 801431c:	2b00      	cmp	r3, #0
 801431e:	d10a      	bne.n	8014336 <xQueueReceive+0x5e>
	__asm volatile
 8014320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014324:	f383 8811 	msr	BASEPRI, r3
 8014328:	f3bf 8f6f 	isb	sy
 801432c:	f3bf 8f4f 	dsb	sy
 8014330:	61fb      	str	r3, [r7, #28]
}
 8014332:	bf00      	nop
 8014334:	e7fe      	b.n	8014334 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014336:	f001 fa7b 	bl	8015830 <xTaskGetSchedulerState>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d102      	bne.n	8014346 <xQueueReceive+0x6e>
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <xQueueReceive+0x72>
 8014346:	2301      	movs	r3, #1
 8014348:	e000      	b.n	801434c <xQueueReceive+0x74>
 801434a:	2300      	movs	r3, #0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d10a      	bne.n	8014366 <xQueueReceive+0x8e>
	__asm volatile
 8014350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014354:	f383 8811 	msr	BASEPRI, r3
 8014358:	f3bf 8f6f 	isb	sy
 801435c:	f3bf 8f4f 	dsb	sy
 8014360:	61bb      	str	r3, [r7, #24]
}
 8014362:	bf00      	nop
 8014364:	e7fe      	b.n	8014364 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014366:	f001 fff5 	bl	8016354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801436e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	2b00      	cmp	r3, #0
 8014374:	d01f      	beq.n	80143b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014376:	68b9      	ldr	r1, [r7, #8]
 8014378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801437a:	f000 f977 	bl	801466c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014380:	1e5a      	subs	r2, r3, #1
 8014382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014384:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014388:	691b      	ldr	r3, [r3, #16]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d00f      	beq.n	80143ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	3310      	adds	r3, #16
 8014392:	4618      	mov	r0, r3
 8014394:	f001 f82c 	bl	80153f0 <xTaskRemoveFromEventList>
 8014398:	4603      	mov	r3, r0
 801439a:	2b00      	cmp	r3, #0
 801439c:	d007      	beq.n	80143ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801439e:	4b3d      	ldr	r3, [pc, #244]	; (8014494 <xQueueReceive+0x1bc>)
 80143a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143a4:	601a      	str	r2, [r3, #0]
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80143ae:	f002 f801 	bl	80163b4 <vPortExitCritical>
				return pdPASS;
 80143b2:	2301      	movs	r3, #1
 80143b4:	e069      	b.n	801448a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d103      	bne.n	80143c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80143bc:	f001 fffa 	bl	80163b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80143c0:	2300      	movs	r3, #0
 80143c2:	e062      	b.n	801448a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80143c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d106      	bne.n	80143d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80143ca:	f107 0310 	add.w	r3, r7, #16
 80143ce:	4618      	mov	r0, r3
 80143d0:	f001 f8d4 	bl	801557c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80143d4:	2301      	movs	r3, #1
 80143d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80143d8:	f001 ffec 	bl	80163b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80143dc:	f000 fda0 	bl	8014f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80143e0:	f001 ffb8 	bl	8016354 <vPortEnterCritical>
 80143e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143ea:	b25b      	sxtb	r3, r3
 80143ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143f0:	d103      	bne.n	80143fa <xQueueReceive+0x122>
 80143f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f4:	2200      	movs	r2, #0
 80143f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80143fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014400:	b25b      	sxtb	r3, r3
 8014402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014406:	d103      	bne.n	8014410 <xQueueReceive+0x138>
 8014408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801440a:	2200      	movs	r2, #0
 801440c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014410:	f001 ffd0 	bl	80163b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014414:	1d3a      	adds	r2, r7, #4
 8014416:	f107 0310 	add.w	r3, r7, #16
 801441a:	4611      	mov	r1, r2
 801441c:	4618      	mov	r0, r3
 801441e:	f001 f8c3 	bl	80155a8 <xTaskCheckForTimeOut>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d123      	bne.n	8014470 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801442a:	f000 f997 	bl	801475c <prvIsQueueEmpty>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d017      	beq.n	8014464 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014436:	3324      	adds	r3, #36	; 0x24
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	4611      	mov	r1, r2
 801443c:	4618      	mov	r0, r3
 801443e:	f000 ff4b 	bl	80152d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014444:	f000 f938 	bl	80146b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014448:	f000 fd78 	bl	8014f3c <xTaskResumeAll>
 801444c:	4603      	mov	r3, r0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d189      	bne.n	8014366 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014452:	4b10      	ldr	r3, [pc, #64]	; (8014494 <xQueueReceive+0x1bc>)
 8014454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014458:	601a      	str	r2, [r3, #0]
 801445a:	f3bf 8f4f 	dsb	sy
 801445e:	f3bf 8f6f 	isb	sy
 8014462:	e780      	b.n	8014366 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014466:	f000 f927 	bl	80146b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801446a:	f000 fd67 	bl	8014f3c <xTaskResumeAll>
 801446e:	e77a      	b.n	8014366 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014472:	f000 f921 	bl	80146b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014476:	f000 fd61 	bl	8014f3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801447a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801447c:	f000 f96e 	bl	801475c <prvIsQueueEmpty>
 8014480:	4603      	mov	r3, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	f43f af6f 	beq.w	8014366 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801448a:	4618      	mov	r0, r3
 801448c:	3730      	adds	r7, #48	; 0x30
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	e000ed04 	.word	0xe000ed04

08014498 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b08e      	sub	sp, #56	; 0x38
 801449c:	af00      	add	r7, sp, #0
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80144a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d10a      	bne.n	80144c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80144ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b2:	f383 8811 	msr	BASEPRI, r3
 80144b6:	f3bf 8f6f 	isb	sy
 80144ba:	f3bf 8f4f 	dsb	sy
 80144be:	623b      	str	r3, [r7, #32]
}
 80144c0:	bf00      	nop
 80144c2:	e7fe      	b.n	80144c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d103      	bne.n	80144d2 <xQueueReceiveFromISR+0x3a>
 80144ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d101      	bne.n	80144d6 <xQueueReceiveFromISR+0x3e>
 80144d2:	2301      	movs	r3, #1
 80144d4:	e000      	b.n	80144d8 <xQueueReceiveFromISR+0x40>
 80144d6:	2300      	movs	r3, #0
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d10a      	bne.n	80144f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80144dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e0:	f383 8811 	msr	BASEPRI, r3
 80144e4:	f3bf 8f6f 	isb	sy
 80144e8:	f3bf 8f4f 	dsb	sy
 80144ec:	61fb      	str	r3, [r7, #28]
}
 80144ee:	bf00      	nop
 80144f0:	e7fe      	b.n	80144f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80144f2:	f002 f811 	bl	8016518 <vPortValidateInterruptPriority>
	__asm volatile
 80144f6:	f3ef 8211 	mrs	r2, BASEPRI
 80144fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144fe:	f383 8811 	msr	BASEPRI, r3
 8014502:	f3bf 8f6f 	isb	sy
 8014506:	f3bf 8f4f 	dsb	sy
 801450a:	61ba      	str	r2, [r7, #24]
 801450c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801450e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014510:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014516:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801451a:	2b00      	cmp	r3, #0
 801451c:	d02f      	beq.n	801457e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014528:	68b9      	ldr	r1, [r7, #8]
 801452a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801452c:	f000 f89e 	bl	801466c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014532:	1e5a      	subs	r2, r3, #1
 8014534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014536:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801453c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014540:	d112      	bne.n	8014568 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014544:	691b      	ldr	r3, [r3, #16]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d016      	beq.n	8014578 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454c:	3310      	adds	r3, #16
 801454e:	4618      	mov	r0, r3
 8014550:	f000 ff4e 	bl	80153f0 <xTaskRemoveFromEventList>
 8014554:	4603      	mov	r3, r0
 8014556:	2b00      	cmp	r3, #0
 8014558:	d00e      	beq.n	8014578 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00b      	beq.n	8014578 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2201      	movs	r2, #1
 8014564:	601a      	str	r2, [r3, #0]
 8014566:	e007      	b.n	8014578 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801456c:	3301      	adds	r3, #1
 801456e:	b2db      	uxtb	r3, r3
 8014570:	b25a      	sxtb	r2, r3
 8014572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014578:	2301      	movs	r3, #1
 801457a:	637b      	str	r3, [r7, #52]	; 0x34
 801457c:	e001      	b.n	8014582 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801457e:	2300      	movs	r3, #0
 8014580:	637b      	str	r3, [r7, #52]	; 0x34
 8014582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014584:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	f383 8811 	msr	BASEPRI, r3
}
 801458c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014590:	4618      	mov	r0, r3
 8014592:	3738      	adds	r7, #56	; 0x38
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b086      	sub	sp, #24
 801459c:	af00      	add	r7, sp, #0
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80145a4:	2300      	movs	r3, #0
 80145a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d10d      	bne.n	80145d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d14d      	bne.n	801465a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	689b      	ldr	r3, [r3, #8]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f001 f952 	bl	801586c <xTaskPriorityDisinherit>
 80145c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	2200      	movs	r2, #0
 80145ce:	609a      	str	r2, [r3, #8]
 80145d0:	e043      	b.n	801465a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d119      	bne.n	801460c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6858      	ldr	r0, [r3, #4]
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145e0:	461a      	mov	r2, r3
 80145e2:	68b9      	ldr	r1, [r7, #8]
 80145e4:	f002 f9fc 	bl	80169e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	685a      	ldr	r2, [r3, #4]
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145f0:	441a      	add	r2, r3
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	685a      	ldr	r2, [r3, #4]
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	689b      	ldr	r3, [r3, #8]
 80145fe:	429a      	cmp	r2, r3
 8014600:	d32b      	bcc.n	801465a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	681a      	ldr	r2, [r3, #0]
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	605a      	str	r2, [r3, #4]
 801460a:	e026      	b.n	801465a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	68d8      	ldr	r0, [r3, #12]
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014614:	461a      	mov	r2, r3
 8014616:	68b9      	ldr	r1, [r7, #8]
 8014618:	f002 f9e2 	bl	80169e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	68da      	ldr	r2, [r3, #12]
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014624:	425b      	negs	r3, r3
 8014626:	441a      	add	r2, r3
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	68da      	ldr	r2, [r3, #12]
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	429a      	cmp	r2, r3
 8014636:	d207      	bcs.n	8014648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	689a      	ldr	r2, [r3, #8]
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014640:	425b      	negs	r3, r3
 8014642:	441a      	add	r2, r3
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2b02      	cmp	r3, #2
 801464c:	d105      	bne.n	801465a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d002      	beq.n	801465a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	3b01      	subs	r3, #1
 8014658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	1c5a      	adds	r2, r3, #1
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014662:	697b      	ldr	r3, [r7, #20]
}
 8014664:	4618      	mov	r0, r3
 8014666:	3718      	adds	r7, #24
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801467a:	2b00      	cmp	r3, #0
 801467c:	d018      	beq.n	80146b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	68da      	ldr	r2, [r3, #12]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014686:	441a      	add	r2, r3
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	68da      	ldr	r2, [r3, #12]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	689b      	ldr	r3, [r3, #8]
 8014694:	429a      	cmp	r2, r3
 8014696:	d303      	bcc.n	80146a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	68d9      	ldr	r1, [r3, #12]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146a8:	461a      	mov	r2, r3
 80146aa:	6838      	ldr	r0, [r7, #0]
 80146ac:	f002 f998 	bl	80169e0 <memcpy>
	}
}
 80146b0:	bf00      	nop
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80146c0:	f001 fe48 	bl	8016354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80146cc:	e011      	b.n	80146f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d012      	beq.n	80146fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	3324      	adds	r3, #36	; 0x24
 80146da:	4618      	mov	r0, r3
 80146dc:	f000 fe88 	bl	80153f0 <xTaskRemoveFromEventList>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d001      	beq.n	80146ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80146e6:	f000 ffc1 	bl	801566c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80146ea:	7bfb      	ldrb	r3, [r7, #15]
 80146ec:	3b01      	subs	r3, #1
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80146f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	dce9      	bgt.n	80146ce <prvUnlockQueue+0x16>
 80146fa:	e000      	b.n	80146fe <prvUnlockQueue+0x46>
					break;
 80146fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	22ff      	movs	r2, #255	; 0xff
 8014702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014706:	f001 fe55 	bl	80163b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801470a:	f001 fe23 	bl	8016354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014714:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014716:	e011      	b.n	801473c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	691b      	ldr	r3, [r3, #16]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d012      	beq.n	8014746 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	3310      	adds	r3, #16
 8014724:	4618      	mov	r0, r3
 8014726:	f000 fe63 	bl	80153f0 <xTaskRemoveFromEventList>
 801472a:	4603      	mov	r3, r0
 801472c:	2b00      	cmp	r3, #0
 801472e:	d001      	beq.n	8014734 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014730:	f000 ff9c 	bl	801566c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014734:	7bbb      	ldrb	r3, [r7, #14]
 8014736:	3b01      	subs	r3, #1
 8014738:	b2db      	uxtb	r3, r3
 801473a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801473c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014740:	2b00      	cmp	r3, #0
 8014742:	dce9      	bgt.n	8014718 <prvUnlockQueue+0x60>
 8014744:	e000      	b.n	8014748 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014746:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	22ff      	movs	r2, #255	; 0xff
 801474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014750:	f001 fe30 	bl	80163b4 <vPortExitCritical>
}
 8014754:	bf00      	nop
 8014756:	3710      	adds	r7, #16
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b084      	sub	sp, #16
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014764:	f001 fdf6 	bl	8016354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801476c:	2b00      	cmp	r3, #0
 801476e:	d102      	bne.n	8014776 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014770:	2301      	movs	r3, #1
 8014772:	60fb      	str	r3, [r7, #12]
 8014774:	e001      	b.n	801477a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014776:	2300      	movs	r3, #0
 8014778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801477a:	f001 fe1b 	bl	80163b4 <vPortExitCritical>

	return xReturn;
 801477e:	68fb      	ldr	r3, [r7, #12]
}
 8014780:	4618      	mov	r0, r3
 8014782:	3710      	adds	r7, #16
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014790:	f001 fde0 	bl	8016354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801479c:	429a      	cmp	r2, r3
 801479e:	d102      	bne.n	80147a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80147a0:	2301      	movs	r3, #1
 80147a2:	60fb      	str	r3, [r7, #12]
 80147a4:	e001      	b.n	80147aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80147a6:	2300      	movs	r3, #0
 80147a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80147aa:	f001 fe03 	bl	80163b4 <vPortExitCritical>

	return xReturn;
 80147ae:	68fb      	ldr	r3, [r7, #12]
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3710      	adds	r7, #16
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80147b8:	b480      	push	{r7}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80147c2:	2300      	movs	r3, #0
 80147c4:	60fb      	str	r3, [r7, #12]
 80147c6:	e014      	b.n	80147f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80147c8:	4a0f      	ldr	r2, [pc, #60]	; (8014808 <vQueueAddToRegistry+0x50>)
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d10b      	bne.n	80147ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80147d4:	490c      	ldr	r1, [pc, #48]	; (8014808 <vQueueAddToRegistry+0x50>)
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	683a      	ldr	r2, [r7, #0]
 80147da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80147de:	4a0a      	ldr	r2, [pc, #40]	; (8014808 <vQueueAddToRegistry+0x50>)
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	00db      	lsls	r3, r3, #3
 80147e4:	4413      	add	r3, r2
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80147ea:	e006      	b.n	80147fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	3301      	adds	r3, #1
 80147f0:	60fb      	str	r3, [r7, #12]
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2b07      	cmp	r3, #7
 80147f6:	d9e7      	bls.n	80147c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80147f8:	bf00      	nop
 80147fa:	bf00      	nop
 80147fc:	3714      	adds	r7, #20
 80147fe:	46bd      	mov	sp, r7
 8014800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop
 8014808:	240017a4 	.word	0x240017a4

0801480c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801480c:	b580      	push	{r7, lr}
 801480e:	b086      	sub	sp, #24
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801481c:	f001 fd9a 	bl	8016354 <vPortEnterCritical>
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014826:	b25b      	sxtb	r3, r3
 8014828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801482c:	d103      	bne.n	8014836 <vQueueWaitForMessageRestricted+0x2a>
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	2200      	movs	r2, #0
 8014832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801483c:	b25b      	sxtb	r3, r3
 801483e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014842:	d103      	bne.n	801484c <vQueueWaitForMessageRestricted+0x40>
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	2200      	movs	r2, #0
 8014848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801484c:	f001 fdb2 	bl	80163b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014854:	2b00      	cmp	r3, #0
 8014856:	d106      	bne.n	8014866 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	3324      	adds	r3, #36	; 0x24
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	68b9      	ldr	r1, [r7, #8]
 8014860:	4618      	mov	r0, r3
 8014862:	f000 fd99 	bl	8015398 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014866:	6978      	ldr	r0, [r7, #20]
 8014868:	f7ff ff26 	bl	80146b8 <prvUnlockQueue>
	}
 801486c:	bf00      	nop
 801486e:	3718      	adds	r7, #24
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014874:	b580      	push	{r7, lr}
 8014876:	b08e      	sub	sp, #56	; 0x38
 8014878:	af04      	add	r7, sp, #16
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
 8014880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014884:	2b00      	cmp	r3, #0
 8014886:	d10a      	bne.n	801489e <xTaskCreateStatic+0x2a>
	__asm volatile
 8014888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801488c:	f383 8811 	msr	BASEPRI, r3
 8014890:	f3bf 8f6f 	isb	sy
 8014894:	f3bf 8f4f 	dsb	sy
 8014898:	623b      	str	r3, [r7, #32]
}
 801489a:	bf00      	nop
 801489c:	e7fe      	b.n	801489c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d10a      	bne.n	80148ba <xTaskCreateStatic+0x46>
	__asm volatile
 80148a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a8:	f383 8811 	msr	BASEPRI, r3
 80148ac:	f3bf 8f6f 	isb	sy
 80148b0:	f3bf 8f4f 	dsb	sy
 80148b4:	61fb      	str	r3, [r7, #28]
}
 80148b6:	bf00      	nop
 80148b8:	e7fe      	b.n	80148b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80148ba:	235c      	movs	r3, #92	; 0x5c
 80148bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	2b5c      	cmp	r3, #92	; 0x5c
 80148c2:	d00a      	beq.n	80148da <xTaskCreateStatic+0x66>
	__asm volatile
 80148c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c8:	f383 8811 	msr	BASEPRI, r3
 80148cc:	f3bf 8f6f 	isb	sy
 80148d0:	f3bf 8f4f 	dsb	sy
 80148d4:	61bb      	str	r3, [r7, #24]
}
 80148d6:	bf00      	nop
 80148d8:	e7fe      	b.n	80148d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80148da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80148dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d01e      	beq.n	8014920 <xTaskCreateStatic+0xac>
 80148e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d01b      	beq.n	8014920 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80148e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80148f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f4:	2202      	movs	r2, #2
 80148f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80148fa:	2300      	movs	r3, #0
 80148fc:	9303      	str	r3, [sp, #12]
 80148fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014900:	9302      	str	r3, [sp, #8]
 8014902:	f107 0314 	add.w	r3, r7, #20
 8014906:	9301      	str	r3, [sp, #4]
 8014908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490a:	9300      	str	r3, [sp, #0]
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	68b9      	ldr	r1, [r7, #8]
 8014912:	68f8      	ldr	r0, [r7, #12]
 8014914:	f000 f850 	bl	80149b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801491a:	f000 f8dd 	bl	8014ad8 <prvAddNewTaskToReadyList>
 801491e:	e001      	b.n	8014924 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014920:	2300      	movs	r3, #0
 8014922:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014924:	697b      	ldr	r3, [r7, #20]
	}
 8014926:	4618      	mov	r0, r3
 8014928:	3728      	adds	r7, #40	; 0x28
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801492e:	b580      	push	{r7, lr}
 8014930:	b08c      	sub	sp, #48	; 0x30
 8014932:	af04      	add	r7, sp, #16
 8014934:	60f8      	str	r0, [r7, #12]
 8014936:	60b9      	str	r1, [r7, #8]
 8014938:	603b      	str	r3, [r7, #0]
 801493a:	4613      	mov	r3, r2
 801493c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801493e:	88fb      	ldrh	r3, [r7, #6]
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	4618      	mov	r0, r3
 8014944:	f001 fe28 	bl	8016598 <pvPortMalloc>
 8014948:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d00e      	beq.n	801496e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014950:	205c      	movs	r0, #92	; 0x5c
 8014952:	f001 fe21 	bl	8016598 <pvPortMalloc>
 8014956:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d003      	beq.n	8014966 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	697a      	ldr	r2, [r7, #20]
 8014962:	631a      	str	r2, [r3, #48]	; 0x30
 8014964:	e005      	b.n	8014972 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014966:	6978      	ldr	r0, [r7, #20]
 8014968:	f001 fee2 	bl	8016730 <vPortFree>
 801496c:	e001      	b.n	8014972 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801496e:	2300      	movs	r3, #0
 8014970:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014972:	69fb      	ldr	r3, [r7, #28]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d017      	beq.n	80149a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	2200      	movs	r2, #0
 801497c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014980:	88fa      	ldrh	r2, [r7, #6]
 8014982:	2300      	movs	r3, #0
 8014984:	9303      	str	r3, [sp, #12]
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	9302      	str	r3, [sp, #8]
 801498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498c:	9301      	str	r3, [sp, #4]
 801498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014990:	9300      	str	r3, [sp, #0]
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	68b9      	ldr	r1, [r7, #8]
 8014996:	68f8      	ldr	r0, [r7, #12]
 8014998:	f000 f80e 	bl	80149b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801499c:	69f8      	ldr	r0, [r7, #28]
 801499e:	f000 f89b 	bl	8014ad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80149a2:	2301      	movs	r3, #1
 80149a4:	61bb      	str	r3, [r7, #24]
 80149a6:	e002      	b.n	80149ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80149a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80149ae:	69bb      	ldr	r3, [r7, #24]
	}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3720      	adds	r7, #32
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b088      	sub	sp, #32
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	607a      	str	r2, [r7, #4]
 80149c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80149c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	461a      	mov	r2, r3
 80149d0:	21a5      	movs	r1, #165	; 0xa5
 80149d2:	f002 f813 	bl	80169fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80149d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149da:	6879      	ldr	r1, [r7, #4]
 80149dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80149e0:	440b      	add	r3, r1
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	4413      	add	r3, r2
 80149e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	f023 0307 	bic.w	r3, r3, #7
 80149ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	f003 0307 	and.w	r3, r3, #7
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d00a      	beq.n	8014a10 <prvInitialiseNewTask+0x58>
	__asm volatile
 80149fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	617b      	str	r3, [r7, #20]
}
 8014a0c:	bf00      	nop
 8014a0e:	e7fe      	b.n	8014a0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d01f      	beq.n	8014a56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014a16:	2300      	movs	r3, #0
 8014a18:	61fb      	str	r3, [r7, #28]
 8014a1a:	e012      	b.n	8014a42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014a1c:	68ba      	ldr	r2, [r7, #8]
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	4413      	add	r3, r2
 8014a22:	7819      	ldrb	r1, [r3, #0]
 8014a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	4413      	add	r3, r2
 8014a2a:	3334      	adds	r3, #52	; 0x34
 8014a2c:	460a      	mov	r2, r1
 8014a2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014a30:	68ba      	ldr	r2, [r7, #8]
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	4413      	add	r3, r2
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d006      	beq.n	8014a4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	3301      	adds	r3, #1
 8014a40:	61fb      	str	r3, [r7, #28]
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	2b0f      	cmp	r3, #15
 8014a46:	d9e9      	bls.n	8014a1c <prvInitialiseNewTask+0x64>
 8014a48:	e000      	b.n	8014a4c <prvInitialiseNewTask+0x94>
			{
				break;
 8014a4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4e:	2200      	movs	r2, #0
 8014a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014a54:	e003      	b.n	8014a5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a58:	2200      	movs	r2, #0
 8014a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a60:	2b37      	cmp	r3, #55	; 0x37
 8014a62:	d901      	bls.n	8014a68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014a64:	2337      	movs	r3, #55	; 0x37
 8014a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a76:	2200      	movs	r2, #0
 8014a78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a7c:	3304      	adds	r3, #4
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7ff f8be 	bl	8013c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a86:	3318      	adds	r3, #24
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7ff f8b9 	bl	8013c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aac:	2200      	movs	r2, #0
 8014aae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	68f9      	ldr	r1, [r7, #12]
 8014ab6:	69b8      	ldr	r0, [r7, #24]
 8014ab8:	f001 fb20 	bl	80160fc <pxPortInitialiseStack>
 8014abc:	4602      	mov	r2, r0
 8014abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ac0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d002      	beq.n	8014ace <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ace:	bf00      	nop
 8014ad0:	3720      	adds	r7, #32
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
	...

08014ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014ae0:	f001 fc38 	bl	8016354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014ae4:	4b2d      	ldr	r3, [pc, #180]	; (8014b9c <prvAddNewTaskToReadyList+0xc4>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	4a2c      	ldr	r2, [pc, #176]	; (8014b9c <prvAddNewTaskToReadyList+0xc4>)
 8014aec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014aee:	4b2c      	ldr	r3, [pc, #176]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d109      	bne.n	8014b0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014af6:	4a2a      	ldr	r2, [pc, #168]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014afc:	4b27      	ldr	r3, [pc, #156]	; (8014b9c <prvAddNewTaskToReadyList+0xc4>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d110      	bne.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014b04:	f000 fdd6 	bl	80156b4 <prvInitialiseTaskLists>
 8014b08:	e00d      	b.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014b0a:	4b26      	ldr	r3, [pc, #152]	; (8014ba4 <prvAddNewTaskToReadyList+0xcc>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d109      	bne.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014b12:	4b23      	ldr	r3, [pc, #140]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d802      	bhi.n	8014b26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014b20:	4a1f      	ldr	r2, [pc, #124]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014b26:	4b20      	ldr	r3, [pc, #128]	; (8014ba8 <prvAddNewTaskToReadyList+0xd0>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	4a1e      	ldr	r2, [pc, #120]	; (8014ba8 <prvAddNewTaskToReadyList+0xd0>)
 8014b2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014b30:	4b1d      	ldr	r3, [pc, #116]	; (8014ba8 <prvAddNewTaskToReadyList+0xd0>)
 8014b32:	681a      	ldr	r2, [r3, #0]
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b3c:	4b1b      	ldr	r3, [pc, #108]	; (8014bac <prvAddNewTaskToReadyList+0xd4>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d903      	bls.n	8014b4c <prvAddNewTaskToReadyList+0x74>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b48:	4a18      	ldr	r2, [pc, #96]	; (8014bac <prvAddNewTaskToReadyList+0xd4>)
 8014b4a:	6013      	str	r3, [r2, #0]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b50:	4613      	mov	r3, r2
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4413      	add	r3, r2
 8014b56:	009b      	lsls	r3, r3, #2
 8014b58:	4a15      	ldr	r2, [pc, #84]	; (8014bb0 <prvAddNewTaskToReadyList+0xd8>)
 8014b5a:	441a      	add	r2, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	3304      	adds	r3, #4
 8014b60:	4619      	mov	r1, r3
 8014b62:	4610      	mov	r0, r2
 8014b64:	f7ff f859 	bl	8013c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014b68:	f001 fc24 	bl	80163b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014b6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ba4 <prvAddNewTaskToReadyList+0xcc>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d00e      	beq.n	8014b92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014b74:	4b0a      	ldr	r3, [pc, #40]	; (8014ba0 <prvAddNewTaskToReadyList+0xc8>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d207      	bcs.n	8014b92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014b82:	4b0c      	ldr	r3, [pc, #48]	; (8014bb4 <prvAddNewTaskToReadyList+0xdc>)
 8014b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b88:	601a      	str	r2, [r3, #0]
 8014b8a:	f3bf 8f4f 	dsb	sy
 8014b8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014b92:	bf00      	nop
 8014b94:	3708      	adds	r7, #8
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	24001cb8 	.word	0x24001cb8
 8014ba0:	240017e4 	.word	0x240017e4
 8014ba4:	24001cc4 	.word	0x24001cc4
 8014ba8:	24001cd4 	.word	0x24001cd4
 8014bac:	24001cc0 	.word	0x24001cc0
 8014bb0:	240017e8 	.word	0x240017e8
 8014bb4:	e000ed04 	.word	0xe000ed04

08014bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b084      	sub	sp, #16
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d017      	beq.n	8014bfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014bca:	4b13      	ldr	r3, [pc, #76]	; (8014c18 <vTaskDelay+0x60>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d00a      	beq.n	8014be8 <vTaskDelay+0x30>
	__asm volatile
 8014bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd6:	f383 8811 	msr	BASEPRI, r3
 8014bda:	f3bf 8f6f 	isb	sy
 8014bde:	f3bf 8f4f 	dsb	sy
 8014be2:	60bb      	str	r3, [r7, #8]
}
 8014be4:	bf00      	nop
 8014be6:	e7fe      	b.n	8014be6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014be8:	f000 f99a 	bl	8014f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014bec:	2100      	movs	r1, #0
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f000 fec2 	bl	8015978 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014bf4:	f000 f9a2 	bl	8014f3c <xTaskResumeAll>
 8014bf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d107      	bne.n	8014c10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014c00:	4b06      	ldr	r3, [pc, #24]	; (8014c1c <vTaskDelay+0x64>)
 8014c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c06:	601a      	str	r2, [r3, #0]
 8014c08:	f3bf 8f4f 	dsb	sy
 8014c0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014c10:	bf00      	nop
 8014c12:	3710      	adds	r7, #16
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	24001ce0 	.word	0x24001ce0
 8014c1c:	e000ed04 	.word	0xe000ed04

08014c20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b084      	sub	sp, #16
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014c28:	f001 fb94 	bl	8016354 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d102      	bne.n	8014c38 <vTaskSuspend+0x18>
 8014c32:	4b30      	ldr	r3, [pc, #192]	; (8014cf4 <vTaskSuspend+0xd4>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	e000      	b.n	8014c3a <vTaskSuspend+0x1a>
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	3304      	adds	r3, #4
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7ff f847 	bl	8013cd4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d004      	beq.n	8014c58 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	3318      	adds	r3, #24
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7ff f83e 	bl	8013cd4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	3304      	adds	r3, #4
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	4826      	ldr	r0, [pc, #152]	; (8014cf8 <vTaskSuspend+0xd8>)
 8014c60:	f7fe ffdb 	bl	8013c1a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d103      	bne.n	8014c78 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2200      	movs	r2, #0
 8014c74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014c78:	f001 fb9c 	bl	80163b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014c7c:	4b1f      	ldr	r3, [pc, #124]	; (8014cfc <vTaskSuspend+0xdc>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d005      	beq.n	8014c90 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014c84:	f001 fb66 	bl	8016354 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014c88:	f000 fdb2 	bl	80157f0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014c8c:	f001 fb92 	bl	80163b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014c90:	4b18      	ldr	r3, [pc, #96]	; (8014cf4 <vTaskSuspend+0xd4>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	68fa      	ldr	r2, [r7, #12]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d127      	bne.n	8014cea <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014c9a:	4b18      	ldr	r3, [pc, #96]	; (8014cfc <vTaskSuspend+0xdc>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d017      	beq.n	8014cd2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014ca2:	4b17      	ldr	r3, [pc, #92]	; (8014d00 <vTaskSuspend+0xe0>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d00a      	beq.n	8014cc0 <vTaskSuspend+0xa0>
	__asm volatile
 8014caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cae:	f383 8811 	msr	BASEPRI, r3
 8014cb2:	f3bf 8f6f 	isb	sy
 8014cb6:	f3bf 8f4f 	dsb	sy
 8014cba:	60bb      	str	r3, [r7, #8]
}
 8014cbc:	bf00      	nop
 8014cbe:	e7fe      	b.n	8014cbe <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014cc0:	4b10      	ldr	r3, [pc, #64]	; (8014d04 <vTaskSuspend+0xe4>)
 8014cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cc6:	601a      	str	r2, [r3, #0]
 8014cc8:	f3bf 8f4f 	dsb	sy
 8014ccc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014cd0:	e00b      	b.n	8014cea <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014cd2:	4b09      	ldr	r3, [pc, #36]	; (8014cf8 <vTaskSuspend+0xd8>)
 8014cd4:	681a      	ldr	r2, [r3, #0]
 8014cd6:	4b0c      	ldr	r3, [pc, #48]	; (8014d08 <vTaskSuspend+0xe8>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	429a      	cmp	r2, r3
 8014cdc:	d103      	bne.n	8014ce6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014cde:	4b05      	ldr	r3, [pc, #20]	; (8014cf4 <vTaskSuspend+0xd4>)
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	601a      	str	r2, [r3, #0]
	}
 8014ce4:	e001      	b.n	8014cea <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014ce6:	f000 fa99 	bl	801521c <vTaskSwitchContext>
	}
 8014cea:	bf00      	nop
 8014cec:	3710      	adds	r7, #16
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	240017e4 	.word	0x240017e4
 8014cf8:	24001ca4 	.word	0x24001ca4
 8014cfc:	24001cc4 	.word	0x24001cc4
 8014d00:	24001ce0 	.word	0x24001ce0
 8014d04:	e000ed04 	.word	0xe000ed04
 8014d08:	24001cb8 	.word	0x24001cb8

08014d0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b087      	sub	sp, #28
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014d14:	2300      	movs	r3, #0
 8014d16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d10a      	bne.n	8014d38 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d26:	f383 8811 	msr	BASEPRI, r3
 8014d2a:	f3bf 8f6f 	isb	sy
 8014d2e:	f3bf 8f4f 	dsb	sy
 8014d32:	60fb      	str	r3, [r7, #12]
}
 8014d34:	bf00      	nop
 8014d36:	e7fe      	b.n	8014d36 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	695b      	ldr	r3, [r3, #20]
 8014d3c:	4a0a      	ldr	r2, [pc, #40]	; (8014d68 <prvTaskIsTaskSuspended+0x5c>)
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d10a      	bne.n	8014d58 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d46:	4a09      	ldr	r2, [pc, #36]	; (8014d6c <prvTaskIsTaskSuspended+0x60>)
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d005      	beq.n	8014d58 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d101      	bne.n	8014d58 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014d54:	2301      	movs	r3, #1
 8014d56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d58:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	371c      	adds	r7, #28
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
 8014d66:	bf00      	nop
 8014d68:	24001ca4 	.word	0x24001ca4
 8014d6c:	24001c78 	.word	0x24001c78

08014d70 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b08a      	sub	sp, #40	; 0x28
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10a      	bne.n	8014d9c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8a:	f383 8811 	msr	BASEPRI, r3
 8014d8e:	f3bf 8f6f 	isb	sy
 8014d92:	f3bf 8f4f 	dsb	sy
 8014d96:	61bb      	str	r3, [r7, #24]
}
 8014d98:	bf00      	nop
 8014d9a:	e7fe      	b.n	8014d9a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014d9c:	f001 fbbc 	bl	8016518 <vPortValidateInterruptPriority>
	__asm volatile
 8014da0:	f3ef 8211 	mrs	r2, BASEPRI
 8014da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da8:	f383 8811 	msr	BASEPRI, r3
 8014dac:	f3bf 8f6f 	isb	sy
 8014db0:	f3bf 8f4f 	dsb	sy
 8014db4:	617a      	str	r2, [r7, #20]
 8014db6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014db8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014dba:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014dbc:	6a38      	ldr	r0, [r7, #32]
 8014dbe:	f7ff ffa5 	bl	8014d0c <prvTaskIsTaskSuspended>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d030      	beq.n	8014e2a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014dc8:	4b1d      	ldr	r3, [pc, #116]	; (8014e40 <xTaskResumeFromISR+0xd0>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d126      	bne.n	8014e1e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014dd0:	6a3b      	ldr	r3, [r7, #32]
 8014dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dd4:	4b1b      	ldr	r3, [pc, #108]	; (8014e44 <xTaskResumeFromISR+0xd4>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d301      	bcc.n	8014de2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014dde:	2301      	movs	r3, #1
 8014de0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014de2:	6a3b      	ldr	r3, [r7, #32]
 8014de4:	3304      	adds	r3, #4
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7fe ff74 	bl	8013cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014dec:	6a3b      	ldr	r3, [r7, #32]
 8014dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014df0:	4b15      	ldr	r3, [pc, #84]	; (8014e48 <xTaskResumeFromISR+0xd8>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d903      	bls.n	8014e00 <xTaskResumeFromISR+0x90>
 8014df8:	6a3b      	ldr	r3, [r7, #32]
 8014dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dfc:	4a12      	ldr	r2, [pc, #72]	; (8014e48 <xTaskResumeFromISR+0xd8>)
 8014dfe:	6013      	str	r3, [r2, #0]
 8014e00:	6a3b      	ldr	r3, [r7, #32]
 8014e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e04:	4613      	mov	r3, r2
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	4413      	add	r3, r2
 8014e0a:	009b      	lsls	r3, r3, #2
 8014e0c:	4a0f      	ldr	r2, [pc, #60]	; (8014e4c <xTaskResumeFromISR+0xdc>)
 8014e0e:	441a      	add	r2, r3
 8014e10:	6a3b      	ldr	r3, [r7, #32]
 8014e12:	3304      	adds	r3, #4
 8014e14:	4619      	mov	r1, r3
 8014e16:	4610      	mov	r0, r2
 8014e18:	f7fe feff 	bl	8013c1a <vListInsertEnd>
 8014e1c:	e005      	b.n	8014e2a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014e1e:	6a3b      	ldr	r3, [r7, #32]
 8014e20:	3318      	adds	r3, #24
 8014e22:	4619      	mov	r1, r3
 8014e24:	480a      	ldr	r0, [pc, #40]	; (8014e50 <xTaskResumeFromISR+0xe0>)
 8014e26:	f7fe fef8 	bl	8013c1a <vListInsertEnd>
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	f383 8811 	msr	BASEPRI, r3
}
 8014e34:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3728      	adds	r7, #40	; 0x28
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	24001ce0 	.word	0x24001ce0
 8014e44:	240017e4 	.word	0x240017e4
 8014e48:	24001cc0 	.word	0x24001cc0
 8014e4c:	240017e8 	.word	0x240017e8
 8014e50:	24001c78 	.word	0x24001c78

08014e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b08a      	sub	sp, #40	; 0x28
 8014e58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014e62:	463a      	mov	r2, r7
 8014e64:	1d39      	adds	r1, r7, #4
 8014e66:	f107 0308 	add.w	r3, r7, #8
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fe fc08 	bl	8013680 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014e70:	6839      	ldr	r1, [r7, #0]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	68ba      	ldr	r2, [r7, #8]
 8014e76:	9202      	str	r2, [sp, #8]
 8014e78:	9301      	str	r3, [sp, #4]
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	9300      	str	r3, [sp, #0]
 8014e7e:	2300      	movs	r3, #0
 8014e80:	460a      	mov	r2, r1
 8014e82:	4921      	ldr	r1, [pc, #132]	; (8014f08 <vTaskStartScheduler+0xb4>)
 8014e84:	4821      	ldr	r0, [pc, #132]	; (8014f0c <vTaskStartScheduler+0xb8>)
 8014e86:	f7ff fcf5 	bl	8014874 <xTaskCreateStatic>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	4a20      	ldr	r2, [pc, #128]	; (8014f10 <vTaskStartScheduler+0xbc>)
 8014e8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014e90:	4b1f      	ldr	r3, [pc, #124]	; (8014f10 <vTaskStartScheduler+0xbc>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d002      	beq.n	8014e9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014e98:	2301      	movs	r3, #1
 8014e9a:	617b      	str	r3, [r7, #20]
 8014e9c:	e001      	b.n	8014ea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2b01      	cmp	r3, #1
 8014ea6:	d102      	bne.n	8014eae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014ea8:	f000 fdba 	bl	8015a20 <xTimerCreateTimerTask>
 8014eac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d116      	bne.n	8014ee2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb8:	f383 8811 	msr	BASEPRI, r3
 8014ebc:	f3bf 8f6f 	isb	sy
 8014ec0:	f3bf 8f4f 	dsb	sy
 8014ec4:	613b      	str	r3, [r7, #16]
}
 8014ec6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014ec8:	4b12      	ldr	r3, [pc, #72]	; (8014f14 <vTaskStartScheduler+0xc0>)
 8014eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ece:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014ed0:	4b11      	ldr	r3, [pc, #68]	; (8014f18 <vTaskStartScheduler+0xc4>)
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014ed6:	4b11      	ldr	r3, [pc, #68]	; (8014f1c <vTaskStartScheduler+0xc8>)
 8014ed8:	2200      	movs	r2, #0
 8014eda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014edc:	f001 f998 	bl	8016210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014ee0:	e00e      	b.n	8014f00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ee8:	d10a      	bne.n	8014f00 <vTaskStartScheduler+0xac>
	__asm volatile
 8014eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eee:	f383 8811 	msr	BASEPRI, r3
 8014ef2:	f3bf 8f6f 	isb	sy
 8014ef6:	f3bf 8f4f 	dsb	sy
 8014efa:	60fb      	str	r3, [r7, #12]
}
 8014efc:	bf00      	nop
 8014efe:	e7fe      	b.n	8014efe <vTaskStartScheduler+0xaa>
}
 8014f00:	bf00      	nop
 8014f02:	3718      	adds	r7, #24
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	08017694 	.word	0x08017694
 8014f0c:	08015685 	.word	0x08015685
 8014f10:	24001cdc 	.word	0x24001cdc
 8014f14:	24001cd8 	.word	0x24001cd8
 8014f18:	24001cc4 	.word	0x24001cc4
 8014f1c:	24001cbc 	.word	0x24001cbc

08014f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014f20:	b480      	push	{r7}
 8014f22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014f24:	4b04      	ldr	r3, [pc, #16]	; (8014f38 <vTaskSuspendAll+0x18>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	3301      	adds	r3, #1
 8014f2a:	4a03      	ldr	r2, [pc, #12]	; (8014f38 <vTaskSuspendAll+0x18>)
 8014f2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014f2e:	bf00      	nop
 8014f30:	46bd      	mov	sp, r7
 8014f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f36:	4770      	bx	lr
 8014f38:	24001ce0 	.word	0x24001ce0

08014f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014f42:	2300      	movs	r3, #0
 8014f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014f46:	2300      	movs	r3, #0
 8014f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014f4a:	4b42      	ldr	r3, [pc, #264]	; (8015054 <xTaskResumeAll+0x118>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d10a      	bne.n	8014f68 <xTaskResumeAll+0x2c>
	__asm volatile
 8014f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f56:	f383 8811 	msr	BASEPRI, r3
 8014f5a:	f3bf 8f6f 	isb	sy
 8014f5e:	f3bf 8f4f 	dsb	sy
 8014f62:	603b      	str	r3, [r7, #0]
}
 8014f64:	bf00      	nop
 8014f66:	e7fe      	b.n	8014f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014f68:	f001 f9f4 	bl	8016354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014f6c:	4b39      	ldr	r3, [pc, #228]	; (8015054 <xTaskResumeAll+0x118>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	3b01      	subs	r3, #1
 8014f72:	4a38      	ldr	r2, [pc, #224]	; (8015054 <xTaskResumeAll+0x118>)
 8014f74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f76:	4b37      	ldr	r3, [pc, #220]	; (8015054 <xTaskResumeAll+0x118>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d162      	bne.n	8015044 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014f7e:	4b36      	ldr	r3, [pc, #216]	; (8015058 <xTaskResumeAll+0x11c>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d05e      	beq.n	8015044 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f86:	e02f      	b.n	8014fe8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f88:	4b34      	ldr	r3, [pc, #208]	; (801505c <xTaskResumeAll+0x120>)
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	3318      	adds	r3, #24
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7fe fe9d 	bl	8013cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fe fe98 	bl	8013cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fa8:	4b2d      	ldr	r3, [pc, #180]	; (8015060 <xTaskResumeAll+0x124>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d903      	bls.n	8014fb8 <xTaskResumeAll+0x7c>
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fb4:	4a2a      	ldr	r2, [pc, #168]	; (8015060 <xTaskResumeAll+0x124>)
 8014fb6:	6013      	str	r3, [r2, #0]
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	009b      	lsls	r3, r3, #2
 8014fc0:	4413      	add	r3, r2
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	4a27      	ldr	r2, [pc, #156]	; (8015064 <xTaskResumeAll+0x128>)
 8014fc6:	441a      	add	r2, r3
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	3304      	adds	r3, #4
 8014fcc:	4619      	mov	r1, r3
 8014fce:	4610      	mov	r0, r2
 8014fd0:	f7fe fe23 	bl	8013c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd8:	4b23      	ldr	r3, [pc, #140]	; (8015068 <xTaskResumeAll+0x12c>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d302      	bcc.n	8014fe8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014fe2:	4b22      	ldr	r3, [pc, #136]	; (801506c <xTaskResumeAll+0x130>)
 8014fe4:	2201      	movs	r2, #1
 8014fe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014fe8:	4b1c      	ldr	r3, [pc, #112]	; (801505c <xTaskResumeAll+0x120>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d1cb      	bne.n	8014f88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d001      	beq.n	8014ffa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014ff6:	f000 fbfb 	bl	80157f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014ffa:	4b1d      	ldr	r3, [pc, #116]	; (8015070 <xTaskResumeAll+0x134>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d010      	beq.n	8015028 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015006:	f000 f847 	bl	8015098 <xTaskIncrementTick>
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	d002      	beq.n	8015016 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015010:	4b16      	ldr	r3, [pc, #88]	; (801506c <xTaskResumeAll+0x130>)
 8015012:	2201      	movs	r2, #1
 8015014:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	3b01      	subs	r3, #1
 801501a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d1f1      	bne.n	8015006 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015022:	4b13      	ldr	r3, [pc, #76]	; (8015070 <xTaskResumeAll+0x134>)
 8015024:	2200      	movs	r2, #0
 8015026:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015028:	4b10      	ldr	r3, [pc, #64]	; (801506c <xTaskResumeAll+0x130>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d009      	beq.n	8015044 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015030:	2301      	movs	r3, #1
 8015032:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015034:	4b0f      	ldr	r3, [pc, #60]	; (8015074 <xTaskResumeAll+0x138>)
 8015036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801503a:	601a      	str	r2, [r3, #0]
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015044:	f001 f9b6 	bl	80163b4 <vPortExitCritical>

	return xAlreadyYielded;
 8015048:	68bb      	ldr	r3, [r7, #8]
}
 801504a:	4618      	mov	r0, r3
 801504c:	3710      	adds	r7, #16
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
 8015052:	bf00      	nop
 8015054:	24001ce0 	.word	0x24001ce0
 8015058:	24001cb8 	.word	0x24001cb8
 801505c:	24001c78 	.word	0x24001c78
 8015060:	24001cc0 	.word	0x24001cc0
 8015064:	240017e8 	.word	0x240017e8
 8015068:	240017e4 	.word	0x240017e4
 801506c:	24001ccc 	.word	0x24001ccc
 8015070:	24001cc8 	.word	0x24001cc8
 8015074:	e000ed04 	.word	0xe000ed04

08015078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015078:	b480      	push	{r7}
 801507a:	b083      	sub	sp, #12
 801507c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801507e:	4b05      	ldr	r3, [pc, #20]	; (8015094 <xTaskGetTickCount+0x1c>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015084:	687b      	ldr	r3, [r7, #4]
}
 8015086:	4618      	mov	r0, r3
 8015088:	370c      	adds	r7, #12
 801508a:	46bd      	mov	sp, r7
 801508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015090:	4770      	bx	lr
 8015092:	bf00      	nop
 8015094:	24001cbc 	.word	0x24001cbc

08015098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b086      	sub	sp, #24
 801509c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801509e:	2300      	movs	r3, #0
 80150a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150a2:	4b53      	ldr	r3, [pc, #332]	; (80151f0 <xTaskIncrementTick+0x158>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	f040 8095 	bne.w	80151d6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80150ac:	4b51      	ldr	r3, [pc, #324]	; (80151f4 <xTaskIncrementTick+0x15c>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	3301      	adds	r3, #1
 80150b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80150b4:	4a4f      	ldr	r2, [pc, #316]	; (80151f4 <xTaskIncrementTick+0x15c>)
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d120      	bne.n	8015102 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80150c0:	4b4d      	ldr	r3, [pc, #308]	; (80151f8 <xTaskIncrementTick+0x160>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d00a      	beq.n	80150e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80150ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ce:	f383 8811 	msr	BASEPRI, r3
 80150d2:	f3bf 8f6f 	isb	sy
 80150d6:	f3bf 8f4f 	dsb	sy
 80150da:	603b      	str	r3, [r7, #0]
}
 80150dc:	bf00      	nop
 80150de:	e7fe      	b.n	80150de <xTaskIncrementTick+0x46>
 80150e0:	4b45      	ldr	r3, [pc, #276]	; (80151f8 <xTaskIncrementTick+0x160>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	60fb      	str	r3, [r7, #12]
 80150e6:	4b45      	ldr	r3, [pc, #276]	; (80151fc <xTaskIncrementTick+0x164>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	4a43      	ldr	r2, [pc, #268]	; (80151f8 <xTaskIncrementTick+0x160>)
 80150ec:	6013      	str	r3, [r2, #0]
 80150ee:	4a43      	ldr	r2, [pc, #268]	; (80151fc <xTaskIncrementTick+0x164>)
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	6013      	str	r3, [r2, #0]
 80150f4:	4b42      	ldr	r3, [pc, #264]	; (8015200 <xTaskIncrementTick+0x168>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	3301      	adds	r3, #1
 80150fa:	4a41      	ldr	r2, [pc, #260]	; (8015200 <xTaskIncrementTick+0x168>)
 80150fc:	6013      	str	r3, [r2, #0]
 80150fe:	f000 fb77 	bl	80157f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015102:	4b40      	ldr	r3, [pc, #256]	; (8015204 <xTaskIncrementTick+0x16c>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	693a      	ldr	r2, [r7, #16]
 8015108:	429a      	cmp	r2, r3
 801510a:	d349      	bcc.n	80151a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801510c:	4b3a      	ldr	r3, [pc, #232]	; (80151f8 <xTaskIncrementTick+0x160>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d104      	bne.n	8015120 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015116:	4b3b      	ldr	r3, [pc, #236]	; (8015204 <xTaskIncrementTick+0x16c>)
 8015118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801511c:	601a      	str	r2, [r3, #0]
					break;
 801511e:	e03f      	b.n	80151a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015120:	4b35      	ldr	r3, [pc, #212]	; (80151f8 <xTaskIncrementTick+0x160>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	68db      	ldr	r3, [r3, #12]
 8015126:	68db      	ldr	r3, [r3, #12]
 8015128:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015130:	693a      	ldr	r2, [r7, #16]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	429a      	cmp	r2, r3
 8015136:	d203      	bcs.n	8015140 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015138:	4a32      	ldr	r2, [pc, #200]	; (8015204 <xTaskIncrementTick+0x16c>)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801513e:	e02f      	b.n	80151a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	3304      	adds	r3, #4
 8015144:	4618      	mov	r0, r3
 8015146:	f7fe fdc5 	bl	8013cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801514e:	2b00      	cmp	r3, #0
 8015150:	d004      	beq.n	801515c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	3318      	adds	r3, #24
 8015156:	4618      	mov	r0, r3
 8015158:	f7fe fdbc 	bl	8013cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015160:	4b29      	ldr	r3, [pc, #164]	; (8015208 <xTaskIncrementTick+0x170>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	429a      	cmp	r2, r3
 8015166:	d903      	bls.n	8015170 <xTaskIncrementTick+0xd8>
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801516c:	4a26      	ldr	r2, [pc, #152]	; (8015208 <xTaskIncrementTick+0x170>)
 801516e:	6013      	str	r3, [r2, #0]
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015174:	4613      	mov	r3, r2
 8015176:	009b      	lsls	r3, r3, #2
 8015178:	4413      	add	r3, r2
 801517a:	009b      	lsls	r3, r3, #2
 801517c:	4a23      	ldr	r2, [pc, #140]	; (801520c <xTaskIncrementTick+0x174>)
 801517e:	441a      	add	r2, r3
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	3304      	adds	r3, #4
 8015184:	4619      	mov	r1, r3
 8015186:	4610      	mov	r0, r2
 8015188:	f7fe fd47 	bl	8013c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015190:	4b1f      	ldr	r3, [pc, #124]	; (8015210 <xTaskIncrementTick+0x178>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015196:	429a      	cmp	r2, r3
 8015198:	d3b8      	bcc.n	801510c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801519a:	2301      	movs	r3, #1
 801519c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801519e:	e7b5      	b.n	801510c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80151a0:	4b1b      	ldr	r3, [pc, #108]	; (8015210 <xTaskIncrementTick+0x178>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151a6:	4919      	ldr	r1, [pc, #100]	; (801520c <xTaskIncrementTick+0x174>)
 80151a8:	4613      	mov	r3, r2
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	4413      	add	r3, r2
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	440b      	add	r3, r1
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	2b01      	cmp	r3, #1
 80151b6:	d901      	bls.n	80151bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80151b8:	2301      	movs	r3, #1
 80151ba:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80151bc:	4b15      	ldr	r3, [pc, #84]	; (8015214 <xTaskIncrementTick+0x17c>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d101      	bne.n	80151c8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80151c4:	f7eb fa0e 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80151c8:	4b13      	ldr	r3, [pc, #76]	; (8015218 <xTaskIncrementTick+0x180>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d009      	beq.n	80151e4 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80151d0:	2301      	movs	r3, #1
 80151d2:	617b      	str	r3, [r7, #20]
 80151d4:	e006      	b.n	80151e4 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80151d6:	4b0f      	ldr	r3, [pc, #60]	; (8015214 <xTaskIncrementTick+0x17c>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	3301      	adds	r3, #1
 80151dc:	4a0d      	ldr	r2, [pc, #52]	; (8015214 <xTaskIncrementTick+0x17c>)
 80151de:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80151e0:	f7eb fa00 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80151e4:	697b      	ldr	r3, [r7, #20]
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3718      	adds	r7, #24
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	24001ce0 	.word	0x24001ce0
 80151f4:	24001cbc 	.word	0x24001cbc
 80151f8:	24001c70 	.word	0x24001c70
 80151fc:	24001c74 	.word	0x24001c74
 8015200:	24001cd0 	.word	0x24001cd0
 8015204:	24001cd8 	.word	0x24001cd8
 8015208:	24001cc0 	.word	0x24001cc0
 801520c:	240017e8 	.word	0x240017e8
 8015210:	240017e4 	.word	0x240017e4
 8015214:	24001cc8 	.word	0x24001cc8
 8015218:	24001ccc 	.word	0x24001ccc

0801521c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801521c:	b480      	push	{r7}
 801521e:	b085      	sub	sp, #20
 8015220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015222:	4b28      	ldr	r3, [pc, #160]	; (80152c4 <vTaskSwitchContext+0xa8>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d003      	beq.n	8015232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801522a:	4b27      	ldr	r3, [pc, #156]	; (80152c8 <vTaskSwitchContext+0xac>)
 801522c:	2201      	movs	r2, #1
 801522e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015230:	e041      	b.n	80152b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015232:	4b25      	ldr	r3, [pc, #148]	; (80152c8 <vTaskSwitchContext+0xac>)
 8015234:	2200      	movs	r2, #0
 8015236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015238:	4b24      	ldr	r3, [pc, #144]	; (80152cc <vTaskSwitchContext+0xb0>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	60fb      	str	r3, [r7, #12]
 801523e:	e010      	b.n	8015262 <vTaskSwitchContext+0x46>
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d10a      	bne.n	801525c <vTaskSwitchContext+0x40>
	__asm volatile
 8015246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801524a:	f383 8811 	msr	BASEPRI, r3
 801524e:	f3bf 8f6f 	isb	sy
 8015252:	f3bf 8f4f 	dsb	sy
 8015256:	607b      	str	r3, [r7, #4]
}
 8015258:	bf00      	nop
 801525a:	e7fe      	b.n	801525a <vTaskSwitchContext+0x3e>
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	3b01      	subs	r3, #1
 8015260:	60fb      	str	r3, [r7, #12]
 8015262:	491b      	ldr	r1, [pc, #108]	; (80152d0 <vTaskSwitchContext+0xb4>)
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	4613      	mov	r3, r2
 8015268:	009b      	lsls	r3, r3, #2
 801526a:	4413      	add	r3, r2
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	440b      	add	r3, r1
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d0e4      	beq.n	8015240 <vTaskSwitchContext+0x24>
 8015276:	68fa      	ldr	r2, [r7, #12]
 8015278:	4613      	mov	r3, r2
 801527a:	009b      	lsls	r3, r3, #2
 801527c:	4413      	add	r3, r2
 801527e:	009b      	lsls	r3, r3, #2
 8015280:	4a13      	ldr	r2, [pc, #76]	; (80152d0 <vTaskSwitchContext+0xb4>)
 8015282:	4413      	add	r3, r2
 8015284:	60bb      	str	r3, [r7, #8]
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	685a      	ldr	r2, [r3, #4]
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	605a      	str	r2, [r3, #4]
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	685a      	ldr	r2, [r3, #4]
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	3308      	adds	r3, #8
 8015298:	429a      	cmp	r2, r3
 801529a:	d104      	bne.n	80152a6 <vTaskSwitchContext+0x8a>
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	685b      	ldr	r3, [r3, #4]
 80152a0:	685a      	ldr	r2, [r3, #4]
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	605a      	str	r2, [r3, #4]
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	685b      	ldr	r3, [r3, #4]
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	4a09      	ldr	r2, [pc, #36]	; (80152d4 <vTaskSwitchContext+0xb8>)
 80152ae:	6013      	str	r3, [r2, #0]
 80152b0:	4a06      	ldr	r2, [pc, #24]	; (80152cc <vTaskSwitchContext+0xb0>)
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6013      	str	r3, [r2, #0]
}
 80152b6:	bf00      	nop
 80152b8:	3714      	adds	r7, #20
 80152ba:	46bd      	mov	sp, r7
 80152bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c0:	4770      	bx	lr
 80152c2:	bf00      	nop
 80152c4:	24001ce0 	.word	0x24001ce0
 80152c8:	24001ccc 	.word	0x24001ccc
 80152cc:	24001cc0 	.word	0x24001cc0
 80152d0:	240017e8 	.word	0x240017e8
 80152d4:	240017e4 	.word	0x240017e4

080152d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b084      	sub	sp, #16
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d10a      	bne.n	80152fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80152e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ec:	f383 8811 	msr	BASEPRI, r3
 80152f0:	f3bf 8f6f 	isb	sy
 80152f4:	f3bf 8f4f 	dsb	sy
 80152f8:	60fb      	str	r3, [r7, #12]
}
 80152fa:	bf00      	nop
 80152fc:	e7fe      	b.n	80152fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80152fe:	4b07      	ldr	r3, [pc, #28]	; (801531c <vTaskPlaceOnEventList+0x44>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	3318      	adds	r3, #24
 8015304:	4619      	mov	r1, r3
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f7fe fcab 	bl	8013c62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801530c:	2101      	movs	r1, #1
 801530e:	6838      	ldr	r0, [r7, #0]
 8015310:	f000 fb32 	bl	8015978 <prvAddCurrentTaskToDelayedList>
}
 8015314:	bf00      	nop
 8015316:	3710      	adds	r7, #16
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	240017e4 	.word	0x240017e4

08015320 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b086      	sub	sp, #24
 8015324:	af00      	add	r7, sp, #0
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d10a      	bne.n	8015348 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8015332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015336:	f383 8811 	msr	BASEPRI, r3
 801533a:	f3bf 8f6f 	isb	sy
 801533e:	f3bf 8f4f 	dsb	sy
 8015342:	617b      	str	r3, [r7, #20]
}
 8015344:	bf00      	nop
 8015346:	e7fe      	b.n	8015346 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015348:	4b11      	ldr	r3, [pc, #68]	; (8015390 <vTaskPlaceOnUnorderedEventList+0x70>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d10a      	bne.n	8015366 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015354:	f383 8811 	msr	BASEPRI, r3
 8015358:	f3bf 8f6f 	isb	sy
 801535c:	f3bf 8f4f 	dsb	sy
 8015360:	613b      	str	r3, [r7, #16]
}
 8015362:	bf00      	nop
 8015364:	e7fe      	b.n	8015364 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015366:	4b0b      	ldr	r3, [pc, #44]	; (8015394 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	68ba      	ldr	r2, [r7, #8]
 801536c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015370:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015372:	4b08      	ldr	r3, [pc, #32]	; (8015394 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	3318      	adds	r3, #24
 8015378:	4619      	mov	r1, r3
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	f7fe fc4d 	bl	8013c1a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015380:	2101      	movs	r1, #1
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f000 faf8 	bl	8015978 <prvAddCurrentTaskToDelayedList>
}
 8015388:	bf00      	nop
 801538a:	3718      	adds	r7, #24
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	24001ce0 	.word	0x24001ce0
 8015394:	240017e4 	.word	0x240017e4

08015398 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015398:	b580      	push	{r7, lr}
 801539a:	b086      	sub	sp, #24
 801539c:	af00      	add	r7, sp, #0
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d10a      	bne.n	80153c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80153aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ae:	f383 8811 	msr	BASEPRI, r3
 80153b2:	f3bf 8f6f 	isb	sy
 80153b6:	f3bf 8f4f 	dsb	sy
 80153ba:	617b      	str	r3, [r7, #20]
}
 80153bc:	bf00      	nop
 80153be:	e7fe      	b.n	80153be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80153c0:	4b0a      	ldr	r3, [pc, #40]	; (80153ec <vTaskPlaceOnEventListRestricted+0x54>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	3318      	adds	r3, #24
 80153c6:	4619      	mov	r1, r3
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f7fe fc26 	bl	8013c1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d002      	beq.n	80153da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80153d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80153da:	6879      	ldr	r1, [r7, #4]
 80153dc:	68b8      	ldr	r0, [r7, #8]
 80153de:	f000 facb 	bl	8015978 <prvAddCurrentTaskToDelayedList>
	}
 80153e2:	bf00      	nop
 80153e4:	3718      	adds	r7, #24
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	240017e4 	.word	0x240017e4

080153f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b086      	sub	sp, #24
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	68db      	ldr	r3, [r3, #12]
 80153fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d10a      	bne.n	801541c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801540a:	f383 8811 	msr	BASEPRI, r3
 801540e:	f3bf 8f6f 	isb	sy
 8015412:	f3bf 8f4f 	dsb	sy
 8015416:	60fb      	str	r3, [r7, #12]
}
 8015418:	bf00      	nop
 801541a:	e7fe      	b.n	801541a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	3318      	adds	r3, #24
 8015420:	4618      	mov	r0, r3
 8015422:	f7fe fc57 	bl	8013cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015426:	4b1e      	ldr	r3, [pc, #120]	; (80154a0 <xTaskRemoveFromEventList+0xb0>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d11d      	bne.n	801546a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	3304      	adds	r3, #4
 8015432:	4618      	mov	r0, r3
 8015434:	f7fe fc4e 	bl	8013cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015438:	693b      	ldr	r3, [r7, #16]
 801543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801543c:	4b19      	ldr	r3, [pc, #100]	; (80154a4 <xTaskRemoveFromEventList+0xb4>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	429a      	cmp	r2, r3
 8015442:	d903      	bls.n	801544c <xTaskRemoveFromEventList+0x5c>
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015448:	4a16      	ldr	r2, [pc, #88]	; (80154a4 <xTaskRemoveFromEventList+0xb4>)
 801544a:	6013      	str	r3, [r2, #0]
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015450:	4613      	mov	r3, r2
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	4413      	add	r3, r2
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	4a13      	ldr	r2, [pc, #76]	; (80154a8 <xTaskRemoveFromEventList+0xb8>)
 801545a:	441a      	add	r2, r3
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	3304      	adds	r3, #4
 8015460:	4619      	mov	r1, r3
 8015462:	4610      	mov	r0, r2
 8015464:	f7fe fbd9 	bl	8013c1a <vListInsertEnd>
 8015468:	e005      	b.n	8015476 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	3318      	adds	r3, #24
 801546e:	4619      	mov	r1, r3
 8015470:	480e      	ldr	r0, [pc, #56]	; (80154ac <xTaskRemoveFromEventList+0xbc>)
 8015472:	f7fe fbd2 	bl	8013c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801547a:	4b0d      	ldr	r3, [pc, #52]	; (80154b0 <xTaskRemoveFromEventList+0xc0>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015480:	429a      	cmp	r2, r3
 8015482:	d905      	bls.n	8015490 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015484:	2301      	movs	r3, #1
 8015486:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015488:	4b0a      	ldr	r3, [pc, #40]	; (80154b4 <xTaskRemoveFromEventList+0xc4>)
 801548a:	2201      	movs	r2, #1
 801548c:	601a      	str	r2, [r3, #0]
 801548e:	e001      	b.n	8015494 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015490:	2300      	movs	r3, #0
 8015492:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015494:	697b      	ldr	r3, [r7, #20]
}
 8015496:	4618      	mov	r0, r3
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	24001ce0 	.word	0x24001ce0
 80154a4:	24001cc0 	.word	0x24001cc0
 80154a8:	240017e8 	.word	0x240017e8
 80154ac:	24001c78 	.word	0x24001c78
 80154b0:	240017e4 	.word	0x240017e4
 80154b4:	24001ccc 	.word	0x24001ccc

080154b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b086      	sub	sp, #24
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
 80154c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80154c2:	4b29      	ldr	r3, [pc, #164]	; (8015568 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d10a      	bne.n	80154e0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80154ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ce:	f383 8811 	msr	BASEPRI, r3
 80154d2:	f3bf 8f6f 	isb	sy
 80154d6:	f3bf 8f4f 	dsb	sy
 80154da:	613b      	str	r3, [r7, #16]
}
 80154dc:	bf00      	nop
 80154de:	e7fe      	b.n	80154de <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d10a      	bne.n	801550c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80154f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154fa:	f383 8811 	msr	BASEPRI, r3
 80154fe:	f3bf 8f6f 	isb	sy
 8015502:	f3bf 8f4f 	dsb	sy
 8015506:	60fb      	str	r3, [r7, #12]
}
 8015508:	bf00      	nop
 801550a:	e7fe      	b.n	801550a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f7fe fbe1 	bl	8013cd4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	3304      	adds	r3, #4
 8015516:	4618      	mov	r0, r3
 8015518:	f7fe fbdc 	bl	8013cd4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015520:	4b12      	ldr	r3, [pc, #72]	; (801556c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	429a      	cmp	r2, r3
 8015526:	d903      	bls.n	8015530 <vTaskRemoveFromUnorderedEventList+0x78>
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801552c:	4a0f      	ldr	r2, [pc, #60]	; (801556c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801552e:	6013      	str	r3, [r2, #0]
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015534:	4613      	mov	r3, r2
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	4413      	add	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4a0c      	ldr	r2, [pc, #48]	; (8015570 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801553e:	441a      	add	r2, r3
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	3304      	adds	r3, #4
 8015544:	4619      	mov	r1, r3
 8015546:	4610      	mov	r0, r2
 8015548:	f7fe fb67 	bl	8013c1a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015550:	4b08      	ldr	r3, [pc, #32]	; (8015574 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015556:	429a      	cmp	r2, r3
 8015558:	d902      	bls.n	8015560 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801555a:	4b07      	ldr	r3, [pc, #28]	; (8015578 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801555c:	2201      	movs	r2, #1
 801555e:	601a      	str	r2, [r3, #0]
	}
}
 8015560:	bf00      	nop
 8015562:	3718      	adds	r7, #24
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}
 8015568:	24001ce0 	.word	0x24001ce0
 801556c:	24001cc0 	.word	0x24001cc0
 8015570:	240017e8 	.word	0x240017e8
 8015574:	240017e4 	.word	0x240017e4
 8015578:	24001ccc 	.word	0x24001ccc

0801557c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801557c:	b480      	push	{r7}
 801557e:	b083      	sub	sp, #12
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015584:	4b06      	ldr	r3, [pc, #24]	; (80155a0 <vTaskInternalSetTimeOutState+0x24>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801558c:	4b05      	ldr	r3, [pc, #20]	; (80155a4 <vTaskInternalSetTimeOutState+0x28>)
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	605a      	str	r2, [r3, #4]
}
 8015594:	bf00      	nop
 8015596:	370c      	adds	r7, #12
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr
 80155a0:	24001cd0 	.word	0x24001cd0
 80155a4:	24001cbc 	.word	0x24001cbc

080155a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b088      	sub	sp, #32
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d10a      	bne.n	80155ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80155b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155bc:	f383 8811 	msr	BASEPRI, r3
 80155c0:	f3bf 8f6f 	isb	sy
 80155c4:	f3bf 8f4f 	dsb	sy
 80155c8:	613b      	str	r3, [r7, #16]
}
 80155ca:	bf00      	nop
 80155cc:	e7fe      	b.n	80155cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d10a      	bne.n	80155ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80155d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155d8:	f383 8811 	msr	BASEPRI, r3
 80155dc:	f3bf 8f6f 	isb	sy
 80155e0:	f3bf 8f4f 	dsb	sy
 80155e4:	60fb      	str	r3, [r7, #12]
}
 80155e6:	bf00      	nop
 80155e8:	e7fe      	b.n	80155e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80155ea:	f000 feb3 	bl	8016354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80155ee:	4b1d      	ldr	r3, [pc, #116]	; (8015664 <xTaskCheckForTimeOut+0xbc>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	685b      	ldr	r3, [r3, #4]
 80155f8:	69ba      	ldr	r2, [r7, #24]
 80155fa:	1ad3      	subs	r3, r2, r3
 80155fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015606:	d102      	bne.n	801560e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015608:	2300      	movs	r3, #0
 801560a:	61fb      	str	r3, [r7, #28]
 801560c:	e023      	b.n	8015656 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681a      	ldr	r2, [r3, #0]
 8015612:	4b15      	ldr	r3, [pc, #84]	; (8015668 <xTaskCheckForTimeOut+0xc0>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	429a      	cmp	r2, r3
 8015618:	d007      	beq.n	801562a <xTaskCheckForTimeOut+0x82>
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	69ba      	ldr	r2, [r7, #24]
 8015620:	429a      	cmp	r2, r3
 8015622:	d302      	bcc.n	801562a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015624:	2301      	movs	r3, #1
 8015626:	61fb      	str	r3, [r7, #28]
 8015628:	e015      	b.n	8015656 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	697a      	ldr	r2, [r7, #20]
 8015630:	429a      	cmp	r2, r3
 8015632:	d20b      	bcs.n	801564c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	1ad2      	subs	r2, r2, r3
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f7ff ff9b 	bl	801557c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015646:	2300      	movs	r3, #0
 8015648:	61fb      	str	r3, [r7, #28]
 801564a:	e004      	b.n	8015656 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	2200      	movs	r2, #0
 8015650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015652:	2301      	movs	r3, #1
 8015654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015656:	f000 fead 	bl	80163b4 <vPortExitCritical>

	return xReturn;
 801565a:	69fb      	ldr	r3, [r7, #28]
}
 801565c:	4618      	mov	r0, r3
 801565e:	3720      	adds	r7, #32
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	24001cbc 	.word	0x24001cbc
 8015668:	24001cd0 	.word	0x24001cd0

0801566c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801566c:	b480      	push	{r7}
 801566e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015670:	4b03      	ldr	r3, [pc, #12]	; (8015680 <vTaskMissedYield+0x14>)
 8015672:	2201      	movs	r2, #1
 8015674:	601a      	str	r2, [r3, #0]
}
 8015676:	bf00      	nop
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr
 8015680:	24001ccc 	.word	0x24001ccc

08015684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801568c:	f000 f852 	bl	8015734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015690:	4b06      	ldr	r3, [pc, #24]	; (80156ac <prvIdleTask+0x28>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	2b01      	cmp	r3, #1
 8015696:	d9f9      	bls.n	801568c <prvIdleTask+0x8>
			{
				taskYIELD();
 8015698:	4b05      	ldr	r3, [pc, #20]	; (80156b0 <prvIdleTask+0x2c>)
 801569a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801569e:	601a      	str	r2, [r3, #0]
 80156a0:	f3bf 8f4f 	dsb	sy
 80156a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80156a8:	e7f0      	b.n	801568c <prvIdleTask+0x8>
 80156aa:	bf00      	nop
 80156ac:	240017e8 	.word	0x240017e8
 80156b0:	e000ed04 	.word	0xe000ed04

080156b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156ba:	2300      	movs	r3, #0
 80156bc:	607b      	str	r3, [r7, #4]
 80156be:	e00c      	b.n	80156da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80156c0:	687a      	ldr	r2, [r7, #4]
 80156c2:	4613      	mov	r3, r2
 80156c4:	009b      	lsls	r3, r3, #2
 80156c6:	4413      	add	r3, r2
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	4a12      	ldr	r2, [pc, #72]	; (8015714 <prvInitialiseTaskLists+0x60>)
 80156cc:	4413      	add	r3, r2
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fe fa76 	bl	8013bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	3301      	adds	r3, #1
 80156d8:	607b      	str	r3, [r7, #4]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2b37      	cmp	r3, #55	; 0x37
 80156de:	d9ef      	bls.n	80156c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80156e0:	480d      	ldr	r0, [pc, #52]	; (8015718 <prvInitialiseTaskLists+0x64>)
 80156e2:	f7fe fa6d 	bl	8013bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80156e6:	480d      	ldr	r0, [pc, #52]	; (801571c <prvInitialiseTaskLists+0x68>)
 80156e8:	f7fe fa6a 	bl	8013bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80156ec:	480c      	ldr	r0, [pc, #48]	; (8015720 <prvInitialiseTaskLists+0x6c>)
 80156ee:	f7fe fa67 	bl	8013bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80156f2:	480c      	ldr	r0, [pc, #48]	; (8015724 <prvInitialiseTaskLists+0x70>)
 80156f4:	f7fe fa64 	bl	8013bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80156f8:	480b      	ldr	r0, [pc, #44]	; (8015728 <prvInitialiseTaskLists+0x74>)
 80156fa:	f7fe fa61 	bl	8013bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80156fe:	4b0b      	ldr	r3, [pc, #44]	; (801572c <prvInitialiseTaskLists+0x78>)
 8015700:	4a05      	ldr	r2, [pc, #20]	; (8015718 <prvInitialiseTaskLists+0x64>)
 8015702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015704:	4b0a      	ldr	r3, [pc, #40]	; (8015730 <prvInitialiseTaskLists+0x7c>)
 8015706:	4a05      	ldr	r2, [pc, #20]	; (801571c <prvInitialiseTaskLists+0x68>)
 8015708:	601a      	str	r2, [r3, #0]
}
 801570a:	bf00      	nop
 801570c:	3708      	adds	r7, #8
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
 8015712:	bf00      	nop
 8015714:	240017e8 	.word	0x240017e8
 8015718:	24001c48 	.word	0x24001c48
 801571c:	24001c5c 	.word	0x24001c5c
 8015720:	24001c78 	.word	0x24001c78
 8015724:	24001c8c 	.word	0x24001c8c
 8015728:	24001ca4 	.word	0x24001ca4
 801572c:	24001c70 	.word	0x24001c70
 8015730:	24001c74 	.word	0x24001c74

08015734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801573a:	e019      	b.n	8015770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801573c:	f000 fe0a 	bl	8016354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015740:	4b10      	ldr	r3, [pc, #64]	; (8015784 <prvCheckTasksWaitingTermination+0x50>)
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	68db      	ldr	r3, [r3, #12]
 8015746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	3304      	adds	r3, #4
 801574c:	4618      	mov	r0, r3
 801574e:	f7fe fac1 	bl	8013cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015752:	4b0d      	ldr	r3, [pc, #52]	; (8015788 <prvCheckTasksWaitingTermination+0x54>)
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	3b01      	subs	r3, #1
 8015758:	4a0b      	ldr	r2, [pc, #44]	; (8015788 <prvCheckTasksWaitingTermination+0x54>)
 801575a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801575c:	4b0b      	ldr	r3, [pc, #44]	; (801578c <prvCheckTasksWaitingTermination+0x58>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	3b01      	subs	r3, #1
 8015762:	4a0a      	ldr	r2, [pc, #40]	; (801578c <prvCheckTasksWaitingTermination+0x58>)
 8015764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015766:	f000 fe25 	bl	80163b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f000 f810 	bl	8015790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015770:	4b06      	ldr	r3, [pc, #24]	; (801578c <prvCheckTasksWaitingTermination+0x58>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d1e1      	bne.n	801573c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015778:	bf00      	nop
 801577a:	bf00      	nop
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	24001c8c 	.word	0x24001c8c
 8015788:	24001cb8 	.word	0x24001cb8
 801578c:	24001ca0 	.word	0x24001ca0

08015790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015790:	b580      	push	{r7, lr}
 8015792:	b084      	sub	sp, #16
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d108      	bne.n	80157b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157a6:	4618      	mov	r0, r3
 80157a8:	f000 ffc2 	bl	8016730 <vPortFree>
				vPortFree( pxTCB );
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f000 ffbf 	bl	8016730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80157b2:	e018      	b.n	80157e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157ba:	2b01      	cmp	r3, #1
 80157bc:	d103      	bne.n	80157c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f000 ffb6 	bl	8016730 <vPortFree>
	}
 80157c4:	e00f      	b.n	80157e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157cc:	2b02      	cmp	r3, #2
 80157ce:	d00a      	beq.n	80157e6 <prvDeleteTCB+0x56>
	__asm volatile
 80157d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d4:	f383 8811 	msr	BASEPRI, r3
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	60fb      	str	r3, [r7, #12]
}
 80157e2:	bf00      	nop
 80157e4:	e7fe      	b.n	80157e4 <prvDeleteTCB+0x54>
	}
 80157e6:	bf00      	nop
 80157e8:	3710      	adds	r7, #16
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
	...

080157f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80157f0:	b480      	push	{r7}
 80157f2:	b083      	sub	sp, #12
 80157f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157f6:	4b0c      	ldr	r3, [pc, #48]	; (8015828 <prvResetNextTaskUnblockTime+0x38>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d104      	bne.n	801580a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015800:	4b0a      	ldr	r3, [pc, #40]	; (801582c <prvResetNextTaskUnblockTime+0x3c>)
 8015802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015808:	e008      	b.n	801581c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801580a:	4b07      	ldr	r3, [pc, #28]	; (8015828 <prvResetNextTaskUnblockTime+0x38>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	68db      	ldr	r3, [r3, #12]
 8015812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	4a04      	ldr	r2, [pc, #16]	; (801582c <prvResetNextTaskUnblockTime+0x3c>)
 801581a:	6013      	str	r3, [r2, #0]
}
 801581c:	bf00      	nop
 801581e:	370c      	adds	r7, #12
 8015820:	46bd      	mov	sp, r7
 8015822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015826:	4770      	bx	lr
 8015828:	24001c70 	.word	0x24001c70
 801582c:	24001cd8 	.word	0x24001cd8

08015830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015836:	4b0b      	ldr	r3, [pc, #44]	; (8015864 <xTaskGetSchedulerState+0x34>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d102      	bne.n	8015844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801583e:	2301      	movs	r3, #1
 8015840:	607b      	str	r3, [r7, #4]
 8015842:	e008      	b.n	8015856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015844:	4b08      	ldr	r3, [pc, #32]	; (8015868 <xTaskGetSchedulerState+0x38>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d102      	bne.n	8015852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801584c:	2302      	movs	r3, #2
 801584e:	607b      	str	r3, [r7, #4]
 8015850:	e001      	b.n	8015856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015852:	2300      	movs	r3, #0
 8015854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015856:	687b      	ldr	r3, [r7, #4]
	}
 8015858:	4618      	mov	r0, r3
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr
 8015864:	24001cc4 	.word	0x24001cc4
 8015868:	24001ce0 	.word	0x24001ce0

0801586c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801586c:	b580      	push	{r7, lr}
 801586e:	b086      	sub	sp, #24
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015878:	2300      	movs	r3, #0
 801587a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d056      	beq.n	8015930 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015882:	4b2e      	ldr	r3, [pc, #184]	; (801593c <xTaskPriorityDisinherit+0xd0>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	693a      	ldr	r2, [r7, #16]
 8015888:	429a      	cmp	r2, r3
 801588a:	d00a      	beq.n	80158a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015890:	f383 8811 	msr	BASEPRI, r3
 8015894:	f3bf 8f6f 	isb	sy
 8015898:	f3bf 8f4f 	dsb	sy
 801589c:	60fb      	str	r3, [r7, #12]
}
 801589e:	bf00      	nop
 80158a0:	e7fe      	b.n	80158a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80158a2:	693b      	ldr	r3, [r7, #16]
 80158a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d10a      	bne.n	80158c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80158aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ae:	f383 8811 	msr	BASEPRI, r3
 80158b2:	f3bf 8f6f 	isb	sy
 80158b6:	f3bf 8f4f 	dsb	sy
 80158ba:	60bb      	str	r3, [r7, #8]
}
 80158bc:	bf00      	nop
 80158be:	e7fe      	b.n	80158be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158c4:	1e5a      	subs	r2, r3, #1
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d02c      	beq.n	8015930 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d128      	bne.n	8015930 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	3304      	adds	r3, #4
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7fe f9f6 	bl	8013cd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80158e8:	693b      	ldr	r3, [r7, #16]
 80158ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015900:	4b0f      	ldr	r3, [pc, #60]	; (8015940 <xTaskPriorityDisinherit+0xd4>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	429a      	cmp	r2, r3
 8015906:	d903      	bls.n	8015910 <xTaskPriorityDisinherit+0xa4>
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801590c:	4a0c      	ldr	r2, [pc, #48]	; (8015940 <xTaskPriorityDisinherit+0xd4>)
 801590e:	6013      	str	r3, [r2, #0]
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015914:	4613      	mov	r3, r2
 8015916:	009b      	lsls	r3, r3, #2
 8015918:	4413      	add	r3, r2
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	4a09      	ldr	r2, [pc, #36]	; (8015944 <xTaskPriorityDisinherit+0xd8>)
 801591e:	441a      	add	r2, r3
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	3304      	adds	r3, #4
 8015924:	4619      	mov	r1, r3
 8015926:	4610      	mov	r0, r2
 8015928:	f7fe f977 	bl	8013c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801592c:	2301      	movs	r3, #1
 801592e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015930:	697b      	ldr	r3, [r7, #20]
	}
 8015932:	4618      	mov	r0, r3
 8015934:	3718      	adds	r7, #24
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}
 801593a:	bf00      	nop
 801593c:	240017e4 	.word	0x240017e4
 8015940:	24001cc0 	.word	0x24001cc0
 8015944:	240017e8 	.word	0x240017e8

08015948 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015948:	b480      	push	{r7}
 801594a:	b083      	sub	sp, #12
 801594c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801594e:	4b09      	ldr	r3, [pc, #36]	; (8015974 <uxTaskResetEventItemValue+0x2c>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	699b      	ldr	r3, [r3, #24]
 8015954:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015956:	4b07      	ldr	r3, [pc, #28]	; (8015974 <uxTaskResetEventItemValue+0x2c>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801595c:	4b05      	ldr	r3, [pc, #20]	; (8015974 <uxTaskResetEventItemValue+0x2c>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015964:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015966:	687b      	ldr	r3, [r7, #4]
}
 8015968:	4618      	mov	r0, r3
 801596a:	370c      	adds	r7, #12
 801596c:	46bd      	mov	sp, r7
 801596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015972:	4770      	bx	lr
 8015974:	240017e4 	.word	0x240017e4

08015978 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
 8015980:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015982:	4b21      	ldr	r3, [pc, #132]	; (8015a08 <prvAddCurrentTaskToDelayedList+0x90>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015988:	4b20      	ldr	r3, [pc, #128]	; (8015a0c <prvAddCurrentTaskToDelayedList+0x94>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	3304      	adds	r3, #4
 801598e:	4618      	mov	r0, r3
 8015990:	f7fe f9a0 	bl	8013cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801599a:	d10a      	bne.n	80159b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d007      	beq.n	80159b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80159a2:	4b1a      	ldr	r3, [pc, #104]	; (8015a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	3304      	adds	r3, #4
 80159a8:	4619      	mov	r1, r3
 80159aa:	4819      	ldr	r0, [pc, #100]	; (8015a10 <prvAddCurrentTaskToDelayedList+0x98>)
 80159ac:	f7fe f935 	bl	8013c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80159b0:	e026      	b.n	8015a00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80159b2:	68fa      	ldr	r2, [r7, #12]
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	4413      	add	r3, r2
 80159b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80159ba:	4b14      	ldr	r3, [pc, #80]	; (8015a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	68ba      	ldr	r2, [r7, #8]
 80159c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80159c2:	68ba      	ldr	r2, [r7, #8]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d209      	bcs.n	80159de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80159ca:	4b12      	ldr	r3, [pc, #72]	; (8015a14 <prvAddCurrentTaskToDelayedList+0x9c>)
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	4b0f      	ldr	r3, [pc, #60]	; (8015a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	3304      	adds	r3, #4
 80159d4:	4619      	mov	r1, r3
 80159d6:	4610      	mov	r0, r2
 80159d8:	f7fe f943 	bl	8013c62 <vListInsert>
}
 80159dc:	e010      	b.n	8015a00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80159de:	4b0e      	ldr	r3, [pc, #56]	; (8015a18 <prvAddCurrentTaskToDelayedList+0xa0>)
 80159e0:	681a      	ldr	r2, [r3, #0]
 80159e2:	4b0a      	ldr	r3, [pc, #40]	; (8015a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	3304      	adds	r3, #4
 80159e8:	4619      	mov	r1, r3
 80159ea:	4610      	mov	r0, r2
 80159ec:	f7fe f939 	bl	8013c62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80159f0:	4b0a      	ldr	r3, [pc, #40]	; (8015a1c <prvAddCurrentTaskToDelayedList+0xa4>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	68ba      	ldr	r2, [r7, #8]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d202      	bcs.n	8015a00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80159fa:	4a08      	ldr	r2, [pc, #32]	; (8015a1c <prvAddCurrentTaskToDelayedList+0xa4>)
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	6013      	str	r3, [r2, #0]
}
 8015a00:	bf00      	nop
 8015a02:	3710      	adds	r7, #16
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	24001cbc 	.word	0x24001cbc
 8015a0c:	240017e4 	.word	0x240017e4
 8015a10:	24001ca4 	.word	0x24001ca4
 8015a14:	24001c74 	.word	0x24001c74
 8015a18:	24001c70 	.word	0x24001c70
 8015a1c:	24001cd8 	.word	0x24001cd8

08015a20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b08a      	sub	sp, #40	; 0x28
 8015a24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015a26:	2300      	movs	r3, #0
 8015a28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015a2a:	f000 fb07 	bl	801603c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015a2e:	4b1c      	ldr	r3, [pc, #112]	; (8015aa0 <xTimerCreateTimerTask+0x80>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d021      	beq.n	8015a7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015a36:	2300      	movs	r3, #0
 8015a38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015a3e:	1d3a      	adds	r2, r7, #4
 8015a40:	f107 0108 	add.w	r1, r7, #8
 8015a44:	f107 030c 	add.w	r3, r7, #12
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7fd fe33 	bl	80136b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015a4e:	6879      	ldr	r1, [r7, #4]
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	68fa      	ldr	r2, [r7, #12]
 8015a54:	9202      	str	r2, [sp, #8]
 8015a56:	9301      	str	r3, [sp, #4]
 8015a58:	2302      	movs	r3, #2
 8015a5a:	9300      	str	r3, [sp, #0]
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	460a      	mov	r2, r1
 8015a60:	4910      	ldr	r1, [pc, #64]	; (8015aa4 <xTimerCreateTimerTask+0x84>)
 8015a62:	4811      	ldr	r0, [pc, #68]	; (8015aa8 <xTimerCreateTimerTask+0x88>)
 8015a64:	f7fe ff06 	bl	8014874 <xTaskCreateStatic>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	4a10      	ldr	r2, [pc, #64]	; (8015aac <xTimerCreateTimerTask+0x8c>)
 8015a6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015a6e:	4b0f      	ldr	r3, [pc, #60]	; (8015aac <xTimerCreateTimerTask+0x8c>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d001      	beq.n	8015a7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015a76:	2301      	movs	r3, #1
 8015a78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015a7a:	697b      	ldr	r3, [r7, #20]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d10a      	bne.n	8015a96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a84:	f383 8811 	msr	BASEPRI, r3
 8015a88:	f3bf 8f6f 	isb	sy
 8015a8c:	f3bf 8f4f 	dsb	sy
 8015a90:	613b      	str	r3, [r7, #16]
}
 8015a92:	bf00      	nop
 8015a94:	e7fe      	b.n	8015a94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015a96:	697b      	ldr	r3, [r7, #20]
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3718      	adds	r7, #24
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}
 8015aa0:	24001d14 	.word	0x24001d14
 8015aa4:	0801769c 	.word	0x0801769c
 8015aa8:	08015be5 	.word	0x08015be5
 8015aac:	24001d18 	.word	0x24001d18

08015ab0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b08a      	sub	sp, #40	; 0x28
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	607a      	str	r2, [r7, #4]
 8015abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d10a      	bne.n	8015ade <xTimerGenericCommand+0x2e>
	__asm volatile
 8015ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015acc:	f383 8811 	msr	BASEPRI, r3
 8015ad0:	f3bf 8f6f 	isb	sy
 8015ad4:	f3bf 8f4f 	dsb	sy
 8015ad8:	623b      	str	r3, [r7, #32]
}
 8015ada:	bf00      	nop
 8015adc:	e7fe      	b.n	8015adc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015ade:	4b1a      	ldr	r3, [pc, #104]	; (8015b48 <xTimerGenericCommand+0x98>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d02a      	beq.n	8015b3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	2b05      	cmp	r3, #5
 8015af6:	dc18      	bgt.n	8015b2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015af8:	f7ff fe9a 	bl	8015830 <xTaskGetSchedulerState>
 8015afc:	4603      	mov	r3, r0
 8015afe:	2b02      	cmp	r3, #2
 8015b00:	d109      	bne.n	8015b16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015b02:	4b11      	ldr	r3, [pc, #68]	; (8015b48 <xTimerGenericCommand+0x98>)
 8015b04:	6818      	ldr	r0, [r3, #0]
 8015b06:	f107 0110 	add.w	r1, r7, #16
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b0e:	f7fe fa49 	bl	8013fa4 <xQueueGenericSend>
 8015b12:	6278      	str	r0, [r7, #36]	; 0x24
 8015b14:	e012      	b.n	8015b3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015b16:	4b0c      	ldr	r3, [pc, #48]	; (8015b48 <xTimerGenericCommand+0x98>)
 8015b18:	6818      	ldr	r0, [r3, #0]
 8015b1a:	f107 0110 	add.w	r1, r7, #16
 8015b1e:	2300      	movs	r3, #0
 8015b20:	2200      	movs	r2, #0
 8015b22:	f7fe fa3f 	bl	8013fa4 <xQueueGenericSend>
 8015b26:	6278      	str	r0, [r7, #36]	; 0x24
 8015b28:	e008      	b.n	8015b3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015b2a:	4b07      	ldr	r3, [pc, #28]	; (8015b48 <xTimerGenericCommand+0x98>)
 8015b2c:	6818      	ldr	r0, [r3, #0]
 8015b2e:	f107 0110 	add.w	r1, r7, #16
 8015b32:	2300      	movs	r3, #0
 8015b34:	683a      	ldr	r2, [r7, #0]
 8015b36:	f7fe fb33 	bl	80141a0 <xQueueGenericSendFromISR>
 8015b3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3728      	adds	r7, #40	; 0x28
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	24001d14 	.word	0x24001d14

08015b4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b088      	sub	sp, #32
 8015b50:	af02      	add	r7, sp, #8
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b56:	4b22      	ldr	r3, [pc, #136]	; (8015be0 <prvProcessExpiredTimer+0x94>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	68db      	ldr	r3, [r3, #12]
 8015b5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	3304      	adds	r3, #4
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fe f8b5 	bl	8013cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b70:	f003 0304 	and.w	r3, r3, #4
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d022      	beq.n	8015bbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	699a      	ldr	r2, [r3, #24]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	18d1      	adds	r1, r2, r3
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	683a      	ldr	r2, [r7, #0]
 8015b84:	6978      	ldr	r0, [r7, #20]
 8015b86:	f000 f8d1 	bl	8015d2c <prvInsertTimerInActiveList>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d01f      	beq.n	8015bd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015b90:	2300      	movs	r3, #0
 8015b92:	9300      	str	r3, [sp, #0]
 8015b94:	2300      	movs	r3, #0
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	2100      	movs	r1, #0
 8015b9a:	6978      	ldr	r0, [r7, #20]
 8015b9c:	f7ff ff88 	bl	8015ab0 <xTimerGenericCommand>
 8015ba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d113      	bne.n	8015bd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bac:	f383 8811 	msr	BASEPRI, r3
 8015bb0:	f3bf 8f6f 	isb	sy
 8015bb4:	f3bf 8f4f 	dsb	sy
 8015bb8:	60fb      	str	r3, [r7, #12]
}
 8015bba:	bf00      	nop
 8015bbc:	e7fe      	b.n	8015bbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bc4:	f023 0301 	bic.w	r3, r3, #1
 8015bc8:	b2da      	uxtb	r2, r3
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	6a1b      	ldr	r3, [r3, #32]
 8015bd4:	6978      	ldr	r0, [r7, #20]
 8015bd6:	4798      	blx	r3
}
 8015bd8:	bf00      	nop
 8015bda:	3718      	adds	r7, #24
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	24001d0c 	.word	0x24001d0c

08015be4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b084      	sub	sp, #16
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015bec:	f107 0308 	add.w	r3, r7, #8
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f000 f857 	bl	8015ca4 <prvGetNextExpireTime>
 8015bf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	68f8      	ldr	r0, [r7, #12]
 8015bfe:	f000 f803 	bl	8015c08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015c02:	f000 f8d5 	bl	8015db0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015c06:	e7f1      	b.n	8015bec <prvTimerTask+0x8>

08015c08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015c12:	f7ff f985 	bl	8014f20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015c16:	f107 0308 	add.w	r3, r7, #8
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f000 f866 	bl	8015cec <prvSampleTimeNow>
 8015c20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d130      	bne.n	8015c8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d10a      	bne.n	8015c44 <prvProcessTimerOrBlockTask+0x3c>
 8015c2e:	687a      	ldr	r2, [r7, #4]
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d806      	bhi.n	8015c44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015c36:	f7ff f981 	bl	8014f3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015c3a:	68f9      	ldr	r1, [r7, #12]
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f7ff ff85 	bl	8015b4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015c42:	e024      	b.n	8015c8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d008      	beq.n	8015c5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015c4a:	4b13      	ldr	r3, [pc, #76]	; (8015c98 <prvProcessTimerOrBlockTask+0x90>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d101      	bne.n	8015c58 <prvProcessTimerOrBlockTask+0x50>
 8015c54:	2301      	movs	r3, #1
 8015c56:	e000      	b.n	8015c5a <prvProcessTimerOrBlockTask+0x52>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015c5c:	4b0f      	ldr	r3, [pc, #60]	; (8015c9c <prvProcessTimerOrBlockTask+0x94>)
 8015c5e:	6818      	ldr	r0, [r3, #0]
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	683a      	ldr	r2, [r7, #0]
 8015c68:	4619      	mov	r1, r3
 8015c6a:	f7fe fdcf 	bl	801480c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015c6e:	f7ff f965 	bl	8014f3c <xTaskResumeAll>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d10a      	bne.n	8015c8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015c78:	4b09      	ldr	r3, [pc, #36]	; (8015ca0 <prvProcessTimerOrBlockTask+0x98>)
 8015c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c7e:	601a      	str	r2, [r3, #0]
 8015c80:	f3bf 8f4f 	dsb	sy
 8015c84:	f3bf 8f6f 	isb	sy
}
 8015c88:	e001      	b.n	8015c8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015c8a:	f7ff f957 	bl	8014f3c <xTaskResumeAll>
}
 8015c8e:	bf00      	nop
 8015c90:	3710      	adds	r7, #16
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	24001d10 	.word	0x24001d10
 8015c9c:	24001d14 	.word	0x24001d14
 8015ca0:	e000ed04 	.word	0xe000ed04

08015ca4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015ca4:	b480      	push	{r7}
 8015ca6:	b085      	sub	sp, #20
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015cac:	4b0e      	ldr	r3, [pc, #56]	; (8015ce8 <prvGetNextExpireTime+0x44>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d101      	bne.n	8015cba <prvGetNextExpireTime+0x16>
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	e000      	b.n	8015cbc <prvGetNextExpireTime+0x18>
 8015cba:	2200      	movs	r2, #0
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d105      	bne.n	8015cd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015cc8:	4b07      	ldr	r3, [pc, #28]	; (8015ce8 <prvGetNextExpireTime+0x44>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	60fb      	str	r3, [r7, #12]
 8015cd2:	e001      	b.n	8015cd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3714      	adds	r7, #20
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce4:	4770      	bx	lr
 8015ce6:	bf00      	nop
 8015ce8:	24001d0c 	.word	0x24001d0c

08015cec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015cf4:	f7ff f9c0 	bl	8015078 <xTaskGetTickCount>
 8015cf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015cfa:	4b0b      	ldr	r3, [pc, #44]	; (8015d28 <prvSampleTimeNow+0x3c>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d205      	bcs.n	8015d10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015d04:	f000 f936 	bl	8015f74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	601a      	str	r2, [r3, #0]
 8015d0e:	e002      	b.n	8015d16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2200      	movs	r2, #0
 8015d14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015d16:	4a04      	ldr	r2, [pc, #16]	; (8015d28 <prvSampleTimeNow+0x3c>)
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3710      	adds	r7, #16
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	24001d1c 	.word	0x24001d1c

08015d2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b086      	sub	sp, #24
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	60f8      	str	r0, [r7, #12]
 8015d34:	60b9      	str	r1, [r7, #8]
 8015d36:	607a      	str	r2, [r7, #4]
 8015d38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	68ba      	ldr	r2, [r7, #8]
 8015d42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	68fa      	ldr	r2, [r7, #12]
 8015d48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d812      	bhi.n	8015d78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d52:	687a      	ldr	r2, [r7, #4]
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	1ad2      	subs	r2, r2, r3
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	699b      	ldr	r3, [r3, #24]
 8015d5c:	429a      	cmp	r2, r3
 8015d5e:	d302      	bcc.n	8015d66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015d60:	2301      	movs	r3, #1
 8015d62:	617b      	str	r3, [r7, #20]
 8015d64:	e01b      	b.n	8015d9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015d66:	4b10      	ldr	r3, [pc, #64]	; (8015da8 <prvInsertTimerInActiveList+0x7c>)
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	3304      	adds	r3, #4
 8015d6e:	4619      	mov	r1, r3
 8015d70:	4610      	mov	r0, r2
 8015d72:	f7fd ff76 	bl	8013c62 <vListInsert>
 8015d76:	e012      	b.n	8015d9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d206      	bcs.n	8015d8e <prvInsertTimerInActiveList+0x62>
 8015d80:	68ba      	ldr	r2, [r7, #8]
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	429a      	cmp	r2, r3
 8015d86:	d302      	bcc.n	8015d8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015d88:	2301      	movs	r3, #1
 8015d8a:	617b      	str	r3, [r7, #20]
 8015d8c:	e007      	b.n	8015d9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015d8e:	4b07      	ldr	r3, [pc, #28]	; (8015dac <prvInsertTimerInActiveList+0x80>)
 8015d90:	681a      	ldr	r2, [r3, #0]
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	3304      	adds	r3, #4
 8015d96:	4619      	mov	r1, r3
 8015d98:	4610      	mov	r0, r2
 8015d9a:	f7fd ff62 	bl	8013c62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015d9e:	697b      	ldr	r3, [r7, #20]
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3718      	adds	r7, #24
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}
 8015da8:	24001d10 	.word	0x24001d10
 8015dac:	24001d0c 	.word	0x24001d0c

08015db0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b08e      	sub	sp, #56	; 0x38
 8015db4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015db6:	e0ca      	b.n	8015f4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	da18      	bge.n	8015df0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015dbe:	1d3b      	adds	r3, r7, #4
 8015dc0:	3304      	adds	r3, #4
 8015dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d10a      	bne.n	8015de0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dce:	f383 8811 	msr	BASEPRI, r3
 8015dd2:	f3bf 8f6f 	isb	sy
 8015dd6:	f3bf 8f4f 	dsb	sy
 8015dda:	61fb      	str	r3, [r7, #28]
}
 8015ddc:	bf00      	nop
 8015dde:	e7fe      	b.n	8015dde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015de6:	6850      	ldr	r0, [r2, #4]
 8015de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dea:	6892      	ldr	r2, [r2, #8]
 8015dec:	4611      	mov	r1, r2
 8015dee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	f2c0 80aa 	blt.w	8015f4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dfe:	695b      	ldr	r3, [r3, #20]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d004      	beq.n	8015e0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e06:	3304      	adds	r3, #4
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7fd ff63 	bl	8013cd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e0e:	463b      	mov	r3, r7
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7ff ff6b 	bl	8015cec <prvSampleTimeNow>
 8015e16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2b09      	cmp	r3, #9
 8015e1c:	f200 8097 	bhi.w	8015f4e <prvProcessReceivedCommands+0x19e>
 8015e20:	a201      	add	r2, pc, #4	; (adr r2, 8015e28 <prvProcessReceivedCommands+0x78>)
 8015e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e26:	bf00      	nop
 8015e28:	08015e51 	.word	0x08015e51
 8015e2c:	08015e51 	.word	0x08015e51
 8015e30:	08015e51 	.word	0x08015e51
 8015e34:	08015ec5 	.word	0x08015ec5
 8015e38:	08015ed9 	.word	0x08015ed9
 8015e3c:	08015f23 	.word	0x08015f23
 8015e40:	08015e51 	.word	0x08015e51
 8015e44:	08015e51 	.word	0x08015e51
 8015e48:	08015ec5 	.word	0x08015ec5
 8015e4c:	08015ed9 	.word	0x08015ed9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e56:	f043 0301 	orr.w	r3, r3, #1
 8015e5a:	b2da      	uxtb	r2, r3
 8015e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015e62:	68ba      	ldr	r2, [r7, #8]
 8015e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e66:	699b      	ldr	r3, [r3, #24]
 8015e68:	18d1      	adds	r1, r2, r3
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e70:	f7ff ff5c 	bl	8015d2c <prvInsertTimerInActiveList>
 8015e74:	4603      	mov	r3, r0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d069      	beq.n	8015f4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e7c:	6a1b      	ldr	r3, [r3, #32]
 8015e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e88:	f003 0304 	and.w	r3, r3, #4
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d05e      	beq.n	8015f4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015e90:	68ba      	ldr	r2, [r7, #8]
 8015e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e94:	699b      	ldr	r3, [r3, #24]
 8015e96:	441a      	add	r2, r3
 8015e98:	2300      	movs	r3, #0
 8015e9a:	9300      	str	r3, [sp, #0]
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	2100      	movs	r1, #0
 8015ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ea2:	f7ff fe05 	bl	8015ab0 <xTimerGenericCommand>
 8015ea6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015ea8:	6a3b      	ldr	r3, [r7, #32]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d14f      	bne.n	8015f4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb2:	f383 8811 	msr	BASEPRI, r3
 8015eb6:	f3bf 8f6f 	isb	sy
 8015eba:	f3bf 8f4f 	dsb	sy
 8015ebe:	61bb      	str	r3, [r7, #24]
}
 8015ec0:	bf00      	nop
 8015ec2:	e7fe      	b.n	8015ec2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eca:	f023 0301 	bic.w	r3, r3, #1
 8015ece:	b2da      	uxtb	r2, r3
 8015ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015ed6:	e03a      	b.n	8015f4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ede:	f043 0301 	orr.w	r3, r3, #1
 8015ee2:	b2da      	uxtb	r2, r3
 8015ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef2:	699b      	ldr	r3, [r3, #24]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d10a      	bne.n	8015f0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015efc:	f383 8811 	msr	BASEPRI, r3
 8015f00:	f3bf 8f6f 	isb	sy
 8015f04:	f3bf 8f4f 	dsb	sy
 8015f08:	617b      	str	r3, [r7, #20]
}
 8015f0a:	bf00      	nop
 8015f0c:	e7fe      	b.n	8015f0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f10:	699a      	ldr	r2, [r3, #24]
 8015f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f14:	18d1      	adds	r1, r2, r3
 8015f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f1c:	f7ff ff06 	bl	8015d2c <prvInsertTimerInActiveList>
					break;
 8015f20:	e015      	b.n	8015f4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f28:	f003 0302 	and.w	r3, r3, #2
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d103      	bne.n	8015f38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f32:	f000 fbfd 	bl	8016730 <vPortFree>
 8015f36:	e00a      	b.n	8015f4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f3e:	f023 0301 	bic.w	r3, r3, #1
 8015f42:	b2da      	uxtb	r2, r3
 8015f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015f4a:	e000      	b.n	8015f4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015f4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015f4e:	4b08      	ldr	r3, [pc, #32]	; (8015f70 <prvProcessReceivedCommands+0x1c0>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	1d39      	adds	r1, r7, #4
 8015f54:	2200      	movs	r2, #0
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7fe f9be 	bl	80142d8 <xQueueReceive>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f47f af2a 	bne.w	8015db8 <prvProcessReceivedCommands+0x8>
	}
}
 8015f64:	bf00      	nop
 8015f66:	bf00      	nop
 8015f68:	3730      	adds	r7, #48	; 0x30
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	24001d14 	.word	0x24001d14

08015f74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b088      	sub	sp, #32
 8015f78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015f7a:	e048      	b.n	801600e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015f7c:	4b2d      	ldr	r3, [pc, #180]	; (8016034 <prvSwitchTimerLists+0xc0>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f86:	4b2b      	ldr	r3, [pc, #172]	; (8016034 <prvSwitchTimerLists+0xc0>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	68db      	ldr	r3, [r3, #12]
 8015f8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	3304      	adds	r3, #4
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7fd fe9d 	bl	8013cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	6a1b      	ldr	r3, [r3, #32]
 8015f9e:	68f8      	ldr	r0, [r7, #12]
 8015fa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fa8:	f003 0304 	and.w	r3, r3, #4
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d02e      	beq.n	801600e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	699b      	ldr	r3, [r3, #24]
 8015fb4:	693a      	ldr	r2, [r7, #16]
 8015fb6:	4413      	add	r3, r2
 8015fb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d90e      	bls.n	8015fe0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	68ba      	ldr	r2, [r7, #8]
 8015fc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	68fa      	ldr	r2, [r7, #12]
 8015fcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015fce:	4b19      	ldr	r3, [pc, #100]	; (8016034 <prvSwitchTimerLists+0xc0>)
 8015fd0:	681a      	ldr	r2, [r3, #0]
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	4610      	mov	r0, r2
 8015fda:	f7fd fe42 	bl	8013c62 <vListInsert>
 8015fde:	e016      	b.n	801600e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	9300      	str	r3, [sp, #0]
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	693a      	ldr	r2, [r7, #16]
 8015fe8:	2100      	movs	r1, #0
 8015fea:	68f8      	ldr	r0, [r7, #12]
 8015fec:	f7ff fd60 	bl	8015ab0 <xTimerGenericCommand>
 8015ff0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d10a      	bne.n	801600e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ffc:	f383 8811 	msr	BASEPRI, r3
 8016000:	f3bf 8f6f 	isb	sy
 8016004:	f3bf 8f4f 	dsb	sy
 8016008:	603b      	str	r3, [r7, #0]
}
 801600a:	bf00      	nop
 801600c:	e7fe      	b.n	801600c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801600e:	4b09      	ldr	r3, [pc, #36]	; (8016034 <prvSwitchTimerLists+0xc0>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d1b1      	bne.n	8015f7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016018:	4b06      	ldr	r3, [pc, #24]	; (8016034 <prvSwitchTimerLists+0xc0>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801601e:	4b06      	ldr	r3, [pc, #24]	; (8016038 <prvSwitchTimerLists+0xc4>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	4a04      	ldr	r2, [pc, #16]	; (8016034 <prvSwitchTimerLists+0xc0>)
 8016024:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016026:	4a04      	ldr	r2, [pc, #16]	; (8016038 <prvSwitchTimerLists+0xc4>)
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	6013      	str	r3, [r2, #0]
}
 801602c:	bf00      	nop
 801602e:	3718      	adds	r7, #24
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	24001d0c 	.word	0x24001d0c
 8016038:	24001d10 	.word	0x24001d10

0801603c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b082      	sub	sp, #8
 8016040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016042:	f000 f987 	bl	8016354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016046:	4b15      	ldr	r3, [pc, #84]	; (801609c <prvCheckForValidListAndQueue+0x60>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d120      	bne.n	8016090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801604e:	4814      	ldr	r0, [pc, #80]	; (80160a0 <prvCheckForValidListAndQueue+0x64>)
 8016050:	f7fd fdb6 	bl	8013bc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016054:	4813      	ldr	r0, [pc, #76]	; (80160a4 <prvCheckForValidListAndQueue+0x68>)
 8016056:	f7fd fdb3 	bl	8013bc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801605a:	4b13      	ldr	r3, [pc, #76]	; (80160a8 <prvCheckForValidListAndQueue+0x6c>)
 801605c:	4a10      	ldr	r2, [pc, #64]	; (80160a0 <prvCheckForValidListAndQueue+0x64>)
 801605e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016060:	4b12      	ldr	r3, [pc, #72]	; (80160ac <prvCheckForValidListAndQueue+0x70>)
 8016062:	4a10      	ldr	r2, [pc, #64]	; (80160a4 <prvCheckForValidListAndQueue+0x68>)
 8016064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016066:	2300      	movs	r3, #0
 8016068:	9300      	str	r3, [sp, #0]
 801606a:	4b11      	ldr	r3, [pc, #68]	; (80160b0 <prvCheckForValidListAndQueue+0x74>)
 801606c:	4a11      	ldr	r2, [pc, #68]	; (80160b4 <prvCheckForValidListAndQueue+0x78>)
 801606e:	2110      	movs	r1, #16
 8016070:	200a      	movs	r0, #10
 8016072:	f7fd fec1 	bl	8013df8 <xQueueGenericCreateStatic>
 8016076:	4603      	mov	r3, r0
 8016078:	4a08      	ldr	r2, [pc, #32]	; (801609c <prvCheckForValidListAndQueue+0x60>)
 801607a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801607c:	4b07      	ldr	r3, [pc, #28]	; (801609c <prvCheckForValidListAndQueue+0x60>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d005      	beq.n	8016090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016084:	4b05      	ldr	r3, [pc, #20]	; (801609c <prvCheckForValidListAndQueue+0x60>)
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	490b      	ldr	r1, [pc, #44]	; (80160b8 <prvCheckForValidListAndQueue+0x7c>)
 801608a:	4618      	mov	r0, r3
 801608c:	f7fe fb94 	bl	80147b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016090:	f000 f990 	bl	80163b4 <vPortExitCritical>
}
 8016094:	bf00      	nop
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	24001d14 	.word	0x24001d14
 80160a0:	24001ce4 	.word	0x24001ce4
 80160a4:	24001cf8 	.word	0x24001cf8
 80160a8:	24001d0c 	.word	0x24001d0c
 80160ac:	24001d10 	.word	0x24001d10
 80160b0:	24001dc0 	.word	0x24001dc0
 80160b4:	24001d20 	.word	0x24001d20
 80160b8:	080176a4 	.word	0x080176a4

080160bc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b08a      	sub	sp, #40	; 0x28
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	607a      	str	r2, [r7, #4]
 80160c8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80160ca:	f06f 0301 	mvn.w	r3, #1
 80160ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80160dc:	4b06      	ldr	r3, [pc, #24]	; (80160f8 <xTimerPendFunctionCallFromISR+0x3c>)
 80160de:	6818      	ldr	r0, [r3, #0]
 80160e0:	f107 0114 	add.w	r1, r7, #20
 80160e4:	2300      	movs	r3, #0
 80160e6:	683a      	ldr	r2, [r7, #0]
 80160e8:	f7fe f85a 	bl	80141a0 <xQueueGenericSendFromISR>
 80160ec:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80160ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80160f0:	4618      	mov	r0, r3
 80160f2:	3728      	adds	r7, #40	; 0x28
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}
 80160f8:	24001d14 	.word	0x24001d14

080160fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80160fc:	b480      	push	{r7}
 80160fe:	b085      	sub	sp, #20
 8016100:	af00      	add	r7, sp, #0
 8016102:	60f8      	str	r0, [r7, #12]
 8016104:	60b9      	str	r1, [r7, #8]
 8016106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	3b04      	subs	r3, #4
 801610c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	3b04      	subs	r3, #4
 801611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	f023 0201 	bic.w	r2, r3, #1
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	3b04      	subs	r3, #4
 801612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801612c:	4a0c      	ldr	r2, [pc, #48]	; (8016160 <pxPortInitialiseStack+0x64>)
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	3b14      	subs	r3, #20
 8016136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	3b04      	subs	r3, #4
 8016142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f06f 0202 	mvn.w	r2, #2
 801614a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	3b20      	subs	r3, #32
 8016150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016152:	68fb      	ldr	r3, [r7, #12]
}
 8016154:	4618      	mov	r0, r3
 8016156:	3714      	adds	r7, #20
 8016158:	46bd      	mov	sp, r7
 801615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615e:	4770      	bx	lr
 8016160:	08016165 	.word	0x08016165

08016164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016164:	b480      	push	{r7}
 8016166:	b085      	sub	sp, #20
 8016168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801616a:	2300      	movs	r3, #0
 801616c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801616e:	4b12      	ldr	r3, [pc, #72]	; (80161b8 <prvTaskExitError+0x54>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016176:	d00a      	beq.n	801618e <prvTaskExitError+0x2a>
	__asm volatile
 8016178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801617c:	f383 8811 	msr	BASEPRI, r3
 8016180:	f3bf 8f6f 	isb	sy
 8016184:	f3bf 8f4f 	dsb	sy
 8016188:	60fb      	str	r3, [r7, #12]
}
 801618a:	bf00      	nop
 801618c:	e7fe      	b.n	801618c <prvTaskExitError+0x28>
	__asm volatile
 801618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016192:	f383 8811 	msr	BASEPRI, r3
 8016196:	f3bf 8f6f 	isb	sy
 801619a:	f3bf 8f4f 	dsb	sy
 801619e:	60bb      	str	r3, [r7, #8]
}
 80161a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80161a2:	bf00      	nop
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d0fc      	beq.n	80161a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80161aa:	bf00      	nop
 80161ac:	bf00      	nop
 80161ae:	3714      	adds	r7, #20
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr
 80161b8:	2400009c 	.word	0x2400009c
 80161bc:	00000000 	.word	0x00000000

080161c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80161c0:	4b07      	ldr	r3, [pc, #28]	; (80161e0 <pxCurrentTCBConst2>)
 80161c2:	6819      	ldr	r1, [r3, #0]
 80161c4:	6808      	ldr	r0, [r1, #0]
 80161c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ca:	f380 8809 	msr	PSP, r0
 80161ce:	f3bf 8f6f 	isb	sy
 80161d2:	f04f 0000 	mov.w	r0, #0
 80161d6:	f380 8811 	msr	BASEPRI, r0
 80161da:	4770      	bx	lr
 80161dc:	f3af 8000 	nop.w

080161e0 <pxCurrentTCBConst2>:
 80161e0:	240017e4 	.word	0x240017e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80161e4:	bf00      	nop
 80161e6:	bf00      	nop

080161e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80161e8:	4808      	ldr	r0, [pc, #32]	; (801620c <prvPortStartFirstTask+0x24>)
 80161ea:	6800      	ldr	r0, [r0, #0]
 80161ec:	6800      	ldr	r0, [r0, #0]
 80161ee:	f380 8808 	msr	MSP, r0
 80161f2:	f04f 0000 	mov.w	r0, #0
 80161f6:	f380 8814 	msr	CONTROL, r0
 80161fa:	b662      	cpsie	i
 80161fc:	b661      	cpsie	f
 80161fe:	f3bf 8f4f 	dsb	sy
 8016202:	f3bf 8f6f 	isb	sy
 8016206:	df00      	svc	0
 8016208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801620a:	bf00      	nop
 801620c:	e000ed08 	.word	0xe000ed08

08016210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b086      	sub	sp, #24
 8016214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016216:	4b46      	ldr	r3, [pc, #280]	; (8016330 <xPortStartScheduler+0x120>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4a46      	ldr	r2, [pc, #280]	; (8016334 <xPortStartScheduler+0x124>)
 801621c:	4293      	cmp	r3, r2
 801621e:	d10a      	bne.n	8016236 <xPortStartScheduler+0x26>
	__asm volatile
 8016220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016224:	f383 8811 	msr	BASEPRI, r3
 8016228:	f3bf 8f6f 	isb	sy
 801622c:	f3bf 8f4f 	dsb	sy
 8016230:	613b      	str	r3, [r7, #16]
}
 8016232:	bf00      	nop
 8016234:	e7fe      	b.n	8016234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016236:	4b3e      	ldr	r3, [pc, #248]	; (8016330 <xPortStartScheduler+0x120>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4a3f      	ldr	r2, [pc, #252]	; (8016338 <xPortStartScheduler+0x128>)
 801623c:	4293      	cmp	r3, r2
 801623e:	d10a      	bne.n	8016256 <xPortStartScheduler+0x46>
	__asm volatile
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	f383 8811 	msr	BASEPRI, r3
 8016248:	f3bf 8f6f 	isb	sy
 801624c:	f3bf 8f4f 	dsb	sy
 8016250:	60fb      	str	r3, [r7, #12]
}
 8016252:	bf00      	nop
 8016254:	e7fe      	b.n	8016254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016256:	4b39      	ldr	r3, [pc, #228]	; (801633c <xPortStartScheduler+0x12c>)
 8016258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	b2db      	uxtb	r3, r3
 8016260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	22ff      	movs	r2, #255	; 0xff
 8016266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	b2db      	uxtb	r3, r3
 801626e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016270:	78fb      	ldrb	r3, [r7, #3]
 8016272:	b2db      	uxtb	r3, r3
 8016274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016278:	b2da      	uxtb	r2, r3
 801627a:	4b31      	ldr	r3, [pc, #196]	; (8016340 <xPortStartScheduler+0x130>)
 801627c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801627e:	4b31      	ldr	r3, [pc, #196]	; (8016344 <xPortStartScheduler+0x134>)
 8016280:	2207      	movs	r2, #7
 8016282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016284:	e009      	b.n	801629a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016286:	4b2f      	ldr	r3, [pc, #188]	; (8016344 <xPortStartScheduler+0x134>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	3b01      	subs	r3, #1
 801628c:	4a2d      	ldr	r2, [pc, #180]	; (8016344 <xPortStartScheduler+0x134>)
 801628e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016290:	78fb      	ldrb	r3, [r7, #3]
 8016292:	b2db      	uxtb	r3, r3
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	b2db      	uxtb	r3, r3
 8016298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801629a:	78fb      	ldrb	r3, [r7, #3]
 801629c:	b2db      	uxtb	r3, r3
 801629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162a2:	2b80      	cmp	r3, #128	; 0x80
 80162a4:	d0ef      	beq.n	8016286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80162a6:	4b27      	ldr	r3, [pc, #156]	; (8016344 <xPortStartScheduler+0x134>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	f1c3 0307 	rsb	r3, r3, #7
 80162ae:	2b04      	cmp	r3, #4
 80162b0:	d00a      	beq.n	80162c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80162b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b6:	f383 8811 	msr	BASEPRI, r3
 80162ba:	f3bf 8f6f 	isb	sy
 80162be:	f3bf 8f4f 	dsb	sy
 80162c2:	60bb      	str	r3, [r7, #8]
}
 80162c4:	bf00      	nop
 80162c6:	e7fe      	b.n	80162c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80162c8:	4b1e      	ldr	r3, [pc, #120]	; (8016344 <xPortStartScheduler+0x134>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	021b      	lsls	r3, r3, #8
 80162ce:	4a1d      	ldr	r2, [pc, #116]	; (8016344 <xPortStartScheduler+0x134>)
 80162d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80162d2:	4b1c      	ldr	r3, [pc, #112]	; (8016344 <xPortStartScheduler+0x134>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80162da:	4a1a      	ldr	r2, [pc, #104]	; (8016344 <xPortStartScheduler+0x134>)
 80162dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	b2da      	uxtb	r2, r3
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80162e6:	4b18      	ldr	r3, [pc, #96]	; (8016348 <xPortStartScheduler+0x138>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4a17      	ldr	r2, [pc, #92]	; (8016348 <xPortStartScheduler+0x138>)
 80162ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80162f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80162f2:	4b15      	ldr	r3, [pc, #84]	; (8016348 <xPortStartScheduler+0x138>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4a14      	ldr	r2, [pc, #80]	; (8016348 <xPortStartScheduler+0x138>)
 80162f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80162fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80162fe:	f000 f8dd 	bl	80164bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016302:	4b12      	ldr	r3, [pc, #72]	; (801634c <xPortStartScheduler+0x13c>)
 8016304:	2200      	movs	r2, #0
 8016306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016308:	f000 f8fc 	bl	8016504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801630c:	4b10      	ldr	r3, [pc, #64]	; (8016350 <xPortStartScheduler+0x140>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	4a0f      	ldr	r2, [pc, #60]	; (8016350 <xPortStartScheduler+0x140>)
 8016312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016318:	f7ff ff66 	bl	80161e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801631c:	f7fe ff7e 	bl	801521c <vTaskSwitchContext>
	prvTaskExitError();
 8016320:	f7ff ff20 	bl	8016164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016324:	2300      	movs	r3, #0
}
 8016326:	4618      	mov	r0, r3
 8016328:	3718      	adds	r7, #24
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	e000ed00 	.word	0xe000ed00
 8016334:	410fc271 	.word	0x410fc271
 8016338:	410fc270 	.word	0x410fc270
 801633c:	e000e400 	.word	0xe000e400
 8016340:	24001e10 	.word	0x24001e10
 8016344:	24001e14 	.word	0x24001e14
 8016348:	e000ed20 	.word	0xe000ed20
 801634c:	2400009c 	.word	0x2400009c
 8016350:	e000ef34 	.word	0xe000ef34

08016354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016354:	b480      	push	{r7}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
	__asm volatile
 801635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801635e:	f383 8811 	msr	BASEPRI, r3
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	f3bf 8f4f 	dsb	sy
 801636a:	607b      	str	r3, [r7, #4]
}
 801636c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801636e:	4b0f      	ldr	r3, [pc, #60]	; (80163ac <vPortEnterCritical+0x58>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	3301      	adds	r3, #1
 8016374:	4a0d      	ldr	r2, [pc, #52]	; (80163ac <vPortEnterCritical+0x58>)
 8016376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016378:	4b0c      	ldr	r3, [pc, #48]	; (80163ac <vPortEnterCritical+0x58>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	2b01      	cmp	r3, #1
 801637e:	d10f      	bne.n	80163a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016380:	4b0b      	ldr	r3, [pc, #44]	; (80163b0 <vPortEnterCritical+0x5c>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	b2db      	uxtb	r3, r3
 8016386:	2b00      	cmp	r3, #0
 8016388:	d00a      	beq.n	80163a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801638e:	f383 8811 	msr	BASEPRI, r3
 8016392:	f3bf 8f6f 	isb	sy
 8016396:	f3bf 8f4f 	dsb	sy
 801639a:	603b      	str	r3, [r7, #0]
}
 801639c:	bf00      	nop
 801639e:	e7fe      	b.n	801639e <vPortEnterCritical+0x4a>
	}
}
 80163a0:	bf00      	nop
 80163a2:	370c      	adds	r7, #12
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr
 80163ac:	2400009c 	.word	0x2400009c
 80163b0:	e000ed04 	.word	0xe000ed04

080163b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80163b4:	b480      	push	{r7}
 80163b6:	b083      	sub	sp, #12
 80163b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80163ba:	4b12      	ldr	r3, [pc, #72]	; (8016404 <vPortExitCritical+0x50>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d10a      	bne.n	80163d8 <vPortExitCritical+0x24>
	__asm volatile
 80163c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c6:	f383 8811 	msr	BASEPRI, r3
 80163ca:	f3bf 8f6f 	isb	sy
 80163ce:	f3bf 8f4f 	dsb	sy
 80163d2:	607b      	str	r3, [r7, #4]
}
 80163d4:	bf00      	nop
 80163d6:	e7fe      	b.n	80163d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80163d8:	4b0a      	ldr	r3, [pc, #40]	; (8016404 <vPortExitCritical+0x50>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	3b01      	subs	r3, #1
 80163de:	4a09      	ldr	r2, [pc, #36]	; (8016404 <vPortExitCritical+0x50>)
 80163e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80163e2:	4b08      	ldr	r3, [pc, #32]	; (8016404 <vPortExitCritical+0x50>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d105      	bne.n	80163f6 <vPortExitCritical+0x42>
 80163ea:	2300      	movs	r3, #0
 80163ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	f383 8811 	msr	BASEPRI, r3
}
 80163f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80163f6:	bf00      	nop
 80163f8:	370c      	adds	r7, #12
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop
 8016404:	2400009c 	.word	0x2400009c
	...

08016410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016410:	f3ef 8009 	mrs	r0, PSP
 8016414:	f3bf 8f6f 	isb	sy
 8016418:	4b15      	ldr	r3, [pc, #84]	; (8016470 <pxCurrentTCBConst>)
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	f01e 0f10 	tst.w	lr, #16
 8016420:	bf08      	it	eq
 8016422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801642a:	6010      	str	r0, [r2, #0]
 801642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016434:	f380 8811 	msr	BASEPRI, r0
 8016438:	f3bf 8f4f 	dsb	sy
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f7fe feec 	bl	801521c <vTaskSwitchContext>
 8016444:	f04f 0000 	mov.w	r0, #0
 8016448:	f380 8811 	msr	BASEPRI, r0
 801644c:	bc09      	pop	{r0, r3}
 801644e:	6819      	ldr	r1, [r3, #0]
 8016450:	6808      	ldr	r0, [r1, #0]
 8016452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016456:	f01e 0f10 	tst.w	lr, #16
 801645a:	bf08      	it	eq
 801645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016460:	f380 8809 	msr	PSP, r0
 8016464:	f3bf 8f6f 	isb	sy
 8016468:	4770      	bx	lr
 801646a:	bf00      	nop
 801646c:	f3af 8000 	nop.w

08016470 <pxCurrentTCBConst>:
 8016470:	240017e4 	.word	0x240017e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016474:	bf00      	nop
 8016476:	bf00      	nop

08016478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b082      	sub	sp, #8
 801647c:	af00      	add	r7, sp, #0
	__asm volatile
 801647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016482:	f383 8811 	msr	BASEPRI, r3
 8016486:	f3bf 8f6f 	isb	sy
 801648a:	f3bf 8f4f 	dsb	sy
 801648e:	607b      	str	r3, [r7, #4]
}
 8016490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016492:	f7fe fe01 	bl	8015098 <xTaskIncrementTick>
 8016496:	4603      	mov	r3, r0
 8016498:	2b00      	cmp	r3, #0
 801649a:	d003      	beq.n	80164a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801649c:	4b06      	ldr	r3, [pc, #24]	; (80164b8 <xPortSysTickHandler+0x40>)
 801649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164a2:	601a      	str	r2, [r3, #0]
 80164a4:	2300      	movs	r3, #0
 80164a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	f383 8811 	msr	BASEPRI, r3
}
 80164ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80164b0:	bf00      	nop
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	e000ed04 	.word	0xe000ed04

080164bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80164bc:	b480      	push	{r7}
 80164be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80164c0:	4b0b      	ldr	r3, [pc, #44]	; (80164f0 <vPortSetupTimerInterrupt+0x34>)
 80164c2:	2200      	movs	r2, #0
 80164c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80164c6:	4b0b      	ldr	r3, [pc, #44]	; (80164f4 <vPortSetupTimerInterrupt+0x38>)
 80164c8:	2200      	movs	r2, #0
 80164ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80164cc:	4b0a      	ldr	r3, [pc, #40]	; (80164f8 <vPortSetupTimerInterrupt+0x3c>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	4a0a      	ldr	r2, [pc, #40]	; (80164fc <vPortSetupTimerInterrupt+0x40>)
 80164d2:	fba2 2303 	umull	r2, r3, r2, r3
 80164d6:	099b      	lsrs	r3, r3, #6
 80164d8:	4a09      	ldr	r2, [pc, #36]	; (8016500 <vPortSetupTimerInterrupt+0x44>)
 80164da:	3b01      	subs	r3, #1
 80164dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80164de:	4b04      	ldr	r3, [pc, #16]	; (80164f0 <vPortSetupTimerInterrupt+0x34>)
 80164e0:	2207      	movs	r2, #7
 80164e2:	601a      	str	r2, [r3, #0]
}
 80164e4:	bf00      	nop
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr
 80164ee:	bf00      	nop
 80164f0:	e000e010 	.word	0xe000e010
 80164f4:	e000e018 	.word	0xe000e018
 80164f8:	2400008c 	.word	0x2400008c
 80164fc:	10624dd3 	.word	0x10624dd3
 8016500:	e000e014 	.word	0xe000e014

08016504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016514 <vPortEnableVFP+0x10>
 8016508:	6801      	ldr	r1, [r0, #0]
 801650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801650e:	6001      	str	r1, [r0, #0]
 8016510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016512:	bf00      	nop
 8016514:	e000ed88 	.word	0xe000ed88

08016518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016518:	b480      	push	{r7}
 801651a:	b085      	sub	sp, #20
 801651c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801651e:	f3ef 8305 	mrs	r3, IPSR
 8016522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2b0f      	cmp	r3, #15
 8016528:	d914      	bls.n	8016554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801652a:	4a17      	ldr	r2, [pc, #92]	; (8016588 <vPortValidateInterruptPriority+0x70>)
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	4413      	add	r3, r2
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016534:	4b15      	ldr	r3, [pc, #84]	; (801658c <vPortValidateInterruptPriority+0x74>)
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	7afa      	ldrb	r2, [r7, #11]
 801653a:	429a      	cmp	r2, r3
 801653c:	d20a      	bcs.n	8016554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016542:	f383 8811 	msr	BASEPRI, r3
 8016546:	f3bf 8f6f 	isb	sy
 801654a:	f3bf 8f4f 	dsb	sy
 801654e:	607b      	str	r3, [r7, #4]
}
 8016550:	bf00      	nop
 8016552:	e7fe      	b.n	8016552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016554:	4b0e      	ldr	r3, [pc, #56]	; (8016590 <vPortValidateInterruptPriority+0x78>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801655c:	4b0d      	ldr	r3, [pc, #52]	; (8016594 <vPortValidateInterruptPriority+0x7c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	429a      	cmp	r2, r3
 8016562:	d90a      	bls.n	801657a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016568:	f383 8811 	msr	BASEPRI, r3
 801656c:	f3bf 8f6f 	isb	sy
 8016570:	f3bf 8f4f 	dsb	sy
 8016574:	603b      	str	r3, [r7, #0]
}
 8016576:	bf00      	nop
 8016578:	e7fe      	b.n	8016578 <vPortValidateInterruptPriority+0x60>
	}
 801657a:	bf00      	nop
 801657c:	3714      	adds	r7, #20
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop
 8016588:	e000e3f0 	.word	0xe000e3f0
 801658c:	24001e10 	.word	0x24001e10
 8016590:	e000ed0c 	.word	0xe000ed0c
 8016594:	24001e14 	.word	0x24001e14

08016598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b08a      	sub	sp, #40	; 0x28
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80165a0:	2300      	movs	r3, #0
 80165a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80165a4:	f7fe fcbc 	bl	8014f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80165a8:	4b5b      	ldr	r3, [pc, #364]	; (8016718 <pvPortMalloc+0x180>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80165b0:	f000 f920 	bl	80167f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80165b4:	4b59      	ldr	r3, [pc, #356]	; (801671c <pvPortMalloc+0x184>)
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	4013      	ands	r3, r2
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f040 8093 	bne.w	80166e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d01d      	beq.n	8016604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80165c8:	2208      	movs	r2, #8
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	4413      	add	r3, r2
 80165ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f003 0307 	and.w	r3, r3, #7
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d014      	beq.n	8016604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f023 0307 	bic.w	r3, r3, #7
 80165e0:	3308      	adds	r3, #8
 80165e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f003 0307 	and.w	r3, r3, #7
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00a      	beq.n	8016604 <pvPortMalloc+0x6c>
	__asm volatile
 80165ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f2:	f383 8811 	msr	BASEPRI, r3
 80165f6:	f3bf 8f6f 	isb	sy
 80165fa:	f3bf 8f4f 	dsb	sy
 80165fe:	617b      	str	r3, [r7, #20]
}
 8016600:	bf00      	nop
 8016602:	e7fe      	b.n	8016602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d06e      	beq.n	80166e8 <pvPortMalloc+0x150>
 801660a:	4b45      	ldr	r3, [pc, #276]	; (8016720 <pvPortMalloc+0x188>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	429a      	cmp	r2, r3
 8016612:	d869      	bhi.n	80166e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016614:	4b43      	ldr	r3, [pc, #268]	; (8016724 <pvPortMalloc+0x18c>)
 8016616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016618:	4b42      	ldr	r3, [pc, #264]	; (8016724 <pvPortMalloc+0x18c>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801661e:	e004      	b.n	801662a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	429a      	cmp	r2, r3
 8016632:	d903      	bls.n	801663c <pvPortMalloc+0xa4>
 8016634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d1f1      	bne.n	8016620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801663c:	4b36      	ldr	r3, [pc, #216]	; (8016718 <pvPortMalloc+0x180>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016642:	429a      	cmp	r2, r3
 8016644:	d050      	beq.n	80166e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016646:	6a3b      	ldr	r3, [r7, #32]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	2208      	movs	r2, #8
 801664c:	4413      	add	r3, r2
 801664e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	6a3b      	ldr	r3, [r7, #32]
 8016656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665a:	685a      	ldr	r2, [r3, #4]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	1ad2      	subs	r2, r2, r3
 8016660:	2308      	movs	r3, #8
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	429a      	cmp	r2, r3
 8016666:	d91f      	bls.n	80166a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	4413      	add	r3, r2
 801666e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	f003 0307 	and.w	r3, r3, #7
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00a      	beq.n	8016690 <pvPortMalloc+0xf8>
	__asm volatile
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	f383 8811 	msr	BASEPRI, r3
 8016682:	f3bf 8f6f 	isb	sy
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	613b      	str	r3, [r7, #16]
}
 801668c:	bf00      	nop
 801668e:	e7fe      	b.n	801668e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016692:	685a      	ldr	r2, [r3, #4]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	1ad2      	subs	r2, r2, r3
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80166a2:	69b8      	ldr	r0, [r7, #24]
 80166a4:	f000 f908 	bl	80168b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80166a8:	4b1d      	ldr	r3, [pc, #116]	; (8016720 <pvPortMalloc+0x188>)
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	1ad3      	subs	r3, r2, r3
 80166b2:	4a1b      	ldr	r2, [pc, #108]	; (8016720 <pvPortMalloc+0x188>)
 80166b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80166b6:	4b1a      	ldr	r3, [pc, #104]	; (8016720 <pvPortMalloc+0x188>)
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	4b1b      	ldr	r3, [pc, #108]	; (8016728 <pvPortMalloc+0x190>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	429a      	cmp	r2, r3
 80166c0:	d203      	bcs.n	80166ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80166c2:	4b17      	ldr	r3, [pc, #92]	; (8016720 <pvPortMalloc+0x188>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	4a18      	ldr	r2, [pc, #96]	; (8016728 <pvPortMalloc+0x190>)
 80166c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80166ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166cc:	685a      	ldr	r2, [r3, #4]
 80166ce:	4b13      	ldr	r3, [pc, #76]	; (801671c <pvPortMalloc+0x184>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	431a      	orrs	r2, r3
 80166d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80166d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166da:	2200      	movs	r2, #0
 80166dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80166de:	4b13      	ldr	r3, [pc, #76]	; (801672c <pvPortMalloc+0x194>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	3301      	adds	r3, #1
 80166e4:	4a11      	ldr	r2, [pc, #68]	; (801672c <pvPortMalloc+0x194>)
 80166e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80166e8:	f7fe fc28 	bl	8014f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	f003 0307 	and.w	r3, r3, #7
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d00a      	beq.n	801670c <pvPortMalloc+0x174>
	__asm volatile
 80166f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	60fb      	str	r3, [r7, #12]
}
 8016708:	bf00      	nop
 801670a:	e7fe      	b.n	801670a <pvPortMalloc+0x172>
	return pvReturn;
 801670c:	69fb      	ldr	r3, [r7, #28]
}
 801670e:	4618      	mov	r0, r3
 8016710:	3728      	adds	r7, #40	; 0x28
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	24005a20 	.word	0x24005a20
 801671c:	24005a34 	.word	0x24005a34
 8016720:	24005a24 	.word	0x24005a24
 8016724:	24005a18 	.word	0x24005a18
 8016728:	24005a28 	.word	0x24005a28
 801672c:	24005a2c 	.word	0x24005a2c

08016730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b086      	sub	sp, #24
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d04d      	beq.n	80167de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016742:	2308      	movs	r3, #8
 8016744:	425b      	negs	r3, r3
 8016746:	697a      	ldr	r2, [r7, #20]
 8016748:	4413      	add	r3, r2
 801674a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016750:	693b      	ldr	r3, [r7, #16]
 8016752:	685a      	ldr	r2, [r3, #4]
 8016754:	4b24      	ldr	r3, [pc, #144]	; (80167e8 <vPortFree+0xb8>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4013      	ands	r3, r2
 801675a:	2b00      	cmp	r3, #0
 801675c:	d10a      	bne.n	8016774 <vPortFree+0x44>
	__asm volatile
 801675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016762:	f383 8811 	msr	BASEPRI, r3
 8016766:	f3bf 8f6f 	isb	sy
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	60fb      	str	r3, [r7, #12]
}
 8016770:	bf00      	nop
 8016772:	e7fe      	b.n	8016772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d00a      	beq.n	8016792 <vPortFree+0x62>
	__asm volatile
 801677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016780:	f383 8811 	msr	BASEPRI, r3
 8016784:	f3bf 8f6f 	isb	sy
 8016788:	f3bf 8f4f 	dsb	sy
 801678c:	60bb      	str	r3, [r7, #8]
}
 801678e:	bf00      	nop
 8016790:	e7fe      	b.n	8016790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	685a      	ldr	r2, [r3, #4]
 8016796:	4b14      	ldr	r3, [pc, #80]	; (80167e8 <vPortFree+0xb8>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4013      	ands	r3, r2
 801679c:	2b00      	cmp	r3, #0
 801679e:	d01e      	beq.n	80167de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d11a      	bne.n	80167de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	685a      	ldr	r2, [r3, #4]
 80167ac:	4b0e      	ldr	r3, [pc, #56]	; (80167e8 <vPortFree+0xb8>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	43db      	mvns	r3, r3
 80167b2:	401a      	ands	r2, r3
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80167b8:	f7fe fbb2 	bl	8014f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80167bc:	693b      	ldr	r3, [r7, #16]
 80167be:	685a      	ldr	r2, [r3, #4]
 80167c0:	4b0a      	ldr	r3, [pc, #40]	; (80167ec <vPortFree+0xbc>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4413      	add	r3, r2
 80167c6:	4a09      	ldr	r2, [pc, #36]	; (80167ec <vPortFree+0xbc>)
 80167c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80167ca:	6938      	ldr	r0, [r7, #16]
 80167cc:	f000 f874 	bl	80168b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80167d0:	4b07      	ldr	r3, [pc, #28]	; (80167f0 <vPortFree+0xc0>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	3301      	adds	r3, #1
 80167d6:	4a06      	ldr	r2, [pc, #24]	; (80167f0 <vPortFree+0xc0>)
 80167d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80167da:	f7fe fbaf 	bl	8014f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80167de:	bf00      	nop
 80167e0:	3718      	adds	r7, #24
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}
 80167e6:	bf00      	nop
 80167e8:	24005a34 	.word	0x24005a34
 80167ec:	24005a24 	.word	0x24005a24
 80167f0:	24005a30 	.word	0x24005a30

080167f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80167fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80167fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016800:	4b27      	ldr	r3, [pc, #156]	; (80168a0 <prvHeapInit+0xac>)
 8016802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	f003 0307 	and.w	r3, r3, #7
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00c      	beq.n	8016828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	3307      	adds	r3, #7
 8016812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	f023 0307 	bic.w	r3, r3, #7
 801681a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801681c:	68ba      	ldr	r2, [r7, #8]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	4a1f      	ldr	r2, [pc, #124]	; (80168a0 <prvHeapInit+0xac>)
 8016824:	4413      	add	r3, r2
 8016826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801682c:	4a1d      	ldr	r2, [pc, #116]	; (80168a4 <prvHeapInit+0xb0>)
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016832:	4b1c      	ldr	r3, [pc, #112]	; (80168a4 <prvHeapInit+0xb0>)
 8016834:	2200      	movs	r2, #0
 8016836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	68ba      	ldr	r2, [r7, #8]
 801683c:	4413      	add	r3, r2
 801683e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016840:	2208      	movs	r2, #8
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	1a9b      	subs	r3, r3, r2
 8016846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f023 0307 	bic.w	r3, r3, #7
 801684e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	4a15      	ldr	r2, [pc, #84]	; (80168a8 <prvHeapInit+0xb4>)
 8016854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016856:	4b14      	ldr	r3, [pc, #80]	; (80168a8 <prvHeapInit+0xb4>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	2200      	movs	r2, #0
 801685c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801685e:	4b12      	ldr	r3, [pc, #72]	; (80168a8 <prvHeapInit+0xb4>)
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	2200      	movs	r2, #0
 8016864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	68fa      	ldr	r2, [r7, #12]
 801686e:	1ad2      	subs	r2, r2, r3
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016874:	4b0c      	ldr	r3, [pc, #48]	; (80168a8 <prvHeapInit+0xb4>)
 8016876:	681a      	ldr	r2, [r3, #0]
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	4a0a      	ldr	r2, [pc, #40]	; (80168ac <prvHeapInit+0xb8>)
 8016882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	4a09      	ldr	r2, [pc, #36]	; (80168b0 <prvHeapInit+0xbc>)
 801688a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801688c:	4b09      	ldr	r3, [pc, #36]	; (80168b4 <prvHeapInit+0xc0>)
 801688e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016892:	601a      	str	r2, [r3, #0]
}
 8016894:	bf00      	nop
 8016896:	3714      	adds	r7, #20
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr
 80168a0:	24001e18 	.word	0x24001e18
 80168a4:	24005a18 	.word	0x24005a18
 80168a8:	24005a20 	.word	0x24005a20
 80168ac:	24005a28 	.word	0x24005a28
 80168b0:	24005a24 	.word	0x24005a24
 80168b4:	24005a34 	.word	0x24005a34

080168b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80168b8:	b480      	push	{r7}
 80168ba:	b085      	sub	sp, #20
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80168c0:	4b28      	ldr	r3, [pc, #160]	; (8016964 <prvInsertBlockIntoFreeList+0xac>)
 80168c2:	60fb      	str	r3, [r7, #12]
 80168c4:	e002      	b.n	80168cc <prvInsertBlockIntoFreeList+0x14>
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	60fb      	str	r3, [r7, #12]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d8f7      	bhi.n	80168c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	68ba      	ldr	r2, [r7, #8]
 80168e0:	4413      	add	r3, r2
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d108      	bne.n	80168fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	685a      	ldr	r2, [r3, #4]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	441a      	add	r2, r3
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	441a      	add	r2, r3
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	429a      	cmp	r2, r3
 801690c:	d118      	bne.n	8016940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681a      	ldr	r2, [r3, #0]
 8016912:	4b15      	ldr	r3, [pc, #84]	; (8016968 <prvInsertBlockIntoFreeList+0xb0>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	429a      	cmp	r2, r3
 8016918:	d00d      	beq.n	8016936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	685a      	ldr	r2, [r3, #4]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	441a      	add	r2, r3
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	681a      	ldr	r2, [r3, #0]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	601a      	str	r2, [r3, #0]
 8016934:	e008      	b.n	8016948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016936:	4b0c      	ldr	r3, [pc, #48]	; (8016968 <prvInsertBlockIntoFreeList+0xb0>)
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	601a      	str	r2, [r3, #0]
 801693e:	e003      	b.n	8016948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016948:	68fa      	ldr	r2, [r7, #12]
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	429a      	cmp	r2, r3
 801694e:	d002      	beq.n	8016956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	687a      	ldr	r2, [r7, #4]
 8016954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016956:	bf00      	nop
 8016958:	3714      	adds	r7, #20
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	24005a18 	.word	0x24005a18
 8016968:	24005a20 	.word	0x24005a20

0801696c <__errno>:
 801696c:	4b01      	ldr	r3, [pc, #4]	; (8016974 <__errno+0x8>)
 801696e:	6818      	ldr	r0, [r3, #0]
 8016970:	4770      	bx	lr
 8016972:	bf00      	nop
 8016974:	240000a0 	.word	0x240000a0

08016978 <__libc_init_array>:
 8016978:	b570      	push	{r4, r5, r6, lr}
 801697a:	4d0d      	ldr	r5, [pc, #52]	; (80169b0 <__libc_init_array+0x38>)
 801697c:	4c0d      	ldr	r4, [pc, #52]	; (80169b4 <__libc_init_array+0x3c>)
 801697e:	1b64      	subs	r4, r4, r5
 8016980:	10a4      	asrs	r4, r4, #2
 8016982:	2600      	movs	r6, #0
 8016984:	42a6      	cmp	r6, r4
 8016986:	d109      	bne.n	801699c <__libc_init_array+0x24>
 8016988:	4d0b      	ldr	r5, [pc, #44]	; (80169b8 <__libc_init_array+0x40>)
 801698a:	4c0c      	ldr	r4, [pc, #48]	; (80169bc <__libc_init_array+0x44>)
 801698c:	f000 fd3c 	bl	8017408 <_init>
 8016990:	1b64      	subs	r4, r4, r5
 8016992:	10a4      	asrs	r4, r4, #2
 8016994:	2600      	movs	r6, #0
 8016996:	42a6      	cmp	r6, r4
 8016998:	d105      	bne.n	80169a6 <__libc_init_array+0x2e>
 801699a:	bd70      	pop	{r4, r5, r6, pc}
 801699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80169a0:	4798      	blx	r3
 80169a2:	3601      	adds	r6, #1
 80169a4:	e7ee      	b.n	8016984 <__libc_init_array+0xc>
 80169a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80169aa:	4798      	blx	r3
 80169ac:	3601      	adds	r6, #1
 80169ae:	e7f2      	b.n	8016996 <__libc_init_array+0x1e>
 80169b0:	08017908 	.word	0x08017908
 80169b4:	08017908 	.word	0x08017908
 80169b8:	08017908 	.word	0x08017908
 80169bc:	0801790c 	.word	0x0801790c

080169c0 <malloc>:
 80169c0:	4b02      	ldr	r3, [pc, #8]	; (80169cc <malloc+0xc>)
 80169c2:	4601      	mov	r1, r0
 80169c4:	6818      	ldr	r0, [r3, #0]
 80169c6:	f000 b88d 	b.w	8016ae4 <_malloc_r>
 80169ca:	bf00      	nop
 80169cc:	240000a0 	.word	0x240000a0

080169d0 <free>:
 80169d0:	4b02      	ldr	r3, [pc, #8]	; (80169dc <free+0xc>)
 80169d2:	4601      	mov	r1, r0
 80169d4:	6818      	ldr	r0, [r3, #0]
 80169d6:	f000 b819 	b.w	8016a0c <_free_r>
 80169da:	bf00      	nop
 80169dc:	240000a0 	.word	0x240000a0

080169e0 <memcpy>:
 80169e0:	440a      	add	r2, r1
 80169e2:	4291      	cmp	r1, r2
 80169e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80169e8:	d100      	bne.n	80169ec <memcpy+0xc>
 80169ea:	4770      	bx	lr
 80169ec:	b510      	push	{r4, lr}
 80169ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169f6:	4291      	cmp	r1, r2
 80169f8:	d1f9      	bne.n	80169ee <memcpy+0xe>
 80169fa:	bd10      	pop	{r4, pc}

080169fc <memset>:
 80169fc:	4402      	add	r2, r0
 80169fe:	4603      	mov	r3, r0
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d100      	bne.n	8016a06 <memset+0xa>
 8016a04:	4770      	bx	lr
 8016a06:	f803 1b01 	strb.w	r1, [r3], #1
 8016a0a:	e7f9      	b.n	8016a00 <memset+0x4>

08016a0c <_free_r>:
 8016a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a0e:	2900      	cmp	r1, #0
 8016a10:	d044      	beq.n	8016a9c <_free_r+0x90>
 8016a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a16:	9001      	str	r0, [sp, #4]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8016a1e:	bfb8      	it	lt
 8016a20:	18e4      	addlt	r4, r4, r3
 8016a22:	f000 fc39 	bl	8017298 <__malloc_lock>
 8016a26:	4a1e      	ldr	r2, [pc, #120]	; (8016aa0 <_free_r+0x94>)
 8016a28:	9801      	ldr	r0, [sp, #4]
 8016a2a:	6813      	ldr	r3, [r2, #0]
 8016a2c:	b933      	cbnz	r3, 8016a3c <_free_r+0x30>
 8016a2e:	6063      	str	r3, [r4, #4]
 8016a30:	6014      	str	r4, [r2, #0]
 8016a32:	b003      	add	sp, #12
 8016a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a38:	f000 bc34 	b.w	80172a4 <__malloc_unlock>
 8016a3c:	42a3      	cmp	r3, r4
 8016a3e:	d908      	bls.n	8016a52 <_free_r+0x46>
 8016a40:	6825      	ldr	r5, [r4, #0]
 8016a42:	1961      	adds	r1, r4, r5
 8016a44:	428b      	cmp	r3, r1
 8016a46:	bf01      	itttt	eq
 8016a48:	6819      	ldreq	r1, [r3, #0]
 8016a4a:	685b      	ldreq	r3, [r3, #4]
 8016a4c:	1949      	addeq	r1, r1, r5
 8016a4e:	6021      	streq	r1, [r4, #0]
 8016a50:	e7ed      	b.n	8016a2e <_free_r+0x22>
 8016a52:	461a      	mov	r2, r3
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	b10b      	cbz	r3, 8016a5c <_free_r+0x50>
 8016a58:	42a3      	cmp	r3, r4
 8016a5a:	d9fa      	bls.n	8016a52 <_free_r+0x46>
 8016a5c:	6811      	ldr	r1, [r2, #0]
 8016a5e:	1855      	adds	r5, r2, r1
 8016a60:	42a5      	cmp	r5, r4
 8016a62:	d10b      	bne.n	8016a7c <_free_r+0x70>
 8016a64:	6824      	ldr	r4, [r4, #0]
 8016a66:	4421      	add	r1, r4
 8016a68:	1854      	adds	r4, r2, r1
 8016a6a:	42a3      	cmp	r3, r4
 8016a6c:	6011      	str	r1, [r2, #0]
 8016a6e:	d1e0      	bne.n	8016a32 <_free_r+0x26>
 8016a70:	681c      	ldr	r4, [r3, #0]
 8016a72:	685b      	ldr	r3, [r3, #4]
 8016a74:	6053      	str	r3, [r2, #4]
 8016a76:	4421      	add	r1, r4
 8016a78:	6011      	str	r1, [r2, #0]
 8016a7a:	e7da      	b.n	8016a32 <_free_r+0x26>
 8016a7c:	d902      	bls.n	8016a84 <_free_r+0x78>
 8016a7e:	230c      	movs	r3, #12
 8016a80:	6003      	str	r3, [r0, #0]
 8016a82:	e7d6      	b.n	8016a32 <_free_r+0x26>
 8016a84:	6825      	ldr	r5, [r4, #0]
 8016a86:	1961      	adds	r1, r4, r5
 8016a88:	428b      	cmp	r3, r1
 8016a8a:	bf04      	itt	eq
 8016a8c:	6819      	ldreq	r1, [r3, #0]
 8016a8e:	685b      	ldreq	r3, [r3, #4]
 8016a90:	6063      	str	r3, [r4, #4]
 8016a92:	bf04      	itt	eq
 8016a94:	1949      	addeq	r1, r1, r5
 8016a96:	6021      	streq	r1, [r4, #0]
 8016a98:	6054      	str	r4, [r2, #4]
 8016a9a:	e7ca      	b.n	8016a32 <_free_r+0x26>
 8016a9c:	b003      	add	sp, #12
 8016a9e:	bd30      	pop	{r4, r5, pc}
 8016aa0:	24005a38 	.word	0x24005a38

08016aa4 <sbrk_aligned>:
 8016aa4:	b570      	push	{r4, r5, r6, lr}
 8016aa6:	4e0e      	ldr	r6, [pc, #56]	; (8016ae0 <sbrk_aligned+0x3c>)
 8016aa8:	460c      	mov	r4, r1
 8016aaa:	6831      	ldr	r1, [r6, #0]
 8016aac:	4605      	mov	r5, r0
 8016aae:	b911      	cbnz	r1, 8016ab6 <sbrk_aligned+0x12>
 8016ab0:	f000 f902 	bl	8016cb8 <_sbrk_r>
 8016ab4:	6030      	str	r0, [r6, #0]
 8016ab6:	4621      	mov	r1, r4
 8016ab8:	4628      	mov	r0, r5
 8016aba:	f000 f8fd 	bl	8016cb8 <_sbrk_r>
 8016abe:	1c43      	adds	r3, r0, #1
 8016ac0:	d00a      	beq.n	8016ad8 <sbrk_aligned+0x34>
 8016ac2:	1cc4      	adds	r4, r0, #3
 8016ac4:	f024 0403 	bic.w	r4, r4, #3
 8016ac8:	42a0      	cmp	r0, r4
 8016aca:	d007      	beq.n	8016adc <sbrk_aligned+0x38>
 8016acc:	1a21      	subs	r1, r4, r0
 8016ace:	4628      	mov	r0, r5
 8016ad0:	f000 f8f2 	bl	8016cb8 <_sbrk_r>
 8016ad4:	3001      	adds	r0, #1
 8016ad6:	d101      	bne.n	8016adc <sbrk_aligned+0x38>
 8016ad8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016adc:	4620      	mov	r0, r4
 8016ade:	bd70      	pop	{r4, r5, r6, pc}
 8016ae0:	24005a3c 	.word	0x24005a3c

08016ae4 <_malloc_r>:
 8016ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae8:	1ccd      	adds	r5, r1, #3
 8016aea:	f025 0503 	bic.w	r5, r5, #3
 8016aee:	3508      	adds	r5, #8
 8016af0:	2d0c      	cmp	r5, #12
 8016af2:	bf38      	it	cc
 8016af4:	250c      	movcc	r5, #12
 8016af6:	2d00      	cmp	r5, #0
 8016af8:	4607      	mov	r7, r0
 8016afa:	db01      	blt.n	8016b00 <_malloc_r+0x1c>
 8016afc:	42a9      	cmp	r1, r5
 8016afe:	d905      	bls.n	8016b0c <_malloc_r+0x28>
 8016b00:	230c      	movs	r3, #12
 8016b02:	603b      	str	r3, [r7, #0]
 8016b04:	2600      	movs	r6, #0
 8016b06:	4630      	mov	r0, r6
 8016b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b0c:	4e2e      	ldr	r6, [pc, #184]	; (8016bc8 <_malloc_r+0xe4>)
 8016b0e:	f000 fbc3 	bl	8017298 <__malloc_lock>
 8016b12:	6833      	ldr	r3, [r6, #0]
 8016b14:	461c      	mov	r4, r3
 8016b16:	bb34      	cbnz	r4, 8016b66 <_malloc_r+0x82>
 8016b18:	4629      	mov	r1, r5
 8016b1a:	4638      	mov	r0, r7
 8016b1c:	f7ff ffc2 	bl	8016aa4 <sbrk_aligned>
 8016b20:	1c43      	adds	r3, r0, #1
 8016b22:	4604      	mov	r4, r0
 8016b24:	d14d      	bne.n	8016bc2 <_malloc_r+0xde>
 8016b26:	6834      	ldr	r4, [r6, #0]
 8016b28:	4626      	mov	r6, r4
 8016b2a:	2e00      	cmp	r6, #0
 8016b2c:	d140      	bne.n	8016bb0 <_malloc_r+0xcc>
 8016b2e:	6823      	ldr	r3, [r4, #0]
 8016b30:	4631      	mov	r1, r6
 8016b32:	4638      	mov	r0, r7
 8016b34:	eb04 0803 	add.w	r8, r4, r3
 8016b38:	f000 f8be 	bl	8016cb8 <_sbrk_r>
 8016b3c:	4580      	cmp	r8, r0
 8016b3e:	d13a      	bne.n	8016bb6 <_malloc_r+0xd2>
 8016b40:	6821      	ldr	r1, [r4, #0]
 8016b42:	3503      	adds	r5, #3
 8016b44:	1a6d      	subs	r5, r5, r1
 8016b46:	f025 0503 	bic.w	r5, r5, #3
 8016b4a:	3508      	adds	r5, #8
 8016b4c:	2d0c      	cmp	r5, #12
 8016b4e:	bf38      	it	cc
 8016b50:	250c      	movcc	r5, #12
 8016b52:	4629      	mov	r1, r5
 8016b54:	4638      	mov	r0, r7
 8016b56:	f7ff ffa5 	bl	8016aa4 <sbrk_aligned>
 8016b5a:	3001      	adds	r0, #1
 8016b5c:	d02b      	beq.n	8016bb6 <_malloc_r+0xd2>
 8016b5e:	6823      	ldr	r3, [r4, #0]
 8016b60:	442b      	add	r3, r5
 8016b62:	6023      	str	r3, [r4, #0]
 8016b64:	e00e      	b.n	8016b84 <_malloc_r+0xa0>
 8016b66:	6822      	ldr	r2, [r4, #0]
 8016b68:	1b52      	subs	r2, r2, r5
 8016b6a:	d41e      	bmi.n	8016baa <_malloc_r+0xc6>
 8016b6c:	2a0b      	cmp	r2, #11
 8016b6e:	d916      	bls.n	8016b9e <_malloc_r+0xba>
 8016b70:	1961      	adds	r1, r4, r5
 8016b72:	42a3      	cmp	r3, r4
 8016b74:	6025      	str	r5, [r4, #0]
 8016b76:	bf18      	it	ne
 8016b78:	6059      	strne	r1, [r3, #4]
 8016b7a:	6863      	ldr	r3, [r4, #4]
 8016b7c:	bf08      	it	eq
 8016b7e:	6031      	streq	r1, [r6, #0]
 8016b80:	5162      	str	r2, [r4, r5]
 8016b82:	604b      	str	r3, [r1, #4]
 8016b84:	4638      	mov	r0, r7
 8016b86:	f104 060b 	add.w	r6, r4, #11
 8016b8a:	f000 fb8b 	bl	80172a4 <__malloc_unlock>
 8016b8e:	f026 0607 	bic.w	r6, r6, #7
 8016b92:	1d23      	adds	r3, r4, #4
 8016b94:	1af2      	subs	r2, r6, r3
 8016b96:	d0b6      	beq.n	8016b06 <_malloc_r+0x22>
 8016b98:	1b9b      	subs	r3, r3, r6
 8016b9a:	50a3      	str	r3, [r4, r2]
 8016b9c:	e7b3      	b.n	8016b06 <_malloc_r+0x22>
 8016b9e:	6862      	ldr	r2, [r4, #4]
 8016ba0:	42a3      	cmp	r3, r4
 8016ba2:	bf0c      	ite	eq
 8016ba4:	6032      	streq	r2, [r6, #0]
 8016ba6:	605a      	strne	r2, [r3, #4]
 8016ba8:	e7ec      	b.n	8016b84 <_malloc_r+0xa0>
 8016baa:	4623      	mov	r3, r4
 8016bac:	6864      	ldr	r4, [r4, #4]
 8016bae:	e7b2      	b.n	8016b16 <_malloc_r+0x32>
 8016bb0:	4634      	mov	r4, r6
 8016bb2:	6876      	ldr	r6, [r6, #4]
 8016bb4:	e7b9      	b.n	8016b2a <_malloc_r+0x46>
 8016bb6:	230c      	movs	r3, #12
 8016bb8:	603b      	str	r3, [r7, #0]
 8016bba:	4638      	mov	r0, r7
 8016bbc:	f000 fb72 	bl	80172a4 <__malloc_unlock>
 8016bc0:	e7a1      	b.n	8016b06 <_malloc_r+0x22>
 8016bc2:	6025      	str	r5, [r4, #0]
 8016bc4:	e7de      	b.n	8016b84 <_malloc_r+0xa0>
 8016bc6:	bf00      	nop
 8016bc8:	24005a38 	.word	0x24005a38

08016bcc <_puts_r>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	460e      	mov	r6, r1
 8016bd0:	4605      	mov	r5, r0
 8016bd2:	b118      	cbz	r0, 8016bdc <_puts_r+0x10>
 8016bd4:	6983      	ldr	r3, [r0, #24]
 8016bd6:	b90b      	cbnz	r3, 8016bdc <_puts_r+0x10>
 8016bd8:	f000 fa58 	bl	801708c <__sinit>
 8016bdc:	69ab      	ldr	r3, [r5, #24]
 8016bde:	68ac      	ldr	r4, [r5, #8]
 8016be0:	b913      	cbnz	r3, 8016be8 <_puts_r+0x1c>
 8016be2:	4628      	mov	r0, r5
 8016be4:	f000 fa52 	bl	801708c <__sinit>
 8016be8:	4b2c      	ldr	r3, [pc, #176]	; (8016c9c <_puts_r+0xd0>)
 8016bea:	429c      	cmp	r4, r3
 8016bec:	d120      	bne.n	8016c30 <_puts_r+0x64>
 8016bee:	686c      	ldr	r4, [r5, #4]
 8016bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bf2:	07db      	lsls	r3, r3, #31
 8016bf4:	d405      	bmi.n	8016c02 <_puts_r+0x36>
 8016bf6:	89a3      	ldrh	r3, [r4, #12]
 8016bf8:	0598      	lsls	r0, r3, #22
 8016bfa:	d402      	bmi.n	8016c02 <_puts_r+0x36>
 8016bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bfe:	f000 fae3 	bl	80171c8 <__retarget_lock_acquire_recursive>
 8016c02:	89a3      	ldrh	r3, [r4, #12]
 8016c04:	0719      	lsls	r1, r3, #28
 8016c06:	d51d      	bpl.n	8016c44 <_puts_r+0x78>
 8016c08:	6923      	ldr	r3, [r4, #16]
 8016c0a:	b1db      	cbz	r3, 8016c44 <_puts_r+0x78>
 8016c0c:	3e01      	subs	r6, #1
 8016c0e:	68a3      	ldr	r3, [r4, #8]
 8016c10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c14:	3b01      	subs	r3, #1
 8016c16:	60a3      	str	r3, [r4, #8]
 8016c18:	bb39      	cbnz	r1, 8016c6a <_puts_r+0x9e>
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	da38      	bge.n	8016c90 <_puts_r+0xc4>
 8016c1e:	4622      	mov	r2, r4
 8016c20:	210a      	movs	r1, #10
 8016c22:	4628      	mov	r0, r5
 8016c24:	f000 f858 	bl	8016cd8 <__swbuf_r>
 8016c28:	3001      	adds	r0, #1
 8016c2a:	d011      	beq.n	8016c50 <_puts_r+0x84>
 8016c2c:	250a      	movs	r5, #10
 8016c2e:	e011      	b.n	8016c54 <_puts_r+0x88>
 8016c30:	4b1b      	ldr	r3, [pc, #108]	; (8016ca0 <_puts_r+0xd4>)
 8016c32:	429c      	cmp	r4, r3
 8016c34:	d101      	bne.n	8016c3a <_puts_r+0x6e>
 8016c36:	68ac      	ldr	r4, [r5, #8]
 8016c38:	e7da      	b.n	8016bf0 <_puts_r+0x24>
 8016c3a:	4b1a      	ldr	r3, [pc, #104]	; (8016ca4 <_puts_r+0xd8>)
 8016c3c:	429c      	cmp	r4, r3
 8016c3e:	bf08      	it	eq
 8016c40:	68ec      	ldreq	r4, [r5, #12]
 8016c42:	e7d5      	b.n	8016bf0 <_puts_r+0x24>
 8016c44:	4621      	mov	r1, r4
 8016c46:	4628      	mov	r0, r5
 8016c48:	f000 f898 	bl	8016d7c <__swsetup_r>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d0dd      	beq.n	8016c0c <_puts_r+0x40>
 8016c50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c56:	07da      	lsls	r2, r3, #31
 8016c58:	d405      	bmi.n	8016c66 <_puts_r+0x9a>
 8016c5a:	89a3      	ldrh	r3, [r4, #12]
 8016c5c:	059b      	lsls	r3, r3, #22
 8016c5e:	d402      	bmi.n	8016c66 <_puts_r+0x9a>
 8016c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c62:	f000 fab2 	bl	80171ca <__retarget_lock_release_recursive>
 8016c66:	4628      	mov	r0, r5
 8016c68:	bd70      	pop	{r4, r5, r6, pc}
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	da04      	bge.n	8016c78 <_puts_r+0xac>
 8016c6e:	69a2      	ldr	r2, [r4, #24]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	dc06      	bgt.n	8016c82 <_puts_r+0xb6>
 8016c74:	290a      	cmp	r1, #10
 8016c76:	d004      	beq.n	8016c82 <_puts_r+0xb6>
 8016c78:	6823      	ldr	r3, [r4, #0]
 8016c7a:	1c5a      	adds	r2, r3, #1
 8016c7c:	6022      	str	r2, [r4, #0]
 8016c7e:	7019      	strb	r1, [r3, #0]
 8016c80:	e7c5      	b.n	8016c0e <_puts_r+0x42>
 8016c82:	4622      	mov	r2, r4
 8016c84:	4628      	mov	r0, r5
 8016c86:	f000 f827 	bl	8016cd8 <__swbuf_r>
 8016c8a:	3001      	adds	r0, #1
 8016c8c:	d1bf      	bne.n	8016c0e <_puts_r+0x42>
 8016c8e:	e7df      	b.n	8016c50 <_puts_r+0x84>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	250a      	movs	r5, #10
 8016c94:	1c5a      	adds	r2, r3, #1
 8016c96:	6022      	str	r2, [r4, #0]
 8016c98:	701d      	strb	r5, [r3, #0]
 8016c9a:	e7db      	b.n	8016c54 <_puts_r+0x88>
 8016c9c:	080178c0 	.word	0x080178c0
 8016ca0:	080178e0 	.word	0x080178e0
 8016ca4:	080178a0 	.word	0x080178a0

08016ca8 <puts>:
 8016ca8:	4b02      	ldr	r3, [pc, #8]	; (8016cb4 <puts+0xc>)
 8016caa:	4601      	mov	r1, r0
 8016cac:	6818      	ldr	r0, [r3, #0]
 8016cae:	f7ff bf8d 	b.w	8016bcc <_puts_r>
 8016cb2:	bf00      	nop
 8016cb4:	240000a0 	.word	0x240000a0

08016cb8 <_sbrk_r>:
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	4d06      	ldr	r5, [pc, #24]	; (8016cd4 <_sbrk_r+0x1c>)
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	602b      	str	r3, [r5, #0]
 8016cc4:	f7ec ffd0 	bl	8003c68 <_sbrk>
 8016cc8:	1c43      	adds	r3, r0, #1
 8016cca:	d102      	bne.n	8016cd2 <_sbrk_r+0x1a>
 8016ccc:	682b      	ldr	r3, [r5, #0]
 8016cce:	b103      	cbz	r3, 8016cd2 <_sbrk_r+0x1a>
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	bd38      	pop	{r3, r4, r5, pc}
 8016cd4:	24005a44 	.word	0x24005a44

08016cd8 <__swbuf_r>:
 8016cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cda:	460e      	mov	r6, r1
 8016cdc:	4614      	mov	r4, r2
 8016cde:	4605      	mov	r5, r0
 8016ce0:	b118      	cbz	r0, 8016cea <__swbuf_r+0x12>
 8016ce2:	6983      	ldr	r3, [r0, #24]
 8016ce4:	b90b      	cbnz	r3, 8016cea <__swbuf_r+0x12>
 8016ce6:	f000 f9d1 	bl	801708c <__sinit>
 8016cea:	4b21      	ldr	r3, [pc, #132]	; (8016d70 <__swbuf_r+0x98>)
 8016cec:	429c      	cmp	r4, r3
 8016cee:	d12b      	bne.n	8016d48 <__swbuf_r+0x70>
 8016cf0:	686c      	ldr	r4, [r5, #4]
 8016cf2:	69a3      	ldr	r3, [r4, #24]
 8016cf4:	60a3      	str	r3, [r4, #8]
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	071a      	lsls	r2, r3, #28
 8016cfa:	d52f      	bpl.n	8016d5c <__swbuf_r+0x84>
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	b36b      	cbz	r3, 8016d5c <__swbuf_r+0x84>
 8016d00:	6923      	ldr	r3, [r4, #16]
 8016d02:	6820      	ldr	r0, [r4, #0]
 8016d04:	1ac0      	subs	r0, r0, r3
 8016d06:	6963      	ldr	r3, [r4, #20]
 8016d08:	b2f6      	uxtb	r6, r6
 8016d0a:	4283      	cmp	r3, r0
 8016d0c:	4637      	mov	r7, r6
 8016d0e:	dc04      	bgt.n	8016d1a <__swbuf_r+0x42>
 8016d10:	4621      	mov	r1, r4
 8016d12:	4628      	mov	r0, r5
 8016d14:	f000 f926 	bl	8016f64 <_fflush_r>
 8016d18:	bb30      	cbnz	r0, 8016d68 <__swbuf_r+0x90>
 8016d1a:	68a3      	ldr	r3, [r4, #8]
 8016d1c:	3b01      	subs	r3, #1
 8016d1e:	60a3      	str	r3, [r4, #8]
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	1c5a      	adds	r2, r3, #1
 8016d24:	6022      	str	r2, [r4, #0]
 8016d26:	701e      	strb	r6, [r3, #0]
 8016d28:	6963      	ldr	r3, [r4, #20]
 8016d2a:	3001      	adds	r0, #1
 8016d2c:	4283      	cmp	r3, r0
 8016d2e:	d004      	beq.n	8016d3a <__swbuf_r+0x62>
 8016d30:	89a3      	ldrh	r3, [r4, #12]
 8016d32:	07db      	lsls	r3, r3, #31
 8016d34:	d506      	bpl.n	8016d44 <__swbuf_r+0x6c>
 8016d36:	2e0a      	cmp	r6, #10
 8016d38:	d104      	bne.n	8016d44 <__swbuf_r+0x6c>
 8016d3a:	4621      	mov	r1, r4
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	f000 f911 	bl	8016f64 <_fflush_r>
 8016d42:	b988      	cbnz	r0, 8016d68 <__swbuf_r+0x90>
 8016d44:	4638      	mov	r0, r7
 8016d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d48:	4b0a      	ldr	r3, [pc, #40]	; (8016d74 <__swbuf_r+0x9c>)
 8016d4a:	429c      	cmp	r4, r3
 8016d4c:	d101      	bne.n	8016d52 <__swbuf_r+0x7a>
 8016d4e:	68ac      	ldr	r4, [r5, #8]
 8016d50:	e7cf      	b.n	8016cf2 <__swbuf_r+0x1a>
 8016d52:	4b09      	ldr	r3, [pc, #36]	; (8016d78 <__swbuf_r+0xa0>)
 8016d54:	429c      	cmp	r4, r3
 8016d56:	bf08      	it	eq
 8016d58:	68ec      	ldreq	r4, [r5, #12]
 8016d5a:	e7ca      	b.n	8016cf2 <__swbuf_r+0x1a>
 8016d5c:	4621      	mov	r1, r4
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f000 f80c 	bl	8016d7c <__swsetup_r>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d0cb      	beq.n	8016d00 <__swbuf_r+0x28>
 8016d68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016d6c:	e7ea      	b.n	8016d44 <__swbuf_r+0x6c>
 8016d6e:	bf00      	nop
 8016d70:	080178c0 	.word	0x080178c0
 8016d74:	080178e0 	.word	0x080178e0
 8016d78:	080178a0 	.word	0x080178a0

08016d7c <__swsetup_r>:
 8016d7c:	4b32      	ldr	r3, [pc, #200]	; (8016e48 <__swsetup_r+0xcc>)
 8016d7e:	b570      	push	{r4, r5, r6, lr}
 8016d80:	681d      	ldr	r5, [r3, #0]
 8016d82:	4606      	mov	r6, r0
 8016d84:	460c      	mov	r4, r1
 8016d86:	b125      	cbz	r5, 8016d92 <__swsetup_r+0x16>
 8016d88:	69ab      	ldr	r3, [r5, #24]
 8016d8a:	b913      	cbnz	r3, 8016d92 <__swsetup_r+0x16>
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	f000 f97d 	bl	801708c <__sinit>
 8016d92:	4b2e      	ldr	r3, [pc, #184]	; (8016e4c <__swsetup_r+0xd0>)
 8016d94:	429c      	cmp	r4, r3
 8016d96:	d10f      	bne.n	8016db8 <__swsetup_r+0x3c>
 8016d98:	686c      	ldr	r4, [r5, #4]
 8016d9a:	89a3      	ldrh	r3, [r4, #12]
 8016d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016da0:	0719      	lsls	r1, r3, #28
 8016da2:	d42c      	bmi.n	8016dfe <__swsetup_r+0x82>
 8016da4:	06dd      	lsls	r5, r3, #27
 8016da6:	d411      	bmi.n	8016dcc <__swsetup_r+0x50>
 8016da8:	2309      	movs	r3, #9
 8016daa:	6033      	str	r3, [r6, #0]
 8016dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016db0:	81a3      	strh	r3, [r4, #12]
 8016db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016db6:	e03e      	b.n	8016e36 <__swsetup_r+0xba>
 8016db8:	4b25      	ldr	r3, [pc, #148]	; (8016e50 <__swsetup_r+0xd4>)
 8016dba:	429c      	cmp	r4, r3
 8016dbc:	d101      	bne.n	8016dc2 <__swsetup_r+0x46>
 8016dbe:	68ac      	ldr	r4, [r5, #8]
 8016dc0:	e7eb      	b.n	8016d9a <__swsetup_r+0x1e>
 8016dc2:	4b24      	ldr	r3, [pc, #144]	; (8016e54 <__swsetup_r+0xd8>)
 8016dc4:	429c      	cmp	r4, r3
 8016dc6:	bf08      	it	eq
 8016dc8:	68ec      	ldreq	r4, [r5, #12]
 8016dca:	e7e6      	b.n	8016d9a <__swsetup_r+0x1e>
 8016dcc:	0758      	lsls	r0, r3, #29
 8016dce:	d512      	bpl.n	8016df6 <__swsetup_r+0x7a>
 8016dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016dd2:	b141      	cbz	r1, 8016de6 <__swsetup_r+0x6a>
 8016dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016dd8:	4299      	cmp	r1, r3
 8016dda:	d002      	beq.n	8016de2 <__swsetup_r+0x66>
 8016ddc:	4630      	mov	r0, r6
 8016dde:	f7ff fe15 	bl	8016a0c <_free_r>
 8016de2:	2300      	movs	r3, #0
 8016de4:	6363      	str	r3, [r4, #52]	; 0x34
 8016de6:	89a3      	ldrh	r3, [r4, #12]
 8016de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016dec:	81a3      	strh	r3, [r4, #12]
 8016dee:	2300      	movs	r3, #0
 8016df0:	6063      	str	r3, [r4, #4]
 8016df2:	6923      	ldr	r3, [r4, #16]
 8016df4:	6023      	str	r3, [r4, #0]
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f043 0308 	orr.w	r3, r3, #8
 8016dfc:	81a3      	strh	r3, [r4, #12]
 8016dfe:	6923      	ldr	r3, [r4, #16]
 8016e00:	b94b      	cbnz	r3, 8016e16 <__swsetup_r+0x9a>
 8016e02:	89a3      	ldrh	r3, [r4, #12]
 8016e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e0c:	d003      	beq.n	8016e16 <__swsetup_r+0x9a>
 8016e0e:	4621      	mov	r1, r4
 8016e10:	4630      	mov	r0, r6
 8016e12:	f000 fa01 	bl	8017218 <__smakebuf_r>
 8016e16:	89a0      	ldrh	r0, [r4, #12]
 8016e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e1c:	f010 0301 	ands.w	r3, r0, #1
 8016e20:	d00a      	beq.n	8016e38 <__swsetup_r+0xbc>
 8016e22:	2300      	movs	r3, #0
 8016e24:	60a3      	str	r3, [r4, #8]
 8016e26:	6963      	ldr	r3, [r4, #20]
 8016e28:	425b      	negs	r3, r3
 8016e2a:	61a3      	str	r3, [r4, #24]
 8016e2c:	6923      	ldr	r3, [r4, #16]
 8016e2e:	b943      	cbnz	r3, 8016e42 <__swsetup_r+0xc6>
 8016e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e34:	d1ba      	bne.n	8016dac <__swsetup_r+0x30>
 8016e36:	bd70      	pop	{r4, r5, r6, pc}
 8016e38:	0781      	lsls	r1, r0, #30
 8016e3a:	bf58      	it	pl
 8016e3c:	6963      	ldrpl	r3, [r4, #20]
 8016e3e:	60a3      	str	r3, [r4, #8]
 8016e40:	e7f4      	b.n	8016e2c <__swsetup_r+0xb0>
 8016e42:	2000      	movs	r0, #0
 8016e44:	e7f7      	b.n	8016e36 <__swsetup_r+0xba>
 8016e46:	bf00      	nop
 8016e48:	240000a0 	.word	0x240000a0
 8016e4c:	080178c0 	.word	0x080178c0
 8016e50:	080178e0 	.word	0x080178e0
 8016e54:	080178a0 	.word	0x080178a0

08016e58 <__sflush_r>:
 8016e58:	898a      	ldrh	r2, [r1, #12]
 8016e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5e:	4605      	mov	r5, r0
 8016e60:	0710      	lsls	r0, r2, #28
 8016e62:	460c      	mov	r4, r1
 8016e64:	d458      	bmi.n	8016f18 <__sflush_r+0xc0>
 8016e66:	684b      	ldr	r3, [r1, #4]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	dc05      	bgt.n	8016e78 <__sflush_r+0x20>
 8016e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	dc02      	bgt.n	8016e78 <__sflush_r+0x20>
 8016e72:	2000      	movs	r0, #0
 8016e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e7a:	2e00      	cmp	r6, #0
 8016e7c:	d0f9      	beq.n	8016e72 <__sflush_r+0x1a>
 8016e7e:	2300      	movs	r3, #0
 8016e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e84:	682f      	ldr	r7, [r5, #0]
 8016e86:	602b      	str	r3, [r5, #0]
 8016e88:	d032      	beq.n	8016ef0 <__sflush_r+0x98>
 8016e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e8c:	89a3      	ldrh	r3, [r4, #12]
 8016e8e:	075a      	lsls	r2, r3, #29
 8016e90:	d505      	bpl.n	8016e9e <__sflush_r+0x46>
 8016e92:	6863      	ldr	r3, [r4, #4]
 8016e94:	1ac0      	subs	r0, r0, r3
 8016e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e98:	b10b      	cbz	r3, 8016e9e <__sflush_r+0x46>
 8016e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e9c:	1ac0      	subs	r0, r0, r3
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ea4:	6a21      	ldr	r1, [r4, #32]
 8016ea6:	4628      	mov	r0, r5
 8016ea8:	47b0      	blx	r6
 8016eaa:	1c43      	adds	r3, r0, #1
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	d106      	bne.n	8016ebe <__sflush_r+0x66>
 8016eb0:	6829      	ldr	r1, [r5, #0]
 8016eb2:	291d      	cmp	r1, #29
 8016eb4:	d82c      	bhi.n	8016f10 <__sflush_r+0xb8>
 8016eb6:	4a2a      	ldr	r2, [pc, #168]	; (8016f60 <__sflush_r+0x108>)
 8016eb8:	40ca      	lsrs	r2, r1
 8016eba:	07d6      	lsls	r6, r2, #31
 8016ebc:	d528      	bpl.n	8016f10 <__sflush_r+0xb8>
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	6062      	str	r2, [r4, #4]
 8016ec2:	04d9      	lsls	r1, r3, #19
 8016ec4:	6922      	ldr	r2, [r4, #16]
 8016ec6:	6022      	str	r2, [r4, #0]
 8016ec8:	d504      	bpl.n	8016ed4 <__sflush_r+0x7c>
 8016eca:	1c42      	adds	r2, r0, #1
 8016ecc:	d101      	bne.n	8016ed2 <__sflush_r+0x7a>
 8016ece:	682b      	ldr	r3, [r5, #0]
 8016ed0:	b903      	cbnz	r3, 8016ed4 <__sflush_r+0x7c>
 8016ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8016ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ed6:	602f      	str	r7, [r5, #0]
 8016ed8:	2900      	cmp	r1, #0
 8016eda:	d0ca      	beq.n	8016e72 <__sflush_r+0x1a>
 8016edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ee0:	4299      	cmp	r1, r3
 8016ee2:	d002      	beq.n	8016eea <__sflush_r+0x92>
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	f7ff fd91 	bl	8016a0c <_free_r>
 8016eea:	2000      	movs	r0, #0
 8016eec:	6360      	str	r0, [r4, #52]	; 0x34
 8016eee:	e7c1      	b.n	8016e74 <__sflush_r+0x1c>
 8016ef0:	6a21      	ldr	r1, [r4, #32]
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	47b0      	blx	r6
 8016ef8:	1c41      	adds	r1, r0, #1
 8016efa:	d1c7      	bne.n	8016e8c <__sflush_r+0x34>
 8016efc:	682b      	ldr	r3, [r5, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d0c4      	beq.n	8016e8c <__sflush_r+0x34>
 8016f02:	2b1d      	cmp	r3, #29
 8016f04:	d001      	beq.n	8016f0a <__sflush_r+0xb2>
 8016f06:	2b16      	cmp	r3, #22
 8016f08:	d101      	bne.n	8016f0e <__sflush_r+0xb6>
 8016f0a:	602f      	str	r7, [r5, #0]
 8016f0c:	e7b1      	b.n	8016e72 <__sflush_r+0x1a>
 8016f0e:	89a3      	ldrh	r3, [r4, #12]
 8016f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f14:	81a3      	strh	r3, [r4, #12]
 8016f16:	e7ad      	b.n	8016e74 <__sflush_r+0x1c>
 8016f18:	690f      	ldr	r7, [r1, #16]
 8016f1a:	2f00      	cmp	r7, #0
 8016f1c:	d0a9      	beq.n	8016e72 <__sflush_r+0x1a>
 8016f1e:	0793      	lsls	r3, r2, #30
 8016f20:	680e      	ldr	r6, [r1, #0]
 8016f22:	bf08      	it	eq
 8016f24:	694b      	ldreq	r3, [r1, #20]
 8016f26:	600f      	str	r7, [r1, #0]
 8016f28:	bf18      	it	ne
 8016f2a:	2300      	movne	r3, #0
 8016f2c:	eba6 0807 	sub.w	r8, r6, r7
 8016f30:	608b      	str	r3, [r1, #8]
 8016f32:	f1b8 0f00 	cmp.w	r8, #0
 8016f36:	dd9c      	ble.n	8016e72 <__sflush_r+0x1a>
 8016f38:	6a21      	ldr	r1, [r4, #32]
 8016f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f3c:	4643      	mov	r3, r8
 8016f3e:	463a      	mov	r2, r7
 8016f40:	4628      	mov	r0, r5
 8016f42:	47b0      	blx	r6
 8016f44:	2800      	cmp	r0, #0
 8016f46:	dc06      	bgt.n	8016f56 <__sflush_r+0xfe>
 8016f48:	89a3      	ldrh	r3, [r4, #12]
 8016f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f4e:	81a3      	strh	r3, [r4, #12]
 8016f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f54:	e78e      	b.n	8016e74 <__sflush_r+0x1c>
 8016f56:	4407      	add	r7, r0
 8016f58:	eba8 0800 	sub.w	r8, r8, r0
 8016f5c:	e7e9      	b.n	8016f32 <__sflush_r+0xda>
 8016f5e:	bf00      	nop
 8016f60:	20400001 	.word	0x20400001

08016f64 <_fflush_r>:
 8016f64:	b538      	push	{r3, r4, r5, lr}
 8016f66:	690b      	ldr	r3, [r1, #16]
 8016f68:	4605      	mov	r5, r0
 8016f6a:	460c      	mov	r4, r1
 8016f6c:	b913      	cbnz	r3, 8016f74 <_fflush_r+0x10>
 8016f6e:	2500      	movs	r5, #0
 8016f70:	4628      	mov	r0, r5
 8016f72:	bd38      	pop	{r3, r4, r5, pc}
 8016f74:	b118      	cbz	r0, 8016f7e <_fflush_r+0x1a>
 8016f76:	6983      	ldr	r3, [r0, #24]
 8016f78:	b90b      	cbnz	r3, 8016f7e <_fflush_r+0x1a>
 8016f7a:	f000 f887 	bl	801708c <__sinit>
 8016f7e:	4b14      	ldr	r3, [pc, #80]	; (8016fd0 <_fflush_r+0x6c>)
 8016f80:	429c      	cmp	r4, r3
 8016f82:	d11b      	bne.n	8016fbc <_fflush_r+0x58>
 8016f84:	686c      	ldr	r4, [r5, #4]
 8016f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d0ef      	beq.n	8016f6e <_fflush_r+0xa>
 8016f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f90:	07d0      	lsls	r0, r2, #31
 8016f92:	d404      	bmi.n	8016f9e <_fflush_r+0x3a>
 8016f94:	0599      	lsls	r1, r3, #22
 8016f96:	d402      	bmi.n	8016f9e <_fflush_r+0x3a>
 8016f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f9a:	f000 f915 	bl	80171c8 <__retarget_lock_acquire_recursive>
 8016f9e:	4628      	mov	r0, r5
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	f7ff ff59 	bl	8016e58 <__sflush_r>
 8016fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fa8:	07da      	lsls	r2, r3, #31
 8016faa:	4605      	mov	r5, r0
 8016fac:	d4e0      	bmi.n	8016f70 <_fflush_r+0xc>
 8016fae:	89a3      	ldrh	r3, [r4, #12]
 8016fb0:	059b      	lsls	r3, r3, #22
 8016fb2:	d4dd      	bmi.n	8016f70 <_fflush_r+0xc>
 8016fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fb6:	f000 f908 	bl	80171ca <__retarget_lock_release_recursive>
 8016fba:	e7d9      	b.n	8016f70 <_fflush_r+0xc>
 8016fbc:	4b05      	ldr	r3, [pc, #20]	; (8016fd4 <_fflush_r+0x70>)
 8016fbe:	429c      	cmp	r4, r3
 8016fc0:	d101      	bne.n	8016fc6 <_fflush_r+0x62>
 8016fc2:	68ac      	ldr	r4, [r5, #8]
 8016fc4:	e7df      	b.n	8016f86 <_fflush_r+0x22>
 8016fc6:	4b04      	ldr	r3, [pc, #16]	; (8016fd8 <_fflush_r+0x74>)
 8016fc8:	429c      	cmp	r4, r3
 8016fca:	bf08      	it	eq
 8016fcc:	68ec      	ldreq	r4, [r5, #12]
 8016fce:	e7da      	b.n	8016f86 <_fflush_r+0x22>
 8016fd0:	080178c0 	.word	0x080178c0
 8016fd4:	080178e0 	.word	0x080178e0
 8016fd8:	080178a0 	.word	0x080178a0

08016fdc <std>:
 8016fdc:	2300      	movs	r3, #0
 8016fde:	b510      	push	{r4, lr}
 8016fe0:	4604      	mov	r4, r0
 8016fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8016fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016fea:	6083      	str	r3, [r0, #8]
 8016fec:	8181      	strh	r1, [r0, #12]
 8016fee:	6643      	str	r3, [r0, #100]	; 0x64
 8016ff0:	81c2      	strh	r2, [r0, #14]
 8016ff2:	6183      	str	r3, [r0, #24]
 8016ff4:	4619      	mov	r1, r3
 8016ff6:	2208      	movs	r2, #8
 8016ff8:	305c      	adds	r0, #92	; 0x5c
 8016ffa:	f7ff fcff 	bl	80169fc <memset>
 8016ffe:	4b05      	ldr	r3, [pc, #20]	; (8017014 <std+0x38>)
 8017000:	6263      	str	r3, [r4, #36]	; 0x24
 8017002:	4b05      	ldr	r3, [pc, #20]	; (8017018 <std+0x3c>)
 8017004:	62a3      	str	r3, [r4, #40]	; 0x28
 8017006:	4b05      	ldr	r3, [pc, #20]	; (801701c <std+0x40>)
 8017008:	62e3      	str	r3, [r4, #44]	; 0x2c
 801700a:	4b05      	ldr	r3, [pc, #20]	; (8017020 <std+0x44>)
 801700c:	6224      	str	r4, [r4, #32]
 801700e:	6323      	str	r3, [r4, #48]	; 0x30
 8017010:	bd10      	pop	{r4, pc}
 8017012:	bf00      	nop
 8017014:	080172b1 	.word	0x080172b1
 8017018:	080172d3 	.word	0x080172d3
 801701c:	0801730b 	.word	0x0801730b
 8017020:	0801732f 	.word	0x0801732f

08017024 <_cleanup_r>:
 8017024:	4901      	ldr	r1, [pc, #4]	; (801702c <_cleanup_r+0x8>)
 8017026:	f000 b8af 	b.w	8017188 <_fwalk_reent>
 801702a:	bf00      	nop
 801702c:	08016f65 	.word	0x08016f65

08017030 <__sfmoreglue>:
 8017030:	b570      	push	{r4, r5, r6, lr}
 8017032:	2268      	movs	r2, #104	; 0x68
 8017034:	1e4d      	subs	r5, r1, #1
 8017036:	4355      	muls	r5, r2
 8017038:	460e      	mov	r6, r1
 801703a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801703e:	f7ff fd51 	bl	8016ae4 <_malloc_r>
 8017042:	4604      	mov	r4, r0
 8017044:	b140      	cbz	r0, 8017058 <__sfmoreglue+0x28>
 8017046:	2100      	movs	r1, #0
 8017048:	e9c0 1600 	strd	r1, r6, [r0]
 801704c:	300c      	adds	r0, #12
 801704e:	60a0      	str	r0, [r4, #8]
 8017050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017054:	f7ff fcd2 	bl	80169fc <memset>
 8017058:	4620      	mov	r0, r4
 801705a:	bd70      	pop	{r4, r5, r6, pc}

0801705c <__sfp_lock_acquire>:
 801705c:	4801      	ldr	r0, [pc, #4]	; (8017064 <__sfp_lock_acquire+0x8>)
 801705e:	f000 b8b3 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 8017062:	bf00      	nop
 8017064:	24005a41 	.word	0x24005a41

08017068 <__sfp_lock_release>:
 8017068:	4801      	ldr	r0, [pc, #4]	; (8017070 <__sfp_lock_release+0x8>)
 801706a:	f000 b8ae 	b.w	80171ca <__retarget_lock_release_recursive>
 801706e:	bf00      	nop
 8017070:	24005a41 	.word	0x24005a41

08017074 <__sinit_lock_acquire>:
 8017074:	4801      	ldr	r0, [pc, #4]	; (801707c <__sinit_lock_acquire+0x8>)
 8017076:	f000 b8a7 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 801707a:	bf00      	nop
 801707c:	24005a42 	.word	0x24005a42

08017080 <__sinit_lock_release>:
 8017080:	4801      	ldr	r0, [pc, #4]	; (8017088 <__sinit_lock_release+0x8>)
 8017082:	f000 b8a2 	b.w	80171ca <__retarget_lock_release_recursive>
 8017086:	bf00      	nop
 8017088:	24005a42 	.word	0x24005a42

0801708c <__sinit>:
 801708c:	b510      	push	{r4, lr}
 801708e:	4604      	mov	r4, r0
 8017090:	f7ff fff0 	bl	8017074 <__sinit_lock_acquire>
 8017094:	69a3      	ldr	r3, [r4, #24]
 8017096:	b11b      	cbz	r3, 80170a0 <__sinit+0x14>
 8017098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801709c:	f7ff bff0 	b.w	8017080 <__sinit_lock_release>
 80170a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170a4:	6523      	str	r3, [r4, #80]	; 0x50
 80170a6:	4b13      	ldr	r3, [pc, #76]	; (80170f4 <__sinit+0x68>)
 80170a8:	4a13      	ldr	r2, [pc, #76]	; (80170f8 <__sinit+0x6c>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80170ae:	42a3      	cmp	r3, r4
 80170b0:	bf04      	itt	eq
 80170b2:	2301      	moveq	r3, #1
 80170b4:	61a3      	streq	r3, [r4, #24]
 80170b6:	4620      	mov	r0, r4
 80170b8:	f000 f820 	bl	80170fc <__sfp>
 80170bc:	6060      	str	r0, [r4, #4]
 80170be:	4620      	mov	r0, r4
 80170c0:	f000 f81c 	bl	80170fc <__sfp>
 80170c4:	60a0      	str	r0, [r4, #8]
 80170c6:	4620      	mov	r0, r4
 80170c8:	f000 f818 	bl	80170fc <__sfp>
 80170cc:	2200      	movs	r2, #0
 80170ce:	60e0      	str	r0, [r4, #12]
 80170d0:	2104      	movs	r1, #4
 80170d2:	6860      	ldr	r0, [r4, #4]
 80170d4:	f7ff ff82 	bl	8016fdc <std>
 80170d8:	68a0      	ldr	r0, [r4, #8]
 80170da:	2201      	movs	r2, #1
 80170dc:	2109      	movs	r1, #9
 80170de:	f7ff ff7d 	bl	8016fdc <std>
 80170e2:	68e0      	ldr	r0, [r4, #12]
 80170e4:	2202      	movs	r2, #2
 80170e6:	2112      	movs	r1, #18
 80170e8:	f7ff ff78 	bl	8016fdc <std>
 80170ec:	2301      	movs	r3, #1
 80170ee:	61a3      	str	r3, [r4, #24]
 80170f0:	e7d2      	b.n	8017098 <__sinit+0xc>
 80170f2:	bf00      	nop
 80170f4:	0801789c 	.word	0x0801789c
 80170f8:	08017025 	.word	0x08017025

080170fc <__sfp>:
 80170fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170fe:	4607      	mov	r7, r0
 8017100:	f7ff ffac 	bl	801705c <__sfp_lock_acquire>
 8017104:	4b1e      	ldr	r3, [pc, #120]	; (8017180 <__sfp+0x84>)
 8017106:	681e      	ldr	r6, [r3, #0]
 8017108:	69b3      	ldr	r3, [r6, #24]
 801710a:	b913      	cbnz	r3, 8017112 <__sfp+0x16>
 801710c:	4630      	mov	r0, r6
 801710e:	f7ff ffbd 	bl	801708c <__sinit>
 8017112:	3648      	adds	r6, #72	; 0x48
 8017114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017118:	3b01      	subs	r3, #1
 801711a:	d503      	bpl.n	8017124 <__sfp+0x28>
 801711c:	6833      	ldr	r3, [r6, #0]
 801711e:	b30b      	cbz	r3, 8017164 <__sfp+0x68>
 8017120:	6836      	ldr	r6, [r6, #0]
 8017122:	e7f7      	b.n	8017114 <__sfp+0x18>
 8017124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017128:	b9d5      	cbnz	r5, 8017160 <__sfp+0x64>
 801712a:	4b16      	ldr	r3, [pc, #88]	; (8017184 <__sfp+0x88>)
 801712c:	60e3      	str	r3, [r4, #12]
 801712e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017132:	6665      	str	r5, [r4, #100]	; 0x64
 8017134:	f000 f847 	bl	80171c6 <__retarget_lock_init_recursive>
 8017138:	f7ff ff96 	bl	8017068 <__sfp_lock_release>
 801713c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017144:	6025      	str	r5, [r4, #0]
 8017146:	61a5      	str	r5, [r4, #24]
 8017148:	2208      	movs	r2, #8
 801714a:	4629      	mov	r1, r5
 801714c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017150:	f7ff fc54 	bl	80169fc <memset>
 8017154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801715c:	4620      	mov	r0, r4
 801715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017160:	3468      	adds	r4, #104	; 0x68
 8017162:	e7d9      	b.n	8017118 <__sfp+0x1c>
 8017164:	2104      	movs	r1, #4
 8017166:	4638      	mov	r0, r7
 8017168:	f7ff ff62 	bl	8017030 <__sfmoreglue>
 801716c:	4604      	mov	r4, r0
 801716e:	6030      	str	r0, [r6, #0]
 8017170:	2800      	cmp	r0, #0
 8017172:	d1d5      	bne.n	8017120 <__sfp+0x24>
 8017174:	f7ff ff78 	bl	8017068 <__sfp_lock_release>
 8017178:	230c      	movs	r3, #12
 801717a:	603b      	str	r3, [r7, #0]
 801717c:	e7ee      	b.n	801715c <__sfp+0x60>
 801717e:	bf00      	nop
 8017180:	0801789c 	.word	0x0801789c
 8017184:	ffff0001 	.word	0xffff0001

08017188 <_fwalk_reent>:
 8017188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801718c:	4606      	mov	r6, r0
 801718e:	4688      	mov	r8, r1
 8017190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017194:	2700      	movs	r7, #0
 8017196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801719a:	f1b9 0901 	subs.w	r9, r9, #1
 801719e:	d505      	bpl.n	80171ac <_fwalk_reent+0x24>
 80171a0:	6824      	ldr	r4, [r4, #0]
 80171a2:	2c00      	cmp	r4, #0
 80171a4:	d1f7      	bne.n	8017196 <_fwalk_reent+0xe>
 80171a6:	4638      	mov	r0, r7
 80171a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171ac:	89ab      	ldrh	r3, [r5, #12]
 80171ae:	2b01      	cmp	r3, #1
 80171b0:	d907      	bls.n	80171c2 <_fwalk_reent+0x3a>
 80171b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171b6:	3301      	adds	r3, #1
 80171b8:	d003      	beq.n	80171c2 <_fwalk_reent+0x3a>
 80171ba:	4629      	mov	r1, r5
 80171bc:	4630      	mov	r0, r6
 80171be:	47c0      	blx	r8
 80171c0:	4307      	orrs	r7, r0
 80171c2:	3568      	adds	r5, #104	; 0x68
 80171c4:	e7e9      	b.n	801719a <_fwalk_reent+0x12>

080171c6 <__retarget_lock_init_recursive>:
 80171c6:	4770      	bx	lr

080171c8 <__retarget_lock_acquire_recursive>:
 80171c8:	4770      	bx	lr

080171ca <__retarget_lock_release_recursive>:
 80171ca:	4770      	bx	lr

080171cc <__swhatbuf_r>:
 80171cc:	b570      	push	{r4, r5, r6, lr}
 80171ce:	460e      	mov	r6, r1
 80171d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171d4:	2900      	cmp	r1, #0
 80171d6:	b096      	sub	sp, #88	; 0x58
 80171d8:	4614      	mov	r4, r2
 80171da:	461d      	mov	r5, r3
 80171dc:	da08      	bge.n	80171f0 <__swhatbuf_r+0x24>
 80171de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171e2:	2200      	movs	r2, #0
 80171e4:	602a      	str	r2, [r5, #0]
 80171e6:	061a      	lsls	r2, r3, #24
 80171e8:	d410      	bmi.n	801720c <__swhatbuf_r+0x40>
 80171ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171ee:	e00e      	b.n	801720e <__swhatbuf_r+0x42>
 80171f0:	466a      	mov	r2, sp
 80171f2:	f000 f8c3 	bl	801737c <_fstat_r>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	dbf1      	blt.n	80171de <__swhatbuf_r+0x12>
 80171fa:	9a01      	ldr	r2, [sp, #4]
 80171fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017204:	425a      	negs	r2, r3
 8017206:	415a      	adcs	r2, r3
 8017208:	602a      	str	r2, [r5, #0]
 801720a:	e7ee      	b.n	80171ea <__swhatbuf_r+0x1e>
 801720c:	2340      	movs	r3, #64	; 0x40
 801720e:	2000      	movs	r0, #0
 8017210:	6023      	str	r3, [r4, #0]
 8017212:	b016      	add	sp, #88	; 0x58
 8017214:	bd70      	pop	{r4, r5, r6, pc}
	...

08017218 <__smakebuf_r>:
 8017218:	898b      	ldrh	r3, [r1, #12]
 801721a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801721c:	079d      	lsls	r5, r3, #30
 801721e:	4606      	mov	r6, r0
 8017220:	460c      	mov	r4, r1
 8017222:	d507      	bpl.n	8017234 <__smakebuf_r+0x1c>
 8017224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017228:	6023      	str	r3, [r4, #0]
 801722a:	6123      	str	r3, [r4, #16]
 801722c:	2301      	movs	r3, #1
 801722e:	6163      	str	r3, [r4, #20]
 8017230:	b002      	add	sp, #8
 8017232:	bd70      	pop	{r4, r5, r6, pc}
 8017234:	ab01      	add	r3, sp, #4
 8017236:	466a      	mov	r2, sp
 8017238:	f7ff ffc8 	bl	80171cc <__swhatbuf_r>
 801723c:	9900      	ldr	r1, [sp, #0]
 801723e:	4605      	mov	r5, r0
 8017240:	4630      	mov	r0, r6
 8017242:	f7ff fc4f 	bl	8016ae4 <_malloc_r>
 8017246:	b948      	cbnz	r0, 801725c <__smakebuf_r+0x44>
 8017248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801724c:	059a      	lsls	r2, r3, #22
 801724e:	d4ef      	bmi.n	8017230 <__smakebuf_r+0x18>
 8017250:	f023 0303 	bic.w	r3, r3, #3
 8017254:	f043 0302 	orr.w	r3, r3, #2
 8017258:	81a3      	strh	r3, [r4, #12]
 801725a:	e7e3      	b.n	8017224 <__smakebuf_r+0xc>
 801725c:	4b0d      	ldr	r3, [pc, #52]	; (8017294 <__smakebuf_r+0x7c>)
 801725e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017260:	89a3      	ldrh	r3, [r4, #12]
 8017262:	6020      	str	r0, [r4, #0]
 8017264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017268:	81a3      	strh	r3, [r4, #12]
 801726a:	9b00      	ldr	r3, [sp, #0]
 801726c:	6163      	str	r3, [r4, #20]
 801726e:	9b01      	ldr	r3, [sp, #4]
 8017270:	6120      	str	r0, [r4, #16]
 8017272:	b15b      	cbz	r3, 801728c <__smakebuf_r+0x74>
 8017274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017278:	4630      	mov	r0, r6
 801727a:	f000 f891 	bl	80173a0 <_isatty_r>
 801727e:	b128      	cbz	r0, 801728c <__smakebuf_r+0x74>
 8017280:	89a3      	ldrh	r3, [r4, #12]
 8017282:	f023 0303 	bic.w	r3, r3, #3
 8017286:	f043 0301 	orr.w	r3, r3, #1
 801728a:	81a3      	strh	r3, [r4, #12]
 801728c:	89a0      	ldrh	r0, [r4, #12]
 801728e:	4305      	orrs	r5, r0
 8017290:	81a5      	strh	r5, [r4, #12]
 8017292:	e7cd      	b.n	8017230 <__smakebuf_r+0x18>
 8017294:	08017025 	.word	0x08017025

08017298 <__malloc_lock>:
 8017298:	4801      	ldr	r0, [pc, #4]	; (80172a0 <__malloc_lock+0x8>)
 801729a:	f7ff bf95 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 801729e:	bf00      	nop
 80172a0:	24005a40 	.word	0x24005a40

080172a4 <__malloc_unlock>:
 80172a4:	4801      	ldr	r0, [pc, #4]	; (80172ac <__malloc_unlock+0x8>)
 80172a6:	f7ff bf90 	b.w	80171ca <__retarget_lock_release_recursive>
 80172aa:	bf00      	nop
 80172ac:	24005a40 	.word	0x24005a40

080172b0 <__sread>:
 80172b0:	b510      	push	{r4, lr}
 80172b2:	460c      	mov	r4, r1
 80172b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172b8:	f000 f894 	bl	80173e4 <_read_r>
 80172bc:	2800      	cmp	r0, #0
 80172be:	bfab      	itete	ge
 80172c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80172c2:	89a3      	ldrhlt	r3, [r4, #12]
 80172c4:	181b      	addge	r3, r3, r0
 80172c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80172ca:	bfac      	ite	ge
 80172cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80172ce:	81a3      	strhlt	r3, [r4, #12]
 80172d0:	bd10      	pop	{r4, pc}

080172d2 <__swrite>:
 80172d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d6:	461f      	mov	r7, r3
 80172d8:	898b      	ldrh	r3, [r1, #12]
 80172da:	05db      	lsls	r3, r3, #23
 80172dc:	4605      	mov	r5, r0
 80172de:	460c      	mov	r4, r1
 80172e0:	4616      	mov	r6, r2
 80172e2:	d505      	bpl.n	80172f0 <__swrite+0x1e>
 80172e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172e8:	2302      	movs	r3, #2
 80172ea:	2200      	movs	r2, #0
 80172ec:	f000 f868 	bl	80173c0 <_lseek_r>
 80172f0:	89a3      	ldrh	r3, [r4, #12]
 80172f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80172fa:	81a3      	strh	r3, [r4, #12]
 80172fc:	4632      	mov	r2, r6
 80172fe:	463b      	mov	r3, r7
 8017300:	4628      	mov	r0, r5
 8017302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017306:	f000 b817 	b.w	8017338 <_write_r>

0801730a <__sseek>:
 801730a:	b510      	push	{r4, lr}
 801730c:	460c      	mov	r4, r1
 801730e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017312:	f000 f855 	bl	80173c0 <_lseek_r>
 8017316:	1c43      	adds	r3, r0, #1
 8017318:	89a3      	ldrh	r3, [r4, #12]
 801731a:	bf15      	itete	ne
 801731c:	6560      	strne	r0, [r4, #84]	; 0x54
 801731e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017326:	81a3      	strheq	r3, [r4, #12]
 8017328:	bf18      	it	ne
 801732a:	81a3      	strhne	r3, [r4, #12]
 801732c:	bd10      	pop	{r4, pc}

0801732e <__sclose>:
 801732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017332:	f000 b813 	b.w	801735c <_close_r>
	...

08017338 <_write_r>:
 8017338:	b538      	push	{r3, r4, r5, lr}
 801733a:	4d07      	ldr	r5, [pc, #28]	; (8017358 <_write_r+0x20>)
 801733c:	4604      	mov	r4, r0
 801733e:	4608      	mov	r0, r1
 8017340:	4611      	mov	r1, r2
 8017342:	2200      	movs	r2, #0
 8017344:	602a      	str	r2, [r5, #0]
 8017346:	461a      	mov	r2, r3
 8017348:	f7ec fc3d 	bl	8003bc6 <_write>
 801734c:	1c43      	adds	r3, r0, #1
 801734e:	d102      	bne.n	8017356 <_write_r+0x1e>
 8017350:	682b      	ldr	r3, [r5, #0]
 8017352:	b103      	cbz	r3, 8017356 <_write_r+0x1e>
 8017354:	6023      	str	r3, [r4, #0]
 8017356:	bd38      	pop	{r3, r4, r5, pc}
 8017358:	24005a44 	.word	0x24005a44

0801735c <_close_r>:
 801735c:	b538      	push	{r3, r4, r5, lr}
 801735e:	4d06      	ldr	r5, [pc, #24]	; (8017378 <_close_r+0x1c>)
 8017360:	2300      	movs	r3, #0
 8017362:	4604      	mov	r4, r0
 8017364:	4608      	mov	r0, r1
 8017366:	602b      	str	r3, [r5, #0]
 8017368:	f7ec fc49 	bl	8003bfe <_close>
 801736c:	1c43      	adds	r3, r0, #1
 801736e:	d102      	bne.n	8017376 <_close_r+0x1a>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	b103      	cbz	r3, 8017376 <_close_r+0x1a>
 8017374:	6023      	str	r3, [r4, #0]
 8017376:	bd38      	pop	{r3, r4, r5, pc}
 8017378:	24005a44 	.word	0x24005a44

0801737c <_fstat_r>:
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	4d07      	ldr	r5, [pc, #28]	; (801739c <_fstat_r+0x20>)
 8017380:	2300      	movs	r3, #0
 8017382:	4604      	mov	r4, r0
 8017384:	4608      	mov	r0, r1
 8017386:	4611      	mov	r1, r2
 8017388:	602b      	str	r3, [r5, #0]
 801738a:	f7ec fc44 	bl	8003c16 <_fstat>
 801738e:	1c43      	adds	r3, r0, #1
 8017390:	d102      	bne.n	8017398 <_fstat_r+0x1c>
 8017392:	682b      	ldr	r3, [r5, #0]
 8017394:	b103      	cbz	r3, 8017398 <_fstat_r+0x1c>
 8017396:	6023      	str	r3, [r4, #0]
 8017398:	bd38      	pop	{r3, r4, r5, pc}
 801739a:	bf00      	nop
 801739c:	24005a44 	.word	0x24005a44

080173a0 <_isatty_r>:
 80173a0:	b538      	push	{r3, r4, r5, lr}
 80173a2:	4d06      	ldr	r5, [pc, #24]	; (80173bc <_isatty_r+0x1c>)
 80173a4:	2300      	movs	r3, #0
 80173a6:	4604      	mov	r4, r0
 80173a8:	4608      	mov	r0, r1
 80173aa:	602b      	str	r3, [r5, #0]
 80173ac:	f7ec fc43 	bl	8003c36 <_isatty>
 80173b0:	1c43      	adds	r3, r0, #1
 80173b2:	d102      	bne.n	80173ba <_isatty_r+0x1a>
 80173b4:	682b      	ldr	r3, [r5, #0]
 80173b6:	b103      	cbz	r3, 80173ba <_isatty_r+0x1a>
 80173b8:	6023      	str	r3, [r4, #0]
 80173ba:	bd38      	pop	{r3, r4, r5, pc}
 80173bc:	24005a44 	.word	0x24005a44

080173c0 <_lseek_r>:
 80173c0:	b538      	push	{r3, r4, r5, lr}
 80173c2:	4d07      	ldr	r5, [pc, #28]	; (80173e0 <_lseek_r+0x20>)
 80173c4:	4604      	mov	r4, r0
 80173c6:	4608      	mov	r0, r1
 80173c8:	4611      	mov	r1, r2
 80173ca:	2200      	movs	r2, #0
 80173cc:	602a      	str	r2, [r5, #0]
 80173ce:	461a      	mov	r2, r3
 80173d0:	f7ec fc3c 	bl	8003c4c <_lseek>
 80173d4:	1c43      	adds	r3, r0, #1
 80173d6:	d102      	bne.n	80173de <_lseek_r+0x1e>
 80173d8:	682b      	ldr	r3, [r5, #0]
 80173da:	b103      	cbz	r3, 80173de <_lseek_r+0x1e>
 80173dc:	6023      	str	r3, [r4, #0]
 80173de:	bd38      	pop	{r3, r4, r5, pc}
 80173e0:	24005a44 	.word	0x24005a44

080173e4 <_read_r>:
 80173e4:	b538      	push	{r3, r4, r5, lr}
 80173e6:	4d07      	ldr	r5, [pc, #28]	; (8017404 <_read_r+0x20>)
 80173e8:	4604      	mov	r4, r0
 80173ea:	4608      	mov	r0, r1
 80173ec:	4611      	mov	r1, r2
 80173ee:	2200      	movs	r2, #0
 80173f0:	602a      	str	r2, [r5, #0]
 80173f2:	461a      	mov	r2, r3
 80173f4:	f7ec fbca 	bl	8003b8c <_read>
 80173f8:	1c43      	adds	r3, r0, #1
 80173fa:	d102      	bne.n	8017402 <_read_r+0x1e>
 80173fc:	682b      	ldr	r3, [r5, #0]
 80173fe:	b103      	cbz	r3, 8017402 <_read_r+0x1e>
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	bd38      	pop	{r3, r4, r5, pc}
 8017404:	24005a44 	.word	0x24005a44

08017408 <_init>:
 8017408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801740a:	bf00      	nop
 801740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801740e:	bc08      	pop	{r3}
 8017410:	469e      	mov	lr, r3
 8017412:	4770      	bx	lr

08017414 <_fini>:
 8017414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017416:	bf00      	nop
 8017418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801741a:	bc08      	pop	{r3}
 801741c:	469e      	mov	lr, r3
 801741e:	4770      	bx	lr
