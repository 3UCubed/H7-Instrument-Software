
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016be0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08016e80  08016e80  00026e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017318  08017318  00027318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017320  08017320  00027320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017324  08017324  00027324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08017328  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006710  24000100  08017424  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24006810  08017424  00036810  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003bbf8  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000070c6  00000000  00000000  0006bd22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028f8  00000000  00000000  00072de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002610  00000000  00000000  000756e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044b35  00000000  00000000  00077cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ca5e  00000000  00000000  000bc825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019509c  00000000  00000000  000f9283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028e31f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b27c  00000000  00000000  0028e370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016e68 	.word	0x08016e68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016e68 	.word	0x08016e68

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 fef9 	bl	8004460 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fda8 	bl	80021c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f814 	bl	80056b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd9b 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 f957 	bl	8004968 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fd82 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 f949 	bl	8004968 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fd74 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f93b 	bl	8004968 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fd66 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f92d 	bl	8004968 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fd58 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f91e 	bl	8004968 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fd49 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f90f 	bl	8004968 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fd3a 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f900 	bl	8004968 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd2b 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f8f1 	bl	8004968 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd1c 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f8e2 	bl	8004968 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd0d 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f8d3 	bl	8004968 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fcfe 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f8c4 	bl	8004968 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fcef 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fde1 	bl	8004460 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc90 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f84c 	bl	8004968 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fc77 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f83e 	bl	8004968 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fc69 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f830 	bl	8004968 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fc5b 	bl	80021c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f822 	bl	8004968 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fc4d 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fa64 	bl	8008ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fa58 	bl	8008ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fa4c 	bl	8008ec8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fbdf 	bl	8006238 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fba2 	bl	80021c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fa9a 	bl	8004018 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fa94 	bl	8004018 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fb7f 	bl	8006238 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fb42 	bl	80021c8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fc65 	bl	801645c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 ff47 	bl	8005a2c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb10 	bl	80021c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 f962 	bl	8005e8c <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fafb 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f937 	bl	8008ec8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 faca 	bl	8006238 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa8d 	bl	80021c8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 fe8c 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 fea3 	bl	8005a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_DMA_Init+0x8c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <MX_DMA_Init+0x8c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_DMA_Init+0x8c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fe63 	bl	80059dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 fe7a 	bl	8005a10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fe5b 	bl	80059dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 fe72 	bl	8005a10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 fe53 	bl	80059dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 fe6a 	bl	8005a10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f004 fe4b 	bl	80059dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f004 fe62 	bl	8005a10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f004 fe43 	bl	80059dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f004 fe5a 	bl	8005a10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f004 fe3b 	bl	80059dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f004 fe52 	bl	8005a10 <HAL_NVIC_EnableIRQ>

}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58024400 	.word	0x58024400

08000d78 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <vApplicationTickHook+0x18>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <vApplicationTickHook+0x18>)
 8000d84:	6013      	str	r3, [r2, #0]
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	24001964 	.word	0x24001964

08000d94 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000db0:	4a24      	ldr	r2, [pc, #144]	; (8000e44 <MX_FREERTOS_Init+0x98>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4824      	ldr	r0, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0x9c>)
 8000db6:	f012 f983 	bl	80130c0 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_FREERTOS_Init+0xa0>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000dc0:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <MX_FREERTOS_Init+0xa4>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4823      	ldr	r0, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xa8>)
 8000dc6:	f012 f97b 	bl	80130c0 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_FREERTOS_Init+0xac>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000dd0:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <MX_FREERTOS_Init+0xb0>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xb4>)
 8000dd6:	f012 f973 	bl	80130c0 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_FREERTOS_Init+0xb8>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000de0:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <MX_FREERTOS_Init+0xbc>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4821      	ldr	r0, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xc0>)
 8000de6:	f012 f96b 	bl	80130c0 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <MX_FREERTOS_Init+0xc4>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <MX_FREERTOS_Init+0xc8>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4820      	ldr	r0, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0xcc>)
 8000df6:	f012 f963 	bl	80130c0 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <MX_FREERTOS_Init+0xd0>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000e00:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <MX_FREERTOS_Init+0xd4>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	481f      	ldr	r0, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0xd8>)
 8000e06:	f012 f95b 	bl	80130c0 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <MX_FREERTOS_Init+0xdc>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <MX_FREERTOS_Init+0xe0>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	481e      	ldr	r0, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0xe4>)
 8000e16:	f012 f953 	bl	80130c0 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <MX_FREERTOS_Init+0xe8>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <MX_FREERTOS_Init+0xec>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	481d      	ldr	r0, [pc, #116]	; (8000e9c <MX_FREERTOS_Init+0xf0>)
 8000e26:	f012 f94b 	bl	80130c0 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <MX_FREERTOS_Init+0xf4>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <MX_FREERTOS_Init+0xf8>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <MX_FREERTOS_Init+0xfc>)
 8000e36:	f012 f943 	bl	80130c0 <osThreadNew>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <MX_FREERTOS_Init+0x100>)
 8000e3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	080170e8 	.word	0x080170e8
 8000e48:	08000eb1 	.word	0x08000eb1
 8000e4c:	24000360 	.word	0x24000360
 8000e50:	0801710c 	.word	0x0801710c
 8000e54:	08000ed9 	.word	0x08000ed9
 8000e58:	240005c0 	.word	0x240005c0
 8000e5c:	08017130 	.word	0x08017130
 8000e60:	08000f01 	.word	0x08000f01
 8000e64:	24000820 	.word	0x24000820
 8000e68:	08017154 	.word	0x08017154
 8000e6c:	08000f29 	.word	0x08000f29
 8000e70:	24000a80 	.word	0x24000a80
 8000e74:	08017178 	.word	0x08017178
 8000e78:	08000fa1 	.word	0x08000fa1
 8000e7c:	24000ce0 	.word	0x24000ce0
 8000e80:	0801719c 	.word	0x0801719c
 8000e84:	08001019 	.word	0x08001019
 8000e88:	24000f40 	.word	0x24000f40
 8000e8c:	080171c0 	.word	0x080171c0
 8000e90:	080010c5 	.word	0x080010c5
 8000e94:	240011a0 	.word	0x240011a0
 8000e98:	080171e4 	.word	0x080171e4
 8000e9c:	080010f5 	.word	0x080010f5
 8000ea0:	24001400 	.word	0x24001400
 8000ea4:	08017208 	.word	0x08017208
 8000ea8:	080011bd 	.word	0x080011bd
 8000eac:	24001660 	.word	0x24001660

08000eb0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <PMT_init+0x24>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	f012 fa7e 	bl	80133c4 <osEventFlagsWait>

		create_pmt_packet();
 8000ec8:	f001 f984 	bl	80021d4 <create_pmt_packet>

		osThreadYield();
 8000ecc:	f012 f98a 	bl	80131e4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed0:	e7f2      	b.n	8000eb8 <PMT_init+0x8>
 8000ed2:	bf00      	nop
 8000ed4:	24001914 	.word	0x24001914

08000ed8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <ERPA_init+0x24>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2102      	movs	r1, #2
 8000eec:	f012 fa6a 	bl	80133c4 <osEventFlagsWait>

		create_erpa_packet();
 8000ef0:	f001 f9b6 	bl	8002260 <create_erpa_packet>

		osThreadYield();
 8000ef4:	f012 f976 	bl	80131e4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ef8:	e7f2      	b.n	8000ee0 <ERPA_init+0x8>
 8000efa:	bf00      	nop
 8000efc:	24001914 	.word	0x24001914

08000f00 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HK_init+0x24>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f10:	2200      	movs	r2, #0
 8000f12:	2104      	movs	r1, #4
 8000f14:	f012 fa56 	bl	80133c4 <osEventFlagsWait>

		create_hk_packet();
 8000f18:	f001 fa00 	bl	800231c <create_hk_packet>

		osThreadYield();
 8000f1c:	f012 f962 	bl	80131e4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f20:	e7f2      	b.n	8000f08 <HK_init+0x8>
 8000f22:	bf00      	nop
 8000f24:	24001914 	.word	0x24001914

08000f28 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <AUTOINIT_init+0x70>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	f012 fa42 	bl	80133c4 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e012      	b.n	8000f6c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <AUTOINIT_init+0x74>)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <AUTOINIT_init+0x74>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4413      	add	r3, r2
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f008 f97c 	bl	8009258 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f60:	2064      	movs	r0, #100	; 0x64
 8000f62:	f012 f95f 	bl	8013224 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	dde9      	ble.n	8000f46 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f72:	2308      	movs	r3, #8
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	e008      	b.n	8000f8a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 ff14 	bl	8003dac <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3301      	adds	r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b0d      	cmp	r3, #13
 8000f8e:	ddf3      	ble.n	8000f78 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f90:	f012 f928 	bl	80131e4 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f94:	e7cc      	b.n	8000f30 <AUTOINIT_init+0x8>
 8000f96:	bf00      	nop
 8000f98:	24001918 	.word	0x24001918
 8000f9c:	0801722c 	.word	0x0801722c

08000fa0 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <AUTODEINIT_init+0x70>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	f012 fa06 	bl	80133c4 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fb8:	230d      	movs	r3, #13
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e008      	b.n	8000fd0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fef1 	bl	8003dac <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b07      	cmp	r3, #7
 8000fd4:	dcf3      	bgt.n	8000fbe <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	e012      	b.n	8001002 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <AUTODEINIT_init+0x74>)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <AUTODEINIT_init+0x74>)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	889b      	ldrh	r3, [r3, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f008 f931 	bl	8009258 <HAL_GPIO_WritePin>
			osDelay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f012 f914 	bl	8013224 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dae9      	bge.n	8000fdc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8001008:	f012 f8ec 	bl	80131e4 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800100c:	e7cc      	b.n	8000fa8 <AUTODEINIT_init+0x8>
 800100e:	bf00      	nop
 8001010:	24001918 	.word	0x24001918
 8001014:	0801722c 	.word	0x0801722c

08001018 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <Voltage_Monitor_init+0xa8>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001028:	2200      	movs	r2, #0
 800102a:	2101      	movs	r1, #1
 800102c:	f012 f9ca 	bl	80133c4 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001030:	f002 fee6 	bl	8003e00 <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001034:	f002 feda 	bl	8003dec <get_rail_monitor>
 8001038:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e03b      	b.n	80010b8 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4413      	add	r3, r2
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d02d      	beq.n	80010b2 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	8898      	ldrh	r0, [r3, #4]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	461a      	mov	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4413      	add	r3, r2
 8001078:	891b      	ldrh	r3, [r3, #8]
 800107a:	4619      	mov	r1, r3
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	461a      	mov	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4413      	add	r3, r2
 800108c:	88db      	ldrh	r3, [r3, #6]
 800108e:	461a      	mov	r2, r3
 8001090:	f002 ff18 	bl	8003ec4 <in_range>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10b      	bne.n	80010b2 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	461a      	mov	r2, r3
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	785a      	ldrb	r2, [r3, #1]
 80010ac:	3201      	adds	r2, #1
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b11      	cmp	r3, #17
 80010bc:	ddc0      	ble.n	8001040 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010be:	e7af      	b.n	8001020 <Voltage_Monitor_init+0x8>
 80010c0:	24001918 	.word	0x24001918

080010c4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <STOP_init+0x2c>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d4:	2200      	movs	r2, #0
 80010d6:	2102      	movs	r1, #2
 80010d8:	f012 f974 	bl	80133c4 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <STOP_init+0x2c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f012 f93c 	bl	8013360 <osEventFlagsClear>

	  enter_stop();
 80010e8:	f001 f850 	bl	800218c <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010ec:	e7ee      	b.n	80010cc <STOP_init+0x8>
 80010ee:	bf00      	nop
 80010f0:	24001918 	.word	0x24001918

080010f4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <Science_init+0xa8>)
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	2200      	movs	r2, #0
 8001106:	2101      	movs	r1, #1
 8001108:	f012 f95c 	bl	80133c4 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e012      	b.n	8001138 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <Science_init+0xac>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800111a:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <Science_init+0xac>)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	889b      	ldrh	r3, [r3, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	4619      	mov	r1, r3
 8001128:	f008 f896 	bl	8009258 <HAL_GPIO_WritePin>
			osDelay(200);
 800112c:	20c8      	movs	r0, #200	; 0xc8
 800112e:	f012 f879 	bl	8013224 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b08      	cmp	r3, #8
 800113c:	dde9      	ble.n	8001112 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800113e:	2308      	movs	r3, #8
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	e008      	b.n	8001156 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fe2e 	bl	8003dac <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	3301      	adds	r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b10      	cmp	r3, #16
 800115a:	ddf3      	ble.n	8001144 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2320      	movs	r3, #32
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <Science_init+0xb0>)
 8001168:	2100      	movs	r1, #0
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <Science_init+0xb4>)
 800116c:	f004 fcd8 	bl	8005b20 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <Science_init+0xb8>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <Science_init+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800117c:	f001 fa1c 	bl	80025b8 <reset_packet_sequence_numbers>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8001180:	210c      	movs	r1, #12
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <Science_init+0xc0>)
 8001184:	f00d fdba 	bl	800ecfc <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001188:	2100      	movs	r1, #0
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <Science_init+0xc4>)
 800118c:	f00d fdb6 	bl	800ecfc <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001190:	b662      	cpsie	i
}
 8001192:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001194:	f012 f826 	bl	80131e4 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001198:	e7b0      	b.n	80010fc <Science_init+0x8>
 800119a:	bf00      	nop
 800119c:	2400191c 	.word	0x2400191c
 80011a0:	0801722c 	.word	0x0801722c
 80011a4:	24000000 	.word	0x24000000
 80011a8:	240002d4 	.word	0x240002d4
 80011ac:	24001960 	.word	0x24001960
 80011b0:	24001964 	.word	0x24001964
 80011b4:	24001ca0 	.word	0x24001ca0
 80011b8:	24001c54 	.word	0x24001c54

080011bc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <Idle_init+0x8c>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	f012 f8f8 	bl	80133c4 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 80011d4:	210c      	movs	r1, #12
 80011d6:	481d      	ldr	r0, [pc, #116]	; (800124c <Idle_init+0x90>)
 80011d8:	f00d feea 	bl	800efb0 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80011dc:	2100      	movs	r1, #0
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <Idle_init+0x94>)
 80011e0:	f00d fee6 	bl	800efb0 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <Idle_init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80011ea:	2100      	movs	r1, #0
 80011ec:	481a      	ldr	r0, [pc, #104]	; (8001258 <Idle_init+0x9c>)
 80011ee:	f004 fd57 	bl	8005ca0 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011f2:	2310      	movs	r3, #16
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	e008      	b.n	800120a <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fdd4 	bl	8003dac <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3b01      	subs	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b07      	cmp	r3, #7
 800120e:	dcf3      	bgt.n	80011f8 <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001210:	2308      	movs	r3, #8
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	e012      	b.n	800123c <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <Idle_init+0xa0>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <Idle_init+0xa0>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	4619      	mov	r1, r3
 800122c:	f008 f814 	bl	8009258 <HAL_GPIO_WritePin>
			osDelay(200);
 8001230:	20c8      	movs	r0, #200	; 0xc8
 8001232:	f011 fff7 	bl	8013224 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	dae9      	bge.n	8001216 <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 8001242:	f011 ffcf 	bl	80131e4 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001246:	e7bd      	b.n	80011c4 <Idle_init+0x8>
 8001248:	2400191c 	.word	0x2400191c
 800124c:	24001ca0 	.word	0x24001ca0
 8001250:	24001c54 	.word	0x24001c54
 8001254:	24001960 	.word	0x24001960
 8001258:	240002d4 	.word	0x240002d4
 800125c:	0801722c 	.word	0x0801722c

08001260 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <MX_GPIO_Init+0xe8>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <MX_GPIO_Init+0xe8>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80012f4:	4815      	ldr	r0, [pc, #84]	; (800134c <MX_GPIO_Init+0xec>)
 80012f6:	f007 ffaf 	bl	8009258 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_GPIO_Init+0xf0>)
 8001300:	f007 ffaa 	bl	8009258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001304:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001308:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130e:	2302      	movs	r3, #2
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <MX_GPIO_Init+0xec>)
 800131e:	f007 fdd3 	bl	8008ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800132a:	2302      	movs	r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_GPIO_Init+0xf0>)
 800133a:	f007 fdc5 	bl	8008ec8 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58024400 	.word	0x58024400
 800134c:	58020800 	.word	0x58020800
 8001350:	58020400 	.word	0x58020400

08001354 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_I2C1_Init+0x78>)
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <MX_I2C1_Init+0x7c>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_I2C1_Init+0x78>)
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C1_Init+0x80>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_I2C1_Init+0x78>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_I2C1_Init+0x78>)
 800136c:	2201      	movs	r2, #1
 800136e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_I2C1_Init+0x78>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_I2C1_Init+0x78>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_I2C1_Init+0x78>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_I2C1_Init+0x78>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_I2C1_Init+0x78>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138e:	480f      	ldr	r0, [pc, #60]	; (80013cc <MX_I2C1_Init+0x78>)
 8001390:	f007 ff7c 	bl	800928c <HAL_I2C_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800139a:	f000 ff15 	bl	80021c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139e:	2100      	movs	r1, #0
 80013a0:	480a      	ldr	r0, [pc, #40]	; (80013cc <MX_I2C1_Init+0x78>)
 80013a2:	f008 fcc3 	bl	8009d2c <HAL_I2CEx_ConfigAnalogFilter>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013ac:	f000 ff0c 	bl	80021c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_I2C1_Init+0x78>)
 80013b4:	f008 fd05 	bl	8009dc2 <HAL_I2CEx_ConfigDigitalFilter>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013be:	f000 ff03 	bl	80021c8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f008 fd4a 	bl	8009e5c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	240018c0 	.word	0x240018c0
 80013d0:	40005400 	.word	0x40005400
 80013d4:	00100517 	.word	0x00100517

080013d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ba      	sub	sp, #232	; 0xe8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	22c0      	movs	r2, #192	; 0xc0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f015 f82f 	bl	801645c <memset>
  if(i2cHandle->Instance==I2C1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <HAL_I2C_MspInit+0xc8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d146      	bne.n	8001496 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001408:	f04f 0208 	mov.w	r2, #8
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4618      	mov	r0, r3
 8001420:	f009 fdde 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800142a:	f000 fecd 	bl	80021c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800144c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001466:	2304      	movs	r3, #4
 8001468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <HAL_I2C_MspInit+0xd0>)
 8001474:	f007 fd28 	bl	8008ec8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 800147a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001484:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 800148a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	37e8      	adds	r7, #232	; 0xe8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40005400 	.word	0x40005400
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58020400 	.word	0x58020400

080014ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
}
 80014b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <__NVIC_SystemReset+0x24>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014be:	4904      	ldr	r1, [pc, #16]	; (80014d0 <__NVIC_SystemReset+0x24>)
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_SystemReset+0x28>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014c6:	f3bf 8f4f 	dsb	sy
}
 80014ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <__NVIC_SystemReset+0x20>
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	05fa0004 	.word	0x05fa0004

080014d8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d106      	bne.n	80014f6 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f011 fef2 	bl	80132d8 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80014f4:	e02d      	b.n	8001552 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	else if (htim == &htim2) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d126      	bne.n	800154c <HAL_TIM_OC_DelayElapsedCallback+0x74>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2102      	movs	r1, #2
 8001504:	4618      	mov	r0, r3
 8001506:	f011 fee7 	bl	80132d8 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d113      	bne.n	800153c <HAL_TIM_OC_DelayElapsedCallback+0x64>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2101      	movs	r1, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f011 fedc 	bl	80132d8 <osEventFlagsSet>
			if (HK_ENABLED){
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x5e>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2104      	movs	r1, #4
 8001530:	4618      	mov	r0, r3
 8001532:	f011 fed1 	bl	80132d8 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001548:	701a      	strb	r2, [r3, #0]
}
 800154a:	e002      	b.n	8001552 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		printf("Unknown Timer Interrupt\n");
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800154e:	f014 fffb 	bl	8016548 <puts>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	24001c54 	.word	0x24001c54
 8001560:	24001914 	.word	0x24001914
 8001564:	24001ca0 	.word	0x24001ca0
 8001568:	24001968 	.word	0x24001968
 800156c:	24001918 	.word	0x24001918
 8001570:	24001960 	.word	0x24001960
 8001574:	08016ef8 	.word	0x08016ef8

08001578 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	49f2      	ldr	r1, [pc, #968]	; (800194c <HAL_UART_RxCpltCallback+0x3d4>)
 8001584:	48f2      	ldr	r0, [pc, #968]	; (8001950 <HAL_UART_RxCpltCallback+0x3d8>)
 8001586:	f00f f899 	bl	80106bc <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800158a:	4bf0      	ldr	r3, [pc, #960]	; (800194c <HAL_UART_RxCpltCallback+0x3d4>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2be0      	cmp	r3, #224	; 0xe0
 8001594:	f200 8419 	bhi.w	8001dca <HAL_UART_RxCpltCallback+0x852>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <HAL_UART_RxCpltCallback+0x28>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	08001939 	.word	0x08001939
 80015a4:	0800197d 	.word	0x0800197d
 80015a8:	080019ed 	.word	0x080019ed
 80015ac:	08001a27 	.word	0x08001a27
 80015b0:	08001a5f 	.word	0x08001a5f
 80015b4:	08001a99 	.word	0x08001a99
 80015b8:	08001ad5 	.word	0x08001ad5
 80015bc:	08001b11 	.word	0x08001b11
 80015c0:	08001b4b 	.word	0x08001b4b
 80015c4:	08001b7f 	.word	0x08001b7f
 80015c8:	08001bab 	.word	0x08001bab
 80015cc:	08001bd7 	.word	0x08001bd7
 80015d0:	08001c01 	.word	0x08001c01
 80015d4:	08001cdd 	.word	0x08001cdd
 80015d8:	08001d45 	.word	0x08001d45
 80015dc:	08001d6d 	.word	0x08001d6d
 80015e0:	08001925 	.word	0x08001925
 80015e4:	08001961 	.word	0x08001961
 80015e8:	080019cf 	.word	0x080019cf
 80015ec:	08001a0b 	.word	0x08001a0b
 80015f0:	08001a43 	.word	0x08001a43
 80015f4:	08001a7b 	.word	0x08001a7b
 80015f8:	08001ab7 	.word	0x08001ab7
 80015fc:	08001af3 	.word	0x08001af3
 8001600:	08001b2f 	.word	0x08001b2f
 8001604:	08001b67 	.word	0x08001b67
 8001608:	08001b8f 	.word	0x08001b8f
 800160c:	08001bbb 	.word	0x08001bbb
 8001610:	08001be7 	.word	0x08001be7
 8001614:	08001c0f 	.word	0x08001c0f
 8001618:	08001d1d 	.word	0x08001d1d
 800161c:	08001dcb 	.word	0x08001dcb
 8001620:	08001dcb 	.word	0x08001dcb
 8001624:	08001dcb 	.word	0x08001dcb
 8001628:	08001dcb 	.word	0x08001dcb
 800162c:	08001dcb 	.word	0x08001dcb
 8001630:	08001dcb 	.word	0x08001dcb
 8001634:	08001dcb 	.word	0x08001dcb
 8001638:	08001dcb 	.word	0x08001dcb
 800163c:	08001dcb 	.word	0x08001dcb
 8001640:	08001dcb 	.word	0x08001dcb
 8001644:	08001dcb 	.word	0x08001dcb
 8001648:	08001dcb 	.word	0x08001dcb
 800164c:	08001dcb 	.word	0x08001dcb
 8001650:	08001dcb 	.word	0x08001dcb
 8001654:	08001dcb 	.word	0x08001dcb
 8001658:	08001dcb 	.word	0x08001dcb
 800165c:	08001dcb 	.word	0x08001dcb
 8001660:	08001dcb 	.word	0x08001dcb
 8001664:	08001dcb 	.word	0x08001dcb
 8001668:	08001dcb 	.word	0x08001dcb
 800166c:	08001dcb 	.word	0x08001dcb
 8001670:	08001dcb 	.word	0x08001dcb
 8001674:	08001dcb 	.word	0x08001dcb
 8001678:	08001dcb 	.word	0x08001dcb
 800167c:	08001dcb 	.word	0x08001dcb
 8001680:	08001dcb 	.word	0x08001dcb
 8001684:	08001dcb 	.word	0x08001dcb
 8001688:	08001dcb 	.word	0x08001dcb
 800168c:	08001dcb 	.word	0x08001dcb
 8001690:	08001dcb 	.word	0x08001dcb
 8001694:	08001dcb 	.word	0x08001dcb
 8001698:	08001dcb 	.word	0x08001dcb
 800169c:	08001dcb 	.word	0x08001dcb
 80016a0:	08001dcb 	.word	0x08001dcb
 80016a4:	08001dcb 	.word	0x08001dcb
 80016a8:	08001dcb 	.word	0x08001dcb
 80016ac:	08001dcb 	.word	0x08001dcb
 80016b0:	08001dcb 	.word	0x08001dcb
 80016b4:	08001dcb 	.word	0x08001dcb
 80016b8:	08001dcb 	.word	0x08001dcb
 80016bc:	08001dcb 	.word	0x08001dcb
 80016c0:	08001dcb 	.word	0x08001dcb
 80016c4:	08001dcb 	.word	0x08001dcb
 80016c8:	08001dcb 	.word	0x08001dcb
 80016cc:	08001dcb 	.word	0x08001dcb
 80016d0:	08001dcb 	.word	0x08001dcb
 80016d4:	08001dcb 	.word	0x08001dcb
 80016d8:	08001dcb 	.word	0x08001dcb
 80016dc:	08001dcb 	.word	0x08001dcb
 80016e0:	08001dcb 	.word	0x08001dcb
 80016e4:	08001dcb 	.word	0x08001dcb
 80016e8:	08001dcb 	.word	0x08001dcb
 80016ec:	08001dcb 	.word	0x08001dcb
 80016f0:	08001dcb 	.word	0x08001dcb
 80016f4:	08001dcb 	.word	0x08001dcb
 80016f8:	08001dcb 	.word	0x08001dcb
 80016fc:	08001dcb 	.word	0x08001dcb
 8001700:	08001dcb 	.word	0x08001dcb
 8001704:	08001dcb 	.word	0x08001dcb
 8001708:	08001dcb 	.word	0x08001dcb
 800170c:	08001dcb 	.word	0x08001dcb
 8001710:	08001dcb 	.word	0x08001dcb
 8001714:	08001dcb 	.word	0x08001dcb
 8001718:	08001dcb 	.word	0x08001dcb
 800171c:	08001dcb 	.word	0x08001dcb
 8001720:	08001dcb 	.word	0x08001dcb
 8001724:	08001dcb 	.word	0x08001dcb
 8001728:	08001dcb 	.word	0x08001dcb
 800172c:	08001dcb 	.word	0x08001dcb
 8001730:	08001dcb 	.word	0x08001dcb
 8001734:	08001dcb 	.word	0x08001dcb
 8001738:	08001dcb 	.word	0x08001dcb
 800173c:	08001dcb 	.word	0x08001dcb
 8001740:	08001dcb 	.word	0x08001dcb
 8001744:	08001dcb 	.word	0x08001dcb
 8001748:	08001dcb 	.word	0x08001dcb
 800174c:	08001dcb 	.word	0x08001dcb
 8001750:	08001dcb 	.word	0x08001dcb
 8001754:	08001dcb 	.word	0x08001dcb
 8001758:	08001dcb 	.word	0x08001dcb
 800175c:	08001dcb 	.word	0x08001dcb
 8001760:	08001dcb 	.word	0x08001dcb
 8001764:	08001dcb 	.word	0x08001dcb
 8001768:	08001dcb 	.word	0x08001dcb
 800176c:	08001dcb 	.word	0x08001dcb
 8001770:	08001dcb 	.word	0x08001dcb
 8001774:	08001dcb 	.word	0x08001dcb
 8001778:	08001dcb 	.word	0x08001dcb
 800177c:	08001dcb 	.word	0x08001dcb
 8001780:	08001dcb 	.word	0x08001dcb
 8001784:	08001dcb 	.word	0x08001dcb
 8001788:	08001dcb 	.word	0x08001dcb
 800178c:	08001dcb 	.word	0x08001dcb
 8001790:	08001dcb 	.word	0x08001dcb
 8001794:	08001dcb 	.word	0x08001dcb
 8001798:	08001dcb 	.word	0x08001dcb
 800179c:	08001dcb 	.word	0x08001dcb
 80017a0:	08001dcb 	.word	0x08001dcb
 80017a4:	08001dcb 	.word	0x08001dcb
 80017a8:	08001dcb 	.word	0x08001dcb
 80017ac:	08001dcb 	.word	0x08001dcb
 80017b0:	08001dcb 	.word	0x08001dcb
 80017b4:	08001dcb 	.word	0x08001dcb
 80017b8:	08001dcb 	.word	0x08001dcb
 80017bc:	08001dcb 	.word	0x08001dcb
 80017c0:	08001dcb 	.word	0x08001dcb
 80017c4:	08001dcb 	.word	0x08001dcb
 80017c8:	08001dcb 	.word	0x08001dcb
 80017cc:	08001dcb 	.word	0x08001dcb
 80017d0:	08001dcb 	.word	0x08001dcb
 80017d4:	08001dcb 	.word	0x08001dcb
 80017d8:	08001dcb 	.word	0x08001dcb
 80017dc:	08001dcb 	.word	0x08001dcb
 80017e0:	08001dcb 	.word	0x08001dcb
 80017e4:	08001dcb 	.word	0x08001dcb
 80017e8:	08001dcb 	.word	0x08001dcb
 80017ec:	08001dcb 	.word	0x08001dcb
 80017f0:	08001dcb 	.word	0x08001dcb
 80017f4:	08001dcb 	.word	0x08001dcb
 80017f8:	08001dcb 	.word	0x08001dcb
 80017fc:	08001dcb 	.word	0x08001dcb
 8001800:	08001dcb 	.word	0x08001dcb
 8001804:	08001dcb 	.word	0x08001dcb
 8001808:	08001dcb 	.word	0x08001dcb
 800180c:	08001dcb 	.word	0x08001dcb
 8001810:	08001dcb 	.word	0x08001dcb
 8001814:	08001dcb 	.word	0x08001dcb
 8001818:	08001dcb 	.word	0x08001dcb
 800181c:	08001dcb 	.word	0x08001dcb
 8001820:	08001dcb 	.word	0x08001dcb
 8001824:	08001dcb 	.word	0x08001dcb
 8001828:	08001dcb 	.word	0x08001dcb
 800182c:	08001dcb 	.word	0x08001dcb
 8001830:	08001dcb 	.word	0x08001dcb
 8001834:	08001dcb 	.word	0x08001dcb
 8001838:	08001dcb 	.word	0x08001dcb
 800183c:	08001dcb 	.word	0x08001dcb
 8001840:	08001dcb 	.word	0x08001dcb
 8001844:	08001dcb 	.word	0x08001dcb
 8001848:	08001dcb 	.word	0x08001dcb
 800184c:	08001dcb 	.word	0x08001dcb
 8001850:	08001dcb 	.word	0x08001dcb
 8001854:	08001dcb 	.word	0x08001dcb
 8001858:	08001dcb 	.word	0x08001dcb
 800185c:	08001da9 	.word	0x08001da9
 8001860:	08001dcb 	.word	0x08001dcb
 8001864:	08001dcb 	.word	0x08001dcb
 8001868:	08001dcb 	.word	0x08001dcb
 800186c:	08001dcb 	.word	0x08001dcb
 8001870:	08001dcb 	.word	0x08001dcb
 8001874:	08001dcb 	.word	0x08001dcb
 8001878:	08001dcb 	.word	0x08001dcb
 800187c:	08001dcb 	.word	0x08001dcb
 8001880:	08001dcb 	.word	0x08001dcb
 8001884:	08001dcb 	.word	0x08001dcb
 8001888:	08001dcb 	.word	0x08001dcb
 800188c:	08001dcb 	.word	0x08001dcb
 8001890:	08001dcb 	.word	0x08001dcb
 8001894:	08001dcb 	.word	0x08001dcb
 8001898:	08001dcb 	.word	0x08001dcb
 800189c:	08001daf 	.word	0x08001daf
 80018a0:	08001dcb 	.word	0x08001dcb
 80018a4:	08001dcb 	.word	0x08001dcb
 80018a8:	08001dcb 	.word	0x08001dcb
 80018ac:	08001dcb 	.word	0x08001dcb
 80018b0:	08001dcb 	.word	0x08001dcb
 80018b4:	08001dcb 	.word	0x08001dcb
 80018b8:	08001dcb 	.word	0x08001dcb
 80018bc:	08001dcb 	.word	0x08001dcb
 80018c0:	08001dcb 	.word	0x08001dcb
 80018c4:	08001dcb 	.word	0x08001dcb
 80018c8:	08001dcb 	.word	0x08001dcb
 80018cc:	08001dcb 	.word	0x08001dcb
 80018d0:	08001dcb 	.word	0x08001dcb
 80018d4:	08001dcb 	.word	0x08001dcb
 80018d8:	08001dcb 	.word	0x08001dcb
 80018dc:	08001dbd 	.word	0x08001dbd
 80018e0:	08001d95 	.word	0x08001d95
 80018e4:	08001dcb 	.word	0x08001dcb
 80018e8:	08001dcb 	.word	0x08001dcb
 80018ec:	08001dcb 	.word	0x08001dcb
 80018f0:	08001dcb 	.word	0x08001dcb
 80018f4:	08001dcb 	.word	0x08001dcb
 80018f8:	08001dcb 	.word	0x08001dcb
 80018fc:	08001dcb 	.word	0x08001dcb
 8001900:	08001dcb 	.word	0x08001dcb
 8001904:	08001dcb 	.word	0x08001dcb
 8001908:	08001dcb 	.word	0x08001dcb
 800190c:	08001dcb 	.word	0x08001dcb
 8001910:	08001dcb 	.word	0x08001dcb
 8001914:	08001dcb 	.word	0x08001dcb
 8001918:	08001dcb 	.word	0x08001dcb
 800191c:	08001dcb 	.word	0x08001dcb
 8001920:	08001d81 	.word	0x08001d81
	case 0x10: {
		printf("SDN1 ON\n");
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <HAL_UART_RxCpltCallback+0x3dc>)
 8001926:	f014 fe0f 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_UART_RxCpltCallback+0x3e0>)
 800192c:	2104      	movs	r1, #4
 800192e:	2201      	movs	r2, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f007 fc91 	bl	8009258 <HAL_GPIO_WritePin>
		break;
 8001936:	e253      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001938:	4808      	ldr	r0, [pc, #32]	; (800195c <HAL_UART_RxCpltCallback+0x3e4>)
 800193a:	f014 fe05 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_UART_RxCpltCallback+0x3e0>)
 8001940:	2104      	movs	r1, #4
 8001942:	2200      	movs	r2, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f007 fc87 	bl	8009258 <HAL_GPIO_WritePin>
		break;
 800194a:	e249      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
 800194c:	24001920 	.word	0x24001920
 8001950:	24001cec 	.word	0x24001cec
 8001954:	08016f10 	.word	0x08016f10
 8001958:	58020400 	.word	0x58020400
 800195c:	08016f18 	.word	0x08016f18
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001960:	48bb      	ldr	r0, [pc, #748]	; (8001c50 <HAL_UART_RxCpltCallback+0x6d8>)
 8001962:	f014 fdf1 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001966:	4bbb      	ldr	r3, [pc, #748]	; (8001c54 <HAL_UART_RxCpltCallback+0x6dc>)
 8001968:	2120      	movs	r1, #32
 800196a:	2201      	movs	r2, #1
 800196c:	4618      	mov	r0, r3
 800196e:	f007 fc73 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001972:	2101      	movs	r1, #1
 8001974:	2008      	movs	r0, #8
 8001976:	f002 fa19 	bl	8003dac <set_rail_monitor_enable>
		break;
 800197a:	e231      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 800197c:	48b6      	ldr	r0, [pc, #728]	; (8001c58 <HAL_UART_RxCpltCallback+0x6e0>)
 800197e:	f014 fde3 	bl	8016548 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001982:	2308      	movs	r3, #8
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e00f      	b.n	80019a8 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001988:	4ab4      	ldr	r2, [pc, #720]	; (8001c5c <HAL_UART_RxCpltCallback+0x6e4>)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001990:	4ab2      	ldr	r2, [pc, #712]	; (8001c5c <HAL_UART_RxCpltCallback+0x6e4>)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	889b      	ldrh	r3, [r3, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	f007 fc5b 	bl	8009258 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	dcec      	bgt.n	8001988 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80019ae:	2310      	movs	r3, #16
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e008      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 f9f6 	bl	8003dac <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b07      	cmp	r3, #7
 80019ca:	dcf3      	bgt.n	80019b4 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80019cc:	e208      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80019ce:	48a4      	ldr	r0, [pc, #656]	; (8001c60 <HAL_UART_RxCpltCallback+0x6e8>)
 80019d0:	f014 fdba 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80019d4:	4ba3      	ldr	r3, [pc, #652]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 80019d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019da:	2201      	movs	r2, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f007 fc3b 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80019e2:	2101      	movs	r1, #1
 80019e4:	2009      	movs	r0, #9
 80019e6:	f002 f9e1 	bl	8003dac <set_rail_monitor_enable>

		break;
 80019ea:	e1f9      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80019ec:	489e      	ldr	r0, [pc, #632]	; (8001c68 <HAL_UART_RxCpltCallback+0x6f0>)
 80019ee:	f014 fdab 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80019f2:	4b9c      	ldr	r3, [pc, #624]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 80019f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f8:	2200      	movs	r2, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 fc2c 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8001a00:	2100      	movs	r1, #0
 8001a02:	2009      	movs	r0, #9
 8001a04:	f002 f9d2 	bl	8003dac <set_rail_monitor_enable>
		break;
 8001a08:	e1ea      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001a0a:	4898      	ldr	r0, [pc, #608]	; (8001c6c <HAL_UART_RxCpltCallback+0x6f4>)
 8001a0c:	f014 fd9c 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001a10:	4b94      	ldr	r3, [pc, #592]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	2201      	movs	r2, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 fc1e 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	200a      	movs	r0, #10
 8001a20:	f002 f9c4 	bl	8003dac <set_rail_monitor_enable>

		break;
 8001a24:	e1dc      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001a26:	4892      	ldr	r0, [pc, #584]	; (8001c70 <HAL_UART_RxCpltCallback+0x6f8>)
 8001a28:	f014 fd8e 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001a2c:	4b8d      	ldr	r3, [pc, #564]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f007 fc10 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f002 f9b6 	bl	8003dac <set_rail_monitor_enable>
		break;
 8001a40:	e1ce      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001a42:	488c      	ldr	r0, [pc, #560]	; (8001c74 <HAL_UART_RxCpltCallback+0x6fc>)
 8001a44:	f014 fd80 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001a48:	4b86      	ldr	r3, [pc, #536]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 fc02 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001a54:	2101      	movs	r1, #1
 8001a56:	200b      	movs	r0, #11
 8001a58:	f002 f9a8 	bl	8003dac <set_rail_monitor_enable>

		break;
 8001a5c:	e1c0      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001a5e:	4886      	ldr	r0, [pc, #536]	; (8001c78 <HAL_UART_RxCpltCallback+0x700>)
 8001a60:	f014 fd72 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001a64:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 fbf4 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001a70:	2100      	movs	r1, #0
 8001a72:	200b      	movs	r0, #11
 8001a74:	f002 f99a 	bl	8003dac <set_rail_monitor_enable>
		break;
 8001a78:	e1b2      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001a7a:	4880      	ldr	r0, [pc, #512]	; (8001c7c <HAL_UART_RxCpltCallback+0x704>)
 8001a7c:	f014 fd64 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001a80:	4b78      	ldr	r3, [pc, #480]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a86:	2201      	movs	r2, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f007 fbe5 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001a8e:	2101      	movs	r1, #1
 8001a90:	200c      	movs	r0, #12
 8001a92:	f002 f98b 	bl	8003dac <set_rail_monitor_enable>

		break;
 8001a96:	e1a3      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001a98:	4879      	ldr	r0, [pc, #484]	; (8001c80 <HAL_UART_RxCpltCallback+0x708>)
 8001a9a:	f014 fd55 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001a9e:	4b71      	ldr	r3, [pc, #452]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f007 fbd6 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001aac:	2100      	movs	r1, #0
 8001aae:	200c      	movs	r0, #12
 8001ab0:	f002 f97c 	bl	8003dac <set_rail_monitor_enable>
		break;
 8001ab4:	e194      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001ab6:	4873      	ldr	r0, [pc, #460]	; (8001c84 <HAL_UART_RxCpltCallback+0x70c>)
 8001ab8:	f014 fd46 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001abc:	4b69      	ldr	r3, [pc, #420]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f007 fbc7 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001aca:	2101      	movs	r1, #1
 8001acc:	200d      	movs	r0, #13
 8001ace:	f002 f96d 	bl	8003dac <set_rail_monitor_enable>

		break;
 8001ad2:	e185      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001ad4:	486c      	ldr	r0, [pc, #432]	; (8001c88 <HAL_UART_RxCpltCallback+0x710>)
 8001ad6:	f014 fd37 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001ada:	4b62      	ldr	r3, [pc, #392]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f007 fbb8 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	200d      	movs	r0, #13
 8001aec:	f002 f95e 	bl	8003dac <set_rail_monitor_enable>
		break;
 8001af0:	e176      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001af2:	4866      	ldr	r0, [pc, #408]	; (8001c8c <HAL_UART_RxCpltCallback+0x714>)
 8001af4:	f014 fd28 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001af8:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001afe:	2201      	movs	r2, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f007 fba9 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	200f      	movs	r0, #15
 8001b0a:	f002 f94f 	bl	8003dac <set_rail_monitor_enable>

		break;
 8001b0e:	e167      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001b10:	485f      	ldr	r0, [pc, #380]	; (8001c90 <HAL_UART_RxCpltCallback+0x718>)
 8001b12:	f014 fd19 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001b16:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fb9a 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001b24:	2100      	movs	r1, #0
 8001b26:	200f      	movs	r0, #15
 8001b28:	f002 f940 	bl	8003dac <set_rail_monitor_enable>
		break;
 8001b2c:	e158      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001b2e:	4859      	ldr	r0, [pc, #356]	; (8001c94 <HAL_UART_RxCpltCallback+0x71c>)
 8001b30:	f014 fd0a 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f007 fb8c 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001b40:	2101      	movs	r1, #1
 8001b42:	2010      	movs	r0, #16
 8001b44:	f002 f932 	bl	8003dac <set_rail_monitor_enable>

		break;
 8001b48:	e14a      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001b4a:	4853      	ldr	r0, [pc, #332]	; (8001c98 <HAL_UART_RxCpltCallback+0x720>)
 8001b4c:	f014 fcfc 	bl	8016548 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001b50:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b52:	2140      	movs	r1, #64	; 0x40
 8001b54:	2200      	movs	r2, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 fb7e 	bl	8009258 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2010      	movs	r0, #16
 8001b60:	f002 f924 	bl	8003dac <set_rail_monitor_enable>
		break;
 8001b64:	e13c      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001b66:	484d      	ldr	r0, [pc, #308]	; (8001c9c <HAL_UART_RxCpltCallback+0x724>)
 8001b68:	f014 fcee 	bl	8016548 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2320      	movs	r3, #32
 8001b72:	4a4b      	ldr	r2, [pc, #300]	; (8001ca0 <HAL_UART_RxCpltCallback+0x728>)
 8001b74:	2100      	movs	r1, #0
 8001b76:	484b      	ldr	r0, [pc, #300]	; (8001ca4 <HAL_UART_RxCpltCallback+0x72c>)
 8001b78:	f003 ffd2 	bl	8005b20 <HAL_DAC_Start_DMA>
		break;
 8001b7c:	e130      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001b7e:	484a      	ldr	r0, [pc, #296]	; (8001ca8 <HAL_UART_RxCpltCallback+0x730>)
 8001b80:	f014 fce2 	bl	8016548 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001b84:	2100      	movs	r1, #0
 8001b86:	4847      	ldr	r0, [pc, #284]	; (8001ca4 <HAL_UART_RxCpltCallback+0x72c>)
 8001b88:	f004 f88a 	bl	8005ca0 <HAL_DAC_Stop_DMA>
		break;
 8001b8c:	e128      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001b8e:	4847      	ldr	r0, [pc, #284]	; (8001cac <HAL_UART_RxCpltCallback+0x734>)
 8001b90:	f014 fcda 	bl	8016548 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b94:	210c      	movs	r1, #12
 8001b96:	4846      	ldr	r0, [pc, #280]	; (8001cb0 <HAL_UART_RxCpltCallback+0x738>)
 8001b98:	f00d f8b0 	bl	800ecfc <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_UART_RxCpltCallback+0x73c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f011 fb98 	bl	80132d8 <osEventFlagsSet>

		break;
 8001ba8:	e11a      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001baa:	4843      	ldr	r0, [pc, #268]	; (8001cb8 <HAL_UART_RxCpltCallback+0x740>)
 8001bac:	f014 fccc 	bl	8016548 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001bb0:	210c      	movs	r1, #12
 8001bb2:	483f      	ldr	r0, [pc, #252]	; (8001cb0 <HAL_UART_RxCpltCallback+0x738>)
 8001bb4:	f00d f9fc 	bl	800efb0 <HAL_TIM_OC_Stop_IT>
		break;
 8001bb8:	e112      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001bba:	4840      	ldr	r0, [pc, #256]	; (8001cbc <HAL_UART_RxCpltCallback+0x744>)
 8001bbc:	f014 fcc4 	bl	8016548 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	483f      	ldr	r0, [pc, #252]	; (8001cc0 <HAL_UART_RxCpltCallback+0x748>)
 8001bc4:	f00d f89a 	bl	800ecfc <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_UART_RxCpltCallback+0x73c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f011 fb82 	bl	80132d8 <osEventFlagsSet>
		break;
 8001bd4:	e104      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001bd6:	483b      	ldr	r0, [pc, #236]	; (8001cc4 <HAL_UART_RxCpltCallback+0x74c>)
 8001bd8:	f014 fcb6 	bl	8016548 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4838      	ldr	r0, [pc, #224]	; (8001cc0 <HAL_UART_RxCpltCallback+0x748>)
 8001be0:	f00d f9e6 	bl	800efb0 <HAL_TIM_OC_Stop_IT>
		break;
 8001be4:	e0fc      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001be6:	4838      	ldr	r0, [pc, #224]	; (8001cc8 <HAL_UART_RxCpltCallback+0x750>)
 8001be8:	f014 fcae 	bl	8016548 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_UART_RxCpltCallback+0x73c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f011 fb70 	bl	80132d8 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001bf8:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_UART_RxCpltCallback+0x754>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
		break;
 8001bfe:	e0ef      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001c00:	4833      	ldr	r0, [pc, #204]	; (8001cd0 <HAL_UART_RxCpltCallback+0x758>)
 8001c02:	f014 fca1 	bl	8016548 <puts>
		HK_ENABLED = 0;
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_UART_RxCpltCallback+0x754>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
		break;
 8001c0c:	e0e8      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001c0e:	4831      	ldr	r0, [pc, #196]	; (8001cd4 <HAL_UART_RxCpltCallback+0x75c>)
 8001c10:	f014 fc9a 	bl	8016548 <puts>
		if (step < 14) {
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_UART_RxCpltCallback+0x760>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b0d      	cmp	r3, #13
 8001c1c:	f200 80d9 	bhi.w	8001dd2 <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_UART_RxCpltCallback+0x760>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	3302      	adds	r3, #2
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_UART_RxCpltCallback+0x760>)
 8001c2c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_UART_RxCpltCallback+0x760>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_UART_RxCpltCallback+0x728>)
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <HAL_UART_RxCpltCallback+0x72c>)
 8001c42:	f004 f8d0 	bl	8005de6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c46:	2100      	movs	r1, #0
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <HAL_UART_RxCpltCallback+0x72c>)
 8001c4a:	f003 ff11 	bl	8005a70 <HAL_DAC_Start>
		}
		break;
 8001c4e:	e0c0      	b.n	8001dd2 <HAL_UART_RxCpltCallback+0x85a>
 8001c50:	08016f24 	.word	0x08016f24
 8001c54:	58020400 	.word	0x58020400
 8001c58:	08016f30 	.word	0x08016f30
 8001c5c:	0801722c 	.word	0x0801722c
 8001c60:	08016f3c 	.word	0x08016f3c
 8001c64:	58020800 	.word	0x58020800
 8001c68:	08016f48 	.word	0x08016f48
 8001c6c:	08016f58 	.word	0x08016f58
 8001c70:	08016f64 	.word	0x08016f64
 8001c74:	08016f70 	.word	0x08016f70
 8001c78:	08016f7c 	.word	0x08016f7c
 8001c7c:	08016f8c 	.word	0x08016f8c
 8001c80:	08016f98 	.word	0x08016f98
 8001c84:	08016fa4 	.word	0x08016fa4
 8001c88:	08016fb0 	.word	0x08016fb0
 8001c8c:	08016fbc 	.word	0x08016fbc
 8001c90:	08016fcc 	.word	0x08016fcc
 8001c94:	08016fdc 	.word	0x08016fdc
 8001c98:	08016fe8 	.word	0x08016fe8
 8001c9c:	08016ff8 	.word	0x08016ff8
 8001ca0:	24000000 	.word	0x24000000
 8001ca4:	240002d4 	.word	0x240002d4
 8001ca8:	08017008 	.word	0x08017008
 8001cac:	08017018 	.word	0x08017018
 8001cb0:	24001ca0 	.word	0x24001ca0
 8001cb4:	24001914 	.word	0x24001914
 8001cb8:	08017020 	.word	0x08017020
 8001cbc:	0801702c 	.word	0x0801702c
 8001cc0:	24001c54 	.word	0x24001c54
 8001cc4:	08017034 	.word	0x08017034
 8001cc8:	0801703c 	.word	0x0801703c
 8001ccc:	24001960 	.word	0x24001960
 8001cd0:	08017044 	.word	0x08017044
 8001cd4:	0801704c 	.word	0x0801704c
 8001cd8:	24001961 	.word	0x24001961
	}
	case 0x0D: {
		printf("Step Down\n");
 8001cdc:	4842      	ldr	r0, [pc, #264]	; (8001de8 <HAL_UART_RxCpltCallback+0x870>)
 8001cde:	f014 fc33 	bl	8016548 <puts>
		if (step > 1) {
 8001ce2:	4b42      	ldr	r3, [pc, #264]	; (8001dec <HAL_UART_RxCpltCallback+0x874>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d974      	bls.n	8001dd6 <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_UART_RxCpltCallback+0x874>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3b02      	subs	r3, #2
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_UART_RxCpltCallback+0x874>)
 8001cf8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_UART_RxCpltCallback+0x874>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_UART_RxCpltCallback+0x878>)
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4839      	ldr	r0, [pc, #228]	; (8001df4 <HAL_UART_RxCpltCallback+0x87c>)
 8001d0e:	f004 f86a 	bl	8005de6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001d12:	2100      	movs	r1, #0
 8001d14:	4837      	ldr	r0, [pc, #220]	; (8001df4 <HAL_UART_RxCpltCallback+0x87c>)
 8001d16:	f003 feab 	bl	8005a70 <HAL_DAC_Start>
		}
		break;
 8001d1a:	e05c      	b.n	8001dd6 <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001d1c:	4836      	ldr	r0, [pc, #216]	; (8001df8 <HAL_UART_RxCpltCallback+0x880>)
 8001d1e:	f014 fc13 	bl	8016548 <puts>
		if (cadence <= 50000) {
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d855      	bhi.n	8001dda <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4a31      	ldr	r2, [pc, #196]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d36:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d42:	e04a      	b.n	8001dda <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001d44:	482e      	ldr	r0, [pc, #184]	; (8001e00 <HAL_UART_RxCpltCallback+0x888>)
 8001d46:	f014 fbff 	bl	8016548 <puts>
		if (cadence >= 6250) {
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f641 0269 	movw	r2, #6249	; 0x1869
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d943      	bls.n	8001dde <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d5e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_UART_RxCpltCallback+0x884>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d6a:	e038      	b.n	8001dde <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001d6c:	4825      	ldr	r0, [pc, #148]	; (8001e04 <HAL_UART_RxCpltCallback+0x88c>)
 8001d6e:	f014 fbeb 	bl	8016548 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_UART_RxCpltCallback+0x890>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2102      	movs	r1, #2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f011 faad 	bl	80132d8 <osEventFlagsSet>
		break;
 8001d7e:	e02f      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001d80:	4822      	ldr	r0, [pc, #136]	; (8001e0c <HAL_UART_RxCpltCallback+0x894>)
 8001d82:	f014 fbe1 	bl	8016548 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_UART_RxCpltCallback+0x890>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f011 faa3 	bl	80132d8 <osEventFlagsSet>
		break;
 8001d92:	e025      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001d94:	481e      	ldr	r0, [pc, #120]	; (8001e10 <HAL_UART_RxCpltCallback+0x898>)
 8001d96:	f014 fbd7 	bl	8016548 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_UART_RxCpltCallback+0x890>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2108      	movs	r1, #8
 8001da0:	4618      	mov	r0, r3
 8001da2:	f011 fa99 	bl	80132d8 <osEventFlagsSet>
		break;
 8001da6:	e01b      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001da8:	f000 f958 	bl	800205c <sync>
		break;
 8001dac:	e018      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_UART_RxCpltCallback+0x89c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2101      	movs	r1, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f011 fa8f 	bl	80132d8 <osEventFlagsSet>
		break;
 8001dba:	e011      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_UART_RxCpltCallback+0x89c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f011 fa88 	bl	80132d8 <osEventFlagsSet>
		break;
 8001dc8:	e00a      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001dca:	4813      	ldr	r0, [pc, #76]	; (8001e18 <HAL_UART_RxCpltCallback+0x8a0>)
 8001dcc:	f014 fbbc 	bl	8016548 <puts>
		break;
 8001dd0:	e006      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dd2:	bf00      	nop
 8001dd4:	e004      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dd6:	bf00      	nop
 8001dd8:	e002      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dde:	bf00      	nop
	}
	}
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	08017054 	.word	0x08017054
 8001dec:	24001961 	.word	0x24001961
 8001df0:	24000000 	.word	0x24000000
 8001df4:	240002d4 	.word	0x240002d4
 8001df8:	08017060 	.word	0x08017060
 8001dfc:	24000080 	.word	0x24000080
 8001e00:	0801706c 	.word	0x0801706c
 8001e04:	08017078 	.word	0x08017078
 8001e08:	24001918 	.word	0x24001918
 8001e0c:	08017088 	.word	0x08017088
 8001e10:	08017094 	.word	0x08017094
 8001e14:	2400191c 	.word	0x2400191c
 8001e18:	080170a0 	.word	0x080170a0

08001e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e20:	f002 f892 	bl	8003f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e24:	f000 f824 	bl	8001e70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e28:	f000 f8a2 	bl	8001f70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e2c:	f7ff fa18 	bl	8001260 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e30:	f7fe ff5a 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e34:	f001 fcf2 	bl	800381c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e38:	f7ff fa8c 	bl	8001354 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e3c:	f000 fe50 	bl	8002ae0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e40:	f001 fb14 	bl	800346c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e44:	f001 fa64 	bl	8003310 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001e48:	f7fe fcee 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001e4c:	f7fe fbca 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001e50:	f7fe fe96 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001e54:	f000 fdec 	bl	8002a30 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e58:	f000 fbc4 	bl	80025e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001e5c:	f000 f8b8 	bl	8001fd0 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e60:	f011 f8e4 	bl	801302c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e64:	f7fe ffa2 	bl	8000dac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e68:	f011 f904 	bl	8013074 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e6c:	e7fe      	b.n	8001e6c <main+0x50>
	...

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b09c      	sub	sp, #112	; 0x70
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	224c      	movs	r2, #76	; 0x4c
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f014 faec 	bl	801645c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2220      	movs	r2, #32
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f014 fae6 	bl	801645c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e90:	2002      	movs	r0, #2
 8001e92:	f008 f843 	bl	8009f1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <SystemClock_Config+0xf8>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	4a32      	ldr	r2, [pc, #200]	; (8001f68 <SystemClock_Config+0xf8>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <SystemClock_Config+0xf8>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <SystemClock_Config+0xfc>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	; (8001f6c <SystemClock_Config+0xfc>)
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <SystemClock_Config+0xfc>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ecc:	bf00      	nop
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <SystemClock_Config+0xfc>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eda:	d1f8      	bne.n	8001ece <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001edc:	2303      	movs	r3, #3
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001ee6:	2309      	movs	r3, #9
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eea:	2340      	movs	r3, #64	; 0x40
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001efa:	2318      	movs	r3, #24
 8001efc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f06:	2302      	movs	r3, #2
 8001f08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f008 f838 	bl	8009f90 <HAL_RCC_OscConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f26:	f000 f94f 	bl	80021c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2a:	233f      	movs	r3, #63	; 0x3f
 8001f2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f3e:	2340      	movs	r3, #64	; 0x40
 8001f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f008 fc78 	bl	800a844 <HAL_RCC_ClockConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001f5a:	f000 f935 	bl	80021c8 <Error_Handler>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3770      	adds	r7, #112	; 0x70
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	58000400 	.word	0x58000400
 8001f6c:	58024800 	.word	0x58024800

08001f70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b0b0      	sub	sp, #192	; 0xc0
 8001f74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f76:	463b      	mov	r3, r7
 8001f78:	22c0      	movs	r2, #192	; 0xc0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f014 fa6d 	bl	801645c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001f92:	2318      	movs	r3, #24
 8001f94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001f96:	2308      	movs	r3, #8
 8001f98:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f009 f812 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001fc2:	f000 f901 	bl	80021c8 <Error_Handler>
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	37c0      	adds	r7, #192	; 0xc0
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f011 f940 	bl	801325a <osEventFlagsNew>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <system_setup+0x78>)
 8001fde:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <system_setup+0x78>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d100      	bne.n	8001fea <system_setup+0x1a>
        while (1);
 8001fe8:	e7fe      	b.n	8001fe8 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f011 f935 	bl	801325a <osEventFlagsNew>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a16      	ldr	r2, [pc, #88]	; (800204c <system_setup+0x7c>)
 8001ff4:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <system_setup+0x7c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <system_setup+0x30>
        while (1);
 8001ffe:	e7fe      	b.n	8001ffe <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002000:	2000      	movs	r0, #0
 8002002:	f011 f92a 	bl	801325a <osEventFlagsNew>
 8002006:	4603      	mov	r3, r0
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <system_setup+0x80>)
 800200a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <system_setup+0x80>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <system_setup+0x46>
        while (1);
 8002014:	e7fe      	b.n	8002014 <system_setup+0x44>
    }



	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8002016:	f001 fd0b 	bl	8003a30 <voltage_monitor_init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d100      	bne.n	8002022 <system_setup+0x52>
		while (1);
 8002020:	e7fe      	b.n	8002020 <system_setup+0x50>
	}


	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8002022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002026:	f44f 729c 	mov.w	r2, #312	; 0x138
 800202a:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 800202c:	f000 fb6c 	bl	8002708 <init_adc_dma>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d100      	bne.n	8002038 <system_setup+0x68>
		while (1);
 8002036:	e7fe      	b.n	8002036 <system_setup+0x66>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002038:	2201      	movs	r2, #1
 800203a:	4906      	ldr	r1, [pc, #24]	; (8002054 <system_setup+0x84>)
 800203c:	4806      	ldr	r0, [pc, #24]	; (8002058 <system_setup+0x88>)
 800203e:	f00e fb3d 	bl	80106bc <HAL_UART_Receive_IT>

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	24001914 	.word	0x24001914
 800204c:	24001918 	.word	0x24001918
 8002050:	2400191c 	.word	0x2400191c
 8002054:	24001920 	.word	0x24001920
 8002058:	24001cec 	.word	0x24001cec

0800205c <sync>:

void sync() {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
	send_ACK();
 8002062:	f000 f81f 	bl	80020a4 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <sync+0x40>)
 8002068:	f00e fb74 	bl	8010754 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	2209      	movs	r2, #9
 8002070:	490b      	ldr	r1, [pc, #44]	; (80020a0 <sync+0x44>)
 8002072:	480a      	ldr	r0, [pc, #40]	; (800209c <sync+0x40>)
 8002074:	f00e fa5a 	bl	801052c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <sync+0x44>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2bff      	cmp	r3, #255	; 0xff
 8002082:	d1f3      	bne.n	800206c <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002084:	2201      	movs	r2, #1
 8002086:	4906      	ldr	r1, [pc, #24]	; (80020a0 <sync+0x44>)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <sync+0x40>)
 800208a:	f00e fb17 	bl	80106bc <HAL_UART_Receive_IT>

	send_ACK();
 800208e:	f000 f809 	bl	80020a4 <send_ACK>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	24001cec 	.word	0x24001cec
 80020a0:	24001920 	.word	0x24001920

080020a4 <send_ACK>:

void send_ACK() {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <send_ACK+0x1c>)
 80020aa:	22ff      	movs	r2, #255	; 0xff
 80020ac:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80020ae:	2364      	movs	r3, #100	; 0x64
 80020b0:	2201      	movs	r2, #1
 80020b2:	4903      	ldr	r1, [pc, #12]	; (80020c0 <send_ACK+0x1c>)
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <send_ACK+0x20>)
 80020b6:	f00e f9ab 	bl	8010410 <HAL_UART_Transmit>
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2400196c 	.word	0x2400196c
 80020c4:	24001cec 	.word	0x24001cec

080020c8 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020ce:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <get_current_step+0xc0>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020da:	4293      	cmp	r3, r2
 80020dc:	d04a      	beq.n	8002174 <get_current_step+0xac>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e4:	da48      	bge.n	8002178 <get_current_step+0xb0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d03f      	beq.n	8002170 <get_current_step+0xa8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020f6:	4293      	cmp	r3, r2
 80020f8:	dc3e      	bgt.n	8002178 <get_current_step+0xb0>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002100:	4293      	cmp	r3, r2
 8002102:	d033      	beq.n	800216c <get_current_step+0xa4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800210a:	da35      	bge.n	8002178 <get_current_step+0xb0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002112:	4293      	cmp	r3, r2
 8002114:	d028      	beq.n	8002168 <get_current_step+0xa0>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800211c:	4293      	cmp	r3, r2
 800211e:	dc2b      	bgt.n	8002178 <get_current_step+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f240 7245 	movw	r2, #1861	; 0x745
 8002126:	4293      	cmp	r3, r2
 8002128:	d01c      	beq.n	8002164 <get_current_step+0x9c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f240 7245 	movw	r2, #1861	; 0x745
 8002130:	4293      	cmp	r3, r2
 8002132:	dc21      	bgt.n	8002178 <get_current_step+0xb0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800213a:	4293      	cmp	r3, r2
 800213c:	d010      	beq.n	8002160 <get_current_step+0x98>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002144:	4293      	cmp	r3, r2
 8002146:	dc17      	bgt.n	8002178 <get_current_step+0xb0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <get_current_step+0x90>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002154:	d002      	beq.n	800215c <get_current_step+0x94>
 8002156:	e00f      	b.n	8002178 <get_current_step+0xb0>
	case 0:
		return 0;
 8002158:	2300      	movs	r3, #0
 800215a:	e00e      	b.n	800217a <get_current_step+0xb2>
	case 620:
		return 1;
 800215c:	2301      	movs	r3, #1
 800215e:	e00c      	b.n	800217a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002160:	2302      	movs	r3, #2
 8002162:	e00a      	b.n	800217a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002164:	2303      	movs	r3, #3
 8002166:	e008      	b.n	800217a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002168:	2304      	movs	r3, #4
 800216a:	e006      	b.n	800217a <get_current_step+0xb2>
	case 3103:
		return 5;
 800216c:	2305      	movs	r3, #5
 800216e:	e004      	b.n	800217a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002170:	2306      	movs	r3, #6
 8002172:	e002      	b.n	800217a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002174:	2307      	movs	r3, #7
 8002176:	e000      	b.n	800217a <get_current_step+0xb2>
	default:
		return -1;
 8002178:	23ff      	movs	r3, #255	; 0xff
	}
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40007400 	.word	0x40007400

0800218c <enter_stop>:

void enter_stop() {
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	  send_ACK();
 8002190:	f7ff ff88 	bl	80020a4 <send_ACK>

	  vTaskSuspendAll();
 8002194:	f012 fbf8 	bl	8014988 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002198:	2101      	movs	r1, #1
 800219a:	2001      	movs	r0, #1
 800219c:	f007 fe82 	bl	8009ea4 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80021a0:	f7ff f984 	bl	80014ac <__NVIC_SystemReset>

080021a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021b6:	f001 ff03 	bl	8003fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40001000 	.word	0x40001000

080021c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021cc:	b672      	cpsid	i
}
 80021ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021d0:	e7fe      	b.n	80021d0 <Error_Handler+0x8>
	...

080021d4 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021da:	bf00      	nop
 80021dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e0:	481c      	ldr	r0, [pc, #112]	; (8002254 <create_pmt_packet+0x80>)
 80021e2:	f007 f821 	bl	8009228 <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f7      	bne.n	80021dc <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 fa74 	bl	80036dc <get_uptime>
	sample_pmt_spi(pmt_spi);
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fad9 	bl	80027b0 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80021fe:	23bb      	movs	r3, #187	; 0xbb
 8002200:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8002202:	23bb      	movs	r3, #187	; 0xbb
 8002204:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <create_pmt_packet+0x84>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <create_pmt_packet+0x84>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 800221a:	7a3b      	ldrb	r3, [r7, #8]
 800221c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 800221e:	7a7b      	ldrb	r3, [r7, #9]
 8002220:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8002222:	793b      	ldrb	r3, [r7, #4]
 8002224:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8002232:	f107 010c 	add.w	r1, r7, #12
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	220a      	movs	r2, #10
 800223a:	4808      	ldr	r0, [pc, #32]	; (800225c <create_pmt_packet+0x88>)
 800223c:	f00e f8e8 	bl	8010410 <HAL_UART_Transmit>

	pmt_seq++;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <create_pmt_packet+0x84>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <create_pmt_packet+0x84>)
 800224a:	801a      	strh	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58020000 	.word	0x58020000
 8002258:	2400196e 	.word	0x2400196e
 800225c:	24001cec 	.word	0x24001cec

08002260 <create_erpa_packet>:


void create_erpa_packet() {
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002266:	bf00      	nop
 8002268:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800226c:	4828      	ldr	r0, [pc, #160]	; (8002310 <create_erpa_packet+0xb0>)
 800226e:	f006 ffdb 	bl	8009228 <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f7      	bne.n	8002268 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002278:	23ff      	movs	r3, #255	; 0xff
 800227a:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4618      	mov	r0, r3
 8002280:	f001 fa2c 	bl	80036dc <get_uptime>
	sweep_step = get_current_step();
 8002284:	f7ff ff20 	bl	80020c8 <get_current_step>
 8002288:	4603      	mov	r3, r0
 800228a:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4618      	mov	r0, r3
 8002292:	f000 faad 	bl	80027f0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fac8 	bl	8002830 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80022a0:	23aa      	movs	r3, #170	; 0xaa
 80022a2:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 80022a4:	23aa      	movs	r3, #170	; 0xaa
 80022a6:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <create_erpa_packet+0xb4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <create_erpa_packet+0xb4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <create_erpa_packet+0xb4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80022c4:	7ffb      	ldrb	r3, [r7, #31]
 80022c6:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022c8:	893b      	ldrh	r3, [r7, #8]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022d2:	893b      	ldrh	r3, [r7, #8]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022dc:	7b7b      	ldrb	r3, [r7, #13]
 80022de:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80022e0:	793b      	ldrb	r3, [r7, #4]
 80022e2:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80022e4:	797b      	ldrb	r3, [r7, #5]
 80022e6:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80022e8:	79bb      	ldrb	r3, [r7, #6]
 80022ea:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80022f0:	f107 0110 	add.w	r1, r7, #16
 80022f4:	2364      	movs	r3, #100	; 0x64
 80022f6:	220e      	movs	r2, #14
 80022f8:	4807      	ldr	r0, [pc, #28]	; (8002318 <create_erpa_packet+0xb8>)
 80022fa:	f00e f889 	bl	8010410 <HAL_UART_Transmit>

	erpa_seq++;
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <create_erpa_packet+0xb4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <create_erpa_packet+0xb4>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	58020400 	.word	0x58020400
 8002314:	24001970 	.word	0x24001970
 8002318:	24001cec 	.word	0x24001cec

0800231c <create_hk_packet>:


void create_hk_packet() {
 800231c:	b580      	push	{r7, lr}
 800231e:	b094      	sub	sp, #80	; 0x50
 8002320:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4618      	mov	r0, r3
 8002326:	f001 f9d9 	bl	80036dc <get_uptime>
	get_timestamp(timestamp);
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	4618      	mov	r0, r3
 8002330:	f001 fa24 	bl	800377c <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002334:	f001 fd5a 	bl	8003dec <get_rail_monitor>
 8002338:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800233a:	23cc      	movs	r3, #204	; 0xcc
 800233c:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800233e:	23cc      	movs	r3, #204	; 0xcc
 8002340:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002342:	4b9b      	ldr	r3, [pc, #620]	; (80025b0 <create_hk_packet+0x294>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800234e:	4b98      	ldr	r3, [pc, #608]	; (80025b0 <create_hk_packet+0x294>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b29b      	uxth	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 800236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236c:	330a      	adds	r3, #10
 800236e:	889b      	ldrh	r3, [r3, #4]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b29b      	uxth	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800237a:	330a      	adds	r3, #10
 800237c:	889b      	ldrh	r3, [r3, #4]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002384:	3314      	adds	r3, #20
 8002386:	889b      	ldrh	r3, [r3, #4]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29b      	uxth	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002392:	3314      	adds	r3, #20
 8002394:	889b      	ldrh	r3, [r3, #4]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 800239a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239c:	331e      	adds	r3, #30
 800239e:	889b      	ldrh	r3, [r3, #4]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80023a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023aa:	331e      	adds	r3, #30
 80023ac:	889b      	ldrh	r3, [r3, #4]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80023b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b4:	3328      	adds	r3, #40	; 0x28
 80023b6:	889b      	ldrh	r3, [r3, #4]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80023c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c4:	3328      	adds	r3, #40	; 0x28
 80023c6:	889b      	ldrh	r3, [r3, #4]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80023ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d0:	3332      	adds	r3, #50	; 0x32
 80023d2:	889b      	ldrh	r3, [r3, #4]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80023de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e0:	3332      	adds	r3, #50	; 0x32
 80023e2:	889b      	ldrh	r3, [r3, #4]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80023ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ec:	333c      	adds	r3, #60	; 0x3c
 80023ee:	889b      	ldrh	r3, [r3, #4]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fc:	333c      	adds	r3, #60	; 0x3c
 80023fe:	889b      	ldrh	r3, [r3, #4]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	3346      	adds	r3, #70	; 0x46
 800240a:	889b      	ldrh	r3, [r3, #4]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002418:	3346      	adds	r3, #70	; 0x46
 800241a:	889b      	ldrh	r3, [r3, #4]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002424:	3350      	adds	r3, #80	; 0x50
 8002426:	889b      	ldrh	r3, [r3, #4]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	3350      	adds	r3, #80	; 0x50
 8002436:	889b      	ldrh	r3, [r3, #4]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 800243e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002440:	335a      	adds	r3, #90	; 0x5a
 8002442:	889b      	ldrh	r3, [r3, #4]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	b29b      	uxth	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 800244e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002450:	335a      	adds	r3, #90	; 0x5a
 8002452:	889b      	ldrh	r3, [r3, #4]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 800245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245c:	3364      	adds	r3, #100	; 0x64
 800245e:	889b      	ldrh	r3, [r3, #4]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	b29b      	uxth	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 800246a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246c:	3364      	adds	r3, #100	; 0x64
 800246e:	889b      	ldrh	r3, [r3, #4]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002478:	336e      	adds	r3, #110	; 0x6e
 800247a:	889b      	ldrh	r3, [r3, #4]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b29b      	uxth	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002488:	336e      	adds	r3, #110	; 0x6e
 800248a:	889b      	ldrh	r3, [r3, #4]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002494:	3378      	adds	r3, #120	; 0x78
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	b29b      	uxth	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	3378      	adds	r3, #120	; 0x78
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80024ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b0:	3382      	adds	r3, #130	; 0x82
 80024b2:	889b      	ldrh	r3, [r3, #4]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80024be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c0:	3382      	adds	r3, #130	; 0x82
 80024c2:	889b      	ldrh	r3, [r3, #4]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	338c      	adds	r3, #140	; 0x8c
 80024ce:	889b      	ldrh	r3, [r3, #4]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80024da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024dc:	338c      	adds	r3, #140	; 0x8c
 80024de:	889b      	ldrh	r3, [r3, #4]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80024e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e8:	3396      	adds	r3, #150	; 0x96
 80024ea:	889b      	ldrh	r3, [r3, #4]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80024f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f8:	3396      	adds	r3, #150	; 0x96
 80024fa:	889b      	ldrh	r3, [r3, #4]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002504:	33a0      	adds	r3, #160	; 0xa0
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	b29b      	uxth	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002514:	33a0      	adds	r3, #160	; 0xa0
 8002516:	889b      	ldrh	r3, [r3, #4]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800251e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002520:	33aa      	adds	r3, #170	; 0xaa
 8002522:	889b      	ldrh	r3, [r3, #4]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	33aa      	adds	r3, #170	; 0xaa
 8002532:	889b      	ldrh	r3, [r3, #4]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 800253a:	7a3b      	ldrb	r3, [r7, #8]
 800253c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8002540:	7a7b      	ldrb	r3, [r7, #9]
 8002542:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8002546:	7abb      	ldrb	r3, [r7, #10]
 8002548:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8002552:	7b3b      	ldrb	r3, [r7, #12]
 8002554:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002558:	7b7b      	ldrb	r3, [r7, #13]
 800255a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 800255e:	7bbb      	ldrb	r3, [r7, #14]
 8002560:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 800256a:	7c3b      	ldrb	r3, [r7, #16]
 800256c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8002570:	7c7b      	ldrb	r3, [r7, #17]
 8002572:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8002576:	793b      	ldrb	r3, [r7, #4]
 8002578:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 800257c:	797b      	ldrb	r3, [r7, #5]
 800257e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8002582:	79bb      	ldrb	r3, [r7, #6]
 8002584:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 800258e:	f107 0114 	add.w	r1, r7, #20
 8002592:	2364      	movs	r3, #100	; 0x64
 8002594:	2236      	movs	r2, #54	; 0x36
 8002596:	4807      	ldr	r0, [pc, #28]	; (80025b4 <create_hk_packet+0x298>)
 8002598:	f00d ff3a 	bl	8010410 <HAL_UART_Transmit>

	hk_seq++;
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <create_hk_packet+0x294>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <create_hk_packet+0x294>)
 80025a6:	801a      	strh	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	3750      	adds	r7, #80	; 0x50
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	24001974 	.word	0x24001974
 80025b4:	24001cec 	.word	0x24001cec

080025b8 <reset_packet_sequence_numbers>:
	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
}



void reset_packet_sequence_numbers() {
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <reset_packet_sequence_numbers+0x20>)
 80025be:	2200      	movs	r2, #0
 80025c0:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <reset_packet_sequence_numbers+0x24>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <reset_packet_sequence_numbers+0x28>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	801a      	strh	r2, [r3, #0]
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	2400196e 	.word	0x2400196e
 80025dc:	24001970 	.word	0x24001970
 80025e0:	24001974 	.word	0x24001974

080025e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025f8:	2300      	movs	r3, #0
 80025fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025fc:	4b26      	ldr	r3, [pc, #152]	; (8002698 <MX_RTC_Init+0xb4>)
 80025fe:	4a27      	ldr	r2, [pc, #156]	; (800269c <MX_RTC_Init+0xb8>)
 8002600:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <MX_RTC_Init+0xb4>)
 8002604:	2200      	movs	r2, #0
 8002606:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <MX_RTC_Init+0xb4>)
 800260a:	2263      	movs	r2, #99	; 0x63
 800260c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <MX_RTC_Init+0xb4>)
 8002610:	f242 720f 	movw	r2, #9999	; 0x270f
 8002614:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <MX_RTC_Init+0xb4>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <MX_RTC_Init+0xb4>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <MX_RTC_Init+0xb4>)
 8002624:	2200      	movs	r2, #0
 8002626:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <MX_RTC_Init+0xb4>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800262e:	481a      	ldr	r0, [pc, #104]	; (8002698 <MX_RTC_Init+0xb4>)
 8002630:	f00b f9d4 	bl	800d9dc <HAL_RTC_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800263a:	f7ff fdc5 	bl	80021c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800263e:	2300      	movs	r3, #0
 8002640:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002642:	2300      	movs	r3, #0
 8002644:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002646:	2300      	movs	r3, #0
 8002648:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2201      	movs	r2, #1
 8002656:	4619      	mov	r1, r3
 8002658:	480f      	ldr	r0, [pc, #60]	; (8002698 <MX_RTC_Init+0xb4>)
 800265a:	f00b fa41 	bl	800dae0 <HAL_RTC_SetTime>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002664:	f7ff fdb0 	bl	80021c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002668:	2301      	movs	r3, #1
 800266a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800266c:	2301      	movs	r3, #1
 800266e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002670:	2301      	movs	r3, #1
 8002672:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002674:	2300      	movs	r3, #0
 8002676:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002678:	463b      	mov	r3, r7
 800267a:	2201      	movs	r2, #1
 800267c:	4619      	mov	r1, r3
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <MX_RTC_Init+0xb4>)
 8002680:	f00b fb28 	bl	800dcd4 <HAL_RTC_SetDate>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800268a:	f7ff fd9d 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	24001978 	.word	0x24001978
 800269c:	58004000 	.word	0x58004000

080026a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0b2      	sub	sp, #200	; 0xc8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	22c0      	movs	r2, #192	; 0xc0
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f013 fed3 	bl	801645c <memset>
  if(rtcHandle->Instance==RTC)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_RTC_MspInit+0x5c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d118      	bne.n	80026f2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RTC_MspInit+0x60>)
 80026ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f008 fc82 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80026e2:	f7ff fd71 	bl	80021c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_RTC_MspInit+0x64>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a06      	ldr	r2, [pc, #24]	; (8002704 <HAL_RTC_MspInit+0x64>)
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026f2:	bf00      	nop
 80026f4:	37c8      	adds	r7, #200	; 0xc8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	58004000 	.word	0x58004000
 8002700:	00019300 	.word	0x00019300
 8002704:	58024400 	.word	0x58024400

08002708 <init_adc_dma>:
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t erpa_spi_raw_data[2]);
ALIGN_32BYTES(static uint16_t pmt_spi_raw_data[2]);

// Public Functions
uint8_t init_adc_dma() {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002712:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002716:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271a:	481f      	ldr	r0, [pc, #124]	; (8002798 <init_adc_dma+0x90>)
 800271c:	f002 ff64 	bl	80055e8 <HAL_ADCEx_Calibration_Start>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002726:	f7ff fd4f 	bl	80021c8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800272a:	220b      	movs	r2, #11
 800272c:	491b      	ldr	r1, [pc, #108]	; (800279c <init_adc_dma+0x94>)
 800272e:	481a      	ldr	r0, [pc, #104]	; (8002798 <init_adc_dma+0x90>)
 8002730:	f002 f838 	bl	80047a4 <HAL_ADC_Start_DMA>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800273a:	f7ff fd45 	bl	80021c8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800273e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002746:	4816      	ldr	r0, [pc, #88]	; (80027a0 <init_adc_dma+0x98>)
 8002748:	f002 ff4e 	bl	80055e8 <HAL_ADCEx_Calibration_Start>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002752:	f7ff fd39 	bl	80021c8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002756:	2204      	movs	r2, #4
 8002758:	4912      	ldr	r1, [pc, #72]	; (80027a4 <init_adc_dma+0x9c>)
 800275a:	4811      	ldr	r0, [pc, #68]	; (80027a0 <init_adc_dma+0x98>)
 800275c:	f002 f822 	bl	80047a4 <HAL_ADC_Start_DMA>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002766:	f7ff fd2f 	bl	80021c8 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <init_adc_dma+0xa0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <init_adc_dma+0xa0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <init_adc_dma+0xa4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <init_adc_dma+0xa4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002788:	601a      	str	r2, [r3, #0]


	status = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	71fb      	strb	r3, [r7, #7]

	return status;
 800278e:	79fb      	ldrb	r3, [r7, #7]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2400011c 	.word	0x2400011c
 800279c:	240019a0 	.word	0x240019a0
 80027a0:	24000180 	.word	0x24000180
 80027a4:	240019c0 	.word	0x240019c0
 80027a8:	24001a8c 	.word	0x24001a8c
 80027ac:	24001a04 	.word	0x24001a04

080027b0 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80027b8:	2201      	movs	r2, #1
 80027ba:	490b      	ldr	r1, [pc, #44]	; (80027e8 <sample_pmt_spi+0x38>)
 80027bc:	480b      	ldr	r0, [pc, #44]	; (80027ec <sample_pmt_spi+0x3c>)
 80027be:	f00b fd53 	bl	800e268 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <sample_pmt_spi+0x38>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <sample_pmt_spi+0x38>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3301      	adds	r3, #1
 80027dc:	7bba      	ldrb	r2, [r7, #14]
 80027de:	701a      	strb	r2, [r3, #0]
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	24001a00 	.word	0x24001a00
 80027ec:	24001a04 	.word	0x24001a04

080027f0 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80027f8:	2201      	movs	r2, #1
 80027fa:	490b      	ldr	r1, [pc, #44]	; (8002828 <sample_erpa_spi+0x38>)
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <sample_erpa_spi+0x3c>)
 80027fe:	f00b fd33 	bl	800e268 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <sample_erpa_spi+0x38>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	b29b      	uxth	r3, r3
 800280a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <sample_erpa_spi+0x38>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3301      	adds	r3, #1
 800281c:	7bba      	ldrb	r2, [r7, #14]
 800281e:	701a      	strb	r2, [r3, #0]
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	240019e0 	.word	0x240019e0
 800282c:	24001a8c 	.word	0x24001a8c

08002830 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <sample_erpa_adc+0x20>)
 800283a:	885b      	ldrh	r3, [r3, #2]
 800283c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	89fa      	ldrh	r2, [r7, #14]
 8002842:	801a      	strh	r2, [r3, #0]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	240019a0 	.word	0x240019a0

08002854 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800285c:	2390      	movs	r3, #144	; 0x90
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f8a2 	bl	80029a8 <poll_i2c_sensor>
 8002864:	4603      	mov	r3, r0
 8002866:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002868:	2394      	movs	r3, #148	; 0x94
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f89c 	bl	80029a8 <poll_i2c_sensor>
 8002870:	4603      	mov	r3, r0
 8002872:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002874:	2392      	movs	r3, #146	; 0x92
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f896 	bl	80029a8 <poll_i2c_sensor>
 800287c:	4603      	mov	r3, r0
 800287e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002880:	2396      	movs	r3, #150	; 0x96
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f890 	bl	80029a8 <poll_i2c_sensor>
 8002888:	4603      	mov	r3, r0
 800288a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	89fa      	ldrh	r2, [r7, #14]
 8002890:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3302      	adds	r3, #2
 8002896:	89ba      	ldrh	r2, [r7, #12]
 8002898:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	897a      	ldrh	r2, [r7, #10]
 80028a0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3306      	adds	r3, #6
 80028a6:	893a      	ldrh	r2, [r7, #8]
 80028a8:	801a      	strh	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <sample_hk_adc1+0xa0>)
 80028be:	8a9b      	ldrh	r3, [r3, #20]
 80028c0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <sample_hk_adc1+0xa0>)
 80028c4:	8a1b      	ldrh	r3, [r3, #16]
 80028c6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <sample_hk_adc1+0xa0>)
 80028ca:	899b      	ldrh	r3, [r3, #12]
 80028cc:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <sample_hk_adc1+0xa0>)
 80028d0:	8a5b      	ldrh	r3, [r3, #18]
 80028d2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <sample_hk_adc1+0xa0>)
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <sample_hk_adc1+0xa0>)
 80028dc:	88db      	ldrh	r3, [r3, #6]
 80028de:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <sample_hk_adc1+0xa0>)
 80028e2:	89db      	ldrh	r3, [r3, #14]
 80028e4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <sample_hk_adc1+0xa0>)
 80028e8:	891b      	ldrh	r3, [r3, #8]
 80028ea:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <sample_hk_adc1+0xa0>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <sample_hk_adc1+0xa0>)
 80028f4:	895b      	ldrh	r3, [r3, #10]
 80028f6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8bfa      	ldrh	r2, [r7, #30]
 80028fc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3302      	adds	r3, #2
 8002902:	8bba      	ldrh	r2, [r7, #28]
 8002904:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	8b7a      	ldrh	r2, [r7, #26]
 800290c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3306      	adds	r3, #6
 8002912:	8b3a      	ldrh	r2, [r7, #24]
 8002914:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3308      	adds	r3, #8
 800291a:	8afa      	ldrh	r2, [r7, #22]
 800291c:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	330a      	adds	r3, #10
 8002922:	8aba      	ldrh	r2, [r7, #20]
 8002924:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	330c      	adds	r3, #12
 800292a:	8a7a      	ldrh	r2, [r7, #18]
 800292c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	330e      	adds	r3, #14
 8002932:	8a3a      	ldrh	r2, [r7, #16]
 8002934:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3310      	adds	r3, #16
 800293a:	89fa      	ldrh	r2, [r7, #14]
 800293c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3312      	adds	r3, #18
 8002942:	89ba      	ldrh	r2, [r7, #12]
 8002944:	801a      	strh	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	240019a0 	.word	0x240019a0

08002958 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <sample_hk_adc3+0x4c>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <sample_hk_adc3+0x4c>)
 8002968:	885b      	ldrh	r3, [r3, #2]
 800296a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <sample_hk_adc3+0x4c>)
 800296e:	889b      	ldrh	r3, [r3, #4]
 8002970:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <sample_hk_adc3+0x4c>)
 8002974:	88db      	ldrh	r3, [r3, #6]
 8002976:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	89fa      	ldrh	r2, [r7, #14]
 800297c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3302      	adds	r3, #2
 8002982:	89ba      	ldrh	r2, [r7, #12]
 8002984:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	897a      	ldrh	r2, [r7, #10]
 800298c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3306      	adds	r3, #6
 8002992:	893a      	ldrh	r2, [r7, #8]
 8002994:	801a      	strh	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	240019c0 	.word	0x240019c0

080029a8 <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 80029b2:	2300      	movs	r3, #0
 80029b4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	b299      	uxth	r1, r3
 80029ba:	f107 0208 	add.w	r2, r7, #8
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	4817      	ldr	r0, [pc, #92]	; (8002a24 <poll_i2c_sensor+0x7c>)
 80029c8:	f006 fcfc 	bl	80093c4 <HAL_I2C_Master_Transmit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80029d0:	7b7b      	ldrb	r3, [r7, #13]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 80029d6:	4814      	ldr	r0, [pc, #80]	; (8002a28 <poll_i2c_sensor+0x80>)
 80029d8:	f013 fdb6 	bl	8016548 <puts>
 80029dc:	e01c      	b.n	8002a18 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	b299      	uxth	r1, r3
 80029e2:	f107 0208 	add.w	r2, r7, #8
 80029e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2302      	movs	r3, #2
 80029ee:	480d      	ldr	r0, [pc, #52]	; (8002a24 <poll_i2c_sensor+0x7c>)
 80029f0:	f006 fe00 	bl	80095f4 <HAL_I2C_Master_Receive>
 80029f4:	4603      	mov	r3, r0
 80029f6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80029f8:	7b7b      	ldrb	r3, [r7, #13]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80029fe:	480b      	ldr	r0, [pc, #44]	; (8002a2c <poll_i2c_sensor+0x84>)
 8002a00:	f013 fda2 	bl	8016548 <puts>
 8002a04:	e008      	b.n	8002a18 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8002a06:	7a3b      	ldrb	r3, [r7, #8]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8002a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a10:	7a7a      	ldrb	r2, [r7, #9]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	10db      	asrs	r3, r3, #3
 8002a16:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	240018c0 	.word	0x240018c0
 8002a28:	080170b0 	.word	0x080170b0
 8002a2c:	080170c0 	.word	0x080170c0

08002a30 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <MX_SPI1_Init+0xac>)
 8002a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002a48:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a66:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_SPI1_Init+0xa8>)
 8002ac4:	f00b faac 	bl	800e020 <HAL_SPI_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002ace:	f7ff fb7b 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	24001a04 	.word	0x24001a04
 8002adc:	40013000 	.word	0x40013000

08002ae0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <MX_SPI2_Init+0xac>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002aec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002af0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002af4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002af8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002afc:	220f      	movs	r2, #15
 8002afe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b16:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002b1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b72:	4805      	ldr	r0, [pc, #20]	; (8002b88 <MX_SPI2_Init+0xa8>)
 8002b74:	f00b fa54 	bl	800e020 <HAL_SPI_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002b7e:	f7ff fb23 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	24001a8c 	.word	0x24001a8c
 8002b8c:	40003800 	.word	0x40003800

08002b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0bc      	sub	sp, #240	; 0xf0
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba8:	f107 0318 	add.w	r3, r7, #24
 8002bac:	22c0      	movs	r2, #192	; 0xc0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f013 fc53 	bl	801645c <memset>
  if(spiHandle->Instance==SPI1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a83      	ldr	r2, [pc, #524]	; (8002dc8 <HAL_SPI_MspInit+0x238>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d17c      	bne.n	8002cba <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd0:	f107 0318 	add.w	r3, r7, #24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f008 fa03 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002be0:	f7ff faf2 	bl	80021c8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002be4:	4b79      	ldr	r3, [pc, #484]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bea:	4a78      	ldr	r2, [pc, #480]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bf4:	4b75      	ldr	r3, [pc, #468]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	4b72      	ldr	r3, [pc, #456]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c08:	4a70      	ldr	r2, [pc, #448]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c12:	4b6e      	ldr	r3, [pc, #440]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c20:	2318      	movs	r3, #24
 8002c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c42:	4619      	mov	r1, r3
 8002c44:	4862      	ldr	r0, [pc, #392]	; (8002dd0 <HAL_SPI_MspInit+0x240>)
 8002c46:	f006 f93f 	bl	8008ec8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002c4a:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c4c:	4a62      	ldr	r2, [pc, #392]	; (8002dd8 <HAL_SPI_MspInit+0x248>)
 8002c4e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002c50:	4b60      	ldr	r3, [pc, #384]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c52:	2225      	movs	r2, #37	; 0x25
 8002c54:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5c:	4b5d      	ldr	r3, [pc, #372]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c68:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c70:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c72:	4b58      	ldr	r3, [pc, #352]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c78:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c80:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c86:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c8c:	4851      	ldr	r0, [pc, #324]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002c8e:	f003 fad3 	bl	8006238 <HAL_DMA_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002c98:	f7ff fa96 	bl	80021c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002ca0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ca2:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <HAL_SPI_MspInit+0x244>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2105      	movs	r1, #5
 8002cac:	2023      	movs	r0, #35	; 0x23
 8002cae:	f002 fe95 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002cb2:	2023      	movs	r0, #35	; 0x23
 8002cb4:	f002 feac 	bl	8005a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002cb8:	e081      	b.n	8002dbe <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a47      	ldr	r2, [pc, #284]	; (8002ddc <HAL_SPI_MspInit+0x24c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d17c      	bne.n	8002dbe <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002cc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd4:	f107 0318 	add.w	r3, r7, #24
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f008 f981 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8002ce4:	f7ff fa70 	bl	80021c8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ce8:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cee:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cf8:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_SPI_MspInit+0x23c>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d3e:	2305      	movs	r3, #5
 8002d40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4821      	ldr	r0, [pc, #132]	; (8002dd0 <HAL_SPI_MspInit+0x240>)
 8002d4c:	f006 f8bc 	bl	8008ec8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002d50:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <HAL_SPI_MspInit+0x254>)
 8002d54:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d58:	2227      	movs	r2, #39	; 0x27
 8002d5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d6e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d76:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002d92:	4813      	ldr	r0, [pc, #76]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002d94:	f003 fa50 	bl	8006238 <HAL_DMA_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8002d9e:	f7ff fa13 	bl	80021c8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002da6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_SPI_MspInit+0x250>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	2024      	movs	r0, #36	; 0x24
 8002db4:	f002 fe12 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002db8:	2024      	movs	r0, #36	; 0x24
 8002dba:	f002 fe29 	bl	8005a10 <HAL_NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	37f0      	adds	r7, #240	; 0xf0
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40013000 	.word	0x40013000
 8002dcc:	58024400 	.word	0x58024400
 8002dd0:	58020400 	.word	0x58020400
 8002dd4:	24001b14 	.word	0x24001b14
 8002dd8:	40020070 	.word	0x40020070
 8002ddc:	40003800 	.word	0x40003800
 8002de0:	24001b8c 	.word	0x24001b8c
 8002de4:	40020058 	.word	0x40020058

08002de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_MspInit+0x38>)
 8002df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <HAL_MspInit+0x38>)
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_MspInit+0x38>)
 8002e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f06f 0001 	mvn.w	r0, #1
 8002e14:	f002 fde2 	bl	80059dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	58024400 	.word	0x58024400

08002e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b090      	sub	sp, #64	; 0x40
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	d827      	bhi.n	8002e82 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002e32:	2200      	movs	r2, #0
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	2036      	movs	r0, #54	; 0x36
 8002e38:	f002 fdd0 	bl	80059dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e3c:	2036      	movs	r0, #54	; 0x36
 8002e3e:	f002 fde7 	bl	8005a10 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002e42:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <HAL_InitTick+0xc4>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_InitTick+0xc8>)
 8002e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <HAL_InitTick+0xc8>)
 8002e50:	f043 0310 	orr.w	r3, r3, #16
 8002e54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_InitTick+0xc8>)
 8002e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e66:	f107 0210 	add.w	r2, r7, #16
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f008 f873 	bl	800af5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <HAL_InitTick+0x6a>
 8002e80:	e001      	b.n	8002e86 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e02b      	b.n	8002ede <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e86:	f008 f83d 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 8002e8a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002e8c:	e004      	b.n	8002e98 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e8e:	f008 f839 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 8002e92:	4603      	mov	r3, r0
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_InitTick+0xcc>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	0c9b      	lsrs	r3, r3, #18
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_InitTick+0xd0>)
 8002ea8:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <HAL_InitTick+0xd4>)
 8002eaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_InitTick+0xd0>)
 8002eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_InitTick+0xd0>)
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_InitTick+0xd0>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_InitTick+0xd0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ec6:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <HAL_InitTick+0xd0>)
 8002ec8:	f00b fe49 	bl	800eb5e <HAL_TIM_Base_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ed2:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <HAL_InitTick+0xd0>)
 8002ed4:	f00b fe9a 	bl	800ec0c <HAL_TIM_Base_Start_IT>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	e000      	b.n	8002ede <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3740      	adds	r7, #64	; 0x40
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	2400008c 	.word	0x2400008c
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	431bde83 	.word	0x431bde83
 8002ef4:	24001c04 	.word	0x24001c04
 8002ef8:	40001000 	.word	0x40001000

08002efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002f00:	e7fe      	b.n	8002f00 <NMI_Handler+0x4>

08002f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f06:	e7fe      	b.n	8002f06 <HardFault_Handler+0x4>

08002f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f0c:	e7fe      	b.n	8002f0c <MemManage_Handler+0x4>

08002f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f12:	e7fe      	b.n	8002f12 <BusFault_Handler+0x4>

08002f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <UsageFault_Handler+0x4>

08002f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <DMA1_Stream0_IRQHandler+0x10>)
 8002f2e:	f004 fcad 	bl	800788c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	240001e4 	.word	0x240001e4

08002f3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <DMA1_Stream1_IRQHandler+0x10>)
 8002f42:	f004 fca3 	bl	800788c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2400025c 	.word	0x2400025c

08002f50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f54:	4802      	ldr	r0, [pc, #8]	; (8002f60 <DMA1_Stream2_IRQHandler+0x10>)
 8002f56:	f004 fc99 	bl	800788c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	24001d80 	.word	0x24001d80

08002f64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <DMA1_Stream3_IRQHandler+0x10>)
 8002f6a:	f004 fc8f 	bl	800788c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	24001b8c 	.word	0x24001b8c

08002f78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <DMA1_Stream4_IRQHandler+0x10>)
 8002f7e:	f004 fc85 	bl	800788c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	24001b14 	.word	0x24001b14

08002f8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <DMA1_Stream5_IRQHandler+0x10>)
 8002f92:	f004 fc7b 	bl	800788c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	240002e8 	.word	0x240002e8

08002fa0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <TIM1_BRK_IRQHandler+0x10>)
 8002fa6:	f00c f948 	bl	800f23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	24001c54 	.word	0x24001c54

08002fb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <TIM1_UP_IRQHandler+0x10>)
 8002fba:	f00c f93e 	bl	800f23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	24001c54 	.word	0x24001c54

08002fc8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002fce:	f00c f934 	bl	800f23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	24001c54 	.word	0x24001c54

08002fdc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <TIM1_CC_IRQHandler+0x10>)
 8002fe2:	f00c f92a 	bl	800f23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	24001c54 	.word	0x24001c54

08002ff0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <TIM2_IRQHandler+0x10>)
 8002ff6:	f00c f920 	bl	800f23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	24001ca0 	.word	0x24001ca0

08003004 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <SPI1_IRQHandler+0x10>)
 800300a:	f00b fa75 	bl	800e4f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	24001a04 	.word	0x24001a04

08003018 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <SPI2_IRQHandler+0x10>)
 800301e:	f00b fa6b 	bl	800e4f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	24001a8c 	.word	0x24001a8c

0800302c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <USART1_IRQHandler+0x10>)
 8003032:	f00d fc45 	bl	80108c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	24001cec 	.word	0x24001cec

08003040 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <TIM6_DAC_IRQHandler+0x20>)
 8003046:	791b      	ldrb	r3, [r3, #4]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <TIM6_DAC_IRQHandler+0x20>)
 8003050:	f002 fe73 	bl	8005d3a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003054:	4803      	ldr	r0, [pc, #12]	; (8003064 <TIM6_DAC_IRQHandler+0x24>)
 8003056:	f00c f8f0 	bl	800f23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	240002d4 	.word	0x240002d4
 8003064:	24001c04 	.word	0x24001c04

08003068 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <ITM_SendChar+0x48>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <ITM_SendChar+0x48>)
 8003078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <ITM_SendChar+0x4c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <ITM_SendChar+0x4c>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800308a:	bf00      	nop
 800308c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f8      	beq.n	800308c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800309a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000edfc 	.word	0xe000edfc
 80030b4:	e0000e00 	.word	0xe0000e00

080030b8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e00a      	b.n	80030e0 <_read+0x28>
		*ptr++ = __io_getchar();
 80030ca:	f3af 8000 	nop.w
 80030ce:	4601      	mov	r1, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	60ba      	str	r2, [r7, #8]
 80030d6:	b2ca      	uxtb	r2, r1
 80030d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbf0      	blt.n	80030ca <_read+0x12>
	}

	return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e009      	b.n	8003118 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ffab 	bl	8003068 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	dbf1      	blt.n	8003104 <_write+0x12>
	}
	return len;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <_close>:

int _close(int file) {
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_fstat>:

int _fstat(int file, struct stat *st) {
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003152:	605a      	str	r2, [r3, #4]
	return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_isatty>:

int _isatty(int file) {
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800316a:	2301      	movs	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <_sbrk+0x64>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <_sbrk+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d207      	bcs.n	80031d4 <_sbrk+0x40>
		errno = ENOMEM;
 80031c4:	f013 f912 	bl	80163ec <__errno>
 80031c8:	4603      	mov	r3, r0
 80031ca:	220c      	movs	r2, #12
 80031cc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d2:	e009      	b.n	80031e8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <_sbrk+0x64>)
 80031e4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	24080000 	.word	0x24080000
 80031f4:	00000400 	.word	0x00000400
 80031f8:	24001c50 	.word	0x24001c50
 80031fc:	24006810 	.word	0x24006810

08003200 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003204:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <SystemInit+0xe4>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	4a36      	ldr	r2, [pc, #216]	; (80032e4 <SystemInit+0xe4>)
 800320c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <SystemInit+0xe8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	2b06      	cmp	r3, #6
 800321e:	d807      	bhi.n	8003230 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <SystemInit+0xe8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 030f 	bic.w	r3, r3, #15
 8003228:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <SystemInit+0xe8>)
 800322a:	f043 0307 	orr.w	r3, r3, #7
 800322e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003230:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <SystemInit+0xec>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2d      	ldr	r2, [pc, #180]	; (80032ec <SystemInit+0xec>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <SystemInit+0xec>)
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <SystemInit+0xec>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4929      	ldr	r1, [pc, #164]	; (80032ec <SystemInit+0xec>)
 8003248:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <SystemInit+0xf0>)
 800324a:	4013      	ands	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <SystemInit+0xe8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <SystemInit+0xe8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 030f 	bic.w	r3, r3, #15
 8003262:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <SystemInit+0xe8>)
 8003264:	f043 0307 	orr.w	r3, r3, #7
 8003268:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <SystemInit+0xec>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <SystemInit+0xec>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <SystemInit+0xec>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <SystemInit+0xec>)
 800327e:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <SystemInit+0xf4>)
 8003280:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <SystemInit+0xec>)
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <SystemInit+0xf8>)
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <SystemInit+0xec>)
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <SystemInit+0xfc>)
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <SystemInit+0xec>)
 8003290:	2200      	movs	r2, #0
 8003292:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <SystemInit+0xec>)
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <SystemInit+0xfc>)
 8003298:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <SystemInit+0xec>)
 800329c:	2200      	movs	r2, #0
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <SystemInit+0xec>)
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <SystemInit+0xfc>)
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <SystemInit+0xec>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <SystemInit+0xec>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <SystemInit+0xec>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <SystemInit+0xec>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <SystemInit+0x100>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <SystemInit+0x104>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ca:	d202      	bcs.n	80032d2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <SystemInit+0x108>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <SystemInit+0x10c>)
 80032d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80032d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00
 80032e8:	52002000 	.word	0x52002000
 80032ec:	58024400 	.word	0x58024400
 80032f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80032f4:	02020200 	.word	0x02020200
 80032f8:	01ff0000 	.word	0x01ff0000
 80032fc:	01010280 	.word	0x01010280
 8003300:	5c001000 	.word	0x5c001000
 8003304:	ffff0000 	.word	0xffff0000
 8003308:	51008108 	.word	0x51008108
 800330c:	52004000 	.word	0x52004000

08003310 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b09a      	sub	sp, #104	; 0x68
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
 8003340:	615a      	str	r2, [r3, #20]
 8003342:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	222c      	movs	r2, #44	; 0x2c
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f013 f886 	bl	801645c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003350:	4b44      	ldr	r3, [pc, #272]	; (8003464 <MX_TIM1_Init+0x154>)
 8003352:	4a45      	ldr	r2, [pc, #276]	; (8003468 <MX_TIM1_Init+0x158>)
 8003354:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8003356:	4b43      	ldr	r3, [pc, #268]	; (8003464 <MX_TIM1_Init+0x154>)
 8003358:	224a      	movs	r2, #74	; 0x4a
 800335a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335c:	4b41      	ldr	r3, [pc, #260]	; (8003464 <MX_TIM1_Init+0x154>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <MX_TIM1_Init+0x154>)
 8003364:	f24f 4223 	movw	r2, #62499	; 0xf423
 8003368:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <MX_TIM1_Init+0x154>)
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003370:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <MX_TIM1_Init+0x154>)
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <MX_TIM1_Init+0x154>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800337c:	4839      	ldr	r0, [pc, #228]	; (8003464 <MX_TIM1_Init+0x154>)
 800337e:	f00b fbee 	bl	800eb5e <HAL_TIM_Base_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003388:	f7fe ff1e 	bl	80021c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003390:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003396:	4619      	mov	r1, r3
 8003398:	4832      	ldr	r0, [pc, #200]	; (8003464 <MX_TIM1_Init+0x154>)
 800339a:	f00c f969 	bl	800f670 <HAL_TIM_ConfigClockSource>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80033a4:	f7fe ff10 	bl	80021c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033a8:	482e      	ldr	r0, [pc, #184]	; (8003464 <MX_TIM1_Init+0x154>)
 80033aa:	f00b fee5 	bl	800f178 <HAL_TIM_PWM_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80033b4:	f7fe ff08 	bl	80021c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033c8:	4619      	mov	r1, r3
 80033ca:	4826      	ldr	r0, [pc, #152]	; (8003464 <MX_TIM1_Init+0x154>)
 80033cc:	f00c fea6 	bl	801011c <HAL_TIMEx_MasterConfigSynchronization>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80033d6:	f7fe fef7 	bl	80021c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033da:	2360      	movs	r3, #96	; 0x60
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80033de:	f240 13df 	movw	r3, #479	; 0x1df
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e4:	2300      	movs	r3, #0
 80033e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033e8:	2300      	movs	r3, #0
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033f4:	2300      	movs	r3, #0
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033fc:	2200      	movs	r2, #0
 80033fe:	4619      	mov	r1, r3
 8003400:	4818      	ldr	r0, [pc, #96]	; (8003464 <MX_TIM1_Init+0x154>)
 8003402:	f00c f821 	bl	800f448 <HAL_TIM_PWM_ConfigChannel>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800340c:	f7fe fedc 	bl	80021c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003410:	2300      	movs	r3, #0
 8003412:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003414:	2300      	movs	r3, #0
 8003416:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003428:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	4807      	ldr	r0, [pc, #28]	; (8003464 <MX_TIM1_Init+0x154>)
 8003446:	f00c fef7 	bl	8010238 <HAL_TIMEx_ConfigBreakDeadTime>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003450:	f7fe feba 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003454:	4803      	ldr	r0, [pc, #12]	; (8003464 <MX_TIM1_Init+0x154>)
 8003456:	f000 f8dd 	bl	8003614 <HAL_TIM_MspPostInit>

}
 800345a:	bf00      	nop
 800345c:	3768      	adds	r7, #104	; 0x68
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	24001c54 	.word	0x24001c54
 8003468:	40010000 	.word	0x40010000

0800346c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	; 0x38
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800348c:	463b      	mov	r3, r7
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	611a      	str	r2, [r3, #16]
 800349a:	615a      	str	r2, [r3, #20]
 800349c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 80034a6:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034a8:	224a      	movs	r2, #74	; 0x4a
 80034aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ac:	4b29      	ldr	r3, [pc, #164]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80034b2:	4b28      	ldr	r3, [pc, #160]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034b4:	f640 4234 	movw	r2, #3124	; 0xc34
 80034b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034c0:	4b24      	ldr	r3, [pc, #144]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034c6:	4823      	ldr	r0, [pc, #140]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034c8:	f00b fb49 	bl	800eb5e <HAL_TIM_Base_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80034d2:	f7fe fe79 	bl	80021c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e0:	4619      	mov	r1, r3
 80034e2:	481c      	ldr	r0, [pc, #112]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034e4:	f00c f8c4 	bl	800f670 <HAL_TIM_ConfigClockSource>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80034ee:	f7fe fe6b 	bl	80021c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034f2:	4818      	ldr	r0, [pc, #96]	; (8003554 <MX_TIM2_Init+0xe8>)
 80034f4:	f00b fe40 	bl	800f178 <HAL_TIM_PWM_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80034fe:	f7fe fe63 	bl	80021c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003502:	2320      	movs	r3, #32
 8003504:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	4619      	mov	r1, r3
 8003510:	4810      	ldr	r0, [pc, #64]	; (8003554 <MX_TIM2_Init+0xe8>)
 8003512:	f00c fe03 	bl	801011c <HAL_TIMEx_MasterConfigSynchronization>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800351c:	f7fe fe54 	bl	80021c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003520:	2360      	movs	r3, #96	; 0x60
 8003522:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003530:	463b      	mov	r3, r7
 8003532:	220c      	movs	r2, #12
 8003534:	4619      	mov	r1, r3
 8003536:	4807      	ldr	r0, [pc, #28]	; (8003554 <MX_TIM2_Init+0xe8>)
 8003538:	f00b ff86 	bl	800f448 <HAL_TIM_PWM_ConfigChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003542:	f7fe fe41 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003546:	4803      	ldr	r0, [pc, #12]	; (8003554 <MX_TIM2_Init+0xe8>)
 8003548:	f000 f864 	bl	8003614 <HAL_TIM_MspPostInit>

}
 800354c:	bf00      	nop
 800354e:	3738      	adds	r7, #56	; 0x38
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	24001ca0 	.word	0x24001ca0

08003558 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <HAL_TIM_Base_MspInit+0xb4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d12f      	bne.n	80035ca <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_TIM_Base_MspInit+0xb8>)
 800356c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <HAL_TIM_Base_MspInit+0xb8>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800357a:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_TIM_Base_MspInit+0xb8>)
 800357c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2105      	movs	r1, #5
 800358c:	2018      	movs	r0, #24
 800358e:	f002 fa25 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003592:	2018      	movs	r0, #24
 8003594:	f002 fa3c 	bl	8005a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003598:	2200      	movs	r2, #0
 800359a:	2105      	movs	r1, #5
 800359c:	2019      	movs	r0, #25
 800359e:	f002 fa1d 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80035a2:	2019      	movs	r0, #25
 80035a4:	f002 fa34 	bl	8005a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2105      	movs	r1, #5
 80035ac:	201a      	movs	r0, #26
 80035ae:	f002 fa15 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80035b2:	201a      	movs	r0, #26
 80035b4:	f002 fa2c 	bl	8005a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2105      	movs	r1, #5
 80035bc:	201b      	movs	r0, #27
 80035be:	f002 fa0d 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80035c2:	201b      	movs	r0, #27
 80035c4:	f002 fa24 	bl	8005a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80035c8:	e01b      	b.n	8003602 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d116      	bne.n	8003602 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_TIM_Base_MspInit+0xb8>)
 80035d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035da:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <HAL_TIM_Base_MspInit+0xb8>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_TIM_Base_MspInit+0xb8>)
 80035e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2105      	movs	r1, #5
 80035f6:	201c      	movs	r0, #28
 80035f8:	f002 f9f0 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035fc:	201c      	movs	r0, #28
 80035fe:	f002 fa07 	bl	8005a10 <HAL_NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	58024400 	.word	0x58024400

08003614 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a26      	ldr	r2, [pc, #152]	; (80036cc <HAL_TIM_MspPostInit+0xb8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d120      	bne.n	8003678 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_TIM_MspPostInit+0xbc>)
 8003638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363c:	4a24      	ldr	r2, [pc, #144]	; (80036d0 <HAL_TIM_MspPostInit+0xbc>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_TIM_MspPostInit+0xbc>)
 8003648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003666:	2301      	movs	r3, #1
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	4619      	mov	r1, r3
 8003670:	4818      	ldr	r0, [pc, #96]	; (80036d4 <HAL_TIM_MspPostInit+0xc0>)
 8003672:	f005 fc29 	bl	8008ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003676:	e024      	b.n	80036c2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d11f      	bne.n	80036c2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_TIM_MspPostInit+0xbc>)
 8003684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_TIM_MspPostInit+0xbc>)
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <HAL_TIM_MspPostInit+0xbc>)
 8003694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036b2:	2301      	movs	r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	4806      	ldr	r0, [pc, #24]	; (80036d8 <HAL_TIM_MspPostInit+0xc4>)
 80036be:	f005 fc03 	bl	8008ec8 <HAL_GPIO_Init>
}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	58024400 	.word	0x58024400
 80036d4:	58020000 	.word	0x58020000
 80036d8:	58020400 	.word	0x58020400

080036dc <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <get_uptime+0x94>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <get_uptime+0x98>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80036f4:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <get_uptime+0x94>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d005      	beq.n	800370a <get_uptime+0x2e>
		ms = uptime_millis;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <get_uptime+0x94>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <get_uptime+0x98>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003710:	fb03 f202 	mul.w	r2, r3, r2
 8003714:	4b17      	ldr	r3, [pc, #92]	; (8003774 <get_uptime+0x98>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	3301      	adds	r3, #1
 800371a:	4917      	ldr	r1, [pc, #92]	; (8003778 <get_uptime+0x9c>)
 800371c:	fba1 1303 	umull	r1, r3, r1, r3
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	fbb1 f3f3 	udiv	r3, r1, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <get_uptime+0x5a>
		uptime = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	0e1b      	lsrs	r3, r3, #24
 800373a:	b2da      	uxtb	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	0c1a      	lsrs	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3301      	adds	r3, #1
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	0a1a      	lsrs	r2, r3, #8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3302      	adds	r3, #2
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3303      	adds	r3, #3
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	24001964 	.word	0x24001964
 8003774:	e000e010 	.word	0xe000e010
 8003778:	10624dd3 	.word	0x10624dd3

0800377c <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	2200      	movs	r2, #0
 800378a:	4619      	mov	r1, r3
 800378c:	4821      	ldr	r0, [pc, #132]	; (8003814 <get_timestamp+0x98>)
 800378e:	f00a fa45 	bl	800dc1c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	2200      	movs	r2, #0
 8003798:	4619      	mov	r1, r3
 800379a:	481e      	ldr	r0, [pc, #120]	; (8003814 <get_timestamp+0x98>)
 800379c:	f00a fb22 	bl	800dde4 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2264      	movs	r2, #100	; 0x64
 80037a4:	fb03 f202 	mul.w	r2, r3, r2
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <get_timestamp+0x9c>)
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3301      	adds	r3, #1
 80037b8:	7b7a      	ldrb	r2, [r7, #13]
 80037ba:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3302      	adds	r3, #2
 80037c0:	7bba      	ldrb	r2, [r7, #14]
 80037c2:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3303      	adds	r3, #3
 80037c8:	7c3a      	ldrb	r2, [r7, #16]
 80037ca:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	7c7a      	ldrb	r2, [r7, #17]
 80037d2:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3305      	adds	r3, #5
 80037d8:	7cba      	ldrb	r2, [r7, #18]
 80037da:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	0e1a      	lsrs	r2, r3, #24
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3306      	adds	r3, #6
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	0c1a      	lsrs	r2, r3, #16
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3307      	adds	r3, #7
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	0a1a      	lsrs	r2, r3, #8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3308      	adds	r3, #8
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3309      	adds	r3, #9
 8003804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	24001978 	.word	0x24001978
 8003818:	000f4240 	.word	0x000f4240

0800381c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003822:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <MX_USART1_UART_Init+0xcc>)
 8003824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003828:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800382c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800382e:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800383a:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003842:	220c      	movs	r2, #12
 8003844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003846:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003854:	2200      	movs	r2, #0
 8003856:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003858:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800385e:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003860:	2200      	movs	r2, #0
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003864:	481f      	ldr	r0, [pc, #124]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003866:	f00c fd83 	bl	8010370 <HAL_UART_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003870:	f7fe fcaa 	bl	80021c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003874:	2100      	movs	r1, #0
 8003876:	481b      	ldr	r0, [pc, #108]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 8003878:	f00f fac9 	bl	8012e0e <HAL_UARTEx_SetTxFifoThreshold>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003882:	f7fe fca1 	bl	80021c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003886:	2100      	movs	r1, #0
 8003888:	4816      	ldr	r0, [pc, #88]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 800388a:	f00f fafe 	bl	8012e8a <HAL_UARTEx_SetRxFifoThreshold>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003894:	f7fe fc98 	bl	80021c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003898:	4812      	ldr	r0, [pc, #72]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 800389a:	f00f fa7f 	bl	8012d9c <HAL_UARTEx_DisableFifoMode>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80038a4:	f7fe fc90 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 80038a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038ac:	480d      	ldr	r0, [pc, #52]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 80038ae:	f00f faec 	bl	8012e8a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 80038b2:	480c      	ldr	r0, [pc, #48]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 80038b4:	f00f fa37 	bl	8012d26 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80038b8:	480a      	ldr	r0, [pc, #40]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 80038ba:	f00f fa01 	bl	8012cc0 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038cc:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <MX_USART1_UART_Init+0xc8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80038dc:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	24001cec 	.word	0x24001cec
 80038e8:	40011000 	.word	0x40011000

080038ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b0ba      	sub	sp, #232	; 0xe8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003904:	f107 0310 	add.w	r3, r7, #16
 8003908:	22c0      	movs	r2, #192	; 0xc0
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f012 fda5 	bl	801645c <memset>
  if(uartHandle->Instance==USART1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a41      	ldr	r2, [pc, #260]	; (8003a1c <HAL_UART_MspInit+0x130>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d17b      	bne.n	8003a14 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800391c:	f04f 0201 	mov.w	r2, #1
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003928:	2318      	movs	r3, #24
 800392a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800392e:	f107 0310 	add.w	r3, r7, #16
 8003932:	4618      	mov	r0, r3
 8003934:	f007 fb54 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800393e:	f7fe fc43 	bl	80021c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <HAL_UART_MspInit+0x134>)
 8003944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003948:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <HAL_UART_MspInit+0x134>)
 800394a:	f043 0310 	orr.w	r3, r3, #16
 800394e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003952:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_UART_MspInit+0x134>)
 8003954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003960:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <HAL_UART_MspInit+0x134>)
 8003962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003966:	4a2e      	ldr	r2, [pc, #184]	; (8003a20 <HAL_UART_MspInit+0x134>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_UART_MspInit+0x134>)
 8003972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800397e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003998:	2307      	movs	r3, #7
 800399a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039a2:	4619      	mov	r1, r3
 80039a4:	481f      	ldr	r0, [pc, #124]	; (8003a24 <HAL_UART_MspInit+0x138>)
 80039a6:	f005 fa8f 	bl	8008ec8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80039aa:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039ac:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <HAL_UART_MspInit+0x140>)
 80039ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039b0:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039b2:	222a      	movs	r2, #42	; 0x2a
 80039b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039b8:	2240      	movs	r2, #64	; 0x40
 80039ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039d0:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80039e8:	480f      	ldr	r0, [pc, #60]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039ea:	f002 fc25 	bl	8006238 <HAL_DMA_Init>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80039f4:	f7fe fbe8 	bl	80021c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 80039fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_UART_MspInit+0x13c>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2105      	movs	r1, #5
 8003a08:	2025      	movs	r0, #37	; 0x25
 8003a0a:	f001 ffe7 	bl	80059dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a0e:	2025      	movs	r0, #37	; 0x25
 8003a10:	f001 fffe 	bl	8005a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a14:	bf00      	nop
 8003a16:	37e8      	adds	r7, #232	; 0xe8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40011000 	.word	0x40011000
 8003a20:	58024400 	.word	0x58024400
 8003a24:	58020000 	.word	0x58020000
 8003a28:	24001d80 	.word	0x24001d80
 8003a2c:	40020040 	.word	0x40020040

08003a30 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003a3a:	4bc2      	ldr	r3, [pc, #776]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003a40:	4bc0      	ldr	r3, [pc, #768]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003a46:	4bbf      	ldr	r3, [pc, #764]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003a4c:	4bbd      	ldr	r3, [pc, #756]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a52:	4bbc      	ldr	r3, [pc, #752]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a54:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a58:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003a5a:	4bba      	ldr	r3, [pc, #744]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003a60:	4bb8      	ldr	r3, [pc, #736]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003a66:	4bb7      	ldr	r3, [pc, #732]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003a6c:	4bb5      	ldr	r3, [pc, #724]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003a72:	4bb4      	ldr	r3, [pc, #720]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a78:	4bb2      	ldr	r3, [pc, #712]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a7e:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003a80:	4bb0      	ldr	r3, [pc, #704]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003a86:	4baf      	ldr	r3, [pc, #700]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a88:	2202      	movs	r2, #2
 8003a8a:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003a8c:	4bad      	ldr	r3, [pc, #692]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003a92:	4bac      	ldr	r3, [pc, #688]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003a98:	4baa      	ldr	r3, [pc, #680]	; (8003d44 <voltage_monitor_init+0x314>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a9e:	4ba9      	ldr	r3, [pc, #676]	; (8003d44 <voltage_monitor_init+0x314>)
 8003aa0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003aa4:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003aa6:	4ba7      	ldr	r3, [pc, #668]	; (8003d44 <voltage_monitor_init+0x314>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003aac:	4ba5      	ldr	r3, [pc, #660]	; (8003d44 <voltage_monitor_init+0x314>)
 8003aae:	2203      	movs	r2, #3
 8003ab0:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003ab2:	4ba4      	ldr	r3, [pc, #656]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003ab8:	4ba2      	ldr	r3, [pc, #648]	; (8003d44 <voltage_monitor_init+0x314>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003ac0:	4ba0      	ldr	r3, [pc, #640]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ac6:	4b9f      	ldr	r3, [pc, #636]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ac8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003acc:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003ace:	4b9d      	ldr	r3, [pc, #628]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003ad4:	4b9b      	ldr	r3, [pc, #620]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003adc:	4b99      	ldr	r3, [pc, #612]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003ae4:	4b97      	ldr	r3, [pc, #604]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003aec:	4b95      	ldr	r3, [pc, #596]	; (8003d44 <voltage_monitor_init+0x314>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003af2:	4b94      	ldr	r3, [pc, #592]	; (8003d44 <voltage_monitor_init+0x314>)
 8003af4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003af8:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003afa:	4b92      	ldr	r3, [pc, #584]	; (8003d44 <voltage_monitor_init+0x314>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003b00:	4b90      	ldr	r3, [pc, #576]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b02:	2205      	movs	r2, #5
 8003b04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003b08:	4b8e      	ldr	r3, [pc, #568]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003b10:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003b18:	4b8a      	ldr	r3, [pc, #552]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b1e:	4b89      	ldr	r3, [pc, #548]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b20:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b24:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003b26:	4b87      	ldr	r3, [pc, #540]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003b2c:	4b85      	ldr	r3, [pc, #532]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b2e:	2206      	movs	r2, #6
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003b34:	4b83      	ldr	r3, [pc, #524]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003b3c:	4b81      	ldr	r3, [pc, #516]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003b44:	4b7f      	ldr	r3, [pc, #508]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b4c:	4b7d      	ldr	r3, [pc, #500]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b52:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003b56:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003b5e:	4b79      	ldr	r3, [pc, #484]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003b66:	4b77      	ldr	r3, [pc, #476]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003b6e:	4b75      	ldr	r3, [pc, #468]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003b76:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b7e:	4b71      	ldr	r3, [pc, #452]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b80:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003b88:	4b6e      	ldr	r3, [pc, #440]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003b90:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b92:	2208      	movs	r2, #8
 8003b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003b98:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <voltage_monitor_init+0x314>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003ba8:	4b66      	ldr	r3, [pc, #408]	; (8003d44 <voltage_monitor_init+0x314>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003bb0:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bb2:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003bb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003bba:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bbc:	f640 3283 	movw	r2, #2947	; 0xb83
 8003bc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003bc4:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bc6:	2209      	movs	r2, #9
 8003bc8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003bcc:	4b5d      	ldr	r3, [pc, #372]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003bd4:	4b5b      	ldr	r3, [pc, #364]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003be4:	4b57      	ldr	r3, [pc, #348]	; (8003d44 <voltage_monitor_init+0x314>)
 8003be6:	f640 7245 	movw	r2, #3909	; 0xf45
 8003bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003bee:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <voltage_monitor_init+0x314>)
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003bfe:	4b51      	ldr	r3, [pc, #324]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003c06:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003c0e:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003c16:	4b4b      	ldr	r3, [pc, #300]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c18:	f640 7245 	movw	r2, #3909	; 0xf45
 8003c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003c20:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c22:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003c26:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003c2a:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c2c:	220b      	movs	r2, #11
 8003c2e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003c32:	4b44      	ldr	r3, [pc, #272]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003c3a:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003c42:	4b40      	ldr	r3, [pc, #256]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003c4a:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c4c:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003c50:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003c54:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c56:	f640 6276 	movw	r2, #3702	; 0xe76
 8003c5a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c60:	220c      	movs	r2, #12
 8003c62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003c76:	4b33      	ldr	r3, [pc, #204]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c80:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003c84:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003c88:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003c90:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c92:	220d      	movs	r2, #13
 8003c94:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <voltage_monitor_init+0x314>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003ca0:	4b28      	ldr	r3, [pc, #160]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003ca8:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <voltage_monitor_init+0x314>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cb2:	f640 7238 	movw	r2, #3896	; 0xf38
 8003cb6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cbc:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003cc0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cc6:	220e      	movs	r2, #14
 8003cc8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <voltage_monitor_init+0x314>)
 8003ce6:	f640 7245 	movw	r2, #3909	; 0xf45
 8003cea:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cf0:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003cf4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <voltage_monitor_init+0x314>)
 8003cfa:	220f      	movs	r2, #15
 8003cfc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d1a:	f241 0264 	movw	r2, #4196	; 0x1064
 8003d1e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003d32:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003d3a:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <voltage_monitor_init+0x314>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003d42:	e001      	b.n	8003d48 <voltage_monitor_init+0x318>
 8003d44:	24001df8 	.word	0x24001df8
	rail_monitor[RAIL_n800v].data = 0;
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d52:	f640 5208 	movw	r2, #3336	; 0xd08
 8003d56:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d5c:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003d60:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d66:	2211      	movs	r2, #17
 8003d68:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d86:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d8a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <voltage_monitor_init+0x378>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	71fb      	strb	r3, [r7, #7]

	return status;
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	24001df8 	.word	0x24001df8

08003dac <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	460a      	mov	r2, r1
 8003db6:	71fb      	strb	r3, [r7, #7]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003dc0:	79fa      	ldrb	r2, [r7, #7]
 8003dc2:	4909      	ldr	r1, [pc, #36]	; (8003de8 <set_rail_monitor_enable+0x3c>)
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	440b      	add	r3, r1
 8003dce:	3302      	adds	r3, #2
 8003dd0:	79ba      	ldrb	r2, [r7, #6]
 8003dd2:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]

	return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	24001df8 	.word	0x24001df8

08003dec <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003df0:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <get_rail_monitor+0x10>)
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	24001df8 	.word	0x24001df8

08003e00 <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fd20 	bl	8002854 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003e14:	f107 0310 	add.w	r3, r7, #16
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fd4b 	bl	80028b4 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fd98 	bl	8002958 <sample_hk_adc3>
 8003e28:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e2c:	809a      	strh	r2, [r3, #4]
 8003e2e:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e32:	81da      	strh	r2, [r3, #14]
 8003e34:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8003e36:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e38:	831a      	strh	r2, [r3, #24]
 8003e3a:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8003e3c:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e3e:	845a      	strh	r2, [r3, #34]	; 0x22
 8003e40:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e44:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003e46:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e4c:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003e54:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003e5c:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8003e5e:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003e64:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8003e6c:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8003e74:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e78:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8003e7c:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e80:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8003e84:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e88:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003e8c:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e90:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8003e94:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8003e96:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003e98:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8003e9c:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003ea0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003ea4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <set_rail_monitor+0xc0>)
 8003ea8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8003eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3728      	adds	r7, #40	; 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	24001df8 	.word	0x24001df8

08003ec4 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	db05      	blt.n	8003ee6 <in_range+0x22>
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	dc01      	bgt.n	8003ee6 <in_range+0x22>
		return 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <in_range+0x24>
	}
	return 0;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ef8:	f7ff f982 	bl	8003200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003efc:	480c      	ldr	r0, [pc, #48]	; (8003f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003efe:	490d      	ldr	r1, [pc, #52]	; (8003f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f00:	4a0d      	ldr	r2, [pc, #52]	; (8003f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f04:	e002      	b.n	8003f0c <LoopCopyDataInit>

08003f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f0a:	3304      	adds	r3, #4

08003f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f10:	d3f9      	bcc.n	8003f06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f14:	4c0a      	ldr	r4, [pc, #40]	; (8003f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f18:	e001      	b.n	8003f1e <LoopFillZerobss>

08003f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f1c:	3204      	adds	r2, #4

08003f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f20:	d3fb      	bcc.n	8003f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f22:	f012 fa69 	bl	80163f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f26:	f7fd ff79 	bl	8001e1c <main>
  bx  lr
 8003f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f34:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 8003f38:	08017328 	.word	0x08017328
  ldr r2, =_sbss
 8003f3c:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8003f40:	24006810 	.word	0x24006810

08003f44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f44:	e7fe      	b.n	8003f44 <ADC3_IRQHandler>
	...

08003f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f4e:	2003      	movs	r0, #3
 8003f50:	f001 fd39 	bl	80059c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f54:	f006 fe2c 	bl	800abb0 <HAL_RCC_GetSysClockFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_Init+0x68>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	4913      	ldr	r1, [pc, #76]	; (8003fb4 <HAL_Init+0x6c>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <HAL_Init+0x68>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_Init+0x6c>)
 8003f7c:	5cd3      	ldrb	r3, [r2, r3]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
 8003f88:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <HAL_Init+0x70>)
 8003f8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <HAL_Init+0x74>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f92:	2005      	movs	r0, #5
 8003f94:	f7fe ff46 	bl	8002e24 <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e002      	b.n	8003fa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fa2:	f7fe ff21 	bl	8002de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	08017274 	.word	0x08017274
 8003fb8:	24000088 	.word	0x24000088
 8003fbc:	24000084 	.word	0x24000084

08003fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_IncTick+0x20>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	24000090 	.word	0x24000090
 8003fe4:	24001eac 	.word	0x24001eac

08003fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return uwTick;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_GetTick+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	24001eac 	.word	0x24001eac

08004000 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_GetREVID+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0c1b      	lsrs	r3, r3, #16
}
 800400a:	4618      	mov	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	5c001000 	.word	0x5c001000

08004018 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	4904      	ldr	r1, [pc, #16]	; (8004040 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	58000400 	.word	0x58000400

08004044 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3360      	adds	r3, #96	; 0x60
 80040be:	461a      	mov	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	430b      	orrs	r3, r1
 80040da:	431a      	orrs	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	611a      	str	r2, [r3, #16]
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800411e:	b480      	push	{r7}
 8004120:	b087      	sub	sp, #28
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3360      	adds	r3, #96	; 0x60
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	431a      	orrs	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	601a      	str	r2, [r3, #0]
  }
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800417a:	b480      	push	{r7}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3330      	adds	r3, #48	; 0x30
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	4413      	add	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	211f      	movs	r1, #31
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	401a      	ands	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	f003 011f 	and.w	r1, r3, #31
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	431a      	orrs	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f023 0203 	bic.w	r2, r3, #3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3314      	adds	r3, #20
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	0e5b      	lsrs	r3, r3, #25
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	4413      	add	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0d1b      	lsrs	r3, r3, #20
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2107      	movs	r1, #7
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	401a      	ands	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	0d1b      	lsrs	r3, r3, #20
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	431a      	orrs	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004268:	43db      	mvns	r3, r3
 800426a:	401a      	ands	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0318 	and.w	r3, r3, #24
 8004272:	4908      	ldr	r1, [pc, #32]	; (8004294 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004274:	40d9      	lsrs	r1, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	400b      	ands	r3, r1
 800427a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800427e:	431a      	orrs	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	000fffff 	.word	0x000fffff

08004298 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 031f 	and.w	r3, r3, #31
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6093      	str	r3, [r2, #8]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	5fffffc0 	.word	0x5fffffc0

080042d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ec:	d101      	bne.n	80042f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <LL_ADC_EnableInternalRegulator+0x24>)
 800430e:	4013      	ands	r3, r2
 8004310:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	6fffffc0 	.word	0x6fffffc0

08004328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800433c:	d101      	bne.n	8004342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <LL_ADC_Enable+0x24>)
 800435e:	4013      	ands	r3, r2
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	7fffffc0 	.word	0x7fffffc0

08004378 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <LL_ADC_Disable+0x24>)
 8004386:	4013      	ands	r3, r2
 8004388:	f043 0202 	orr.w	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	7fffffc0 	.word	0x7fffffc0

080043a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <LL_ADC_IsEnabled+0x18>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <LL_ADC_IsEnabled+0x1a>
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d101      	bne.n	80043de <LL_ADC_IsDisableOngoing+0x18>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <LL_ADC_IsDisableOngoing+0x1a>
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <LL_ADC_REG_StartConversion+0x24>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	7fffffc0 	.word	0x7fffffc0

08004414 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b04      	cmp	r3, #4
 8004426:	d101      	bne.n	800442c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b08      	cmp	r3, #8
 800444c:	d101      	bne.n	8004452 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e18f      	b.n	800479a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fc fa5f 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff19 	bl	80042d8 <LL_ADC_IsDeepPowerDownEnabled>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff feff 	bl	80042b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff34 	bl	8004328 <LL_ADC_IsInternalRegulatorEnabled>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d114      	bne.n	80044f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff18 	bl	8004300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044d0:	4b87      	ldr	r3, [pc, #540]	; (80046f0 <HAL_ADC_Init+0x290>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	4a87      	ldr	r2, [pc, #540]	; (80046f4 <HAL_ADC_Init+0x294>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	099b      	lsrs	r3, r3, #6
 80044de:	3301      	adds	r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044e2:	e002      	b.n	80044ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f9      	bne.n	80044e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff17 	bl	8004328 <LL_ADC_IsInternalRegulatorEnabled>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10d      	bne.n	800451c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f043 0210 	orr.w	r2, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	f043 0201 	orr.w	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ff77 	bl	8004414 <LL_ADC_REG_IsConversionOngoing>
 8004526:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	f040 8129 	bne.w	8004788 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8125 	bne.w	8004788 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004546:	f043 0202 	orr.w	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ff24 	bl	80043a0 <LL_ADC_IsEnabled>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d136      	bne.n	80045cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a65      	ldr	r2, [pc, #404]	; (80046f8 <HAL_ADC_Init+0x298>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_ADC_Init+0x112>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a63      	ldr	r2, [pc, #396]	; (80046fc <HAL_ADC_Init+0x29c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10e      	bne.n	8004590 <HAL_ADC_Init+0x130>
 8004572:	4861      	ldr	r0, [pc, #388]	; (80046f8 <HAL_ADC_Init+0x298>)
 8004574:	f7ff ff14 	bl	80043a0 <LL_ADC_IsEnabled>
 8004578:	4604      	mov	r4, r0
 800457a:	4860      	ldr	r0, [pc, #384]	; (80046fc <HAL_ADC_Init+0x29c>)
 800457c:	f7ff ff10 	bl	80043a0 <LL_ADC_IsEnabled>
 8004580:	4603      	mov	r3, r0
 8004582:	4323      	orrs	r3, r4
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e008      	b.n	80045a2 <HAL_ADC_Init+0x142>
 8004590:	485b      	ldr	r0, [pc, #364]	; (8004700 <HAL_ADC_Init+0x2a0>)
 8004592:	f7ff ff05 	bl	80043a0 <LL_ADC_IsEnabled>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d012      	beq.n	80045cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a53      	ldr	r2, [pc, #332]	; (80046f8 <HAL_ADC_Init+0x298>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_ADC_Init+0x15a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a51      	ldr	r2, [pc, #324]	; (80046fc <HAL_ADC_Init+0x29c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_ADC_Init+0x15e>
 80045ba:	4a52      	ldr	r2, [pc, #328]	; (8004704 <HAL_ADC_Init+0x2a4>)
 80045bc:	e000      	b.n	80045c0 <HAL_ADC_Init+0x160>
 80045be:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_ADC_Init+0x2a8>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7ff fd3c 	bl	8004044 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80045cc:	f7ff fd18 	bl	8004000 <HAL_GetREVID>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d914      	bls.n	8004604 <HAL_ADC_Init+0x1a4>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d110      	bne.n	8004604 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7d5b      	ldrb	r3, [r3, #21]
 80045e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80045f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7f1b      	ldrb	r3, [r3, #28]
 80045f8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80045fa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045fc:	f043 030c 	orr.w	r3, r3, #12
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e00d      	b.n	8004620 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7d5b      	ldrb	r3, [r3, #21]
 8004608:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800460e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004614:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7f1b      	ldrb	r3, [r3, #28]
 800461a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7f1b      	ldrb	r3, [r3, #28]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d106      	bne.n	8004636 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	3b01      	subs	r3, #1
 800462e:	045b      	lsls	r3, r3, #17
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	4b2c      	ldr	r3, [pc, #176]	; (800470c <HAL_ADC_Init+0x2ac>)
 800465a:	4013      	ands	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	69b9      	ldr	r1, [r7, #24]
 8004662:	430b      	orrs	r3, r1
 8004664:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fed2 	bl	8004414 <LL_ADC_REG_IsConversionOngoing>
 8004670:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fedf 	bl	800443a <LL_ADC_INJ_IsConversionOngoing>
 800467c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d15f      	bne.n	8004744 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d15c      	bne.n	8004744 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	7d1b      	ldrb	r3, [r3, #20]
 800468e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <HAL_ADC_Init+0x2b0>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	69b9      	ldr	r1, [r7, #24]
 80046a8:	430b      	orrs	r3, r1
 80046aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d130      	bne.n	8004718 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <HAL_ADC_Init+0x2b4>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046ca:	3a01      	subs	r2, #1
 80046cc:	0411      	lsls	r1, r2, #16
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046de:	430a      	orrs	r2, r1
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	611a      	str	r2, [r3, #16]
 80046ec:	e01c      	b.n	8004728 <HAL_ADC_Init+0x2c8>
 80046ee:	bf00      	nop
 80046f0:	24000084 	.word	0x24000084
 80046f4:	053e2d63 	.word	0x053e2d63
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40022100 	.word	0x40022100
 8004700:	58026000 	.word	0x58026000
 8004704:	40022300 	.word	0x40022300
 8004708:	58026300 	.word	0x58026300
 800470c:	fff0c003 	.word	0xfff0c003
 8004710:	ffffbffc 	.word	0xffffbffc
 8004714:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fdec 	bl	800531c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d10c      	bne.n	8004766 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f023 010f 	bic.w	r1, r3, #15
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	1e5a      	subs	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
 8004764:	e007      	b.n	8004776 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 020f 	bic.w	r2, r2, #15
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	f043 0201 	orr.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
 8004786:	e007      	b.n	8004798 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f043 0210 	orr.w	r2, r3, #16
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004798:	7ffb      	ldrb	r3, [r7, #31]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3724      	adds	r7, #36	; 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd90      	pop	{r4, r7, pc}
 80047a2:	bf00      	nop

080047a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a55      	ldr	r2, [pc, #340]	; (800490c <HAL_ADC_Start_DMA+0x168>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_ADC_Start_DMA+0x20>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a54      	ldr	r2, [pc, #336]	; (8004910 <HAL_ADC_Start_DMA+0x16c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_Start_DMA+0x24>
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_ADC_Start_DMA+0x170>)
 80047c6:	e000      	b.n	80047ca <HAL_ADC_Start_DMA+0x26>
 80047c8:	4b53      	ldr	r3, [pc, #332]	; (8004918 <HAL_ADC_Start_DMA+0x174>)
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fd64 	bl	8004298 <LL_ADC_GetMultimode>
 80047d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fe1c 	bl	8004414 <LL_ADC_REG_IsConversionOngoing>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 808c 	bne.w	80048fc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_Start_DMA+0x4e>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e087      	b.n	8004902 <HAL_ADC_Start_DMA+0x15e>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d002      	beq.n	800480c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b09      	cmp	r3, #9
 800480a:	d170      	bne.n	80048ee <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fc07 	bl	8005020 <ADC_Enable>
 8004812:	4603      	mov	r3, r0
 8004814:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004816:	7dfb      	ldrb	r3, [r7, #23]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d163      	bne.n	80048e4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <HAL_ADC_Start_DMA+0x178>)
 8004822:	4013      	ands	r3, r2
 8004824:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a37      	ldr	r2, [pc, #220]	; (8004910 <HAL_ADC_Start_DMA+0x16c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d002      	beq.n	800483c <HAL_ADC_Start_DMA+0x98>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	e000      	b.n	800483e <HAL_ADC_Start_DMA+0x9a>
 800483c:	4b33      	ldr	r3, [pc, #204]	; (800490c <HAL_ADC_Start_DMA+0x168>)
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	4293      	cmp	r3, r2
 8004844:	d002      	beq.n	800484c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d105      	bne.n	8004858 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d006      	beq.n	8004872 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f023 0206 	bic.w	r2, r3, #6
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	659a      	str	r2, [r3, #88]	; 0x58
 8004870:	e002      	b.n	8004878 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487c:	4a28      	ldr	r2, [pc, #160]	; (8004920 <HAL_ADC_Start_DMA+0x17c>)
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004884:	4a27      	ldr	r2, [pc, #156]	; (8004924 <HAL_ADC_Start_DMA+0x180>)
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <HAL_ADC_Start_DMA+0x184>)
 800488e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	221c      	movs	r2, #28
 8004896:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0210 	orr.w	r2, r2, #16
 80048ae:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f7ff fc89 	bl	80041d2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3340      	adds	r3, #64	; 0x40
 80048ca:	4619      	mov	r1, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f002 f80e 	bl	80068f0 <HAL_DMA_Start_IT>
 80048d4:	4603      	mov	r3, r0
 80048d6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fd85 	bl	80043ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80048e2:	e00d      	b.n	8004900 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80048ec:	e008      	b.n	8004900 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80048fa:	e001      	b.n	8004900 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
 80048fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004900:	7dfb      	ldrb	r3, [r7, #23]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40022000 	.word	0x40022000
 8004910:	40022100 	.word	0x40022100
 8004914:	40022300 	.word	0x40022300
 8004918:	58026300 	.word	0x58026300
 800491c:	fffff0fe 	.word	0xfffff0fe
 8004920:	080051f3 	.word	0x080051f3
 8004924:	080052cb 	.word	0x080052cb
 8004928:	080052e7 	.word	0x080052e7

0800492c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b0a1      	sub	sp, #132	; 0x84
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a65      	ldr	r2, [pc, #404]	; (8004b18 <HAL_ADC_ConfigChannel+0x1b0>)
 8004982:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x2a>
 800498e:	2302      	movs	r3, #2
 8004990:	e32e      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x688>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fd38 	bl	8004414 <LL_ADC_REG_IsConversionOngoing>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 8313 	bne.w	8004fd2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	db2c      	blt.n	8004a0e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d108      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x6a>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	0e9b      	lsrs	r3, r3, #26
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2201      	movs	r2, #1
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	e016      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x98>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80049ea:	2320      	movs	r3, #32
 80049ec:	e003      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80049ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2201      	movs	r2, #1
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	69d1      	ldr	r1, [r2, #28]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f7ff fbad 	bl	800417a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fcf5 	bl	8004414 <LL_ADC_REG_IsConversionOngoing>
 8004a2a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fd02 	bl	800443a <LL_ADC_INJ_IsConversionOngoing>
 8004a36:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 80b8 	bne.w	8004bb0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 80b4 	bne.w	8004bb0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6819      	ldr	r1, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f7ff fbcf 	bl	80041f8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a5a:	4b30      	ldr	r3, [pc, #192]	; (8004b1c <HAL_ADC_ConfigChannel+0x1b4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a66:	d10b      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x118>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	e01d      	b.n	8004abc <HAL_ADC_ConfigChannel+0x154>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x13e>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	e00a      	b.n	8004abc <HAL_ADC_ConfigChannel+0x154>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d02c      	beq.n	8004b20 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6919      	ldr	r1, [r3, #16]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad4:	f7ff faea 	bl	80040ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6919      	ldr	r1, [r3, #16]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	7e5b      	ldrb	r3, [r3, #25]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d102      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x186>
 8004ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004aec:	e000      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x188>
 8004aee:	2300      	movs	r3, #0
 8004af0:	461a      	mov	r2, r3
 8004af2:	f7ff fb14 	bl	800411e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6919      	ldr	r1, [r3, #16]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	7e1b      	ldrb	r3, [r3, #24]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d102      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x1a4>
 8004b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b0a:	e000      	b.n	8004b0e <HAL_ADC_ConfigChannel+0x1a6>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f7ff faec 	bl	80040ec <LL_ADC_SetDataRightShift>
 8004b14:	e04c      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x248>
 8004b16:	bf00      	nop
 8004b18:	47ff0000 	.word	0x47ff0000
 8004b1c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	069b      	lsls	r3, r3, #26
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d107      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b42:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	069b      	lsls	r3, r3, #26
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b66:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	069b      	lsls	r3, r3, #26
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d107      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b8a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	069b      	lsls	r3, r3, #26
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d107      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fbf3 	bl	80043a0 <LL_ADC_IsEnabled>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 8211 	bne.w	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f7ff fb3e 	bl	8004250 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4aa1      	ldr	r2, [pc, #644]	; (8004e60 <HAL_ADC_ConfigChannel+0x4f8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	f040 812e 	bne.w	8004e3c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10b      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x2a0>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0e9b      	lsrs	r3, r3, #26
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	bf94      	ite	ls
 8004c00:	2301      	movls	r3, #1
 8004c02:	2300      	movhi	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e019      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x2d4>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c18:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004c20:	2320      	movs	r3, #32
 8004c22:	e003      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c26:	fab3 f383 	clz	r3, r3
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	bf94      	ite	ls
 8004c36:	2301      	movls	r3, #1
 8004c38:	2300      	movhi	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d079      	beq.n	8004d34 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x2f4>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0e9b      	lsrs	r3, r3, #26
 8004c52:	3301      	adds	r3, #1
 8004c54:	069b      	lsls	r3, r3, #26
 8004c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c5a:	e015      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x320>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c64:	fa93 f3a3 	rbit	r3, r3
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004c74:	2320      	movs	r3, #32
 8004c76:	e003      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	069b      	lsls	r3, r3, #26
 8004c84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x340>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0e9b      	lsrs	r3, r3, #26
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca6:	e017      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x370>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	e003      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	ea42 0103 	orr.w	r1, r2, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x396>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	0e9b      	lsrs	r3, r3, #26
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f003 021f 	and.w	r2, r3, #31
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	051b      	lsls	r3, r3, #20
 8004cfc:	e018      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x3c8>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004d16:	2320      	movs	r3, #32
 8004d18:	e003      	b.n	8004d22 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	f003 021f 	and.w	r2, r3, #31
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d30:	430b      	orrs	r3, r1
 8004d32:	e07e      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x3e8>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0e9b      	lsrs	r3, r3, #26
 8004d46:	3301      	adds	r3, #1
 8004d48:	069b      	lsls	r3, r3, #26
 8004d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d4e:	e015      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x414>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004d68:	2320      	movs	r3, #32
 8004d6a:	e003      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	fab3 f383 	clz	r3, r3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	3301      	adds	r3, #1
 8004d76:	069b      	lsls	r3, r3, #26
 8004d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x434>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0e9b      	lsrs	r3, r3, #26
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2101      	movs	r1, #1
 8004d96:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9a:	e017      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x464>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	61bb      	str	r3, [r7, #24]
  return result;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004db4:	2320      	movs	r3, #32
 8004db6:	e003      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	ea42 0103 	orr.w	r1, r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10d      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x490>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0e9b      	lsrs	r3, r3, #26
 8004de2:	3301      	adds	r3, #1
 8004de4:	f003 021f 	and.w	r2, r3, #31
 8004de8:	4613      	mov	r3, r2
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4413      	add	r3, r2
 8004dee:	3b1e      	subs	r3, #30
 8004df0:	051b      	lsls	r3, r3, #20
 8004df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004df6:	e01b      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x4c8>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	fa93 f3a3 	rbit	r3, r3
 8004e04:	60fb      	str	r3, [r7, #12]
  return result;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004e10:	2320      	movs	r3, #32
 8004e12:	e003      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f003 021f 	and.w	r2, r3, #31
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	3b1e      	subs	r3, #30
 8004e2a:	051b      	lsls	r3, r3, #20
 8004e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e30:	430b      	orrs	r3, r1
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	6892      	ldr	r2, [r2, #8]
 8004e36:	4619      	mov	r1, r3
 8004e38:	f7ff f9de 	bl	80041f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f280 80cf 	bge.w	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a06      	ldr	r2, [pc, #24]	; (8004e64 <HAL_ADC_ConfigChannel+0x4fc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_ADC_ConfigChannel+0x4f2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <HAL_ADC_ConfigChannel+0x500>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10a      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x508>
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <HAL_ADC_ConfigChannel+0x504>)
 8004e5c:	e009      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x50a>
 8004e5e:	bf00      	nop
 8004e60:	47ff0000 	.word	0x47ff0000
 8004e64:	40022000 	.word	0x40022000
 8004e68:	40022100 	.word	0x40022100
 8004e6c:	40022300 	.word	0x40022300
 8004e70:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_ADC_ConfigChannel+0x690>)
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff f90c 	bl	8004090 <LL_ADC_GetCommonPathInternalCh>
 8004e78:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5f      	ldr	r2, [pc, #380]	; (8004ffc <HAL_ADC_ConfigChannel+0x694>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_ADC_ConfigChannel+0x526>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <HAL_ADC_ConfigChannel+0x698>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10e      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x544>
 8004e8e:	485b      	ldr	r0, [pc, #364]	; (8004ffc <HAL_ADC_ConfigChannel+0x694>)
 8004e90:	f7ff fa86 	bl	80043a0 <LL_ADC_IsEnabled>
 8004e94:	4604      	mov	r4, r0
 8004e96:	485a      	ldr	r0, [pc, #360]	; (8005000 <HAL_ADC_ConfigChannel+0x698>)
 8004e98:	f7ff fa82 	bl	80043a0 <LL_ADC_IsEnabled>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4323      	orrs	r3, r4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	e008      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x556>
 8004eac:	4855      	ldr	r0, [pc, #340]	; (8005004 <HAL_ADC_ConfigChannel+0x69c>)
 8004eae:	f7ff fa77 	bl	80043a0 <LL_ADC_IsEnabled>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d07d      	beq.n	8004fbe <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a50      	ldr	r2, [pc, #320]	; (8005008 <HAL_ADC_ConfigChannel+0x6a0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d130      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x5c6>
 8004ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d12b      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a4a      	ldr	r2, [pc, #296]	; (8005004 <HAL_ADC_ConfigChannel+0x69c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	f040 8081 	bne.w	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a45      	ldr	r2, [pc, #276]	; (8004ffc <HAL_ADC_ConfigChannel+0x694>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <HAL_ADC_ConfigChannel+0x58e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a43      	ldr	r2, [pc, #268]	; (8005000 <HAL_ADC_ConfigChannel+0x698>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <HAL_ADC_ConfigChannel+0x592>
 8004ef6:	4a45      	ldr	r2, [pc, #276]	; (800500c <HAL_ADC_ConfigChannel+0x6a4>)
 8004ef8:	e000      	b.n	8004efc <HAL_ADC_ConfigChannel+0x594>
 8004efa:	4a3f      	ldr	r2, [pc, #252]	; (8004ff8 <HAL_ADC_ConfigChannel+0x690>)
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f7ff f8b0 	bl	800406a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f0a:	4b41      	ldr	r3, [pc, #260]	; (8005010 <HAL_ADC_ConfigChannel+0x6a8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	099b      	lsrs	r3, r3, #6
 8004f10:	4a40      	ldr	r2, [pc, #256]	; (8005014 <HAL_ADC_ConfigChannel+0x6ac>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	3301      	adds	r3, #1
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f1e:	e002      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f9      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f2c:	e05a      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a39      	ldr	r2, [pc, #228]	; (8005018 <HAL_ADC_ConfigChannel+0x6b0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d11e      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x60e>
 8004f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <HAL_ADC_ConfigChannel+0x69c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d14b      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <HAL_ADC_ConfigChannel+0x694>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_ADC_ConfigChannel+0x5f8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a29      	ldr	r2, [pc, #164]	; (8005000 <HAL_ADC_ConfigChannel+0x698>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x5fc>
 8004f60:	4a2a      	ldr	r2, [pc, #168]	; (800500c <HAL_ADC_ConfigChannel+0x6a4>)
 8004f62:	e000      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x5fe>
 8004f64:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <HAL_ADC_ConfigChannel+0x690>)
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7ff f87b 	bl	800406a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f74:	e036      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a28      	ldr	r2, [pc, #160]	; (800501c <HAL_ADC_ConfigChannel+0x6b4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d131      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
 8004f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d12c      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_ADC_ConfigChannel+0x69c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d127      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_ADC_ConfigChannel+0x694>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_ADC_ConfigChannel+0x640>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	; (8005000 <HAL_ADC_ConfigChannel+0x698>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x644>
 8004fa8:	4a18      	ldr	r2, [pc, #96]	; (800500c <HAL_ADC_ConfigChannel+0x6a4>)
 8004faa:	e000      	b.n	8004fae <HAL_ADC_ConfigChannel+0x646>
 8004fac:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_ADC_ConfigChannel+0x690>)
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f7ff f857 	bl	800406a <LL_ADC_SetCommonPathInternalCh>
 8004fbc:	e012      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004fd0:	e008      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004fec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3784      	adds	r7, #132	; 0x84
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd90      	pop	{r4, r7, pc}
 8004ff8:	58026300 	.word	0x58026300
 8004ffc:	40022000 	.word	0x40022000
 8005000:	40022100 	.word	0x40022100
 8005004:	58026000 	.word	0x58026000
 8005008:	cb840000 	.word	0xcb840000
 800500c:	40022300 	.word	0x40022300
 8005010:	24000084 	.word	0x24000084
 8005014:	053e2d63 	.word	0x053e2d63
 8005018:	c7520000 	.word	0xc7520000
 800501c:	cfb80000 	.word	0xcfb80000

08005020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff f9b7 	bl	80043a0 <LL_ADC_IsEnabled>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d16e      	bne.n	8005116 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <ADC_Enable+0x100>)
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	f043 0210 	orr.w	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e05a      	b.n	8005118 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff f972 	bl	8004350 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800506c:	f7fe ffbc 	bl	8003fe8 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a2b      	ldr	r2, [pc, #172]	; (8005124 <ADC_Enable+0x104>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <ADC_Enable+0x66>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a29      	ldr	r2, [pc, #164]	; (8005128 <ADC_Enable+0x108>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d101      	bne.n	800508a <ADC_Enable+0x6a>
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <ADC_Enable+0x10c>)
 8005088:	e000      	b.n	800508c <ADC_Enable+0x6c>
 800508a:	4b29      	ldr	r3, [pc, #164]	; (8005130 <ADC_Enable+0x110>)
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff f903 	bl	8004298 <LL_ADC_GetMultimode>
 8005092:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a23      	ldr	r2, [pc, #140]	; (8005128 <ADC_Enable+0x108>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d002      	beq.n	80050a4 <ADC_Enable+0x84>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	e000      	b.n	80050a6 <ADC_Enable+0x86>
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <ADC_Enable+0x104>)
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d02c      	beq.n	8005108 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d130      	bne.n	8005116 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050b4:	e028      	b.n	8005108 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff f970 	bl	80043a0 <LL_ADC_IsEnabled>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff f940 	bl	8004350 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050d0:	f7fe ff8a 	bl	8003fe8 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d914      	bls.n	8005108 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d00d      	beq.n	8005108 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	f043 0210 	orr.w	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e007      	b.n	8005118 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d1cf      	bne.n	80050b6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	8000003f 	.word	0x8000003f
 8005124:	40022000 	.word	0x40022000
 8005128:	40022100 	.word	0x40022100
 800512c:	40022300 	.word	0x40022300
 8005130:	58026300 	.word	0x58026300

08005134 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff f940 	bl	80043c6 <LL_ADC_IsDisableOngoing>
 8005146:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff f927 	bl	80043a0 <LL_ADC_IsEnabled>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d047      	beq.n	80051e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d144      	bne.n	80051e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030d 	and.w	r3, r3, #13
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10c      	bne.n	8005186 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f901 	bl	8004378 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2203      	movs	r2, #3
 800517c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800517e:	f7fe ff33 	bl	8003fe8 <HAL_GetTick>
 8005182:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005184:	e029      	b.n	80051da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f043 0210 	orr.w	r2, r3, #16
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	f043 0201 	orr.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e023      	b.n	80051ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051a2:	f7fe ff21 	bl	8003fe8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d914      	bls.n	80051da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f043 0210 	orr.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e007      	b.n	80051ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1dc      	bne.n	80051a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005208:	2b00      	cmp	r3, #0
 800520a:	d14b      	bne.n	80052a4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005210:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d021      	beq.n	800526a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe ff92 	bl	8004154 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d032      	beq.n	800529c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d12b      	bne.n	800529c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d11f      	bne.n	800529c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
 8005268:	e018      	b.n	800529c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d111      	bne.n	800529c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff fb45 	bl	800492c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052a2:	e00e      	b.n	80052c2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff fb4f 	bl	8004954 <HAL_ADC_ErrorCallback>
}
 80052b6:	e004      	b.n	80052c2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff fb31 	bl	8004940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	f043 0204 	orr.w	r2, r3, #4
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff fb21 	bl	8004954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a7a      	ldr	r2, [pc, #488]	; (8005514 <ADC_ConfigureBoostMode+0x1f8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <ADC_ConfigureBoostMode+0x1c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a79      	ldr	r2, [pc, #484]	; (8005518 <ADC_ConfigureBoostMode+0x1fc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d109      	bne.n	800534c <ADC_ConfigureBoostMode+0x30>
 8005338:	4b78      	ldr	r3, [pc, #480]	; (800551c <ADC_ConfigureBoostMode+0x200>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005340:	2b00      	cmp	r3, #0
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e008      	b.n	800535e <ADC_ConfigureBoostMode+0x42>
 800534c:	4b74      	ldr	r3, [pc, #464]	; (8005520 <ADC_ConfigureBoostMode+0x204>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01c      	beq.n	800539c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005362:	f005 fd9f 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 8005366:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005370:	d010      	beq.n	8005394 <ADC_ConfigureBoostMode+0x78>
 8005372:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005376:	d873      	bhi.n	8005460 <ADC_ConfigureBoostMode+0x144>
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537c:	d002      	beq.n	8005384 <ADC_ConfigureBoostMode+0x68>
 800537e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005382:	d16d      	bne.n	8005460 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	60fb      	str	r3, [r7, #12]
        break;
 8005392:	e068      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	089b      	lsrs	r3, r3, #2
 8005398:	60fb      	str	r3, [r7, #12]
        break;
 800539a:	e064      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800539c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	f007 f826 	bl	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80053a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80053b2:	d051      	beq.n	8005458 <ADC_ConfigureBoostMode+0x13c>
 80053b4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80053b8:	d854      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 80053ba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80053be:	d047      	beq.n	8005450 <ADC_ConfigureBoostMode+0x134>
 80053c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80053c4:	d84e      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 80053c6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80053ca:	d03d      	beq.n	8005448 <ADC_ConfigureBoostMode+0x12c>
 80053cc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80053d0:	d848      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 80053d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d6:	d033      	beq.n	8005440 <ADC_ConfigureBoostMode+0x124>
 80053d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053dc:	d842      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 80053de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80053e2:	d029      	beq.n	8005438 <ADC_ConfigureBoostMode+0x11c>
 80053e4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80053e8:	d83c      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 80053ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80053ee:	d01a      	beq.n	8005426 <ADC_ConfigureBoostMode+0x10a>
 80053f0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80053f4:	d836      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 80053f6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80053fa:	d014      	beq.n	8005426 <ADC_ConfigureBoostMode+0x10a>
 80053fc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005400:	d830      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 8005402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005406:	d00e      	beq.n	8005426 <ADC_ConfigureBoostMode+0x10a>
 8005408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540c:	d82a      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 800540e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005412:	d008      	beq.n	8005426 <ADC_ConfigureBoostMode+0x10a>
 8005414:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005418:	d824      	bhi.n	8005464 <ADC_ConfigureBoostMode+0x148>
 800541a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800541e:	d002      	beq.n	8005426 <ADC_ConfigureBoostMode+0x10a>
 8005420:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005424:	d11e      	bne.n	8005464 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	0c9b      	lsrs	r3, r3, #18
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	60fb      	str	r3, [r7, #12]
        break;
 8005436:	e016      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	60fb      	str	r3, [r7, #12]
        break;
 800543e:	e012      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	60fb      	str	r3, [r7, #12]
        break;
 8005446:	e00e      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	099b      	lsrs	r3, r3, #6
 800544c:	60fb      	str	r3, [r7, #12]
        break;
 800544e:	e00a      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	09db      	lsrs	r3, r3, #7
 8005454:	60fb      	str	r3, [r7, #12]
        break;
 8005456:	e006      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	60fb      	str	r3, [r7, #12]
        break;
 800545e:	e002      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005464:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005466:	f7fe fdcb 	bl	8004000 <HAL_GetREVID>
 800546a:	4603      	mov	r3, r0
 800546c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005470:	4293      	cmp	r3, r2
 8005472:	d815      	bhi.n	80054a0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a2b      	ldr	r2, [pc, #172]	; (8005524 <ADC_ConfigureBoostMode+0x208>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d908      	bls.n	800548e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800548c:	e03e      	b.n	800550c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800549c:	609a      	str	r2, [r3, #8]
}
 800549e:	e035      	b.n	800550c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <ADC_ConfigureBoostMode+0x20c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d808      	bhi.n	80054c0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054bc:	609a      	str	r2, [r3, #8]
}
 80054be:	e025      	b.n	800550c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a1a      	ldr	r2, [pc, #104]	; (800552c <ADC_ConfigureBoostMode+0x210>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d80a      	bhi.n	80054de <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	e016      	b.n	800550c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a13      	ldr	r2, [pc, #76]	; (8005530 <ADC_ConfigureBoostMode+0x214>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d80a      	bhi.n	80054fc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f8:	609a      	str	r2, [r3, #8]
}
 80054fa:	e007      	b.n	800550c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800550a:	609a      	str	r2, [r3, #8]
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40022000 	.word	0x40022000
 8005518:	40022100 	.word	0x40022100
 800551c:	40022300 	.word	0x40022300
 8005520:	58026300 	.word	0x58026300
 8005524:	01312d00 	.word	0x01312d00
 8005528:	005f5e10 	.word	0x005f5e10
 800552c:	00bebc20 	.word	0x00bebc20
 8005530:	017d7840 	.word	0x017d7840

08005534 <LL_ADC_IsEnabled>:
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <LL_ADC_IsEnabled+0x18>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <LL_ADC_IsEnabled+0x1a>
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <LL_ADC_StartCalibration>:
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <LL_ADC_StartCalibration+0x38>)
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800557c:	430a      	orrs	r2, r1
 800557e:	4313      	orrs	r3, r2
 8005580:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	609a      	str	r2, [r3, #8]
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	3ffeffc0 	.word	0x3ffeffc0

08005598 <LL_ADC_IsCalibrationOnGoing>:
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ac:	d101      	bne.n	80055b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_ADC_REG_IsConversionOngoing>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d101      	bne.n	80055d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_ADCEx_Calibration_Start+0x1e>
 8005602:	2302      	movs	r3, #2
 8005604:	e04c      	b.n	80056a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fd90 	bl	8005134 <ADC_Disable>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d135      	bne.n	800568a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005622:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005624:	4013      	ands	r3, r2
 8005626:	f043 0202 	orr.w	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff ff90 	bl	800555c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800563c:	e014      	b.n	8005668 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	3301      	adds	r3, #1
 8005642:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4a19      	ldr	r2, [pc, #100]	; (80056ac <HAL_ADCEx_Calibration_Start+0xc4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d30d      	bcc.n	8005668 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f023 0312 	bic.w	r3, r3, #18
 8005654:	f043 0210 	orr.w	r2, r3, #16
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e01b      	b.n	80056a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ff93 	bl	8005598 <LL_ADC_IsCalibrationOnGoing>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e2      	bne.n	800563e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567c:	f023 0303 	bic.w	r3, r3, #3
 8005680:	f043 0201 	orr.w	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
 8005688:	e005      	b.n	8005696 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	f043 0210 	orr.w	r2, r3, #16
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800569e:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	ffffeefd 	.word	0xffffeefd
 80056ac:	25c3f800 	.word	0x25c3f800

080056b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b09f      	sub	sp, #124	; 0x7c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e0be      	b.n	800584c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80056d6:	2300      	movs	r3, #0
 80056d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80056da:	2300      	movs	r3, #0
 80056dc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a5c      	ldr	r2, [pc, #368]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d102      	bne.n	80056ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80056e8:	4b5b      	ldr	r3, [pc, #364]	; (8005858 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	e001      	b.n	80056f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e09d      	b.n	800584c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff ff54 	bl	80055c0 <LL_ADC_REG_IsConversionOngoing>
 8005718:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff ff4e 	bl	80055c0 <LL_ADC_REG_IsConversionOngoing>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d17f      	bne.n	800582a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800572a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800572c:	2b00      	cmp	r3, #0
 800572e:	d17c      	bne.n	800582a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a47      	ldr	r2, [pc, #284]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a46      	ldr	r2, [pc, #280]	; (8005858 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d101      	bne.n	8005748 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005744:	4b45      	ldr	r3, [pc, #276]	; (800585c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005746:	e000      	b.n	800574a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005748:	4b45      	ldr	r3, [pc, #276]	; (8005860 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800574a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d039      	beq.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	431a      	orrs	r2, r3
 8005762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005764:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3a      	ldr	r2, [pc, #232]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a38      	ldr	r2, [pc, #224]	; (8005858 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d10e      	bne.n	8005798 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800577a:	4836      	ldr	r0, [pc, #216]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800577c:	f7ff feda 	bl	8005534 <LL_ADC_IsEnabled>
 8005780:	4604      	mov	r4, r0
 8005782:	4835      	ldr	r0, [pc, #212]	; (8005858 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005784:	f7ff fed6 	bl	8005534 <LL_ADC_IsEnabled>
 8005788:	4603      	mov	r3, r0
 800578a:	4323      	orrs	r3, r4
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	e008      	b.n	80057aa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005798:	4832      	ldr	r0, [pc, #200]	; (8005864 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800579a:	f7ff fecb 	bl	8005534 <LL_ADC_IsEnabled>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d047      	beq.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	4b2d      	ldr	r3, [pc, #180]	; (8005868 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	6811      	ldr	r1, [r2, #0]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	6892      	ldr	r2, [r2, #8]
 80057be:	430a      	orrs	r2, r1
 80057c0:	431a      	orrs	r2, r3
 80057c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c6:	e03a      	b.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80057c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10e      	bne.n	8005806 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80057e8:	481a      	ldr	r0, [pc, #104]	; (8005854 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057ea:	f7ff fea3 	bl	8005534 <LL_ADC_IsEnabled>
 80057ee:	4604      	mov	r4, r0
 80057f0:	4819      	ldr	r0, [pc, #100]	; (8005858 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057f2:	f7ff fe9f 	bl	8005534 <LL_ADC_IsEnabled>
 80057f6:	4603      	mov	r3, r0
 80057f8:	4323      	orrs	r3, r4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bf0c      	ite	eq
 80057fe:	2301      	moveq	r3, #1
 8005800:	2300      	movne	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	e008      	b.n	8005818 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005806:	4817      	ldr	r0, [pc, #92]	; (8005864 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005808:	f7ff fe94 	bl	8005534 <LL_ADC_IsEnabled>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	bf0c      	ite	eq
 8005812:	2301      	moveq	r3, #1
 8005814:	2300      	movne	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800581c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005822:	4013      	ands	r3, r2
 8005824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005826:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005828:	e009      	b.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800583c:	e000      	b.n	8005840 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800583e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005848:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800584c:	4618      	mov	r0, r3
 800584e:	377c      	adds	r7, #124	; 0x7c
 8005850:	46bd      	mov	sp, r7
 8005852:	bd90      	pop	{r4, r7, pc}
 8005854:	40022000 	.word	0x40022000
 8005858:	40022100 	.word	0x40022100
 800585c:	40022300 	.word	0x40022300
 8005860:	58026300 	.word	0x58026300
 8005864:	58026000 	.word	0x58026000
 8005868:	fffff0e0 	.word	0xfffff0e0

0800586c <__NVIC_SetPriorityGrouping>:
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <__NVIC_SetPriorityGrouping+0x40>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005888:	4013      	ands	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <__NVIC_SetPriorityGrouping+0x44>)
 8005896:	4313      	orrs	r3, r2
 8005898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800589a:	4a04      	ldr	r2, [pc, #16]	; (80058ac <__NVIC_SetPriorityGrouping+0x40>)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	60d3      	str	r3, [r2, #12]
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000ed00 	.word	0xe000ed00
 80058b0:	05fa0000 	.word	0x05fa0000

080058b4 <__NVIC_GetPriorityGrouping>:
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <__NVIC_GetPriorityGrouping+0x18>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f003 0307 	and.w	r3, r3, #7
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <__NVIC_EnableIRQ>:
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	db0b      	blt.n	80058fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	f003 021f 	and.w	r2, r3, #31
 80058e8:	4907      	ldr	r1, [pc, #28]	; (8005908 <__NVIC_EnableIRQ+0x38>)
 80058ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	2001      	movs	r0, #1
 80058f2:	fa00 f202 	lsl.w	r2, r0, r2
 80058f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000e100 	.word	0xe000e100

0800590c <__NVIC_SetPriority>:
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800591c:	2b00      	cmp	r3, #0
 800591e:	db0a      	blt.n	8005936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	490c      	ldr	r1, [pc, #48]	; (8005958 <__NVIC_SetPriority+0x4c>)
 8005926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800592a:	0112      	lsls	r2, r2, #4
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	440b      	add	r3, r1
 8005930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005934:	e00a      	b.n	800594c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	4908      	ldr	r1, [pc, #32]	; (800595c <__NVIC_SetPriority+0x50>)
 800593c:	88fb      	ldrh	r3, [r7, #6]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	3b04      	subs	r3, #4
 8005944:	0112      	lsls	r2, r2, #4
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	440b      	add	r3, r1
 800594a:	761a      	strb	r2, [r3, #24]
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	e000e100 	.word	0xe000e100
 800595c:	e000ed00 	.word	0xe000ed00

08005960 <NVIC_EncodePriority>:
{
 8005960:	b480      	push	{r7}
 8005962:	b089      	sub	sp, #36	; 0x24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f1c3 0307 	rsb	r3, r3, #7
 800597a:	2b04      	cmp	r3, #4
 800597c:	bf28      	it	cs
 800597e:	2304      	movcs	r3, #4
 8005980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3304      	adds	r3, #4
 8005986:	2b06      	cmp	r3, #6
 8005988:	d902      	bls.n	8005990 <NVIC_EncodePriority+0x30>
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3b03      	subs	r3, #3
 800598e:	e000      	b.n	8005992 <NVIC_EncodePriority+0x32>
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43da      	mvns	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	401a      	ands	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	43d9      	mvns	r1, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059b8:	4313      	orrs	r3, r2
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3724      	adds	r7, #36	; 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff ff4c 	bl	800586c <__NVIC_SetPriorityGrouping>
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059ea:	f7ff ff63 	bl	80058b4 <__NVIC_GetPriorityGrouping>
 80059ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	6978      	ldr	r0, [r7, #20]
 80059f6:	f7ff ffb3 	bl	8005960 <NVIC_EncodePriority>
 80059fa:	4602      	mov	r2, r0
 80059fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ff82 	bl	800590c <__NVIC_SetPriority>
}
 8005a08:	bf00      	nop
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ff56 	bl	80058d0 <__NVIC_EnableIRQ>
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e014      	b.n	8005a68 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	791b      	ldrb	r3, [r3, #4]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fb f8c8 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e046      	b.n	8005b12 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	795b      	ldrb	r3, [r3, #5]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_DAC_Start+0x20>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e040      	b.n	8005b12 <HAL_DAC_Start+0xa2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6819      	ldr	r1, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d11d      	bne.n	8005b04 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	605a      	str	r2, [r3, #4]
 8005ad8:	e014      	b.n	8005b04 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2102      	movs	r1, #2
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d107      	bne.n	8005b04 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0202 	orr.w	r2, r2, #2
 8005b02:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0a2      	b.n	8005c7e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	795b      	ldrb	r3, [r3, #5]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_DAC_Start_DMA+0x24>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e09c      	b.n	8005c7e <HAL_DAC_Start_DMA+0x15e>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d129      	bne.n	8005baa <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	4a4b      	ldr	r2, [pc, #300]	; (8005c88 <HAL_DAC_Start_DMA+0x168>)
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	4a4a      	ldr	r2, [pc, #296]	; (8005c8c <HAL_DAC_Start_DMA+0x16c>)
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4a49      	ldr	r2, [pc, #292]	; (8005c90 <HAL_DAC_Start_DMA+0x170>)
 8005b6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b7c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_DAC_Start_DMA+0x6c>
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d005      	beq.n	8005b96 <HAL_DAC_Start_DMA+0x76>
 8005b8a:	e009      	b.n	8005ba0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	613b      	str	r3, [r7, #16]
        break;
 8005b94:	e033      	b.n	8005bfe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	613b      	str	r3, [r7, #16]
        break;
 8005b9e:	e02e      	b.n	8005bfe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3310      	adds	r3, #16
 8005ba6:	613b      	str	r3, [r7, #16]
        break;
 8005ba8:	e029      	b.n	8005bfe <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4a39      	ldr	r2, [pc, #228]	; (8005c94 <HAL_DAC_Start_DMA+0x174>)
 8005bb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4a38      	ldr	r2, [pc, #224]	; (8005c98 <HAL_DAC_Start_DMA+0x178>)
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4a37      	ldr	r2, [pc, #220]	; (8005c9c <HAL_DAC_Start_DMA+0x17c>)
 8005bc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005bd0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_DAC_Start_DMA+0xc0>
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d005      	beq.n	8005bea <HAL_DAC_Start_DMA+0xca>
 8005bde:	e009      	b.n	8005bf4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3314      	adds	r3, #20
 8005be6:	613b      	str	r3, [r7, #16]
        break;
 8005be8:	e009      	b.n	8005bfe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3318      	adds	r3, #24
 8005bf0:	613b      	str	r3, [r7, #16]
        break;
 8005bf2:	e004      	b.n	8005bfe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	331c      	adds	r3, #28
 8005bfa:	613b      	str	r3, [r7, #16]
        break;
 8005bfc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d111      	bne.n	8005c28 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6898      	ldr	r0, [r3, #8]
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	f000 fe67 	bl	80068f0 <HAL_DMA_Start_IT>
 8005c22:	4603      	mov	r3, r0
 8005c24:	75fb      	strb	r3, [r7, #23]
 8005c26:	e010      	b.n	8005c4a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005c36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68d8      	ldr	r0, [r3, #12]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	f000 fe55 	bl	80068f0 <HAL_DMA_Start_IT>
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10c      	bne.n	8005c70 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6819      	ldr	r1, [r3, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	2201      	movs	r2, #1
 8005c64:	409a      	lsls	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e005      	b.n	8005c7c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f043 0204 	orr.w	r2, r3, #4
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	08006111 	.word	0x08006111
 8005c8c:	08006133 	.word	0x08006133
 8005c90:	0800614f 	.word	0x0800614f
 8005c94:	080061cd 	.word	0x080061cd
 8005c98:	080061ef 	.word	0x080061ef
 8005c9c:	0800620b 	.word	0x0800620b

08005ca0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e03e      	b.n	8005d32 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	43da      	mvns	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	400a      	ands	r2, r1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2201      	movs	r2, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43da      	mvns	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	400a      	ands	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10d      	bne.n	8005d10 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 f863 	bl	8006dc4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e00c      	b.n	8005d2a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f855 	bl	8006dc4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005d28:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01d      	beq.n	8005d98 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d018      	beq.n	8005d98 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2204      	movs	r2, #4
 8005d6a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f043 0201 	orr.w	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d90:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f86f 	bl	8005e76 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01d      	beq.n	8005dde <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d018      	beq.n	8005dde <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2204      	movs	r2, #4
 8005db0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f043 0202 	orr.w	r2, r3, #2
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005dc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f9ed 	bl	80061b8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b087      	sub	sp, #28
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
 8005df2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e015      	b.n	8005e2e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	3308      	adds	r3, #8
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e004      	b.n	8005e24 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3314      	adds	r3, #20
 8005e22:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	461a      	mov	r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_DAC_ConfigChannel+0x1e>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e12a      	b.n	8006104 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	795b      	ldrb	r3, [r3, #5]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_DAC_ConfigChannel+0x2e>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e124      	b.n	8006104 <HAL_DAC_ConfigChannel+0x278>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d17a      	bne.n	8005fc4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005ece:	f7fe f88b 	bl	8003fe8 <HAL_GetTick>
 8005ed2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d13d      	bne.n	8005f56 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005eda:	e018      	b.n	8005f0e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005edc:	f7fe f884 	bl	8003fe8 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d911      	bls.n	8005f0e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef0:	4b86      	ldr	r3, [pc, #536]	; (800610c <HAL_DAC_ConfigChannel+0x280>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f043 0208 	orr.w	r2, r3, #8
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2203      	movs	r2, #3
 8005f08:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0fa      	b.n	8006104 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f14:	4b7d      	ldr	r3, [pc, #500]	; (800610c <HAL_DAC_ConfigChannel+0x280>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1df      	bne.n	8005edc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	6992      	ldr	r2, [r2, #24]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
 8005f26:	e020      	b.n	8005f6a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f28:	f7fe f85e 	bl	8003fe8 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d90f      	bls.n	8005f56 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da0a      	bge.n	8005f56 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f043 0208 	orr.w	r2, r3, #8
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0d6      	b.n	8006104 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dbe3      	blt.n	8005f28 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	6992      	ldr	r2, [r2, #24]
 8005f68:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	ea02 0103 	and.w	r1, r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	409a      	lsls	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	21ff      	movs	r1, #255	; 0xff
 8005fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	ea02 0103 	and.w	r1, r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	409a      	lsls	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d11d      	bne.n	8006008 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	221f      	movs	r2, #31
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2207      	movs	r2, #7
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4013      	ands	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d102      	bne.n	8006032 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800602c:	2300      	movs	r3, #0
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
 8006030:	e00f      	b.n	8006052 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d102      	bne.n	8006040 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800603a:	2301      	movs	r3, #1
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
 800603e:	e008      	b.n	8006052 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006048:	2301      	movs	r3, #1
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	e001      	b.n	8006052 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4313      	orrs	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	43da      	mvns	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	400a      	ands	r2, r1
 8006098:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	22c0      	movs	r2, #192	; 0xc0
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43da      	mvns	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	400a      	ands	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006104:	4618      	mov	r0, r3
 8006106:	3728      	adds	r7, #40	; 0x28
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20008000 	.word	0x20008000

08006110 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fe8b 	bl	8005e3a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	711a      	strb	r2, [r3, #4]
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fe84 	bl	8005e4e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f043 0204 	orr.w	r2, r3, #4
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fe7a 	bl	8005e62 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	711a      	strb	r2, [r3, #4]
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff ffce 	bl	800617c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	711a      	strb	r2, [r3, #4]
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff ffc7 	bl	8006190 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f043 0204 	orr.w	r2, r3, #4
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff ffbd 	bl	80061a4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	711a      	strb	r2, [r3, #4]
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006240:	f7fd fed2 	bl	8003fe8 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e316      	b.n	800687e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a66      	ldr	r2, [pc, #408]	; (80063f0 <HAL_DMA_Init+0x1b8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d04a      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a65      	ldr	r2, [pc, #404]	; (80063f4 <HAL_DMA_Init+0x1bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d045      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a63      	ldr	r2, [pc, #396]	; (80063f8 <HAL_DMA_Init+0x1c0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d040      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a62      	ldr	r2, [pc, #392]	; (80063fc <HAL_DMA_Init+0x1c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d03b      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a60      	ldr	r2, [pc, #384]	; (8006400 <HAL_DMA_Init+0x1c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d036      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a5f      	ldr	r2, [pc, #380]	; (8006404 <HAL_DMA_Init+0x1cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d031      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5d      	ldr	r2, [pc, #372]	; (8006408 <HAL_DMA_Init+0x1d0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d02c      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a5c      	ldr	r2, [pc, #368]	; (800640c <HAL_DMA_Init+0x1d4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d027      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5a      	ldr	r2, [pc, #360]	; (8006410 <HAL_DMA_Init+0x1d8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d022      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a59      	ldr	r2, [pc, #356]	; (8006414 <HAL_DMA_Init+0x1dc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01d      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_DMA_Init+0x1e0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d018      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a56      	ldr	r2, [pc, #344]	; (800641c <HAL_DMA_Init+0x1e4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d013      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a54      	ldr	r2, [pc, #336]	; (8006420 <HAL_DMA_Init+0x1e8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a53      	ldr	r2, [pc, #332]	; (8006424 <HAL_DMA_Init+0x1ec>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a51      	ldr	r2, [pc, #324]	; (8006428 <HAL_DMA_Init+0x1f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a50      	ldr	r2, [pc, #320]	; (800642c <HAL_DMA_Init+0x1f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d101      	bne.n	80062f4 <HAL_DMA_Init+0xbc>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <HAL_DMA_Init+0xbe>
 80062f4:	2300      	movs	r3, #0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 813b 	beq.w	8006572 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a37      	ldr	r2, [pc, #220]	; (80063f0 <HAL_DMA_Init+0x1b8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d04a      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a36      	ldr	r2, [pc, #216]	; (80063f4 <HAL_DMA_Init+0x1bc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d045      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a34      	ldr	r2, [pc, #208]	; (80063f8 <HAL_DMA_Init+0x1c0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d040      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a33      	ldr	r2, [pc, #204]	; (80063fc <HAL_DMA_Init+0x1c4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d03b      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a31      	ldr	r2, [pc, #196]	; (8006400 <HAL_DMA_Init+0x1c8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d036      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a30      	ldr	r2, [pc, #192]	; (8006404 <HAL_DMA_Init+0x1cc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d031      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2e      	ldr	r2, [pc, #184]	; (8006408 <HAL_DMA_Init+0x1d0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d02c      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2d      	ldr	r2, [pc, #180]	; (800640c <HAL_DMA_Init+0x1d4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d027      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a2b      	ldr	r2, [pc, #172]	; (8006410 <HAL_DMA_Init+0x1d8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d022      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <HAL_DMA_Init+0x1dc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d01d      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a28      	ldr	r2, [pc, #160]	; (8006418 <HAL_DMA_Init+0x1e0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d018      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a27      	ldr	r2, [pc, #156]	; (800641c <HAL_DMA_Init+0x1e4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a25      	ldr	r2, [pc, #148]	; (8006420 <HAL_DMA_Init+0x1e8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a24      	ldr	r2, [pc, #144]	; (8006424 <HAL_DMA_Init+0x1ec>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d009      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a22      	ldr	r2, [pc, #136]	; (8006428 <HAL_DMA_Init+0x1f0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_DMA_Init+0x174>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a21      	ldr	r2, [pc, #132]	; (800642c <HAL_DMA_Init+0x1f4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <HAL_DMA_Init+0x186>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e007      	b.n	80063ce <HAL_DMA_Init+0x196>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063ce:	e02f      	b.n	8006430 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063d0:	f7fd fe0a 	bl	8003fe8 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d928      	bls.n	8006430 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2203      	movs	r2, #3
 80063e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e246      	b.n	800687e <HAL_DMA_Init+0x646>
 80063f0:	40020010 	.word	0x40020010
 80063f4:	40020028 	.word	0x40020028
 80063f8:	40020040 	.word	0x40020040
 80063fc:	40020058 	.word	0x40020058
 8006400:	40020070 	.word	0x40020070
 8006404:	40020088 	.word	0x40020088
 8006408:	400200a0 	.word	0x400200a0
 800640c:	400200b8 	.word	0x400200b8
 8006410:	40020410 	.word	0x40020410
 8006414:	40020428 	.word	0x40020428
 8006418:	40020440 	.word	0x40020440
 800641c:	40020458 	.word	0x40020458
 8006420:	40020470 	.word	0x40020470
 8006424:	40020488 	.word	0x40020488
 8006428:	400204a0 	.word	0x400204a0
 800642c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1c8      	bne.n	80063d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4b83      	ldr	r3, [pc, #524]	; (8006658 <HAL_DMA_Init+0x420>)
 800644a:	4013      	ands	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006456:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006462:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b04      	cmp	r3, #4
 8006482:	d107      	bne.n	8006494 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	4313      	orrs	r3, r2
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006494:	4b71      	ldr	r3, [pc, #452]	; (800665c <HAL_DMA_Init+0x424>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b71      	ldr	r3, [pc, #452]	; (8006660 <HAL_DMA_Init+0x428>)
 800649a:	4013      	ands	r3, r2
 800649c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a0:	d328      	bcc.n	80064f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b28      	cmp	r3, #40	; 0x28
 80064a8:	d903      	bls.n	80064b2 <HAL_DMA_Init+0x27a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b2e      	cmp	r3, #46	; 0x2e
 80064b0:	d917      	bls.n	80064e2 <HAL_DMA_Init+0x2aa>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b3e      	cmp	r3, #62	; 0x3e
 80064b8:	d903      	bls.n	80064c2 <HAL_DMA_Init+0x28a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b42      	cmp	r3, #66	; 0x42
 80064c0:	d90f      	bls.n	80064e2 <HAL_DMA_Init+0x2aa>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b46      	cmp	r3, #70	; 0x46
 80064c8:	d903      	bls.n	80064d2 <HAL_DMA_Init+0x29a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b48      	cmp	r3, #72	; 0x48
 80064d0:	d907      	bls.n	80064e2 <HAL_DMA_Init+0x2aa>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b4e      	cmp	r3, #78	; 0x4e
 80064d8:	d905      	bls.n	80064e6 <HAL_DMA_Init+0x2ae>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b52      	cmp	r3, #82	; 0x52
 80064e0:	d801      	bhi.n	80064e6 <HAL_DMA_Init+0x2ae>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <HAL_DMA_Init+0x2b0>
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	2b04      	cmp	r3, #4
 800651c:	d117      	bne.n	800654e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f002 fb3f 	bl	8008bb4 <DMA_CheckFifoParam>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2240      	movs	r2, #64	; 0x40
 8006540:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e197      	b.n	800687e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f002 fa7a 	bl	8008a50 <DMA_CalcBaseAndBitshift>
 800655c:	4603      	mov	r3, r0
 800655e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	223f      	movs	r2, #63	; 0x3f
 800656a:	409a      	lsls	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	e0cd      	b.n	800670e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a3b      	ldr	r2, [pc, #236]	; (8006664 <HAL_DMA_Init+0x42c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d022      	beq.n	80065c2 <HAL_DMA_Init+0x38a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a39      	ldr	r2, [pc, #228]	; (8006668 <HAL_DMA_Init+0x430>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01d      	beq.n	80065c2 <HAL_DMA_Init+0x38a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a38      	ldr	r2, [pc, #224]	; (800666c <HAL_DMA_Init+0x434>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d018      	beq.n	80065c2 <HAL_DMA_Init+0x38a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a36      	ldr	r2, [pc, #216]	; (8006670 <HAL_DMA_Init+0x438>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <HAL_DMA_Init+0x38a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a35      	ldr	r2, [pc, #212]	; (8006674 <HAL_DMA_Init+0x43c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00e      	beq.n	80065c2 <HAL_DMA_Init+0x38a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a33      	ldr	r2, [pc, #204]	; (8006678 <HAL_DMA_Init+0x440>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_DMA_Init+0x38a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a32      	ldr	r2, [pc, #200]	; (800667c <HAL_DMA_Init+0x444>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_DMA_Init+0x38a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a30      	ldr	r2, [pc, #192]	; (8006680 <HAL_DMA_Init+0x448>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d101      	bne.n	80065c6 <HAL_DMA_Init+0x38e>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_DMA_Init+0x390>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8097 	beq.w	80066fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a24      	ldr	r2, [pc, #144]	; (8006664 <HAL_DMA_Init+0x42c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d021      	beq.n	800661c <HAL_DMA_Init+0x3e4>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a22      	ldr	r2, [pc, #136]	; (8006668 <HAL_DMA_Init+0x430>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d01c      	beq.n	800661c <HAL_DMA_Init+0x3e4>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a21      	ldr	r2, [pc, #132]	; (800666c <HAL_DMA_Init+0x434>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d017      	beq.n	800661c <HAL_DMA_Init+0x3e4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <HAL_DMA_Init+0x438>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d012      	beq.n	800661c <HAL_DMA_Init+0x3e4>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1e      	ldr	r2, [pc, #120]	; (8006674 <HAL_DMA_Init+0x43c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00d      	beq.n	800661c <HAL_DMA_Init+0x3e4>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <HAL_DMA_Init+0x440>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d008      	beq.n	800661c <HAL_DMA_Init+0x3e4>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1b      	ldr	r2, [pc, #108]	; (800667c <HAL_DMA_Init+0x444>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <HAL_DMA_Init+0x3e4>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a19      	ldr	r2, [pc, #100]	; (8006680 <HAL_DMA_Init+0x448>)
 800661a:	4293      	cmp	r3, r2
 800661c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_DMA_Init+0x44c>)
 800663a:	4013      	ands	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d020      	beq.n	8006688 <HAL_DMA_Init+0x450>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d102      	bne.n	8006654 <HAL_DMA_Init+0x41c>
 800664e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006652:	e01a      	b.n	800668a <HAL_DMA_Init+0x452>
 8006654:	2300      	movs	r3, #0
 8006656:	e018      	b.n	800668a <HAL_DMA_Init+0x452>
 8006658:	fe10803f 	.word	0xfe10803f
 800665c:	5c001000 	.word	0x5c001000
 8006660:	ffff0000 	.word	0xffff0000
 8006664:	58025408 	.word	0x58025408
 8006668:	5802541c 	.word	0x5802541c
 800666c:	58025430 	.word	0x58025430
 8006670:	58025444 	.word	0x58025444
 8006674:	58025458 	.word	0x58025458
 8006678:	5802546c 	.word	0x5802546c
 800667c:	58025480 	.word	0x58025480
 8006680:	58025494 	.word	0x58025494
 8006684:	fffe000f 	.word	0xfffe000f
 8006688:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68d2      	ldr	r2, [r2, #12]
 800668e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	4b6e      	ldr	r3, [pc, #440]	; (8006888 <HAL_DMA_Init+0x650>)
 80066d0:	4413      	add	r3, r2
 80066d2:	4a6e      	ldr	r2, [pc, #440]	; (800688c <HAL_DMA_Init+0x654>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	009a      	lsls	r2, r3, #2
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 f9b5 	bl	8008a50 <DMA_CalcBaseAndBitshift>
 80066e6:	4603      	mov	r3, r0
 80066e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	2201      	movs	r2, #1
 80066f4:	409a      	lsls	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	e008      	b.n	800670e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2240      	movs	r2, #64	; 0x40
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2203      	movs	r2, #3
 8006706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e0b7      	b.n	800687e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a5f      	ldr	r2, [pc, #380]	; (8006890 <HAL_DMA_Init+0x658>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d072      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a5d      	ldr	r2, [pc, #372]	; (8006894 <HAL_DMA_Init+0x65c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d06d      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a5c      	ldr	r2, [pc, #368]	; (8006898 <HAL_DMA_Init+0x660>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d068      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a5a      	ldr	r2, [pc, #360]	; (800689c <HAL_DMA_Init+0x664>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d063      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a59      	ldr	r2, [pc, #356]	; (80068a0 <HAL_DMA_Init+0x668>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d05e      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a57      	ldr	r2, [pc, #348]	; (80068a4 <HAL_DMA_Init+0x66c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d059      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a56      	ldr	r2, [pc, #344]	; (80068a8 <HAL_DMA_Init+0x670>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d054      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a54      	ldr	r2, [pc, #336]	; (80068ac <HAL_DMA_Init+0x674>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d04f      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a53      	ldr	r2, [pc, #332]	; (80068b0 <HAL_DMA_Init+0x678>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d04a      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a51      	ldr	r2, [pc, #324]	; (80068b4 <HAL_DMA_Init+0x67c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d045      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a50      	ldr	r2, [pc, #320]	; (80068b8 <HAL_DMA_Init+0x680>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d040      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a4e      	ldr	r2, [pc, #312]	; (80068bc <HAL_DMA_Init+0x684>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d03b      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a4d      	ldr	r2, [pc, #308]	; (80068c0 <HAL_DMA_Init+0x688>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d036      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a4b      	ldr	r2, [pc, #300]	; (80068c4 <HAL_DMA_Init+0x68c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d031      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a4a      	ldr	r2, [pc, #296]	; (80068c8 <HAL_DMA_Init+0x690>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d02c      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a48      	ldr	r2, [pc, #288]	; (80068cc <HAL_DMA_Init+0x694>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d027      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a47      	ldr	r2, [pc, #284]	; (80068d0 <HAL_DMA_Init+0x698>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d022      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a45      	ldr	r2, [pc, #276]	; (80068d4 <HAL_DMA_Init+0x69c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d01d      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a44      	ldr	r2, [pc, #272]	; (80068d8 <HAL_DMA_Init+0x6a0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d018      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a42      	ldr	r2, [pc, #264]	; (80068dc <HAL_DMA_Init+0x6a4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d013      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a41      	ldr	r2, [pc, #260]	; (80068e0 <HAL_DMA_Init+0x6a8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00e      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3f      	ldr	r2, [pc, #252]	; (80068e4 <HAL_DMA_Init+0x6ac>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d009      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a3e      	ldr	r2, [pc, #248]	; (80068e8 <HAL_DMA_Init+0x6b0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d004      	beq.n	80067fe <HAL_DMA_Init+0x5c6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a3c      	ldr	r2, [pc, #240]	; (80068ec <HAL_DMA_Init+0x6b4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d101      	bne.n	8006802 <HAL_DMA_Init+0x5ca>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <HAL_DMA_Init+0x5cc>
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d032      	beq.n	800686e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f002 fa4f 	bl	8008cac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d102      	bne.n	800681c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006830:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_DMA_Init+0x624>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b08      	cmp	r3, #8
 8006840:	d80c      	bhi.n	800685c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f002 facc 	bl	8008de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006858:	605a      	str	r2, [r3, #4]
 800685a:	e008      	b.n	800686e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	a7fdabf8 	.word	0xa7fdabf8
 800688c:	cccccccd 	.word	0xcccccccd
 8006890:	40020010 	.word	0x40020010
 8006894:	40020028 	.word	0x40020028
 8006898:	40020040 	.word	0x40020040
 800689c:	40020058 	.word	0x40020058
 80068a0:	40020070 	.word	0x40020070
 80068a4:	40020088 	.word	0x40020088
 80068a8:	400200a0 	.word	0x400200a0
 80068ac:	400200b8 	.word	0x400200b8
 80068b0:	40020410 	.word	0x40020410
 80068b4:	40020428 	.word	0x40020428
 80068b8:	40020440 	.word	0x40020440
 80068bc:	40020458 	.word	0x40020458
 80068c0:	40020470 	.word	0x40020470
 80068c4:	40020488 	.word	0x40020488
 80068c8:	400204a0 	.word	0x400204a0
 80068cc:	400204b8 	.word	0x400204b8
 80068d0:	58025408 	.word	0x58025408
 80068d4:	5802541c 	.word	0x5802541c
 80068d8:	58025430 	.word	0x58025430
 80068dc:	58025444 	.word	0x58025444
 80068e0:	58025458 	.word	0x58025458
 80068e4:	5802546c 	.word	0x5802546c
 80068e8:	58025480 	.word	0x58025480
 80068ec:	58025494 	.word	0x58025494

080068f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e226      	b.n	8006d5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_DMA_Start_IT+0x2a>
 8006916:	2302      	movs	r3, #2
 8006918:	e21f      	b.n	8006d5a <HAL_DMA_Start_IT+0x46a>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	f040 820a 	bne.w	8006d44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a68      	ldr	r2, [pc, #416]	; (8006ae4 <HAL_DMA_Start_IT+0x1f4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a66      	ldr	r2, [pc, #408]	; (8006ae8 <HAL_DMA_Start_IT+0x1f8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d045      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a65      	ldr	r2, [pc, #404]	; (8006aec <HAL_DMA_Start_IT+0x1fc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d040      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a63      	ldr	r2, [pc, #396]	; (8006af0 <HAL_DMA_Start_IT+0x200>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d03b      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a62      	ldr	r2, [pc, #392]	; (8006af4 <HAL_DMA_Start_IT+0x204>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d036      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a60      	ldr	r2, [pc, #384]	; (8006af8 <HAL_DMA_Start_IT+0x208>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d031      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a5f      	ldr	r2, [pc, #380]	; (8006afc <HAL_DMA_Start_IT+0x20c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d02c      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a5d      	ldr	r2, [pc, #372]	; (8006b00 <HAL_DMA_Start_IT+0x210>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d027      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a5c      	ldr	r2, [pc, #368]	; (8006b04 <HAL_DMA_Start_IT+0x214>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a5a      	ldr	r2, [pc, #360]	; (8006b08 <HAL_DMA_Start_IT+0x218>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a59      	ldr	r2, [pc, #356]	; (8006b0c <HAL_DMA_Start_IT+0x21c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a57      	ldr	r2, [pc, #348]	; (8006b10 <HAL_DMA_Start_IT+0x220>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a56      	ldr	r2, [pc, #344]	; (8006b14 <HAL_DMA_Start_IT+0x224>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a54      	ldr	r2, [pc, #336]	; (8006b18 <HAL_DMA_Start_IT+0x228>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a53      	ldr	r2, [pc, #332]	; (8006b1c <HAL_DMA_Start_IT+0x22c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMA_Start_IT+0xee>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a51      	ldr	r2, [pc, #324]	; (8006b20 <HAL_DMA_Start_IT+0x230>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d108      	bne.n	80069f0 <HAL_DMA_Start_IT+0x100>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0201 	bic.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e007      	b.n	8006a00 <HAL_DMA_Start_IT+0x110>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0201 	bic.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f001 fe76 	bl	80086f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a34      	ldr	r2, [pc, #208]	; (8006ae4 <HAL_DMA_Start_IT+0x1f4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d04a      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <HAL_DMA_Start_IT+0x1f8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d045      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a31      	ldr	r2, [pc, #196]	; (8006aec <HAL_DMA_Start_IT+0x1fc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d040      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a30      	ldr	r2, [pc, #192]	; (8006af0 <HAL_DMA_Start_IT+0x200>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d03b      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <HAL_DMA_Start_IT+0x204>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d036      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <HAL_DMA_Start_IT+0x208>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d031      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2b      	ldr	r2, [pc, #172]	; (8006afc <HAL_DMA_Start_IT+0x20c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d02c      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a2a      	ldr	r2, [pc, #168]	; (8006b00 <HAL_DMA_Start_IT+0x210>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d027      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <HAL_DMA_Start_IT+0x214>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d022      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a27      	ldr	r2, [pc, #156]	; (8006b08 <HAL_DMA_Start_IT+0x218>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d01d      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <HAL_DMA_Start_IT+0x21c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d018      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a24      	ldr	r2, [pc, #144]	; (8006b10 <HAL_DMA_Start_IT+0x220>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a22      	ldr	r2, [pc, #136]	; (8006b14 <HAL_DMA_Start_IT+0x224>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00e      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a21      	ldr	r2, [pc, #132]	; (8006b18 <HAL_DMA_Start_IT+0x228>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d009      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <HAL_DMA_Start_IT+0x22c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_DMA_Start_IT+0x1bc>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1e      	ldr	r2, [pc, #120]	; (8006b20 <HAL_DMA_Start_IT+0x230>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d101      	bne.n	8006ab0 <HAL_DMA_Start_IT+0x1c0>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <HAL_DMA_Start_IT+0x1c2>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d036      	beq.n	8006b24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f023 021e 	bic.w	r2, r3, #30
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0216 	orr.w	r2, r2, #22
 8006ac8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d03e      	beq.n	8006b50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0208 	orr.w	r2, r2, #8
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	e035      	b.n	8006b50 <HAL_DMA_Start_IT+0x260>
 8006ae4:	40020010 	.word	0x40020010
 8006ae8:	40020028 	.word	0x40020028
 8006aec:	40020040 	.word	0x40020040
 8006af0:	40020058 	.word	0x40020058
 8006af4:	40020070 	.word	0x40020070
 8006af8:	40020088 	.word	0x40020088
 8006afc:	400200a0 	.word	0x400200a0
 8006b00:	400200b8 	.word	0x400200b8
 8006b04:	40020410 	.word	0x40020410
 8006b08:	40020428 	.word	0x40020428
 8006b0c:	40020440 	.word	0x40020440
 8006b10:	40020458 	.word	0x40020458
 8006b14:	40020470 	.word	0x40020470
 8006b18:	40020488 	.word	0x40020488
 8006b1c:	400204a0 	.word	0x400204a0
 8006b20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f023 020e 	bic.w	r2, r3, #14
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 020a 	orr.w	r2, r2, #10
 8006b36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0204 	orr.w	r2, r2, #4
 8006b4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a83      	ldr	r2, [pc, #524]	; (8006d64 <HAL_DMA_Start_IT+0x474>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d072      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a82      	ldr	r2, [pc, #520]	; (8006d68 <HAL_DMA_Start_IT+0x478>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d06d      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a80      	ldr	r2, [pc, #512]	; (8006d6c <HAL_DMA_Start_IT+0x47c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d068      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a7f      	ldr	r2, [pc, #508]	; (8006d70 <HAL_DMA_Start_IT+0x480>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d063      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a7d      	ldr	r2, [pc, #500]	; (8006d74 <HAL_DMA_Start_IT+0x484>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d05e      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a7c      	ldr	r2, [pc, #496]	; (8006d78 <HAL_DMA_Start_IT+0x488>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d059      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a7a      	ldr	r2, [pc, #488]	; (8006d7c <HAL_DMA_Start_IT+0x48c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d054      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a79      	ldr	r2, [pc, #484]	; (8006d80 <HAL_DMA_Start_IT+0x490>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d04f      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a77      	ldr	r2, [pc, #476]	; (8006d84 <HAL_DMA_Start_IT+0x494>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d04a      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a76      	ldr	r2, [pc, #472]	; (8006d88 <HAL_DMA_Start_IT+0x498>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d045      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a74      	ldr	r2, [pc, #464]	; (8006d8c <HAL_DMA_Start_IT+0x49c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d040      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a73      	ldr	r2, [pc, #460]	; (8006d90 <HAL_DMA_Start_IT+0x4a0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d03b      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a71      	ldr	r2, [pc, #452]	; (8006d94 <HAL_DMA_Start_IT+0x4a4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d036      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a70      	ldr	r2, [pc, #448]	; (8006d98 <HAL_DMA_Start_IT+0x4a8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d031      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a6e      	ldr	r2, [pc, #440]	; (8006d9c <HAL_DMA_Start_IT+0x4ac>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02c      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a6d      	ldr	r2, [pc, #436]	; (8006da0 <HAL_DMA_Start_IT+0x4b0>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d027      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a6b      	ldr	r2, [pc, #428]	; (8006da4 <HAL_DMA_Start_IT+0x4b4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d022      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a6a      	ldr	r2, [pc, #424]	; (8006da8 <HAL_DMA_Start_IT+0x4b8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d01d      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a68      	ldr	r2, [pc, #416]	; (8006dac <HAL_DMA_Start_IT+0x4bc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d018      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a67      	ldr	r2, [pc, #412]	; (8006db0 <HAL_DMA_Start_IT+0x4c0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a65      	ldr	r2, [pc, #404]	; (8006db4 <HAL_DMA_Start_IT+0x4c4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a64      	ldr	r2, [pc, #400]	; (8006db8 <HAL_DMA_Start_IT+0x4c8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a62      	ldr	r2, [pc, #392]	; (8006dbc <HAL_DMA_Start_IT+0x4cc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <HAL_DMA_Start_IT+0x350>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a61      	ldr	r2, [pc, #388]	; (8006dc0 <HAL_DMA_Start_IT+0x4d0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d101      	bne.n	8006c44 <HAL_DMA_Start_IT+0x354>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <HAL_DMA_Start_IT+0x356>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01a      	beq.n	8006c80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a37      	ldr	r2, [pc, #220]	; (8006d64 <HAL_DMA_Start_IT+0x474>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d04a      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a36      	ldr	r2, [pc, #216]	; (8006d68 <HAL_DMA_Start_IT+0x478>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d045      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a34      	ldr	r2, [pc, #208]	; (8006d6c <HAL_DMA_Start_IT+0x47c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d040      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a33      	ldr	r2, [pc, #204]	; (8006d70 <HAL_DMA_Start_IT+0x480>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d03b      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a31      	ldr	r2, [pc, #196]	; (8006d74 <HAL_DMA_Start_IT+0x484>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d036      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a30      	ldr	r2, [pc, #192]	; (8006d78 <HAL_DMA_Start_IT+0x488>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d031      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2e      	ldr	r2, [pc, #184]	; (8006d7c <HAL_DMA_Start_IT+0x48c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d02c      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <HAL_DMA_Start_IT+0x490>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d027      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2b      	ldr	r2, [pc, #172]	; (8006d84 <HAL_DMA_Start_IT+0x494>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d022      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <HAL_DMA_Start_IT+0x498>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d01d      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <HAL_DMA_Start_IT+0x49c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <HAL_DMA_Start_IT+0x4a0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a25      	ldr	r2, [pc, #148]	; (8006d94 <HAL_DMA_Start_IT+0x4a4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00e      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a24      	ldr	r2, [pc, #144]	; (8006d98 <HAL_DMA_Start_IT+0x4a8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d009      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <HAL_DMA_Start_IT+0x4ac>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_DMA_Start_IT+0x430>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a21      	ldr	r2, [pc, #132]	; (8006da0 <HAL_DMA_Start_IT+0x4b0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d108      	bne.n	8006d32 <HAL_DMA_Start_IT+0x442>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e012      	b.n	8006d58 <HAL_DMA_Start_IT+0x468>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e009      	b.n	8006d58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40020010 	.word	0x40020010
 8006d68:	40020028 	.word	0x40020028
 8006d6c:	40020040 	.word	0x40020040
 8006d70:	40020058 	.word	0x40020058
 8006d74:	40020070 	.word	0x40020070
 8006d78:	40020088 	.word	0x40020088
 8006d7c:	400200a0 	.word	0x400200a0
 8006d80:	400200b8 	.word	0x400200b8
 8006d84:	40020410 	.word	0x40020410
 8006d88:	40020428 	.word	0x40020428
 8006d8c:	40020440 	.word	0x40020440
 8006d90:	40020458 	.word	0x40020458
 8006d94:	40020470 	.word	0x40020470
 8006d98:	40020488 	.word	0x40020488
 8006d9c:	400204a0 	.word	0x400204a0
 8006da0:	400204b8 	.word	0x400204b8
 8006da4:	58025408 	.word	0x58025408
 8006da8:	5802541c 	.word	0x5802541c
 8006dac:	58025430 	.word	0x58025430
 8006db0:	58025444 	.word	0x58025444
 8006db4:	58025458 	.word	0x58025458
 8006db8:	5802546c 	.word	0x5802546c
 8006dbc:	58025480 	.word	0x58025480
 8006dc0:	58025494 	.word	0x58025494

08006dc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006dcc:	f7fd f90c 	bl	8003fe8 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e2dc      	b.n	8007396 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d008      	beq.n	8006dfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2280      	movs	r2, #128	; 0x80
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e2cd      	b.n	8007396 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a76      	ldr	r2, [pc, #472]	; (8006fd8 <HAL_DMA_Abort+0x214>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d04a      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a74      	ldr	r2, [pc, #464]	; (8006fdc <HAL_DMA_Abort+0x218>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d045      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a73      	ldr	r2, [pc, #460]	; (8006fe0 <HAL_DMA_Abort+0x21c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d040      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a71      	ldr	r2, [pc, #452]	; (8006fe4 <HAL_DMA_Abort+0x220>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d03b      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a70      	ldr	r2, [pc, #448]	; (8006fe8 <HAL_DMA_Abort+0x224>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d036      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6e      	ldr	r2, [pc, #440]	; (8006fec <HAL_DMA_Abort+0x228>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d031      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a6d      	ldr	r2, [pc, #436]	; (8006ff0 <HAL_DMA_Abort+0x22c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d02c      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a6b      	ldr	r2, [pc, #428]	; (8006ff4 <HAL_DMA_Abort+0x230>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d027      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a6a      	ldr	r2, [pc, #424]	; (8006ff8 <HAL_DMA_Abort+0x234>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d022      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a68      	ldr	r2, [pc, #416]	; (8006ffc <HAL_DMA_Abort+0x238>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01d      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a67      	ldr	r2, [pc, #412]	; (8007000 <HAL_DMA_Abort+0x23c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d018      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a65      	ldr	r2, [pc, #404]	; (8007004 <HAL_DMA_Abort+0x240>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a64      	ldr	r2, [pc, #400]	; (8007008 <HAL_DMA_Abort+0x244>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a62      	ldr	r2, [pc, #392]	; (800700c <HAL_DMA_Abort+0x248>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a61      	ldr	r2, [pc, #388]	; (8007010 <HAL_DMA_Abort+0x24c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_DMA_Abort+0xd6>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a5f      	ldr	r2, [pc, #380]	; (8007014 <HAL_DMA_Abort+0x250>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d101      	bne.n	8006e9e <HAL_DMA_Abort+0xda>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <HAL_DMA_Abort+0xdc>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d013      	beq.n	8006ecc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 021e 	bic.w	r2, r2, #30
 8006eb2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ec2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	e00a      	b.n	8006ee2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 020e 	bic.w	r2, r2, #14
 8006eda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a3c      	ldr	r2, [pc, #240]	; (8006fd8 <HAL_DMA_Abort+0x214>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d072      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a3a      	ldr	r2, [pc, #232]	; (8006fdc <HAL_DMA_Abort+0x218>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d06d      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a39      	ldr	r2, [pc, #228]	; (8006fe0 <HAL_DMA_Abort+0x21c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d068      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a37      	ldr	r2, [pc, #220]	; (8006fe4 <HAL_DMA_Abort+0x220>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d063      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a36      	ldr	r2, [pc, #216]	; (8006fe8 <HAL_DMA_Abort+0x224>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d05e      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a34      	ldr	r2, [pc, #208]	; (8006fec <HAL_DMA_Abort+0x228>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d059      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a33      	ldr	r2, [pc, #204]	; (8006ff0 <HAL_DMA_Abort+0x22c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d054      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <HAL_DMA_Abort+0x230>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d04f      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <HAL_DMA_Abort+0x234>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d04a      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a2e      	ldr	r2, [pc, #184]	; (8006ffc <HAL_DMA_Abort+0x238>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d045      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a2d      	ldr	r2, [pc, #180]	; (8007000 <HAL_DMA_Abort+0x23c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d040      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2b      	ldr	r2, [pc, #172]	; (8007004 <HAL_DMA_Abort+0x240>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d03b      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <HAL_DMA_Abort+0x244>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d036      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a28      	ldr	r2, [pc, #160]	; (800700c <HAL_DMA_Abort+0x248>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d031      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a27      	ldr	r2, [pc, #156]	; (8007010 <HAL_DMA_Abort+0x24c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d02c      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a25      	ldr	r2, [pc, #148]	; (8007014 <HAL_DMA_Abort+0x250>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d027      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a24      	ldr	r2, [pc, #144]	; (8007018 <HAL_DMA_Abort+0x254>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a22      	ldr	r2, [pc, #136]	; (800701c <HAL_DMA_Abort+0x258>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01d      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a21      	ldr	r2, [pc, #132]	; (8007020 <HAL_DMA_Abort+0x25c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <HAL_DMA_Abort+0x260>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <HAL_DMA_Abort+0x264>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1c      	ldr	r2, [pc, #112]	; (800702c <HAL_DMA_Abort+0x268>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1b      	ldr	r2, [pc, #108]	; (8007030 <HAL_DMA_Abort+0x26c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_DMA_Abort+0x20e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a19      	ldr	r2, [pc, #100]	; (8007034 <HAL_DMA_Abort+0x270>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d132      	bne.n	8007038 <HAL_DMA_Abort+0x274>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e031      	b.n	800703a <HAL_DMA_Abort+0x276>
 8006fd6:	bf00      	nop
 8006fd8:	40020010 	.word	0x40020010
 8006fdc:	40020028 	.word	0x40020028
 8006fe0:	40020040 	.word	0x40020040
 8006fe4:	40020058 	.word	0x40020058
 8006fe8:	40020070 	.word	0x40020070
 8006fec:	40020088 	.word	0x40020088
 8006ff0:	400200a0 	.word	0x400200a0
 8006ff4:	400200b8 	.word	0x400200b8
 8006ff8:	40020410 	.word	0x40020410
 8006ffc:	40020428 	.word	0x40020428
 8007000:	40020440 	.word	0x40020440
 8007004:	40020458 	.word	0x40020458
 8007008:	40020470 	.word	0x40020470
 800700c:	40020488 	.word	0x40020488
 8007010:	400204a0 	.word	0x400204a0
 8007014:	400204b8 	.word	0x400204b8
 8007018:	58025408 	.word	0x58025408
 800701c:	5802541c 	.word	0x5802541c
 8007020:	58025430 	.word	0x58025430
 8007024:	58025444 	.word	0x58025444
 8007028:	58025458 	.word	0x58025458
 800702c:	5802546c 	.word	0x5802546c
 8007030:	58025480 	.word	0x58025480
 8007034:	58025494 	.word	0x58025494
 8007038:	2300      	movs	r3, #0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800704c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a6d      	ldr	r2, [pc, #436]	; (8007208 <HAL_DMA_Abort+0x444>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d04a      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a6b      	ldr	r2, [pc, #428]	; (800720c <HAL_DMA_Abort+0x448>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d045      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a6a      	ldr	r2, [pc, #424]	; (8007210 <HAL_DMA_Abort+0x44c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d040      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a68      	ldr	r2, [pc, #416]	; (8007214 <HAL_DMA_Abort+0x450>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d03b      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a67      	ldr	r2, [pc, #412]	; (8007218 <HAL_DMA_Abort+0x454>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d036      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a65      	ldr	r2, [pc, #404]	; (800721c <HAL_DMA_Abort+0x458>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d031      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a64      	ldr	r2, [pc, #400]	; (8007220 <HAL_DMA_Abort+0x45c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d02c      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a62      	ldr	r2, [pc, #392]	; (8007224 <HAL_DMA_Abort+0x460>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d027      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a61      	ldr	r2, [pc, #388]	; (8007228 <HAL_DMA_Abort+0x464>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d022      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a5f      	ldr	r2, [pc, #380]	; (800722c <HAL_DMA_Abort+0x468>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01d      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a5e      	ldr	r2, [pc, #376]	; (8007230 <HAL_DMA_Abort+0x46c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d018      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a5c      	ldr	r2, [pc, #368]	; (8007234 <HAL_DMA_Abort+0x470>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d013      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a5b      	ldr	r2, [pc, #364]	; (8007238 <HAL_DMA_Abort+0x474>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00e      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a59      	ldr	r2, [pc, #356]	; (800723c <HAL_DMA_Abort+0x478>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d009      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a58      	ldr	r2, [pc, #352]	; (8007240 <HAL_DMA_Abort+0x47c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_DMA_Abort+0x32a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a56      	ldr	r2, [pc, #344]	; (8007244 <HAL_DMA_Abort+0x480>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d108      	bne.n	8007100 <HAL_DMA_Abort+0x33c>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	e007      	b.n	8007110 <HAL_DMA_Abort+0x34c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0201 	bic.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007110:	e013      	b.n	800713a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007112:	f7fc ff69 	bl	8003fe8 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b05      	cmp	r3, #5
 800711e:	d90c      	bls.n	800713a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2203      	movs	r2, #3
 800712a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e12d      	b.n	8007396 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a2f      	ldr	r2, [pc, #188]	; (8007208 <HAL_DMA_Abort+0x444>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d04a      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2d      	ldr	r2, [pc, #180]	; (800720c <HAL_DMA_Abort+0x448>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d045      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <HAL_DMA_Abort+0x44c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d040      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_DMA_Abort+0x450>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d03b      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a29      	ldr	r2, [pc, #164]	; (8007218 <HAL_DMA_Abort+0x454>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d036      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a27      	ldr	r2, [pc, #156]	; (800721c <HAL_DMA_Abort+0x458>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d031      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a26      	ldr	r2, [pc, #152]	; (8007220 <HAL_DMA_Abort+0x45c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d02c      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a24      	ldr	r2, [pc, #144]	; (8007224 <HAL_DMA_Abort+0x460>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d027      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a23      	ldr	r2, [pc, #140]	; (8007228 <HAL_DMA_Abort+0x464>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d022      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a21      	ldr	r2, [pc, #132]	; (800722c <HAL_DMA_Abort+0x468>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01d      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a20      	ldr	r2, [pc, #128]	; (8007230 <HAL_DMA_Abort+0x46c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d018      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <HAL_DMA_Abort+0x470>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <HAL_DMA_Abort+0x474>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00e      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1b      	ldr	r2, [pc, #108]	; (800723c <HAL_DMA_Abort+0x478>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <HAL_DMA_Abort+0x47c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d004      	beq.n	80071e6 <HAL_DMA_Abort+0x422>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a18      	ldr	r2, [pc, #96]	; (8007244 <HAL_DMA_Abort+0x480>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d101      	bne.n	80071ea <HAL_DMA_Abort+0x426>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <HAL_DMA_Abort+0x428>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d02b      	beq.n	8007248 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	223f      	movs	r2, #63	; 0x3f
 8007200:	409a      	lsls	r2, r3
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	609a      	str	r2, [r3, #8]
 8007206:	e02a      	b.n	800725e <HAL_DMA_Abort+0x49a>
 8007208:	40020010 	.word	0x40020010
 800720c:	40020028 	.word	0x40020028
 8007210:	40020040 	.word	0x40020040
 8007214:	40020058 	.word	0x40020058
 8007218:	40020070 	.word	0x40020070
 800721c:	40020088 	.word	0x40020088
 8007220:	400200a0 	.word	0x400200a0
 8007224:	400200b8 	.word	0x400200b8
 8007228:	40020410 	.word	0x40020410
 800722c:	40020428 	.word	0x40020428
 8007230:	40020440 	.word	0x40020440
 8007234:	40020458 	.word	0x40020458
 8007238:	40020470 	.word	0x40020470
 800723c:	40020488 	.word	0x40020488
 8007240:	400204a0 	.word	0x400204a0
 8007244:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2201      	movs	r2, #1
 8007258:	409a      	lsls	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a4f      	ldr	r2, [pc, #316]	; (80073a0 <HAL_DMA_Abort+0x5dc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d072      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4d      	ldr	r2, [pc, #308]	; (80073a4 <HAL_DMA_Abort+0x5e0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d06d      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a4c      	ldr	r2, [pc, #304]	; (80073a8 <HAL_DMA_Abort+0x5e4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d068      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a4a      	ldr	r2, [pc, #296]	; (80073ac <HAL_DMA_Abort+0x5e8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d063      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a49      	ldr	r2, [pc, #292]	; (80073b0 <HAL_DMA_Abort+0x5ec>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d05e      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a47      	ldr	r2, [pc, #284]	; (80073b4 <HAL_DMA_Abort+0x5f0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d059      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a46      	ldr	r2, [pc, #280]	; (80073b8 <HAL_DMA_Abort+0x5f4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d054      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a44      	ldr	r2, [pc, #272]	; (80073bc <HAL_DMA_Abort+0x5f8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d04f      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a43      	ldr	r2, [pc, #268]	; (80073c0 <HAL_DMA_Abort+0x5fc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d04a      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a41      	ldr	r2, [pc, #260]	; (80073c4 <HAL_DMA_Abort+0x600>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d045      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a40      	ldr	r2, [pc, #256]	; (80073c8 <HAL_DMA_Abort+0x604>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d040      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a3e      	ldr	r2, [pc, #248]	; (80073cc <HAL_DMA_Abort+0x608>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d03b      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a3d      	ldr	r2, [pc, #244]	; (80073d0 <HAL_DMA_Abort+0x60c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d036      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a3b      	ldr	r2, [pc, #236]	; (80073d4 <HAL_DMA_Abort+0x610>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d031      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a3a      	ldr	r2, [pc, #232]	; (80073d8 <HAL_DMA_Abort+0x614>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d02c      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a38      	ldr	r2, [pc, #224]	; (80073dc <HAL_DMA_Abort+0x618>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d027      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a37      	ldr	r2, [pc, #220]	; (80073e0 <HAL_DMA_Abort+0x61c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d022      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a35      	ldr	r2, [pc, #212]	; (80073e4 <HAL_DMA_Abort+0x620>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01d      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a34      	ldr	r2, [pc, #208]	; (80073e8 <HAL_DMA_Abort+0x624>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d018      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a32      	ldr	r2, [pc, #200]	; (80073ec <HAL_DMA_Abort+0x628>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a31      	ldr	r2, [pc, #196]	; (80073f0 <HAL_DMA_Abort+0x62c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00e      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2f      	ldr	r2, [pc, #188]	; (80073f4 <HAL_DMA_Abort+0x630>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d009      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a2e      	ldr	r2, [pc, #184]	; (80073f8 <HAL_DMA_Abort+0x634>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d004      	beq.n	800734e <HAL_DMA_Abort+0x58a>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2c      	ldr	r2, [pc, #176]	; (80073fc <HAL_DMA_Abort+0x638>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_DMA_Abort+0x58e>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <HAL_DMA_Abort+0x590>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d015      	beq.n	8007384 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007360:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00c      	beq.n	8007384 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007378:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007382:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40020010 	.word	0x40020010
 80073a4:	40020028 	.word	0x40020028
 80073a8:	40020040 	.word	0x40020040
 80073ac:	40020058 	.word	0x40020058
 80073b0:	40020070 	.word	0x40020070
 80073b4:	40020088 	.word	0x40020088
 80073b8:	400200a0 	.word	0x400200a0
 80073bc:	400200b8 	.word	0x400200b8
 80073c0:	40020410 	.word	0x40020410
 80073c4:	40020428 	.word	0x40020428
 80073c8:	40020440 	.word	0x40020440
 80073cc:	40020458 	.word	0x40020458
 80073d0:	40020470 	.word	0x40020470
 80073d4:	40020488 	.word	0x40020488
 80073d8:	400204a0 	.word	0x400204a0
 80073dc:	400204b8 	.word	0x400204b8
 80073e0:	58025408 	.word	0x58025408
 80073e4:	5802541c 	.word	0x5802541c
 80073e8:	58025430 	.word	0x58025430
 80073ec:	58025444 	.word	0x58025444
 80073f0:	58025458 	.word	0x58025458
 80073f4:	5802546c 	.word	0x5802546c
 80073f8:	58025480 	.word	0x58025480
 80073fc:	58025494 	.word	0x58025494

08007400 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e237      	b.n	8007882 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d004      	beq.n	8007428 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2280      	movs	r2, #128	; 0x80
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e22c      	b.n	8007882 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a5c      	ldr	r2, [pc, #368]	; (80075a0 <HAL_DMA_Abort_IT+0x1a0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d04a      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a5b      	ldr	r2, [pc, #364]	; (80075a4 <HAL_DMA_Abort_IT+0x1a4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d045      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a59      	ldr	r2, [pc, #356]	; (80075a8 <HAL_DMA_Abort_IT+0x1a8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d040      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a58      	ldr	r2, [pc, #352]	; (80075ac <HAL_DMA_Abort_IT+0x1ac>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d03b      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a56      	ldr	r2, [pc, #344]	; (80075b0 <HAL_DMA_Abort_IT+0x1b0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d036      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a55      	ldr	r2, [pc, #340]	; (80075b4 <HAL_DMA_Abort_IT+0x1b4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d031      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a53      	ldr	r2, [pc, #332]	; (80075b8 <HAL_DMA_Abort_IT+0x1b8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d02c      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a52      	ldr	r2, [pc, #328]	; (80075bc <HAL_DMA_Abort_IT+0x1bc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d027      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a50      	ldr	r2, [pc, #320]	; (80075c0 <HAL_DMA_Abort_IT+0x1c0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d022      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a4f      	ldr	r2, [pc, #316]	; (80075c4 <HAL_DMA_Abort_IT+0x1c4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d01d      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a4d      	ldr	r2, [pc, #308]	; (80075c8 <HAL_DMA_Abort_IT+0x1c8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d018      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a4c      	ldr	r2, [pc, #304]	; (80075cc <HAL_DMA_Abort_IT+0x1cc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d013      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a4a      	ldr	r2, [pc, #296]	; (80075d0 <HAL_DMA_Abort_IT+0x1d0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00e      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a49      	ldr	r2, [pc, #292]	; (80075d4 <HAL_DMA_Abort_IT+0x1d4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d009      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a47      	ldr	r2, [pc, #284]	; (80075d8 <HAL_DMA_Abort_IT+0x1d8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d004      	beq.n	80074c8 <HAL_DMA_Abort_IT+0xc8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a46      	ldr	r2, [pc, #280]	; (80075dc <HAL_DMA_Abort_IT+0x1dc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d101      	bne.n	80074cc <HAL_DMA_Abort_IT+0xcc>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <HAL_DMA_Abort_IT+0xce>
 80074cc:	2300      	movs	r3, #0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 8086 	beq.w	80075e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2204      	movs	r2, #4
 80074d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2f      	ldr	r2, [pc, #188]	; (80075a0 <HAL_DMA_Abort_IT+0x1a0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d04a      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2e      	ldr	r2, [pc, #184]	; (80075a4 <HAL_DMA_Abort_IT+0x1a4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d045      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a2c      	ldr	r2, [pc, #176]	; (80075a8 <HAL_DMA_Abort_IT+0x1a8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d040      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <HAL_DMA_Abort_IT+0x1ac>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d03b      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <HAL_DMA_Abort_IT+0x1b0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d036      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <HAL_DMA_Abort_IT+0x1b4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d031      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <HAL_DMA_Abort_IT+0x1b8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d02c      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a25      	ldr	r2, [pc, #148]	; (80075bc <HAL_DMA_Abort_IT+0x1bc>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d027      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a23      	ldr	r2, [pc, #140]	; (80075c0 <HAL_DMA_Abort_IT+0x1c0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d022      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a22      	ldr	r2, [pc, #136]	; (80075c4 <HAL_DMA_Abort_IT+0x1c4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d01d      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a20      	ldr	r2, [pc, #128]	; (80075c8 <HAL_DMA_Abort_IT+0x1c8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d018      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1f      	ldr	r2, [pc, #124]	; (80075cc <HAL_DMA_Abort_IT+0x1cc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d013      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1d      	ldr	r2, [pc, #116]	; (80075d0 <HAL_DMA_Abort_IT+0x1d0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00e      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1c      	ldr	r2, [pc, #112]	; (80075d4 <HAL_DMA_Abort_IT+0x1d4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d009      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1a      	ldr	r2, [pc, #104]	; (80075d8 <HAL_DMA_Abort_IT+0x1d8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <HAL_DMA_Abort_IT+0x17c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a19      	ldr	r2, [pc, #100]	; (80075dc <HAL_DMA_Abort_IT+0x1dc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d108      	bne.n	800758e <HAL_DMA_Abort_IT+0x18e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0201 	bic.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e178      	b.n	8007880 <HAL_DMA_Abort_IT+0x480>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0201 	bic.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e16f      	b.n	8007880 <HAL_DMA_Abort_IT+0x480>
 80075a0:	40020010 	.word	0x40020010
 80075a4:	40020028 	.word	0x40020028
 80075a8:	40020040 	.word	0x40020040
 80075ac:	40020058 	.word	0x40020058
 80075b0:	40020070 	.word	0x40020070
 80075b4:	40020088 	.word	0x40020088
 80075b8:	400200a0 	.word	0x400200a0
 80075bc:	400200b8 	.word	0x400200b8
 80075c0:	40020410 	.word	0x40020410
 80075c4:	40020428 	.word	0x40020428
 80075c8:	40020440 	.word	0x40020440
 80075cc:	40020458 	.word	0x40020458
 80075d0:	40020470 	.word	0x40020470
 80075d4:	40020488 	.word	0x40020488
 80075d8:	400204a0 	.word	0x400204a0
 80075dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 020e 	bic.w	r2, r2, #14
 80075ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a6c      	ldr	r2, [pc, #432]	; (80077a8 <HAL_DMA_Abort_IT+0x3a8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d04a      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a6b      	ldr	r2, [pc, #428]	; (80077ac <HAL_DMA_Abort_IT+0x3ac>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d045      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a69      	ldr	r2, [pc, #420]	; (80077b0 <HAL_DMA_Abort_IT+0x3b0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d040      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a68      	ldr	r2, [pc, #416]	; (80077b4 <HAL_DMA_Abort_IT+0x3b4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d03b      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a66      	ldr	r2, [pc, #408]	; (80077b8 <HAL_DMA_Abort_IT+0x3b8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d036      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a65      	ldr	r2, [pc, #404]	; (80077bc <HAL_DMA_Abort_IT+0x3bc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d031      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a63      	ldr	r2, [pc, #396]	; (80077c0 <HAL_DMA_Abort_IT+0x3c0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d02c      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a62      	ldr	r2, [pc, #392]	; (80077c4 <HAL_DMA_Abort_IT+0x3c4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d027      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a60      	ldr	r2, [pc, #384]	; (80077c8 <HAL_DMA_Abort_IT+0x3c8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d022      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a5f      	ldr	r2, [pc, #380]	; (80077cc <HAL_DMA_Abort_IT+0x3cc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d01d      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a5d      	ldr	r2, [pc, #372]	; (80077d0 <HAL_DMA_Abort_IT+0x3d0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d018      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a5c      	ldr	r2, [pc, #368]	; (80077d4 <HAL_DMA_Abort_IT+0x3d4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d013      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a5a      	ldr	r2, [pc, #360]	; (80077d8 <HAL_DMA_Abort_IT+0x3d8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00e      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a59      	ldr	r2, [pc, #356]	; (80077dc <HAL_DMA_Abort_IT+0x3dc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d009      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a57      	ldr	r2, [pc, #348]	; (80077e0 <HAL_DMA_Abort_IT+0x3e0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d004      	beq.n	8007690 <HAL_DMA_Abort_IT+0x290>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a56      	ldr	r2, [pc, #344]	; (80077e4 <HAL_DMA_Abort_IT+0x3e4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d108      	bne.n	80076a2 <HAL_DMA_Abort_IT+0x2a2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0201 	bic.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e007      	b.n	80076b2 <HAL_DMA_Abort_IT+0x2b2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a3c      	ldr	r2, [pc, #240]	; (80077a8 <HAL_DMA_Abort_IT+0x3a8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d072      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a3a      	ldr	r2, [pc, #232]	; (80077ac <HAL_DMA_Abort_IT+0x3ac>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d06d      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a39      	ldr	r2, [pc, #228]	; (80077b0 <HAL_DMA_Abort_IT+0x3b0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d068      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a37      	ldr	r2, [pc, #220]	; (80077b4 <HAL_DMA_Abort_IT+0x3b4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d063      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a36      	ldr	r2, [pc, #216]	; (80077b8 <HAL_DMA_Abort_IT+0x3b8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d05e      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a34      	ldr	r2, [pc, #208]	; (80077bc <HAL_DMA_Abort_IT+0x3bc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d059      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a33      	ldr	r2, [pc, #204]	; (80077c0 <HAL_DMA_Abort_IT+0x3c0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d054      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a31      	ldr	r2, [pc, #196]	; (80077c4 <HAL_DMA_Abort_IT+0x3c4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d04f      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a30      	ldr	r2, [pc, #192]	; (80077c8 <HAL_DMA_Abort_IT+0x3c8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d04a      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a2e      	ldr	r2, [pc, #184]	; (80077cc <HAL_DMA_Abort_IT+0x3cc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d045      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a2d      	ldr	r2, [pc, #180]	; (80077d0 <HAL_DMA_Abort_IT+0x3d0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d040      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a2b      	ldr	r2, [pc, #172]	; (80077d4 <HAL_DMA_Abort_IT+0x3d4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d03b      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <HAL_DMA_Abort_IT+0x3d8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d036      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a28      	ldr	r2, [pc, #160]	; (80077dc <HAL_DMA_Abort_IT+0x3dc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d031      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a27      	ldr	r2, [pc, #156]	; (80077e0 <HAL_DMA_Abort_IT+0x3e0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d02c      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a25      	ldr	r2, [pc, #148]	; (80077e4 <HAL_DMA_Abort_IT+0x3e4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d027      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a24      	ldr	r2, [pc, #144]	; (80077e8 <HAL_DMA_Abort_IT+0x3e8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d022      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a22      	ldr	r2, [pc, #136]	; (80077ec <HAL_DMA_Abort_IT+0x3ec>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d01d      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a21      	ldr	r2, [pc, #132]	; (80077f0 <HAL_DMA_Abort_IT+0x3f0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d018      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <HAL_DMA_Abort_IT+0x3f4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1e      	ldr	r2, [pc, #120]	; (80077f8 <HAL_DMA_Abort_IT+0x3f8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <HAL_DMA_Abort_IT+0x3fc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <HAL_DMA_Abort_IT+0x400>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_DMA_Abort_IT+0x3a2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a19      	ldr	r2, [pc, #100]	; (8007804 <HAL_DMA_Abort_IT+0x404>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d132      	bne.n	8007808 <HAL_DMA_Abort_IT+0x408>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e031      	b.n	800780a <HAL_DMA_Abort_IT+0x40a>
 80077a6:	bf00      	nop
 80077a8:	40020010 	.word	0x40020010
 80077ac:	40020028 	.word	0x40020028
 80077b0:	40020040 	.word	0x40020040
 80077b4:	40020058 	.word	0x40020058
 80077b8:	40020070 	.word	0x40020070
 80077bc:	40020088 	.word	0x40020088
 80077c0:	400200a0 	.word	0x400200a0
 80077c4:	400200b8 	.word	0x400200b8
 80077c8:	40020410 	.word	0x40020410
 80077cc:	40020428 	.word	0x40020428
 80077d0:	40020440 	.word	0x40020440
 80077d4:	40020458 	.word	0x40020458
 80077d8:	40020470 	.word	0x40020470
 80077dc:	40020488 	.word	0x40020488
 80077e0:	400204a0 	.word	0x400204a0
 80077e4:	400204b8 	.word	0x400204b8
 80077e8:	58025408 	.word	0x58025408
 80077ec:	5802541c 	.word	0x5802541c
 80077f0:	58025430 	.word	0x58025430
 80077f4:	58025444 	.word	0x58025444
 80077f8:	58025458 	.word	0x58025458
 80077fc:	5802546c 	.word	0x5802546c
 8007800:	58025480 	.word	0x58025480
 8007804:	58025494 	.word	0x58025494
 8007808:	2300      	movs	r3, #0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d028      	beq.n	8007860 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800781c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007822:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2201      	movs	r2, #1
 800782e:	409a      	lsls	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800783c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00c      	beq.n	8007860 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007854:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800785e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop

0800788c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	; 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007898:	4b67      	ldr	r3, [pc, #412]	; (8007a38 <HAL_DMA_IRQHandler+0x1ac>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a67      	ldr	r2, [pc, #412]	; (8007a3c <HAL_DMA_IRQHandler+0x1b0>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	0a9b      	lsrs	r3, r3, #10
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a5f      	ldr	r2, [pc, #380]	; (8007a40 <HAL_DMA_IRQHandler+0x1b4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d04a      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a5d      	ldr	r2, [pc, #372]	; (8007a44 <HAL_DMA_IRQHandler+0x1b8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d045      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a5c      	ldr	r2, [pc, #368]	; (8007a48 <HAL_DMA_IRQHandler+0x1bc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d040      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a5a      	ldr	r2, [pc, #360]	; (8007a4c <HAL_DMA_IRQHandler+0x1c0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d03b      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a59      	ldr	r2, [pc, #356]	; (8007a50 <HAL_DMA_IRQHandler+0x1c4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d036      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a57      	ldr	r2, [pc, #348]	; (8007a54 <HAL_DMA_IRQHandler+0x1c8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d031      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a56      	ldr	r2, [pc, #344]	; (8007a58 <HAL_DMA_IRQHandler+0x1cc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d02c      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a54      	ldr	r2, [pc, #336]	; (8007a5c <HAL_DMA_IRQHandler+0x1d0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d027      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a53      	ldr	r2, [pc, #332]	; (8007a60 <HAL_DMA_IRQHandler+0x1d4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d022      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a51      	ldr	r2, [pc, #324]	; (8007a64 <HAL_DMA_IRQHandler+0x1d8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01d      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a50      	ldr	r2, [pc, #320]	; (8007a68 <HAL_DMA_IRQHandler+0x1dc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d018      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a4e      	ldr	r2, [pc, #312]	; (8007a6c <HAL_DMA_IRQHandler+0x1e0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d013      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a4d      	ldr	r2, [pc, #308]	; (8007a70 <HAL_DMA_IRQHandler+0x1e4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00e      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a4b      	ldr	r2, [pc, #300]	; (8007a74 <HAL_DMA_IRQHandler+0x1e8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d009      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a4a      	ldr	r2, [pc, #296]	; (8007a78 <HAL_DMA_IRQHandler+0x1ec>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d004      	beq.n	800795e <HAL_DMA_IRQHandler+0xd2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a48      	ldr	r2, [pc, #288]	; (8007a7c <HAL_DMA_IRQHandler+0x1f0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d101      	bne.n	8007962 <HAL_DMA_IRQHandler+0xd6>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <HAL_DMA_IRQHandler+0xd8>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 842b 	beq.w	80081c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	2208      	movs	r2, #8
 8007974:	409a      	lsls	r2, r3
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	4013      	ands	r3, r2
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80a2 	beq.w	8007ac4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a2e      	ldr	r2, [pc, #184]	; (8007a40 <HAL_DMA_IRQHandler+0x1b4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d04a      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2d      	ldr	r2, [pc, #180]	; (8007a44 <HAL_DMA_IRQHandler+0x1b8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d045      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a2b      	ldr	r2, [pc, #172]	; (8007a48 <HAL_DMA_IRQHandler+0x1bc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d040      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a2a      	ldr	r2, [pc, #168]	; (8007a4c <HAL_DMA_IRQHandler+0x1c0>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d03b      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a28      	ldr	r2, [pc, #160]	; (8007a50 <HAL_DMA_IRQHandler+0x1c4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d036      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a27      	ldr	r2, [pc, #156]	; (8007a54 <HAL_DMA_IRQHandler+0x1c8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d031      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a25      	ldr	r2, [pc, #148]	; (8007a58 <HAL_DMA_IRQHandler+0x1cc>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d02c      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a24      	ldr	r2, [pc, #144]	; (8007a5c <HAL_DMA_IRQHandler+0x1d0>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d027      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a22      	ldr	r2, [pc, #136]	; (8007a60 <HAL_DMA_IRQHandler+0x1d4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d022      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a21      	ldr	r2, [pc, #132]	; (8007a64 <HAL_DMA_IRQHandler+0x1d8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d01d      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a1f      	ldr	r2, [pc, #124]	; (8007a68 <HAL_DMA_IRQHandler+0x1dc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d018      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <HAL_DMA_IRQHandler+0x1e0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d013      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <HAL_DMA_IRQHandler+0x1e4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00e      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <HAL_DMA_IRQHandler+0x1e8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <HAL_DMA_IRQHandler+0x1ec>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x194>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <HAL_DMA_IRQHandler+0x1f0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d12f      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x1f4>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0304 	and.w	r3, r3, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	e02e      	b.n	8007a94 <HAL_DMA_IRQHandler+0x208>
 8007a36:	bf00      	nop
 8007a38:	24000084 	.word	0x24000084
 8007a3c:	1b4e81b5 	.word	0x1b4e81b5
 8007a40:	40020010 	.word	0x40020010
 8007a44:	40020028 	.word	0x40020028
 8007a48:	40020040 	.word	0x40020040
 8007a4c:	40020058 	.word	0x40020058
 8007a50:	40020070 	.word	0x40020070
 8007a54:	40020088 	.word	0x40020088
 8007a58:	400200a0 	.word	0x400200a0
 8007a5c:	400200b8 	.word	0x400200b8
 8007a60:	40020410 	.word	0x40020410
 8007a64:	40020428 	.word	0x40020428
 8007a68:	40020440 	.word	0x40020440
 8007a6c:	40020458 	.word	0x40020458
 8007a70:	40020470 	.word	0x40020470
 8007a74:	40020488 	.word	0x40020488
 8007a78:	400204a0 	.word	0x400204a0
 8007a7c:	400204b8 	.word	0x400204b8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf14      	ite	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	2300      	moveq	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d015      	beq.n	8007ac4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0204 	bic.w	r2, r2, #4
 8007aa6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abc:	f043 0201 	orr.w	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d06e      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a69      	ldr	r2, [pc, #420]	; (8007c84 <HAL_DMA_IRQHandler+0x3f8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d04a      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a67      	ldr	r2, [pc, #412]	; (8007c88 <HAL_DMA_IRQHandler+0x3fc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d045      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a66      	ldr	r2, [pc, #408]	; (8007c8c <HAL_DMA_IRQHandler+0x400>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d040      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a64      	ldr	r2, [pc, #400]	; (8007c90 <HAL_DMA_IRQHandler+0x404>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d03b      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a63      	ldr	r2, [pc, #396]	; (8007c94 <HAL_DMA_IRQHandler+0x408>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d036      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a61      	ldr	r2, [pc, #388]	; (8007c98 <HAL_DMA_IRQHandler+0x40c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d031      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a60      	ldr	r2, [pc, #384]	; (8007c9c <HAL_DMA_IRQHandler+0x410>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d02c      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a5e      	ldr	r2, [pc, #376]	; (8007ca0 <HAL_DMA_IRQHandler+0x414>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d027      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a5d      	ldr	r2, [pc, #372]	; (8007ca4 <HAL_DMA_IRQHandler+0x418>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d022      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a5b      	ldr	r2, [pc, #364]	; (8007ca8 <HAL_DMA_IRQHandler+0x41c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01d      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a5a      	ldr	r2, [pc, #360]	; (8007cac <HAL_DMA_IRQHandler+0x420>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d018      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a58      	ldr	r2, [pc, #352]	; (8007cb0 <HAL_DMA_IRQHandler+0x424>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d013      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a57      	ldr	r2, [pc, #348]	; (8007cb4 <HAL_DMA_IRQHandler+0x428>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00e      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a55      	ldr	r2, [pc, #340]	; (8007cb8 <HAL_DMA_IRQHandler+0x42c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a54      	ldr	r2, [pc, #336]	; (8007cbc <HAL_DMA_IRQHandler+0x430>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d004      	beq.n	8007b7a <HAL_DMA_IRQHandler+0x2ee>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a52      	ldr	r2, [pc, #328]	; (8007cc0 <HAL_DMA_IRQHandler+0x434>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d10a      	bne.n	8007b90 <HAL_DMA_IRQHandler+0x304>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e003      	b.n	8007b98 <HAL_DMA_IRQHandler+0x30c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2300      	movs	r3, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00d      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	409a      	lsls	r2, r3
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	f043 0202 	orr.w	r2, r3, #2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2204      	movs	r2, #4
 8007bc2:	409a      	lsls	r2, r3
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 808f 	beq.w	8007cec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a2c      	ldr	r2, [pc, #176]	; (8007c84 <HAL_DMA_IRQHandler+0x3f8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d04a      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a2a      	ldr	r2, [pc, #168]	; (8007c88 <HAL_DMA_IRQHandler+0x3fc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d045      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a29      	ldr	r2, [pc, #164]	; (8007c8c <HAL_DMA_IRQHandler+0x400>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d040      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a27      	ldr	r2, [pc, #156]	; (8007c90 <HAL_DMA_IRQHandler+0x404>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d03b      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <HAL_DMA_IRQHandler+0x408>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d036      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a24      	ldr	r2, [pc, #144]	; (8007c98 <HAL_DMA_IRQHandler+0x40c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d031      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a23      	ldr	r2, [pc, #140]	; (8007c9c <HAL_DMA_IRQHandler+0x410>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d02c      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a21      	ldr	r2, [pc, #132]	; (8007ca0 <HAL_DMA_IRQHandler+0x414>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d027      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a20      	ldr	r2, [pc, #128]	; (8007ca4 <HAL_DMA_IRQHandler+0x418>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d022      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <HAL_DMA_IRQHandler+0x41c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d01d      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1d      	ldr	r2, [pc, #116]	; (8007cac <HAL_DMA_IRQHandler+0x420>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d018      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <HAL_DMA_IRQHandler+0x424>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <HAL_DMA_IRQHandler+0x428>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a18      	ldr	r2, [pc, #96]	; (8007cb8 <HAL_DMA_IRQHandler+0x42c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a17      	ldr	r2, [pc, #92]	; (8007cbc <HAL_DMA_IRQHandler+0x430>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_DMA_IRQHandler+0x3e2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a15      	ldr	r2, [pc, #84]	; (8007cc0 <HAL_DMA_IRQHandler+0x434>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d12a      	bne.n	8007cc4 <HAL_DMA_IRQHandler+0x438>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e023      	b.n	8007ccc <HAL_DMA_IRQHandler+0x440>
 8007c84:	40020010 	.word	0x40020010
 8007c88:	40020028 	.word	0x40020028
 8007c8c:	40020040 	.word	0x40020040
 8007c90:	40020058 	.word	0x40020058
 8007c94:	40020070 	.word	0x40020070
 8007c98:	40020088 	.word	0x40020088
 8007c9c:	400200a0 	.word	0x400200a0
 8007ca0:	400200b8 	.word	0x400200b8
 8007ca4:	40020410 	.word	0x40020410
 8007ca8:	40020428 	.word	0x40020428
 8007cac:	40020440 	.word	0x40020440
 8007cb0:	40020458 	.word	0x40020458
 8007cb4:	40020470 	.word	0x40020470
 8007cb8:	40020488 	.word	0x40020488
 8007cbc:	400204a0 	.word	0x400204a0
 8007cc0:	400204b8 	.word	0x400204b8
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00d      	beq.n	8007cec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	2204      	movs	r2, #4
 8007cda:	409a      	lsls	r2, r3
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce4:	f043 0204 	orr.w	r2, r3, #4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	2210      	movs	r2, #16
 8007cf6:	409a      	lsls	r2, r3
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80a6 	beq.w	8007e4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a85      	ldr	r2, [pc, #532]	; (8007f1c <HAL_DMA_IRQHandler+0x690>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d04a      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a83      	ldr	r2, [pc, #524]	; (8007f20 <HAL_DMA_IRQHandler+0x694>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d045      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a82      	ldr	r2, [pc, #520]	; (8007f24 <HAL_DMA_IRQHandler+0x698>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d040      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a80      	ldr	r2, [pc, #512]	; (8007f28 <HAL_DMA_IRQHandler+0x69c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d03b      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a7f      	ldr	r2, [pc, #508]	; (8007f2c <HAL_DMA_IRQHandler+0x6a0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d036      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a7d      	ldr	r2, [pc, #500]	; (8007f30 <HAL_DMA_IRQHandler+0x6a4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d031      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a7c      	ldr	r2, [pc, #496]	; (8007f34 <HAL_DMA_IRQHandler+0x6a8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d02c      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a7a      	ldr	r2, [pc, #488]	; (8007f38 <HAL_DMA_IRQHandler+0x6ac>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d027      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a79      	ldr	r2, [pc, #484]	; (8007f3c <HAL_DMA_IRQHandler+0x6b0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d022      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a77      	ldr	r2, [pc, #476]	; (8007f40 <HAL_DMA_IRQHandler+0x6b4>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d01d      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a76      	ldr	r2, [pc, #472]	; (8007f44 <HAL_DMA_IRQHandler+0x6b8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d018      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a74      	ldr	r2, [pc, #464]	; (8007f48 <HAL_DMA_IRQHandler+0x6bc>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d013      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a73      	ldr	r2, [pc, #460]	; (8007f4c <HAL_DMA_IRQHandler+0x6c0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a71      	ldr	r2, [pc, #452]	; (8007f50 <HAL_DMA_IRQHandler+0x6c4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d009      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a70      	ldr	r2, [pc, #448]	; (8007f54 <HAL_DMA_IRQHandler+0x6c8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x516>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a6e      	ldr	r2, [pc, #440]	; (8007f58 <HAL_DMA_IRQHandler+0x6cc>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10a      	bne.n	8007db8 <HAL_DMA_IRQHandler+0x52c>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	e009      	b.n	8007dcc <HAL_DMA_IRQHandler+0x540>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bf14      	ite	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d03e      	beq.n	8007e4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	2210      	movs	r2, #16
 8007dda:	409a      	lsls	r2, r3
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d108      	bne.n	8007e0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d024      	beq.n	8007e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
 8007e0c:	e01f      	b.n	8007e4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01b      	beq.n	8007e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
 8007e1e:	e016      	b.n	8007e4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d107      	bne.n	8007e3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0208 	bic.w	r2, r2, #8
 8007e3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2220      	movs	r2, #32
 8007e58:	409a      	lsls	r2, r3
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8110 	beq.w	8008084 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <HAL_DMA_IRQHandler+0x690>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d04a      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a2b      	ldr	r2, [pc, #172]	; (8007f20 <HAL_DMA_IRQHandler+0x694>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d045      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a29      	ldr	r2, [pc, #164]	; (8007f24 <HAL_DMA_IRQHandler+0x698>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d040      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a28      	ldr	r2, [pc, #160]	; (8007f28 <HAL_DMA_IRQHandler+0x69c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d03b      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a26      	ldr	r2, [pc, #152]	; (8007f2c <HAL_DMA_IRQHandler+0x6a0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d036      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a25      	ldr	r2, [pc, #148]	; (8007f30 <HAL_DMA_IRQHandler+0x6a4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d031      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <HAL_DMA_IRQHandler+0x6a8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d02c      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a22      	ldr	r2, [pc, #136]	; (8007f38 <HAL_DMA_IRQHandler+0x6ac>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d027      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <HAL_DMA_IRQHandler+0x6b0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d022      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <HAL_DMA_IRQHandler+0x6b4>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d01d      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <HAL_DMA_IRQHandler+0x6b8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d018      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a1c      	ldr	r2, [pc, #112]	; (8007f48 <HAL_DMA_IRQHandler+0x6bc>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a1a      	ldr	r2, [pc, #104]	; (8007f4c <HAL_DMA_IRQHandler+0x6c0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00e      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a19      	ldr	r2, [pc, #100]	; (8007f50 <HAL_DMA_IRQHandler+0x6c4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d009      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a17      	ldr	r2, [pc, #92]	; (8007f54 <HAL_DMA_IRQHandler+0x6c8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d004      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x678>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a16      	ldr	r2, [pc, #88]	; (8007f58 <HAL_DMA_IRQHandler+0x6cc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d12b      	bne.n	8007f5c <HAL_DMA_IRQHandler+0x6d0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bf14      	ite	ne
 8007f12:	2301      	movne	r3, #1
 8007f14:	2300      	moveq	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	e02a      	b.n	8007f70 <HAL_DMA_IRQHandler+0x6e4>
 8007f1a:	bf00      	nop
 8007f1c:	40020010 	.word	0x40020010
 8007f20:	40020028 	.word	0x40020028
 8007f24:	40020040 	.word	0x40020040
 8007f28:	40020058 	.word	0x40020058
 8007f2c:	40020070 	.word	0x40020070
 8007f30:	40020088 	.word	0x40020088
 8007f34:	400200a0 	.word	0x400200a0
 8007f38:	400200b8 	.word	0x400200b8
 8007f3c:	40020410 	.word	0x40020410
 8007f40:	40020428 	.word	0x40020428
 8007f44:	40020440 	.word	0x40020440
 8007f48:	40020458 	.word	0x40020458
 8007f4c:	40020470 	.word	0x40020470
 8007f50:	40020488 	.word	0x40020488
 8007f54:	400204a0 	.word	0x400204a0
 8007f58:	400204b8 	.word	0x400204b8
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bf14      	ite	ne
 8007f6a:	2301      	movne	r3, #1
 8007f6c:	2300      	moveq	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8087 	beq.w	8008084 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	2220      	movs	r2, #32
 8007f80:	409a      	lsls	r2, r3
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d139      	bne.n	8008006 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0216 	bic.w	r2, r2, #22
 8007fa0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	695a      	ldr	r2, [r3, #20]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <HAL_DMA_IRQHandler+0x736>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0208 	bic.w	r2, r2, #8
 8007fd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	223f      	movs	r2, #63	; 0x3f
 8007fdc:	409a      	lsls	r2, r3
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 834a 	beq.w	8008690 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
          }
          return;
 8008004:	e344      	b.n	8008690 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d018      	beq.n	8008046 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d108      	bne.n	8008034 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	2b00      	cmp	r3, #0
 8008028:	d02c      	beq.n	8008084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
 8008032:	e027      	b.n	8008084 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d023      	beq.n	8008084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
 8008044:	e01e      	b.n	8008084 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10f      	bne.n	8008074 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0210 	bic.w	r2, r2, #16
 8008062:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8306 	beq.w	800869a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 8088 	beq.w	80081ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2204      	movs	r2, #4
 80080a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a7a      	ldr	r2, [pc, #488]	; (8008294 <HAL_DMA_IRQHandler+0xa08>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d04a      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a79      	ldr	r2, [pc, #484]	; (8008298 <HAL_DMA_IRQHandler+0xa0c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d045      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a77      	ldr	r2, [pc, #476]	; (800829c <HAL_DMA_IRQHandler+0xa10>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d040      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a76      	ldr	r2, [pc, #472]	; (80082a0 <HAL_DMA_IRQHandler+0xa14>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d03b      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a74      	ldr	r2, [pc, #464]	; (80082a4 <HAL_DMA_IRQHandler+0xa18>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d036      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a73      	ldr	r2, [pc, #460]	; (80082a8 <HAL_DMA_IRQHandler+0xa1c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d031      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a71      	ldr	r2, [pc, #452]	; (80082ac <HAL_DMA_IRQHandler+0xa20>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d02c      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a70      	ldr	r2, [pc, #448]	; (80082b0 <HAL_DMA_IRQHandler+0xa24>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d027      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a6e      	ldr	r2, [pc, #440]	; (80082b4 <HAL_DMA_IRQHandler+0xa28>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d022      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a6d      	ldr	r2, [pc, #436]	; (80082b8 <HAL_DMA_IRQHandler+0xa2c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d01d      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a6b      	ldr	r2, [pc, #428]	; (80082bc <HAL_DMA_IRQHandler+0xa30>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d018      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a6a      	ldr	r2, [pc, #424]	; (80082c0 <HAL_DMA_IRQHandler+0xa34>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d013      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a68      	ldr	r2, [pc, #416]	; (80082c4 <HAL_DMA_IRQHandler+0xa38>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00e      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a67      	ldr	r2, [pc, #412]	; (80082c8 <HAL_DMA_IRQHandler+0xa3c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d009      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a65      	ldr	r2, [pc, #404]	; (80082cc <HAL_DMA_IRQHandler+0xa40>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <HAL_DMA_IRQHandler+0x8b8>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a64      	ldr	r2, [pc, #400]	; (80082d0 <HAL_DMA_IRQHandler+0xa44>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d108      	bne.n	8008156 <HAL_DMA_IRQHandler+0x8ca>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0201 	bic.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e007      	b.n	8008166 <HAL_DMA_IRQHandler+0x8da>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816e:	429a      	cmp	r2, r3
 8008170:	d307      	bcc.n	8008182 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1f2      	bne.n	8008166 <HAL_DMA_IRQHandler+0x8da>
 8008180:	e000      	b.n	8008184 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008182:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2203      	movs	r2, #3
 8008196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800819a:	e003      	b.n	80081a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8272 	beq.w	800869a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	e26c      	b.n	800869a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a43      	ldr	r2, [pc, #268]	; (80082d4 <HAL_DMA_IRQHandler+0xa48>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d022      	beq.n	8008210 <HAL_DMA_IRQHandler+0x984>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a42      	ldr	r2, [pc, #264]	; (80082d8 <HAL_DMA_IRQHandler+0xa4c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d01d      	beq.n	8008210 <HAL_DMA_IRQHandler+0x984>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a40      	ldr	r2, [pc, #256]	; (80082dc <HAL_DMA_IRQHandler+0xa50>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d018      	beq.n	8008210 <HAL_DMA_IRQHandler+0x984>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a3f      	ldr	r2, [pc, #252]	; (80082e0 <HAL_DMA_IRQHandler+0xa54>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <HAL_DMA_IRQHandler+0x984>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3d      	ldr	r2, [pc, #244]	; (80082e4 <HAL_DMA_IRQHandler+0xa58>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00e      	beq.n	8008210 <HAL_DMA_IRQHandler+0x984>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a3c      	ldr	r2, [pc, #240]	; (80082e8 <HAL_DMA_IRQHandler+0xa5c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d009      	beq.n	8008210 <HAL_DMA_IRQHandler+0x984>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a3a      	ldr	r2, [pc, #232]	; (80082ec <HAL_DMA_IRQHandler+0xa60>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <HAL_DMA_IRQHandler+0x984>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a39      	ldr	r2, [pc, #228]	; (80082f0 <HAL_DMA_IRQHandler+0xa64>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d101      	bne.n	8008214 <HAL_DMA_IRQHandler+0x988>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <HAL_DMA_IRQHandler+0x98a>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 823f 	beq.w	800869a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008228:	f003 031f 	and.w	r3, r3, #31
 800822c:	2204      	movs	r2, #4
 800822e:	409a      	lsls	r2, r3
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	4013      	ands	r3, r2
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 80cd 	beq.w	80083d4 <HAL_DMA_IRQHandler+0xb48>
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80c7 	beq.w	80083d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824a:	f003 031f 	and.w	r3, r3, #31
 800824e:	2204      	movs	r2, #4
 8008250:	409a      	lsls	r2, r3
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d049      	beq.n	80082f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 8210 	beq.w	8008694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800827c:	e20a      	b.n	8008694 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 8206 	beq.w	8008694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008290:	e200      	b.n	8008694 <HAL_DMA_IRQHandler+0xe08>
 8008292:	bf00      	nop
 8008294:	40020010 	.word	0x40020010
 8008298:	40020028 	.word	0x40020028
 800829c:	40020040 	.word	0x40020040
 80082a0:	40020058 	.word	0x40020058
 80082a4:	40020070 	.word	0x40020070
 80082a8:	40020088 	.word	0x40020088
 80082ac:	400200a0 	.word	0x400200a0
 80082b0:	400200b8 	.word	0x400200b8
 80082b4:	40020410 	.word	0x40020410
 80082b8:	40020428 	.word	0x40020428
 80082bc:	40020440 	.word	0x40020440
 80082c0:	40020458 	.word	0x40020458
 80082c4:	40020470 	.word	0x40020470
 80082c8:	40020488 	.word	0x40020488
 80082cc:	400204a0 	.word	0x400204a0
 80082d0:	400204b8 	.word	0x400204b8
 80082d4:	58025408 	.word	0x58025408
 80082d8:	5802541c 	.word	0x5802541c
 80082dc:	58025430 	.word	0x58025430
 80082e0:	58025444 	.word	0x58025444
 80082e4:	58025458 	.word	0x58025458
 80082e8:	5802546c 	.word	0x5802546c
 80082ec:	58025480 	.word	0x58025480
 80082f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d160      	bne.n	80083c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a7f      	ldr	r2, [pc, #508]	; (8008500 <HAL_DMA_IRQHandler+0xc74>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d04a      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a7d      	ldr	r2, [pc, #500]	; (8008504 <HAL_DMA_IRQHandler+0xc78>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d045      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a7c      	ldr	r2, [pc, #496]	; (8008508 <HAL_DMA_IRQHandler+0xc7c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d040      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a7a      	ldr	r2, [pc, #488]	; (800850c <HAL_DMA_IRQHandler+0xc80>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d03b      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a79      	ldr	r2, [pc, #484]	; (8008510 <HAL_DMA_IRQHandler+0xc84>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d036      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a77      	ldr	r2, [pc, #476]	; (8008514 <HAL_DMA_IRQHandler+0xc88>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d031      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a76      	ldr	r2, [pc, #472]	; (8008518 <HAL_DMA_IRQHandler+0xc8c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d02c      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a74      	ldr	r2, [pc, #464]	; (800851c <HAL_DMA_IRQHandler+0xc90>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d027      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a73      	ldr	r2, [pc, #460]	; (8008520 <HAL_DMA_IRQHandler+0xc94>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d022      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a71      	ldr	r2, [pc, #452]	; (8008524 <HAL_DMA_IRQHandler+0xc98>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d01d      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a70      	ldr	r2, [pc, #448]	; (8008528 <HAL_DMA_IRQHandler+0xc9c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d018      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a6e      	ldr	r2, [pc, #440]	; (800852c <HAL_DMA_IRQHandler+0xca0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a6d      	ldr	r2, [pc, #436]	; (8008530 <HAL_DMA_IRQHandler+0xca4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00e      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a6b      	ldr	r2, [pc, #428]	; (8008534 <HAL_DMA_IRQHandler+0xca8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d009      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a6a      	ldr	r2, [pc, #424]	; (8008538 <HAL_DMA_IRQHandler+0xcac>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d004      	beq.n	800839e <HAL_DMA_IRQHandler+0xb12>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a68      	ldr	r2, [pc, #416]	; (800853c <HAL_DMA_IRQHandler+0xcb0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d108      	bne.n	80083b0 <HAL_DMA_IRQHandler+0xb24>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0208 	bic.w	r2, r2, #8
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e007      	b.n	80083c0 <HAL_DMA_IRQHandler+0xb34>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0204 	bic.w	r2, r2, #4
 80083be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8165 	beq.w	8008694 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083d2:	e15f      	b.n	8008694 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	f003 031f 	and.w	r3, r3, #31
 80083dc:	2202      	movs	r2, #2
 80083de:	409a      	lsls	r2, r3
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	4013      	ands	r3, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80c5 	beq.w	8008574 <HAL_DMA_IRQHandler+0xce8>
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 80bf 	beq.w	8008574 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2202      	movs	r2, #2
 8008400:	409a      	lsls	r2, r3
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 813a 	beq.w	8008698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800842c:	e134      	b.n	8008698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8130 	beq.w	8008698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008440:	e12a      	b.n	8008698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	f040 8089 	bne.w	8008560 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a2b      	ldr	r2, [pc, #172]	; (8008500 <HAL_DMA_IRQHandler+0xc74>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d04a      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a29      	ldr	r2, [pc, #164]	; (8008504 <HAL_DMA_IRQHandler+0xc78>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d045      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a28      	ldr	r2, [pc, #160]	; (8008508 <HAL_DMA_IRQHandler+0xc7c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d040      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a26      	ldr	r2, [pc, #152]	; (800850c <HAL_DMA_IRQHandler+0xc80>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d03b      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a25      	ldr	r2, [pc, #148]	; (8008510 <HAL_DMA_IRQHandler+0xc84>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d036      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a23      	ldr	r2, [pc, #140]	; (8008514 <HAL_DMA_IRQHandler+0xc88>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d031      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a22      	ldr	r2, [pc, #136]	; (8008518 <HAL_DMA_IRQHandler+0xc8c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d02c      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a20      	ldr	r2, [pc, #128]	; (800851c <HAL_DMA_IRQHandler+0xc90>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d027      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a1f      	ldr	r2, [pc, #124]	; (8008520 <HAL_DMA_IRQHandler+0xc94>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d022      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <HAL_DMA_IRQHandler+0xc98>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d01d      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a1c      	ldr	r2, [pc, #112]	; (8008528 <HAL_DMA_IRQHandler+0xc9c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d018      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a1a      	ldr	r2, [pc, #104]	; (800852c <HAL_DMA_IRQHandler+0xca0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d013      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a19      	ldr	r2, [pc, #100]	; (8008530 <HAL_DMA_IRQHandler+0xca4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00e      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a17      	ldr	r2, [pc, #92]	; (8008534 <HAL_DMA_IRQHandler+0xca8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d009      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a16      	ldr	r2, [pc, #88]	; (8008538 <HAL_DMA_IRQHandler+0xcac>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d004      	beq.n	80084ee <HAL_DMA_IRQHandler+0xc62>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a14      	ldr	r2, [pc, #80]	; (800853c <HAL_DMA_IRQHandler+0xcb0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d128      	bne.n	8008540 <HAL_DMA_IRQHandler+0xcb4>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0214 	bic.w	r2, r2, #20
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e027      	b.n	8008550 <HAL_DMA_IRQHandler+0xcc4>
 8008500:	40020010 	.word	0x40020010
 8008504:	40020028 	.word	0x40020028
 8008508:	40020040 	.word	0x40020040
 800850c:	40020058 	.word	0x40020058
 8008510:	40020070 	.word	0x40020070
 8008514:	40020088 	.word	0x40020088
 8008518:	400200a0 	.word	0x400200a0
 800851c:	400200b8 	.word	0x400200b8
 8008520:	40020410 	.word	0x40020410
 8008524:	40020428 	.word	0x40020428
 8008528:	40020440 	.word	0x40020440
 800852c:	40020458 	.word	0x40020458
 8008530:	40020470 	.word	0x40020470
 8008534:	40020488 	.word	0x40020488
 8008538:	400204a0 	.word	0x400204a0
 800853c:	400204b8 	.word	0x400204b8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 020a 	bic.w	r2, r2, #10
 800854e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8097 	beq.w	8008698 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008572:	e091      	b.n	8008698 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2208      	movs	r2, #8
 800857e:	409a      	lsls	r2, r3
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8088 	beq.w	800869a <HAL_DMA_IRQHandler+0xe0e>
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 8082 	beq.w	800869a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a41      	ldr	r2, [pc, #260]	; (80086a0 <HAL_DMA_IRQHandler+0xe14>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d04a      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a3f      	ldr	r2, [pc, #252]	; (80086a4 <HAL_DMA_IRQHandler+0xe18>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d045      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a3e      	ldr	r2, [pc, #248]	; (80086a8 <HAL_DMA_IRQHandler+0xe1c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d040      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a3c      	ldr	r2, [pc, #240]	; (80086ac <HAL_DMA_IRQHandler+0xe20>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d03b      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a3b      	ldr	r2, [pc, #236]	; (80086b0 <HAL_DMA_IRQHandler+0xe24>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d036      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a39      	ldr	r2, [pc, #228]	; (80086b4 <HAL_DMA_IRQHandler+0xe28>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d031      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a38      	ldr	r2, [pc, #224]	; (80086b8 <HAL_DMA_IRQHandler+0xe2c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d02c      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a36      	ldr	r2, [pc, #216]	; (80086bc <HAL_DMA_IRQHandler+0xe30>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d027      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a35      	ldr	r2, [pc, #212]	; (80086c0 <HAL_DMA_IRQHandler+0xe34>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d022      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a33      	ldr	r2, [pc, #204]	; (80086c4 <HAL_DMA_IRQHandler+0xe38>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d01d      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a32      	ldr	r2, [pc, #200]	; (80086c8 <HAL_DMA_IRQHandler+0xe3c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d018      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a30      	ldr	r2, [pc, #192]	; (80086cc <HAL_DMA_IRQHandler+0xe40>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d013      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a2f      	ldr	r2, [pc, #188]	; (80086d0 <HAL_DMA_IRQHandler+0xe44>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00e      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a2d      	ldr	r2, [pc, #180]	; (80086d4 <HAL_DMA_IRQHandler+0xe48>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a2c      	ldr	r2, [pc, #176]	; (80086d8 <HAL_DMA_IRQHandler+0xe4c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d004      	beq.n	8008636 <HAL_DMA_IRQHandler+0xdaa>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a2a      	ldr	r2, [pc, #168]	; (80086dc <HAL_DMA_IRQHandler+0xe50>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d108      	bne.n	8008648 <HAL_DMA_IRQHandler+0xdbc>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 021c 	bic.w	r2, r2, #28
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	e007      	b.n	8008658 <HAL_DMA_IRQHandler+0xdcc>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 020e 	bic.w	r2, r2, #14
 8008656:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	2201      	movs	r2, #1
 8008662:	409a      	lsls	r2, r3
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d009      	beq.n	800869a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
 800868e:	e004      	b.n	800869a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008690:	bf00      	nop
 8008692:	e002      	b.n	800869a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008694:	bf00      	nop
 8008696:	e000      	b.n	800869a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008698:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800869a:	3728      	adds	r7, #40	; 0x28
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40020010 	.word	0x40020010
 80086a4:	40020028 	.word	0x40020028
 80086a8:	40020040 	.word	0x40020040
 80086ac:	40020058 	.word	0x40020058
 80086b0:	40020070 	.word	0x40020070
 80086b4:	40020088 	.word	0x40020088
 80086b8:	400200a0 	.word	0x400200a0
 80086bc:	400200b8 	.word	0x400200b8
 80086c0:	40020410 	.word	0x40020410
 80086c4:	40020428 	.word	0x40020428
 80086c8:	40020440 	.word	0x40020440
 80086cc:	40020458 	.word	0x40020458
 80086d0:	40020470 	.word	0x40020470
 80086d4:	40020488 	.word	0x40020488
 80086d8:	400204a0 	.word	0x400204a0
 80086dc:	400204b8 	.word	0x400204b8

080086e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008710:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a7f      	ldr	r2, [pc, #508]	; (8008914 <DMA_SetConfig+0x21c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d072      	beq.n	8008802 <DMA_SetConfig+0x10a>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a7d      	ldr	r2, [pc, #500]	; (8008918 <DMA_SetConfig+0x220>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d06d      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a7c      	ldr	r2, [pc, #496]	; (800891c <DMA_SetConfig+0x224>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d068      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a7a      	ldr	r2, [pc, #488]	; (8008920 <DMA_SetConfig+0x228>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d063      	beq.n	8008802 <DMA_SetConfig+0x10a>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a79      	ldr	r2, [pc, #484]	; (8008924 <DMA_SetConfig+0x22c>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d05e      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a77      	ldr	r2, [pc, #476]	; (8008928 <DMA_SetConfig+0x230>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d059      	beq.n	8008802 <DMA_SetConfig+0x10a>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a76      	ldr	r2, [pc, #472]	; (800892c <DMA_SetConfig+0x234>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d054      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a74      	ldr	r2, [pc, #464]	; (8008930 <DMA_SetConfig+0x238>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d04f      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a73      	ldr	r2, [pc, #460]	; (8008934 <DMA_SetConfig+0x23c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d04a      	beq.n	8008802 <DMA_SetConfig+0x10a>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a71      	ldr	r2, [pc, #452]	; (8008938 <DMA_SetConfig+0x240>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d045      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a70      	ldr	r2, [pc, #448]	; (800893c <DMA_SetConfig+0x244>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d040      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a6e      	ldr	r2, [pc, #440]	; (8008940 <DMA_SetConfig+0x248>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d03b      	beq.n	8008802 <DMA_SetConfig+0x10a>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a6d      	ldr	r2, [pc, #436]	; (8008944 <DMA_SetConfig+0x24c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d036      	beq.n	8008802 <DMA_SetConfig+0x10a>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a6b      	ldr	r2, [pc, #428]	; (8008948 <DMA_SetConfig+0x250>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d031      	beq.n	8008802 <DMA_SetConfig+0x10a>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a6a      	ldr	r2, [pc, #424]	; (800894c <DMA_SetConfig+0x254>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d02c      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a68      	ldr	r2, [pc, #416]	; (8008950 <DMA_SetConfig+0x258>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d027      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a67      	ldr	r2, [pc, #412]	; (8008954 <DMA_SetConfig+0x25c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d022      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a65      	ldr	r2, [pc, #404]	; (8008958 <DMA_SetConfig+0x260>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d01d      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a64      	ldr	r2, [pc, #400]	; (800895c <DMA_SetConfig+0x264>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d018      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a62      	ldr	r2, [pc, #392]	; (8008960 <DMA_SetConfig+0x268>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d013      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a61      	ldr	r2, [pc, #388]	; (8008964 <DMA_SetConfig+0x26c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00e      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a5f      	ldr	r2, [pc, #380]	; (8008968 <DMA_SetConfig+0x270>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d009      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a5e      	ldr	r2, [pc, #376]	; (800896c <DMA_SetConfig+0x274>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d004      	beq.n	8008802 <DMA_SetConfig+0x10a>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a5c      	ldr	r2, [pc, #368]	; (8008970 <DMA_SetConfig+0x278>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d101      	bne.n	8008806 <DMA_SetConfig+0x10e>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <DMA_SetConfig+0x110>
 8008806:	2300      	movs	r3, #0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00d      	beq.n	8008828 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008814:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d004      	beq.n	8008828 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008826:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a39      	ldr	r2, [pc, #228]	; (8008914 <DMA_SetConfig+0x21c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d04a      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a38      	ldr	r2, [pc, #224]	; (8008918 <DMA_SetConfig+0x220>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d045      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a36      	ldr	r2, [pc, #216]	; (800891c <DMA_SetConfig+0x224>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d040      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a35      	ldr	r2, [pc, #212]	; (8008920 <DMA_SetConfig+0x228>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d03b      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a33      	ldr	r2, [pc, #204]	; (8008924 <DMA_SetConfig+0x22c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d036      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a32      	ldr	r2, [pc, #200]	; (8008928 <DMA_SetConfig+0x230>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d031      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a30      	ldr	r2, [pc, #192]	; (800892c <DMA_SetConfig+0x234>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d02c      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2f      	ldr	r2, [pc, #188]	; (8008930 <DMA_SetConfig+0x238>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d027      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a2d      	ldr	r2, [pc, #180]	; (8008934 <DMA_SetConfig+0x23c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d022      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a2c      	ldr	r2, [pc, #176]	; (8008938 <DMA_SetConfig+0x240>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d01d      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a2a      	ldr	r2, [pc, #168]	; (800893c <DMA_SetConfig+0x244>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d018      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a29      	ldr	r2, [pc, #164]	; (8008940 <DMA_SetConfig+0x248>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d013      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a27      	ldr	r2, [pc, #156]	; (8008944 <DMA_SetConfig+0x24c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00e      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a26      	ldr	r2, [pc, #152]	; (8008948 <DMA_SetConfig+0x250>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a24      	ldr	r2, [pc, #144]	; (800894c <DMA_SetConfig+0x254>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <DMA_SetConfig+0x1d0>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a23      	ldr	r2, [pc, #140]	; (8008950 <DMA_SetConfig+0x258>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d101      	bne.n	80088cc <DMA_SetConfig+0x1d4>
 80088c8:	2301      	movs	r3, #1
 80088ca:	e000      	b.n	80088ce <DMA_SetConfig+0x1d6>
 80088cc:	2300      	movs	r3, #0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d059      	beq.n	8008986 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d6:	f003 031f 	and.w	r3, r3, #31
 80088da:	223f      	movs	r2, #63	; 0x3f
 80088dc:	409a      	lsls	r2, r3
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	2b40      	cmp	r3, #64	; 0x40
 8008900:	d138      	bne.n	8008974 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008912:	e086      	b.n	8008a22 <DMA_SetConfig+0x32a>
 8008914:	40020010 	.word	0x40020010
 8008918:	40020028 	.word	0x40020028
 800891c:	40020040 	.word	0x40020040
 8008920:	40020058 	.word	0x40020058
 8008924:	40020070 	.word	0x40020070
 8008928:	40020088 	.word	0x40020088
 800892c:	400200a0 	.word	0x400200a0
 8008930:	400200b8 	.word	0x400200b8
 8008934:	40020410 	.word	0x40020410
 8008938:	40020428 	.word	0x40020428
 800893c:	40020440 	.word	0x40020440
 8008940:	40020458 	.word	0x40020458
 8008944:	40020470 	.word	0x40020470
 8008948:	40020488 	.word	0x40020488
 800894c:	400204a0 	.word	0x400204a0
 8008950:	400204b8 	.word	0x400204b8
 8008954:	58025408 	.word	0x58025408
 8008958:	5802541c 	.word	0x5802541c
 800895c:	58025430 	.word	0x58025430
 8008960:	58025444 	.word	0x58025444
 8008964:	58025458 	.word	0x58025458
 8008968:	5802546c 	.word	0x5802546c
 800896c:	58025480 	.word	0x58025480
 8008970:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	60da      	str	r2, [r3, #12]
}
 8008984:	e04d      	b.n	8008a22 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a29      	ldr	r2, [pc, #164]	; (8008a30 <DMA_SetConfig+0x338>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d022      	beq.n	80089d6 <DMA_SetConfig+0x2de>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a27      	ldr	r2, [pc, #156]	; (8008a34 <DMA_SetConfig+0x33c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d01d      	beq.n	80089d6 <DMA_SetConfig+0x2de>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <DMA_SetConfig+0x340>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d018      	beq.n	80089d6 <DMA_SetConfig+0x2de>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a24      	ldr	r2, [pc, #144]	; (8008a3c <DMA_SetConfig+0x344>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <DMA_SetConfig+0x2de>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a23      	ldr	r2, [pc, #140]	; (8008a40 <DMA_SetConfig+0x348>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00e      	beq.n	80089d6 <DMA_SetConfig+0x2de>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a21      	ldr	r2, [pc, #132]	; (8008a44 <DMA_SetConfig+0x34c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d009      	beq.n	80089d6 <DMA_SetConfig+0x2de>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a20      	ldr	r2, [pc, #128]	; (8008a48 <DMA_SetConfig+0x350>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d004      	beq.n	80089d6 <DMA_SetConfig+0x2de>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <DMA_SetConfig+0x354>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d101      	bne.n	80089da <DMA_SetConfig+0x2e2>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <DMA_SetConfig+0x2e4>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d020      	beq.n	8008a22 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e4:	f003 031f 	and.w	r3, r3, #31
 80089e8:	2201      	movs	r2, #1
 80089ea:	409a      	lsls	r2, r3
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	2b40      	cmp	r3, #64	; 0x40
 80089fe:	d108      	bne.n	8008a12 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	60da      	str	r2, [r3, #12]
}
 8008a10:	e007      	b.n	8008a22 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	60da      	str	r2, [r3, #12]
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	58025408 	.word	0x58025408
 8008a34:	5802541c 	.word	0x5802541c
 8008a38:	58025430 	.word	0x58025430
 8008a3c:	58025444 	.word	0x58025444
 8008a40:	58025458 	.word	0x58025458
 8008a44:	5802546c 	.word	0x5802546c
 8008a48:	58025480 	.word	0x58025480
 8008a4c:	58025494 	.word	0x58025494

08008a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a42      	ldr	r2, [pc, #264]	; (8008b68 <DMA_CalcBaseAndBitshift+0x118>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d04a      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a41      	ldr	r2, [pc, #260]	; (8008b6c <DMA_CalcBaseAndBitshift+0x11c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d045      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a3f      	ldr	r2, [pc, #252]	; (8008b70 <DMA_CalcBaseAndBitshift+0x120>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d040      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a3e      	ldr	r2, [pc, #248]	; (8008b74 <DMA_CalcBaseAndBitshift+0x124>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d03b      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a3c      	ldr	r2, [pc, #240]	; (8008b78 <DMA_CalcBaseAndBitshift+0x128>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d036      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a3b      	ldr	r2, [pc, #236]	; (8008b7c <DMA_CalcBaseAndBitshift+0x12c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d031      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a39      	ldr	r2, [pc, #228]	; (8008b80 <DMA_CalcBaseAndBitshift+0x130>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d02c      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a38      	ldr	r2, [pc, #224]	; (8008b84 <DMA_CalcBaseAndBitshift+0x134>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d027      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a36      	ldr	r2, [pc, #216]	; (8008b88 <DMA_CalcBaseAndBitshift+0x138>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d022      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a35      	ldr	r2, [pc, #212]	; (8008b8c <DMA_CalcBaseAndBitshift+0x13c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d01d      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a33      	ldr	r2, [pc, #204]	; (8008b90 <DMA_CalcBaseAndBitshift+0x140>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d018      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a32      	ldr	r2, [pc, #200]	; (8008b94 <DMA_CalcBaseAndBitshift+0x144>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d013      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a30      	ldr	r2, [pc, #192]	; (8008b98 <DMA_CalcBaseAndBitshift+0x148>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d00e      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a2f      	ldr	r2, [pc, #188]	; (8008b9c <DMA_CalcBaseAndBitshift+0x14c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d009      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a2d      	ldr	r2, [pc, #180]	; (8008ba0 <DMA_CalcBaseAndBitshift+0x150>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d004      	beq.n	8008af8 <DMA_CalcBaseAndBitshift+0xa8>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a2c      	ldr	r2, [pc, #176]	; (8008ba4 <DMA_CalcBaseAndBitshift+0x154>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d101      	bne.n	8008afc <DMA_CalcBaseAndBitshift+0xac>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <DMA_CalcBaseAndBitshift+0xae>
 8008afc:	2300      	movs	r3, #0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d024      	beq.n	8008b4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	3b10      	subs	r3, #16
 8008b0a:	4a27      	ldr	r2, [pc, #156]	; (8008ba8 <DMA_CalcBaseAndBitshift+0x158>)
 8008b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b10:	091b      	lsrs	r3, r3, #4
 8008b12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	4a24      	ldr	r2, [pc, #144]	; (8008bac <DMA_CalcBaseAndBitshift+0x15c>)
 8008b1c:	5cd3      	ldrb	r3, [r2, r3]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d908      	bls.n	8008b3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4b1f      	ldr	r3, [pc, #124]	; (8008bb0 <DMA_CalcBaseAndBitshift+0x160>)
 8008b32:	4013      	ands	r3, r2
 8008b34:	1d1a      	adds	r2, r3, #4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	659a      	str	r2, [r3, #88]	; 0x58
 8008b3a:	e00d      	b.n	8008b58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <DMA_CalcBaseAndBitshift+0x160>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6593      	str	r3, [r2, #88]	; 0x58
 8008b4a:	e005      	b.n	8008b58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	40020010 	.word	0x40020010
 8008b6c:	40020028 	.word	0x40020028
 8008b70:	40020040 	.word	0x40020040
 8008b74:	40020058 	.word	0x40020058
 8008b78:	40020070 	.word	0x40020070
 8008b7c:	40020088 	.word	0x40020088
 8008b80:	400200a0 	.word	0x400200a0
 8008b84:	400200b8 	.word	0x400200b8
 8008b88:	40020410 	.word	0x40020410
 8008b8c:	40020428 	.word	0x40020428
 8008b90:	40020440 	.word	0x40020440
 8008b94:	40020458 	.word	0x40020458
 8008b98:	40020470 	.word	0x40020470
 8008b9c:	40020488 	.word	0x40020488
 8008ba0:	400204a0 	.word	0x400204a0
 8008ba4:	400204b8 	.word	0x400204b8
 8008ba8:	aaaaaaab 	.word	0xaaaaaaab
 8008bac:	08017284 	.word	0x08017284
 8008bb0:	fffffc00 	.word	0xfffffc00

08008bb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d120      	bne.n	8008c0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d858      	bhi.n	8008c82 <DMA_CheckFifoParam+0xce>
 8008bd0:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <DMA_CheckFifoParam+0x24>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008be9 	.word	0x08008be9
 8008bdc:	08008bfb 	.word	0x08008bfb
 8008be0:	08008be9 	.word	0x08008be9
 8008be4:	08008c83 	.word	0x08008c83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d048      	beq.n	8008c86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008bf8:	e045      	b.n	8008c86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c02:	d142      	bne.n	8008c8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c08:	e03f      	b.n	8008c8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c12:	d123      	bne.n	8008c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d838      	bhi.n	8008c8e <DMA_CheckFifoParam+0xda>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <DMA_CheckFifoParam+0x70>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c35 	.word	0x08008c35
 8008c28:	08008c3b 	.word	0x08008c3b
 8008c2c:	08008c35 	.word	0x08008c35
 8008c30:	08008c4d 	.word	0x08008c4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
        break;
 8008c38:	e030      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d025      	beq.n	8008c92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c4a:	e022      	b.n	8008c92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c54:	d11f      	bne.n	8008c96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c5a:	e01c      	b.n	8008c96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d902      	bls.n	8008c6a <DMA_CheckFifoParam+0xb6>
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d003      	beq.n	8008c70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008c68:	e018      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8008c6e:	e015      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00e      	beq.n	8008c9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c80:	e00b      	b.n	8008c9a <DMA_CheckFifoParam+0xe6>
        break;
 8008c82:	bf00      	nop
 8008c84:	e00a      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
        break;
 8008c86:	bf00      	nop
 8008c88:	e008      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
        break;
 8008c8a:	bf00      	nop
 8008c8c:	e006      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
        break;
 8008c8e:	bf00      	nop
 8008c90:	e004      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
        break;
 8008c92:	bf00      	nop
 8008c94:	e002      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
        break;
 8008c96:	bf00      	nop
 8008c98:	e000      	b.n	8008c9c <DMA_CheckFifoParam+0xe8>
    break;
 8008c9a:	bf00      	nop
    }
  }

  return status;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop

08008cac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a38      	ldr	r2, [pc, #224]	; (8008da0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d022      	beq.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a36      	ldr	r2, [pc, #216]	; (8008da4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d01d      	beq.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a35      	ldr	r2, [pc, #212]	; (8008da8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d018      	beq.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a33      	ldr	r2, [pc, #204]	; (8008dac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d013      	beq.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a32      	ldr	r2, [pc, #200]	; (8008db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00e      	beq.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a30      	ldr	r2, [pc, #192]	; (8008db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d009      	beq.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a2f      	ldr	r2, [pc, #188]	; (8008db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d004      	beq.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a2d      	ldr	r2, [pc, #180]	; (8008dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d101      	bne.n	8008d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01a      	beq.n	8008d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	3b08      	subs	r3, #8
 8008d1c:	4a28      	ldr	r2, [pc, #160]	; (8008dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d22:	091b      	lsrs	r3, r3, #4
 8008d24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4b26      	ldr	r3, [pc, #152]	; (8008dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a24      	ldr	r2, [pc, #144]	; (8008dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008d38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f003 031f 	and.w	r3, r3, #31
 8008d40:	2201      	movs	r2, #1
 8008d42:	409a      	lsls	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008d48:	e024      	b.n	8008d94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	3b10      	subs	r3, #16
 8008d52:	4a1e      	ldr	r2, [pc, #120]	; (8008dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008d54:	fba2 2303 	umull	r2, r3, r2, r3
 8008d58:	091b      	lsrs	r3, r3, #4
 8008d5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4a1c      	ldr	r2, [pc, #112]	; (8008dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d806      	bhi.n	8008d72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	4a1b      	ldr	r2, [pc, #108]	; (8008dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d902      	bls.n	8008d72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4b18      	ldr	r3, [pc, #96]	; (8008dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a16      	ldr	r2, [pc, #88]	; (8008ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008d84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008d94:	bf00      	nop
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	58025408 	.word	0x58025408
 8008da4:	5802541c 	.word	0x5802541c
 8008da8:	58025430 	.word	0x58025430
 8008dac:	58025444 	.word	0x58025444
 8008db0:	58025458 	.word	0x58025458
 8008db4:	5802546c 	.word	0x5802546c
 8008db8:	58025480 	.word	0x58025480
 8008dbc:	58025494 	.word	0x58025494
 8008dc0:	cccccccd 	.word	0xcccccccd
 8008dc4:	16009600 	.word	0x16009600
 8008dc8:	58025880 	.word	0x58025880
 8008dcc:	aaaaaaab 	.word	0xaaaaaaab
 8008dd0:	400204b8 	.word	0x400204b8
 8008dd4:	4002040f 	.word	0x4002040f
 8008dd8:	10008200 	.word	0x10008200
 8008ddc:	40020880 	.word	0x40020880

08008de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d04a      	beq.n	8008e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d847      	bhi.n	8008e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a25      	ldr	r2, [pc, #148]	; (8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d022      	beq.n	8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a24      	ldr	r2, [pc, #144]	; (8008e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d01d      	beq.n	8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a22      	ldr	r2, [pc, #136]	; (8008ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d018      	beq.n	8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a21      	ldr	r2, [pc, #132]	; (8008ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d013      	beq.n	8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a1f      	ldr	r2, [pc, #124]	; (8008ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00e      	beq.n	8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d009      	beq.n	8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1c      	ldr	r2, [pc, #112]	; (8008eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d004      	beq.n	8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1b      	ldr	r2, [pc, #108]	; (8008eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d101      	bne.n	8008e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008e50:	2300      	movs	r3, #0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	461a      	mov	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a15      	ldr	r2, [pc, #84]	; (8008ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008e68:	671a      	str	r2, [r3, #112]	; 0x70
 8008e6a:	e009      	b.n	8008e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	461a      	mov	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a11      	ldr	r2, [pc, #68]	; (8008ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008e7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	2201      	movs	r2, #1
 8008e86:	409a      	lsls	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	58025408 	.word	0x58025408
 8008e9c:	5802541c 	.word	0x5802541c
 8008ea0:	58025430 	.word	0x58025430
 8008ea4:	58025444 	.word	0x58025444
 8008ea8:	58025458 	.word	0x58025458
 8008eac:	5802546c 	.word	0x5802546c
 8008eb0:	58025480 	.word	0x58025480
 8008eb4:	58025494 	.word	0x58025494
 8008eb8:	1600963f 	.word	0x1600963f
 8008ebc:	58025940 	.word	0x58025940
 8008ec0:	1000823f 	.word	0x1000823f
 8008ec4:	40020940 	.word	0x40020940

08008ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b089      	sub	sp, #36	; 0x24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008ed6:	4b89      	ldr	r3, [pc, #548]	; (80090fc <HAL_GPIO_Init+0x234>)
 8008ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008eda:	e194      	b.n	8009206 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	4013      	ands	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 8186 	beq.w	8009200 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d005      	beq.n	8008f0c <HAL_GPIO_Init+0x44>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d130      	bne.n	8008f6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	2203      	movs	r2, #3
 8008f18:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	4013      	ands	r3, r2
 8008f22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f42:	2201      	movs	r2, #1
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	43db      	mvns	r3, r3
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	091b      	lsrs	r3, r3, #4
 8008f58:	f003 0201 	and.w	r2, r3, #1
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d017      	beq.n	8008faa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	2203      	movs	r2, #3
 8008f86:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8a:	43db      	mvns	r3, r3
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d123      	bne.n	8008ffe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	08da      	lsrs	r2, r3, #3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3208      	adds	r2, #8
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	220f      	movs	r2, #15
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	08da      	lsrs	r2, r3, #3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3208      	adds	r2, #8
 8008ff8:	69b9      	ldr	r1, [r7, #24]
 8008ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	2203      	movs	r2, #3
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	43db      	mvns	r3, r3
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4013      	ands	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f003 0203 	and.w	r2, r3, #3
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	4313      	orrs	r3, r2
 800902a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 80e0 	beq.w	8009200 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009040:	4b2f      	ldr	r3, [pc, #188]	; (8009100 <HAL_GPIO_Init+0x238>)
 8009042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009046:	4a2e      	ldr	r2, [pc, #184]	; (8009100 <HAL_GPIO_Init+0x238>)
 8009048:	f043 0302 	orr.w	r3, r3, #2
 800904c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009050:	4b2b      	ldr	r3, [pc, #172]	; (8009100 <HAL_GPIO_Init+0x238>)
 8009052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800905e:	4a29      	ldr	r2, [pc, #164]	; (8009104 <HAL_GPIO_Init+0x23c>)
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	089b      	lsrs	r3, r3, #2
 8009064:	3302      	adds	r3, #2
 8009066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	220f      	movs	r2, #15
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	43db      	mvns	r3, r3
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	4013      	ands	r3, r2
 8009080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a20      	ldr	r2, [pc, #128]	; (8009108 <HAL_GPIO_Init+0x240>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d052      	beq.n	8009130 <HAL_GPIO_Init+0x268>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a1f      	ldr	r2, [pc, #124]	; (800910c <HAL_GPIO_Init+0x244>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d031      	beq.n	80090f6 <HAL_GPIO_Init+0x22e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a1e      	ldr	r2, [pc, #120]	; (8009110 <HAL_GPIO_Init+0x248>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d02b      	beq.n	80090f2 <HAL_GPIO_Init+0x22a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <HAL_GPIO_Init+0x24c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d025      	beq.n	80090ee <HAL_GPIO_Init+0x226>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a1c      	ldr	r2, [pc, #112]	; (8009118 <HAL_GPIO_Init+0x250>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d01f      	beq.n	80090ea <HAL_GPIO_Init+0x222>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1b      	ldr	r2, [pc, #108]	; (800911c <HAL_GPIO_Init+0x254>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d019      	beq.n	80090e6 <HAL_GPIO_Init+0x21e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a1a      	ldr	r2, [pc, #104]	; (8009120 <HAL_GPIO_Init+0x258>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d013      	beq.n	80090e2 <HAL_GPIO_Init+0x21a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a19      	ldr	r2, [pc, #100]	; (8009124 <HAL_GPIO_Init+0x25c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00d      	beq.n	80090de <HAL_GPIO_Init+0x216>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a18      	ldr	r2, [pc, #96]	; (8009128 <HAL_GPIO_Init+0x260>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d007      	beq.n	80090da <HAL_GPIO_Init+0x212>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a17      	ldr	r2, [pc, #92]	; (800912c <HAL_GPIO_Init+0x264>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d101      	bne.n	80090d6 <HAL_GPIO_Init+0x20e>
 80090d2:	2309      	movs	r3, #9
 80090d4:	e02d      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090d6:	230a      	movs	r3, #10
 80090d8:	e02b      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090da:	2308      	movs	r3, #8
 80090dc:	e029      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090de:	2307      	movs	r3, #7
 80090e0:	e027      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090e2:	2306      	movs	r3, #6
 80090e4:	e025      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090e6:	2305      	movs	r3, #5
 80090e8:	e023      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090ea:	2304      	movs	r3, #4
 80090ec:	e021      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090ee:	2303      	movs	r3, #3
 80090f0:	e01f      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e01d      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e01b      	b.n	8009132 <HAL_GPIO_Init+0x26a>
 80090fa:	bf00      	nop
 80090fc:	58000080 	.word	0x58000080
 8009100:	58024400 	.word	0x58024400
 8009104:	58000400 	.word	0x58000400
 8009108:	58020000 	.word	0x58020000
 800910c:	58020400 	.word	0x58020400
 8009110:	58020800 	.word	0x58020800
 8009114:	58020c00 	.word	0x58020c00
 8009118:	58021000 	.word	0x58021000
 800911c:	58021400 	.word	0x58021400
 8009120:	58021800 	.word	0x58021800
 8009124:	58021c00 	.word	0x58021c00
 8009128:	58022000 	.word	0x58022000
 800912c:	58022400 	.word	0x58022400
 8009130:	2300      	movs	r3, #0
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	f002 0203 	and.w	r2, r2, #3
 8009138:	0092      	lsls	r2, r2, #2
 800913a:	4093      	lsls	r3, r2
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	4313      	orrs	r3, r2
 8009140:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009142:	4938      	ldr	r1, [pc, #224]	; (8009224 <HAL_GPIO_Init+0x35c>)
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	089b      	lsrs	r3, r3, #2
 8009148:	3302      	adds	r3, #2
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	43db      	mvns	r3, r3
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4013      	ands	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800917e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	43db      	mvns	r3, r3
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	4013      	ands	r3, r2
 800918e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80091a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	43db      	mvns	r3, r3
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	4013      	ands	r3, r2
 80091ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	43db      	mvns	r3, r3
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	4013      	ands	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	3301      	adds	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	f47f ae63 	bne.w	8008edc <HAL_GPIO_Init+0x14>
  }
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	3724      	adds	r7, #36	; 0x24
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	58000400 	.word	0x58000400

08009228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691a      	ldr	r2, [r3, #16]
 8009238:	887b      	ldrh	r3, [r7, #2]
 800923a:	4013      	ands	r3, r2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
 8009244:	e001      	b.n	800924a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009246:	2300      	movs	r3, #0
 8009248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]
 8009264:	4613      	mov	r3, r2
 8009266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009268:	787b      	ldrb	r3, [r7, #1]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800926e:	887a      	ldrh	r2, [r7, #2]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009274:	e003      	b.n	800927e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009276:	887b      	ldrh	r3, [r7, #2]
 8009278:	041a      	lsls	r2, r3, #16
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	619a      	str	r2, [r3, #24]
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e08b      	b.n	80093b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d106      	bne.n	80092b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7f8 f890 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2224      	movs	r2, #36	; 0x24
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0201 	bic.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80092dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d107      	bne.n	8009306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009302:	609a      	str	r2, [r3, #8]
 8009304:	e006      	b.n	8009314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d108      	bne.n	800932e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800932a:	605a      	str	r2, [r3, #4]
 800932c:	e007      	b.n	800933e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800933c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6859      	ldr	r1, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <HAL_I2C_Init+0x134>)
 800934a:	430b      	orrs	r3, r1
 800934c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800935c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	69d9      	ldr	r1, [r3, #28]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1a      	ldr	r2, [r3, #32]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0201 	orr.w	r2, r2, #1
 8009396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	02008000 	.word	0x02008000

080093c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	461a      	mov	r2, r3
 80093d0:	460b      	mov	r3, r1
 80093d2:	817b      	strh	r3, [r7, #10]
 80093d4:	4613      	mov	r3, r2
 80093d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	f040 80fd 	bne.w	80095e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_I2C_Master_Transmit+0x30>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e0f6      	b.n	80095e2 <HAL_I2C_Master_Transmit+0x21e>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093fc:	f7fa fdf4 	bl	8003fe8 <HAL_GetTick>
 8009400:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	2319      	movs	r3, #25
 8009408:	2201      	movs	r2, #1
 800940a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fa0a 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e0e1      	b.n	80095e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2221      	movs	r2, #33	; 0x21
 8009422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2210      	movs	r2, #16
 800942a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	893a      	ldrh	r2, [r7, #8]
 800943e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944a:	b29b      	uxth	r3, r3
 800944c:	2bff      	cmp	r3, #255	; 0xff
 800944e:	d906      	bls.n	800945e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	22ff      	movs	r2, #255	; 0xff
 8009454:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	e007      	b.n	800946e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800946c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	d024      	beq.n	80094c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009490:	b29b      	uxth	r3, r3
 8009492:	3b01      	subs	r3, #1
 8009494:	b29a      	uxth	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	3301      	adds	r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	8979      	ldrh	r1, [r7, #10]
 80094b2:	4b4e      	ldr	r3, [pc, #312]	; (80095ec <HAL_I2C_Master_Transmit+0x228>)
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fc05 	bl	8009cc8 <I2C_TransferConfig>
 80094be:	e066      	b.n	800958e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	8979      	ldrh	r1, [r7, #10]
 80094c8:	4b48      	ldr	r3, [pc, #288]	; (80095ec <HAL_I2C_Master_Transmit+0x228>)
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 fbfa 	bl	8009cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80094d4:	e05b      	b.n	800958e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	6a39      	ldr	r1, [r7, #32]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f9fd 	bl	80098da <I2C_WaitOnTXISFlagUntilTimeout>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e07b      	b.n	80095e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009504:	b29b      	uxth	r3, r3
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951e:	b29b      	uxth	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d034      	beq.n	800958e <HAL_I2C_Master_Transmit+0x1ca>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009528:	2b00      	cmp	r3, #0
 800952a:	d130      	bne.n	800958e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	2200      	movs	r2, #0
 8009534:	2180      	movs	r1, #128	; 0x80
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 f976 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e04d      	b.n	80095e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954a:	b29b      	uxth	r3, r3
 800954c:	2bff      	cmp	r3, #255	; 0xff
 800954e:	d90e      	bls.n	800956e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	22ff      	movs	r2, #255	; 0xff
 8009554:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955a:	b2da      	uxtb	r2, r3
 800955c:	8979      	ldrh	r1, [r7, #10]
 800955e:	2300      	movs	r3, #0
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fbae 	bl	8009cc8 <I2C_TransferConfig>
 800956c:	e00f      	b.n	800958e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957c:	b2da      	uxtb	r2, r3
 800957e:	8979      	ldrh	r1, [r7, #10]
 8009580:	2300      	movs	r3, #0
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fb9d 	bl	8009cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009592:	b29b      	uxth	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d19e      	bne.n	80094d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	6a39      	ldr	r1, [r7, #32]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f9e3 	bl	8009968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e01a      	b.n	80095e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2220      	movs	r2, #32
 80095b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6859      	ldr	r1, [r3, #4]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4b0c      	ldr	r3, [pc, #48]	; (80095f0 <HAL_I2C_Master_Transmit+0x22c>)
 80095c0:	400b      	ands	r3, r1
 80095c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	e000      	b.n	80095e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80095e0:	2302      	movs	r3, #2
  }
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	80002000 	.word	0x80002000
 80095f0:	fe00e800 	.word	0xfe00e800

080095f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af02      	add	r7, sp, #8
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	607a      	str	r2, [r7, #4]
 80095fe:	461a      	mov	r2, r3
 8009600:	460b      	mov	r3, r1
 8009602:	817b      	strh	r3, [r7, #10]
 8009604:	4613      	mov	r3, r2
 8009606:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b20      	cmp	r3, #32
 8009612:	f040 80db 	bne.w	80097cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_I2C_Master_Receive+0x30>
 8009620:	2302      	movs	r3, #2
 8009622:	e0d4      	b.n	80097ce <HAL_I2C_Master_Receive+0x1da>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800962c:	f7fa fcdc 	bl	8003fe8 <HAL_GetTick>
 8009630:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	2319      	movs	r3, #25
 8009638:	2201      	movs	r2, #1
 800963a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f8f2 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e0bf      	b.n	80097ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2222      	movs	r2, #34	; 0x22
 8009652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2210      	movs	r2, #16
 800965a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	893a      	ldrh	r2, [r7, #8]
 800966e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967a:	b29b      	uxth	r3, r3
 800967c:	2bff      	cmp	r3, #255	; 0xff
 800967e:	d90e      	bls.n	800969e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	22ff      	movs	r2, #255	; 0xff
 8009684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968a:	b2da      	uxtb	r2, r3
 800968c:	8979      	ldrh	r1, [r7, #10]
 800968e:	4b52      	ldr	r3, [pc, #328]	; (80097d8 <HAL_I2C_Master_Receive+0x1e4>)
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fb16 	bl	8009cc8 <I2C_TransferConfig>
 800969c:	e06d      	b.n	800977a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	8979      	ldrh	r1, [r7, #10]
 80096b0:	4b49      	ldr	r3, [pc, #292]	; (80097d8 <HAL_I2C_Master_Receive+0x1e4>)
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fb05 	bl	8009cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80096be:	e05c      	b.n	800977a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	6a39      	ldr	r1, [r7, #32]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f993 	bl	80099f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e07c      	b.n	80097ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	b2d2      	uxtb	r2, r2
 80096e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	3b01      	subs	r3, #1
 8009700:	b29a      	uxth	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800970a:	b29b      	uxth	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d034      	beq.n	800977a <HAL_I2C_Master_Receive+0x186>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009714:	2b00      	cmp	r3, #0
 8009716:	d130      	bne.n	800977a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	2200      	movs	r2, #0
 8009720:	2180      	movs	r1, #128	; 0x80
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f880 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e04d      	b.n	80097ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009736:	b29b      	uxth	r3, r3
 8009738:	2bff      	cmp	r3, #255	; 0xff
 800973a:	d90e      	bls.n	800975a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	22ff      	movs	r2, #255	; 0xff
 8009740:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009746:	b2da      	uxtb	r2, r3
 8009748:	8979      	ldrh	r1, [r7, #10]
 800974a:	2300      	movs	r3, #0
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 fab8 	bl	8009cc8 <I2C_TransferConfig>
 8009758:	e00f      	b.n	800977a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009768:	b2da      	uxtb	r2, r3
 800976a:	8979      	ldrh	r1, [r7, #10]
 800976c:	2300      	movs	r3, #0
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 faa7 	bl	8009cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d19d      	bne.n	80096c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	6a39      	ldr	r1, [r7, #32]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 f8ed 	bl	8009968 <I2C_WaitOnSTOPFlagUntilTimeout>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e01a      	b.n	80097ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2220      	movs	r2, #32
 800979e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6859      	ldr	r1, [r3, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b0c      	ldr	r3, [pc, #48]	; (80097dc <HAL_I2C_Master_Receive+0x1e8>)
 80097ac:	400b      	ands	r3, r1
 80097ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	e000      	b.n	80097ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80097cc:	2302      	movs	r3, #2
  }
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	80002400 	.word	0x80002400
 80097dc:	fe00e800 	.word	0xfe00e800

080097e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d103      	bne.n	80097fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2200      	movs	r2, #0
 80097fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b01      	cmp	r3, #1
 800980a:	d007      	beq.n	800981c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	699a      	ldr	r2, [r3, #24]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f042 0201 	orr.w	r2, r2, #1
 800981a:	619a      	str	r2, [r3, #24]
  }
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	4613      	mov	r3, r2
 8009836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009838:	e03b      	b.n	80098b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f962 	bl	8009b08 <I2C_IsErrorOccurred>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e041      	b.n	80098d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009854:	d02d      	beq.n	80098b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009856:	f7fa fbc7 	bl	8003fe8 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d302      	bcc.n	800986c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d122      	bne.n	80098b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	4013      	ands	r3, r2
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	429a      	cmp	r2, r3
 800987a:	bf0c      	ite	eq
 800987c:	2301      	moveq	r3, #1
 800987e:	2300      	movne	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	429a      	cmp	r2, r3
 8009888:	d113      	bne.n	80098b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988e:	f043 0220 	orr.w	r2, r3, #32
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2220      	movs	r2, #32
 800989a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e00f      	b.n	80098d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	699a      	ldr	r2, [r3, #24]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4013      	ands	r3, r2
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	429a      	cmp	r2, r3
 80098c0:	bf0c      	ite	eq
 80098c2:	2301      	moveq	r3, #1
 80098c4:	2300      	movne	r3, #0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d0b4      	beq.n	800983a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098e6:	e033      	b.n	8009950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 f90b 	bl	8009b08 <I2C_IsErrorOccurred>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e031      	b.n	8009960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009902:	d025      	beq.n	8009950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009904:	f7fa fb70 	bl	8003fe8 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d11a      	bne.n	8009950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b02      	cmp	r3, #2
 8009926:	d013      	beq.n	8009950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992c:	f043 0220 	orr.w	r2, r3, #32
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e007      	b.n	8009960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b02      	cmp	r3, #2
 800995c:	d1c4      	bne.n	80098e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009974:	e02f      	b.n	80099d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 f8c4 	bl	8009b08 <I2C_IsErrorOccurred>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e02d      	b.n	80099e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800998a:	f7fa fb2d 	bl	8003fe8 <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	429a      	cmp	r2, r3
 8009998:	d302      	bcc.n	80099a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d11a      	bne.n	80099d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d013      	beq.n	80099d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b2:	f043 0220 	orr.w	r2, r3, #32
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e007      	b.n	80099e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	f003 0320 	and.w	r3, r3, #32
 80099e0:	2b20      	cmp	r3, #32
 80099e2:	d1c8      	bne.n	8009976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009a00:	e071      	b.n	8009ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f87e 	bl	8009b08 <I2C_IsErrorOccurred>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d13b      	bne.n	8009a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d138      	bne.n	8009a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	f003 0304 	and.w	r3, r3, #4
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d105      	bne.n	8009a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	f003 0310 	and.w	r3, r3, #16
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	d121      	bne.n	8009a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2210      	movs	r2, #16
 8009a58:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2204      	movs	r2, #4
 8009a5e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2220      	movs	r2, #32
 8009a66:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6859      	ldr	r1, [r3, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009a74:	400b      	ands	r3, r1
 8009a76:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	75fb      	strb	r3, [r7, #23]
 8009a94:	e002      	b.n	8009a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009a9c:	f7fa faa4 	bl	8003fe8 <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d302      	bcc.n	8009ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d119      	bne.n	8009ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d116      	bne.n	8009ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d00f      	beq.n	8009ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aca:	f043 0220 	orr.w	r2, r3, #32
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	f003 0304 	and.w	r3, r3, #4
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d002      	beq.n	8009afa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d083      	beq.n	8009a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	fe00e800 	.word	0xfe00e800

08009b08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08a      	sub	sp, #40	; 0x28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	f003 0310 	and.w	r3, r3, #16
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d068      	beq.n	8009c06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2210      	movs	r2, #16
 8009b3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b3c:	e049      	b.n	8009bd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b44:	d045      	beq.n	8009bd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b46:	f7fa fa4f 	bl	8003fe8 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d302      	bcc.n	8009b5c <I2C_IsErrorOccurred+0x54>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d13a      	bne.n	8009bd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b7e:	d121      	bne.n	8009bc4 <I2C_IsErrorOccurred+0xbc>
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b86:	d01d      	beq.n	8009bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b88:	7cfb      	ldrb	r3, [r7, #19]
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d01a      	beq.n	8009bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b9e:	f7fa fa23 	bl	8003fe8 <HAL_GetTick>
 8009ba2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ba4:	e00e      	b.n	8009bc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009ba6:	f7fa fa1f 	bl	8003fe8 <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b19      	cmp	r3, #25
 8009bb2:	d907      	bls.n	8009bc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	f043 0320 	orr.w	r3, r3, #32
 8009bba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009bc2:	e006      	b.n	8009bd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d1e9      	bne.n	8009ba6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	2b20      	cmp	r3, #32
 8009bde:	d003      	beq.n	8009be8 <I2C_IsErrorOccurred+0xe0>
 8009be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0aa      	beq.n	8009b3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d103      	bne.n	8009bf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	f043 0304 	orr.w	r3, r3, #4
 8009bfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f043 0308 	orr.w	r3, r3, #8
 8009c40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	f043 0302 	orr.w	r3, r3, #2
 8009c62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01c      	beq.n	8009cb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff fdaf 	bl	80097e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6859      	ldr	r1, [r3, #4]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <I2C_IsErrorOccurred+0x1bc>)
 8009c8e:	400b      	ands	r3, r1
 8009c90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	; 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	fe00e800 	.word	0xfe00e800

08009cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	607b      	str	r3, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	817b      	strh	r3, [r7, #10]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009cda:	897b      	ldrh	r3, [r7, #10]
 8009cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ce0:	7a7b      	ldrb	r3, [r7, #9]
 8009ce2:	041b      	lsls	r3, r3, #16
 8009ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ce8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cf6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	0d5b      	lsrs	r3, r3, #21
 8009d02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <I2C_TransferConfig+0x60>)
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	43db      	mvns	r3, r3
 8009d0c:	ea02 0103 	and.w	r1, r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d1a:	bf00      	nop
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	03ff63ff 	.word	0x03ff63ff

08009d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	d138      	bne.n	8009db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e032      	b.n	8009db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2224      	movs	r2, #36	; 0x24
 8009d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0201 	bic.w	r2, r2, #1
 8009d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6819      	ldr	r1, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0201 	orr.w	r2, r2, #1
 8009d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	e000      	b.n	8009db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009db4:	2302      	movs	r3, #2
  }
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	d139      	bne.n	8009e4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009de2:	2302      	movs	r3, #2
 8009de4:	e033      	b.n	8009e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2224      	movs	r2, #36	; 0x24
 8009df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f022 0201 	bic.w	r2, r2, #1
 8009e04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	021b      	lsls	r3, r3, #8
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0201 	orr.w	r2, r2, #1
 8009e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e000      	b.n	8009e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e4c:	2302      	movs	r3, #2
  }
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
	...

08009e5c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e64:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e6a:	4a0c      	ldr	r2, [pc, #48]	; (8009e9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009e6c:	f043 0302 	orr.w	r3, r3, #2
 8009e70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009e74:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	4906      	ldr	r1, [pc, #24]	; (8009ea0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	604b      	str	r3, [r1, #4]
}
 8009e8e:	bf00      	nop
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	58024400 	.word	0x58024400
 8009ea0:	58000400 	.word	0x58000400

08009ea4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009eb0:	4b18      	ldr	r3, [pc, #96]	; (8009f14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f023 0201 	bic.w	r2, r3, #1
 8009eb8:	4916      	ldr	r1, [pc, #88]	; (8009f14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009ec0:	4b14      	ldr	r3, [pc, #80]	; (8009f14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	4a13      	ldr	r2, [pc, #76]	; (8009f14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ec6:	f023 0305 	bic.w	r3, r3, #5
 8009eca:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009ecc:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	4a10      	ldr	r2, [pc, #64]	; (8009f14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ed2:	f023 0302 	bic.w	r3, r3, #2
 8009ed6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009ed8:	4b0f      	ldr	r3, [pc, #60]	; (8009f18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	4a0e      	ldr	r2, [pc, #56]	; (8009f18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009ede:	f043 0304 	orr.w	r3, r3, #4
 8009ee2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ee4:	f3bf 8f4f 	dsb	sy
}
 8009ee8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009eea:	f3bf 8f6f 	isb	sy
}
 8009eee:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009ef6:	bf30      	wfi
 8009ef8:	e000      	b.n	8009efc <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009efa:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009efc:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	4a05      	ldr	r2, [pc, #20]	; (8009f18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f02:	f023 0304 	bic.w	r3, r3, #4
 8009f06:	6113      	str	r3, [r2, #16]
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	58024800 	.word	0x58024800
 8009f18:	e000ed00 	.word	0xe000ed00

08009f1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f24:	4b19      	ldr	r3, [pc, #100]	; (8009f8c <HAL_PWREx_ConfigSupply+0x70>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d00a      	beq.n	8009f46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f30:	4b16      	ldr	r3, [pc, #88]	; (8009f8c <HAL_PWREx_ConfigSupply+0x70>)
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f003 0307 	and.w	r3, r3, #7
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d001      	beq.n	8009f42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e01f      	b.n	8009f82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e01d      	b.n	8009f82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f46:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <HAL_PWREx_ConfigSupply+0x70>)
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f023 0207 	bic.w	r2, r3, #7
 8009f4e:	490f      	ldr	r1, [pc, #60]	; (8009f8c <HAL_PWREx_ConfigSupply+0x70>)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f56:	f7fa f847 	bl	8003fe8 <HAL_GetTick>
 8009f5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f5c:	e009      	b.n	8009f72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009f5e:	f7fa f843 	bl	8003fe8 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f6c:	d901      	bls.n	8009f72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e007      	b.n	8009f82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <HAL_PWREx_ConfigSupply+0x70>)
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f7e:	d1ee      	bne.n	8009f5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	58024800 	.word	0x58024800

08009f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08c      	sub	sp, #48	; 0x30
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	f000 bc48 	b.w	800a834 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 8088 	beq.w	800a0c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fb2:	4b99      	ldr	r3, [pc, #612]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fbc:	4b96      	ldr	r3, [pc, #600]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 8009fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	2b10      	cmp	r3, #16
 8009fc6:	d007      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x48>
 8009fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fca:	2b18      	cmp	r3, #24
 8009fcc:	d111      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x62>
 8009fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd0:	f003 0303 	and.w	r3, r3, #3
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d10c      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd8:	4b8f      	ldr	r3, [pc, #572]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d06d      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x130>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d169      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f000 bc21 	b.w	800a834 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffa:	d106      	bne.n	800a00a <HAL_RCC_OscConfig+0x7a>
 8009ffc:	4b86      	ldr	r3, [pc, #536]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a85      	ldr	r2, [pc, #532]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	e02e      	b.n	800a068 <HAL_RCC_OscConfig+0xd8>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10c      	bne.n	800a02c <HAL_RCC_OscConfig+0x9c>
 800a012:	4b81      	ldr	r3, [pc, #516]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a80      	ldr	r2, [pc, #512]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	4b7e      	ldr	r3, [pc, #504]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a7d      	ldr	r2, [pc, #500]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	e01d      	b.n	800a068 <HAL_RCC_OscConfig+0xd8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a034:	d10c      	bne.n	800a050 <HAL_RCC_OscConfig+0xc0>
 800a036:	4b78      	ldr	r3, [pc, #480]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a77      	ldr	r2, [pc, #476]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a03c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	4b75      	ldr	r3, [pc, #468]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a74      	ldr	r2, [pc, #464]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	e00b      	b.n	800a068 <HAL_RCC_OscConfig+0xd8>
 800a050:	4b71      	ldr	r3, [pc, #452]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a70      	ldr	r2, [pc, #448]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	4b6e      	ldr	r3, [pc, #440]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a6d      	ldr	r2, [pc, #436]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d013      	beq.n	800a098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a070:	f7f9 ffba 	bl	8003fe8 <HAL_GetTick>
 800a074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a076:	e008      	b.n	800a08a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a078:	f7f9 ffb6 	bl	8003fe8 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	2b64      	cmp	r3, #100	; 0x64
 800a084:	d901      	bls.n	800a08a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e3d4      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a08a:	4b63      	ldr	r3, [pc, #396]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f0      	beq.n	800a078 <HAL_RCC_OscConfig+0xe8>
 800a096:	e014      	b.n	800a0c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7f9 ffa6 	bl	8003fe8 <HAL_GetTick>
 800a09c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0a0:	f7f9 ffa2 	bl	8003fe8 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b64      	cmp	r3, #100	; 0x64
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e3c0      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0b2:	4b59      	ldr	r3, [pc, #356]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1f0      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x110>
 800a0be:	e000      	b.n	800a0c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80ca 	beq.w	800a264 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0d0:	4b51      	ldr	r3, [pc, #324]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0da:	4b4f      	ldr	r3, [pc, #316]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x166>
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	2b18      	cmp	r3, #24
 800a0ea:	d156      	bne.n	800a19a <HAL_RCC_OscConfig+0x20a>
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	f003 0303 	and.w	r3, r3, #3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d151      	bne.n	800a19a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0f6:	4b48      	ldr	r3, [pc, #288]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <HAL_RCC_OscConfig+0x17e>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e392      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a10e:	4b42      	ldr	r3, [pc, #264]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f023 0219 	bic.w	r2, r3, #25
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	493f      	ldr	r1, [pc, #252]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a120:	f7f9 ff62 	bl	8003fe8 <HAL_GetTick>
 800a124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a126:	e008      	b.n	800a13a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a128:	f7f9 ff5e 	bl	8003fe8 <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	2b02      	cmp	r3, #2
 800a134:	d901      	bls.n	800a13a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e37c      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a13a:	4b37      	ldr	r3, [pc, #220]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0304 	and.w	r3, r3, #4
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0f0      	beq.n	800a128 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a146:	f7f9 ff5b 	bl	8004000 <HAL_GetREVID>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a150:	4293      	cmp	r3, r2
 800a152:	d817      	bhi.n	800a184 <HAL_RCC_OscConfig+0x1f4>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b40      	cmp	r3, #64	; 0x40
 800a15a:	d108      	bne.n	800a16e <HAL_RCC_OscConfig+0x1de>
 800a15c:	4b2e      	ldr	r3, [pc, #184]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a164:	4a2c      	ldr	r2, [pc, #176]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a16a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a16c:	e07a      	b.n	800a264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a16e:	4b2a      	ldr	r3, [pc, #168]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	031b      	lsls	r3, r3, #12
 800a17c:	4926      	ldr	r1, [pc, #152]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a182:	e06f      	b.n	800a264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a184:	4b24      	ldr	r3, [pc, #144]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	061b      	lsls	r3, r3, #24
 800a192:	4921      	ldr	r1, [pc, #132]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a194:	4313      	orrs	r3, r2
 800a196:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a198:	e064      	b.n	800a264 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d047      	beq.n	800a232 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1a2:	4b1d      	ldr	r3, [pc, #116]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f023 0219 	bic.w	r2, r3, #25
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	491a      	ldr	r1, [pc, #104]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b4:	f7f9 ff18 	bl	8003fe8 <HAL_GetTick>
 800a1b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ba:	e008      	b.n	800a1ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1bc:	f7f9 ff14 	bl	8003fe8 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d901      	bls.n	800a1ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e332      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ce:	4b12      	ldr	r3, [pc, #72]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0304 	and.w	r3, r3, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0f0      	beq.n	800a1bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1da:	f7f9 ff11 	bl	8004000 <HAL_GetREVID>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d819      	bhi.n	800a21c <HAL_RCC_OscConfig+0x28c>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	2b40      	cmp	r3, #64	; 0x40
 800a1ee:	d108      	bne.n	800a202 <HAL_RCC_OscConfig+0x272>
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1f8:	4a07      	ldr	r2, [pc, #28]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a1fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1fe:	6053      	str	r3, [r2, #4]
 800a200:	e030      	b.n	800a264 <HAL_RCC_OscConfig+0x2d4>
 800a202:	4b05      	ldr	r3, [pc, #20]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	031b      	lsls	r3, r3, #12
 800a210:	4901      	ldr	r1, [pc, #4]	; (800a218 <HAL_RCC_OscConfig+0x288>)
 800a212:	4313      	orrs	r3, r2
 800a214:	604b      	str	r3, [r1, #4]
 800a216:	e025      	b.n	800a264 <HAL_RCC_OscConfig+0x2d4>
 800a218:	58024400 	.word	0x58024400
 800a21c:	4b9a      	ldr	r3, [pc, #616]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	061b      	lsls	r3, r3, #24
 800a22a:	4997      	ldr	r1, [pc, #604]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	604b      	str	r3, [r1, #4]
 800a230:	e018      	b.n	800a264 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a232:	4b95      	ldr	r3, [pc, #596]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a94      	ldr	r2, [pc, #592]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a238:	f023 0301 	bic.w	r3, r3, #1
 800a23c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a23e:	f7f9 fed3 	bl	8003fe8 <HAL_GetTick>
 800a242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a244:	e008      	b.n	800a258 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a246:	f7f9 fecf 	bl	8003fe8 <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	2b02      	cmp	r3, #2
 800a252:	d901      	bls.n	800a258 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e2ed      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a258:	4b8b      	ldr	r3, [pc, #556]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1f0      	bne.n	800a246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 80a9 	beq.w	800a3c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a272:	4b85      	ldr	r3, [pc, #532]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a27a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a27c:	4b82      	ldr	r3, [pc, #520]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	2b08      	cmp	r3, #8
 800a286:	d007      	beq.n	800a298 <HAL_RCC_OscConfig+0x308>
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b18      	cmp	r3, #24
 800a28c:	d13a      	bne.n	800a304 <HAL_RCC_OscConfig+0x374>
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	2b01      	cmp	r3, #1
 800a296:	d135      	bne.n	800a304 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a298:	4b7b      	ldr	r3, [pc, #492]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x320>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	2b80      	cmp	r3, #128	; 0x80
 800a2aa:	d001      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e2c1      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2b0:	f7f9 fea6 	bl	8004000 <HAL_GetREVID>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d817      	bhi.n	800a2ee <HAL_RCC_OscConfig+0x35e>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	2b20      	cmp	r3, #32
 800a2c4:	d108      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x348>
 800a2c6:	4b70      	ldr	r3, [pc, #448]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2ce:	4a6e      	ldr	r2, [pc, #440]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a2d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2d6:	e075      	b.n	800a3c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2d8:	4b6b      	ldr	r3, [pc, #428]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	069b      	lsls	r3, r3, #26
 800a2e6:	4968      	ldr	r1, [pc, #416]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2ec:	e06a      	b.n	800a3c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2ee:	4b66      	ldr	r3, [pc, #408]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	061b      	lsls	r3, r3, #24
 800a2fc:	4962      	ldr	r1, [pc, #392]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a302:	e05f      	b.n	800a3c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d042      	beq.n	800a392 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a30c:	4b5e      	ldr	r3, [pc, #376]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a5d      	ldr	r2, [pc, #372]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a318:	f7f9 fe66 	bl	8003fe8 <HAL_GetTick>
 800a31c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a31e:	e008      	b.n	800a332 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a320:	f7f9 fe62 	bl	8003fe8 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d901      	bls.n	800a332 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e280      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a332:	4b55      	ldr	r3, [pc, #340]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0f0      	beq.n	800a320 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a33e:	f7f9 fe5f 	bl	8004000 <HAL_GetREVID>
 800a342:	4603      	mov	r3, r0
 800a344:	f241 0203 	movw	r2, #4099	; 0x1003
 800a348:	4293      	cmp	r3, r2
 800a34a:	d817      	bhi.n	800a37c <HAL_RCC_OscConfig+0x3ec>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	2b20      	cmp	r3, #32
 800a352:	d108      	bne.n	800a366 <HAL_RCC_OscConfig+0x3d6>
 800a354:	4b4c      	ldr	r3, [pc, #304]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a35c:	4a4a      	ldr	r2, [pc, #296]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a35e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a362:	6053      	str	r3, [r2, #4]
 800a364:	e02e      	b.n	800a3c4 <HAL_RCC_OscConfig+0x434>
 800a366:	4b48      	ldr	r3, [pc, #288]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	069b      	lsls	r3, r3, #26
 800a374:	4944      	ldr	r1, [pc, #272]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a376:	4313      	orrs	r3, r2
 800a378:	604b      	str	r3, [r1, #4]
 800a37a:	e023      	b.n	800a3c4 <HAL_RCC_OscConfig+0x434>
 800a37c:	4b42      	ldr	r3, [pc, #264]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	493f      	ldr	r1, [pc, #252]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	60cb      	str	r3, [r1, #12]
 800a390:	e018      	b.n	800a3c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a392:	4b3d      	ldr	r3, [pc, #244]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a3c      	ldr	r2, [pc, #240]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a39c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39e:	f7f9 fe23 	bl	8003fe8 <HAL_GetTick>
 800a3a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3a4:	e008      	b.n	800a3b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3a6:	f7f9 fe1f 	bl	8003fe8 <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e23d      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3b8:	4b33      	ldr	r3, [pc, #204]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1f0      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0308 	and.w	r3, r3, #8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d036      	beq.n	800a43e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d019      	beq.n	800a40c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3d8:	4b2b      	ldr	r3, [pc, #172]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3dc:	4a2a      	ldr	r2, [pc, #168]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e4:	f7f9 fe00 	bl	8003fe8 <HAL_GetTick>
 800a3e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3ea:	e008      	b.n	800a3fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3ec:	f7f9 fdfc 	bl	8003fe8 <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d901      	bls.n	800a3fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e21a      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3fe:	4b22      	ldr	r3, [pc, #136]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0f0      	beq.n	800a3ec <HAL_RCC_OscConfig+0x45c>
 800a40a:	e018      	b.n	800a43e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a40c:	4b1e      	ldr	r3, [pc, #120]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a410:	4a1d      	ldr	r2, [pc, #116]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a412:	f023 0301 	bic.w	r3, r3, #1
 800a416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a418:	f7f9 fde6 	bl	8003fe8 <HAL_GetTick>
 800a41c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a41e:	e008      	b.n	800a432 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a420:	f7f9 fde2 	bl	8003fe8 <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e200      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a432:	4b15      	ldr	r3, [pc, #84]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1f0      	bne.n	800a420 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0320 	and.w	r3, r3, #32
 800a446:	2b00      	cmp	r3, #0
 800a448:	d039      	beq.n	800a4be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d01c      	beq.n	800a48c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a452:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a45c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a45e:	f7f9 fdc3 	bl	8003fe8 <HAL_GetTick>
 800a462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a464:	e008      	b.n	800a478 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a466:	f7f9 fdbf 	bl	8003fe8 <HAL_GetTick>
 800a46a:	4602      	mov	r2, r0
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	2b02      	cmp	r3, #2
 800a472:	d901      	bls.n	800a478 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e1dd      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a478:	4b03      	ldr	r3, [pc, #12]	; (800a488 <HAL_RCC_OscConfig+0x4f8>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0f0      	beq.n	800a466 <HAL_RCC_OscConfig+0x4d6>
 800a484:	e01b      	b.n	800a4be <HAL_RCC_OscConfig+0x52e>
 800a486:	bf00      	nop
 800a488:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a48c:	4b9b      	ldr	r3, [pc, #620]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a9a      	ldr	r2, [pc, #616]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a496:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a498:	f7f9 fda6 	bl	8003fe8 <HAL_GetTick>
 800a49c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a49e:	e008      	b.n	800a4b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4a0:	f7f9 fda2 	bl	8003fe8 <HAL_GetTick>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d901      	bls.n	800a4b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e1c0      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4b2:	4b92      	ldr	r3, [pc, #584]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1f0      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 8081 	beq.w	800a5ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a4cc:	4b8c      	ldr	r3, [pc, #560]	; (800a700 <HAL_RCC_OscConfig+0x770>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a8b      	ldr	r2, [pc, #556]	; (800a700 <HAL_RCC_OscConfig+0x770>)
 800a4d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4d8:	f7f9 fd86 	bl	8003fe8 <HAL_GetTick>
 800a4dc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4de:	e008      	b.n	800a4f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e0:	f7f9 fd82 	bl	8003fe8 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	2b64      	cmp	r3, #100	; 0x64
 800a4ec:	d901      	bls.n	800a4f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e1a0      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4f2:	4b83      	ldr	r3, [pc, #524]	; (800a700 <HAL_RCC_OscConfig+0x770>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0f0      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d106      	bne.n	800a514 <HAL_RCC_OscConfig+0x584>
 800a506:	4b7d      	ldr	r3, [pc, #500]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50a:	4a7c      	ldr	r2, [pc, #496]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a50c:	f043 0301 	orr.w	r3, r3, #1
 800a510:	6713      	str	r3, [r2, #112]	; 0x70
 800a512:	e02d      	b.n	800a570 <HAL_RCC_OscConfig+0x5e0>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10c      	bne.n	800a536 <HAL_RCC_OscConfig+0x5a6>
 800a51c:	4b77      	ldr	r3, [pc, #476]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a520:	4a76      	ldr	r2, [pc, #472]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a522:	f023 0301 	bic.w	r3, r3, #1
 800a526:	6713      	str	r3, [r2, #112]	; 0x70
 800a528:	4b74      	ldr	r3, [pc, #464]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52c:	4a73      	ldr	r2, [pc, #460]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a52e:	f023 0304 	bic.w	r3, r3, #4
 800a532:	6713      	str	r3, [r2, #112]	; 0x70
 800a534:	e01c      	b.n	800a570 <HAL_RCC_OscConfig+0x5e0>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d10c      	bne.n	800a558 <HAL_RCC_OscConfig+0x5c8>
 800a53e:	4b6f      	ldr	r3, [pc, #444]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a542:	4a6e      	ldr	r2, [pc, #440]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a544:	f043 0304 	orr.w	r3, r3, #4
 800a548:	6713      	str	r3, [r2, #112]	; 0x70
 800a54a:	4b6c      	ldr	r3, [pc, #432]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54e:	4a6b      	ldr	r2, [pc, #428]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a550:	f043 0301 	orr.w	r3, r3, #1
 800a554:	6713      	str	r3, [r2, #112]	; 0x70
 800a556:	e00b      	b.n	800a570 <HAL_RCC_OscConfig+0x5e0>
 800a558:	4b68      	ldr	r3, [pc, #416]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a55a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a55c:	4a67      	ldr	r2, [pc, #412]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a55e:	f023 0301 	bic.w	r3, r3, #1
 800a562:	6713      	str	r3, [r2, #112]	; 0x70
 800a564:	4b65      	ldr	r3, [pc, #404]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a568:	4a64      	ldr	r2, [pc, #400]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a56a:	f023 0304 	bic.w	r3, r3, #4
 800a56e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d015      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a578:	f7f9 fd36 	bl	8003fe8 <HAL_GetTick>
 800a57c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a57e:	e00a      	b.n	800a596 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a580:	f7f9 fd32 	bl	8003fe8 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a58e:	4293      	cmp	r3, r2
 800a590:	d901      	bls.n	800a596 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e14e      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a596:	4b59      	ldr	r3, [pc, #356]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59a:	f003 0302 	and.w	r3, r3, #2
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0ee      	beq.n	800a580 <HAL_RCC_OscConfig+0x5f0>
 800a5a2:	e014      	b.n	800a5ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5a4:	f7f9 fd20 	bl	8003fe8 <HAL_GetTick>
 800a5a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5aa:	e00a      	b.n	800a5c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ac:	f7f9 fd1c 	bl	8003fe8 <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d901      	bls.n	800a5c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e138      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5c2:	4b4e      	ldr	r3, [pc, #312]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1ee      	bne.n	800a5ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 812d 	beq.w	800a832 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a5d8:	4b48      	ldr	r3, [pc, #288]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5e0:	2b18      	cmp	r3, #24
 800a5e2:	f000 80bd 	beq.w	800a760 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	f040 809e 	bne.w	800a72c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5f0:	4b42      	ldr	r3, [pc, #264]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a41      	ldr	r2, [pc, #260]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a5f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5fc:	f7f9 fcf4 	bl	8003fe8 <HAL_GetTick>
 800a600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a602:	e008      	b.n	800a616 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a604:	f7f9 fcf0 	bl	8003fe8 <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d901      	bls.n	800a616 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e10e      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a616:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f0      	bne.n	800a604 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a622:	4b36      	ldr	r3, [pc, #216]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a626:	4b37      	ldr	r3, [pc, #220]	; (800a704 <HAL_RCC_OscConfig+0x774>)
 800a628:	4013      	ands	r3, r2
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a632:	0112      	lsls	r2, r2, #4
 800a634:	430a      	orrs	r2, r1
 800a636:	4931      	ldr	r1, [pc, #196]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	628b      	str	r3, [r1, #40]	; 0x28
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a640:	3b01      	subs	r3, #1
 800a642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64a:	3b01      	subs	r3, #1
 800a64c:	025b      	lsls	r3, r3, #9
 800a64e:	b29b      	uxth	r3, r3
 800a650:	431a      	orrs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a656:	3b01      	subs	r3, #1
 800a658:	041b      	lsls	r3, r3, #16
 800a65a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a664:	3b01      	subs	r3, #1
 800a666:	061b      	lsls	r3, r3, #24
 800a668:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a66c:	4923      	ldr	r1, [pc, #140]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a672:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	4a21      	ldr	r2, [pc, #132]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a678:	f023 0301 	bic.w	r3, r3, #1
 800a67c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a67e:	4b1f      	ldr	r3, [pc, #124]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a682:	4b21      	ldr	r3, [pc, #132]	; (800a708 <HAL_RCC_OscConfig+0x778>)
 800a684:	4013      	ands	r3, r2
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a68a:	00d2      	lsls	r2, r2, #3
 800a68c:	491b      	ldr	r1, [pc, #108]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a692:	4b1a      	ldr	r3, [pc, #104]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	f023 020c 	bic.w	r2, r3, #12
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	4917      	ldr	r1, [pc, #92]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6a4:	4b15      	ldr	r3, [pc, #84]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	f023 0202 	bic.w	r2, r3, #2
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b0:	4912      	ldr	r1, [pc, #72]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a6b6:	4b11      	ldr	r3, [pc, #68]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	4a10      	ldr	r2, [pc, #64]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6c2:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	4a0d      	ldr	r2, [pc, #52]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a6ce:	4b0b      	ldr	r3, [pc, #44]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a6da:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	4a07      	ldr	r2, [pc, #28]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6e0:	f043 0301 	orr.w	r3, r3, #1
 800a6e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6e6:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a04      	ldr	r2, [pc, #16]	; (800a6fc <HAL_RCC_OscConfig+0x76c>)
 800a6ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6f2:	f7f9 fc79 	bl	8003fe8 <HAL_GetTick>
 800a6f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6f8:	e011      	b.n	800a71e <HAL_RCC_OscConfig+0x78e>
 800a6fa:	bf00      	nop
 800a6fc:	58024400 	.word	0x58024400
 800a700:	58024800 	.word	0x58024800
 800a704:	fffffc0c 	.word	0xfffffc0c
 800a708:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a70c:	f7f9 fc6c 	bl	8003fe8 <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	2b02      	cmp	r3, #2
 800a718:	d901      	bls.n	800a71e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e08a      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a71e:	4b47      	ldr	r3, [pc, #284]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0f0      	beq.n	800a70c <HAL_RCC_OscConfig+0x77c>
 800a72a:	e082      	b.n	800a832 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a72c:	4b43      	ldr	r3, [pc, #268]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a42      	ldr	r2, [pc, #264]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a738:	f7f9 fc56 	bl	8003fe8 <HAL_GetTick>
 800a73c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a73e:	e008      	b.n	800a752 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a740:	f7f9 fc52 	bl	8003fe8 <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d901      	bls.n	800a752 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e070      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a752:	4b3a      	ldr	r3, [pc, #232]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1f0      	bne.n	800a740 <HAL_RCC_OscConfig+0x7b0>
 800a75e:	e068      	b.n	800a832 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a760:	4b36      	ldr	r3, [pc, #216]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a766:	4b35      	ldr	r3, [pc, #212]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	2b01      	cmp	r3, #1
 800a772:	d031      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f003 0203 	and.w	r2, r3, #3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a77e:	429a      	cmp	r2, r3
 800a780:	d12a      	bne.n	800a7d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	091b      	lsrs	r3, r3, #4
 800a786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a78e:	429a      	cmp	r2, r3
 800a790:	d122      	bne.n	800a7d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d11a      	bne.n	800a7d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	0a5b      	lsrs	r3, r3, #9
 800a7a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d111      	bne.n	800a7d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	0c1b      	lsrs	r3, r3, #16
 800a7b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d108      	bne.n	800a7d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	0e1b      	lsrs	r3, r3, #24
 800a7ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d001      	beq.n	800a7dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e02b      	b.n	800a834 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a7dc:	4b17      	ldr	r3, [pc, #92]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e0:	08db      	lsrs	r3, r3, #3
 800a7e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d01f      	beq.n	800a832 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a7f2:	4b12      	ldr	r3, [pc, #72]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f6:	4a11      	ldr	r2, [pc, #68]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a7f8:	f023 0301 	bic.w	r3, r3, #1
 800a7fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7fe:	f7f9 fbf3 	bl	8003fe8 <HAL_GetTick>
 800a802:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a804:	bf00      	nop
 800a806:	f7f9 fbef 	bl	8003fe8 <HAL_GetTick>
 800a80a:	4602      	mov	r2, r0
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	4293      	cmp	r3, r2
 800a810:	d0f9      	beq.n	800a806 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a812:	4b0a      	ldr	r3, [pc, #40]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a816:	4b0a      	ldr	r3, [pc, #40]	; (800a840 <HAL_RCC_OscConfig+0x8b0>)
 800a818:	4013      	ands	r3, r2
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a81e:	00d2      	lsls	r2, r2, #3
 800a820:	4906      	ldr	r1, [pc, #24]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a822:	4313      	orrs	r3, r2
 800a824:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a826:	4b05      	ldr	r3, [pc, #20]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82a:	4a04      	ldr	r2, [pc, #16]	; (800a83c <HAL_RCC_OscConfig+0x8ac>)
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3730      	adds	r7, #48	; 0x30
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	58024400 	.word	0x58024400
 800a840:	ffff0007 	.word	0xffff0007

0800a844 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e19c      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a858:	4b8a      	ldr	r3, [pc, #552]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 030f 	and.w	r3, r3, #15
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d910      	bls.n	800a888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a866:	4b87      	ldr	r3, [pc, #540]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f023 020f 	bic.w	r2, r3, #15
 800a86e:	4985      	ldr	r1, [pc, #532]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	4313      	orrs	r3, r2
 800a874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a876:	4b83      	ldr	r3, [pc, #524]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 030f 	and.w	r3, r3, #15
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	d001      	beq.n	800a888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e184      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d010      	beq.n	800a8b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	4b7b      	ldr	r3, [pc, #492]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d908      	bls.n	800a8b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8a4:	4b78      	ldr	r3, [pc, #480]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	4975      	ldr	r1, [pc, #468]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 0308 	and.w	r3, r3, #8
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d010      	beq.n	800a8e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	695a      	ldr	r2, [r3, #20]
 800a8c6:	4b70      	ldr	r3, [pc, #448]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d908      	bls.n	800a8e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8d2:	4b6d      	ldr	r3, [pc, #436]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	496a      	ldr	r1, [pc, #424]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0310 	and.w	r3, r3, #16
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d010      	beq.n	800a912 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	4b64      	ldr	r3, [pc, #400]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d908      	bls.n	800a912 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a900:	4b61      	ldr	r3, [pc, #388]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	495e      	ldr	r1, [pc, #376]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0320 	and.w	r3, r3, #32
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d010      	beq.n	800a940 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	69da      	ldr	r2, [r3, #28]
 800a922:	4b59      	ldr	r3, [pc, #356]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d908      	bls.n	800a940 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a92e:	4b56      	ldr	r3, [pc, #344]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	4953      	ldr	r1, [pc, #332]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d010      	beq.n	800a96e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68da      	ldr	r2, [r3, #12]
 800a950:	4b4d      	ldr	r3, [pc, #308]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	429a      	cmp	r2, r3
 800a95a:	d908      	bls.n	800a96e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a95c:	4b4a      	ldr	r3, [pc, #296]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	f023 020f 	bic.w	r2, r3, #15
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	4947      	ldr	r1, [pc, #284]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	2b00      	cmp	r3, #0
 800a978:	d055      	beq.n	800aa26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a97a:	4b43      	ldr	r3, [pc, #268]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	4940      	ldr	r1, [pc, #256]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b02      	cmp	r3, #2
 800a992:	d107      	bne.n	800a9a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a994:	4b3c      	ldr	r3, [pc, #240]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d121      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e0f6      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d107      	bne.n	800a9bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9ac:	4b36      	ldr	r3, [pc, #216]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d115      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e0ea      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d107      	bne.n	800a9d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9c4:	4b30      	ldr	r3, [pc, #192]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e0de      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9d4:	4b2c      	ldr	r3, [pc, #176]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e0d6      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9e4:	4b28      	ldr	r3, [pc, #160]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	f023 0207 	bic.w	r2, r3, #7
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	4925      	ldr	r1, [pc, #148]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9f6:	f7f9 faf7 	bl	8003fe8 <HAL_GetTick>
 800a9fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9fc:	e00a      	b.n	800aa14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9fe:	f7f9 faf3 	bl	8003fe8 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d901      	bls.n	800aa14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e0be      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa14:	4b1c      	ldr	r3, [pc, #112]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d1eb      	bne.n	800a9fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d010      	beq.n	800aa54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	f003 030f 	and.w	r3, r3, #15
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d208      	bcs.n	800aa54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa42:	4b11      	ldr	r3, [pc, #68]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	f023 020f 	bic.w	r2, r3, #15
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	490e      	ldr	r1, [pc, #56]	; (800aa88 <HAL_RCC_ClockConfig+0x244>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa54:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 030f 	and.w	r3, r3, #15
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d214      	bcs.n	800aa8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa62:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f023 020f 	bic.w	r2, r3, #15
 800aa6a:	4906      	ldr	r1, [pc, #24]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa72:	4b04      	ldr	r3, [pc, #16]	; (800aa84 <HAL_RCC_ClockConfig+0x240>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 030f 	and.w	r3, r3, #15
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d005      	beq.n	800aa8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e086      	b.n	800ab92 <HAL_RCC_ClockConfig+0x34e>
 800aa84:	52002000 	.word	0x52002000
 800aa88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0304 	and.w	r3, r3, #4
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d010      	beq.n	800aaba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	691a      	ldr	r2, [r3, #16]
 800aa9c:	4b3f      	ldr	r3, [pc, #252]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d208      	bcs.n	800aaba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaa8:	4b3c      	ldr	r3, [pc, #240]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	4939      	ldr	r1, [pc, #228]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0308 	and.w	r3, r3, #8
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d010      	beq.n	800aae8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695a      	ldr	r2, [r3, #20]
 800aaca:	4b34      	ldr	r3, [pc, #208]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d208      	bcs.n	800aae8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aad6:	4b31      	ldr	r3, [pc, #196]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	492e      	ldr	r1, [pc, #184]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0310 	and.w	r3, r3, #16
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d010      	beq.n	800ab16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	699a      	ldr	r2, [r3, #24]
 800aaf8:	4b28      	ldr	r3, [pc, #160]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d208      	bcs.n	800ab16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab04:	4b25      	ldr	r3, [pc, #148]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	4922      	ldr	r1, [pc, #136]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0320 	and.w	r3, r3, #32
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d010      	beq.n	800ab44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	69da      	ldr	r2, [r3, #28]
 800ab26:	4b1d      	ldr	r3, [pc, #116]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d208      	bcs.n	800ab44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab32:	4b1a      	ldr	r3, [pc, #104]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	4917      	ldr	r1, [pc, #92]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800ab40:	4313      	orrs	r3, r2
 800ab42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab44:	f000 f834 	bl	800abb0 <HAL_RCC_GetSysClockFreq>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	f003 030f 	and.w	r3, r3, #15
 800ab54:	4912      	ldr	r1, [pc, #72]	; (800aba0 <HAL_RCC_ClockConfig+0x35c>)
 800ab56:	5ccb      	ldrb	r3, [r1, r3]
 800ab58:	f003 031f 	and.w	r3, r3, #31
 800ab5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab62:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <HAL_RCC_ClockConfig+0x358>)
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	f003 030f 	and.w	r3, r3, #15
 800ab6a:	4a0d      	ldr	r2, [pc, #52]	; (800aba0 <HAL_RCC_ClockConfig+0x35c>)
 800ab6c:	5cd3      	ldrb	r3, [r2, r3]
 800ab6e:	f003 031f 	and.w	r3, r3, #31
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	fa22 f303 	lsr.w	r3, r2, r3
 800ab78:	4a0a      	ldr	r2, [pc, #40]	; (800aba4 <HAL_RCC_ClockConfig+0x360>)
 800ab7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab7c:	4a0a      	ldr	r2, [pc, #40]	; (800aba8 <HAL_RCC_ClockConfig+0x364>)
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ab82:	4b0a      	ldr	r3, [pc, #40]	; (800abac <HAL_RCC_ClockConfig+0x368>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f8 f94c 	bl	8002e24 <HAL_InitTick>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	58024400 	.word	0x58024400
 800aba0:	08017274 	.word	0x08017274
 800aba4:	24000088 	.word	0x24000088
 800aba8:	24000084 	.word	0x24000084
 800abac:	2400008c 	.word	0x2400008c

0800abb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b089      	sub	sp, #36	; 0x24
 800abb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abb6:	4bb3      	ldr	r3, [pc, #716]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abbe:	2b18      	cmp	r3, #24
 800abc0:	f200 8155 	bhi.w	800ae6e <HAL_RCC_GetSysClockFreq+0x2be>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <HAL_RCC_GetSysClockFreq+0x1c>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800ac31 	.word	0x0800ac31
 800abd0:	0800ae6f 	.word	0x0800ae6f
 800abd4:	0800ae6f 	.word	0x0800ae6f
 800abd8:	0800ae6f 	.word	0x0800ae6f
 800abdc:	0800ae6f 	.word	0x0800ae6f
 800abe0:	0800ae6f 	.word	0x0800ae6f
 800abe4:	0800ae6f 	.word	0x0800ae6f
 800abe8:	0800ae6f 	.word	0x0800ae6f
 800abec:	0800ac57 	.word	0x0800ac57
 800abf0:	0800ae6f 	.word	0x0800ae6f
 800abf4:	0800ae6f 	.word	0x0800ae6f
 800abf8:	0800ae6f 	.word	0x0800ae6f
 800abfc:	0800ae6f 	.word	0x0800ae6f
 800ac00:	0800ae6f 	.word	0x0800ae6f
 800ac04:	0800ae6f 	.word	0x0800ae6f
 800ac08:	0800ae6f 	.word	0x0800ae6f
 800ac0c:	0800ac5d 	.word	0x0800ac5d
 800ac10:	0800ae6f 	.word	0x0800ae6f
 800ac14:	0800ae6f 	.word	0x0800ae6f
 800ac18:	0800ae6f 	.word	0x0800ae6f
 800ac1c:	0800ae6f 	.word	0x0800ae6f
 800ac20:	0800ae6f 	.word	0x0800ae6f
 800ac24:	0800ae6f 	.word	0x0800ae6f
 800ac28:	0800ae6f 	.word	0x0800ae6f
 800ac2c:	0800ac63 	.word	0x0800ac63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac30:	4b94      	ldr	r3, [pc, #592]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d009      	beq.n	800ac50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac3c:	4b91      	ldr	r3, [pc, #580]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	08db      	lsrs	r3, r3, #3
 800ac42:	f003 0303 	and.w	r3, r3, #3
 800ac46:	4a90      	ldr	r2, [pc, #576]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac48:	fa22 f303 	lsr.w	r3, r2, r3
 800ac4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ac4e:	e111      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac50:	4b8d      	ldr	r3, [pc, #564]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac52:	61bb      	str	r3, [r7, #24]
      break;
 800ac54:	e10e      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ac56:	4b8d      	ldr	r3, [pc, #564]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac58:	61bb      	str	r3, [r7, #24]
      break;
 800ac5a:	e10b      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ac5c:	4b8c      	ldr	r3, [pc, #560]	; (800ae90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ac5e:	61bb      	str	r3, [r7, #24]
      break;
 800ac60:	e108      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac62:	4b88      	ldr	r3, [pc, #544]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac6c:	4b85      	ldr	r3, [pc, #532]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	091b      	lsrs	r3, r3, #4
 800ac72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac78:	4b82      	ldr	r3, [pc, #520]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac82:	4b80      	ldr	r3, [pc, #512]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac86:	08db      	lsrs	r3, r3, #3
 800ac88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	fb02 f303 	mul.w	r3, r2, r3
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 80e1 	beq.w	800ae68 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	f000 8083 	beq.w	800adb4 <HAL_RCC_GetSysClockFreq+0x204>
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	f200 80a1 	bhi.w	800adf8 <HAL_RCC_GetSysClockFreq+0x248>
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <HAL_RCC_GetSysClockFreq+0x114>
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d056      	beq.n	800ad70 <HAL_RCC_GetSysClockFreq+0x1c0>
 800acc2:	e099      	b.n	800adf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acc4:	4b6f      	ldr	r3, [pc, #444]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0320 	and.w	r3, r3, #32
 800accc:	2b00      	cmp	r3, #0
 800acce:	d02d      	beq.n	800ad2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acd0:	4b6c      	ldr	r3, [pc, #432]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	08db      	lsrs	r3, r3, #3
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	4a6b      	ldr	r2, [pc, #428]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800acdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ace0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	ee07 3a90 	vmov	s15, r3
 800ace8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b62      	ldr	r3, [pc, #392]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad2a:	e087      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3e:	4b51      	ldr	r3, [pc, #324]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad52:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad6e:	e065      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ae9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad82:	4b40      	ldr	r3, [pc, #256]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad92:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adb2:	e043      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aea0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800adc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc6:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add6:	ed97 6a02 	vldr	s12, [r7, #8]
 800adda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adf6:	e021      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ae9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0a:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae3c:	4b11      	ldr	r3, [pc, #68]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae40:	0a5b      	lsrs	r3, r3, #9
 800ae42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae46:	3301      	adds	r3, #1
 800ae48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae60:	ee17 3a90 	vmov	r3, s15
 800ae64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ae66:	e005      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61bb      	str	r3, [r7, #24]
      break;
 800ae6c:	e002      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae70:	61bb      	str	r3, [r7, #24]
      break;
 800ae72:	bf00      	nop
  }

  return sysclockfreq;
 800ae74:	69bb      	ldr	r3, [r7, #24]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3724      	adds	r7, #36	; 0x24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	58024400 	.word	0x58024400
 800ae88:	03d09000 	.word	0x03d09000
 800ae8c:	003d0900 	.word	0x003d0900
 800ae90:	017d7840 	.word	0x017d7840
 800ae94:	46000000 	.word	0x46000000
 800ae98:	4c742400 	.word	0x4c742400
 800ae9c:	4a742400 	.word	0x4a742400
 800aea0:	4bbebc20 	.word	0x4bbebc20

0800aea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aeaa:	f7ff fe81 	bl	800abb0 <HAL_RCC_GetSysClockFreq>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	4b10      	ldr	r3, [pc, #64]	; (800aef4 <HAL_RCC_GetHCLKFreq+0x50>)
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	0a1b      	lsrs	r3, r3, #8
 800aeb6:	f003 030f 	and.w	r3, r3, #15
 800aeba:	490f      	ldr	r1, [pc, #60]	; (800aef8 <HAL_RCC_GetHCLKFreq+0x54>)
 800aebc:	5ccb      	ldrb	r3, [r1, r3]
 800aebe:	f003 031f 	and.w	r3, r3, #31
 800aec2:	fa22 f303 	lsr.w	r3, r2, r3
 800aec6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aec8:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <HAL_RCC_GetHCLKFreq+0x50>)
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	4a09      	ldr	r2, [pc, #36]	; (800aef8 <HAL_RCC_GetHCLKFreq+0x54>)
 800aed2:	5cd3      	ldrb	r3, [r2, r3]
 800aed4:	f003 031f 	and.w	r3, r3, #31
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	fa22 f303 	lsr.w	r3, r2, r3
 800aede:	4a07      	ldr	r2, [pc, #28]	; (800aefc <HAL_RCC_GetHCLKFreq+0x58>)
 800aee0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aee2:	4a07      	ldr	r2, [pc, #28]	; (800af00 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <HAL_RCC_GetHCLKFreq+0x58>)
 800aeea:	681b      	ldr	r3, [r3, #0]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	58024400 	.word	0x58024400
 800aef8:	08017274 	.word	0x08017274
 800aefc:	24000088 	.word	0x24000088
 800af00:	24000084 	.word	0x24000084

0800af04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af08:	f7ff ffcc 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800af0c:	4602      	mov	r2, r0
 800af0e:	4b06      	ldr	r3, [pc, #24]	; (800af28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	091b      	lsrs	r3, r3, #4
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	4904      	ldr	r1, [pc, #16]	; (800af2c <HAL_RCC_GetPCLK1Freq+0x28>)
 800af1a:	5ccb      	ldrb	r3, [r1, r3]
 800af1c:	f003 031f 	and.w	r3, r3, #31
 800af20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af24:	4618      	mov	r0, r3
 800af26:	bd80      	pop	{r7, pc}
 800af28:	58024400 	.word	0x58024400
 800af2c:	08017274 	.word	0x08017274

0800af30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af34:	f7ff ffb6 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800af38:	4602      	mov	r2, r0
 800af3a:	4b06      	ldr	r3, [pc, #24]	; (800af54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	0a1b      	lsrs	r3, r3, #8
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	4904      	ldr	r1, [pc, #16]	; (800af58 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af46:	5ccb      	ldrb	r3, [r1, r3]
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af50:	4618      	mov	r0, r3
 800af52:	bd80      	pop	{r7, pc}
 800af54:	58024400 	.word	0x58024400
 800af58:	08017274 	.word	0x08017274

0800af5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	223f      	movs	r2, #63	; 0x3f
 800af6a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af6c:	4b1a      	ldr	r3, [pc, #104]	; (800afd8 <HAL_RCC_GetClockConfig+0x7c>)
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0207 	and.w	r2, r3, #7
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800af78:	4b17      	ldr	r3, [pc, #92]	; (800afd8 <HAL_RCC_GetClockConfig+0x7c>)
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800af84:	4b14      	ldr	r3, [pc, #80]	; (800afd8 <HAL_RCC_GetClockConfig+0x7c>)
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	f003 020f 	and.w	r2, r3, #15
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800af90:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <HAL_RCC_GetClockConfig+0x7c>)
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800af9c:	4b0e      	ldr	r3, [pc, #56]	; (800afd8 <HAL_RCC_GetClockConfig+0x7c>)
 800af9e:	69db      	ldr	r3, [r3, #28]
 800afa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <HAL_RCC_GetClockConfig+0x7c>)
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800afb4:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <HAL_RCC_GetClockConfig+0x7c>)
 800afb6:	6a1b      	ldr	r3, [r3, #32]
 800afb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afc0:	4b06      	ldr	r3, [pc, #24]	; (800afdc <HAL_RCC_GetClockConfig+0x80>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 020f 	and.w	r2, r3, #15
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	601a      	str	r2, [r3, #0]
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	58024400 	.word	0x58024400
 800afdc:	52002000 	.word	0x52002000

0800afe0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afe4:	b0ca      	sub	sp, #296	; 0x128
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afec:	2300      	movs	r3, #0
 800afee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aff2:	2300      	movs	r3, #0
 800aff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b004:	2500      	movs	r5, #0
 800b006:	ea54 0305 	orrs.w	r3, r4, r5
 800b00a:	d049      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b012:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b016:	d02f      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b018:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b01c:	d828      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b01e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b022:	d01a      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b028:	d822      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b02e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b032:	d007      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b034:	e01c      	b.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b036:	4bb8      	ldr	r3, [pc, #736]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03a:	4ab7      	ldr	r2, [pc, #732]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b03c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b042:	e01a      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b048:	3308      	adds	r3, #8
 800b04a:	2102      	movs	r1, #2
 800b04c:	4618      	mov	r0, r3
 800b04e:	f002 fb61 	bl	800d714 <RCCEx_PLL2_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b058:	e00f      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b05e:	3328      	adds	r3, #40	; 0x28
 800b060:	2102      	movs	r1, #2
 800b062:	4618      	mov	r0, r3
 800b064:	f002 fc08 	bl	800d878 <RCCEx_PLL3_Config>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b06e:	e004      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b076:	e000      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10a      	bne.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b082:	4ba5      	ldr	r3, [pc, #660]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b086:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b08e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b090:	4aa1      	ldr	r2, [pc, #644]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b092:	430b      	orrs	r3, r1
 800b094:	6513      	str	r3, [r2, #80]	; 0x50
 800b096:	e003      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b09c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b0ac:	f04f 0900 	mov.w	r9, #0
 800b0b0:	ea58 0309 	orrs.w	r3, r8, r9
 800b0b4:	d047      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d82a      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b0c0:	a201      	add	r2, pc, #4	; (adr r2, 800b0c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c6:	bf00      	nop
 800b0c8:	0800b0dd 	.word	0x0800b0dd
 800b0cc:	0800b0eb 	.word	0x0800b0eb
 800b0d0:	0800b101 	.word	0x0800b101
 800b0d4:	0800b11f 	.word	0x0800b11f
 800b0d8:	0800b11f 	.word	0x0800b11f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0dc:	4b8e      	ldr	r3, [pc, #568]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	4a8d      	ldr	r2, [pc, #564]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0e8:	e01a      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f002 fb0e 	bl	800d714 <RCCEx_PLL2_Config>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0fe:	e00f      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b104:	3328      	adds	r3, #40	; 0x28
 800b106:	2100      	movs	r1, #0
 800b108:	4618      	mov	r0, r3
 800b10a:	f002 fbb5 	bl	800d878 <RCCEx_PLL3_Config>
 800b10e:	4603      	mov	r3, r0
 800b110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b114:	e004      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b11c:	e000      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b11e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10a      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b128:	4b7b      	ldr	r3, [pc, #492]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b12c:	f023 0107 	bic.w	r1, r3, #7
 800b130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b136:	4a78      	ldr	r2, [pc, #480]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b138:	430b      	orrs	r3, r1
 800b13a:	6513      	str	r3, [r2, #80]	; 0x50
 800b13c:	e003      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b142:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b152:	f04f 0b00 	mov.w	fp, #0
 800b156:	ea5a 030b 	orrs.w	r3, sl, fp
 800b15a:	d04c      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b166:	d030      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16c:	d829      	bhi.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b16e:	2bc0      	cmp	r3, #192	; 0xc0
 800b170:	d02d      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b172:	2bc0      	cmp	r3, #192	; 0xc0
 800b174:	d825      	bhi.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b176:	2b80      	cmp	r3, #128	; 0x80
 800b178:	d018      	beq.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b17a:	2b80      	cmp	r3, #128	; 0x80
 800b17c:	d821      	bhi.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b182:	2b40      	cmp	r3, #64	; 0x40
 800b184:	d007      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b186:	e01c      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b188:	4b63      	ldr	r3, [pc, #396]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	4a62      	ldr	r2, [pc, #392]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b18e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b194:	e01c      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19a:	3308      	adds	r3, #8
 800b19c:	2100      	movs	r1, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f002 fab8 	bl	800d714 <RCCEx_PLL2_Config>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1aa:	e011      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b0:	3328      	adds	r3, #40	; 0x28
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f002 fb5f 	bl	800d878 <RCCEx_PLL3_Config>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1c0:	e006      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1c8:	e002      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1ca:	bf00      	nop
 800b1cc:	e000      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b1d8:	4b4f      	ldr	r3, [pc, #316]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1dc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e6:	4a4c      	ldr	r2, [pc, #304]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1e8:	430b      	orrs	r3, r1
 800b1ea:	6513      	str	r3, [r2, #80]	; 0x50
 800b1ec:	e003      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b202:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b206:	2300      	movs	r3, #0
 800b208:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b20c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b210:	460b      	mov	r3, r1
 800b212:	4313      	orrs	r3, r2
 800b214:	d053      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b21a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b21e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b222:	d035      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b228:	d82e      	bhi.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b22a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b22e:	d031      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b230:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b234:	d828      	bhi.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b23a:	d01a      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b23c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b240:	d822      	bhi.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b24a:	d007      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b24c:	e01c      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b24e:	4b32      	ldr	r3, [pc, #200]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b252:	4a31      	ldr	r2, [pc, #196]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b25a:	e01c      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b260:	3308      	adds	r3, #8
 800b262:	2100      	movs	r1, #0
 800b264:	4618      	mov	r0, r3
 800b266:	f002 fa55 	bl	800d714 <RCCEx_PLL2_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b270:	e011      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b276:	3328      	adds	r3, #40	; 0x28
 800b278:	2100      	movs	r1, #0
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 fafc 	bl	800d878 <RCCEx_PLL3_Config>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b286:	e006      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b28e:	e002      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b290:	bf00      	nop
 800b292:	e000      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b294:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10b      	bne.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b29e:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2ae:	4a1a      	ldr	r2, [pc, #104]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b2b4:	e003      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b2ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b2d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	d056      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2ea:	d038      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b2ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2f0:	d831      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2f6:	d034      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b2f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2fc:	d82b      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b302:	d01d      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b308:	d825      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d006      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b30e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b312:	d00a      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b314:	e01f      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b316:	bf00      	nop
 800b318:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b31c:	4ba2      	ldr	r3, [pc, #648]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	4aa1      	ldr	r2, [pc, #644]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b328:	e01c      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32e:	3308      	adds	r3, #8
 800b330:	2100      	movs	r1, #0
 800b332:	4618      	mov	r0, r3
 800b334:	f002 f9ee 	bl	800d714 <RCCEx_PLL2_Config>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b33e:	e011      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b344:	3328      	adds	r3, #40	; 0x28
 800b346:	2100      	movs	r1, #0
 800b348:	4618      	mov	r0, r3
 800b34a:	f002 fa95 	bl	800d878 <RCCEx_PLL3_Config>
 800b34e:	4603      	mov	r3, r0
 800b350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b354:	e006      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b35c:	e002      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b35e:	bf00      	nop
 800b360:	e000      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b362:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10b      	bne.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b36c:	4b8e      	ldr	r3, [pc, #568]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b370:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b378:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b37c:	4a8a      	ldr	r2, [pc, #552]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b37e:	430b      	orrs	r3, r1
 800b380:	6593      	str	r3, [r2, #88]	; 0x58
 800b382:	e003      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b384:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b388:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b39c:	2300      	movs	r3, #0
 800b39e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	d03a      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b2:	2b30      	cmp	r3, #48	; 0x30
 800b3b4:	d01f      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b3b6:	2b30      	cmp	r3, #48	; 0x30
 800b3b8:	d819      	bhi.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3ba:	2b20      	cmp	r3, #32
 800b3bc:	d00c      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b3be:	2b20      	cmp	r3, #32
 800b3c0:	d815      	bhi.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d019      	beq.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b3c6:	2b10      	cmp	r3, #16
 800b3c8:	d111      	bne.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3ca:	4b77      	ldr	r3, [pc, #476]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	4a76      	ldr	r2, [pc, #472]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3d6:	e011      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3dc:	3308      	adds	r3, #8
 800b3de:	2102      	movs	r1, #2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f002 f997 	bl	800d714 <RCCEx_PLL2_Config>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3ec:	e006      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3f4:	e002      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3f6:	bf00      	nop
 800b3f8:	e000      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b404:	4b68      	ldr	r3, [pc, #416]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b408:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b412:	4a65      	ldr	r2, [pc, #404]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b414:	430b      	orrs	r3, r1
 800b416:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b418:	e003      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b41e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b42e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b432:	2300      	movs	r3, #0
 800b434:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b438:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b43c:	460b      	mov	r3, r1
 800b43e:	4313      	orrs	r3, r2
 800b440:	d051      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b44c:	d035      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b44e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b452:	d82e      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b454:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b458:	d031      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b45a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b45e:	d828      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b464:	d01a      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b46a:	d822      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b474:	d007      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b476:	e01c      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b478:	4b4b      	ldr	r3, [pc, #300]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	4a4a      	ldr	r2, [pc, #296]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b47e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b484:	e01c      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48a:	3308      	adds	r3, #8
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f002 f940 	bl	800d714 <RCCEx_PLL2_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b49a:	e011      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a0:	3328      	adds	r3, #40	; 0x28
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f002 f9e7 	bl	800d878 <RCCEx_PLL3_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4b0:	e006      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4b8:	e002      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4ba:	bf00      	nop
 800b4bc:	e000      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b4c8:	4b37      	ldr	r3, [pc, #220]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4d6:	4a34      	ldr	r2, [pc, #208]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4d8:	430b      	orrs	r3, r1
 800b4da:	6513      	str	r3, [r2, #80]	; 0x50
 800b4dc:	e003      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b4f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b500:	460b      	mov	r3, r1
 800b502:	4313      	orrs	r3, r2
 800b504:	d056      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b50c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b510:	d033      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b516:	d82c      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b518:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b51c:	d02f      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b51e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b522:	d826      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b524:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b528:	d02b      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b52a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b52e:	d820      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b534:	d012      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b53a:	d81a      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d022      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b544:	d115      	bne.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54a:	3308      	adds	r3, #8
 800b54c:	2101      	movs	r1, #1
 800b54e:	4618      	mov	r0, r3
 800b550:	f002 f8e0 	bl	800d714 <RCCEx_PLL2_Config>
 800b554:	4603      	mov	r3, r0
 800b556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b55a:	e015      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b560:	3328      	adds	r3, #40	; 0x28
 800b562:	2101      	movs	r1, #1
 800b564:	4618      	mov	r0, r3
 800b566:	f002 f987 	bl	800d878 <RCCEx_PLL3_Config>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b570:	e00a      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b578:	e006      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b57a:	bf00      	nop
 800b57c:	e004      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b57e:	bf00      	nop
 800b580:	e002      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b582:	bf00      	nop
 800b584:	e000      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b586:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10d      	bne.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b590:	4b05      	ldr	r3, [pc, #20]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b594:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b59e:	4a02      	ldr	r2, [pc, #8]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	6513      	str	r3, [r2, #80]	; 0x50
 800b5a4:	e006      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b5a6:	bf00      	nop
 800b5a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b5c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	d055      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5e0:	d033      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b5e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5e6:	d82c      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ec:	d02f      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f2:	d826      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5f8:	d02b      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b5fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5fe:	d820      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b604:	d012      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b60a:	d81a      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d022      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b614:	d115      	bne.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61a:	3308      	adds	r3, #8
 800b61c:	2101      	movs	r1, #1
 800b61e:	4618      	mov	r0, r3
 800b620:	f002 f878 	bl	800d714 <RCCEx_PLL2_Config>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b62a:	e015      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b630:	3328      	adds	r3, #40	; 0x28
 800b632:	2101      	movs	r1, #1
 800b634:	4618      	mov	r0, r3
 800b636:	f002 f91f 	bl	800d878 <RCCEx_PLL3_Config>
 800b63a:	4603      	mov	r3, r0
 800b63c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b640:	e00a      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b648:	e006      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b64a:	bf00      	nop
 800b64c:	e004      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b64e:	bf00      	nop
 800b650:	e002      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b652:	bf00      	nop
 800b654:	e000      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b656:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10b      	bne.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b660:	4ba3      	ldr	r3, [pc, #652]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b664:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b670:	4a9f      	ldr	r2, [pc, #636]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b672:	430b      	orrs	r3, r1
 800b674:	6593      	str	r3, [r2, #88]	; 0x58
 800b676:	e003      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b67c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b68c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b690:	2300      	movs	r3, #0
 800b692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b696:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b69a:	460b      	mov	r3, r1
 800b69c:	4313      	orrs	r3, r2
 800b69e:	d037      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6aa:	d00e      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b6ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b0:	d816      	bhi.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d018      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b6b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ba:	d111      	bne.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6bc:	4b8c      	ldr	r3, [pc, #560]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	4a8b      	ldr	r2, [pc, #556]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6c8:	e00f      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f002 f81e 	bl	800d714 <RCCEx_PLL2_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6de:	e004      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6e6:	e000      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b6e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b6f2:	4b7f      	ldr	r3, [pc, #508]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b700:	4a7b      	ldr	r2, [pc, #492]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b702:	430b      	orrs	r3, r1
 800b704:	6513      	str	r3, [r2, #80]	; 0x50
 800b706:	e003      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b70c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b71c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b720:	2300      	movs	r3, #0
 800b722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b726:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4313      	orrs	r3, r2
 800b72e:	d039      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b736:	2b03      	cmp	r3, #3
 800b738:	d81c      	bhi.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b77d 	.word	0x0800b77d
 800b744:	0800b751 	.word	0x0800b751
 800b748:	0800b75f 	.word	0x0800b75f
 800b74c:	0800b77d 	.word	0x0800b77d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b750:	4b67      	ldr	r3, [pc, #412]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b754:	4a66      	ldr	r2, [pc, #408]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b75c:	e00f      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b762:	3308      	adds	r3, #8
 800b764:	2102      	movs	r1, #2
 800b766:	4618      	mov	r0, r3
 800b768:	f001 ffd4 	bl	800d714 <RCCEx_PLL2_Config>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b772:	e004      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b77a:	e000      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b77c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b786:	4b5a      	ldr	r3, [pc, #360]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b78a:	f023 0103 	bic.w	r1, r3, #3
 800b78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b794:	4a56      	ldr	r2, [pc, #344]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b796:	430b      	orrs	r3, r1
 800b798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b79a:	e003      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b7b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	f000 809f 	beq.w	800b904 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7c6:	4b4b      	ldr	r3, [pc, #300]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a4a      	ldr	r2, [pc, #296]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7d2:	f7f8 fc09 	bl	8003fe8 <HAL_GetTick>
 800b7d6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7da:	e00b      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7dc:	f7f8 fc04 	bl	8003fe8 <HAL_GetTick>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	2b64      	cmp	r3, #100	; 0x64
 800b7ea:	d903      	bls.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7f2:	e005      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7f4:	4b3f      	ldr	r3, [pc, #252]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d0ed      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b804:	2b00      	cmp	r3, #0
 800b806:	d179      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b808:	4b39      	ldr	r3, [pc, #228]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b80a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b810:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b814:	4053      	eors	r3, r2
 800b816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d015      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b81e:	4b34      	ldr	r3, [pc, #208]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b826:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b82a:	4b31      	ldr	r3, [pc, #196]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b82e:	4a30      	ldr	r2, [pc, #192]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b834:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b836:	4b2e      	ldr	r3, [pc, #184]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83a:	4a2d      	ldr	r2, [pc, #180]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b83c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b840:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b842:	4a2b      	ldr	r2, [pc, #172]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b844:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b848:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b856:	d118      	bne.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b858:	f7f8 fbc6 	bl	8003fe8 <HAL_GetTick>
 800b85c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b860:	e00d      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b862:	f7f8 fbc1 	bl	8003fe8 <HAL_GetTick>
 800b866:	4602      	mov	r2, r0
 800b868:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b86c:	1ad2      	subs	r2, r2, r3
 800b86e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b872:	429a      	cmp	r2, r3
 800b874:	d903      	bls.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b87c:	e005      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b87e:	4b1c      	ldr	r3, [pc, #112]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b882:	f003 0302 	and.w	r3, r3, #2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d0eb      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b88a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d129      	bne.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b89a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b89e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8a2:	d10e      	bne.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b8a4:	4b12      	ldr	r3, [pc, #72]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8b4:	091a      	lsrs	r2, r3, #4
 800b8b6:	4b10      	ldr	r3, [pc, #64]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	4a0d      	ldr	r2, [pc, #52]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	6113      	str	r3, [r2, #16]
 800b8c0:	e005      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b8c2:	4b0b      	ldr	r3, [pc, #44]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	4a0a      	ldr	r2, [pc, #40]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8cc:	6113      	str	r3, [r2, #16]
 800b8ce:	4b08      	ldr	r3, [pc, #32]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8de:	4a04      	ldr	r2, [pc, #16]	; (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	6713      	str	r3, [r2, #112]	; 0x70
 800b8e4:	e00e      	b.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b8ee:	e009      	b.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b8f0:	58024400 	.word	0x58024400
 800b8f4:	58024800 	.word	0x58024800
 800b8f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b900:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f002 0301 	and.w	r3, r2, #1
 800b910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b914:	2300      	movs	r3, #0
 800b916:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b91a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b91e:	460b      	mov	r3, r1
 800b920:	4313      	orrs	r3, r2
 800b922:	f000 8089 	beq.w	800ba38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b92c:	2b28      	cmp	r3, #40	; 0x28
 800b92e:	d86b      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b930:	a201      	add	r2, pc, #4	; (adr r2, 800b938 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b936:	bf00      	nop
 800b938:	0800ba11 	.word	0x0800ba11
 800b93c:	0800ba09 	.word	0x0800ba09
 800b940:	0800ba09 	.word	0x0800ba09
 800b944:	0800ba09 	.word	0x0800ba09
 800b948:	0800ba09 	.word	0x0800ba09
 800b94c:	0800ba09 	.word	0x0800ba09
 800b950:	0800ba09 	.word	0x0800ba09
 800b954:	0800ba09 	.word	0x0800ba09
 800b958:	0800b9dd 	.word	0x0800b9dd
 800b95c:	0800ba09 	.word	0x0800ba09
 800b960:	0800ba09 	.word	0x0800ba09
 800b964:	0800ba09 	.word	0x0800ba09
 800b968:	0800ba09 	.word	0x0800ba09
 800b96c:	0800ba09 	.word	0x0800ba09
 800b970:	0800ba09 	.word	0x0800ba09
 800b974:	0800ba09 	.word	0x0800ba09
 800b978:	0800b9f3 	.word	0x0800b9f3
 800b97c:	0800ba09 	.word	0x0800ba09
 800b980:	0800ba09 	.word	0x0800ba09
 800b984:	0800ba09 	.word	0x0800ba09
 800b988:	0800ba09 	.word	0x0800ba09
 800b98c:	0800ba09 	.word	0x0800ba09
 800b990:	0800ba09 	.word	0x0800ba09
 800b994:	0800ba09 	.word	0x0800ba09
 800b998:	0800ba11 	.word	0x0800ba11
 800b99c:	0800ba09 	.word	0x0800ba09
 800b9a0:	0800ba09 	.word	0x0800ba09
 800b9a4:	0800ba09 	.word	0x0800ba09
 800b9a8:	0800ba09 	.word	0x0800ba09
 800b9ac:	0800ba09 	.word	0x0800ba09
 800b9b0:	0800ba09 	.word	0x0800ba09
 800b9b4:	0800ba09 	.word	0x0800ba09
 800b9b8:	0800ba11 	.word	0x0800ba11
 800b9bc:	0800ba09 	.word	0x0800ba09
 800b9c0:	0800ba09 	.word	0x0800ba09
 800b9c4:	0800ba09 	.word	0x0800ba09
 800b9c8:	0800ba09 	.word	0x0800ba09
 800b9cc:	0800ba09 	.word	0x0800ba09
 800b9d0:	0800ba09 	.word	0x0800ba09
 800b9d4:	0800ba09 	.word	0x0800ba09
 800b9d8:	0800ba11 	.word	0x0800ba11
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fe95 	bl	800d714 <RCCEx_PLL2_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b9f0:	e00f      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f6:	3328      	adds	r3, #40	; 0x28
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f001 ff3c 	bl	800d878 <RCCEx_PLL3_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba06:	e004      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba0e:	e000      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ba10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10a      	bne.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba1a:	4bbf      	ldr	r3, [pc, #764]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ba22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba28:	4abb      	ldr	r2, [pc, #748]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	6553      	str	r3, [r2, #84]	; 0x54
 800ba2e:	e003      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	f002 0302 	and.w	r3, r2, #2
 800ba44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ba52:	460b      	mov	r3, r1
 800ba54:	4313      	orrs	r3, r2
 800ba56:	d041      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba5e:	2b05      	cmp	r3, #5
 800ba60:	d824      	bhi.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ba62:	a201      	add	r2, pc, #4	; (adr r2, 800ba68 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba68:	0800bab5 	.word	0x0800bab5
 800ba6c:	0800ba81 	.word	0x0800ba81
 800ba70:	0800ba97 	.word	0x0800ba97
 800ba74:	0800bab5 	.word	0x0800bab5
 800ba78:	0800bab5 	.word	0x0800bab5
 800ba7c:	0800bab5 	.word	0x0800bab5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba84:	3308      	adds	r3, #8
 800ba86:	2101      	movs	r1, #1
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f001 fe43 	bl	800d714 <RCCEx_PLL2_Config>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba94:	e00f      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba9a:	3328      	adds	r3, #40	; 0x28
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f001 feea 	bl	800d878 <RCCEx_PLL3_Config>
 800baa4:	4603      	mov	r3, r0
 800baa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800baaa:	e004      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bab2:	e000      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800babe:	4b96      	ldr	r3, [pc, #600]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac2:	f023 0107 	bic.w	r1, r3, #7
 800bac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bacc:	4a92      	ldr	r2, [pc, #584]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bace:	430b      	orrs	r3, r1
 800bad0:	6553      	str	r3, [r2, #84]	; 0x54
 800bad2:	e003      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800badc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f002 0304 	and.w	r3, r2, #4
 800bae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800baec:	2300      	movs	r3, #0
 800baee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baf2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4313      	orrs	r3, r2
 800bafa:	d044      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb04:	2b05      	cmp	r3, #5
 800bb06:	d825      	bhi.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bb08:	a201      	add	r2, pc, #4	; (adr r2, 800bb10 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0e:	bf00      	nop
 800bb10:	0800bb5d 	.word	0x0800bb5d
 800bb14:	0800bb29 	.word	0x0800bb29
 800bb18:	0800bb3f 	.word	0x0800bb3f
 800bb1c:	0800bb5d 	.word	0x0800bb5d
 800bb20:	0800bb5d 	.word	0x0800bb5d
 800bb24:	0800bb5d 	.word	0x0800bb5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	2101      	movs	r1, #1
 800bb30:	4618      	mov	r0, r3
 800bb32:	f001 fdef 	bl	800d714 <RCCEx_PLL2_Config>
 800bb36:	4603      	mov	r3, r0
 800bb38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb3c:	e00f      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb42:	3328      	adds	r3, #40	; 0x28
 800bb44:	2101      	movs	r1, #1
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 fe96 	bl	800d878 <RCCEx_PLL3_Config>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb52:	e004      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb5a:	e000      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bb5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10b      	bne.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb66:	4b6c      	ldr	r3, [pc, #432]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb6a:	f023 0107 	bic.w	r1, r3, #7
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb76:	4a68      	ldr	r2, [pc, #416]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb7c:	e003      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f002 0320 	and.w	r3, r2, #32
 800bb92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb96:	2300      	movs	r3, #0
 800bb98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bba0:	460b      	mov	r3, r1
 800bba2:	4313      	orrs	r3, r2
 800bba4:	d055      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbb2:	d033      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bbb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbb8:	d82c      	bhi.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbbe:	d02f      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bbc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbc4:	d826      	bhi.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbca:	d02b      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bbcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbd0:	d820      	bhi.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbd6:	d012      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bbd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbdc:	d81a      	bhi.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d022      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bbe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbe6:	d115      	bne.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbec:	3308      	adds	r3, #8
 800bbee:	2100      	movs	r1, #0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f001 fd8f 	bl	800d714 <RCCEx_PLL2_Config>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bbfc:	e015      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc02:	3328      	adds	r3, #40	; 0x28
 800bc04:	2102      	movs	r1, #2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f001 fe36 	bl	800d878 <RCCEx_PLL3_Config>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc12:	e00a      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc1a:	e006      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc1c:	bf00      	nop
 800bc1e:	e004      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc20:	bf00      	nop
 800bc22:	e002      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc24:	bf00      	nop
 800bc26:	e000      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10b      	bne.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc32:	4b39      	ldr	r3, [pc, #228]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc36:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc42:	4a35      	ldr	r2, [pc, #212]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc44:	430b      	orrs	r3, r1
 800bc46:	6553      	str	r3, [r2, #84]	; 0x54
 800bc48:	e003      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bc5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc62:	2300      	movs	r3, #0
 800bc64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bc68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	d058      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc7e:	d033      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bc80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc84:	d82c      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8a:	d02f      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bc8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc90:	d826      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc96:	d02b      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bc98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc9c:	d820      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bca2:	d012      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bca8:	d81a      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d022      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bcae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcb2:	d115      	bne.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2100      	movs	r1, #0
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 fd29 	bl	800d714 <RCCEx_PLL2_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bcc8:	e015      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	3328      	adds	r3, #40	; 0x28
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 fdd0 	bl	800d878 <RCCEx_PLL3_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bcde:	e00a      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bce6:	e006      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bce8:	bf00      	nop
 800bcea:	e004      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcec:	bf00      	nop
 800bcee:	e002      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcf0:	bf00      	nop
 800bcf2:	e000      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10e      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bcfe:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd02:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd0e:	4a02      	ldr	r2, [pc, #8]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd10:	430b      	orrs	r3, r1
 800bd12:	6593      	str	r3, [r2, #88]	; 0x58
 800bd14:	e006      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bd16:	bf00      	nop
 800bd18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bd30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd34:	2300      	movs	r3, #0
 800bd36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd3a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4313      	orrs	r3, r2
 800bd42:	d055      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd50:	d033      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bd52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd56:	d82c      	bhi.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd5c:	d02f      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bd5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd62:	d826      	bhi.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd68:	d02b      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bd6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd6e:	d820      	bhi.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd74:	d012      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bd76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd7a:	d81a      	bhi.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d022      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bd80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd84:	d115      	bne.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f001 fcc0 	bl	800d714 <RCCEx_PLL2_Config>
 800bd94:	4603      	mov	r3, r0
 800bd96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd9a:	e015      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda0:	3328      	adds	r3, #40	; 0x28
 800bda2:	2102      	movs	r1, #2
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 fd67 	bl	800d878 <RCCEx_PLL3_Config>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bdb0:	e00a      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdb8:	e006      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdba:	bf00      	nop
 800bdbc:	e004      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdbe:	bf00      	nop
 800bdc0:	e002      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdc2:	bf00      	nop
 800bdc4:	e000      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10b      	bne.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bdd0:	4ba1      	ldr	r3, [pc, #644]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bdd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bde0:	4a9d      	ldr	r2, [pc, #628]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bde2:	430b      	orrs	r3, r1
 800bde4:	6593      	str	r3, [r2, #88]	; 0x58
 800bde6:	e003      	b.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f002 0308 	and.w	r3, r2, #8
 800bdfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be00:	2300      	movs	r3, #0
 800be02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800be0a:	460b      	mov	r3, r1
 800be0c:	4313      	orrs	r3, r2
 800be0e:	d01e      	beq.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be1c:	d10c      	bne.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be22:	3328      	adds	r3, #40	; 0x28
 800be24:	2102      	movs	r1, #2
 800be26:	4618      	mov	r0, r3
 800be28:	f001 fd26 	bl	800d878 <RCCEx_PLL3_Config>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d002      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be38:	4b87      	ldr	r3, [pc, #540]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be48:	4a83      	ldr	r2, [pc, #524]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be4a:	430b      	orrs	r3, r1
 800be4c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f002 0310 	and.w	r3, r2, #16
 800be5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be5e:	2300      	movs	r3, #0
 800be60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800be68:	460b      	mov	r3, r1
 800be6a:	4313      	orrs	r3, r2
 800be6c:	d01e      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800be6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be7a:	d10c      	bne.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be80:	3328      	adds	r3, #40	; 0x28
 800be82:	2102      	movs	r1, #2
 800be84:	4618      	mov	r0, r3
 800be86:	f001 fcf7 	bl	800d878 <RCCEx_PLL3_Config>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d002      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be96:	4b70      	ldr	r3, [pc, #448]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bea6:	4a6c      	ldr	r2, [pc, #432]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bea8:	430b      	orrs	r3, r1
 800beaa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800beac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800beb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bebc:	2300      	movs	r3, #0
 800bebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bec2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bec6:	460b      	mov	r3, r1
 800bec8:	4313      	orrs	r3, r2
 800beca:	d03e      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800becc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bed8:	d022      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800beda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bede:	d81b      	bhi.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bee8:	d00b      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800beea:	e015      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800beec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef0:	3308      	adds	r3, #8
 800bef2:	2100      	movs	r1, #0
 800bef4:	4618      	mov	r0, r3
 800bef6:	f001 fc0d 	bl	800d714 <RCCEx_PLL2_Config>
 800befa:	4603      	mov	r3, r0
 800befc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf00:	e00f      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf06:	3328      	adds	r3, #40	; 0x28
 800bf08:	2102      	movs	r1, #2
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f001 fcb4 	bl	800d878 <RCCEx_PLL3_Config>
 800bf10:	4603      	mov	r3, r0
 800bf12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf16:	e004      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf1e:	e000      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bf20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10b      	bne.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf2a:	4b4b      	ldr	r3, [pc, #300]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bf32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf3a:	4a47      	ldr	r2, [pc, #284]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf3c:	430b      	orrs	r3, r1
 800bf3e:	6593      	str	r3, [r2, #88]	; 0x58
 800bf40:	e003      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bf56:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf58:	2300      	movs	r3, #0
 800bf5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bf60:	460b      	mov	r3, r1
 800bf62:	4313      	orrs	r3, r2
 800bf64:	d03b      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bf66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf72:	d01f      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bf74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf78:	d818      	bhi.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bf7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf7e:	d003      	beq.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bf80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf84:	d007      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bf86:	e011      	b.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf88:	4b33      	ldr	r3, [pc, #204]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	4a32      	ldr	r2, [pc, #200]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf94:	e00f      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9a:	3328      	adds	r3, #40	; 0x28
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f001 fc6a 	bl	800d878 <RCCEx_PLL3_Config>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bfaa:	e004      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfb2:	e000      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bfb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10b      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfbe:	4b26      	ldr	r3, [pc, #152]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfce:	4a22      	ldr	r2, [pc, #136]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	6553      	str	r3, [r2, #84]	; 0x54
 800bfd4:	e003      	b.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bfea:	673b      	str	r3, [r7, #112]	; 0x70
 800bfec:	2300      	movs	r3, #0
 800bfee:	677b      	str	r3, [r7, #116]	; 0x74
 800bff0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bff4:	460b      	mov	r3, r1
 800bff6:	4313      	orrs	r3, r2
 800bff8:	d034      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c000:	2b00      	cmp	r3, #0
 800c002:	d003      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c008:	d007      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c00a:	e011      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c00c:	4b12      	ldr	r3, [pc, #72]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	4a11      	ldr	r2, [pc, #68]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c018:	e00e      	b.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01e:	3308      	adds	r3, #8
 800c020:	2102      	movs	r1, #2
 800c022:	4618      	mov	r0, r3
 800c024:	f001 fb76 	bl	800d714 <RCCEx_PLL2_Config>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c02e:	e003      	b.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c036:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10d      	bne.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c040:	4b05      	ldr	r3, [pc, #20]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04e:	4a02      	ldr	r2, [pc, #8]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c050:	430b      	orrs	r3, r1
 800c052:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c054:	e006      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c056:	bf00      	nop
 800c058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c070:	66bb      	str	r3, [r7, #104]	; 0x68
 800c072:	2300      	movs	r3, #0
 800c074:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c076:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c07a:	460b      	mov	r3, r1
 800c07c:	4313      	orrs	r3, r2
 800c07e:	d00c      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c084:	3328      	adds	r3, #40	; 0x28
 800c086:	2102      	movs	r1, #2
 800c088:	4618      	mov	r0, r3
 800c08a:	f001 fbf5 	bl	800d878 <RCCEx_PLL3_Config>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c0a6:	663b      	str	r3, [r7, #96]	; 0x60
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	667b      	str	r3, [r7, #100]	; 0x64
 800c0ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	d038      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0c2:	d018      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c0c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0c8:	d811      	bhi.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c0ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0ce:	d014      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d4:	d80b      	bhi.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d011      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0de:	d106      	bne.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e0:	4bc3      	ldr	r3, [pc, #780]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	4ac2      	ldr	r2, [pc, #776]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c0ec:	e008      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0f4:	e004      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0f6:	bf00      	nop
 800c0f8:	e002      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0fa:	bf00      	nop
 800c0fc:	e000      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10b      	bne.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c108:	4bb9      	ldr	r3, [pc, #740]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c118:	4ab5      	ldr	r2, [pc, #724]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c11a:	430b      	orrs	r3, r1
 800c11c:	6553      	str	r3, [r2, #84]	; 0x54
 800c11e:	e003      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c134:	65bb      	str	r3, [r7, #88]	; 0x58
 800c136:	2300      	movs	r3, #0
 800c138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c13a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c13e:	460b      	mov	r3, r1
 800c140:	4313      	orrs	r3, r2
 800c142:	d009      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c144:	4baa      	ldr	r3, [pc, #680]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c148:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c152:	4aa7      	ldr	r2, [pc, #668]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c154:	430b      	orrs	r3, r1
 800c156:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c164:	653b      	str	r3, [r7, #80]	; 0x50
 800c166:	2300      	movs	r3, #0
 800c168:	657b      	str	r3, [r7, #84]	; 0x54
 800c16a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c16e:	460b      	mov	r3, r1
 800c170:	4313      	orrs	r3, r2
 800c172:	d00a      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c174:	4b9e      	ldr	r3, [pc, #632]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c180:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c184:	4a9a      	ldr	r2, [pc, #616]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c186:	430b      	orrs	r3, r1
 800c188:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c196:	64bb      	str	r3, [r7, #72]	; 0x48
 800c198:	2300      	movs	r3, #0
 800c19a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c19c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	d009      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c1a6:	4b92      	ldr	r3, [pc, #584]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1aa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b4:	4a8e      	ldr	r2, [pc, #568]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1b6:	430b      	orrs	r3, r1
 800c1b8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c1c6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c1cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	d00e      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c1d6:	4b86      	ldr	r3, [pc, #536]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	4a85      	ldr	r2, [pc, #532]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1e0:	6113      	str	r3, [r2, #16]
 800c1e2:	4b83      	ldr	r3, [pc, #524]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1e4:	6919      	ldr	r1, [r3, #16]
 800c1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c1ee:	4a80      	ldr	r2, [pc, #512]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1f0:	430b      	orrs	r3, r1
 800c1f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c200:	63bb      	str	r3, [r7, #56]	; 0x38
 800c202:	2300      	movs	r3, #0
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c206:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c20a:	460b      	mov	r3, r1
 800c20c:	4313      	orrs	r3, r2
 800c20e:	d009      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c210:	4b77      	ldr	r3, [pc, #476]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c214:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21e:	4a74      	ldr	r2, [pc, #464]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c220:	430b      	orrs	r3, r1
 800c222:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c230:	633b      	str	r3, [r7, #48]	; 0x30
 800c232:	2300      	movs	r3, #0
 800c234:	637b      	str	r3, [r7, #52]	; 0x34
 800c236:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c23a:	460b      	mov	r3, r1
 800c23c:	4313      	orrs	r3, r2
 800c23e:	d00a      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c240:	4b6b      	ldr	r3, [pc, #428]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c244:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c250:	4a67      	ldr	r2, [pc, #412]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c252:	430b      	orrs	r3, r1
 800c254:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	2100      	movs	r1, #0
 800c260:	62b9      	str	r1, [r7, #40]	; 0x28
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c268:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c26c:	460b      	mov	r3, r1
 800c26e:	4313      	orrs	r3, r2
 800c270:	d011      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c276:	3308      	adds	r3, #8
 800c278:	2100      	movs	r1, #0
 800c27a:	4618      	mov	r0, r3
 800c27c:	f001 fa4a 	bl	800d714 <RCCEx_PLL2_Config>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c28e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c292:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	2100      	movs	r1, #0
 800c2a0:	6239      	str	r1, [r7, #32]
 800c2a2:	f003 0302 	and.w	r3, r3, #2
 800c2a6:	627b      	str	r3, [r7, #36]	; 0x24
 800c2a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	d011      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 fa2a 	bl	800d714 <RCCEx_PLL2_Config>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	2100      	movs	r1, #0
 800c2e0:	61b9      	str	r1, [r7, #24]
 800c2e2:	f003 0304 	and.w	r3, r3, #4
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	d011      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	2102      	movs	r1, #2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f001 fa0a 	bl	800d714 <RCCEx_PLL2_Config>
 800c300:	4603      	mov	r3, r0
 800c302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c30e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	2100      	movs	r1, #0
 800c320:	6139      	str	r1, [r7, #16]
 800c322:	f003 0308 	and.w	r3, r3, #8
 800c326:	617b      	str	r3, [r7, #20]
 800c328:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c32c:	460b      	mov	r3, r1
 800c32e:	4313      	orrs	r3, r2
 800c330:	d011      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c336:	3328      	adds	r3, #40	; 0x28
 800c338:	2100      	movs	r1, #0
 800c33a:	4618      	mov	r0, r3
 800c33c:	f001 fa9c 	bl	800d878 <RCCEx_PLL3_Config>
 800c340:	4603      	mov	r3, r0
 800c342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c34e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c352:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	2100      	movs	r1, #0
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	f003 0310 	and.w	r3, r3, #16
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c36c:	460b      	mov	r3, r1
 800c36e:	4313      	orrs	r3, r2
 800c370:	d011      	beq.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c376:	3328      	adds	r3, #40	; 0x28
 800c378:	2101      	movs	r1, #1
 800c37a:	4618      	mov	r0, r3
 800c37c:	f001 fa7c 	bl	800d878 <RCCEx_PLL3_Config>
 800c380:	4603      	mov	r3, r0
 800c382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c38e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	2100      	movs	r1, #0
 800c3a0:	6039      	str	r1, [r7, #0]
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	607b      	str	r3, [r7, #4]
 800c3a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	d011      	beq.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b6:	3328      	adds	r3, #40	; 0x28
 800c3b8:	2102      	movs	r1, #2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 fa5c 	bl	800d878 <RCCEx_PLL3_Config>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c3d6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e000      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3f0:	58024400 	.word	0x58024400

0800c3f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b090      	sub	sp, #64	; 0x40
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c402:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c406:	430b      	orrs	r3, r1
 800c408:	f040 8094 	bne.w	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c40c:	4b9e      	ldr	r3, [pc, #632]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	2b04      	cmp	r3, #4
 800c41a:	f200 8087 	bhi.w	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c41e:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c439 	.word	0x0800c439
 800c428:	0800c461 	.word	0x0800c461
 800c42c:	0800c489 	.word	0x0800c489
 800c430:	0800c525 	.word	0x0800c525
 800c434:	0800c4b1 	.word	0x0800c4b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c438:	4b93      	ldr	r3, [pc, #588]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c444:	d108      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c44a:	4618      	mov	r0, r3
 800c44c:	f001 f810 	bl	800d470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c454:	f000 bd45 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45c:	f000 bd41 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c460:	4b89      	ldr	r3, [pc, #548]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c46c:	d108      	bne.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c46e:	f107 0318 	add.w	r3, r7, #24
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fd54 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c47c:	f000 bd31 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c484:	f000 bd2d 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c488:	4b7f      	ldr	r3, [pc, #508]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c494:	d108      	bne.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c496:	f107 030c 	add.w	r3, r7, #12
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 fe94 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a4:	f000 bd1d 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ac:	f000 bd19 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4b0:	4b75      	ldr	r3, [pc, #468]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4ba:	4b73      	ldr	r3, [pc, #460]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0304 	and.w	r3, r3, #4
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d10c      	bne.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d109      	bne.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4cc:	4b6e      	ldr	r3, [pc, #440]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	08db      	lsrs	r3, r3, #3
 800c4d2:	f003 0303 	and.w	r3, r3, #3
 800c4d6:	4a6d      	ldr	r2, [pc, #436]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4de:	e01f      	b.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4e0:	4b69      	ldr	r3, [pc, #420]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ec:	d106      	bne.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4f4:	d102      	bne.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4f6:	4b66      	ldr	r3, [pc, #408]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4fa:	e011      	b.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4fc:	4b62      	ldr	r3, [pc, #392]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c508:	d106      	bne.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c510:	d102      	bne.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c512:	4b60      	ldr	r3, [pc, #384]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c516:	e003      	b.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c51c:	f000 bce1 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c520:	f000 bcdf 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c524:	4b5c      	ldr	r3, [pc, #368]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c528:	f000 bcdb 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c530:	f000 bcd7 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c538:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c53c:	430b      	orrs	r3, r1
 800c53e:	f040 80ad 	bne.w	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c542:	4b51      	ldr	r3, [pc, #324]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c546:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c54a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c552:	d056      	beq.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c55a:	f200 8090 	bhi.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	2bc0      	cmp	r3, #192	; 0xc0
 800c562:	f000 8088 	beq.w	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	2bc0      	cmp	r3, #192	; 0xc0
 800c56a:	f200 8088 	bhi.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	2b80      	cmp	r3, #128	; 0x80
 800c572:	d032      	beq.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	2b80      	cmp	r3, #128	; 0x80
 800c578:	f200 8081 	bhi.w	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	2b40      	cmp	r3, #64	; 0x40
 800c586:	d014      	beq.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c588:	e079      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c58a:	4b3f      	ldr	r3, [pc, #252]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c596:	d108      	bne.n	800c5aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 ff67 	bl	800d470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a6:	f000 bc9c 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ae:	f000 bc98 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5b2:	4b35      	ldr	r3, [pc, #212]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5be:	d108      	bne.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5c0:	f107 0318 	add.w	r3, r7, #24
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fcab 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ce:	f000 bc88 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d6:	f000 bc84 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5da:	4b2b      	ldr	r3, [pc, #172]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5e6:	d108      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5e8:	f107 030c 	add.w	r3, r7, #12
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 fdeb 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f6:	f000 bc74 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fe:	f000 bc70 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c602:	4b21      	ldr	r3, [pc, #132]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c60a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c60c:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 0304 	and.w	r3, r3, #4
 800c614:	2b04      	cmp	r3, #4
 800c616:	d10c      	bne.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d109      	bne.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c61e:	4b1a      	ldr	r3, [pc, #104]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	08db      	lsrs	r3, r3, #3
 800c624:	f003 0303 	and.w	r3, r3, #3
 800c628:	4a18      	ldr	r2, [pc, #96]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c62a:	fa22 f303 	lsr.w	r3, r2, r3
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c630:	e01f      	b.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c632:	4b15      	ldr	r3, [pc, #84]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c63e:	d106      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c646:	d102      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c648:	4b11      	ldr	r3, [pc, #68]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c64c:	e011      	b.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c64e:	4b0e      	ldr	r3, [pc, #56]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c65a:	d106      	bne.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c662:	d102      	bne.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c664:	4b0b      	ldr	r3, [pc, #44]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c668:	e003      	b.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c66e:	f000 bc38 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c672:	f000 bc36 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c676:	4b08      	ldr	r3, [pc, #32]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67a:	f000 bc32 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c682:	f000 bc2e 	b.w	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c686:	bf00      	nop
 800c688:	58024400 	.word	0x58024400
 800c68c:	03d09000 	.word	0x03d09000
 800c690:	003d0900 	.word	0x003d0900
 800c694:	017d7840 	.word	0x017d7840
 800c698:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c69c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	f040 809c 	bne.w	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c6aa:	4b9e      	ldr	r3, [pc, #632]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c6b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6ba:	d054      	beq.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6c2:	f200 808b 	bhi.w	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6cc:	f000 8083 	beq.w	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6d6:	f200 8081 	bhi.w	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6e0:	d02f      	beq.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6e8:	d878      	bhi.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d004      	beq.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6f6:	d012      	beq.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c6f8:	e070      	b.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6fa:	4b8a      	ldr	r3, [pc, #552]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c706:	d107      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 feaf 	bl	800d470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c716:	e3e4      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c718:	2300      	movs	r3, #0
 800c71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71c:	e3e1      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c71e:	4b81      	ldr	r3, [pc, #516]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c72a:	d107      	bne.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c72c:	f107 0318 	add.w	r3, r7, #24
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fbf5 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c73a:	e3d2      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c740:	e3cf      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c742:	4b78      	ldr	r3, [pc, #480]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c74a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c74e:	d107      	bne.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c750:	f107 030c 	add.w	r3, r7, #12
 800c754:	4618      	mov	r0, r3
 800c756:	f000 fd37 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c75e:	e3c0      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c764:	e3bd      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c766:	4b6f      	ldr	r3, [pc, #444]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c76a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c76e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c770:	4b6c      	ldr	r3, [pc, #432]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 0304 	and.w	r3, r3, #4
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d10c      	bne.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d109      	bne.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c782:	4b68      	ldr	r3, [pc, #416]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	08db      	lsrs	r3, r3, #3
 800c788:	f003 0303 	and.w	r3, r3, #3
 800c78c:	4a66      	ldr	r2, [pc, #408]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c78e:	fa22 f303 	lsr.w	r3, r2, r3
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c794:	e01e      	b.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c796:	4b63      	ldr	r3, [pc, #396]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a2:	d106      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7aa:	d102      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7ac:	4b5f      	ldr	r3, [pc, #380]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7b0:	e010      	b.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7b2:	4b5c      	ldr	r3, [pc, #368]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7be:	d106      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7c6:	d102      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7c8:	4b59      	ldr	r3, [pc, #356]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7cc:	e002      	b.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7d2:	e386      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7d4:	e385      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7d6:	4b57      	ldr	r3, [pc, #348]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7da:	e382      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e0:	e37f      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c7e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7e6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c7ea:	430b      	orrs	r3, r1
 800c7ec:	f040 80a7 	bne.w	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c7f0:	4b4c      	ldr	r3, [pc, #304]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c7f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c800:	d055      	beq.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c808:	f200 8096 	bhi.w	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c812:	f000 8084 	beq.w	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c81c:	f200 808c 	bhi.w	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c826:	d030      	beq.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c82e:	f200 8083 	bhi.w	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c83e:	d012      	beq.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c840:	e07a      	b.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c842:	4b38      	ldr	r3, [pc, #224]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c84a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c84e:	d107      	bne.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fe0b 	bl	800d470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85e:	e340      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c864:	e33d      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c866:	4b2f      	ldr	r3, [pc, #188]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c86e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c872:	d107      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c874:	f107 0318 	add.w	r3, r7, #24
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fb51 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c882:	e32e      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c888:	e32b      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c88a:	4b26      	ldr	r3, [pc, #152]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c896:	d107      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c898:	f107 030c 	add.w	r3, r7, #12
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fc93 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a6:	e31c      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ac:	e319      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8ae:	4b1d      	ldr	r3, [pc, #116]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8b8:	4b1a      	ldr	r3, [pc, #104]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 0304 	and.w	r3, r3, #4
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	d10c      	bne.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d109      	bne.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ca:	4b16      	ldr	r3, [pc, #88]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	08db      	lsrs	r3, r3, #3
 800c8d0:	f003 0303 	and.w	r3, r3, #3
 800c8d4:	4a14      	ldr	r2, [pc, #80]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8dc:	e01e      	b.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8de:	4b11      	ldr	r3, [pc, #68]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ea:	d106      	bne.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8f2:	d102      	bne.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8f4:	4b0d      	ldr	r3, [pc, #52]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8f8:	e010      	b.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8fa:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c906:	d106      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c90e:	d102      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c910:	4b07      	ldr	r3, [pc, #28]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c914:	e002      	b.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c91a:	e2e2      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c91c:	e2e1      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c91e:	4b05      	ldr	r3, [pc, #20]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c922:	e2de      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c924:	58024400 	.word	0x58024400
 800c928:	03d09000 	.word	0x03d09000
 800c92c:	003d0900 	.word	0x003d0900
 800c930:	017d7840 	.word	0x017d7840
 800c934:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93c:	e2d1      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c93e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c942:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c946:	430b      	orrs	r3, r1
 800c948:	f040 809c 	bne.w	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c94c:	4b93      	ldr	r3, [pc, #588]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c950:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c954:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c95c:	d054      	beq.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c964:	f200 808b 	bhi.w	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c96e:	f000 8083 	beq.w	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c978:	f200 8081 	bhi.w	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c982:	d02f      	beq.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c98a:	d878      	bhi.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d004      	beq.n	800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c998:	d012      	beq.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c99a:	e070      	b.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c99c:	4b7f      	ldr	r3, [pc, #508]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9a8:	d107      	bne.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 fd5e 	bl	800d470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b8:	e293      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9be:	e290      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9c0:	4b76      	ldr	r3, [pc, #472]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9cc:	d107      	bne.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ce:	f107 0318 	add.w	r3, r7, #24
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 faa4 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9dc:	e281      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e2:	e27e      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9e4:	4b6d      	ldr	r3, [pc, #436]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9f0:	d107      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9f2:	f107 030c 	add.w	r3, r7, #12
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fbe6 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca00:	e26f      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca06:	e26c      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca08:	4b64      	ldr	r3, [pc, #400]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca10:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca12:	4b62      	ldr	r3, [pc, #392]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 0304 	and.w	r3, r3, #4
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	d10c      	bne.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ca1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d109      	bne.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca24:	4b5d      	ldr	r3, [pc, #372]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	08db      	lsrs	r3, r3, #3
 800ca2a:	f003 0303 	and.w	r3, r3, #3
 800ca2e:	4a5c      	ldr	r2, [pc, #368]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca30:	fa22 f303 	lsr.w	r3, r2, r3
 800ca34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca36:	e01e      	b.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca38:	4b58      	ldr	r3, [pc, #352]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca44:	d106      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ca46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca4c:	d102      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca4e:	4b55      	ldr	r3, [pc, #340]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca52:	e010      	b.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca54:	4b51      	ldr	r3, [pc, #324]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca60:	d106      	bne.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca68:	d102      	bne.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca6a:	4b4f      	ldr	r3, [pc, #316]	; (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca6e:	e002      	b.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca74:	e235      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca76:	e234      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca78:	4b4c      	ldr	r3, [pc, #304]	; (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ca7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca7c:	e231      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca82:	e22e      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca88:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ca8c:	430b      	orrs	r3, r1
 800ca8e:	f040 808f 	bne.w	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ca92:	4b42      	ldr	r3, [pc, #264]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca96:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ca9a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caa2:	d06b      	beq.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800caa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caaa:	d874      	bhi.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cab2:	d056      	beq.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800caba:	d86c      	bhi.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cac2:	d03b      	beq.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800caca:	d864      	bhi.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cad2:	d021      	beq.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cada:	d85c      	bhi.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d004      	beq.n	800caec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cae8:	d004      	beq.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800caea:	e054      	b.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800caec:	f7fe fa0a 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 800caf0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800caf2:	e1f6      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caf4:	4b29      	ldr	r3, [pc, #164]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cafc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb00:	d107      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb02:	f107 0318 	add.w	r3, r7, #24
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 fa0a 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb10:	e1e7      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb16:	e1e4      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb18:	4b20      	ldr	r3, [pc, #128]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb24:	d107      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb26:	f107 030c 	add.w	r3, r7, #12
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 fb4c 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb34:	e1d5      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb3a:	e1d2      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb3c:	4b17      	ldr	r3, [pc, #92]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 0304 	and.w	r3, r3, #4
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d109      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb48:	4b14      	ldr	r3, [pc, #80]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	08db      	lsrs	r3, r3, #3
 800cb4e:	f003 0303 	and.w	r3, r3, #3
 800cb52:	4a13      	ldr	r2, [pc, #76]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb54:	fa22 f303 	lsr.w	r3, r2, r3
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb5a:	e1c2      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb60:	e1bf      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb62:	4b0e      	ldr	r3, [pc, #56]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb6e:	d102      	bne.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cb70:	4b0c      	ldr	r3, [pc, #48]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb74:	e1b5      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7a:	e1b2      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb7c:	4b07      	ldr	r3, [pc, #28]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb88:	d102      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cb8a:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb8e:	e1a8      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb94:	e1a5      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb9a:	e1a2      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb9c:	58024400 	.word	0x58024400
 800cba0:	03d09000 	.word	0x03d09000
 800cba4:	003d0900 	.word	0x003d0900
 800cba8:	017d7840 	.word	0x017d7840
 800cbac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cbb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbb4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cbb8:	430b      	orrs	r3, r1
 800cbba:	d173      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cbbc:	4b9c      	ldr	r3, [pc, #624]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbc4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbcc:	d02f      	beq.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd4:	d863      	bhi.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d004      	beq.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbe2:	d012      	beq.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cbe4:	e05b      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbe6:	4b92      	ldr	r3, [pc, #584]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbf2:	d107      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbf4:	f107 0318 	add.w	r3, r7, #24
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 f991 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc02:	e16e      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc08:	e16b      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc0a:	4b89      	ldr	r3, [pc, #548]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc16:	d107      	bne.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc18:	f107 030c 	add.w	r3, r7, #12
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 fad3 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc26:	e15c      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc2c:	e159      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc2e:	4b80      	ldr	r3, [pc, #512]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc38:	4b7d      	ldr	r3, [pc, #500]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b04      	cmp	r3, #4
 800cc42:	d10c      	bne.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d109      	bne.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc4a:	4b79      	ldr	r3, [pc, #484]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	08db      	lsrs	r3, r3, #3
 800cc50:	f003 0303 	and.w	r3, r3, #3
 800cc54:	4a77      	ldr	r2, [pc, #476]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc56:	fa22 f303 	lsr.w	r3, r2, r3
 800cc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc5c:	e01e      	b.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc5e:	4b74      	ldr	r3, [pc, #464]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc6a:	d106      	bne.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc72:	d102      	bne.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc74:	4b70      	ldr	r3, [pc, #448]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc78:	e010      	b.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc7a:	4b6d      	ldr	r3, [pc, #436]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc86:	d106      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc8e:	d102      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc90:	4b6a      	ldr	r3, [pc, #424]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc94:	e002      	b.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc9a:	e122      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc9c:	e121      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca2:	e11e      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cca8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ccac:	430b      	orrs	r3, r1
 800ccae:	d133      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ccb0:	4b5f      	ldr	r3, [pc, #380]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccb8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d004      	beq.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccc6:	d012      	beq.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ccc8:	e023      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccca:	4b59      	ldr	r3, [pc, #356]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccd6:	d107      	bne.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 fbc7 	bl	800d470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce6:	e0fc      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccec:	e0f9      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccee:	4b50      	ldr	r3, [pc, #320]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccfa:	d107      	bne.n	800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccfc:	f107 0318 	add.w	r3, r7, #24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f90d 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd0a:	e0ea      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd10:	e0e7      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd12:	2300      	movs	r3, #0
 800cd14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd16:	e0e4      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cd18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd1c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cd20:	430b      	orrs	r3, r1
 800cd22:	f040 808d 	bne.w	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd26:	4b42      	ldr	r3, [pc, #264]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cd2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd36:	d06b      	beq.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd3e:	d874      	bhi.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd46:	d056      	beq.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd4e:	d86c      	bhi.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd56:	d03b      	beq.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd5e:	d864      	bhi.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd66:	d021      	beq.n	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd6e:	d85c      	bhi.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d004      	beq.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd7c:	d004      	beq.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cd7e:	e054      	b.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cd80:	f000 f8b8 	bl	800cef4 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd86:	e0ac      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd88:	4b29      	ldr	r3, [pc, #164]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd94:	d107      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd96:	f107 0318 	add.w	r3, r7, #24
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 f8c0 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda4:	e09d      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdaa:	e09a      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdac:	4b20      	ldr	r3, [pc, #128]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdb8:	d107      	bne.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdba:	f107 030c 	add.w	r3, r7, #12
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 fa02 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc8:	e08b      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdce:	e088      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cdd0:	4b17      	ldr	r3, [pc, #92]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 0304 	and.w	r3, r3, #4
 800cdd8:	2b04      	cmp	r3, #4
 800cdda:	d109      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cddc:	4b14      	ldr	r3, [pc, #80]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	08db      	lsrs	r3, r3, #3
 800cde2:	f003 0303 	and.w	r3, r3, #3
 800cde6:	4a13      	ldr	r2, [pc, #76]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cde8:	fa22 f303 	lsr.w	r3, r2, r3
 800cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdee:	e078      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf4:	e075      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cdf6:	4b0e      	ldr	r3, [pc, #56]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce02:	d102      	bne.n	800ce0a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ce06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce08:	e06b      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce0e:	e068      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce1c:	d102      	bne.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ce1e:	4b07      	ldr	r3, [pc, #28]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ce20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce22:	e05e      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce28:	e05b      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce2e:	e058      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce30:	58024400 	.word	0x58024400
 800ce34:	03d09000 	.word	0x03d09000
 800ce38:	003d0900 	.word	0x003d0900
 800ce3c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ce40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce44:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ce48:	430b      	orrs	r3, r1
 800ce4a:	d148      	bne.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce4c:	4b27      	ldr	r3, [pc, #156]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce5c:	d02a      	beq.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce64:	d838      	bhi.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d004      	beq.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce72:	d00d      	beq.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ce74:	e030      	b.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce76:	4b1d      	ldr	r3, [pc, #116]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce82:	d102      	bne.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ce84:	4b1a      	ldr	r3, [pc, #104]	; (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ce86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce88:	e02b      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce8e:	e028      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce90:	4b16      	ldr	r3, [pc, #88]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce9c:	d107      	bne.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 fae4 	bl	800d470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceac:	e019      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb2:	e016      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ceb4:	4b0d      	ldr	r3, [pc, #52]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cec0:	d107      	bne.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cec2:	f107 0318 	add.w	r3, r7, #24
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 f82a 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced0:	e007      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced6:	e004      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cedc:	e001      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3740      	adds	r7, #64	; 0x40
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	58024400 	.word	0x58024400
 800cef0:	017d7840 	.word	0x017d7840

0800cef4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cef8:	f7fd ffd4 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800cefc:	4602      	mov	r2, r0
 800cefe:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	091b      	lsrs	r3, r3, #4
 800cf04:	f003 0307 	and.w	r3, r3, #7
 800cf08:	4904      	ldr	r1, [pc, #16]	; (800cf1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cf0a:	5ccb      	ldrb	r3, [r1, r3]
 800cf0c:	f003 031f 	and.w	r3, r3, #31
 800cf10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	58024400 	.word	0x58024400
 800cf1c:	08017274 	.word	0x08017274

0800cf20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b089      	sub	sp, #36	; 0x24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf28:	4ba1      	ldr	r3, [pc, #644]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf32:	4b9f      	ldr	r3, [pc, #636]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	0b1b      	lsrs	r3, r3, #12
 800cf38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf3e:	4b9c      	ldr	r3, [pc, #624]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf42:	091b      	lsrs	r3, r3, #4
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf4a:	4b99      	ldr	r3, [pc, #612]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4e:	08db      	lsrs	r3, r3, #3
 800cf50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	fb02 f303 	mul.w	r3, r2, r3
 800cf5a:	ee07 3a90 	vmov	s15, r3
 800cf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 8111 	beq.w	800d190 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	f000 8083 	beq.w	800d07c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	f200 80a1 	bhi.w	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d003      	beq.n	800cf8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d056      	beq.n	800d038 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf8a:	e099      	b.n	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf8c:	4b88      	ldr	r3, [pc, #544]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f003 0320 	and.w	r3, r3, #32
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d02d      	beq.n	800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf98:	4b85      	ldr	r3, [pc, #532]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	08db      	lsrs	r3, r3, #3
 800cf9e:	f003 0303 	and.w	r3, r3, #3
 800cfa2:	4a84      	ldr	r2, [pc, #528]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cfa4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	ee07 3a90 	vmov	s15, r3
 800cfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfc2:	4b7b      	ldr	r3, [pc, #492]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cff2:	e087      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cffe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d1bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d006:	4b6a      	ldr	r3, [pc, #424]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d016:	ed97 6a03 	vldr	s12, [r7, #12]
 800d01a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d036:	e065      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	ee07 3a90 	vmov	s15, r3
 800d03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d042:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d04a:	4b59      	ldr	r3, [pc, #356]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d052:	ee07 3a90 	vmov	s15, r3
 800d056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d05e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d07a:	e043      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	ee07 3a90 	vmov	s15, r3
 800d082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d086:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d08e:	4b48      	ldr	r3, [pc, #288]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0be:	e021      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d2:	4b37      	ldr	r3, [pc, #220]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d102:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d104:	4b2a      	ldr	r3, [pc, #168]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d108:	0a5b      	lsrs	r3, r3, #9
 800d10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d12a:	ee17 2a90 	vmov	r2, s15
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d132:	4b1f      	ldr	r3, [pc, #124]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d136:	0c1b      	lsrs	r3, r3, #16
 800d138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13c:	ee07 3a90 	vmov	s15, r3
 800d140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d158:	ee17 2a90 	vmov	r2, s15
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d160:	4b13      	ldr	r3, [pc, #76]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d164:	0e1b      	lsrs	r3, r3, #24
 800d166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16a:	ee07 3a90 	vmov	s15, r3
 800d16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d186:	ee17 2a90 	vmov	r2, s15
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d18e:	e008      	b.n	800d1a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	609a      	str	r2, [r3, #8]
}
 800d1a2:	bf00      	nop
 800d1a4:	3724      	adds	r7, #36	; 0x24
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	58024400 	.word	0x58024400
 800d1b4:	03d09000 	.word	0x03d09000
 800d1b8:	46000000 	.word	0x46000000
 800d1bc:	4c742400 	.word	0x4c742400
 800d1c0:	4a742400 	.word	0x4a742400
 800d1c4:	4bbebc20 	.word	0x4bbebc20

0800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b089      	sub	sp, #36	; 0x24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1d0:	4ba1      	ldr	r3, [pc, #644]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d4:	f003 0303 	and.w	r3, r3, #3
 800d1d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d1da:	4b9f      	ldr	r3, [pc, #636]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1de:	0d1b      	lsrs	r3, r3, #20
 800d1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d1e6:	4b9c      	ldr	r3, [pc, #624]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ea:	0a1b      	lsrs	r3, r3, #8
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d1f2:	4b99      	ldr	r3, [pc, #612]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1f6:	08db      	lsrs	r3, r3, #3
 800d1f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1fc:	693a      	ldr	r2, [r7, #16]
 800d1fe:	fb02 f303 	mul.w	r3, r2, r3
 800d202:	ee07 3a90 	vmov	s15, r3
 800d206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2b00      	cmp	r3, #0
 800d212:	f000 8111 	beq.w	800d438 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	2b02      	cmp	r3, #2
 800d21a:	f000 8083 	beq.w	800d324 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	2b02      	cmp	r3, #2
 800d222:	f200 80a1 	bhi.w	800d368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d003      	beq.n	800d234 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d056      	beq.n	800d2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d232:	e099      	b.n	800d368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d234:	4b88      	ldr	r3, [pc, #544]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0320 	and.w	r3, r3, #32
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d02d      	beq.n	800d29c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d240:	4b85      	ldr	r3, [pc, #532]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	08db      	lsrs	r3, r3, #3
 800d246:	f003 0303 	and.w	r3, r3, #3
 800d24a:	4a84      	ldr	r2, [pc, #528]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d24c:	fa22 f303 	lsr.w	r3, r2, r3
 800d250:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	ee07 3a90 	vmov	s15, r3
 800d258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	ee07 3a90 	vmov	s15, r3
 800d262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d26a:	4b7b      	ldr	r3, [pc, #492]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d272:	ee07 3a90 	vmov	s15, r3
 800d276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d27e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d28a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d296:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d29a:	e087      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d464 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ae:	4b6a      	ldr	r3, [pc, #424]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2de:	e065      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	ee07 3a90 	vmov	s15, r3
 800d2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2f2:	4b59      	ldr	r3, [pc, #356]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d302:	ed97 6a03 	vldr	s12, [r7, #12]
 800d306:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d31e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d322:	e043      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	ee07 3a90 	vmov	s15, r3
 800d32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d46c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d336:	4b48      	ldr	r3, [pc, #288]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d346:	ed97 6a03 	vldr	s12, [r7, #12]
 800d34a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d366:	e021      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d372:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d37a:	4b37      	ldr	r3, [pc, #220]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d382:	ee07 3a90 	vmov	s15, r3
 800d386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d38a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d38e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d39a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d3ac:	4b2a      	ldr	r3, [pc, #168]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b0:	0a5b      	lsrs	r3, r3, #9
 800d3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b6:	ee07 3a90 	vmov	s15, r3
 800d3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3d2:	ee17 2a90 	vmov	r2, s15
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d3da:	4b1f      	ldr	r3, [pc, #124]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3de:	0c1b      	lsrs	r3, r3, #16
 800d3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e4:	ee07 3a90 	vmov	s15, r3
 800d3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d400:	ee17 2a90 	vmov	r2, s15
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d408:	4b13      	ldr	r3, [pc, #76]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40c:	0e1b      	lsrs	r3, r3, #24
 800d40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d412:	ee07 3a90 	vmov	s15, r3
 800d416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d41e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d422:	edd7 6a07 	vldr	s13, [r7, #28]
 800d426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d42a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d42e:	ee17 2a90 	vmov	r2, s15
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d436:	e008      	b.n	800d44a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	609a      	str	r2, [r3, #8]
}
 800d44a:	bf00      	nop
 800d44c:	3724      	adds	r7, #36	; 0x24
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	58024400 	.word	0x58024400
 800d45c:	03d09000 	.word	0x03d09000
 800d460:	46000000 	.word	0x46000000
 800d464:	4c742400 	.word	0x4c742400
 800d468:	4a742400 	.word	0x4a742400
 800d46c:	4bbebc20 	.word	0x4bbebc20

0800d470 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d470:	b480      	push	{r7}
 800d472:	b089      	sub	sp, #36	; 0x24
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d478:	4ba0      	ldr	r3, [pc, #640]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47c:	f003 0303 	and.w	r3, r3, #3
 800d480:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d482:	4b9e      	ldr	r3, [pc, #632]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d486:	091b      	lsrs	r3, r3, #4
 800d488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d48c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d48e:	4b9b      	ldr	r3, [pc, #620]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d492:	f003 0301 	and.w	r3, r3, #1
 800d496:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d498:	4b98      	ldr	r3, [pc, #608]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49c:	08db      	lsrs	r3, r3, #3
 800d49e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	fb02 f303 	mul.w	r3, r2, r3
 800d4a8:	ee07 3a90 	vmov	s15, r3
 800d4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f000 8111 	beq.w	800d6de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	f000 8083 	beq.w	800d5ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	f200 80a1 	bhi.w	800d60e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d056      	beq.n	800d586 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d4d8:	e099      	b.n	800d60e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4da:	4b88      	ldr	r3, [pc, #544]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f003 0320 	and.w	r3, r3, #32
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d02d      	beq.n	800d542 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4e6:	4b85      	ldr	r3, [pc, #532]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	08db      	lsrs	r3, r3, #3
 800d4ec:	f003 0303 	and.w	r3, r3, #3
 800d4f0:	4a83      	ldr	r2, [pc, #524]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d4f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	ee07 3a90 	vmov	s15, r3
 800d508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d50c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d510:	4b7a      	ldr	r3, [pc, #488]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d518:	ee07 3a90 	vmov	s15, r3
 800d51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d520:	ed97 6a03 	vldr	s12, [r7, #12]
 800d524:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d52c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d53c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d540:	e087      	b.n	800d652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	ee07 3a90 	vmov	s15, r3
 800d548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d54c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d554:	4b69      	ldr	r3, [pc, #420]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d55c:	ee07 3a90 	vmov	s15, r3
 800d560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d564:	ed97 6a03 	vldr	s12, [r7, #12]
 800d568:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d56c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d57c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d580:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d584:	e065      	b.n	800d652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	ee07 3a90 	vmov	s15, r3
 800d58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d590:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d70c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d598:	4b58      	ldr	r3, [pc, #352]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a0:	ee07 3a90 	vmov	s15, r3
 800d5a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5c8:	e043      	b.n	800d652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	ee07 3a90 	vmov	s15, r3
 800d5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d710 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d5d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5dc:	4b47      	ldr	r3, [pc, #284]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e4:	ee07 3a90 	vmov	s15, r3
 800d5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d604:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d608:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d60c:	e021      	b.n	800d652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	ee07 3a90 	vmov	s15, r3
 800d614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d618:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d61c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d620:	4b36      	ldr	r3, [pc, #216]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d628:	ee07 3a90 	vmov	s15, r3
 800d62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d630:	ed97 6a03 	vldr	s12, [r7, #12]
 800d634:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d63c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d64c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d650:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d652:	4b2a      	ldr	r3, [pc, #168]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d656:	0a5b      	lsrs	r3, r3, #9
 800d658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d65c:	ee07 3a90 	vmov	s15, r3
 800d660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d66c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d678:	ee17 2a90 	vmov	r2, s15
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d680:	4b1e      	ldr	r3, [pc, #120]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d684:	0c1b      	lsrs	r3, r3, #16
 800d686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68a:	ee07 3a90 	vmov	s15, r3
 800d68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d69a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d69e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6a6:	ee17 2a90 	vmov	r2, s15
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d6ae:	4b13      	ldr	r3, [pc, #76]	; (800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b2:	0e1b      	lsrs	r3, r3, #24
 800d6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6b8:	ee07 3a90 	vmov	s15, r3
 800d6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6d4:	ee17 2a90 	vmov	r2, s15
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d6dc:	e008      	b.n	800d6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	609a      	str	r2, [r3, #8]
}
 800d6f0:	bf00      	nop
 800d6f2:	3724      	adds	r7, #36	; 0x24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	58024400 	.word	0x58024400
 800d700:	03d09000 	.word	0x03d09000
 800d704:	46000000 	.word	0x46000000
 800d708:	4c742400 	.word	0x4c742400
 800d70c:	4a742400 	.word	0x4a742400
 800d710:	4bbebc20 	.word	0x4bbebc20

0800d714 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d71e:	2300      	movs	r3, #0
 800d720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d722:	4b53      	ldr	r3, [pc, #332]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d726:	f003 0303 	and.w	r3, r3, #3
 800d72a:	2b03      	cmp	r3, #3
 800d72c:	d101      	bne.n	800d732 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e099      	b.n	800d866 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d732:	4b4f      	ldr	r3, [pc, #316]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a4e      	ldr	r2, [pc, #312]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d738:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d73c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d73e:	f7f6 fc53 	bl	8003fe8 <HAL_GetTick>
 800d742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d744:	e008      	b.n	800d758 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d746:	f7f6 fc4f 	bl	8003fe8 <HAL_GetTick>
 800d74a:	4602      	mov	r2, r0
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	2b02      	cmp	r3, #2
 800d752:	d901      	bls.n	800d758 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	e086      	b.n	800d866 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d758:	4b45      	ldr	r3, [pc, #276]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1f0      	bne.n	800d746 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d764:	4b42      	ldr	r3, [pc, #264]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d768:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	031b      	lsls	r3, r3, #12
 800d772:	493f      	ldr	r1, [pc, #252]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d774:	4313      	orrs	r3, r2
 800d776:	628b      	str	r3, [r1, #40]	; 0x28
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	3b01      	subs	r3, #1
 800d788:	025b      	lsls	r3, r3, #9
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	431a      	orrs	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	3b01      	subs	r3, #1
 800d794:	041b      	lsls	r3, r3, #16
 800d796:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d79a:	431a      	orrs	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	061b      	lsls	r3, r3, #24
 800d7a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7a8:	4931      	ldr	r1, [pc, #196]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d7ae:	4b30      	ldr	r3, [pc, #192]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	492d      	ldr	r1, [pc, #180]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d7c0:	4b2b      	ldr	r3, [pc, #172]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c4:	f023 0220 	bic.w	r2, r3, #32
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	4928      	ldr	r1, [pc, #160]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d7d2:	4b27      	ldr	r3, [pc, #156]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d6:	4a26      	ldr	r2, [pc, #152]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7d8:	f023 0310 	bic.w	r3, r3, #16
 800d7dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d7de:	4b24      	ldr	r3, [pc, #144]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e2:	4b24      	ldr	r3, [pc, #144]	; (800d874 <RCCEx_PLL2_Config+0x160>)
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	69d2      	ldr	r2, [r2, #28]
 800d7ea:	00d2      	lsls	r2, r2, #3
 800d7ec:	4920      	ldr	r1, [pc, #128]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d7f2:	4b1f      	ldr	r3, [pc, #124]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f6:	4a1e      	ldr	r2, [pc, #120]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d7f8:	f043 0310 	orr.w	r3, r3, #16
 800d7fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d106      	bne.n	800d812 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d804:	4b1a      	ldr	r3, [pc, #104]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d808:	4a19      	ldr	r2, [pc, #100]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d80a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d80e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d810:	e00f      	b.n	800d832 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d106      	bne.n	800d826 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d818:	4b15      	ldr	r3, [pc, #84]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	4a14      	ldr	r2, [pc, #80]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d81e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d822:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d824:	e005      	b.n	800d832 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d826:	4b12      	ldr	r3, [pc, #72]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82a:	4a11      	ldr	r2, [pc, #68]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d82c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d830:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d832:	4b0f      	ldr	r3, [pc, #60]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a0e      	ldr	r2, [pc, #56]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d83e:	f7f6 fbd3 	bl	8003fe8 <HAL_GetTick>
 800d842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d844:	e008      	b.n	800d858 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d846:	f7f6 fbcf 	bl	8003fe8 <HAL_GetTick>
 800d84a:	4602      	mov	r2, r0
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	1ad3      	subs	r3, r2, r3
 800d850:	2b02      	cmp	r3, #2
 800d852:	d901      	bls.n	800d858 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	e006      	b.n	800d866 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d858:	4b05      	ldr	r3, [pc, #20]	; (800d870 <RCCEx_PLL2_Config+0x15c>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0f0      	beq.n	800d846 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d864:	7bfb      	ldrb	r3, [r7, #15]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	58024400 	.word	0x58024400
 800d874:	ffff0007 	.word	0xffff0007

0800d878 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d886:	4b53      	ldr	r3, [pc, #332]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88a:	f003 0303 	and.w	r3, r3, #3
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d101      	bne.n	800d896 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d892:	2301      	movs	r3, #1
 800d894:	e099      	b.n	800d9ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d896:	4b4f      	ldr	r3, [pc, #316]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a4e      	ldr	r2, [pc, #312]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d89c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8a2:	f7f6 fba1 	bl	8003fe8 <HAL_GetTick>
 800d8a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8a8:	e008      	b.n	800d8bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d8aa:	f7f6 fb9d 	bl	8003fe8 <HAL_GetTick>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d901      	bls.n	800d8bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	e086      	b.n	800d9ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8bc:	4b45      	ldr	r3, [pc, #276]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1f0      	bne.n	800d8aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d8c8:	4b42      	ldr	r3, [pc, #264]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	051b      	lsls	r3, r3, #20
 800d8d6:	493f      	ldr	r1, [pc, #252]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	628b      	str	r3, [r1, #40]	; 0x28
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	025b      	lsls	r3, r3, #9
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	431a      	orrs	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	041b      	lsls	r3, r3, #16
 800d8fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d8fe:	431a      	orrs	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	3b01      	subs	r3, #1
 800d906:	061b      	lsls	r3, r3, #24
 800d908:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d90c:	4931      	ldr	r1, [pc, #196]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d90e:	4313      	orrs	r3, r2
 800d910:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d912:	4b30      	ldr	r3, [pc, #192]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	695b      	ldr	r3, [r3, #20]
 800d91e:	492d      	ldr	r1, [pc, #180]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d920:	4313      	orrs	r3, r2
 800d922:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d924:	4b2b      	ldr	r3, [pc, #172]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d928:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	699b      	ldr	r3, [r3, #24]
 800d930:	4928      	ldr	r1, [pc, #160]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d932:	4313      	orrs	r3, r2
 800d934:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d936:	4b27      	ldr	r3, [pc, #156]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93a:	4a26      	ldr	r2, [pc, #152]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d93c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d942:	4b24      	ldr	r3, [pc, #144]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d946:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <RCCEx_PLL3_Config+0x160>)
 800d948:	4013      	ands	r3, r2
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	69d2      	ldr	r2, [r2, #28]
 800d94e:	00d2      	lsls	r2, r2, #3
 800d950:	4920      	ldr	r1, [pc, #128]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d952:	4313      	orrs	r3, r2
 800d954:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d956:	4b1f      	ldr	r3, [pc, #124]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95a:	4a1e      	ldr	r2, [pc, #120]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d95c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d106      	bne.n	800d976 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d968:	4b1a      	ldr	r3, [pc, #104]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96c:	4a19      	ldr	r2, [pc, #100]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d96e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d972:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d974:	e00f      	b.n	800d996 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d106      	bne.n	800d98a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d97c:	4b15      	ldr	r3, [pc, #84]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d980:	4a14      	ldr	r2, [pc, #80]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d986:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d988:	e005      	b.n	800d996 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d98a:	4b12      	ldr	r3, [pc, #72]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d98e:	4a11      	ldr	r2, [pc, #68]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d994:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d996:	4b0f      	ldr	r3, [pc, #60]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a0e      	ldr	r2, [pc, #56]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d99c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9a2:	f7f6 fb21 	bl	8003fe8 <HAL_GetTick>
 800d9a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9a8:	e008      	b.n	800d9bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9aa:	f7f6 fb1d 	bl	8003fe8 <HAL_GetTick>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d901      	bls.n	800d9bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9b8:	2303      	movs	r3, #3
 800d9ba:	e006      	b.n	800d9ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9bc:	4b05      	ldr	r3, [pc, #20]	; (800d9d4 <RCCEx_PLL3_Config+0x15c>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d0f0      	beq.n	800d9aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	58024400 	.word	0x58024400
 800d9d8:	ffff0007 	.word	0xffff0007

0800d9dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d071      	beq.n	800dad2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d106      	bne.n	800da08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7f4 fe4c 	bl	80026a0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2202      	movs	r2, #2
 800da0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	f003 0310 	and.w	r3, r3, #16
 800da1a:	2b10      	cmp	r3, #16
 800da1c:	d050      	beq.n	800dac0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	22ca      	movs	r2, #202	; 0xca
 800da24:	625a      	str	r2, [r3, #36]	; 0x24
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2253      	movs	r2, #83	; 0x53
 800da2c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fa4a 	bl	800dec8 <RTC_EnterInitMode>
 800da34:	4603      	mov	r3, r0
 800da36:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800da38:	7bfb      	ldrb	r3, [r7, #15]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d124      	bne.n	800da88 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	6899      	ldr	r1, [r3, #8]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	4b24      	ldr	r3, [pc, #144]	; (800dadc <HAL_RTC_Init+0x100>)
 800da4a:	400b      	ands	r3, r1
 800da4c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	6899      	ldr	r1, [r3, #8]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685a      	ldr	r2, [r3, #4]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	431a      	orrs	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	431a      	orrs	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	430a      	orrs	r2, r1
 800da6a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	0419      	lsls	r1, r3, #16
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	430a      	orrs	r2, r1
 800da7c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fa56 	bl	800df30 <RTC_ExitInitMode>
 800da84:	4603      	mov	r3, r0
 800da86:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800da88:	7bfb      	ldrb	r3, [r7, #15]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d113      	bne.n	800dab6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f022 0203 	bic.w	r2, r2, #3
 800da9c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	69da      	ldr	r2, [r3, #28]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	695b      	ldr	r3, [r3, #20]
 800daac:	431a      	orrs	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	430a      	orrs	r2, r1
 800dab4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	22ff      	movs	r2, #255	; 0xff
 800dabc:	625a      	str	r2, [r3, #36]	; 0x24
 800dabe:	e001      	b.n	800dac4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d103      	bne.n	800dad2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	ff8fffbf 	.word	0xff8fffbf

0800dae0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b087      	sub	sp, #28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d101      	bne.n	800dafa <HAL_RTC_SetTime+0x1a>
 800daf6:	2302      	movs	r3, #2
 800daf8:	e089      	b.n	800dc0e <HAL_RTC_SetTime+0x12e>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2202      	movs	r2, #2
 800db06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	22ca      	movs	r2, #202	; 0xca
 800db10:	625a      	str	r2, [r3, #36]	; 0x24
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2253      	movs	r2, #83	; 0x53
 800db18:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f000 f9d4 	bl	800dec8 <RTC_EnterInitMode>
 800db20:	4603      	mov	r3, r0
 800db22:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800db24:	7cfb      	ldrb	r3, [r7, #19]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d161      	bne.n	800dbee <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d126      	bne.n	800db7e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d102      	bne.n	800db44 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2200      	movs	r2, #0
 800db42:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 fa2f 	bl	800dfac <RTC_ByteToBcd2>
 800db4e:	4603      	mov	r3, r0
 800db50:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	785b      	ldrb	r3, [r3, #1]
 800db56:	4618      	mov	r0, r3
 800db58:	f000 fa28 	bl	800dfac <RTC_ByteToBcd2>
 800db5c:	4603      	mov	r3, r0
 800db5e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db60:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	789b      	ldrb	r3, [r3, #2]
 800db66:	4618      	mov	r0, r3
 800db68:	f000 fa20 	bl	800dfac <RTC_ByteToBcd2>
 800db6c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db6e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	78db      	ldrb	r3, [r3, #3]
 800db76:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db78:	4313      	orrs	r3, r2
 800db7a:	617b      	str	r3, [r7, #20]
 800db7c:	e018      	b.n	800dbb0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d102      	bne.n	800db92 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	2200      	movs	r2, #0
 800db90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	785b      	ldrb	r3, [r3, #1]
 800db9c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db9e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dba4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	78db      	ldrb	r3, [r3, #3]
 800dbaa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbac:	4313      	orrs	r3, r2
 800dbae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6979      	ldr	r1, [r7, #20]
 800dbb6:	4b18      	ldr	r3, [pc, #96]	; (800dc18 <HAL_RTC_SetTime+0x138>)
 800dbb8:	400b      	ands	r3, r1
 800dbba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	689a      	ldr	r2, [r3, #8]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dbca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6899      	ldr	r1, [r3, #8]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	68da      	ldr	r2, [r3, #12]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	430a      	orrs	r2, r1
 800dbe2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f000 f9a3 	bl	800df30 <RTC_ExitInitMode>
 800dbea:	4603      	mov	r3, r0
 800dbec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	22ff      	movs	r2, #255	; 0xff
 800dbf4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dbf6:	7cfb      	ldrb	r3, [r7, #19]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d103      	bne.n	800dc04 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc0c:	7cfb      	ldrb	r3, [r7, #19]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	371c      	adds	r7, #28
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd90      	pop	{r4, r7, pc}
 800dc16:	bf00      	nop
 800dc18:	007f7f7f 	.word	0x007f7f7f

0800dc1c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	4b22      	ldr	r3, [pc, #136]	; (800dcd0 <HAL_RTC_GetTime+0xb4>)
 800dc48:	4013      	ands	r3, r2
 800dc4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	0c1b      	lsrs	r3, r3, #16
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	0a1b      	lsrs	r3, r3, #8
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	0d9b      	lsrs	r3, r3, #22
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d11a      	bne.n	800dcc6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 f9a9 	bl	800dfec <RTC_Bcd2ToByte>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	785b      	ldrb	r3, [r3, #1]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 f9a0 	bl	800dfec <RTC_Bcd2ToByte>
 800dcac:	4603      	mov	r3, r0
 800dcae:	461a      	mov	r2, r3
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	789b      	ldrb	r3, [r3, #2]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f000 f997 	bl	800dfec <RTC_Bcd2ToByte>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3718      	adds	r7, #24
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	007f7f7f 	.word	0x007f7f7f

0800dcd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dcd4:	b590      	push	{r4, r7, lr}
 800dcd6:	b087      	sub	sp, #28
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d101      	bne.n	800dcee <HAL_RTC_SetDate+0x1a>
 800dcea:	2302      	movs	r3, #2
 800dcec:	e073      	b.n	800ddd6 <HAL_RTC_SetDate+0x102>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2202      	movs	r2, #2
 800dcfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10e      	bne.n	800dd22 <HAL_RTC_SetDate+0x4e>
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	785b      	ldrb	r3, [r3, #1]
 800dd08:	f003 0310 	and.w	r3, r3, #16
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d008      	beq.n	800dd22 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	785b      	ldrb	r3, [r3, #1]
 800dd14:	f023 0310 	bic.w	r3, r3, #16
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	330a      	adds	r3, #10
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d11c      	bne.n	800dd62 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	78db      	ldrb	r3, [r3, #3]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f000 f93d 	bl	800dfac <RTC_ByteToBcd2>
 800dd32:	4603      	mov	r3, r0
 800dd34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	785b      	ldrb	r3, [r3, #1]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 f936 	bl	800dfac <RTC_ByteToBcd2>
 800dd40:	4603      	mov	r3, r0
 800dd42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	789b      	ldrb	r3, [r3, #2]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 f92e 	bl	800dfac <RTC_ByteToBcd2>
 800dd50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	617b      	str	r3, [r7, #20]
 800dd60:	e00e      	b.n	800dd80 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	78db      	ldrb	r3, [r3, #3]
 800dd66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	785b      	ldrb	r3, [r3, #1]
 800dd6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd6e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dd74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	22ca      	movs	r2, #202	; 0xca
 800dd86:	625a      	str	r2, [r3, #36]	; 0x24
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2253      	movs	r2, #83	; 0x53
 800dd8e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f000 f899 	bl	800dec8 <RTC_EnterInitMode>
 800dd96:	4603      	mov	r3, r0
 800dd98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dd9a:	7cfb      	ldrb	r3, [r7, #19]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10a      	bne.n	800ddb6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	6979      	ldr	r1, [r7, #20]
 800dda6:	4b0e      	ldr	r3, [pc, #56]	; (800dde0 <HAL_RTC_SetDate+0x10c>)
 800dda8:	400b      	ands	r3, r1
 800ddaa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f000 f8bf 	bl	800df30 <RTC_ExitInitMode>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	22ff      	movs	r2, #255	; 0xff
 800ddbc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ddbe:	7cfb      	ldrb	r3, [r7, #19]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d103      	bne.n	800ddcc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ddd4:	7cfb      	ldrb	r3, [r7, #19]


}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	371c      	adds	r7, #28
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd90      	pop	{r4, r7, pc}
 800ddde:	bf00      	nop
 800dde0:	00ffff3f 	.word	0x00ffff3f

0800dde4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	685a      	ldr	r2, [r3, #4]
 800ddf6:	4b21      	ldr	r3, [pc, #132]	; (800de7c <HAL_RTC_GetDate+0x98>)
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	0c1b      	lsrs	r3, r3, #16
 800de00:	b2da      	uxtb	r2, r3
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	0a1b      	lsrs	r3, r3, #8
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	f003 031f 	and.w	r3, r3, #31
 800de10:	b2da      	uxtb	r2, r3
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	0b5b      	lsrs	r3, r3, #13
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	f003 0307 	and.w	r3, r3, #7
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d11a      	bne.n	800de70 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	78db      	ldrb	r3, [r3, #3]
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 f8d4 	bl	800dfec <RTC_Bcd2ToByte>
 800de44:	4603      	mov	r3, r0
 800de46:	461a      	mov	r2, r3
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	785b      	ldrb	r3, [r3, #1]
 800de50:	4618      	mov	r0, r3
 800de52:	f000 f8cb 	bl	800dfec <RTC_Bcd2ToByte>
 800de56:	4603      	mov	r3, r0
 800de58:	461a      	mov	r2, r3
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	789b      	ldrb	r3, [r3, #2]
 800de62:	4618      	mov	r0, r3
 800de64:	f000 f8c2 	bl	800dfec <RTC_Bcd2ToByte>
 800de68:	4603      	mov	r3, r0
 800de6a:	461a      	mov	r2, r3
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3718      	adds	r7, #24
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	00ffff3f 	.word	0x00ffff3f

0800de80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a0d      	ldr	r2, [pc, #52]	; (800dec4 <HAL_RTC_WaitForSynchro+0x44>)
 800de8e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800de90:	f7f6 f8aa 	bl	8003fe8 <HAL_GetTick>
 800de94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800de96:	e009      	b.n	800deac <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800de98:	f7f6 f8a6 	bl	8003fe8 <HAL_GetTick>
 800de9c:	4602      	mov	r2, r0
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dea6:	d901      	bls.n	800deac <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dea8:	2303      	movs	r3, #3
 800deaa:	e007      	b.n	800debc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	f003 0320 	and.w	r3, r3, #32
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0ee      	beq.n	800de98 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	0003ff5f 	.word	0x0003ff5f

0800dec8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d120      	bne.n	800df24 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800deec:	f7f6 f87c 	bl	8003fe8 <HAL_GetTick>
 800def0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800def2:	e00d      	b.n	800df10 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800def4:	f7f6 f878 	bl	8003fe8 <HAL_GetTick>
 800def8:	4602      	mov	r2, r0
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df02:	d905      	bls.n	800df10 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2203      	movs	r2, #3
 800df0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d102      	bne.n	800df24 <RTC_EnterInitMode+0x5c>
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	2b03      	cmp	r3, #3
 800df22:	d1e7      	bne.n	800def4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800df24:	7bfb      	ldrb	r3, [r7, #15]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
	...

0800df30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800df3c:	4b1a      	ldr	r3, [pc, #104]	; (800dfa8 <RTC_ExitInitMode+0x78>)
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	4a19      	ldr	r2, [pc, #100]	; (800dfa8 <RTC_ExitInitMode+0x78>)
 800df42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df46:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800df48:	4b17      	ldr	r3, [pc, #92]	; (800dfa8 <RTC_ExitInitMode+0x78>)
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	f003 0320 	and.w	r3, r3, #32
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10c      	bne.n	800df6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff ff93 	bl	800de80 <HAL_RTC_WaitForSynchro>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01e      	beq.n	800df9e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2203      	movs	r2, #3
 800df64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800df68:	2303      	movs	r3, #3
 800df6a:	73fb      	strb	r3, [r7, #15]
 800df6c:	e017      	b.n	800df9e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800df6e:	4b0e      	ldr	r3, [pc, #56]	; (800dfa8 <RTC_ExitInitMode+0x78>)
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	4a0d      	ldr	r2, [pc, #52]	; (800dfa8 <RTC_ExitInitMode+0x78>)
 800df74:	f023 0320 	bic.w	r3, r3, #32
 800df78:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff ff80 	bl	800de80 <HAL_RTC_WaitForSynchro>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d005      	beq.n	800df92 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2203      	movs	r2, #3
 800df8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800df92:	4b05      	ldr	r3, [pc, #20]	; (800dfa8 <RTC_ExitInitMode+0x78>)
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	4a04      	ldr	r2, [pc, #16]	; (800dfa8 <RTC_ExitInitMode+0x78>)
 800df98:	f043 0320 	orr.w	r3, r3, #32
 800df9c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800df9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	58004000 	.word	0x58004000

0800dfac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dfba:	79fb      	ldrb	r3, [r7, #7]
 800dfbc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dfbe:	e005      	b.n	800dfcc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dfc6:	7afb      	ldrb	r3, [r7, #11]
 800dfc8:	3b0a      	subs	r3, #10
 800dfca:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dfcc:	7afb      	ldrb	r3, [r7, #11]
 800dfce:	2b09      	cmp	r3, #9
 800dfd0:	d8f6      	bhi.n	800dfc0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	011b      	lsls	r3, r3, #4
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	7afb      	ldrb	r3, [r7, #11]
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	b2db      	uxtb	r3, r3
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	091b      	lsrs	r3, r3, #4
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	461a      	mov	r2, r3
 800dffe:	0092      	lsls	r2, r2, #2
 800e000:	4413      	add	r3, r2
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	f003 030f 	and.w	r3, r3, #15
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
 800e010:	4413      	add	r3, r2
 800e012:	b2db      	uxtb	r3, r3
}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d101      	bne.n	800e032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	e10f      	b.n	800e252 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a87      	ldr	r2, [pc, #540]	; (800e25c <HAL_SPI_Init+0x23c>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d00f      	beq.n	800e062 <HAL_SPI_Init+0x42>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a86      	ldr	r2, [pc, #536]	; (800e260 <HAL_SPI_Init+0x240>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d00a      	beq.n	800e062 <HAL_SPI_Init+0x42>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a84      	ldr	r2, [pc, #528]	; (800e264 <HAL_SPI_Init+0x244>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d005      	beq.n	800e062 <HAL_SPI_Init+0x42>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	2b0f      	cmp	r3, #15
 800e05c:	d901      	bls.n	800e062 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	e0f7      	b.n	800e252 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 fd60 	bl	800eb28 <SPI_GetPacketSize>
 800e068:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a7b      	ldr	r2, [pc, #492]	; (800e25c <HAL_SPI_Init+0x23c>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d00c      	beq.n	800e08e <HAL_SPI_Init+0x6e>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a79      	ldr	r2, [pc, #484]	; (800e260 <HAL_SPI_Init+0x240>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d007      	beq.n	800e08e <HAL_SPI_Init+0x6e>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a78      	ldr	r2, [pc, #480]	; (800e264 <HAL_SPI_Init+0x244>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d002      	beq.n	800e08e <HAL_SPI_Init+0x6e>
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2b08      	cmp	r3, #8
 800e08c:	d811      	bhi.n	800e0b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e092:	4a72      	ldr	r2, [pc, #456]	; (800e25c <HAL_SPI_Init+0x23c>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d009      	beq.n	800e0ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a70      	ldr	r2, [pc, #448]	; (800e260 <HAL_SPI_Init+0x240>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d004      	beq.n	800e0ac <HAL_SPI_Init+0x8c>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a6f      	ldr	r2, [pc, #444]	; (800e264 <HAL_SPI_Init+0x244>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d104      	bne.n	800e0b6 <HAL_SPI_Init+0x96>
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b10      	cmp	r3, #16
 800e0b0:	d901      	bls.n	800e0b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e0cd      	b.n	800e252 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d106      	bne.n	800e0d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7f4 fd60 	bl	8002b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2202      	movs	r2, #2
 800e0d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f022 0201 	bic.w	r2, r2, #1
 800e0e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e0f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0fc:	d119      	bne.n	800e132 <HAL_SPI_Init+0x112>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e106:	d103      	bne.n	800e110 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d008      	beq.n	800e122 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10c      	bne.n	800e132 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e11c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e120:	d107      	bne.n	800e132 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e130:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00f      	beq.n	800e15e <HAL_SPI_Init+0x13e>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	2b06      	cmp	r3, #6
 800e144:	d90b      	bls.n	800e15e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	430a      	orrs	r2, r1
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	e007      	b.n	800e16e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e16c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	69da      	ldr	r2, [r3, #28]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e176:	431a      	orrs	r2, r3
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	431a      	orrs	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e180:	ea42 0103 	orr.w	r1, r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	68da      	ldr	r2, [r3, #12]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	430a      	orrs	r2, r1
 800e18e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e198:	431a      	orrs	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e19e:	431a      	orrs	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	431a      	orrs	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	695b      	ldr	r3, [r3, #20]
 800e1b0:	431a      	orrs	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	431a      	orrs	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ce:	ea42 0103 	orr.w	r1, r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d113      	bne.n	800e20e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e20c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f022 0201 	bic.w	r2, r2, #1
 800e21c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00a      	beq.n	800e240 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	430a      	orrs	r2, r1
 800e23e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	40013000 	.word	0x40013000
 800e260:	40003800 	.word	0x40003800
 800e264:	40003c00 	.word	0x40003c00

0800e268 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	4613      	mov	r3, r2
 800e274:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d005      	beq.n	800e28e <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2200      	movs	r2, #0
 800e286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 800e28a:	2302      	movs	r3, #2
 800e28c:	e127      	b.n	800e4de <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <HAL_SPI_Receive_DMA+0x32>
 800e294:	88fb      	ldrh	r3, [r7, #6]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d105      	bne.n	800e2a6 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e11b      	b.n	800e4de <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d101      	bne.n	800e2b4 <HAL_SPI_Receive_DMA+0x4c>
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	e114      	b.n	800e4de <HAL_SPI_Receive_DMA+0x276>
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2204      	movs	r2, #4
 800e2c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	88fa      	ldrh	r2, [r7, #6]
 800e2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	88fa      	ldrh	r2, [r7, #6]
 800e2de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e306:	d108      	bne.n	800e31a <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	e009      	b.n	800e32e <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e32c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	2b0f      	cmp	r3, #15
 800e334:	d905      	bls.n	800e342 <HAL_SPI_Receive_DMA+0xda>
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e340:	d10f      	bne.n	800e362 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e346:	2b07      	cmp	r3, #7
 800e348:	d911      	bls.n	800e36e <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e34e:	699b      	ldr	r3, [r3, #24]
 800e350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e354:	d00b      	beq.n	800e36e <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e35a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e35c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e360:	d005      	beq.n	800e36e <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	e0b7      	b.n	800e4de <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	689a      	ldr	r2, [r3, #8]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e37c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	2b07      	cmp	r3, #7
 800e384:	d820      	bhi.n	800e3c8 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e390:	d109      	bne.n	800e3a6 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e398:	b29b      	uxth	r3, r3
 800e39a:	3301      	adds	r3, #1
 800e39c:	105b      	asrs	r3, r3, #1
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3aa:	699b      	ldr	r3, [r3, #24]
 800e3ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3b0:	d11e      	bne.n	800e3f0 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	3303      	adds	r3, #3
 800e3bc:	109b      	asrs	r3, r3, #2
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3c6:	e013      	b.n	800e3f0 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	2b0f      	cmp	r3, #15
 800e3ce:	d80f      	bhi.n	800e3f0 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3da:	d109      	bne.n	800e3f0 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	105b      	asrs	r3, r3, #1
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3f4:	4a3c      	ldr	r2, [pc, #240]	; (800e4e8 <HAL_SPI_Receive_DMA+0x280>)
 800e3f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3fc:	4a3b      	ldr	r2, [pc, #236]	; (800e4ec <HAL_SPI_Receive_DMA+0x284>)
 800e3fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e404:	4a3a      	ldr	r2, [pc, #232]	; (800e4f0 <HAL_SPI_Receive_DMA+0x288>)
 800e406:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e40c:	2200      	movs	r2, #0
 800e40e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	3330      	adds	r3, #48	; 0x30
 800e41a:	4619      	mov	r1, r3
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e420:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e428:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e42a:	f7f8 fa61 	bl	80068f0 <HAL_DMA_Start_IT>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d011      	beq.n	800e458 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e43a:	f043 0210 	orr.w	r2, r3, #16
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	e042      	b.n	800e4de <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e45c:	69db      	ldr	r3, [r3, #28]
 800e45e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e462:	d108      	bne.n	800e476 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6859      	ldr	r1, [r3, #4]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	4b21      	ldr	r3, [pc, #132]	; (800e4f4 <HAL_SPI_Receive_DMA+0x28c>)
 800e470:	400b      	ands	r3, r1
 800e472:	6053      	str	r3, [r2, #4]
 800e474:	e009      	b.n	800e48a <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	685a      	ldr	r2, [r3, #4]
 800e47c:	4b1d      	ldr	r3, [pc, #116]	; (800e4f4 <HAL_SPI_Receive_DMA+0x28c>)
 800e47e:	4013      	ands	r3, r2
 800e480:	88f9      	ldrh	r1, [r7, #6]
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	6812      	ldr	r2, [r2, #0]
 800e486:	430b      	orrs	r3, r1
 800e488:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	689a      	ldr	r2, [r3, #8]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e498:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	691a      	ldr	r2, [r3, #16]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800e4a8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f042 0201 	orr.w	r2, r2, #1
 800e4b8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4c2:	d107      	bne.n	800e4d4 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4d2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	0800e953 	.word	0x0800e953
 800e4ec:	0800e90d 	.word	0x0800e90d
 800e4f0:	0800e96f 	.word	0x0800e96f
 800e4f4:	ffff0000 	.word	0xffff0000

0800e4f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08a      	sub	sp, #40	; 0x28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	691b      	ldr	r3, [r3, #16]
 800e506:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	695b      	ldr	r3, [r3, #20]
 800e50e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800e510:	6a3a      	ldr	r2, [r7, #32]
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	4013      	ands	r3, r2
 800e516:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800e520:	2300      	movs	r3, #0
 800e522:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e52a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3330      	adds	r3, #48	; 0x30
 800e532:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d010      	beq.n	800e560 <HAL_SPI_IRQHandler+0x68>
 800e53e:	6a3b      	ldr	r3, [r7, #32]
 800e540:	f003 0308 	and.w	r3, r3, #8
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00b      	beq.n	800e560 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	699a      	ldr	r2, [r3, #24]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e556:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 f9cd 	bl	800e8f8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800e55e:	e192      	b.n	800e886 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e566:	2b00      	cmp	r3, #0
 800e568:	d113      	bne.n	800e592 <HAL_SPI_IRQHandler+0x9a>
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	f003 0320 	and.w	r3, r3, #32
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10e      	bne.n	800e592 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d009      	beq.n	800e592 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	4798      	blx	r3
    hspi->RxISR(hspi);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	4798      	blx	r3
    handled = 1UL;
 800e58e:	2301      	movs	r3, #1
 800e590:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10f      	bne.n	800e5bc <HAL_SPI_IRQHandler+0xc4>
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d105      	bne.n	800e5bc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	4798      	blx	r3
    handled = 1UL;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	f003 0320 	and.w	r3, r3, #32
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10f      	bne.n	800e5e6 <HAL_SPI_IRQHandler+0xee>
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	f003 0302 	and.w	r3, r3, #2
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d00a      	beq.n	800e5e6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
    handled = 1UL;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f040 8147 	bne.w	800e87c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	f003 0308 	and.w	r3, r3, #8
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 808b 	beq.w	800e710 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	699a      	ldr	r2, [r3, #24]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f042 0208 	orr.w	r2, r2, #8
 800e608:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	699a      	ldr	r2, [r3, #24]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f042 0210 	orr.w	r2, r2, #16
 800e618:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	699a      	ldr	r2, [r3, #24]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e628:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	691a      	ldr	r2, [r3, #16]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f022 0208 	bic.w	r2, r2, #8
 800e638:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d13d      	bne.n	800e6c4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800e648:	e036      	b.n	800e6b8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	2b0f      	cmp	r3, #15
 800e650:	d90b      	bls.n	800e66a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e65a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e65c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e662:	1d1a      	adds	r2, r3, #4
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	665a      	str	r2, [r3, #100]	; 0x64
 800e668:	e01d      	b.n	800e6a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	2b07      	cmp	r3, #7
 800e670:	d90b      	bls.n	800e68a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	8812      	ldrh	r2, [r2, #0]
 800e67a:	b292      	uxth	r2, r2
 800e67c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e682:	1c9a      	adds	r2, r3, #2
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	665a      	str	r2, [r3, #100]	; 0x64
 800e688:	e00d      	b.n	800e6a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e696:	7812      	ldrb	r2, [r2, #0]
 800e698:	b2d2      	uxtb	r2, r2
 800e69a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6a0:	1c5a      	adds	r2, r3, #1
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1c2      	bne.n	800e64a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 f98f 	bl	800e9e8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f000 f901 	bl	800e8e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e6e2:	e0d0      	b.n	800e886 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800e6e4:	7cfb      	ldrb	r3, [r7, #19]
 800e6e6:	2b05      	cmp	r3, #5
 800e6e8:	d103      	bne.n	800e6f2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f8e6 	bl	800e8bc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800e6f0:	e0c6      	b.n	800e880 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800e6f2:	7cfb      	ldrb	r3, [r7, #19]
 800e6f4:	2b04      	cmp	r3, #4
 800e6f6:	d103      	bne.n	800e700 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f8d5 	bl	800e8a8 <HAL_SPI_RxCpltCallback>
    return;
 800e6fe:	e0bf      	b.n	800e880 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800e700:	7cfb      	ldrb	r3, [r7, #19]
 800e702:	2b03      	cmp	r3, #3
 800e704:	f040 80bc 	bne.w	800e880 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f8c3 	bl	800e894 <HAL_SPI_TxCpltCallback>
    return;
 800e70e:	e0b7      	b.n	800e880 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800e716:	2b00      	cmp	r3, #0
 800e718:	f000 80b5 	beq.w	800e886 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00f      	beq.n	800e746 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e72c:	f043 0204 	orr.w	r2, r3, #4
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	699a      	ldr	r2, [r3, #24]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e744:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00f      	beq.n	800e770 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e756:	f043 0201 	orr.w	r2, r3, #1
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	699a      	ldr	r2, [r3, #24]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e76e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e776:	2b00      	cmp	r3, #0
 800e778:	d00f      	beq.n	800e79a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e780:	f043 0208 	orr.w	r2, r3, #8
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	699a      	ldr	r2, [r3, #24]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e798:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	f003 0320 	and.w	r3, r3, #32
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00f      	beq.n	800e7c4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	699a      	ldr	r2, [r3, #24]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f042 0220 	orr.w	r2, r2, #32
 800e7c2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d05a      	beq.n	800e884 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f022 0201 	bic.w	r2, r2, #1
 800e7dc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6919      	ldr	r1, [r3, #16]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	4b28      	ldr	r3, [pc, #160]	; (800e88c <HAL_SPI_IRQHandler+0x394>)
 800e7ea:	400b      	ands	r3, r1
 800e7ec:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e7f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e7f8:	d138      	bne.n	800e86c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	689a      	ldr	r2, [r3, #8]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e808:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d013      	beq.n	800e83a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e816:	4a1e      	ldr	r2, [pc, #120]	; (800e890 <HAL_SPI_IRQHandler+0x398>)
 800e818:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f8 fdee 	bl	8007400 <HAL_DMA_Abort_IT>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d007      	beq.n	800e83a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e830:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d020      	beq.n	800e884 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e846:	4a12      	ldr	r2, [pc, #72]	; (800e890 <HAL_SPI_IRQHandler+0x398>)
 800e848:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e84e:	4618      	mov	r0, r3
 800e850:	f7f8 fdd6 	bl	8007400 <HAL_DMA_Abort_IT>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d014      	beq.n	800e884 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e86a:	e00b      	b.n	800e884 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f835 	bl	800e8e4 <HAL_SPI_ErrorCallback>
    return;
 800e87a:	e003      	b.n	800e884 <HAL_SPI_IRQHandler+0x38c>
    return;
 800e87c:	bf00      	nop
 800e87e:	e002      	b.n	800e886 <HAL_SPI_IRQHandler+0x38e>
    return;
 800e880:	bf00      	nop
 800e882:	e000      	b.n	800e886 <HAL_SPI_IRQHandler+0x38e>
    return;
 800e884:	bf00      	nop
  }
}
 800e886:	3728      	adds	r7, #40	; 0x28
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	fffffc94 	.word	0xfffffc94
 800e890:	0800e9b5 	.word	0x0800e9b5

0800e894 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e8c4:	bf00      	nop
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e8d8:	bf00      	nop
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e918:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b07      	cmp	r3, #7
 800e924:	d011      	beq.n	800e94a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e92a:	69db      	ldr	r3, [r3, #28]
 800e92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e930:	d103      	bne.n	800e93a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f7ff ffb8 	bl	800e8a8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e938:	e007      	b.n	800e94a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	691a      	ldr	r2, [r3, #16]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f042 0208 	orr.w	r2, r2, #8
 800e948:	611a      	str	r2, [r3, #16]
}
 800e94a:	bf00      	nop
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e95e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f7ff ffb5 	bl	800e8d0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e966:	bf00      	nop
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b084      	sub	sp, #16
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e97a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7f9 feaf 	bl	80086e0 <HAL_DMA_GetError>
 800e982:	4603      	mov	r3, r0
 800e984:	2b02      	cmp	r3, #2
 800e986:	d011      	beq.n	800e9ac <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f000 f82d 	bl	800e9e8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e994:	f043 0210 	orr.w	r2, r3, #16
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7ff ff9c 	bl	800e8e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e9ac:	bf00      	nop
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f7ff ff82 	bl	800e8e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e9e0:	bf00      	nop
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	699a      	ldr	r2, [r3, #24]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f042 0208 	orr.w	r2, r2, #8
 800ea06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	699a      	ldr	r2, [r3, #24]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f042 0210 	orr.w	r2, r2, #16
 800ea16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f022 0201 	bic.w	r2, r2, #1
 800ea26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6919      	ldr	r1, [r3, #16]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	4b3c      	ldr	r3, [pc, #240]	; (800eb24 <SPI_CloseTransfer+0x13c>)
 800ea34:	400b      	ands	r3, r1
 800ea36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	689a      	ldr	r2, [r3, #8]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ea46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b04      	cmp	r3, #4
 800ea52:	d014      	beq.n	800ea7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f003 0320 	and.w	r3, r3, #32
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00f      	beq.n	800ea7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	699a      	ldr	r2, [r3, #24]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f042 0220 	orr.w	r2, r2, #32
 800ea7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b03      	cmp	r3, #3
 800ea88:	d014      	beq.n	800eab4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00f      	beq.n	800eab4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea9a:	f043 0204 	orr.w	r2, r3, #4
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	699a      	ldr	r2, [r3, #24]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eab2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00f      	beq.n	800eade <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eac4:	f043 0201 	orr.w	r2, r3, #1
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	699a      	ldr	r2, [r3, #24]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eadc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00f      	beq.n	800eb08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaee:	f043 0208 	orr.w	r2, r3, #8
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699a      	ldr	r2, [r3, #24]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eb18:	bf00      	nop
 800eb1a:	3714      	adds	r7, #20
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr
 800eb24:	fffffc90 	.word	0xfffffc90

0800eb28 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb34:	095b      	lsrs	r3, r3, #5
 800eb36:	3301      	adds	r3, #1
 800eb38:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	3307      	adds	r3, #7
 800eb46:	08db      	lsrs	r3, r3, #3
 800eb48:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	fb02 f303 	mul.w	r3, r2, r3
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3714      	adds	r7, #20
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b082      	sub	sp, #8
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e049      	b.n	800ec04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d106      	bne.n	800eb8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7f4 fce7 	bl	8003558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2202      	movs	r2, #2
 800eb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3304      	adds	r3, #4
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	f000 fe7d 	bl	800f89c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2201      	movs	r2, #1
 800ebee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d001      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec20:	2301      	movs	r3, #1
 800ec22:	e054      	b.n	800ecce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2202      	movs	r2, #2
 800ec28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68da      	ldr	r2, [r3, #12]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f042 0201 	orr.w	r2, r2, #1
 800ec3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a26      	ldr	r2, [pc, #152]	; (800ecdc <HAL_TIM_Base_Start_IT+0xd0>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d022      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x80>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec4e:	d01d      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x80>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a22      	ldr	r2, [pc, #136]	; (800ece0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d018      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x80>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4a21      	ldr	r2, [pc, #132]	; (800ece4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d013      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x80>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a1f      	ldr	r2, [pc, #124]	; (800ece8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d00e      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x80>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4a1e      	ldr	r2, [pc, #120]	; (800ecec <HAL_TIM_Base_Start_IT+0xe0>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d009      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x80>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a1c      	ldr	r2, [pc, #112]	; (800ecf0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d004      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x80>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4a1b      	ldr	r2, [pc, #108]	; (800ecf4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d115      	bne.n	800ecb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	689a      	ldr	r2, [r3, #8]
 800ec92:	4b19      	ldr	r3, [pc, #100]	; (800ecf8 <HAL_TIM_Base_Start_IT+0xec>)
 800ec94:	4013      	ands	r3, r2
 800ec96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b06      	cmp	r3, #6
 800ec9c:	d015      	beq.n	800ecca <HAL_TIM_Base_Start_IT+0xbe>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eca4:	d011      	beq.n	800ecca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f042 0201 	orr.w	r2, r2, #1
 800ecb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecb6:	e008      	b.n	800ecca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f042 0201 	orr.w	r2, r2, #1
 800ecc6:	601a      	str	r2, [r3, #0]
 800ecc8:	e000      	b.n	800eccc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	40010000 	.word	0x40010000
 800ece0:	40000400 	.word	0x40000400
 800ece4:	40000800 	.word	0x40000800
 800ece8:	40000c00 	.word	0x40000c00
 800ecec:	40010400 	.word	0x40010400
 800ecf0:	40001800 	.word	0x40001800
 800ecf4:	40014000 	.word	0x40014000
 800ecf8:	00010007 	.word	0x00010007

0800ecfc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed06:	2300      	movs	r3, #0
 800ed08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d109      	bne.n	800ed24 <HAL_TIM_OC_Start_IT+0x28>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	bf14      	ite	ne
 800ed1c:	2301      	movne	r3, #1
 800ed1e:	2300      	moveq	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	e03c      	b.n	800ed9e <HAL_TIM_OC_Start_IT+0xa2>
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b04      	cmp	r3, #4
 800ed28:	d109      	bne.n	800ed3e <HAL_TIM_OC_Start_IT+0x42>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	bf14      	ite	ne
 800ed36:	2301      	movne	r3, #1
 800ed38:	2300      	moveq	r3, #0
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	e02f      	b.n	800ed9e <HAL_TIM_OC_Start_IT+0xa2>
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2b08      	cmp	r3, #8
 800ed42:	d109      	bne.n	800ed58 <HAL_TIM_OC_Start_IT+0x5c>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	bf14      	ite	ne
 800ed50:	2301      	movne	r3, #1
 800ed52:	2300      	moveq	r3, #0
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	e022      	b.n	800ed9e <HAL_TIM_OC_Start_IT+0xa2>
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b0c      	cmp	r3, #12
 800ed5c:	d109      	bne.n	800ed72 <HAL_TIM_OC_Start_IT+0x76>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	bf14      	ite	ne
 800ed6a:	2301      	movne	r3, #1
 800ed6c:	2300      	moveq	r3, #0
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	e015      	b.n	800ed9e <HAL_TIM_OC_Start_IT+0xa2>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b10      	cmp	r3, #16
 800ed76:	d109      	bne.n	800ed8c <HAL_TIM_OC_Start_IT+0x90>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	bf14      	ite	ne
 800ed84:	2301      	movne	r3, #1
 800ed86:	2300      	moveq	r3, #0
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	e008      	b.n	800ed9e <HAL_TIM_OC_Start_IT+0xa2>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	bf14      	ite	ne
 800ed98:	2301      	movne	r3, #1
 800ed9a:	2300      	moveq	r3, #0
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e0ec      	b.n	800ef80 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d104      	bne.n	800edb6 <HAL_TIM_OC_Start_IT+0xba>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2202      	movs	r2, #2
 800edb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800edb4:	e023      	b.n	800edfe <HAL_TIM_OC_Start_IT+0x102>
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	2b04      	cmp	r3, #4
 800edba:	d104      	bne.n	800edc6 <HAL_TIM_OC_Start_IT+0xca>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2202      	movs	r2, #2
 800edc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800edc4:	e01b      	b.n	800edfe <HAL_TIM_OC_Start_IT+0x102>
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b08      	cmp	r3, #8
 800edca:	d104      	bne.n	800edd6 <HAL_TIM_OC_Start_IT+0xda>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2202      	movs	r2, #2
 800edd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edd4:	e013      	b.n	800edfe <HAL_TIM_OC_Start_IT+0x102>
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2b0c      	cmp	r3, #12
 800edda:	d104      	bne.n	800ede6 <HAL_TIM_OC_Start_IT+0xea>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2202      	movs	r2, #2
 800ede0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ede4:	e00b      	b.n	800edfe <HAL_TIM_OC_Start_IT+0x102>
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b10      	cmp	r3, #16
 800edea:	d104      	bne.n	800edf6 <HAL_TIM_OC_Start_IT+0xfa>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2202      	movs	r2, #2
 800edf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edf4:	e003      	b.n	800edfe <HAL_TIM_OC_Start_IT+0x102>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2202      	movs	r2, #2
 800edfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b0c      	cmp	r3, #12
 800ee02:	d841      	bhi.n	800ee88 <HAL_TIM_OC_Start_IT+0x18c>
 800ee04:	a201      	add	r2, pc, #4	; (adr r2, 800ee0c <HAL_TIM_OC_Start_IT+0x110>)
 800ee06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0a:	bf00      	nop
 800ee0c:	0800ee41 	.word	0x0800ee41
 800ee10:	0800ee89 	.word	0x0800ee89
 800ee14:	0800ee89 	.word	0x0800ee89
 800ee18:	0800ee89 	.word	0x0800ee89
 800ee1c:	0800ee53 	.word	0x0800ee53
 800ee20:	0800ee89 	.word	0x0800ee89
 800ee24:	0800ee89 	.word	0x0800ee89
 800ee28:	0800ee89 	.word	0x0800ee89
 800ee2c:	0800ee65 	.word	0x0800ee65
 800ee30:	0800ee89 	.word	0x0800ee89
 800ee34:	0800ee89 	.word	0x0800ee89
 800ee38:	0800ee89 	.word	0x0800ee89
 800ee3c:	0800ee77 	.word	0x0800ee77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68da      	ldr	r2, [r3, #12]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f042 0202 	orr.w	r2, r2, #2
 800ee4e:	60da      	str	r2, [r3, #12]
      break;
 800ee50:	e01d      	b.n	800ee8e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68da      	ldr	r2, [r3, #12]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f042 0204 	orr.w	r2, r2, #4
 800ee60:	60da      	str	r2, [r3, #12]
      break;
 800ee62:	e014      	b.n	800ee8e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68da      	ldr	r2, [r3, #12]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f042 0208 	orr.w	r2, r2, #8
 800ee72:	60da      	str	r2, [r3, #12]
      break;
 800ee74:	e00b      	b.n	800ee8e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68da      	ldr	r2, [r3, #12]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f042 0210 	orr.w	r2, r2, #16
 800ee84:	60da      	str	r2, [r3, #12]
      break;
 800ee86:	e002      	b.n	800ee8e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee8c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee8e:	7bfb      	ldrb	r3, [r7, #15]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d174      	bne.n	800ef7e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	6839      	ldr	r1, [r7, #0]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f001 f917 	bl	80100d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4a38      	ldr	r2, [pc, #224]	; (800ef88 <HAL_TIM_OC_Start_IT+0x28c>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d013      	beq.n	800eed4 <HAL_TIM_OC_Start_IT+0x1d8>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a36      	ldr	r2, [pc, #216]	; (800ef8c <HAL_TIM_OC_Start_IT+0x290>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d00e      	beq.n	800eed4 <HAL_TIM_OC_Start_IT+0x1d8>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a35      	ldr	r2, [pc, #212]	; (800ef90 <HAL_TIM_OC_Start_IT+0x294>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d009      	beq.n	800eed4 <HAL_TIM_OC_Start_IT+0x1d8>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a33      	ldr	r2, [pc, #204]	; (800ef94 <HAL_TIM_OC_Start_IT+0x298>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d004      	beq.n	800eed4 <HAL_TIM_OC_Start_IT+0x1d8>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a32      	ldr	r2, [pc, #200]	; (800ef98 <HAL_TIM_OC_Start_IT+0x29c>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d101      	bne.n	800eed8 <HAL_TIM_OC_Start_IT+0x1dc>
 800eed4:	2301      	movs	r3, #1
 800eed6:	e000      	b.n	800eeda <HAL_TIM_OC_Start_IT+0x1de>
 800eed8:	2300      	movs	r3, #0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d007      	beq.n	800eeee <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eeec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a25      	ldr	r2, [pc, #148]	; (800ef88 <HAL_TIM_OC_Start_IT+0x28c>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d022      	beq.n	800ef3e <HAL_TIM_OC_Start_IT+0x242>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef00:	d01d      	beq.n	800ef3e <HAL_TIM_OC_Start_IT+0x242>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a25      	ldr	r2, [pc, #148]	; (800ef9c <HAL_TIM_OC_Start_IT+0x2a0>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d018      	beq.n	800ef3e <HAL_TIM_OC_Start_IT+0x242>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a23      	ldr	r2, [pc, #140]	; (800efa0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d013      	beq.n	800ef3e <HAL_TIM_OC_Start_IT+0x242>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a22      	ldr	r2, [pc, #136]	; (800efa4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d00e      	beq.n	800ef3e <HAL_TIM_OC_Start_IT+0x242>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a19      	ldr	r2, [pc, #100]	; (800ef8c <HAL_TIM_OC_Start_IT+0x290>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d009      	beq.n	800ef3e <HAL_TIM_OC_Start_IT+0x242>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a1e      	ldr	r2, [pc, #120]	; (800efa8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d004      	beq.n	800ef3e <HAL_TIM_OC_Start_IT+0x242>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a15      	ldr	r2, [pc, #84]	; (800ef90 <HAL_TIM_OC_Start_IT+0x294>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d115      	bne.n	800ef6a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	689a      	ldr	r2, [r3, #8]
 800ef44:	4b19      	ldr	r3, [pc, #100]	; (800efac <HAL_TIM_OC_Start_IT+0x2b0>)
 800ef46:	4013      	ands	r3, r2
 800ef48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	2b06      	cmp	r3, #6
 800ef4e:	d015      	beq.n	800ef7c <HAL_TIM_OC_Start_IT+0x280>
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef56:	d011      	beq.n	800ef7c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f042 0201 	orr.w	r2, r2, #1
 800ef66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef68:	e008      	b.n	800ef7c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f042 0201 	orr.w	r2, r2, #1
 800ef78:	601a      	str	r2, [r3, #0]
 800ef7a:	e000      	b.n	800ef7e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ef7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3710      	adds	r7, #16
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	40010000 	.word	0x40010000
 800ef8c:	40010400 	.word	0x40010400
 800ef90:	40014000 	.word	0x40014000
 800ef94:	40014400 	.word	0x40014400
 800ef98:	40014800 	.word	0x40014800
 800ef9c:	40000400 	.word	0x40000400
 800efa0:	40000800 	.word	0x40000800
 800efa4:	40000c00 	.word	0x40000c00
 800efa8:	40001800 	.word	0x40001800
 800efac:	00010007 	.word	0x00010007

0800efb0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efba:	2300      	movs	r3, #0
 800efbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	2b0c      	cmp	r3, #12
 800efc2:	d841      	bhi.n	800f048 <HAL_TIM_OC_Stop_IT+0x98>
 800efc4:	a201      	add	r2, pc, #4	; (adr r2, 800efcc <HAL_TIM_OC_Stop_IT+0x1c>)
 800efc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efca:	bf00      	nop
 800efcc:	0800f001 	.word	0x0800f001
 800efd0:	0800f049 	.word	0x0800f049
 800efd4:	0800f049 	.word	0x0800f049
 800efd8:	0800f049 	.word	0x0800f049
 800efdc:	0800f013 	.word	0x0800f013
 800efe0:	0800f049 	.word	0x0800f049
 800efe4:	0800f049 	.word	0x0800f049
 800efe8:	0800f049 	.word	0x0800f049
 800efec:	0800f025 	.word	0x0800f025
 800eff0:	0800f049 	.word	0x0800f049
 800eff4:	0800f049 	.word	0x0800f049
 800eff8:	0800f049 	.word	0x0800f049
 800effc:	0800f037 	.word	0x0800f037
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68da      	ldr	r2, [r3, #12]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f022 0202 	bic.w	r2, r2, #2
 800f00e:	60da      	str	r2, [r3, #12]
      break;
 800f010:	e01d      	b.n	800f04e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68da      	ldr	r2, [r3, #12]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f022 0204 	bic.w	r2, r2, #4
 800f020:	60da      	str	r2, [r3, #12]
      break;
 800f022:	e014      	b.n	800f04e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68da      	ldr	r2, [r3, #12]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f022 0208 	bic.w	r2, r2, #8
 800f032:	60da      	str	r2, [r3, #12]
      break;
 800f034:	e00b      	b.n	800f04e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68da      	ldr	r2, [r3, #12]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f022 0210 	bic.w	r2, r2, #16
 800f044:	60da      	str	r2, [r3, #12]
      break;
 800f046:	e002      	b.n	800f04e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	73fb      	strb	r3, [r7, #15]
      break;
 800f04c:	bf00      	nop
  }

  if (status == HAL_OK)
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	2b00      	cmp	r3, #0
 800f052:	f040 8081 	bne.w	800f158 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2200      	movs	r2, #0
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	4618      	mov	r0, r3
 800f060:	f001 f836 	bl	80100d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a3e      	ldr	r2, [pc, #248]	; (800f164 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d013      	beq.n	800f096 <HAL_TIM_OC_Stop_IT+0xe6>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a3d      	ldr	r2, [pc, #244]	; (800f168 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d00e      	beq.n	800f096 <HAL_TIM_OC_Stop_IT+0xe6>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a3b      	ldr	r2, [pc, #236]	; (800f16c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d009      	beq.n	800f096 <HAL_TIM_OC_Stop_IT+0xe6>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a3a      	ldr	r2, [pc, #232]	; (800f170 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d004      	beq.n	800f096 <HAL_TIM_OC_Stop_IT+0xe6>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a38      	ldr	r2, [pc, #224]	; (800f174 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d101      	bne.n	800f09a <HAL_TIM_OC_Stop_IT+0xea>
 800f096:	2301      	movs	r3, #1
 800f098:	e000      	b.n	800f09c <HAL_TIM_OC_Stop_IT+0xec>
 800f09a:	2300      	movs	r3, #0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d017      	beq.n	800f0d0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6a1a      	ldr	r2, [r3, #32]
 800f0a6:	f241 1311 	movw	r3, #4369	; 0x1111
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d10f      	bne.n	800f0d0 <HAL_TIM_OC_Stop_IT+0x120>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6a1a      	ldr	r2, [r3, #32]
 800f0b6:	f240 4344 	movw	r3, #1092	; 0x444
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d107      	bne.n	800f0d0 <HAL_TIM_OC_Stop_IT+0x120>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f0ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	6a1a      	ldr	r2, [r3, #32]
 800f0d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800f0da:	4013      	ands	r3, r2
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d10f      	bne.n	800f100 <HAL_TIM_OC_Stop_IT+0x150>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	6a1a      	ldr	r2, [r3, #32]
 800f0e6:	f240 4344 	movw	r3, #1092	; 0x444
 800f0ea:	4013      	ands	r3, r2
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d107      	bne.n	800f100 <HAL_TIM_OC_Stop_IT+0x150>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f022 0201 	bic.w	r2, r2, #1
 800f0fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d104      	bne.n	800f110 <HAL_TIM_OC_Stop_IT+0x160>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2201      	movs	r2, #1
 800f10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f10e:	e023      	b.n	800f158 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	2b04      	cmp	r3, #4
 800f114:	d104      	bne.n	800f120 <HAL_TIM_OC_Stop_IT+0x170>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f11e:	e01b      	b.n	800f158 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b08      	cmp	r3, #8
 800f124:	d104      	bne.n	800f130 <HAL_TIM_OC_Stop_IT+0x180>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2201      	movs	r2, #1
 800f12a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f12e:	e013      	b.n	800f158 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	2b0c      	cmp	r3, #12
 800f134:	d104      	bne.n	800f140 <HAL_TIM_OC_Stop_IT+0x190>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2201      	movs	r2, #1
 800f13a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f13e:	e00b      	b.n	800f158 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b10      	cmp	r3, #16
 800f144:	d104      	bne.n	800f150 <HAL_TIM_OC_Stop_IT+0x1a0>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2201      	movs	r2, #1
 800f14a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f14e:	e003      	b.n	800f158 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f158:	7bfb      	ldrb	r3, [r7, #15]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	40010000 	.word	0x40010000
 800f168:	40010400 	.word	0x40010400
 800f16c:	40014000 	.word	0x40014000
 800f170:	40014400 	.word	0x40014400
 800f174:	40014800 	.word	0x40014800

0800f178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d101      	bne.n	800f18a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f186:	2301      	movs	r3, #1
 800f188:	e049      	b.n	800f21e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f190:	b2db      	uxtb	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d106      	bne.n	800f1a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 f841 	bl	800f226 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	3304      	adds	r3, #4
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4610      	mov	r0, r2
 800f1b8:	f000 fb70 	bl	800f89c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2201      	movs	r2, #1
 800f210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f226:	b480      	push	{r7}
 800f228:	b083      	sub	sp, #12
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f22e:	bf00      	nop
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr

0800f23a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	691b      	ldr	r3, [r3, #16]
 800f250:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	f003 0302 	and.w	r3, r3, #2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d020      	beq.n	800f29e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f003 0302 	and.w	r3, r3, #2
 800f262:	2b00      	cmp	r3, #0
 800f264:	d01b      	beq.n	800f29e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f06f 0202 	mvn.w	r2, #2
 800f26e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	f003 0303 	and.w	r3, r3, #3
 800f280:	2b00      	cmp	r3, #0
 800f282:	d003      	beq.n	800f28c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 faeb 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f28a:	e005      	b.n	800f298 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7f2 f923 	bl	80014d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 faee 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	f003 0304 	and.w	r3, r3, #4
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d020      	beq.n	800f2ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f003 0304 	and.w	r3, r3, #4
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d01b      	beq.n	800f2ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f06f 0204 	mvn.w	r2, #4
 800f2ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2202      	movs	r2, #2
 800f2c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d003      	beq.n	800f2d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fac5 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f2d6:	e005      	b.n	800f2e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7f2 f8fd 	bl	80014d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 fac8 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	f003 0308 	and.w	r3, r3, #8
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d020      	beq.n	800f336 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f003 0308 	and.w	r3, r3, #8
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d01b      	beq.n	800f336 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f06f 0208 	mvn.w	r2, #8
 800f306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2204      	movs	r2, #4
 800f30c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	69db      	ldr	r3, [r3, #28]
 800f314:	f003 0303 	and.w	r3, r3, #3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fa9f 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f322:	e005      	b.n	800f330 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7f2 f8d7 	bl	80014d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 faa2 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	f003 0310 	and.w	r3, r3, #16
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d020      	beq.n	800f382 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f003 0310 	and.w	r3, r3, #16
 800f346:	2b00      	cmp	r3, #0
 800f348:	d01b      	beq.n	800f382 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f06f 0210 	mvn.w	r2, #16
 800f352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2208      	movs	r2, #8
 800f358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f364:	2b00      	cmp	r3, #0
 800f366:	d003      	beq.n	800f370 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 fa79 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f36e:	e005      	b.n	800f37c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7f2 f8b1 	bl	80014d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fa7c 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	f003 0301 	and.w	r3, r3, #1
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00c      	beq.n	800f3a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	d007      	beq.n	800f3a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f06f 0201 	mvn.w	r2, #1
 800f39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7f2 feff 	bl	80021a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d104      	bne.n	800f3ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00c      	beq.n	800f3d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d007      	beq.n	800f3d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 ffba 	bl	8010348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00c      	beq.n	800f3f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d007      	beq.n	800f3f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 ffb2 	bl	801035c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00c      	beq.n	800f41c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d007      	beq.n	800f41c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fa36 	bl	800f888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	f003 0320 	and.w	r3, r3, #32
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00c      	beq.n	800f440 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f003 0320 	and.w	r3, r3, #32
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d007      	beq.n	800f440 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f06f 0220 	mvn.w	r2, #32
 800f438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 ff7a 	bl	8010334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f440:	bf00      	nop
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f454:	2300      	movs	r3, #0
 800f456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d101      	bne.n	800f466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f462:	2302      	movs	r3, #2
 800f464:	e0ff      	b.n	800f666 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2201      	movs	r2, #1
 800f46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2b14      	cmp	r3, #20
 800f472:	f200 80f0 	bhi.w	800f656 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f4d1 	.word	0x0800f4d1
 800f480:	0800f657 	.word	0x0800f657
 800f484:	0800f657 	.word	0x0800f657
 800f488:	0800f657 	.word	0x0800f657
 800f48c:	0800f511 	.word	0x0800f511
 800f490:	0800f657 	.word	0x0800f657
 800f494:	0800f657 	.word	0x0800f657
 800f498:	0800f657 	.word	0x0800f657
 800f49c:	0800f553 	.word	0x0800f553
 800f4a0:	0800f657 	.word	0x0800f657
 800f4a4:	0800f657 	.word	0x0800f657
 800f4a8:	0800f657 	.word	0x0800f657
 800f4ac:	0800f593 	.word	0x0800f593
 800f4b0:	0800f657 	.word	0x0800f657
 800f4b4:	0800f657 	.word	0x0800f657
 800f4b8:	0800f657 	.word	0x0800f657
 800f4bc:	0800f5d5 	.word	0x0800f5d5
 800f4c0:	0800f657 	.word	0x0800f657
 800f4c4:	0800f657 	.word	0x0800f657
 800f4c8:	0800f657 	.word	0x0800f657
 800f4cc:	0800f615 	.word	0x0800f615
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	68b9      	ldr	r1, [r7, #8]
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 fa86 	bl	800f9e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	699a      	ldr	r2, [r3, #24]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f042 0208 	orr.w	r2, r2, #8
 800f4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	699a      	ldr	r2, [r3, #24]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f022 0204 	bic.w	r2, r2, #4
 800f4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	6999      	ldr	r1, [r3, #24]
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	691a      	ldr	r2, [r3, #16]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	430a      	orrs	r2, r1
 800f50c:	619a      	str	r2, [r3, #24]
      break;
 800f50e:	e0a5      	b.n	800f65c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	68b9      	ldr	r1, [r7, #8]
 800f516:	4618      	mov	r0, r3
 800f518:	f000 faf6 	bl	800fb08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	699a      	ldr	r2, [r3, #24]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f52a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	699a      	ldr	r2, [r3, #24]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f53a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	6999      	ldr	r1, [r3, #24]
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	691b      	ldr	r3, [r3, #16]
 800f546:	021a      	lsls	r2, r3, #8
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	430a      	orrs	r2, r1
 800f54e:	619a      	str	r2, [r3, #24]
      break;
 800f550:	e084      	b.n	800f65c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	68b9      	ldr	r1, [r7, #8]
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 fb5f 	bl	800fc1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	69da      	ldr	r2, [r3, #28]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f042 0208 	orr.w	r2, r2, #8
 800f56c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	69da      	ldr	r2, [r3, #28]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f022 0204 	bic.w	r2, r2, #4
 800f57c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	69d9      	ldr	r1, [r3, #28]
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	691a      	ldr	r2, [r3, #16]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	430a      	orrs	r2, r1
 800f58e:	61da      	str	r2, [r3, #28]
      break;
 800f590:	e064      	b.n	800f65c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68b9      	ldr	r1, [r7, #8]
 800f598:	4618      	mov	r0, r3
 800f59a:	f000 fbc7 	bl	800fd2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69da      	ldr	r2, [r3, #28]
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	69da      	ldr	r2, [r3, #28]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	69d9      	ldr	r1, [r3, #28]
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	691b      	ldr	r3, [r3, #16]
 800f5c8:	021a      	lsls	r2, r3, #8
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	430a      	orrs	r2, r1
 800f5d0:	61da      	str	r2, [r3, #28]
      break;
 800f5d2:	e043      	b.n	800f65c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68b9      	ldr	r1, [r7, #8]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fc10 	bl	800fe00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f042 0208 	orr.w	r2, r2, #8
 800f5ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f022 0204 	bic.w	r2, r2, #4
 800f5fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	691a      	ldr	r2, [r3, #16]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	430a      	orrs	r2, r1
 800f610:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f612:	e023      	b.n	800f65c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68b9      	ldr	r1, [r7, #8]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f000 fc54 	bl	800fec8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f62e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f63e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	021a      	lsls	r2, r3, #8
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	430a      	orrs	r2, r1
 800f652:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f654:	e002      	b.n	800f65c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f656:	2301      	movs	r3, #1
 800f658:	75fb      	strb	r3, [r7, #23]
      break;
 800f65a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f664:	7dfb      	ldrb	r3, [r7, #23]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop

0800f670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f684:	2b01      	cmp	r3, #1
 800f686:	d101      	bne.n	800f68c <HAL_TIM_ConfigClockSource+0x1c>
 800f688:	2302      	movs	r3, #2
 800f68a:	e0dc      	b.n	800f846 <HAL_TIM_ConfigClockSource+0x1d6>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2201      	movs	r2, #1
 800f690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2202      	movs	r2, #2
 800f698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	4b6a      	ldr	r3, [pc, #424]	; (800f850 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a64      	ldr	r2, [pc, #400]	; (800f854 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	f000 80a9 	beq.w	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f6c8:	4a62      	ldr	r2, [pc, #392]	; (800f854 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	f200 80ae 	bhi.w	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f6d0:	4a61      	ldr	r2, [pc, #388]	; (800f858 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	f000 80a1 	beq.w	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f6d8:	4a5f      	ldr	r2, [pc, #380]	; (800f858 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	f200 80a6 	bhi.w	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f6e0:	4a5e      	ldr	r2, [pc, #376]	; (800f85c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	f000 8099 	beq.w	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f6e8:	4a5c      	ldr	r2, [pc, #368]	; (800f85c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	f200 809e 	bhi.w	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f6f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f6f4:	f000 8091 	beq.w	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f6f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f6fc:	f200 8096 	bhi.w	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f704:	f000 8089 	beq.w	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f70c:	f200 808e 	bhi.w	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f714:	d03e      	beq.n	800f794 <HAL_TIM_ConfigClockSource+0x124>
 800f716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f71a:	f200 8087 	bhi.w	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f71e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f722:	f000 8086 	beq.w	800f832 <HAL_TIM_ConfigClockSource+0x1c2>
 800f726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f72a:	d87f      	bhi.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f72c:	2b70      	cmp	r3, #112	; 0x70
 800f72e:	d01a      	beq.n	800f766 <HAL_TIM_ConfigClockSource+0xf6>
 800f730:	2b70      	cmp	r3, #112	; 0x70
 800f732:	d87b      	bhi.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f734:	2b60      	cmp	r3, #96	; 0x60
 800f736:	d050      	beq.n	800f7da <HAL_TIM_ConfigClockSource+0x16a>
 800f738:	2b60      	cmp	r3, #96	; 0x60
 800f73a:	d877      	bhi.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f73c:	2b50      	cmp	r3, #80	; 0x50
 800f73e:	d03c      	beq.n	800f7ba <HAL_TIM_ConfigClockSource+0x14a>
 800f740:	2b50      	cmp	r3, #80	; 0x50
 800f742:	d873      	bhi.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f744:	2b40      	cmp	r3, #64	; 0x40
 800f746:	d058      	beq.n	800f7fa <HAL_TIM_ConfigClockSource+0x18a>
 800f748:	2b40      	cmp	r3, #64	; 0x40
 800f74a:	d86f      	bhi.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f74c:	2b30      	cmp	r3, #48	; 0x30
 800f74e:	d064      	beq.n	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f750:	2b30      	cmp	r3, #48	; 0x30
 800f752:	d86b      	bhi.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f754:	2b20      	cmp	r3, #32
 800f756:	d060      	beq.n	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f758:	2b20      	cmp	r3, #32
 800f75a:	d867      	bhi.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d05c      	beq.n	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f760:	2b10      	cmp	r3, #16
 800f762:	d05a      	beq.n	800f81a <HAL_TIM_ConfigClockSource+0x1aa>
 800f764:	e062      	b.n	800f82c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6818      	ldr	r0, [r3, #0]
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	6899      	ldr	r1, [r3, #8]
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	685a      	ldr	r2, [r3, #4]
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	68db      	ldr	r3, [r3, #12]
 800f776:	f000 fc8b 	bl	8010090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	609a      	str	r2, [r3, #8]
      break;
 800f792:	e04f      	b.n	800f834 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6818      	ldr	r0, [r3, #0]
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	6899      	ldr	r1, [r3, #8]
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	685a      	ldr	r2, [r3, #4]
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	f000 fc74 	bl	8010090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	689a      	ldr	r2, [r3, #8]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f7b6:	609a      	str	r2, [r3, #8]
      break;
 800f7b8:	e03c      	b.n	800f834 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6818      	ldr	r0, [r3, #0]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	6859      	ldr	r1, [r3, #4]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	f000 fbe4 	bl	800ff94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2150      	movs	r1, #80	; 0x50
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f000 fc3e 	bl	8010054 <TIM_ITRx_SetConfig>
      break;
 800f7d8:	e02c      	b.n	800f834 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6818      	ldr	r0, [r3, #0]
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	6859      	ldr	r1, [r3, #4]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	f000 fc03 	bl	800fff2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2160      	movs	r1, #96	; 0x60
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f000 fc2e 	bl	8010054 <TIM_ITRx_SetConfig>
      break;
 800f7f8:	e01c      	b.n	800f834 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6818      	ldr	r0, [r3, #0]
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	6859      	ldr	r1, [r3, #4]
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	461a      	mov	r2, r3
 800f808:	f000 fbc4 	bl	800ff94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2140      	movs	r1, #64	; 0x40
 800f812:	4618      	mov	r0, r3
 800f814:	f000 fc1e 	bl	8010054 <TIM_ITRx_SetConfig>
      break;
 800f818:	e00c      	b.n	800f834 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4619      	mov	r1, r3
 800f824:	4610      	mov	r0, r2
 800f826:	f000 fc15 	bl	8010054 <TIM_ITRx_SetConfig>
      break;
 800f82a:	e003      	b.n	800f834 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f82c:	2301      	movs	r3, #1
 800f82e:	73fb      	strb	r3, [r7, #15]
      break;
 800f830:	e000      	b.n	800f834 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f844:	7bfb      	ldrb	r3, [r7, #15]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	ffceff88 	.word	0xffceff88
 800f854:	00100040 	.word	0x00100040
 800f858:	00100030 	.word	0x00100030
 800f85c:	00100020 	.word	0x00100020

0800f860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f868:	bf00      	nop
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f87c:	bf00      	nop
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a46      	ldr	r2, [pc, #280]	; (800f9c8 <TIM_Base_SetConfig+0x12c>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d013      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8ba:	d00f      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a43      	ldr	r2, [pc, #268]	; (800f9cc <TIM_Base_SetConfig+0x130>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d00b      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a42      	ldr	r2, [pc, #264]	; (800f9d0 <TIM_Base_SetConfig+0x134>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d007      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a41      	ldr	r2, [pc, #260]	; (800f9d4 <TIM_Base_SetConfig+0x138>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d003      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a40      	ldr	r2, [pc, #256]	; (800f9d8 <TIM_Base_SetConfig+0x13c>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d108      	bne.n	800f8ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a35      	ldr	r2, [pc, #212]	; (800f9c8 <TIM_Base_SetConfig+0x12c>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d01f      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8fc:	d01b      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a32      	ldr	r2, [pc, #200]	; (800f9cc <TIM_Base_SetConfig+0x130>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d017      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a31      	ldr	r2, [pc, #196]	; (800f9d0 <TIM_Base_SetConfig+0x134>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d013      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a30      	ldr	r2, [pc, #192]	; (800f9d4 <TIM_Base_SetConfig+0x138>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d00f      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a2f      	ldr	r2, [pc, #188]	; (800f9d8 <TIM_Base_SetConfig+0x13c>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00b      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a2e      	ldr	r2, [pc, #184]	; (800f9dc <TIM_Base_SetConfig+0x140>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d007      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a2d      	ldr	r2, [pc, #180]	; (800f9e0 <TIM_Base_SetConfig+0x144>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d003      	beq.n	800f936 <TIM_Base_SetConfig+0x9a>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a2c      	ldr	r2, [pc, #176]	; (800f9e4 <TIM_Base_SetConfig+0x148>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d108      	bne.n	800f948 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f93c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	4313      	orrs	r3, r2
 800f946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	4313      	orrs	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	689a      	ldr	r2, [r3, #8]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a16      	ldr	r2, [pc, #88]	; (800f9c8 <TIM_Base_SetConfig+0x12c>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d00f      	beq.n	800f994 <TIM_Base_SetConfig+0xf8>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a18      	ldr	r2, [pc, #96]	; (800f9d8 <TIM_Base_SetConfig+0x13c>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d00b      	beq.n	800f994 <TIM_Base_SetConfig+0xf8>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a17      	ldr	r2, [pc, #92]	; (800f9dc <TIM_Base_SetConfig+0x140>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d007      	beq.n	800f994 <TIM_Base_SetConfig+0xf8>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a16      	ldr	r2, [pc, #88]	; (800f9e0 <TIM_Base_SetConfig+0x144>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d003      	beq.n	800f994 <TIM_Base_SetConfig+0xf8>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a15      	ldr	r2, [pc, #84]	; (800f9e4 <TIM_Base_SetConfig+0x148>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d103      	bne.n	800f99c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	691a      	ldr	r2, [r3, #16]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	691b      	ldr	r3, [r3, #16]
 800f9a6:	f003 0301 	and.w	r3, r3, #1
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d105      	bne.n	800f9ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	f023 0201 	bic.w	r2, r3, #1
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	611a      	str	r2, [r3, #16]
  }
}
 800f9ba:	bf00      	nop
 800f9bc:	3714      	adds	r7, #20
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop
 800f9c8:	40010000 	.word	0x40010000
 800f9cc:	40000400 	.word	0x40000400
 800f9d0:	40000800 	.word	0x40000800
 800f9d4:	40000c00 	.word	0x40000c00
 800f9d8:	40010400 	.word	0x40010400
 800f9dc:	40014000 	.word	0x40014000
 800f9e0:	40014400 	.word	0x40014400
 800f9e4:	40014800 	.word	0x40014800

0800f9e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a1b      	ldr	r3, [r3, #32]
 800f9fc:	f023 0201 	bic.w	r2, r3, #1
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	699b      	ldr	r3, [r3, #24]
 800fa0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	4b37      	ldr	r3, [pc, #220]	; (800faf0 <TIM_OC1_SetConfig+0x108>)
 800fa14:	4013      	ands	r3, r2
 800fa16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f023 0303 	bic.w	r3, r3, #3
 800fa1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	f023 0302 	bic.w	r3, r3, #2
 800fa30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a2d      	ldr	r2, [pc, #180]	; (800faf4 <TIM_OC1_SetConfig+0x10c>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d00f      	beq.n	800fa64 <TIM_OC1_SetConfig+0x7c>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a2c      	ldr	r2, [pc, #176]	; (800faf8 <TIM_OC1_SetConfig+0x110>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d00b      	beq.n	800fa64 <TIM_OC1_SetConfig+0x7c>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4a2b      	ldr	r2, [pc, #172]	; (800fafc <TIM_OC1_SetConfig+0x114>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d007      	beq.n	800fa64 <TIM_OC1_SetConfig+0x7c>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4a2a      	ldr	r2, [pc, #168]	; (800fb00 <TIM_OC1_SetConfig+0x118>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d003      	beq.n	800fa64 <TIM_OC1_SetConfig+0x7c>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	4a29      	ldr	r2, [pc, #164]	; (800fb04 <TIM_OC1_SetConfig+0x11c>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d10c      	bne.n	800fa7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	f023 0308 	bic.w	r3, r3, #8
 800fa6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	697a      	ldr	r2, [r7, #20]
 800fa72:	4313      	orrs	r3, r2
 800fa74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	f023 0304 	bic.w	r3, r3, #4
 800fa7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4a1c      	ldr	r2, [pc, #112]	; (800faf4 <TIM_OC1_SetConfig+0x10c>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d00f      	beq.n	800faa6 <TIM_OC1_SetConfig+0xbe>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a1b      	ldr	r2, [pc, #108]	; (800faf8 <TIM_OC1_SetConfig+0x110>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d00b      	beq.n	800faa6 <TIM_OC1_SetConfig+0xbe>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a1a      	ldr	r2, [pc, #104]	; (800fafc <TIM_OC1_SetConfig+0x114>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d007      	beq.n	800faa6 <TIM_OC1_SetConfig+0xbe>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4a19      	ldr	r2, [pc, #100]	; (800fb00 <TIM_OC1_SetConfig+0x118>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d003      	beq.n	800faa6 <TIM_OC1_SetConfig+0xbe>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4a18      	ldr	r2, [pc, #96]	; (800fb04 <TIM_OC1_SetConfig+0x11c>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d111      	bne.n	800faca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800faac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	693a      	ldr	r2, [r7, #16]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	693a      	ldr	r2, [r7, #16]
 800face:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	685a      	ldr	r2, [r3, #4]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	697a      	ldr	r2, [r7, #20]
 800fae2:	621a      	str	r2, [r3, #32]
}
 800fae4:	bf00      	nop
 800fae6:	371c      	adds	r7, #28
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	fffeff8f 	.word	0xfffeff8f
 800faf4:	40010000 	.word	0x40010000
 800faf8:	40010400 	.word	0x40010400
 800fafc:	40014000 	.word	0x40014000
 800fb00:	40014400 	.word	0x40014400
 800fb04:	40014800 	.word	0x40014800

0800fb08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6a1b      	ldr	r3, [r3, #32]
 800fb1c:	f023 0210 	bic.w	r2, r3, #16
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	4b34      	ldr	r3, [pc, #208]	; (800fc04 <TIM_OC2_SetConfig+0xfc>)
 800fb34:	4013      	ands	r3, r2
 800fb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	021b      	lsls	r3, r3, #8
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	f023 0320 	bic.w	r3, r3, #32
 800fb52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	011b      	lsls	r3, r3, #4
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a29      	ldr	r2, [pc, #164]	; (800fc08 <TIM_OC2_SetConfig+0x100>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d003      	beq.n	800fb70 <TIM_OC2_SetConfig+0x68>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a28      	ldr	r2, [pc, #160]	; (800fc0c <TIM_OC2_SetConfig+0x104>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d10d      	bne.n	800fb8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	011b      	lsls	r3, r3, #4
 800fb7e:	697a      	ldr	r2, [r7, #20]
 800fb80:	4313      	orrs	r3, r2
 800fb82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4a1e      	ldr	r2, [pc, #120]	; (800fc08 <TIM_OC2_SetConfig+0x100>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d00f      	beq.n	800fbb4 <TIM_OC2_SetConfig+0xac>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4a1d      	ldr	r2, [pc, #116]	; (800fc0c <TIM_OC2_SetConfig+0x104>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d00b      	beq.n	800fbb4 <TIM_OC2_SetConfig+0xac>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4a1c      	ldr	r2, [pc, #112]	; (800fc10 <TIM_OC2_SetConfig+0x108>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d007      	beq.n	800fbb4 <TIM_OC2_SetConfig+0xac>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	4a1b      	ldr	r2, [pc, #108]	; (800fc14 <TIM_OC2_SetConfig+0x10c>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d003      	beq.n	800fbb4 <TIM_OC2_SetConfig+0xac>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4a1a      	ldr	r2, [pc, #104]	; (800fc18 <TIM_OC2_SetConfig+0x110>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d113      	bne.n	800fbdc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	695b      	ldr	r3, [r3, #20]
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	693a      	ldr	r2, [r7, #16]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	699b      	ldr	r3, [r3, #24]
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	693a      	ldr	r2, [r7, #16]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	693a      	ldr	r2, [r7, #16]
 800fbe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	697a      	ldr	r2, [r7, #20]
 800fbf4:	621a      	str	r2, [r3, #32]
}
 800fbf6:	bf00      	nop
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	feff8fff 	.word	0xfeff8fff
 800fc08:	40010000 	.word	0x40010000
 800fc0c:	40010400 	.word	0x40010400
 800fc10:	40014000 	.word	0x40014000
 800fc14:	40014400 	.word	0x40014400
 800fc18:	40014800 	.word	0x40014800

0800fc1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b087      	sub	sp, #28
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6a1b      	ldr	r3, [r3, #32]
 800fc2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a1b      	ldr	r3, [r3, #32]
 800fc30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	69db      	ldr	r3, [r3, #28]
 800fc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	4b33      	ldr	r3, [pc, #204]	; (800fd14 <TIM_OC3_SetConfig+0xf8>)
 800fc48:	4013      	ands	r3, r2
 800fc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f023 0303 	bic.w	r3, r3, #3
 800fc52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	021b      	lsls	r3, r3, #8
 800fc6c:	697a      	ldr	r2, [r7, #20]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a28      	ldr	r2, [pc, #160]	; (800fd18 <TIM_OC3_SetConfig+0xfc>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d003      	beq.n	800fc82 <TIM_OC3_SetConfig+0x66>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a27      	ldr	r2, [pc, #156]	; (800fd1c <TIM_OC3_SetConfig+0x100>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d10d      	bne.n	800fc9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	021b      	lsls	r3, r3, #8
 800fc90:	697a      	ldr	r2, [r7, #20]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a1d      	ldr	r2, [pc, #116]	; (800fd18 <TIM_OC3_SetConfig+0xfc>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d00f      	beq.n	800fcc6 <TIM_OC3_SetConfig+0xaa>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4a1c      	ldr	r2, [pc, #112]	; (800fd1c <TIM_OC3_SetConfig+0x100>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d00b      	beq.n	800fcc6 <TIM_OC3_SetConfig+0xaa>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4a1b      	ldr	r2, [pc, #108]	; (800fd20 <TIM_OC3_SetConfig+0x104>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d007      	beq.n	800fcc6 <TIM_OC3_SetConfig+0xaa>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4a1a      	ldr	r2, [pc, #104]	; (800fd24 <TIM_OC3_SetConfig+0x108>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d003      	beq.n	800fcc6 <TIM_OC3_SetConfig+0xaa>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4a19      	ldr	r2, [pc, #100]	; (800fd28 <TIM_OC3_SetConfig+0x10c>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d113      	bne.n	800fcee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	695b      	ldr	r3, [r3, #20]
 800fcda:	011b      	lsls	r3, r3, #4
 800fcdc:	693a      	ldr	r2, [r7, #16]
 800fcde:	4313      	orrs	r3, r2
 800fce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	699b      	ldr	r3, [r3, #24]
 800fce6:	011b      	lsls	r3, r3, #4
 800fce8:	693a      	ldr	r2, [r7, #16]
 800fcea:	4313      	orrs	r3, r2
 800fcec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	693a      	ldr	r2, [r7, #16]
 800fcf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	685a      	ldr	r2, [r3, #4]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	621a      	str	r2, [r3, #32]
}
 800fd08:	bf00      	nop
 800fd0a:	371c      	adds	r7, #28
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr
 800fd14:	fffeff8f 	.word	0xfffeff8f
 800fd18:	40010000 	.word	0x40010000
 800fd1c:	40010400 	.word	0x40010400
 800fd20:	40014000 	.word	0x40014000
 800fd24:	40014400 	.word	0x40014400
 800fd28:	40014800 	.word	0x40014800

0800fd2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b087      	sub	sp, #28
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6a1b      	ldr	r3, [r3, #32]
 800fd40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	69db      	ldr	r3, [r3, #28]
 800fd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	4b24      	ldr	r3, [pc, #144]	; (800fde8 <TIM_OC4_SetConfig+0xbc>)
 800fd58:	4013      	ands	r3, r2
 800fd5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	021b      	lsls	r3, r3, #8
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	689b      	ldr	r3, [r3, #8]
 800fd7c:	031b      	lsls	r3, r3, #12
 800fd7e:	693a      	ldr	r2, [r7, #16]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a19      	ldr	r2, [pc, #100]	; (800fdec <TIM_OC4_SetConfig+0xc0>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d00f      	beq.n	800fdac <TIM_OC4_SetConfig+0x80>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a18      	ldr	r2, [pc, #96]	; (800fdf0 <TIM_OC4_SetConfig+0xc4>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d00b      	beq.n	800fdac <TIM_OC4_SetConfig+0x80>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a17      	ldr	r2, [pc, #92]	; (800fdf4 <TIM_OC4_SetConfig+0xc8>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d007      	beq.n	800fdac <TIM_OC4_SetConfig+0x80>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	4a16      	ldr	r2, [pc, #88]	; (800fdf8 <TIM_OC4_SetConfig+0xcc>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d003      	beq.n	800fdac <TIM_OC4_SetConfig+0x80>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4a15      	ldr	r2, [pc, #84]	; (800fdfc <TIM_OC4_SetConfig+0xd0>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d109      	bne.n	800fdc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fdb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	695b      	ldr	r3, [r3, #20]
 800fdb8:	019b      	lsls	r3, r3, #6
 800fdba:	697a      	ldr	r2, [r7, #20]
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	697a      	ldr	r2, [r7, #20]
 800fdc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	685a      	ldr	r2, [r3, #4]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	693a      	ldr	r2, [r7, #16]
 800fdd8:	621a      	str	r2, [r3, #32]
}
 800fdda:	bf00      	nop
 800fddc:	371c      	adds	r7, #28
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	feff8fff 	.word	0xfeff8fff
 800fdec:	40010000 	.word	0x40010000
 800fdf0:	40010400 	.word	0x40010400
 800fdf4:	40014000 	.word	0x40014000
 800fdf8:	40014400 	.word	0x40014400
 800fdfc:	40014800 	.word	0x40014800

0800fe00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b087      	sub	sp, #28
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6a1b      	ldr	r3, [r3, #32]
 800fe0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6a1b      	ldr	r3, [r3, #32]
 800fe14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fe28:	68fa      	ldr	r2, [r7, #12]
 800fe2a:	4b21      	ldr	r3, [pc, #132]	; (800feb0 <TIM_OC5_SetConfig+0xb0>)
 800fe2c:	4013      	ands	r3, r2
 800fe2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	4313      	orrs	r3, r2
 800fe38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fe40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	041b      	lsls	r3, r3, #16
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4a18      	ldr	r2, [pc, #96]	; (800feb4 <TIM_OC5_SetConfig+0xb4>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d00f      	beq.n	800fe76 <TIM_OC5_SetConfig+0x76>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4a17      	ldr	r2, [pc, #92]	; (800feb8 <TIM_OC5_SetConfig+0xb8>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d00b      	beq.n	800fe76 <TIM_OC5_SetConfig+0x76>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4a16      	ldr	r2, [pc, #88]	; (800febc <TIM_OC5_SetConfig+0xbc>)
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d007      	beq.n	800fe76 <TIM_OC5_SetConfig+0x76>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4a15      	ldr	r2, [pc, #84]	; (800fec0 <TIM_OC5_SetConfig+0xc0>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d003      	beq.n	800fe76 <TIM_OC5_SetConfig+0x76>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4a14      	ldr	r2, [pc, #80]	; (800fec4 <TIM_OC5_SetConfig+0xc4>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d109      	bne.n	800fe8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	695b      	ldr	r3, [r3, #20]
 800fe82:	021b      	lsls	r3, r3, #8
 800fe84:	697a      	ldr	r2, [r7, #20]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	697a      	ldr	r2, [r7, #20]
 800fe8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	68fa      	ldr	r2, [r7, #12]
 800fe94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	693a      	ldr	r2, [r7, #16]
 800fea2:	621a      	str	r2, [r3, #32]
}
 800fea4:	bf00      	nop
 800fea6:	371c      	adds	r7, #28
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr
 800feb0:	fffeff8f 	.word	0xfffeff8f
 800feb4:	40010000 	.word	0x40010000
 800feb8:	40010400 	.word	0x40010400
 800febc:	40014000 	.word	0x40014000
 800fec0:	40014400 	.word	0x40014400
 800fec4:	40014800 	.word	0x40014800

0800fec8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fec8:	b480      	push	{r7}
 800feca:	b087      	sub	sp, #28
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6a1b      	ldr	r3, [r3, #32]
 800fed6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6a1b      	ldr	r3, [r3, #32]
 800fedc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fef0:	68fa      	ldr	r2, [r7, #12]
 800fef2:	4b22      	ldr	r3, [pc, #136]	; (800ff7c <TIM_OC6_SetConfig+0xb4>)
 800fef4:	4013      	ands	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	021b      	lsls	r3, r3, #8
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ff0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	051b      	lsls	r3, r3, #20
 800ff12:	693a      	ldr	r2, [r7, #16]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4a19      	ldr	r2, [pc, #100]	; (800ff80 <TIM_OC6_SetConfig+0xb8>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d00f      	beq.n	800ff40 <TIM_OC6_SetConfig+0x78>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4a18      	ldr	r2, [pc, #96]	; (800ff84 <TIM_OC6_SetConfig+0xbc>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d00b      	beq.n	800ff40 <TIM_OC6_SetConfig+0x78>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4a17      	ldr	r2, [pc, #92]	; (800ff88 <TIM_OC6_SetConfig+0xc0>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d007      	beq.n	800ff40 <TIM_OC6_SetConfig+0x78>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4a16      	ldr	r2, [pc, #88]	; (800ff8c <TIM_OC6_SetConfig+0xc4>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d003      	beq.n	800ff40 <TIM_OC6_SetConfig+0x78>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a15      	ldr	r2, [pc, #84]	; (800ff90 <TIM_OC6_SetConfig+0xc8>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d109      	bne.n	800ff54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ff46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	695b      	ldr	r3, [r3, #20]
 800ff4c:	029b      	lsls	r3, r3, #10
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	4313      	orrs	r3, r2
 800ff52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	697a      	ldr	r2, [r7, #20]
 800ff58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	685a      	ldr	r2, [r3, #4]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	693a      	ldr	r2, [r7, #16]
 800ff6c:	621a      	str	r2, [r3, #32]
}
 800ff6e:	bf00      	nop
 800ff70:	371c      	adds	r7, #28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	feff8fff 	.word	0xfeff8fff
 800ff80:	40010000 	.word	0x40010000
 800ff84:	40010400 	.word	0x40010400
 800ff88:	40014000 	.word	0x40014000
 800ff8c:	40014400 	.word	0x40014400
 800ff90:	40014800 	.word	0x40014800

0800ff94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6a1b      	ldr	r3, [r3, #32]
 800ffa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6a1b      	ldr	r3, [r3, #32]
 800ffaa:	f023 0201 	bic.w	r2, r3, #1
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	699b      	ldr	r3, [r3, #24]
 800ffb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ffbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	011b      	lsls	r3, r3, #4
 800ffc4:	693a      	ldr	r2, [r7, #16]
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	f023 030a 	bic.w	r3, r3, #10
 800ffd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	693a      	ldr	r2, [r7, #16]
 800ffde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	697a      	ldr	r2, [r7, #20]
 800ffe4:	621a      	str	r2, [r3, #32]
}
 800ffe6:	bf00      	nop
 800ffe8:	371c      	adds	r7, #28
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fff2:	b480      	push	{r7}
 800fff4:	b087      	sub	sp, #28
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	60f8      	str	r0, [r7, #12]
 800fffa:	60b9      	str	r1, [r7, #8]
 800fffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6a1b      	ldr	r3, [r3, #32]
 8010002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	6a1b      	ldr	r3, [r3, #32]
 8010008:	f023 0210 	bic.w	r2, r3, #16
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	699b      	ldr	r3, [r3, #24]
 8010014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801001c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	031b      	lsls	r3, r3, #12
 8010022:	693a      	ldr	r2, [r7, #16]
 8010024:	4313      	orrs	r3, r2
 8010026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801002e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	011b      	lsls	r3, r3, #4
 8010034:	697a      	ldr	r2, [r7, #20]
 8010036:	4313      	orrs	r3, r2
 8010038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	621a      	str	r2, [r3, #32]
}
 8010046:	bf00      	nop
 8010048:	371c      	adds	r7, #28
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
	...

08010054 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	4b09      	ldr	r3, [pc, #36]	; (801008c <TIM_ITRx_SetConfig+0x38>)
 8010068:	4013      	ands	r3, r2
 801006a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801006c:	683a      	ldr	r2, [r7, #0]
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	4313      	orrs	r3, r2
 8010072:	f043 0307 	orr.w	r3, r3, #7
 8010076:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	609a      	str	r2, [r3, #8]
}
 801007e:	bf00      	nop
 8010080:	3714      	adds	r7, #20
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	ffcfff8f 	.word	0xffcfff8f

08010090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010090:	b480      	push	{r7}
 8010092:	b087      	sub	sp, #28
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	607a      	str	r2, [r7, #4]
 801009c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80100aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	021a      	lsls	r2, r3, #8
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	431a      	orrs	r2, r3
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	697a      	ldr	r2, [r7, #20]
 80100c2:	609a      	str	r2, [r3, #8]
}
 80100c4:	bf00      	nop
 80100c6:	371c      	adds	r7, #28
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b087      	sub	sp, #28
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	f003 031f 	and.w	r3, r3, #31
 80100e2:	2201      	movs	r2, #1
 80100e4:	fa02 f303 	lsl.w	r3, r2, r3
 80100e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6a1a      	ldr	r2, [r3, #32]
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	43db      	mvns	r3, r3
 80100f2:	401a      	ands	r2, r3
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	6a1a      	ldr	r2, [r3, #32]
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	f003 031f 	and.w	r3, r3, #31
 8010102:	6879      	ldr	r1, [r7, #4]
 8010104:	fa01 f303 	lsl.w	r3, r1, r3
 8010108:	431a      	orrs	r2, r3
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	621a      	str	r2, [r3, #32]
}
 801010e:	bf00      	nop
 8010110:	371c      	adds	r7, #28
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
	...

0801011c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801012c:	2b01      	cmp	r3, #1
 801012e:	d101      	bne.n	8010134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010130:	2302      	movs	r3, #2
 8010132:	e06d      	b.n	8010210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2201      	movs	r2, #1
 8010138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2202      	movs	r2, #2
 8010140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	689b      	ldr	r3, [r3, #8]
 8010152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a30      	ldr	r2, [pc, #192]	; (801021c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d004      	beq.n	8010168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a2f      	ldr	r2, [pc, #188]	; (8010220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d108      	bne.n	801017a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801016e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	4313      	orrs	r3, r2
 8010178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	4313      	orrs	r3, r2
 801018a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	68fa      	ldr	r2, [r7, #12]
 8010192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a20      	ldr	r2, [pc, #128]	; (801021c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d022      	beq.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101a6:	d01d      	beq.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4a1d      	ldr	r2, [pc, #116]	; (8010224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d018      	beq.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	4a1c      	ldr	r2, [pc, #112]	; (8010228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d013      	beq.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a1a      	ldr	r2, [pc, #104]	; (801022c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d00e      	beq.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a15      	ldr	r2, [pc, #84]	; (8010220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d009      	beq.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a16      	ldr	r2, [pc, #88]	; (8010230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d004      	beq.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a15      	ldr	r2, [pc, #84]	; (8010234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d10c      	bne.n	80101fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2201      	movs	r2, #1
 8010202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2200      	movs	r2, #0
 801020a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr
 801021c:	40010000 	.word	0x40010000
 8010220:	40010400 	.word	0x40010400
 8010224:	40000400 	.word	0x40000400
 8010228:	40000800 	.word	0x40000800
 801022c:	40000c00 	.word	0x40000c00
 8010230:	40001800 	.word	0x40001800
 8010234:	40014000 	.word	0x40014000

08010238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010238:	b480      	push	{r7}
 801023a:	b085      	sub	sp, #20
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010242:	2300      	movs	r3, #0
 8010244:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801024c:	2b01      	cmp	r3, #1
 801024e:	d101      	bne.n	8010254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010250:	2302      	movs	r3, #2
 8010252:	e065      	b.n	8010320 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	4313      	orrs	r3, r2
 8010268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	4313      	orrs	r3, r2
 8010276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	4313      	orrs	r3, r2
 8010284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4313      	orrs	r3, r2
 8010292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	4313      	orrs	r3, r2
 80102a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	4313      	orrs	r3, r2
 80102ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ba:	4313      	orrs	r3, r2
 80102bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	699b      	ldr	r3, [r3, #24]
 80102c8:	041b      	lsls	r3, r3, #16
 80102ca:	4313      	orrs	r3, r2
 80102cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a16      	ldr	r2, [pc, #88]	; (801032c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d004      	beq.n	80102e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a14      	ldr	r2, [pc, #80]	; (8010330 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d115      	bne.n	801030e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ec:	051b      	lsls	r3, r3, #20
 80102ee:	4313      	orrs	r3, r2
 80102f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	69db      	ldr	r3, [r3, #28]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	6a1b      	ldr	r3, [r3, #32]
 801030a:	4313      	orrs	r3, r2
 801030c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	68fa      	ldr	r2, [r7, #12]
 8010314:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3714      	adds	r7, #20
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr
 801032c:	40010000 	.word	0x40010000
 8010330:	40010400 	.word	0x40010400

08010334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801033c:	bf00      	nop
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010350:	bf00      	nop
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr

0801035c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010364:	bf00      	nop
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801037e:	2301      	movs	r3, #1
 8010380:	e042      	b.n	8010408 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010388:	2b00      	cmp	r3, #0
 801038a:	d106      	bne.n	801039a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7f3 faa9 	bl	80038ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2224      	movs	r2, #36	; 0x24
 801039e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f022 0201 	bic.w	r2, r2, #1
 80103b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d002      	beq.n	80103c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f001 fbc2 	bl	8011b44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 fe57 	bl	8011074 <UART_SetConfig>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d101      	bne.n	80103d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80103cc:	2301      	movs	r3, #1
 80103ce:	e01b      	b.n	8010408 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80103de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	689a      	ldr	r2, [r3, #8]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80103ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f042 0201 	orr.w	r2, r2, #1
 80103fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f001 fc41 	bl	8011c88 <UART_CheckIdleState>
 8010406:	4603      	mov	r3, r0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b08a      	sub	sp, #40	; 0x28
 8010414:	af02      	add	r7, sp, #8
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	603b      	str	r3, [r7, #0]
 801041c:	4613      	mov	r3, r2
 801041e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010426:	2b20      	cmp	r3, #32
 8010428:	d17b      	bne.n	8010522 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <HAL_UART_Transmit+0x26>
 8010430:	88fb      	ldrh	r3, [r7, #6]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010436:	2301      	movs	r3, #1
 8010438:	e074      	b.n	8010524 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2200      	movs	r2, #0
 801043e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2221      	movs	r2, #33	; 0x21
 8010446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801044a:	f7f3 fdcd 	bl	8003fe8 <HAL_GetTick>
 801044e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	88fa      	ldrh	r2, [r7, #6]
 8010454:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	88fa      	ldrh	r2, [r7, #6]
 801045c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	689b      	ldr	r3, [r3, #8]
 8010464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010468:	d108      	bne.n	801047c <HAL_UART_Transmit+0x6c>
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	691b      	ldr	r3, [r3, #16]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d104      	bne.n	801047c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010472:	2300      	movs	r3, #0
 8010474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	61bb      	str	r3, [r7, #24]
 801047a:	e003      	b.n	8010484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010480:	2300      	movs	r3, #0
 8010482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010484:	e030      	b.n	80104e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	9300      	str	r3, [sp, #0]
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	2200      	movs	r2, #0
 801048e:	2180      	movs	r1, #128	; 0x80
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f001 fca3 	bl	8011ddc <UART_WaitOnFlagUntilTimeout>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d005      	beq.n	80104a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2220      	movs	r2, #32
 80104a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80104a4:	2303      	movs	r3, #3
 80104a6:	e03d      	b.n	8010524 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10b      	bne.n	80104c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	881b      	ldrh	r3, [r3, #0]
 80104b2:	461a      	mov	r2, r3
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80104bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	3302      	adds	r3, #2
 80104c2:	61bb      	str	r3, [r7, #24]
 80104c4:	e007      	b.n	80104d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	781a      	ldrb	r2, [r3, #0]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	3301      	adds	r3, #1
 80104d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80104dc:	b29b      	uxth	r3, r3
 80104de:	3b01      	subs	r3, #1
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1c8      	bne.n	8010486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	2200      	movs	r2, #0
 80104fc:	2140      	movs	r1, #64	; 0x40
 80104fe:	68f8      	ldr	r0, [r7, #12]
 8010500:	f001 fc6c 	bl	8011ddc <UART_WaitOnFlagUntilTimeout>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d005      	beq.n	8010516 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2220      	movs	r2, #32
 801050e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010512:	2303      	movs	r3, #3
 8010514:	e006      	b.n	8010524 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2220      	movs	r2, #32
 801051a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801051e:	2300      	movs	r3, #0
 8010520:	e000      	b.n	8010524 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010522:	2302      	movs	r3, #2
  }
}
 8010524:	4618      	mov	r0, r3
 8010526:	3720      	adds	r7, #32
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b08a      	sub	sp, #40	; 0x28
 8010530:	af02      	add	r7, sp, #8
 8010532:	60f8      	str	r0, [r7, #12]
 8010534:	60b9      	str	r1, [r7, #8]
 8010536:	603b      	str	r3, [r7, #0]
 8010538:	4613      	mov	r3, r2
 801053a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010542:	2b20      	cmp	r3, #32
 8010544:	f040 80b5 	bne.w	80106b2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <HAL_UART_Receive+0x28>
 801054e:	88fb      	ldrh	r3, [r7, #6]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d101      	bne.n	8010558 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010554:	2301      	movs	r3, #1
 8010556:	e0ad      	b.n	80106b4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2200      	movs	r2, #0
 801055c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2222      	movs	r2, #34	; 0x22
 8010564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2200      	movs	r2, #0
 801056c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801056e:	f7f3 fd3b 	bl	8003fe8 <HAL_GetTick>
 8010572:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	88fa      	ldrh	r2, [r7, #6]
 8010578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	88fa      	ldrh	r2, [r7, #6]
 8010580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	689b      	ldr	r3, [r3, #8]
 8010588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801058c:	d10e      	bne.n	80105ac <HAL_UART_Receive+0x80>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d105      	bne.n	80105a2 <HAL_UART_Receive+0x76>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f240 12ff 	movw	r2, #511	; 0x1ff
 801059c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80105a0:	e02d      	b.n	80105fe <HAL_UART_Receive+0xd2>
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	22ff      	movs	r2, #255	; 0xff
 80105a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80105aa:	e028      	b.n	80105fe <HAL_UART_Receive+0xd2>
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d10d      	bne.n	80105d0 <HAL_UART_Receive+0xa4>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	691b      	ldr	r3, [r3, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d104      	bne.n	80105c6 <HAL_UART_Receive+0x9a>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	22ff      	movs	r2, #255	; 0xff
 80105c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80105c4:	e01b      	b.n	80105fe <HAL_UART_Receive+0xd2>
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	227f      	movs	r2, #127	; 0x7f
 80105ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80105ce:	e016      	b.n	80105fe <HAL_UART_Receive+0xd2>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105d8:	d10d      	bne.n	80105f6 <HAL_UART_Receive+0xca>
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	691b      	ldr	r3, [r3, #16]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d104      	bne.n	80105ec <HAL_UART_Receive+0xc0>
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	227f      	movs	r2, #127	; 0x7f
 80105e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80105ea:	e008      	b.n	80105fe <HAL_UART_Receive+0xd2>
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	223f      	movs	r2, #63	; 0x3f
 80105f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80105f4:	e003      	b.n	80105fe <HAL_UART_Receive+0xd2>
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2200      	movs	r2, #0
 80105fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010604:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	689b      	ldr	r3, [r3, #8]
 801060a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801060e:	d108      	bne.n	8010622 <HAL_UART_Receive+0xf6>
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d104      	bne.n	8010622 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010618:	2300      	movs	r3, #0
 801061a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	61bb      	str	r3, [r7, #24]
 8010620:	e003      	b.n	801062a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010626:	2300      	movs	r3, #0
 8010628:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801062a:	e036      	b.n	801069a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	2200      	movs	r2, #0
 8010634:	2120      	movs	r1, #32
 8010636:	68f8      	ldr	r0, [r7, #12]
 8010638:	f001 fbd0 	bl	8011ddc <UART_WaitOnFlagUntilTimeout>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d005      	beq.n	801064e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2220      	movs	r2, #32
 8010646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801064a:	2303      	movs	r3, #3
 801064c:	e032      	b.n	80106b4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10c      	bne.n	801066e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801065a:	b29a      	uxth	r2, r3
 801065c:	8a7b      	ldrh	r3, [r7, #18]
 801065e:	4013      	ands	r3, r2
 8010660:	b29a      	uxth	r2, r3
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	3302      	adds	r3, #2
 801066a:	61bb      	str	r3, [r7, #24]
 801066c:	e00c      	b.n	8010688 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010674:	b2da      	uxtb	r2, r3
 8010676:	8a7b      	ldrh	r3, [r7, #18]
 8010678:	b2db      	uxtb	r3, r3
 801067a:	4013      	ands	r3, r2
 801067c:	b2da      	uxtb	r2, r3
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010682:	69fb      	ldr	r3, [r7, #28]
 8010684:	3301      	adds	r3, #1
 8010686:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801068e:	b29b      	uxth	r3, r3
 8010690:	3b01      	subs	r3, #1
 8010692:	b29a      	uxth	r2, r3
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d1c2      	bne.n	801062c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2220      	movs	r2, #32
 80106aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	e000      	b.n	80106b4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80106b2:	2302      	movs	r3, #2
  }
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3720      	adds	r7, #32
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b08a      	sub	sp, #40	; 0x28
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	4613      	mov	r3, r2
 80106c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106d0:	2b20      	cmp	r3, #32
 80106d2:	d137      	bne.n	8010744 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d002      	beq.n	80106e0 <HAL_UART_Receive_IT+0x24>
 80106da:	88fb      	ldrh	r3, [r7, #6]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d101      	bne.n	80106e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80106e0:	2301      	movs	r3, #1
 80106e2:	e030      	b.n	8010746 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2200      	movs	r2, #0
 80106e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4a18      	ldr	r2, [pc, #96]	; (8010750 <HAL_UART_Receive_IT+0x94>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d01f      	beq.n	8010734 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d018      	beq.n	8010734 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	e853 3f00 	ldrex	r3, [r3]
 801070e:	613b      	str	r3, [r7, #16]
   return(result);
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010716:	627b      	str	r3, [r7, #36]	; 0x24
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	461a      	mov	r2, r3
 801071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010720:	623b      	str	r3, [r7, #32]
 8010722:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010724:	69f9      	ldr	r1, [r7, #28]
 8010726:	6a3a      	ldr	r2, [r7, #32]
 8010728:	e841 2300 	strex	r3, r2, [r1]
 801072c:	61bb      	str	r3, [r7, #24]
   return(result);
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d1e6      	bne.n	8010702 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010734:	88fb      	ldrh	r3, [r7, #6]
 8010736:	461a      	mov	r2, r3
 8010738:	68b9      	ldr	r1, [r7, #8]
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f001 fbbc 	bl	8011eb8 <UART_Start_Receive_IT>
 8010740:	4603      	mov	r3, r0
 8010742:	e000      	b.n	8010746 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010744:	2302      	movs	r3, #2
  }
}
 8010746:	4618      	mov	r0, r3
 8010748:	3728      	adds	r7, #40	; 0x28
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	58000c00 	.word	0x58000c00

08010754 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b09a      	sub	sp, #104	; 0x68
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010764:	e853 3f00 	ldrex	r3, [r3]
 8010768:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801076a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801076c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010770:	667b      	str	r3, [r7, #100]	; 0x64
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	461a      	mov	r2, r3
 8010778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801077a:	657b      	str	r3, [r7, #84]	; 0x54
 801077c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801077e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010780:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010782:	e841 2300 	strex	r3, r2, [r1]
 8010786:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078a:	2b00      	cmp	r3, #0
 801078c:	d1e6      	bne.n	801075c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	3308      	adds	r3, #8
 8010794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010798:	e853 3f00 	ldrex	r3, [r3]
 801079c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801079e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a0:	4b46      	ldr	r3, [pc, #280]	; (80108bc <HAL_UART_AbortReceive+0x168>)
 80107a2:	4013      	ands	r3, r2
 80107a4:	663b      	str	r3, [r7, #96]	; 0x60
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	3308      	adds	r3, #8
 80107ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107ae:	643a      	str	r2, [r7, #64]	; 0x40
 80107b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107b6:	e841 2300 	strex	r3, r2, [r1]
 80107ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1e5      	bne.n	801078e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d118      	bne.n	80107fc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d0:	6a3b      	ldr	r3, [r7, #32]
 80107d2:	e853 3f00 	ldrex	r3, [r3]
 80107d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	f023 0310 	bic.w	r3, r3, #16
 80107de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	461a      	mov	r2, r3
 80107e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107f0:	e841 2300 	strex	r3, r2, [r1]
 80107f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1e6      	bne.n	80107ca <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	689b      	ldr	r3, [r3, #8]
 8010802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010806:	2b40      	cmp	r3, #64	; 0x40
 8010808:	d13b      	bne.n	8010882 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	3308      	adds	r3, #8
 8010810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	e853 3f00 	ldrex	r3, [r3]
 8010818:	60bb      	str	r3, [r7, #8]
   return(result);
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010820:	65bb      	str	r3, [r7, #88]	; 0x58
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3308      	adds	r3, #8
 8010828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801082a:	61ba      	str	r2, [r7, #24]
 801082c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801082e:	6979      	ldr	r1, [r7, #20]
 8010830:	69ba      	ldr	r2, [r7, #24]
 8010832:	e841 2300 	strex	r3, r2, [r1]
 8010836:	613b      	str	r3, [r7, #16]
   return(result);
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d1e5      	bne.n	801080a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010844:	2b00      	cmp	r3, #0
 8010846:	d01c      	beq.n	8010882 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801084e:	2200      	movs	r2, #0
 8010850:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010858:	4618      	mov	r0, r3
 801085a:	f7f6 fab3 	bl	8006dc4 <HAL_DMA_Abort>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00e      	beq.n	8010882 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801086a:	4618      	mov	r0, r3
 801086c:	f7f7 ff38 	bl	80086e0 <HAL_DMA_GetError>
 8010870:	4603      	mov	r3, r0
 8010872:	2b20      	cmp	r3, #32
 8010874:	d105      	bne.n	8010882 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2210      	movs	r2, #16
 801087a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801087e:	2303      	movs	r3, #3
 8010880:	e017      	b.n	80108b2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	220f      	movs	r2, #15
 8010890:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	699a      	ldr	r2, [r3, #24]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f042 0208 	orr.w	r2, r2, #8
 80108a0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2220      	movs	r2, #32
 80108a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2200      	movs	r2, #0
 80108ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3768      	adds	r7, #104	; 0x68
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	effffffe 	.word	0xeffffffe

080108c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b0ba      	sub	sp, #232	; 0xe8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80108e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80108ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80108ee:	4013      	ands	r3, r2
 80108f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80108f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d11b      	bne.n	8010934 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80108fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010900:	f003 0320 	and.w	r3, r3, #32
 8010904:	2b00      	cmp	r3, #0
 8010906:	d015      	beq.n	8010934 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801090c:	f003 0320 	and.w	r3, r3, #32
 8010910:	2b00      	cmp	r3, #0
 8010912:	d105      	bne.n	8010920 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d009      	beq.n	8010934 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010924:	2b00      	cmp	r3, #0
 8010926:	f000 8377 	beq.w	8011018 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	4798      	blx	r3
      }
      return;
 8010932:	e371      	b.n	8011018 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 8123 	beq.w	8010b84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801093e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010942:	4b8d      	ldr	r3, [pc, #564]	; (8010b78 <HAL_UART_IRQHandler+0x2b8>)
 8010944:	4013      	ands	r3, r2
 8010946:	2b00      	cmp	r3, #0
 8010948:	d106      	bne.n	8010958 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801094a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801094e:	4b8b      	ldr	r3, [pc, #556]	; (8010b7c <HAL_UART_IRQHandler+0x2bc>)
 8010950:	4013      	ands	r3, r2
 8010952:	2b00      	cmp	r3, #0
 8010954:	f000 8116 	beq.w	8010b84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801095c:	f003 0301 	and.w	r3, r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	d011      	beq.n	8010988 <HAL_UART_IRQHandler+0xc8>
 8010964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00b      	beq.n	8010988 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2201      	movs	r2, #1
 8010976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801097e:	f043 0201 	orr.w	r2, r3, #1
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801098c:	f003 0302 	and.w	r3, r3, #2
 8010990:	2b00      	cmp	r3, #0
 8010992:	d011      	beq.n	80109b8 <HAL_UART_IRQHandler+0xf8>
 8010994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010998:	f003 0301 	and.w	r3, r3, #1
 801099c:	2b00      	cmp	r3, #0
 801099e:	d00b      	beq.n	80109b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2202      	movs	r2, #2
 80109a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109ae:	f043 0204 	orr.w	r2, r3, #4
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109bc:	f003 0304 	and.w	r3, r3, #4
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d011      	beq.n	80109e8 <HAL_UART_IRQHandler+0x128>
 80109c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109c8:	f003 0301 	and.w	r3, r3, #1
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d00b      	beq.n	80109e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2204      	movs	r2, #4
 80109d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109de:	f043 0202 	orr.w	r2, r3, #2
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80109e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109ec:	f003 0308 	and.w	r3, r3, #8
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d017      	beq.n	8010a24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80109f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109f8:	f003 0320 	and.w	r3, r3, #32
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d105      	bne.n	8010a0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010a00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010a04:	4b5c      	ldr	r3, [pc, #368]	; (8010b78 <HAL_UART_IRQHandler+0x2b8>)
 8010a06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	2208      	movs	r2, #8
 8010a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a1a:	f043 0208 	orr.w	r2, r3, #8
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d012      	beq.n	8010a56 <HAL_UART_IRQHandler+0x196>
 8010a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d00c      	beq.n	8010a56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a4c:	f043 0220 	orr.w	r2, r3, #32
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 82dd 	beq.w	801101c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a66:	f003 0320 	and.w	r3, r3, #32
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d013      	beq.n	8010a96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a72:	f003 0320 	and.w	r3, r3, #32
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d105      	bne.n	8010a86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d007      	beq.n	8010a96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d003      	beq.n	8010a96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	689b      	ldr	r3, [r3, #8]
 8010aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aaa:	2b40      	cmp	r3, #64	; 0x40
 8010aac:	d005      	beq.n	8010aba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ab2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d054      	beq.n	8010b64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f001 fb1e 	bl	80120fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aca:	2b40      	cmp	r3, #64	; 0x40
 8010acc:	d146      	bne.n	8010b5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	3308      	adds	r3, #8
 8010ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010adc:	e853 3f00 	ldrex	r3, [r3]
 8010ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	3308      	adds	r3, #8
 8010af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010afa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010b0a:	e841 2300 	strex	r3, r2, [r1]
 8010b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1d9      	bne.n	8010ace <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d017      	beq.n	8010b54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b2a:	4a15      	ldr	r2, [pc, #84]	; (8010b80 <HAL_UART_IRQHandler+0x2c0>)
 8010b2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f6 fc63 	bl	8007400 <HAL_DMA_Abort_IT>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d019      	beq.n	8010b74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010b4e:	4610      	mov	r0, r2
 8010b50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b52:	e00f      	b.n	8010b74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 fa77 	bl	8011048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b5a:	e00b      	b.n	8010b74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 fa73 	bl	8011048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b62:	e007      	b.n	8010b74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f000 fa6f 	bl	8011048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010b72:	e253      	b.n	801101c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b74:	bf00      	nop
    return;
 8010b76:	e251      	b.n	801101c <HAL_UART_IRQHandler+0x75c>
 8010b78:	10000001 	.word	0x10000001
 8010b7c:	04000120 	.word	0x04000120
 8010b80:	080121c9 	.word	0x080121c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	f040 81e7 	bne.w	8010f5c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b92:	f003 0310 	and.w	r3, r3, #16
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f000 81e0 	beq.w	8010f5c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ba0:	f003 0310 	and.w	r3, r3, #16
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	f000 81d9 	beq.w	8010f5c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2210      	movs	r2, #16
 8010bb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bbc:	2b40      	cmp	r3, #64	; 0x40
 8010bbe:	f040 8151 	bne.w	8010e64 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a96      	ldr	r2, [pc, #600]	; (8010e24 <HAL_UART_IRQHandler+0x564>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d068      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4a93      	ldr	r2, [pc, #588]	; (8010e28 <HAL_UART_IRQHandler+0x568>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d061      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4a91      	ldr	r2, [pc, #580]	; (8010e2c <HAL_UART_IRQHandler+0x56c>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d05a      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4a8e      	ldr	r2, [pc, #568]	; (8010e30 <HAL_UART_IRQHandler+0x570>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d053      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	4a8c      	ldr	r2, [pc, #560]	; (8010e34 <HAL_UART_IRQHandler+0x574>)
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d04c      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4a89      	ldr	r2, [pc, #548]	; (8010e38 <HAL_UART_IRQHandler+0x578>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d045      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	4a87      	ldr	r2, [pc, #540]	; (8010e3c <HAL_UART_IRQHandler+0x57c>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d03e      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a84      	ldr	r2, [pc, #528]	; (8010e40 <HAL_UART_IRQHandler+0x580>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d037      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4a82      	ldr	r2, [pc, #520]	; (8010e44 <HAL_UART_IRQHandler+0x584>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d030      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4a7f      	ldr	r2, [pc, #508]	; (8010e48 <HAL_UART_IRQHandler+0x588>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d029      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	4a7d      	ldr	r2, [pc, #500]	; (8010e4c <HAL_UART_IRQHandler+0x58c>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d022      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4a7a      	ldr	r2, [pc, #488]	; (8010e50 <HAL_UART_IRQHandler+0x590>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d01b      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	4a78      	ldr	r2, [pc, #480]	; (8010e54 <HAL_UART_IRQHandler+0x594>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d014      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4a75      	ldr	r2, [pc, #468]	; (8010e58 <HAL_UART_IRQHandler+0x598>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d00d      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4a73      	ldr	r2, [pc, #460]	; (8010e5c <HAL_UART_IRQHandler+0x59c>)
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d006      	beq.n	8010ca2 <HAL_UART_IRQHandler+0x3e2>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a70      	ldr	r2, [pc, #448]	; (8010e60 <HAL_UART_IRQHandler+0x5a0>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d106      	bne.n	8010cb0 <HAL_UART_IRQHandler+0x3f0>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	e005      	b.n	8010cbc <HAL_UART_IRQHandler+0x3fc>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010cc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 81ab 	beq.w	8011020 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	f080 81a3 	bcs.w	8011020 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cea:	69db      	ldr	r3, [r3, #28]
 8010cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cf0:	f000 8087 	beq.w	8010e02 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d00:	e853 3f00 	ldrex	r3, [r3]
 8010d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	461a      	mov	r2, r3
 8010d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010d22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010d2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010d2e:	e841 2300 	strex	r3, r2, [r1]
 8010d32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d1da      	bne.n	8010cf4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	3308      	adds	r3, #8
 8010d44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d48:	e853 3f00 	ldrex	r3, [r3]
 8010d4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d50:	f023 0301 	bic.w	r3, r3, #1
 8010d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	3308      	adds	r3, #8
 8010d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010d62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010d66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010d6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d6e:	e841 2300 	strex	r3, r2, [r1]
 8010d72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d1e1      	bne.n	8010d3e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	3308      	adds	r3, #8
 8010d80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d84:	e853 3f00 	ldrex	r3, [r3]
 8010d88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	3308      	adds	r3, #8
 8010d9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010d9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010da0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010da4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010da6:	e841 2300 	strex	r3, r2, [r1]
 8010daa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1e3      	bne.n	8010d7a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2220      	movs	r2, #32
 8010db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dc8:	e853 3f00 	ldrex	r3, [r3]
 8010dcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dd0:	f023 0310 	bic.w	r3, r3, #16
 8010dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	461a      	mov	r2, r3
 8010dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010de2:	65bb      	str	r3, [r7, #88]	; 0x58
 8010de4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010dea:	e841 2300 	strex	r3, r2, [r1]
 8010dee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1e4      	bne.n	8010dc0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7f5 ffe1 	bl	8006dc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2202      	movs	r2, #2
 8010e06:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 f91d 	bl	801105c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e22:	e0fd      	b.n	8011020 <HAL_UART_IRQHandler+0x760>
 8010e24:	40020010 	.word	0x40020010
 8010e28:	40020028 	.word	0x40020028
 8010e2c:	40020040 	.word	0x40020040
 8010e30:	40020058 	.word	0x40020058
 8010e34:	40020070 	.word	0x40020070
 8010e38:	40020088 	.word	0x40020088
 8010e3c:	400200a0 	.word	0x400200a0
 8010e40:	400200b8 	.word	0x400200b8
 8010e44:	40020410 	.word	0x40020410
 8010e48:	40020428 	.word	0x40020428
 8010e4c:	40020440 	.word	0x40020440
 8010e50:	40020458 	.word	0x40020458
 8010e54:	40020470 	.word	0x40020470
 8010e58:	40020488 	.word	0x40020488
 8010e5c:	400204a0 	.word	0x400204a0
 8010e60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 80cf 	beq.w	8011024 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 80ca 	beq.w	8011024 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e98:	e853 3f00 	ldrex	r3, [r3]
 8010e9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	461a      	mov	r2, r3
 8010eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8010eb4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eba:	e841 2300 	strex	r3, r2, [r1]
 8010ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d1e4      	bne.n	8010e90 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	3308      	adds	r3, #8
 8010ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed0:	e853 3f00 	ldrex	r3, [r3]
 8010ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8010ed6:	6a3a      	ldr	r2, [r7, #32]
 8010ed8:	4b55      	ldr	r3, [pc, #340]	; (8011030 <HAL_UART_IRQHandler+0x770>)
 8010eda:	4013      	ands	r3, r2
 8010edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	3308      	adds	r3, #8
 8010ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010eea:	633a      	str	r2, [r7, #48]	; 0x30
 8010eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ef2:	e841 2300 	strex	r3, r2, [r1]
 8010ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1e3      	bne.n	8010ec6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2220      	movs	r2, #32
 8010f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	e853 3f00 	ldrex	r3, [r3]
 8010f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f023 0310 	bic.w	r3, r3, #16
 8010f26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010f34:	61fb      	str	r3, [r7, #28]
 8010f36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f38:	69b9      	ldr	r1, [r7, #24]
 8010f3a:	69fa      	ldr	r2, [r7, #28]
 8010f3c:	e841 2300 	strex	r3, r2, [r1]
 8010f40:	617b      	str	r3, [r7, #20]
   return(result);
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1e4      	bne.n	8010f12 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2202      	movs	r2, #2
 8010f4c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f52:	4619      	mov	r1, r3
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f881 	bl	801105c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010f5a:	e063      	b.n	8011024 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00e      	beq.n	8010f86 <HAL_UART_IRQHandler+0x6c6>
 8010f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d008      	beq.n	8010f86 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f001 fe80 	bl	8012c84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f84:	e051      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d014      	beq.n	8010fbc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d105      	bne.n	8010faa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d008      	beq.n	8010fbc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d03a      	beq.n	8011028 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	4798      	blx	r3
    }
    return;
 8010fba:	e035      	b.n	8011028 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d009      	beq.n	8010fdc <HAL_UART_IRQHandler+0x71c>
 8010fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d003      	beq.n	8010fdc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f001 f90d 	bl	80121f4 <UART_EndTransmit_IT>
    return;
 8010fda:	e026      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d009      	beq.n	8010ffc <HAL_UART_IRQHandler+0x73c>
 8010fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d003      	beq.n	8010ffc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f001 fe59 	bl	8012cac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ffa:	e016      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011004:	2b00      	cmp	r3, #0
 8011006:	d010      	beq.n	801102a <HAL_UART_IRQHandler+0x76a>
 8011008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801100c:	2b00      	cmp	r3, #0
 801100e:	da0c      	bge.n	801102a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f001 fe41 	bl	8012c98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011016:	e008      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
      return;
 8011018:	bf00      	nop
 801101a:	e006      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
    return;
 801101c:	bf00      	nop
 801101e:	e004      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
      return;
 8011020:	bf00      	nop
 8011022:	e002      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
      return;
 8011024:	bf00      	nop
 8011026:	e000      	b.n	801102a <HAL_UART_IRQHandler+0x76a>
    return;
 8011028:	bf00      	nop
  }
}
 801102a:	37e8      	adds	r7, #232	; 0xe8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	effffffe 	.word	0xeffffffe

08011034 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801103c:	bf00      	nop
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011050:	bf00      	nop
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	460b      	mov	r3, r1
 8011066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011068:	bf00      	nop
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011078:	b092      	sub	sp, #72	; 0x48
 801107a:	af00      	add	r7, sp, #0
 801107c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801107e:	2300      	movs	r3, #0
 8011080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	689a      	ldr	r2, [r3, #8]
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	431a      	orrs	r2, r3
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	695b      	ldr	r3, [r3, #20]
 8011092:	431a      	orrs	r2, r3
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	69db      	ldr	r3, [r3, #28]
 8011098:	4313      	orrs	r3, r2
 801109a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	4bbe      	ldr	r3, [pc, #760]	; (801139c <UART_SetConfig+0x328>)
 80110a4:	4013      	ands	r3, r2
 80110a6:	697a      	ldr	r2, [r7, #20]
 80110a8:	6812      	ldr	r2, [r2, #0]
 80110aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110ac:	430b      	orrs	r3, r1
 80110ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	68da      	ldr	r2, [r3, #12]
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	430a      	orrs	r2, r1
 80110c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	699b      	ldr	r3, [r3, #24]
 80110ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4ab3      	ldr	r2, [pc, #716]	; (80113a0 <UART_SetConfig+0x32c>)
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d004      	beq.n	80110e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	6a1b      	ldr	r3, [r3, #32]
 80110da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110dc:	4313      	orrs	r3, r2
 80110de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	689a      	ldr	r2, [r3, #8]
 80110e6:	4baf      	ldr	r3, [pc, #700]	; (80113a4 <UART_SetConfig+0x330>)
 80110e8:	4013      	ands	r3, r2
 80110ea:	697a      	ldr	r2, [r7, #20]
 80110ec:	6812      	ldr	r2, [r2, #0]
 80110ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110f0:	430b      	orrs	r3, r1
 80110f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110fa:	f023 010f 	bic.w	r1, r3, #15
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	430a      	orrs	r2, r1
 8011108:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4aa6      	ldr	r2, [pc, #664]	; (80113a8 <UART_SetConfig+0x334>)
 8011110:	4293      	cmp	r3, r2
 8011112:	d177      	bne.n	8011204 <UART_SetConfig+0x190>
 8011114:	4ba5      	ldr	r3, [pc, #660]	; (80113ac <UART_SetConfig+0x338>)
 8011116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801111c:	2b28      	cmp	r3, #40	; 0x28
 801111e:	d86d      	bhi.n	80111fc <UART_SetConfig+0x188>
 8011120:	a201      	add	r2, pc, #4	; (adr r2, 8011128 <UART_SetConfig+0xb4>)
 8011122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011126:	bf00      	nop
 8011128:	080111cd 	.word	0x080111cd
 801112c:	080111fd 	.word	0x080111fd
 8011130:	080111fd 	.word	0x080111fd
 8011134:	080111fd 	.word	0x080111fd
 8011138:	080111fd 	.word	0x080111fd
 801113c:	080111fd 	.word	0x080111fd
 8011140:	080111fd 	.word	0x080111fd
 8011144:	080111fd 	.word	0x080111fd
 8011148:	080111d5 	.word	0x080111d5
 801114c:	080111fd 	.word	0x080111fd
 8011150:	080111fd 	.word	0x080111fd
 8011154:	080111fd 	.word	0x080111fd
 8011158:	080111fd 	.word	0x080111fd
 801115c:	080111fd 	.word	0x080111fd
 8011160:	080111fd 	.word	0x080111fd
 8011164:	080111fd 	.word	0x080111fd
 8011168:	080111dd 	.word	0x080111dd
 801116c:	080111fd 	.word	0x080111fd
 8011170:	080111fd 	.word	0x080111fd
 8011174:	080111fd 	.word	0x080111fd
 8011178:	080111fd 	.word	0x080111fd
 801117c:	080111fd 	.word	0x080111fd
 8011180:	080111fd 	.word	0x080111fd
 8011184:	080111fd 	.word	0x080111fd
 8011188:	080111e5 	.word	0x080111e5
 801118c:	080111fd 	.word	0x080111fd
 8011190:	080111fd 	.word	0x080111fd
 8011194:	080111fd 	.word	0x080111fd
 8011198:	080111fd 	.word	0x080111fd
 801119c:	080111fd 	.word	0x080111fd
 80111a0:	080111fd 	.word	0x080111fd
 80111a4:	080111fd 	.word	0x080111fd
 80111a8:	080111ed 	.word	0x080111ed
 80111ac:	080111fd 	.word	0x080111fd
 80111b0:	080111fd 	.word	0x080111fd
 80111b4:	080111fd 	.word	0x080111fd
 80111b8:	080111fd 	.word	0x080111fd
 80111bc:	080111fd 	.word	0x080111fd
 80111c0:	080111fd 	.word	0x080111fd
 80111c4:	080111fd 	.word	0x080111fd
 80111c8:	080111f5 	.word	0x080111f5
 80111cc:	2301      	movs	r3, #1
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e222      	b.n	801161a <UART_SetConfig+0x5a6>
 80111d4:	2304      	movs	r3, #4
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e21e      	b.n	801161a <UART_SetConfig+0x5a6>
 80111dc:	2308      	movs	r3, #8
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e2:	e21a      	b.n	801161a <UART_SetConfig+0x5a6>
 80111e4:	2310      	movs	r3, #16
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e216      	b.n	801161a <UART_SetConfig+0x5a6>
 80111ec:	2320      	movs	r3, #32
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e212      	b.n	801161a <UART_SetConfig+0x5a6>
 80111f4:	2340      	movs	r3, #64	; 0x40
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e20e      	b.n	801161a <UART_SetConfig+0x5a6>
 80111fc:	2380      	movs	r3, #128	; 0x80
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e20a      	b.n	801161a <UART_SetConfig+0x5a6>
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a69      	ldr	r2, [pc, #420]	; (80113b0 <UART_SetConfig+0x33c>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d130      	bne.n	8011270 <UART_SetConfig+0x1fc>
 801120e:	4b67      	ldr	r3, [pc, #412]	; (80113ac <UART_SetConfig+0x338>)
 8011210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011212:	f003 0307 	and.w	r3, r3, #7
 8011216:	2b05      	cmp	r3, #5
 8011218:	d826      	bhi.n	8011268 <UART_SetConfig+0x1f4>
 801121a:	a201      	add	r2, pc, #4	; (adr r2, 8011220 <UART_SetConfig+0x1ac>)
 801121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011220:	08011239 	.word	0x08011239
 8011224:	08011241 	.word	0x08011241
 8011228:	08011249 	.word	0x08011249
 801122c:	08011251 	.word	0x08011251
 8011230:	08011259 	.word	0x08011259
 8011234:	08011261 	.word	0x08011261
 8011238:	2300      	movs	r3, #0
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e1ec      	b.n	801161a <UART_SetConfig+0x5a6>
 8011240:	2304      	movs	r3, #4
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011246:	e1e8      	b.n	801161a <UART_SetConfig+0x5a6>
 8011248:	2308      	movs	r3, #8
 801124a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124e:	e1e4      	b.n	801161a <UART_SetConfig+0x5a6>
 8011250:	2310      	movs	r3, #16
 8011252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011256:	e1e0      	b.n	801161a <UART_SetConfig+0x5a6>
 8011258:	2320      	movs	r3, #32
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125e:	e1dc      	b.n	801161a <UART_SetConfig+0x5a6>
 8011260:	2340      	movs	r3, #64	; 0x40
 8011262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011266:	e1d8      	b.n	801161a <UART_SetConfig+0x5a6>
 8011268:	2380      	movs	r3, #128	; 0x80
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126e:	e1d4      	b.n	801161a <UART_SetConfig+0x5a6>
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	4a4f      	ldr	r2, [pc, #316]	; (80113b4 <UART_SetConfig+0x340>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d130      	bne.n	80112dc <UART_SetConfig+0x268>
 801127a:	4b4c      	ldr	r3, [pc, #304]	; (80113ac <UART_SetConfig+0x338>)
 801127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801127e:	f003 0307 	and.w	r3, r3, #7
 8011282:	2b05      	cmp	r3, #5
 8011284:	d826      	bhi.n	80112d4 <UART_SetConfig+0x260>
 8011286:	a201      	add	r2, pc, #4	; (adr r2, 801128c <UART_SetConfig+0x218>)
 8011288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801128c:	080112a5 	.word	0x080112a5
 8011290:	080112ad 	.word	0x080112ad
 8011294:	080112b5 	.word	0x080112b5
 8011298:	080112bd 	.word	0x080112bd
 801129c:	080112c5 	.word	0x080112c5
 80112a0:	080112cd 	.word	0x080112cd
 80112a4:	2300      	movs	r3, #0
 80112a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112aa:	e1b6      	b.n	801161a <UART_SetConfig+0x5a6>
 80112ac:	2304      	movs	r3, #4
 80112ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b2:	e1b2      	b.n	801161a <UART_SetConfig+0x5a6>
 80112b4:	2308      	movs	r3, #8
 80112b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ba:	e1ae      	b.n	801161a <UART_SetConfig+0x5a6>
 80112bc:	2310      	movs	r3, #16
 80112be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c2:	e1aa      	b.n	801161a <UART_SetConfig+0x5a6>
 80112c4:	2320      	movs	r3, #32
 80112c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ca:	e1a6      	b.n	801161a <UART_SetConfig+0x5a6>
 80112cc:	2340      	movs	r3, #64	; 0x40
 80112ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d2:	e1a2      	b.n	801161a <UART_SetConfig+0x5a6>
 80112d4:	2380      	movs	r3, #128	; 0x80
 80112d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112da:	e19e      	b.n	801161a <UART_SetConfig+0x5a6>
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4a35      	ldr	r2, [pc, #212]	; (80113b8 <UART_SetConfig+0x344>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d130      	bne.n	8011348 <UART_SetConfig+0x2d4>
 80112e6:	4b31      	ldr	r3, [pc, #196]	; (80113ac <UART_SetConfig+0x338>)
 80112e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112ea:	f003 0307 	and.w	r3, r3, #7
 80112ee:	2b05      	cmp	r3, #5
 80112f0:	d826      	bhi.n	8011340 <UART_SetConfig+0x2cc>
 80112f2:	a201      	add	r2, pc, #4	; (adr r2, 80112f8 <UART_SetConfig+0x284>)
 80112f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f8:	08011311 	.word	0x08011311
 80112fc:	08011319 	.word	0x08011319
 8011300:	08011321 	.word	0x08011321
 8011304:	08011329 	.word	0x08011329
 8011308:	08011331 	.word	0x08011331
 801130c:	08011339 	.word	0x08011339
 8011310:	2300      	movs	r3, #0
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e180      	b.n	801161a <UART_SetConfig+0x5a6>
 8011318:	2304      	movs	r3, #4
 801131a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131e:	e17c      	b.n	801161a <UART_SetConfig+0x5a6>
 8011320:	2308      	movs	r3, #8
 8011322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011326:	e178      	b.n	801161a <UART_SetConfig+0x5a6>
 8011328:	2310      	movs	r3, #16
 801132a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132e:	e174      	b.n	801161a <UART_SetConfig+0x5a6>
 8011330:	2320      	movs	r3, #32
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e170      	b.n	801161a <UART_SetConfig+0x5a6>
 8011338:	2340      	movs	r3, #64	; 0x40
 801133a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133e:	e16c      	b.n	801161a <UART_SetConfig+0x5a6>
 8011340:	2380      	movs	r3, #128	; 0x80
 8011342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011346:	e168      	b.n	801161a <UART_SetConfig+0x5a6>
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4a1b      	ldr	r2, [pc, #108]	; (80113bc <UART_SetConfig+0x348>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d142      	bne.n	80113d8 <UART_SetConfig+0x364>
 8011352:	4b16      	ldr	r3, [pc, #88]	; (80113ac <UART_SetConfig+0x338>)
 8011354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011356:	f003 0307 	and.w	r3, r3, #7
 801135a:	2b05      	cmp	r3, #5
 801135c:	d838      	bhi.n	80113d0 <UART_SetConfig+0x35c>
 801135e:	a201      	add	r2, pc, #4	; (adr r2, 8011364 <UART_SetConfig+0x2f0>)
 8011360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011364:	0801137d 	.word	0x0801137d
 8011368:	08011385 	.word	0x08011385
 801136c:	0801138d 	.word	0x0801138d
 8011370:	08011395 	.word	0x08011395
 8011374:	080113c1 	.word	0x080113c1
 8011378:	080113c9 	.word	0x080113c9
 801137c:	2300      	movs	r3, #0
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e14a      	b.n	801161a <UART_SetConfig+0x5a6>
 8011384:	2304      	movs	r3, #4
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e146      	b.n	801161a <UART_SetConfig+0x5a6>
 801138c:	2308      	movs	r3, #8
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011392:	e142      	b.n	801161a <UART_SetConfig+0x5a6>
 8011394:	2310      	movs	r3, #16
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139a:	e13e      	b.n	801161a <UART_SetConfig+0x5a6>
 801139c:	cfff69f3 	.word	0xcfff69f3
 80113a0:	58000c00 	.word	0x58000c00
 80113a4:	11fff4ff 	.word	0x11fff4ff
 80113a8:	40011000 	.word	0x40011000
 80113ac:	58024400 	.word	0x58024400
 80113b0:	40004400 	.word	0x40004400
 80113b4:	40004800 	.word	0x40004800
 80113b8:	40004c00 	.word	0x40004c00
 80113bc:	40005000 	.word	0x40005000
 80113c0:	2320      	movs	r3, #32
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e128      	b.n	801161a <UART_SetConfig+0x5a6>
 80113c8:	2340      	movs	r3, #64	; 0x40
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e124      	b.n	801161a <UART_SetConfig+0x5a6>
 80113d0:	2380      	movs	r3, #128	; 0x80
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e120      	b.n	801161a <UART_SetConfig+0x5a6>
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4acb      	ldr	r2, [pc, #812]	; (801170c <UART_SetConfig+0x698>)
 80113de:	4293      	cmp	r3, r2
 80113e0:	d176      	bne.n	80114d0 <UART_SetConfig+0x45c>
 80113e2:	4bcb      	ldr	r3, [pc, #812]	; (8011710 <UART_SetConfig+0x69c>)
 80113e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113ea:	2b28      	cmp	r3, #40	; 0x28
 80113ec:	d86c      	bhi.n	80114c8 <UART_SetConfig+0x454>
 80113ee:	a201      	add	r2, pc, #4	; (adr r2, 80113f4 <UART_SetConfig+0x380>)
 80113f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f4:	08011499 	.word	0x08011499
 80113f8:	080114c9 	.word	0x080114c9
 80113fc:	080114c9 	.word	0x080114c9
 8011400:	080114c9 	.word	0x080114c9
 8011404:	080114c9 	.word	0x080114c9
 8011408:	080114c9 	.word	0x080114c9
 801140c:	080114c9 	.word	0x080114c9
 8011410:	080114c9 	.word	0x080114c9
 8011414:	080114a1 	.word	0x080114a1
 8011418:	080114c9 	.word	0x080114c9
 801141c:	080114c9 	.word	0x080114c9
 8011420:	080114c9 	.word	0x080114c9
 8011424:	080114c9 	.word	0x080114c9
 8011428:	080114c9 	.word	0x080114c9
 801142c:	080114c9 	.word	0x080114c9
 8011430:	080114c9 	.word	0x080114c9
 8011434:	080114a9 	.word	0x080114a9
 8011438:	080114c9 	.word	0x080114c9
 801143c:	080114c9 	.word	0x080114c9
 8011440:	080114c9 	.word	0x080114c9
 8011444:	080114c9 	.word	0x080114c9
 8011448:	080114c9 	.word	0x080114c9
 801144c:	080114c9 	.word	0x080114c9
 8011450:	080114c9 	.word	0x080114c9
 8011454:	080114b1 	.word	0x080114b1
 8011458:	080114c9 	.word	0x080114c9
 801145c:	080114c9 	.word	0x080114c9
 8011460:	080114c9 	.word	0x080114c9
 8011464:	080114c9 	.word	0x080114c9
 8011468:	080114c9 	.word	0x080114c9
 801146c:	080114c9 	.word	0x080114c9
 8011470:	080114c9 	.word	0x080114c9
 8011474:	080114b9 	.word	0x080114b9
 8011478:	080114c9 	.word	0x080114c9
 801147c:	080114c9 	.word	0x080114c9
 8011480:	080114c9 	.word	0x080114c9
 8011484:	080114c9 	.word	0x080114c9
 8011488:	080114c9 	.word	0x080114c9
 801148c:	080114c9 	.word	0x080114c9
 8011490:	080114c9 	.word	0x080114c9
 8011494:	080114c1 	.word	0x080114c1
 8011498:	2301      	movs	r3, #1
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e0bc      	b.n	801161a <UART_SetConfig+0x5a6>
 80114a0:	2304      	movs	r3, #4
 80114a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a6:	e0b8      	b.n	801161a <UART_SetConfig+0x5a6>
 80114a8:	2308      	movs	r3, #8
 80114aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ae:	e0b4      	b.n	801161a <UART_SetConfig+0x5a6>
 80114b0:	2310      	movs	r3, #16
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e0b0      	b.n	801161a <UART_SetConfig+0x5a6>
 80114b8:	2320      	movs	r3, #32
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e0ac      	b.n	801161a <UART_SetConfig+0x5a6>
 80114c0:	2340      	movs	r3, #64	; 0x40
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c6:	e0a8      	b.n	801161a <UART_SetConfig+0x5a6>
 80114c8:	2380      	movs	r3, #128	; 0x80
 80114ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ce:	e0a4      	b.n	801161a <UART_SetConfig+0x5a6>
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4a8f      	ldr	r2, [pc, #572]	; (8011714 <UART_SetConfig+0x6a0>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d130      	bne.n	801153c <UART_SetConfig+0x4c8>
 80114da:	4b8d      	ldr	r3, [pc, #564]	; (8011710 <UART_SetConfig+0x69c>)
 80114dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114de:	f003 0307 	and.w	r3, r3, #7
 80114e2:	2b05      	cmp	r3, #5
 80114e4:	d826      	bhi.n	8011534 <UART_SetConfig+0x4c0>
 80114e6:	a201      	add	r2, pc, #4	; (adr r2, 80114ec <UART_SetConfig+0x478>)
 80114e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ec:	08011505 	.word	0x08011505
 80114f0:	0801150d 	.word	0x0801150d
 80114f4:	08011515 	.word	0x08011515
 80114f8:	0801151d 	.word	0x0801151d
 80114fc:	08011525 	.word	0x08011525
 8011500:	0801152d 	.word	0x0801152d
 8011504:	2300      	movs	r3, #0
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e086      	b.n	801161a <UART_SetConfig+0x5a6>
 801150c:	2304      	movs	r3, #4
 801150e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011512:	e082      	b.n	801161a <UART_SetConfig+0x5a6>
 8011514:	2308      	movs	r3, #8
 8011516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151a:	e07e      	b.n	801161a <UART_SetConfig+0x5a6>
 801151c:	2310      	movs	r3, #16
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011522:	e07a      	b.n	801161a <UART_SetConfig+0x5a6>
 8011524:	2320      	movs	r3, #32
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152a:	e076      	b.n	801161a <UART_SetConfig+0x5a6>
 801152c:	2340      	movs	r3, #64	; 0x40
 801152e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011532:	e072      	b.n	801161a <UART_SetConfig+0x5a6>
 8011534:	2380      	movs	r3, #128	; 0x80
 8011536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153a:	e06e      	b.n	801161a <UART_SetConfig+0x5a6>
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a75      	ldr	r2, [pc, #468]	; (8011718 <UART_SetConfig+0x6a4>)
 8011542:	4293      	cmp	r3, r2
 8011544:	d130      	bne.n	80115a8 <UART_SetConfig+0x534>
 8011546:	4b72      	ldr	r3, [pc, #456]	; (8011710 <UART_SetConfig+0x69c>)
 8011548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801154a:	f003 0307 	and.w	r3, r3, #7
 801154e:	2b05      	cmp	r3, #5
 8011550:	d826      	bhi.n	80115a0 <UART_SetConfig+0x52c>
 8011552:	a201      	add	r2, pc, #4	; (adr r2, 8011558 <UART_SetConfig+0x4e4>)
 8011554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011558:	08011571 	.word	0x08011571
 801155c:	08011579 	.word	0x08011579
 8011560:	08011581 	.word	0x08011581
 8011564:	08011589 	.word	0x08011589
 8011568:	08011591 	.word	0x08011591
 801156c:	08011599 	.word	0x08011599
 8011570:	2300      	movs	r3, #0
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e050      	b.n	801161a <UART_SetConfig+0x5a6>
 8011578:	2304      	movs	r3, #4
 801157a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801157e:	e04c      	b.n	801161a <UART_SetConfig+0x5a6>
 8011580:	2308      	movs	r3, #8
 8011582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011586:	e048      	b.n	801161a <UART_SetConfig+0x5a6>
 8011588:	2310      	movs	r3, #16
 801158a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158e:	e044      	b.n	801161a <UART_SetConfig+0x5a6>
 8011590:	2320      	movs	r3, #32
 8011592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011596:	e040      	b.n	801161a <UART_SetConfig+0x5a6>
 8011598:	2340      	movs	r3, #64	; 0x40
 801159a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801159e:	e03c      	b.n	801161a <UART_SetConfig+0x5a6>
 80115a0:	2380      	movs	r3, #128	; 0x80
 80115a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a6:	e038      	b.n	801161a <UART_SetConfig+0x5a6>
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4a5b      	ldr	r2, [pc, #364]	; (801171c <UART_SetConfig+0x6a8>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d130      	bne.n	8011614 <UART_SetConfig+0x5a0>
 80115b2:	4b57      	ldr	r3, [pc, #348]	; (8011710 <UART_SetConfig+0x69c>)
 80115b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115b6:	f003 0307 	and.w	r3, r3, #7
 80115ba:	2b05      	cmp	r3, #5
 80115bc:	d826      	bhi.n	801160c <UART_SetConfig+0x598>
 80115be:	a201      	add	r2, pc, #4	; (adr r2, 80115c4 <UART_SetConfig+0x550>)
 80115c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c4:	080115dd 	.word	0x080115dd
 80115c8:	080115e5 	.word	0x080115e5
 80115cc:	080115ed 	.word	0x080115ed
 80115d0:	080115f5 	.word	0x080115f5
 80115d4:	080115fd 	.word	0x080115fd
 80115d8:	08011605 	.word	0x08011605
 80115dc:	2302      	movs	r3, #2
 80115de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115e2:	e01a      	b.n	801161a <UART_SetConfig+0x5a6>
 80115e4:	2304      	movs	r3, #4
 80115e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ea:	e016      	b.n	801161a <UART_SetConfig+0x5a6>
 80115ec:	2308      	movs	r3, #8
 80115ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115f2:	e012      	b.n	801161a <UART_SetConfig+0x5a6>
 80115f4:	2310      	movs	r3, #16
 80115f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fa:	e00e      	b.n	801161a <UART_SetConfig+0x5a6>
 80115fc:	2320      	movs	r3, #32
 80115fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011602:	e00a      	b.n	801161a <UART_SetConfig+0x5a6>
 8011604:	2340      	movs	r3, #64	; 0x40
 8011606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160a:	e006      	b.n	801161a <UART_SetConfig+0x5a6>
 801160c:	2380      	movs	r3, #128	; 0x80
 801160e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011612:	e002      	b.n	801161a <UART_SetConfig+0x5a6>
 8011614:	2380      	movs	r3, #128	; 0x80
 8011616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4a3f      	ldr	r2, [pc, #252]	; (801171c <UART_SetConfig+0x6a8>)
 8011620:	4293      	cmp	r3, r2
 8011622:	f040 80f8 	bne.w	8011816 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011626:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801162a:	2b20      	cmp	r3, #32
 801162c:	dc46      	bgt.n	80116bc <UART_SetConfig+0x648>
 801162e:	2b02      	cmp	r3, #2
 8011630:	f2c0 8082 	blt.w	8011738 <UART_SetConfig+0x6c4>
 8011634:	3b02      	subs	r3, #2
 8011636:	2b1e      	cmp	r3, #30
 8011638:	d87e      	bhi.n	8011738 <UART_SetConfig+0x6c4>
 801163a:	a201      	add	r2, pc, #4	; (adr r2, 8011640 <UART_SetConfig+0x5cc>)
 801163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011640:	080116c3 	.word	0x080116c3
 8011644:	08011739 	.word	0x08011739
 8011648:	080116cb 	.word	0x080116cb
 801164c:	08011739 	.word	0x08011739
 8011650:	08011739 	.word	0x08011739
 8011654:	08011739 	.word	0x08011739
 8011658:	080116db 	.word	0x080116db
 801165c:	08011739 	.word	0x08011739
 8011660:	08011739 	.word	0x08011739
 8011664:	08011739 	.word	0x08011739
 8011668:	08011739 	.word	0x08011739
 801166c:	08011739 	.word	0x08011739
 8011670:	08011739 	.word	0x08011739
 8011674:	08011739 	.word	0x08011739
 8011678:	080116eb 	.word	0x080116eb
 801167c:	08011739 	.word	0x08011739
 8011680:	08011739 	.word	0x08011739
 8011684:	08011739 	.word	0x08011739
 8011688:	08011739 	.word	0x08011739
 801168c:	08011739 	.word	0x08011739
 8011690:	08011739 	.word	0x08011739
 8011694:	08011739 	.word	0x08011739
 8011698:	08011739 	.word	0x08011739
 801169c:	08011739 	.word	0x08011739
 80116a0:	08011739 	.word	0x08011739
 80116a4:	08011739 	.word	0x08011739
 80116a8:	08011739 	.word	0x08011739
 80116ac:	08011739 	.word	0x08011739
 80116b0:	08011739 	.word	0x08011739
 80116b4:	08011739 	.word	0x08011739
 80116b8:	0801172b 	.word	0x0801172b
 80116bc:	2b40      	cmp	r3, #64	; 0x40
 80116be:	d037      	beq.n	8011730 <UART_SetConfig+0x6bc>
 80116c0:	e03a      	b.n	8011738 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80116c2:	f7fb fc17 	bl	800cef4 <HAL_RCCEx_GetD3PCLK1Freq>
 80116c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116c8:	e03c      	b.n	8011744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fb fc26 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d8:	e034      	b.n	8011744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116da:	f107 0318 	add.w	r3, r7, #24
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fb fd72 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116e8:	e02c      	b.n	8011744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116ea:	4b09      	ldr	r3, [pc, #36]	; (8011710 <UART_SetConfig+0x69c>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f003 0320 	and.w	r3, r3, #32
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d016      	beq.n	8011724 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116f6:	4b06      	ldr	r3, [pc, #24]	; (8011710 <UART_SetConfig+0x69c>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	08db      	lsrs	r3, r3, #3
 80116fc:	f003 0303 	and.w	r3, r3, #3
 8011700:	4a07      	ldr	r2, [pc, #28]	; (8011720 <UART_SetConfig+0x6ac>)
 8011702:	fa22 f303 	lsr.w	r3, r2, r3
 8011706:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011708:	e01c      	b.n	8011744 <UART_SetConfig+0x6d0>
 801170a:	bf00      	nop
 801170c:	40011400 	.word	0x40011400
 8011710:	58024400 	.word	0x58024400
 8011714:	40007800 	.word	0x40007800
 8011718:	40007c00 	.word	0x40007c00
 801171c:	58000c00 	.word	0x58000c00
 8011720:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011724:	4b9d      	ldr	r3, [pc, #628]	; (801199c <UART_SetConfig+0x928>)
 8011726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011728:	e00c      	b.n	8011744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801172a:	4b9d      	ldr	r3, [pc, #628]	; (80119a0 <UART_SetConfig+0x92c>)
 801172c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801172e:	e009      	b.n	8011744 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011736:	e005      	b.n	8011744 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011738:	2300      	movs	r3, #0
 801173a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801173c:	2301      	movs	r3, #1
 801173e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011742:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 81de 	beq.w	8011b08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011750:	4a94      	ldr	r2, [pc, #592]	; (80119a4 <UART_SetConfig+0x930>)
 8011752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011756:	461a      	mov	r2, r3
 8011758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801175a:	fbb3 f3f2 	udiv	r3, r3, r2
 801175e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	4613      	mov	r3, r2
 8011766:	005b      	lsls	r3, r3, #1
 8011768:	4413      	add	r3, r2
 801176a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801176c:	429a      	cmp	r2, r3
 801176e:	d305      	bcc.n	801177c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011778:	429a      	cmp	r2, r3
 801177a:	d903      	bls.n	8011784 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801177c:	2301      	movs	r3, #1
 801177e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011782:	e1c1      	b.n	8011b08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011786:	2200      	movs	r2, #0
 8011788:	60bb      	str	r3, [r7, #8]
 801178a:	60fa      	str	r2, [r7, #12]
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011790:	4a84      	ldr	r2, [pc, #528]	; (80119a4 <UART_SetConfig+0x930>)
 8011792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011796:	b29b      	uxth	r3, r3
 8011798:	2200      	movs	r2, #0
 801179a:	603b      	str	r3, [r7, #0]
 801179c:	607a      	str	r2, [r7, #4]
 801179e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80117a6:	f7ee fd9b 	bl	80002e0 <__aeabi_uldivmod>
 80117aa:	4602      	mov	r2, r0
 80117ac:	460b      	mov	r3, r1
 80117ae:	4610      	mov	r0, r2
 80117b0:	4619      	mov	r1, r3
 80117b2:	f04f 0200 	mov.w	r2, #0
 80117b6:	f04f 0300 	mov.w	r3, #0
 80117ba:	020b      	lsls	r3, r1, #8
 80117bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117c0:	0202      	lsls	r2, r0, #8
 80117c2:	6979      	ldr	r1, [r7, #20]
 80117c4:	6849      	ldr	r1, [r1, #4]
 80117c6:	0849      	lsrs	r1, r1, #1
 80117c8:	2000      	movs	r0, #0
 80117ca:	460c      	mov	r4, r1
 80117cc:	4605      	mov	r5, r0
 80117ce:	eb12 0804 	adds.w	r8, r2, r4
 80117d2:	eb43 0905 	adc.w	r9, r3, r5
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	469a      	mov	sl, r3
 80117de:	4693      	mov	fp, r2
 80117e0:	4652      	mov	r2, sl
 80117e2:	465b      	mov	r3, fp
 80117e4:	4640      	mov	r0, r8
 80117e6:	4649      	mov	r1, r9
 80117e8:	f7ee fd7a 	bl	80002e0 <__aeabi_uldivmod>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	4613      	mov	r3, r2
 80117f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80117f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80117fa:	d308      	bcc.n	801180e <UART_SetConfig+0x79a>
 80117fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011802:	d204      	bcs.n	801180e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801180a:	60da      	str	r2, [r3, #12]
 801180c:	e17c      	b.n	8011b08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801180e:	2301      	movs	r3, #1
 8011810:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011814:	e178      	b.n	8011b08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	69db      	ldr	r3, [r3, #28]
 801181a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801181e:	f040 80c5 	bne.w	80119ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011822:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011826:	2b20      	cmp	r3, #32
 8011828:	dc48      	bgt.n	80118bc <UART_SetConfig+0x848>
 801182a:	2b00      	cmp	r3, #0
 801182c:	db7b      	blt.n	8011926 <UART_SetConfig+0x8b2>
 801182e:	2b20      	cmp	r3, #32
 8011830:	d879      	bhi.n	8011926 <UART_SetConfig+0x8b2>
 8011832:	a201      	add	r2, pc, #4	; (adr r2, 8011838 <UART_SetConfig+0x7c4>)
 8011834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011838:	080118c3 	.word	0x080118c3
 801183c:	080118cb 	.word	0x080118cb
 8011840:	08011927 	.word	0x08011927
 8011844:	08011927 	.word	0x08011927
 8011848:	080118d3 	.word	0x080118d3
 801184c:	08011927 	.word	0x08011927
 8011850:	08011927 	.word	0x08011927
 8011854:	08011927 	.word	0x08011927
 8011858:	080118e3 	.word	0x080118e3
 801185c:	08011927 	.word	0x08011927
 8011860:	08011927 	.word	0x08011927
 8011864:	08011927 	.word	0x08011927
 8011868:	08011927 	.word	0x08011927
 801186c:	08011927 	.word	0x08011927
 8011870:	08011927 	.word	0x08011927
 8011874:	08011927 	.word	0x08011927
 8011878:	080118f3 	.word	0x080118f3
 801187c:	08011927 	.word	0x08011927
 8011880:	08011927 	.word	0x08011927
 8011884:	08011927 	.word	0x08011927
 8011888:	08011927 	.word	0x08011927
 801188c:	08011927 	.word	0x08011927
 8011890:	08011927 	.word	0x08011927
 8011894:	08011927 	.word	0x08011927
 8011898:	08011927 	.word	0x08011927
 801189c:	08011927 	.word	0x08011927
 80118a0:	08011927 	.word	0x08011927
 80118a4:	08011927 	.word	0x08011927
 80118a8:	08011927 	.word	0x08011927
 80118ac:	08011927 	.word	0x08011927
 80118b0:	08011927 	.word	0x08011927
 80118b4:	08011927 	.word	0x08011927
 80118b8:	08011919 	.word	0x08011919
 80118bc:	2b40      	cmp	r3, #64	; 0x40
 80118be:	d02e      	beq.n	801191e <UART_SetConfig+0x8aa>
 80118c0:	e031      	b.n	8011926 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118c2:	f7f9 fb1f 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 80118c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118c8:	e033      	b.n	8011932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80118ca:	f7f9 fb31 	bl	800af30 <HAL_RCC_GetPCLK2Freq>
 80118ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118d0:	e02f      	b.n	8011932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fb fb22 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80118dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e0:	e027      	b.n	8011932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118e2:	f107 0318 	add.w	r3, r7, #24
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fb fc6e 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118f0:	e01f      	b.n	8011932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118f2:	4b2d      	ldr	r3, [pc, #180]	; (80119a8 <UART_SetConfig+0x934>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f003 0320 	and.w	r3, r3, #32
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d009      	beq.n	8011912 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80118fe:	4b2a      	ldr	r3, [pc, #168]	; (80119a8 <UART_SetConfig+0x934>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	08db      	lsrs	r3, r3, #3
 8011904:	f003 0303 	and.w	r3, r3, #3
 8011908:	4a24      	ldr	r2, [pc, #144]	; (801199c <UART_SetConfig+0x928>)
 801190a:	fa22 f303 	lsr.w	r3, r2, r3
 801190e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011910:	e00f      	b.n	8011932 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011912:	4b22      	ldr	r3, [pc, #136]	; (801199c <UART_SetConfig+0x928>)
 8011914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011916:	e00c      	b.n	8011932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011918:	4b21      	ldr	r3, [pc, #132]	; (80119a0 <UART_SetConfig+0x92c>)
 801191a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801191c:	e009      	b.n	8011932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801191e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011924:	e005      	b.n	8011932 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011926:	2300      	movs	r3, #0
 8011928:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801192a:	2301      	movs	r3, #1
 801192c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011934:	2b00      	cmp	r3, #0
 8011936:	f000 80e7 	beq.w	8011b08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801193e:	4a19      	ldr	r2, [pc, #100]	; (80119a4 <UART_SetConfig+0x930>)
 8011940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011944:	461a      	mov	r2, r3
 8011946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011948:	fbb3 f3f2 	udiv	r3, r3, r2
 801194c:	005a      	lsls	r2, r3, #1
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	085b      	lsrs	r3, r3, #1
 8011954:	441a      	add	r2, r3
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	fbb2 f3f3 	udiv	r3, r2, r3
 801195e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011962:	2b0f      	cmp	r3, #15
 8011964:	d916      	bls.n	8011994 <UART_SetConfig+0x920>
 8011966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801196c:	d212      	bcs.n	8011994 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011970:	b29b      	uxth	r3, r3
 8011972:	f023 030f 	bic.w	r3, r3, #15
 8011976:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197a:	085b      	lsrs	r3, r3, #1
 801197c:	b29b      	uxth	r3, r3
 801197e:	f003 0307 	and.w	r3, r3, #7
 8011982:	b29a      	uxth	r2, r3
 8011984:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011986:	4313      	orrs	r3, r2
 8011988:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011990:	60da      	str	r2, [r3, #12]
 8011992:	e0b9      	b.n	8011b08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011994:	2301      	movs	r3, #1
 8011996:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801199a:	e0b5      	b.n	8011b08 <UART_SetConfig+0xa94>
 801199c:	03d09000 	.word	0x03d09000
 80119a0:	003d0900 	.word	0x003d0900
 80119a4:	0801728c 	.word	0x0801728c
 80119a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80119ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119b0:	2b20      	cmp	r3, #32
 80119b2:	dc49      	bgt.n	8011a48 <UART_SetConfig+0x9d4>
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	db7c      	blt.n	8011ab2 <UART_SetConfig+0xa3e>
 80119b8:	2b20      	cmp	r3, #32
 80119ba:	d87a      	bhi.n	8011ab2 <UART_SetConfig+0xa3e>
 80119bc:	a201      	add	r2, pc, #4	; (adr r2, 80119c4 <UART_SetConfig+0x950>)
 80119be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c2:	bf00      	nop
 80119c4:	08011a4f 	.word	0x08011a4f
 80119c8:	08011a57 	.word	0x08011a57
 80119cc:	08011ab3 	.word	0x08011ab3
 80119d0:	08011ab3 	.word	0x08011ab3
 80119d4:	08011a5f 	.word	0x08011a5f
 80119d8:	08011ab3 	.word	0x08011ab3
 80119dc:	08011ab3 	.word	0x08011ab3
 80119e0:	08011ab3 	.word	0x08011ab3
 80119e4:	08011a6f 	.word	0x08011a6f
 80119e8:	08011ab3 	.word	0x08011ab3
 80119ec:	08011ab3 	.word	0x08011ab3
 80119f0:	08011ab3 	.word	0x08011ab3
 80119f4:	08011ab3 	.word	0x08011ab3
 80119f8:	08011ab3 	.word	0x08011ab3
 80119fc:	08011ab3 	.word	0x08011ab3
 8011a00:	08011ab3 	.word	0x08011ab3
 8011a04:	08011a7f 	.word	0x08011a7f
 8011a08:	08011ab3 	.word	0x08011ab3
 8011a0c:	08011ab3 	.word	0x08011ab3
 8011a10:	08011ab3 	.word	0x08011ab3
 8011a14:	08011ab3 	.word	0x08011ab3
 8011a18:	08011ab3 	.word	0x08011ab3
 8011a1c:	08011ab3 	.word	0x08011ab3
 8011a20:	08011ab3 	.word	0x08011ab3
 8011a24:	08011ab3 	.word	0x08011ab3
 8011a28:	08011ab3 	.word	0x08011ab3
 8011a2c:	08011ab3 	.word	0x08011ab3
 8011a30:	08011ab3 	.word	0x08011ab3
 8011a34:	08011ab3 	.word	0x08011ab3
 8011a38:	08011ab3 	.word	0x08011ab3
 8011a3c:	08011ab3 	.word	0x08011ab3
 8011a40:	08011ab3 	.word	0x08011ab3
 8011a44:	08011aa5 	.word	0x08011aa5
 8011a48:	2b40      	cmp	r3, #64	; 0x40
 8011a4a:	d02e      	beq.n	8011aaa <UART_SetConfig+0xa36>
 8011a4c:	e031      	b.n	8011ab2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a4e:	f7f9 fa59 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 8011a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a54:	e033      	b.n	8011abe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011a56:	f7f9 fa6b 	bl	800af30 <HAL_RCC_GetPCLK2Freq>
 8011a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a5c:	e02f      	b.n	8011abe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fb fa5c 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a6c:	e027      	b.n	8011abe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a6e:	f107 0318 	add.w	r3, r7, #24
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fb fba8 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a7c:	e01f      	b.n	8011abe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a7e:	4b2d      	ldr	r3, [pc, #180]	; (8011b34 <UART_SetConfig+0xac0>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f003 0320 	and.w	r3, r3, #32
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d009      	beq.n	8011a9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a8a:	4b2a      	ldr	r3, [pc, #168]	; (8011b34 <UART_SetConfig+0xac0>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	08db      	lsrs	r3, r3, #3
 8011a90:	f003 0303 	and.w	r3, r3, #3
 8011a94:	4a28      	ldr	r2, [pc, #160]	; (8011b38 <UART_SetConfig+0xac4>)
 8011a96:	fa22 f303 	lsr.w	r3, r2, r3
 8011a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011a9c:	e00f      	b.n	8011abe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011a9e:	4b26      	ldr	r3, [pc, #152]	; (8011b38 <UART_SetConfig+0xac4>)
 8011aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa2:	e00c      	b.n	8011abe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011aa4:	4b25      	ldr	r3, [pc, #148]	; (8011b3c <UART_SetConfig+0xac8>)
 8011aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa8:	e009      	b.n	8011abe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ab0:	e005      	b.n	8011abe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011abc:	bf00      	nop
    }

    if (pclk != 0U)
 8011abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d021      	beq.n	8011b08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac8:	4a1d      	ldr	r2, [pc, #116]	; (8011b40 <UART_SetConfig+0xacc>)
 8011aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	085b      	lsrs	r3, r3, #1
 8011adc:	441a      	add	r2, r3
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aea:	2b0f      	cmp	r3, #15
 8011aec:	d909      	bls.n	8011b02 <UART_SetConfig+0xa8e>
 8011aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011af4:	d205      	bcs.n	8011b02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	60da      	str	r2, [r3, #12]
 8011b00:	e002      	b.n	8011b08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011b02:	2301      	movs	r3, #1
 8011b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	2201      	movs	r2, #1
 8011b14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	2200      	movs	r2, #0
 8011b22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011b24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3748      	adds	r7, #72	; 0x48
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b32:	bf00      	nop
 8011b34:	58024400 	.word	0x58024400
 8011b38:	03d09000 	.word	0x03d09000
 8011b3c:	003d0900 	.word	0x003d0900
 8011b40:	0801728c 	.word	0x0801728c

08011b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b50:	f003 0308 	and.w	r3, r3, #8
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d00a      	beq.n	8011b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	430a      	orrs	r2, r1
 8011b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b72:	f003 0301 	and.w	r3, r3, #1
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00a      	beq.n	8011b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	430a      	orrs	r2, r1
 8011b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b94:	f003 0302 	and.w	r3, r3, #2
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00a      	beq.n	8011bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	430a      	orrs	r2, r1
 8011bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bb6:	f003 0304 	and.w	r3, r3, #4
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00a      	beq.n	8011bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	430a      	orrs	r2, r1
 8011bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bd8:	f003 0310 	and.w	r3, r3, #16
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00a      	beq.n	8011bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	430a      	orrs	r2, r1
 8011bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bfa:	f003 0320 	and.w	r3, r3, #32
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d00a      	beq.n	8011c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	689b      	ldr	r3, [r3, #8]
 8011c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	430a      	orrs	r2, r1
 8011c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d01a      	beq.n	8011c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	430a      	orrs	r2, r1
 8011c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c42:	d10a      	bne.n	8011c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	430a      	orrs	r2, r1
 8011c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d00a      	beq.n	8011c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	430a      	orrs	r2, r1
 8011c7a:	605a      	str	r2, [r3, #4]
  }
}
 8011c7c:	bf00      	nop
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b098      	sub	sp, #96	; 0x60
 8011c8c:	af02      	add	r7, sp, #8
 8011c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011c98:	f7f2 f9a6 	bl	8003fe8 <HAL_GetTick>
 8011c9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f003 0308 	and.w	r3, r3, #8
 8011ca8:	2b08      	cmp	r3, #8
 8011caa:	d12f      	bne.n	8011d0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011cb0:	9300      	str	r3, [sp, #0]
 8011cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 f88e 	bl	8011ddc <UART_WaitOnFlagUntilTimeout>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d022      	beq.n	8011d0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cce:	e853 3f00 	ldrex	r3, [r3]
 8011cd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cda:	653b      	str	r3, [r7, #80]	; 0x50
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8011ce6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cec:	e841 2300 	strex	r3, r2, [r1]
 8011cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1e6      	bne.n	8011cc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2220      	movs	r2, #32
 8011cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d08:	2303      	movs	r3, #3
 8011d0a:	e063      	b.n	8011dd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f003 0304 	and.w	r3, r3, #4
 8011d16:	2b04      	cmp	r3, #4
 8011d18:	d149      	bne.n	8011dae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d22:	2200      	movs	r2, #0
 8011d24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f000 f857 	bl	8011ddc <UART_WaitOnFlagUntilTimeout>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d03c      	beq.n	8011dae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3c:	e853 3f00 	ldrex	r3, [r3]
 8011d40:	623b      	str	r3, [r7, #32]
   return(result);
 8011d42:	6a3b      	ldr	r3, [r7, #32]
 8011d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d52:	633b      	str	r3, [r7, #48]	; 0x30
 8011d54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d5a:	e841 2300 	strex	r3, r2, [r1]
 8011d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1e6      	bne.n	8011d34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	3308      	adds	r3, #8
 8011d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	e853 3f00 	ldrex	r3, [r3]
 8011d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f023 0301 	bic.w	r3, r3, #1
 8011d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	3308      	adds	r3, #8
 8011d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d86:	61fa      	str	r2, [r7, #28]
 8011d88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d8a:	69b9      	ldr	r1, [r7, #24]
 8011d8c:	69fa      	ldr	r2, [r7, #28]
 8011d8e:	e841 2300 	strex	r3, r2, [r1]
 8011d92:	617b      	str	r3, [r7, #20]
   return(result);
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1e5      	bne.n	8011d66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2220      	movs	r2, #32
 8011d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2200      	movs	r2, #0
 8011da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011daa:	2303      	movs	r3, #3
 8011dac:	e012      	b.n	8011dd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2220      	movs	r2, #32
 8011db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2220      	movs	r2, #32
 8011dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011dd2:	2300      	movs	r3, #0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3758      	adds	r7, #88	; 0x58
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	603b      	str	r3, [r7, #0]
 8011de8:	4613      	mov	r3, r2
 8011dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011dec:	e04f      	b.n	8011e8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011dee:	69bb      	ldr	r3, [r7, #24]
 8011df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011df4:	d04b      	beq.n	8011e8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011df6:	f7f2 f8f7 	bl	8003fe8 <HAL_GetTick>
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	69ba      	ldr	r2, [r7, #24]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d302      	bcc.n	8011e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d101      	bne.n	8011e10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011e0c:	2303      	movs	r3, #3
 8011e0e:	e04e      	b.n	8011eae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f003 0304 	and.w	r3, r3, #4
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d037      	beq.n	8011e8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	2b80      	cmp	r3, #128	; 0x80
 8011e22:	d034      	beq.n	8011e8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b40      	cmp	r3, #64	; 0x40
 8011e28:	d031      	beq.n	8011e8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	69db      	ldr	r3, [r3, #28]
 8011e30:	f003 0308 	and.w	r3, r3, #8
 8011e34:	2b08      	cmp	r3, #8
 8011e36:	d110      	bne.n	8011e5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2208      	movs	r2, #8
 8011e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011e40:	68f8      	ldr	r0, [r7, #12]
 8011e42:	f000 f95b 	bl	80120fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2208      	movs	r2, #8
 8011e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2200      	movs	r2, #0
 8011e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011e56:	2301      	movs	r3, #1
 8011e58:	e029      	b.n	8011eae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	69db      	ldr	r3, [r3, #28]
 8011e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e68:	d111      	bne.n	8011e8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011e74:	68f8      	ldr	r0, [r7, #12]
 8011e76:	f000 f941 	bl	80120fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2220      	movs	r2, #32
 8011e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2200      	movs	r2, #0
 8011e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011e8a:	2303      	movs	r3, #3
 8011e8c:	e00f      	b.n	8011eae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	69da      	ldr	r2, [r3, #28]
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	4013      	ands	r3, r2
 8011e98:	68ba      	ldr	r2, [r7, #8]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	bf0c      	ite	eq
 8011e9e:	2301      	moveq	r3, #1
 8011ea0:	2300      	movne	r3, #0
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	79fb      	ldrb	r3, [r7, #7]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d0a0      	beq.n	8011dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011eac:	2300      	movs	r3, #0
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3710      	adds	r7, #16
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
	...

08011eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b0a3      	sub	sp, #140	; 0x8c
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	68ba      	ldr	r2, [r7, #8]
 8011eca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	88fa      	ldrh	r2, [r7, #6]
 8011ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	88fa      	ldrh	r2, [r7, #6]
 8011ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	689b      	ldr	r3, [r3, #8]
 8011ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eea:	d10e      	bne.n	8011f0a <UART_Start_Receive_IT+0x52>
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	691b      	ldr	r3, [r3, #16]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d105      	bne.n	8011f00 <UART_Start_Receive_IT+0x48>
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011efa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011efe:	e02d      	b.n	8011f5c <UART_Start_Receive_IT+0xa4>
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	22ff      	movs	r2, #255	; 0xff
 8011f04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f08:	e028      	b.n	8011f5c <UART_Start_Receive_IT+0xa4>
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	689b      	ldr	r3, [r3, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d10d      	bne.n	8011f2e <UART_Start_Receive_IT+0x76>
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d104      	bne.n	8011f24 <UART_Start_Receive_IT+0x6c>
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	22ff      	movs	r2, #255	; 0xff
 8011f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f22:	e01b      	b.n	8011f5c <UART_Start_Receive_IT+0xa4>
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	227f      	movs	r2, #127	; 0x7f
 8011f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f2c:	e016      	b.n	8011f5c <UART_Start_Receive_IT+0xa4>
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	689b      	ldr	r3, [r3, #8]
 8011f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f36:	d10d      	bne.n	8011f54 <UART_Start_Receive_IT+0x9c>
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d104      	bne.n	8011f4a <UART_Start_Receive_IT+0x92>
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	227f      	movs	r2, #127	; 0x7f
 8011f44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f48:	e008      	b.n	8011f5c <UART_Start_Receive_IT+0xa4>
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	223f      	movs	r2, #63	; 0x3f
 8011f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f52:	e003      	b.n	8011f5c <UART_Start_Receive_IT+0xa4>
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2200      	movs	r2, #0
 8011f58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2222      	movs	r2, #34	; 0x22
 8011f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	3308      	adds	r3, #8
 8011f72:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f76:	e853 3f00 	ldrex	r3, [r3]
 8011f7a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f7e:	f043 0301 	orr.w	r3, r3, #1
 8011f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	3308      	adds	r3, #8
 8011f8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011f90:	673a      	str	r2, [r7, #112]	; 0x70
 8011f92:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011f96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f98:	e841 2300 	strex	r3, r2, [r1]
 8011f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1e3      	bne.n	8011f6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011fac:	d14f      	bne.n	801204e <UART_Start_Receive_IT+0x196>
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fb4:	88fa      	ldrh	r2, [r7, #6]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d349      	bcc.n	801204e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	689b      	ldr	r3, [r3, #8]
 8011fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fc2:	d107      	bne.n	8011fd4 <UART_Start_Receive_IT+0x11c>
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	691b      	ldr	r3, [r3, #16]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d103      	bne.n	8011fd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	4a47      	ldr	r2, [pc, #284]	; (80120ec <UART_Start_Receive_IT+0x234>)
 8011fd0:	675a      	str	r2, [r3, #116]	; 0x74
 8011fd2:	e002      	b.n	8011fda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	4a46      	ldr	r2, [pc, #280]	; (80120f0 <UART_Start_Receive_IT+0x238>)
 8011fd8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d01a      	beq.n	8012018 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fea:	e853 3f00 	ldrex	r3, [r3]
 8011fee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	461a      	mov	r2, r3
 8012000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012006:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012008:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801200a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801200c:	e841 2300 	strex	r3, r2, [r1]
 8012010:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1e4      	bne.n	8011fe2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	3308      	adds	r3, #8
 801201e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012022:	e853 3f00 	ldrex	r3, [r3]
 8012026:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801202e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	3308      	adds	r3, #8
 8012036:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012038:	64ba      	str	r2, [r7, #72]	; 0x48
 801203a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801203c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801203e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012040:	e841 2300 	strex	r3, r2, [r1]
 8012044:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012048:	2b00      	cmp	r3, #0
 801204a:	d1e5      	bne.n	8012018 <UART_Start_Receive_IT+0x160>
 801204c:	e046      	b.n	80120dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	689b      	ldr	r3, [r3, #8]
 8012052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012056:	d107      	bne.n	8012068 <UART_Start_Receive_IT+0x1b0>
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d103      	bne.n	8012068 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	4a24      	ldr	r2, [pc, #144]	; (80120f4 <UART_Start_Receive_IT+0x23c>)
 8012064:	675a      	str	r2, [r3, #116]	; 0x74
 8012066:	e002      	b.n	801206e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	4a23      	ldr	r2, [pc, #140]	; (80120f8 <UART_Start_Receive_IT+0x240>)
 801206c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	691b      	ldr	r3, [r3, #16]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d019      	beq.n	80120aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207e:	e853 3f00 	ldrex	r3, [r3]
 8012082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012086:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801208a:	677b      	str	r3, [r7, #116]	; 0x74
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	461a      	mov	r2, r3
 8012092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012094:	637b      	str	r3, [r7, #52]	; 0x34
 8012096:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801209a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801209c:	e841 2300 	strex	r3, r2, [r1]
 80120a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1e6      	bne.n	8012076 <UART_Start_Receive_IT+0x1be>
 80120a8:	e018      	b.n	80120dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	e853 3f00 	ldrex	r3, [r3]
 80120b6:	613b      	str	r3, [r7, #16]
   return(result);
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	f043 0320 	orr.w	r3, r3, #32
 80120be:	67bb      	str	r3, [r7, #120]	; 0x78
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	461a      	mov	r2, r3
 80120c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120c8:	623b      	str	r3, [r7, #32]
 80120ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120cc:	69f9      	ldr	r1, [r7, #28]
 80120ce:	6a3a      	ldr	r2, [r7, #32]
 80120d0:	e841 2300 	strex	r3, r2, [r1]
 80120d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1e6      	bne.n	80120aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80120dc:	2300      	movs	r3, #0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	378c      	adds	r7, #140	; 0x8c
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr
 80120ea:	bf00      	nop
 80120ec:	0801291d 	.word	0x0801291d
 80120f0:	080125bd 	.word	0x080125bd
 80120f4:	08012405 	.word	0x08012405
 80120f8:	0801224d 	.word	0x0801224d

080120fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80120fc:	b480      	push	{r7}
 80120fe:	b095      	sub	sp, #84	; 0x54
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210c:	e853 3f00 	ldrex	r3, [r3]
 8012110:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012118:	64fb      	str	r3, [r7, #76]	; 0x4c
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	461a      	mov	r2, r3
 8012120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012122:	643b      	str	r3, [r7, #64]	; 0x40
 8012124:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012126:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801212a:	e841 2300 	strex	r3, r2, [r1]
 801212e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1e6      	bne.n	8012104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	3308      	adds	r3, #8
 801213c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801213e:	6a3b      	ldr	r3, [r7, #32]
 8012140:	e853 3f00 	ldrex	r3, [r3]
 8012144:	61fb      	str	r3, [r7, #28]
   return(result);
 8012146:	69fa      	ldr	r2, [r7, #28]
 8012148:	4b1e      	ldr	r3, [pc, #120]	; (80121c4 <UART_EndRxTransfer+0xc8>)
 801214a:	4013      	ands	r3, r2
 801214c:	64bb      	str	r3, [r7, #72]	; 0x48
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	3308      	adds	r3, #8
 8012154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801215a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801215c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801215e:	e841 2300 	strex	r3, r2, [r1]
 8012162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1e5      	bne.n	8012136 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801216e:	2b01      	cmp	r3, #1
 8012170:	d118      	bne.n	80121a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	e853 3f00 	ldrex	r3, [r3]
 801217e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	f023 0310 	bic.w	r3, r3, #16
 8012186:	647b      	str	r3, [r7, #68]	; 0x44
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	461a      	mov	r2, r3
 801218e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012190:	61bb      	str	r3, [r7, #24]
 8012192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012194:	6979      	ldr	r1, [r7, #20]
 8012196:	69ba      	ldr	r2, [r7, #24]
 8012198:	e841 2300 	strex	r3, r2, [r1]
 801219c:	613b      	str	r3, [r7, #16]
   return(result);
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d1e6      	bne.n	8012172 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2220      	movs	r2, #32
 80121a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2200      	movs	r2, #0
 80121b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80121b8:	bf00      	nop
 80121ba:	3754      	adds	r7, #84	; 0x54
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr
 80121c4:	effffffe 	.word	0xeffffffe

080121c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2200      	movs	r2, #0
 80121da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2200      	movs	r2, #0
 80121e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f7fe ff2e 	bl	8011048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121ec:	bf00      	nop
 80121ee:	3710      	adds	r7, #16
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b088      	sub	sp, #32
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	e853 3f00 	ldrex	r3, [r3]
 8012208:	60bb      	str	r3, [r7, #8]
   return(result);
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012210:	61fb      	str	r3, [r7, #28]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	461a      	mov	r2, r3
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	61bb      	str	r3, [r7, #24]
 801221c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801221e:	6979      	ldr	r1, [r7, #20]
 8012220:	69ba      	ldr	r2, [r7, #24]
 8012222:	e841 2300 	strex	r3, r2, [r1]
 8012226:	613b      	str	r3, [r7, #16]
   return(result);
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1e6      	bne.n	80121fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2220      	movs	r2, #32
 8012232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7fe fef9 	bl	8011034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012242:	bf00      	nop
 8012244:	3720      	adds	r7, #32
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
	...

0801224c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b09c      	sub	sp, #112	; 0x70
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801225a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012264:	2b22      	cmp	r3, #34	; 0x22
 8012266:	f040 80be 	bne.w	80123e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012270:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012274:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012278:	b2d9      	uxtb	r1, r3
 801227a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801227e:	b2da      	uxtb	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012284:	400a      	ands	r2, r1
 8012286:	b2d2      	uxtb	r2, r2
 8012288:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801228e:	1c5a      	adds	r2, r3, #1
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801229a:	b29b      	uxth	r3, r3
 801229c:	3b01      	subs	r3, #1
 801229e:	b29a      	uxth	r2, r3
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f040 80a1 	bne.w	80123f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122bc:	e853 3f00 	ldrex	r3, [r3]
 80122c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80122c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	461a      	mov	r2, r3
 80122d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80122d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80122d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80122da:	e841 2300 	strex	r3, r2, [r1]
 80122de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80122e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1e6      	bne.n	80122b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3308      	adds	r3, #8
 80122ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f0:	e853 3f00 	ldrex	r3, [r3]
 80122f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80122f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f8:	f023 0301 	bic.w	r3, r3, #1
 80122fc:	667b      	str	r3, [r7, #100]	; 0x64
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	3308      	adds	r3, #8
 8012304:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012306:	647a      	str	r2, [r7, #68]	; 0x44
 8012308:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801230a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801230c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801230e:	e841 2300 	strex	r3, r2, [r1]
 8012312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1e5      	bne.n	80122e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2220      	movs	r2, #32
 801231e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	4a33      	ldr	r2, [pc, #204]	; (8012400 <UART_RxISR_8BIT+0x1b4>)
 8012334:	4293      	cmp	r3, r2
 8012336:	d01f      	beq.n	8012378 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012342:	2b00      	cmp	r3, #0
 8012344:	d018      	beq.n	8012378 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	e853 3f00 	ldrex	r3, [r3]
 8012352:	623b      	str	r3, [r7, #32]
   return(result);
 8012354:	6a3b      	ldr	r3, [r7, #32]
 8012356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801235a:	663b      	str	r3, [r7, #96]	; 0x60
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	461a      	mov	r2, r3
 8012362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012364:	633b      	str	r3, [r7, #48]	; 0x30
 8012366:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801236a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801236c:	e841 2300 	strex	r3, r2, [r1]
 8012370:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1e6      	bne.n	8012346 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801237c:	2b01      	cmp	r3, #1
 801237e:	d12e      	bne.n	80123de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	e853 3f00 	ldrex	r3, [r3]
 8012392:	60fb      	str	r3, [r7, #12]
   return(result);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f023 0310 	bic.w	r3, r3, #16
 801239a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	461a      	mov	r2, r3
 80123a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123a4:	61fb      	str	r3, [r7, #28]
 80123a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a8:	69b9      	ldr	r1, [r7, #24]
 80123aa:	69fa      	ldr	r2, [r7, #28]
 80123ac:	e841 2300 	strex	r3, r2, [r1]
 80123b0:	617b      	str	r3, [r7, #20]
   return(result);
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d1e6      	bne.n	8012386 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	69db      	ldr	r3, [r3, #28]
 80123be:	f003 0310 	and.w	r3, r3, #16
 80123c2:	2b10      	cmp	r3, #16
 80123c4:	d103      	bne.n	80123ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2210      	movs	r2, #16
 80123cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123d4:	4619      	mov	r1, r3
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7fe fe40 	bl	801105c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123dc:	e00b      	b.n	80123f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7ef f8ca 	bl	8001578 <HAL_UART_RxCpltCallback>
}
 80123e4:	e007      	b.n	80123f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	699a      	ldr	r2, [r3, #24]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f042 0208 	orr.w	r2, r2, #8
 80123f4:	619a      	str	r2, [r3, #24]
}
 80123f6:	bf00      	nop
 80123f8:	3770      	adds	r7, #112	; 0x70
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	58000c00 	.word	0x58000c00

08012404 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b09c      	sub	sp, #112	; 0x70
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012412:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801241c:	2b22      	cmp	r3, #34	; 0x22
 801241e:	f040 80be 	bne.w	801259e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012428:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012430:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012432:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012436:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801243a:	4013      	ands	r3, r2
 801243c:	b29a      	uxth	r2, r3
 801243e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012440:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012446:	1c9a      	adds	r2, r3, #2
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012452:	b29b      	uxth	r3, r3
 8012454:	3b01      	subs	r3, #1
 8012456:	b29a      	uxth	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012464:	b29b      	uxth	r3, r3
 8012466:	2b00      	cmp	r3, #0
 8012468:	f040 80a1 	bne.w	80125ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012474:	e853 3f00 	ldrex	r3, [r3]
 8012478:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801247a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801247c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012480:	667b      	str	r3, [r7, #100]	; 0x64
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	461a      	mov	r2, r3
 8012488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801248a:	657b      	str	r3, [r7, #84]	; 0x54
 801248c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801248e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012492:	e841 2300 	strex	r3, r2, [r1]
 8012496:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1e6      	bne.n	801246c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	3308      	adds	r3, #8
 80124a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a8:	e853 3f00 	ldrex	r3, [r3]
 80124ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80124ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b0:	f023 0301 	bic.w	r3, r3, #1
 80124b4:	663b      	str	r3, [r7, #96]	; 0x60
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	3308      	adds	r3, #8
 80124bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80124be:	643a      	str	r2, [r7, #64]	; 0x40
 80124c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80124c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124c6:	e841 2300 	strex	r3, r2, [r1]
 80124ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80124cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1e5      	bne.n	801249e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2220      	movs	r2, #32
 80124d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2200      	movs	r2, #0
 80124de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a33      	ldr	r2, [pc, #204]	; (80125b8 <UART_RxISR_16BIT+0x1b4>)
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d01f      	beq.n	8012530 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d018      	beq.n	8012530 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012504:	6a3b      	ldr	r3, [r7, #32]
 8012506:	e853 3f00 	ldrex	r3, [r3]
 801250a:	61fb      	str	r3, [r7, #28]
   return(result);
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	461a      	mov	r2, r3
 801251a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801251c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801251e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012524:	e841 2300 	strex	r3, r2, [r1]
 8012528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252c:	2b00      	cmp	r3, #0
 801252e:	d1e6      	bne.n	80124fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012534:	2b01      	cmp	r3, #1
 8012536:	d12e      	bne.n	8012596 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2200      	movs	r2, #0
 801253c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	e853 3f00 	ldrex	r3, [r3]
 801254a:	60bb      	str	r3, [r7, #8]
   return(result);
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	f023 0310 	bic.w	r3, r3, #16
 8012552:	65bb      	str	r3, [r7, #88]	; 0x58
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	461a      	mov	r2, r3
 801255a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801255c:	61bb      	str	r3, [r7, #24]
 801255e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012560:	6979      	ldr	r1, [r7, #20]
 8012562:	69ba      	ldr	r2, [r7, #24]
 8012564:	e841 2300 	strex	r3, r2, [r1]
 8012568:	613b      	str	r3, [r7, #16]
   return(result);
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d1e6      	bne.n	801253e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	69db      	ldr	r3, [r3, #28]
 8012576:	f003 0310 	and.w	r3, r3, #16
 801257a:	2b10      	cmp	r3, #16
 801257c:	d103      	bne.n	8012586 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2210      	movs	r2, #16
 8012584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801258c:	4619      	mov	r1, r3
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7fe fd64 	bl	801105c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012594:	e00b      	b.n	80125ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7ee ffee 	bl	8001578 <HAL_UART_RxCpltCallback>
}
 801259c:	e007      	b.n	80125ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	699a      	ldr	r2, [r3, #24]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f042 0208 	orr.w	r2, r2, #8
 80125ac:	619a      	str	r2, [r3, #24]
}
 80125ae:	bf00      	nop
 80125b0:	3770      	adds	r7, #112	; 0x70
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	58000c00 	.word	0x58000c00

080125bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b0ac      	sub	sp, #176	; 0xb0
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	69db      	ldr	r3, [r3, #28]
 80125d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125f2:	2b22      	cmp	r3, #34	; 0x22
 80125f4:	f040 8180 	bne.w	80128f8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80125fe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012602:	e123      	b.n	801284c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801260a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801260e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012612:	b2d9      	uxtb	r1, r3
 8012614:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012618:	b2da      	uxtb	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801261e:	400a      	ands	r2, r1
 8012620:	b2d2      	uxtb	r2, r2
 8012622:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012628:	1c5a      	adds	r2, r3, #1
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012634:	b29b      	uxth	r3, r3
 8012636:	3b01      	subs	r3, #1
 8012638:	b29a      	uxth	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	69db      	ldr	r3, [r3, #28]
 8012646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801264a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801264e:	f003 0307 	and.w	r3, r3, #7
 8012652:	2b00      	cmp	r3, #0
 8012654:	d053      	beq.n	80126fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801265a:	f003 0301 	and.w	r3, r3, #1
 801265e:	2b00      	cmp	r3, #0
 8012660:	d011      	beq.n	8012686 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00b      	beq.n	8012686 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2201      	movs	r2, #1
 8012674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801267c:	f043 0201 	orr.w	r2, r3, #1
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801268a:	f003 0302 	and.w	r3, r3, #2
 801268e:	2b00      	cmp	r3, #0
 8012690:	d011      	beq.n	80126b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012696:	f003 0301 	and.w	r3, r3, #1
 801269a:	2b00      	cmp	r3, #0
 801269c:	d00b      	beq.n	80126b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2202      	movs	r2, #2
 80126a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126ac:	f043 0204 	orr.w	r2, r3, #4
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126ba:	f003 0304 	and.w	r3, r3, #4
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d011      	beq.n	80126e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80126c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126c6:	f003 0301 	and.w	r3, r3, #1
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00b      	beq.n	80126e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2204      	movs	r2, #4
 80126d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126dc:	f043 0202 	orr.w	r2, r3, #2
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d006      	beq.n	80126fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7fe fca9 	bl	8011048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2200      	movs	r2, #0
 80126fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012704:	b29b      	uxth	r3, r3
 8012706:	2b00      	cmp	r3, #0
 8012708:	f040 80a0 	bne.w	801284c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012714:	e853 3f00 	ldrex	r3, [r3]
 8012718:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	461a      	mov	r2, r3
 801272a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801272e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012730:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012732:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012734:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012736:	e841 2300 	strex	r3, r2, [r1]
 801273a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801273c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801273e:	2b00      	cmp	r3, #0
 8012740:	d1e4      	bne.n	801270c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	3308      	adds	r3, #8
 8012748:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801274a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801274c:	e853 3f00 	ldrex	r3, [r3]
 8012750:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012754:	4b6e      	ldr	r3, [pc, #440]	; (8012910 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012756:	4013      	ands	r3, r2
 8012758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	3308      	adds	r3, #8
 8012762:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012766:	66ba      	str	r2, [r7, #104]	; 0x68
 8012768:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801276a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801276c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801276e:	e841 2300 	strex	r3, r2, [r1]
 8012772:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012776:	2b00      	cmp	r3, #0
 8012778:	d1e3      	bne.n	8012742 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2220      	movs	r2, #32
 801277e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	4a60      	ldr	r2, [pc, #384]	; (8012914 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012794:	4293      	cmp	r3, r2
 8012796:	d021      	beq.n	80127dc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d01a      	beq.n	80127dc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127ae:	e853 3f00 	ldrex	r3, [r3]
 80127b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80127b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80127ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	461a      	mov	r2, r3
 80127c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80127c8:	657b      	str	r3, [r7, #84]	; 0x54
 80127ca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80127d0:	e841 2300 	strex	r3, r2, [r1]
 80127d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80127d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d1e4      	bne.n	80127a6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d130      	bne.n	8012846 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127f2:	e853 3f00 	ldrex	r3, [r3]
 80127f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80127f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127fa:	f023 0310 	bic.w	r3, r3, #16
 80127fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	461a      	mov	r2, r3
 8012808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801280c:	643b      	str	r3, [r7, #64]	; 0x40
 801280e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012814:	e841 2300 	strex	r3, r2, [r1]
 8012818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281c:	2b00      	cmp	r3, #0
 801281e:	d1e4      	bne.n	80127ea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	69db      	ldr	r3, [r3, #28]
 8012826:	f003 0310 	and.w	r3, r3, #16
 801282a:	2b10      	cmp	r3, #16
 801282c:	d103      	bne.n	8012836 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2210      	movs	r2, #16
 8012834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801283c:	4619      	mov	r1, r3
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f7fe fc0c 	bl	801105c <HAL_UARTEx_RxEventCallback>
 8012844:	e002      	b.n	801284c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7ee fe96 	bl	8001578 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801284c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012850:	2b00      	cmp	r3, #0
 8012852:	d006      	beq.n	8012862 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012858:	f003 0320 	and.w	r3, r3, #32
 801285c:	2b00      	cmp	r3, #0
 801285e:	f47f aed1 	bne.w	8012604 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012868:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801286c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012870:	2b00      	cmp	r3, #0
 8012872:	d049      	beq.n	8012908 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801287a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801287e:	429a      	cmp	r2, r3
 8012880:	d242      	bcs.n	8012908 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	3308      	adds	r3, #8
 8012888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801288a:	6a3b      	ldr	r3, [r7, #32]
 801288c:	e853 3f00 	ldrex	r3, [r3]
 8012890:	61fb      	str	r3, [r7, #28]
   return(result);
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	3308      	adds	r3, #8
 80128a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80128a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80128a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80128ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128ae:	e841 2300 	strex	r3, r2, [r1]
 80128b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80128b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d1e3      	bne.n	8012882 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	4a16      	ldr	r2, [pc, #88]	; (8012918 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80128be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	e853 3f00 	ldrex	r3, [r3]
 80128cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	f043 0320 	orr.w	r3, r3, #32
 80128d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	461a      	mov	r2, r3
 80128de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128e2:	61bb      	str	r3, [r7, #24]
 80128e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e6:	6979      	ldr	r1, [r7, #20]
 80128e8:	69ba      	ldr	r2, [r7, #24]
 80128ea:	e841 2300 	strex	r3, r2, [r1]
 80128ee:	613b      	str	r3, [r7, #16]
   return(result);
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d1e4      	bne.n	80128c0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80128f6:	e007      	b.n	8012908 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	699a      	ldr	r2, [r3, #24]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f042 0208 	orr.w	r2, r2, #8
 8012906:	619a      	str	r2, [r3, #24]
}
 8012908:	bf00      	nop
 801290a:	37b0      	adds	r7, #176	; 0xb0
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	effffffe 	.word	0xeffffffe
 8012914:	58000c00 	.word	0x58000c00
 8012918:	0801224d 	.word	0x0801224d

0801291c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b0ae      	sub	sp, #184	; 0xb8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801292a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	69db      	ldr	r3, [r3, #28]
 8012934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	689b      	ldr	r3, [r3, #8]
 8012948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012952:	2b22      	cmp	r3, #34	; 0x22
 8012954:	f040 8184 	bne.w	8012c60 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801295e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012962:	e127      	b.n	8012bb4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801296a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012976:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801297a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801297e:	4013      	ands	r3, r2
 8012980:	b29a      	uxth	r2, r3
 8012982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012986:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801298c:	1c9a      	adds	r2, r3, #2
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012998:	b29b      	uxth	r3, r3
 801299a:	3b01      	subs	r3, #1
 801299c:	b29a      	uxth	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	69db      	ldr	r3, [r3, #28]
 80129aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80129ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129b2:	f003 0307 	and.w	r3, r3, #7
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d053      	beq.n	8012a62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80129ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129be:	f003 0301 	and.w	r3, r3, #1
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d011      	beq.n	80129ea <UART_RxISR_16BIT_FIFOEN+0xce>
 80129c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00b      	beq.n	80129ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	2201      	movs	r2, #1
 80129d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129e0:	f043 0201 	orr.w	r2, r3, #1
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129ee:	f003 0302 	and.w	r3, r3, #2
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d011      	beq.n	8012a1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80129f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80129fa:	f003 0301 	and.w	r3, r3, #1
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d00b      	beq.n	8012a1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	2202      	movs	r2, #2
 8012a08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a10:	f043 0204 	orr.w	r2, r3, #4
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a1e:	f003 0304 	and.w	r3, r3, #4
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d011      	beq.n	8012a4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a2a:	f003 0301 	and.w	r3, r3, #1
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d00b      	beq.n	8012a4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	2204      	movs	r2, #4
 8012a38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a40:	f043 0202 	orr.w	r2, r3, #2
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d006      	beq.n	8012a62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7fe faf7 	bl	8011048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f040 80a2 	bne.w	8012bb4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a78:	e853 3f00 	ldrex	r3, [r3]
 8012a7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012a92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a96:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a9e:	e841 2300 	strex	r3, r2, [r1]
 8012aa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d1e2      	bne.n	8012a70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	3308      	adds	r3, #8
 8012ab0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ab4:	e853 3f00 	ldrex	r3, [r3]
 8012ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012aba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012abc:	4b6e      	ldr	r3, [pc, #440]	; (8012c78 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012abe:	4013      	ands	r3, r2
 8012ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	3308      	adds	r3, #8
 8012aca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ad2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012ad6:	e841 2300 	strex	r3, r2, [r1]
 8012ada:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1e3      	bne.n	8012aaa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2220      	movs	r2, #32
 8012ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2200      	movs	r2, #0
 8012aee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2200      	movs	r2, #0
 8012af4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	4a60      	ldr	r2, [pc, #384]	; (8012c7c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d021      	beq.n	8012b44 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d01a      	beq.n	8012b44 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b16:	e853 3f00 	ldrex	r3, [r3]
 8012b1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b30:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012b36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b38:	e841 2300 	strex	r3, r2, [r1]
 8012b3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d1e4      	bne.n	8012b0e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d130      	bne.n	8012bae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5a:	e853 3f00 	ldrex	r3, [r3]
 8012b5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b62:	f023 0310 	bic.w	r3, r3, #16
 8012b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012b74:	647b      	str	r3, [r7, #68]	; 0x44
 8012b76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b7c:	e841 2300 	strex	r3, r2, [r1]
 8012b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d1e4      	bne.n	8012b52 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	69db      	ldr	r3, [r3, #28]
 8012b8e:	f003 0310 	and.w	r3, r3, #16
 8012b92:	2b10      	cmp	r3, #16
 8012b94:	d103      	bne.n	8012b9e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2210      	movs	r2, #16
 8012b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f7fe fa58 	bl	801105c <HAL_UARTEx_RxEventCallback>
 8012bac:	e002      	b.n	8012bb4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7ee fce2 	bl	8001578 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012bb4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d006      	beq.n	8012bca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012bbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012bc0:	f003 0320 	and.w	r3, r3, #32
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f47f aecd 	bne.w	8012964 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012bd0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012bd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d049      	beq.n	8012c70 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012be2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d242      	bcs.n	8012c70 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	3308      	adds	r3, #8
 8012bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	e853 3f00 	ldrex	r3, [r3]
 8012bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8012bfa:	6a3b      	ldr	r3, [r7, #32]
 8012bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	3308      	adds	r3, #8
 8012c0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012c0e:	633a      	str	r2, [r7, #48]	; 0x30
 8012c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c16:	e841 2300 	strex	r3, r2, [r1]
 8012c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d1e3      	bne.n	8012bea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	4a16      	ldr	r2, [pc, #88]	; (8012c80 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012c26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	e853 3f00 	ldrex	r3, [r3]
 8012c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f043 0320 	orr.w	r3, r3, #32
 8012c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	461a      	mov	r2, r3
 8012c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c4a:	61fb      	str	r3, [r7, #28]
 8012c4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c4e:	69b9      	ldr	r1, [r7, #24]
 8012c50:	69fa      	ldr	r2, [r7, #28]
 8012c52:	e841 2300 	strex	r3, r2, [r1]
 8012c56:	617b      	str	r3, [r7, #20]
   return(result);
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d1e4      	bne.n	8012c28 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c5e:	e007      	b.n	8012c70 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	699a      	ldr	r2, [r3, #24]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f042 0208 	orr.w	r2, r2, #8
 8012c6e:	619a      	str	r2, [r3, #24]
}
 8012c70:	bf00      	nop
 8012c72:	37b8      	adds	r7, #184	; 0xb8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	effffffe 	.word	0xeffffffe
 8012c7c:	58000c00 	.word	0x58000c00
 8012c80:	08012405 	.word	0x08012405

08012c84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012c8c:	bf00      	nop
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b083      	sub	sp, #12
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012ca0:	bf00      	nop
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012cb4:	bf00      	nop
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b089      	sub	sp, #36	; 0x24
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d101      	bne.n	8012cd6 <HAL_UARTEx_EnableStopMode+0x16>
 8012cd2:	2302      	movs	r3, #2
 8012cd4:	e021      	b.n	8012d1a <HAL_UARTEx_EnableStopMode+0x5a>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2201      	movs	r2, #1
 8012cda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	e853 3f00 	ldrex	r3, [r3]
 8012cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	f043 0302 	orr.w	r3, r3, #2
 8012cf2:	61fb      	str	r3, [r7, #28]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	69fb      	ldr	r3, [r7, #28]
 8012cfc:	61bb      	str	r3, [r7, #24]
 8012cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d00:	6979      	ldr	r1, [r7, #20]
 8012d02:	69ba      	ldr	r2, [r7, #24]
 8012d04:	e841 2300 	strex	r3, r2, [r1]
 8012d08:	613b      	str	r3, [r7, #16]
   return(result);
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d1e6      	bne.n	8012cde <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2200      	movs	r2, #0
 8012d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d18:	2300      	movs	r3, #0
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3724      	adds	r7, #36	; 0x24
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d24:	4770      	bx	lr

08012d26 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b084      	sub	sp, #16
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d101      	bne.n	8012d3c <HAL_UARTEx_EnableFifoMode+0x16>
 8012d38:	2302      	movs	r3, #2
 8012d3a:	e02b      	b.n	8012d94 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2224      	movs	r2, #36	; 0x24
 8012d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f022 0201 	bic.w	r2, r2, #1
 8012d62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012d6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012d72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68fa      	ldr	r2, [r7, #12]
 8012d7a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f000 f8c3 	bl	8012f08 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2220      	movs	r2, #32
 8012d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d92:	2300      	movs	r3, #0
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3710      	adds	r7, #16
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b085      	sub	sp, #20
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	d101      	bne.n	8012db2 <HAL_UARTEx_DisableFifoMode+0x16>
 8012dae:	2302      	movs	r3, #2
 8012db0:	e027      	b.n	8012e02 <HAL_UARTEx_DisableFifoMode+0x66>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2201      	movs	r2, #1
 8012db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2224      	movs	r2, #36	; 0x24
 8012dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f022 0201 	bic.w	r2, r2, #1
 8012dd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012de0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	68fa      	ldr	r2, [r7, #12]
 8012dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2220      	movs	r2, #32
 8012df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3714      	adds	r7, #20
 8012e06:	46bd      	mov	sp, r7
 8012e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0c:	4770      	bx	lr

08012e0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b084      	sub	sp, #16
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
 8012e16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d101      	bne.n	8012e26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012e22:	2302      	movs	r3, #2
 8012e24:	e02d      	b.n	8012e82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2201      	movs	r2, #1
 8012e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2224      	movs	r2, #36	; 0x24
 8012e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f022 0201 	bic.w	r2, r2, #1
 8012e4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	689b      	ldr	r3, [r3, #8]
 8012e54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	430a      	orrs	r2, r1
 8012e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f000 f850 	bl	8012f08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2220      	movs	r2, #32
 8012e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e80:	2300      	movs	r3, #0
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}

08012e8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e8a:	b580      	push	{r7, lr}
 8012e8c:	b084      	sub	sp, #16
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
 8012e92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	d101      	bne.n	8012ea2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012e9e:	2302      	movs	r3, #2
 8012ea0:	e02d      	b.n	8012efe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2224      	movs	r2, #36	; 0x24
 8012eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f022 0201 	bic.w	r2, r2, #1
 8012ec8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	689b      	ldr	r3, [r3, #8]
 8012ed0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	683a      	ldr	r2, [r7, #0]
 8012eda:	430a      	orrs	r2, r1
 8012edc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 f812 	bl	8012f08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2220      	movs	r2, #32
 8012ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012efc:	2300      	movs	r3, #0
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3710      	adds	r7, #16
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
	...

08012f08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b085      	sub	sp, #20
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d108      	bne.n	8012f2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2201      	movs	r2, #1
 8012f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012f28:	e031      	b.n	8012f8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012f2a:	2310      	movs	r3, #16
 8012f2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012f2e:	2310      	movs	r3, #16
 8012f30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	689b      	ldr	r3, [r3, #8]
 8012f38:	0e5b      	lsrs	r3, r3, #25
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	f003 0307 	and.w	r3, r3, #7
 8012f40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	0f5b      	lsrs	r3, r3, #29
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	f003 0307 	and.w	r3, r3, #7
 8012f50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012f52:	7bbb      	ldrb	r3, [r7, #14]
 8012f54:	7b3a      	ldrb	r2, [r7, #12]
 8012f56:	4911      	ldr	r1, [pc, #68]	; (8012f9c <UARTEx_SetNbDataToProcess+0x94>)
 8012f58:	5c8a      	ldrb	r2, [r1, r2]
 8012f5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012f5e:	7b3a      	ldrb	r2, [r7, #12]
 8012f60:	490f      	ldr	r1, [pc, #60]	; (8012fa0 <UARTEx_SetNbDataToProcess+0x98>)
 8012f62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012f64:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f70:	7bfb      	ldrb	r3, [r7, #15]
 8012f72:	7b7a      	ldrb	r2, [r7, #13]
 8012f74:	4909      	ldr	r1, [pc, #36]	; (8012f9c <UARTEx_SetNbDataToProcess+0x94>)
 8012f76:	5c8a      	ldrb	r2, [r1, r2]
 8012f78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012f7c:	7b7a      	ldrb	r2, [r7, #13]
 8012f7e:	4908      	ldr	r1, [pc, #32]	; (8012fa0 <UARTEx_SetNbDataToProcess+0x98>)
 8012f80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f82:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012f8e:	bf00      	nop
 8012f90:	3714      	adds	r7, #20
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr
 8012f9a:	bf00      	nop
 8012f9c:	080172a4 	.word	0x080172a4
 8012fa0:	080172ac 	.word	0x080172ac

08012fa4 <__NVIC_SetPriority>:
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	4603      	mov	r3, r0
 8012fac:	6039      	str	r1, [r7, #0]
 8012fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	db0a      	blt.n	8012fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	b2da      	uxtb	r2, r3
 8012fbc:	490c      	ldr	r1, [pc, #48]	; (8012ff0 <__NVIC_SetPriority+0x4c>)
 8012fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fc2:	0112      	lsls	r2, r2, #4
 8012fc4:	b2d2      	uxtb	r2, r2
 8012fc6:	440b      	add	r3, r1
 8012fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012fcc:	e00a      	b.n	8012fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	b2da      	uxtb	r2, r3
 8012fd2:	4908      	ldr	r1, [pc, #32]	; (8012ff4 <__NVIC_SetPriority+0x50>)
 8012fd4:	88fb      	ldrh	r3, [r7, #6]
 8012fd6:	f003 030f 	and.w	r3, r3, #15
 8012fda:	3b04      	subs	r3, #4
 8012fdc:	0112      	lsls	r2, r2, #4
 8012fde:	b2d2      	uxtb	r2, r2
 8012fe0:	440b      	add	r3, r1
 8012fe2:	761a      	strb	r2, [r3, #24]
}
 8012fe4:	bf00      	nop
 8012fe6:	370c      	adds	r7, #12
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fee:	4770      	bx	lr
 8012ff0:	e000e100 	.word	0xe000e100
 8012ff4:	e000ed00 	.word	0xe000ed00

08012ff8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012ffc:	4b05      	ldr	r3, [pc, #20]	; (8013014 <SysTick_Handler+0x1c>)
 8012ffe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013000:	f002 f958 	bl	80152b4 <xTaskGetSchedulerState>
 8013004:	4603      	mov	r3, r0
 8013006:	2b01      	cmp	r3, #1
 8013008:	d001      	beq.n	801300e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801300a:	f002 ff75 	bl	8015ef8 <xPortSysTickHandler>
  }
}
 801300e:	bf00      	nop
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	e000e010 	.word	0xe000e010

08013018 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013018:	b580      	push	{r7, lr}
 801301a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801301c:	2100      	movs	r1, #0
 801301e:	f06f 0004 	mvn.w	r0, #4
 8013022:	f7ff ffbf 	bl	8012fa4 <__NVIC_SetPriority>
#endif
}
 8013026:	bf00      	nop
 8013028:	bd80      	pop	{r7, pc}
	...

0801302c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801302c:	b480      	push	{r7}
 801302e:	b083      	sub	sp, #12
 8013030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013032:	f3ef 8305 	mrs	r3, IPSR
 8013036:	603b      	str	r3, [r7, #0]
  return(result);
 8013038:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801303a:	2b00      	cmp	r3, #0
 801303c:	d003      	beq.n	8013046 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801303e:	f06f 0305 	mvn.w	r3, #5
 8013042:	607b      	str	r3, [r7, #4]
 8013044:	e00c      	b.n	8013060 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013046:	4b0a      	ldr	r3, [pc, #40]	; (8013070 <osKernelInitialize+0x44>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d105      	bne.n	801305a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801304e:	4b08      	ldr	r3, [pc, #32]	; (8013070 <osKernelInitialize+0x44>)
 8013050:	2201      	movs	r2, #1
 8013052:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013054:	2300      	movs	r3, #0
 8013056:	607b      	str	r3, [r7, #4]
 8013058:	e002      	b.n	8013060 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801305e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013060:	687b      	ldr	r3, [r7, #4]
}
 8013062:	4618      	mov	r0, r3
 8013064:	370c      	adds	r7, #12
 8013066:	46bd      	mov	sp, r7
 8013068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306c:	4770      	bx	lr
 801306e:	bf00      	nop
 8013070:	24001eb0 	.word	0x24001eb0

08013074 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801307a:	f3ef 8305 	mrs	r3, IPSR
 801307e:	603b      	str	r3, [r7, #0]
  return(result);
 8013080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013082:	2b00      	cmp	r3, #0
 8013084:	d003      	beq.n	801308e <osKernelStart+0x1a>
    stat = osErrorISR;
 8013086:	f06f 0305 	mvn.w	r3, #5
 801308a:	607b      	str	r3, [r7, #4]
 801308c:	e010      	b.n	80130b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801308e:	4b0b      	ldr	r3, [pc, #44]	; (80130bc <osKernelStart+0x48>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b01      	cmp	r3, #1
 8013094:	d109      	bne.n	80130aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013096:	f7ff ffbf 	bl	8013018 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801309a:	4b08      	ldr	r3, [pc, #32]	; (80130bc <osKernelStart+0x48>)
 801309c:	2202      	movs	r2, #2
 801309e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80130a0:	f001 fc0c 	bl	80148bc <vTaskStartScheduler>
      stat = osOK;
 80130a4:	2300      	movs	r3, #0
 80130a6:	607b      	str	r3, [r7, #4]
 80130a8:	e002      	b.n	80130b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80130aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80130b0:	687b      	ldr	r3, [r7, #4]
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	24001eb0 	.word	0x24001eb0

080130c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08e      	sub	sp, #56	; 0x38
 80130c4:	af04      	add	r7, sp, #16
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80130cc:	2300      	movs	r3, #0
 80130ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130d0:	f3ef 8305 	mrs	r3, IPSR
 80130d4:	617b      	str	r3, [r7, #20]
  return(result);
 80130d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d17e      	bne.n	80131da <osThreadNew+0x11a>
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d07b      	beq.n	80131da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80130e2:	2380      	movs	r3, #128	; 0x80
 80130e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80130e6:	2318      	movs	r3, #24
 80130e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80130ea:	2300      	movs	r3, #0
 80130ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80130ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d045      	beq.n	8013186 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d002      	beq.n	8013108 <osThreadNew+0x48>
        name = attr->name;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	699b      	ldr	r3, [r3, #24]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d002      	beq.n	8013116 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	699b      	ldr	r3, [r3, #24]
 8013114:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013116:	69fb      	ldr	r3, [r7, #28]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d008      	beq.n	801312e <osThreadNew+0x6e>
 801311c:	69fb      	ldr	r3, [r7, #28]
 801311e:	2b38      	cmp	r3, #56	; 0x38
 8013120:	d805      	bhi.n	801312e <osThreadNew+0x6e>
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	f003 0301 	and.w	r3, r3, #1
 801312a:	2b00      	cmp	r3, #0
 801312c:	d001      	beq.n	8013132 <osThreadNew+0x72>
        return (NULL);
 801312e:	2300      	movs	r3, #0
 8013130:	e054      	b.n	80131dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	695b      	ldr	r3, [r3, #20]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d003      	beq.n	8013142 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	695b      	ldr	r3, [r3, #20]
 801313e:	089b      	lsrs	r3, r3, #2
 8013140:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00e      	beq.n	8013168 <osThreadNew+0xa8>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	2b5b      	cmp	r3, #91	; 0x5b
 8013150:	d90a      	bls.n	8013168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013156:	2b00      	cmp	r3, #0
 8013158:	d006      	beq.n	8013168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	695b      	ldr	r3, [r3, #20]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d002      	beq.n	8013168 <osThreadNew+0xa8>
        mem = 1;
 8013162:	2301      	movs	r3, #1
 8013164:	61bb      	str	r3, [r7, #24]
 8013166:	e010      	b.n	801318a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	689b      	ldr	r3, [r3, #8]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d10c      	bne.n	801318a <osThreadNew+0xca>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d108      	bne.n	801318a <osThreadNew+0xca>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d104      	bne.n	801318a <osThreadNew+0xca>
          mem = 0;
 8013180:	2300      	movs	r3, #0
 8013182:	61bb      	str	r3, [r7, #24]
 8013184:	e001      	b.n	801318a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013186:	2300      	movs	r3, #0
 8013188:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801318a:	69bb      	ldr	r3, [r7, #24]
 801318c:	2b01      	cmp	r3, #1
 801318e:	d110      	bne.n	80131b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013198:	9202      	str	r2, [sp, #8]
 801319a:	9301      	str	r3, [sp, #4]
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	9300      	str	r3, [sp, #0]
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	6a3a      	ldr	r2, [r7, #32]
 80131a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	f001 f9b2 	bl	8014510 <xTaskCreateStatic>
 80131ac:	4603      	mov	r3, r0
 80131ae:	613b      	str	r3, [r7, #16]
 80131b0:	e013      	b.n	80131da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d110      	bne.n	80131da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80131b8:	6a3b      	ldr	r3, [r7, #32]
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	f107 0310 	add.w	r3, r7, #16
 80131c0:	9301      	str	r3, [sp, #4]
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	9300      	str	r3, [sp, #0]
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131ca:	68f8      	ldr	r0, [r7, #12]
 80131cc:	f001 f9fd 	bl	80145ca <xTaskCreate>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d001      	beq.n	80131da <osThreadNew+0x11a>
            hTask = NULL;
 80131d6:	2300      	movs	r3, #0
 80131d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80131da:	693b      	ldr	r3, [r7, #16]
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3728      	adds	r7, #40	; 0x28
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80131e4:	b480      	push	{r7}
 80131e6:	b083      	sub	sp, #12
 80131e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131ea:	f3ef 8305 	mrs	r3, IPSR
 80131ee:	603b      	str	r3, [r7, #0]
  return(result);
 80131f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d003      	beq.n	80131fe <osThreadYield+0x1a>
    stat = osErrorISR;
 80131f6:	f06f 0305 	mvn.w	r3, #5
 80131fa:	607b      	str	r3, [r7, #4]
 80131fc:	e009      	b.n	8013212 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80131fe:	2300      	movs	r3, #0
 8013200:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013202:	4b07      	ldr	r3, [pc, #28]	; (8013220 <osThreadYield+0x3c>)
 8013204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	f3bf 8f4f 	dsb	sy
 801320e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013212:	687b      	ldr	r3, [r7, #4]
}
 8013214:	4618      	mov	r0, r3
 8013216:	370c      	adds	r7, #12
 8013218:	46bd      	mov	sp, r7
 801321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321e:	4770      	bx	lr
 8013220:	e000ed04 	.word	0xe000ed04

08013224 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801322c:	f3ef 8305 	mrs	r3, IPSR
 8013230:	60bb      	str	r3, [r7, #8]
  return(result);
 8013232:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013234:	2b00      	cmp	r3, #0
 8013236:	d003      	beq.n	8013240 <osDelay+0x1c>
    stat = osErrorISR;
 8013238:	f06f 0305 	mvn.w	r3, #5
 801323c:	60fb      	str	r3, [r7, #12]
 801323e:	e007      	b.n	8013250 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013240:	2300      	movs	r3, #0
 8013242:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d002      	beq.n	8013250 <osDelay+0x2c>
      vTaskDelay(ticks);
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f001 fb02 	bl	8014854 <vTaskDelay>
    }
  }

  return (stat);
 8013250:	68fb      	ldr	r3, [r7, #12]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3710      	adds	r7, #16
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801325a:	b580      	push	{r7, lr}
 801325c:	b086      	sub	sp, #24
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013262:	2300      	movs	r3, #0
 8013264:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013266:	f3ef 8305 	mrs	r3, IPSR
 801326a:	60fb      	str	r3, [r7, #12]
  return(result);
 801326c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801326e:	2b00      	cmp	r3, #0
 8013270:	d12d      	bne.n	80132ce <osEventFlagsNew+0x74>
    mem = -1;
 8013272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013276:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d015      	beq.n	80132aa <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d006      	beq.n	8013294 <osEventFlagsNew+0x3a>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	2b1f      	cmp	r3, #31
 801328c:	d902      	bls.n	8013294 <osEventFlagsNew+0x3a>
        mem = 1;
 801328e:	2301      	movs	r3, #1
 8013290:	613b      	str	r3, [r7, #16]
 8013292:	e00c      	b.n	80132ae <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d108      	bne.n	80132ae <osEventFlagsNew+0x54>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d104      	bne.n	80132ae <osEventFlagsNew+0x54>
          mem = 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	613b      	str	r3, [r7, #16]
 80132a8:	e001      	b.n	80132ae <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80132aa:	2300      	movs	r3, #0
 80132ac:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d106      	bne.n	80132c2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	689b      	ldr	r3, [r3, #8]
 80132b8:	4618      	mov	r0, r3
 80132ba:	f000 f91d 	bl	80134f8 <xEventGroupCreateStatic>
 80132be:	6178      	str	r0, [r7, #20]
 80132c0:	e005      	b.n	80132ce <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d102      	bne.n	80132ce <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80132c8:	f000 f94d 	bl	8013566 <xEventGroupCreate>
 80132cc:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80132ce:	697b      	ldr	r3, [r7, #20]
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3718      	adds	r7, #24
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80132d8:	b580      	push	{r7, lr}
 80132da:	b086      	sub	sp, #24
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d004      	beq.n	80132f6 <osEventFlagsSet+0x1e>
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d003      	beq.n	80132fe <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80132f6:	f06f 0303 	mvn.w	r3, #3
 80132fa:	617b      	str	r3, [r7, #20]
 80132fc:	e028      	b.n	8013350 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132fe:	f3ef 8305 	mrs	r3, IPSR
 8013302:	60fb      	str	r3, [r7, #12]
  return(result);
 8013304:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013306:	2b00      	cmp	r3, #0
 8013308:	d01d      	beq.n	8013346 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801330a:	2300      	movs	r3, #0
 801330c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801330e:	f107 0308 	add.w	r3, r7, #8
 8013312:	461a      	mov	r2, r3
 8013314:	6839      	ldr	r1, [r7, #0]
 8013316:	6938      	ldr	r0, [r7, #16]
 8013318:	f000 fb46 	bl	80139a8 <xEventGroupSetBitsFromISR>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d103      	bne.n	801332a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013322:	f06f 0302 	mvn.w	r3, #2
 8013326:	617b      	str	r3, [r7, #20]
 8013328:	e012      	b.n	8013350 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00d      	beq.n	8013350 <osEventFlagsSet+0x78>
 8013334:	4b09      	ldr	r3, [pc, #36]	; (801335c <osEventFlagsSet+0x84>)
 8013336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801333a:	601a      	str	r2, [r3, #0]
 801333c:	f3bf 8f4f 	dsb	sy
 8013340:	f3bf 8f6f 	isb	sy
 8013344:	e004      	b.n	8013350 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013346:	6839      	ldr	r1, [r7, #0]
 8013348:	6938      	ldr	r0, [r7, #16]
 801334a:	f000 fa65 	bl	8013818 <xEventGroupSetBits>
 801334e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013350:	697b      	ldr	r3, [r7, #20]
}
 8013352:	4618      	mov	r0, r3
 8013354:	3718      	adds	r7, #24
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	e000ed04 	.word	0xe000ed04

08013360 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d004      	beq.n	801337e <osEventFlagsClear+0x1e>
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801337a:	2b00      	cmp	r3, #0
 801337c:	d003      	beq.n	8013386 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 801337e:	f06f 0303 	mvn.w	r3, #3
 8013382:	617b      	str	r3, [r7, #20]
 8013384:	e019      	b.n	80133ba <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013386:	f3ef 8305 	mrs	r3, IPSR
 801338a:	60fb      	str	r3, [r7, #12]
  return(result);
 801338c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801338e:	2b00      	cmp	r3, #0
 8013390:	d00e      	beq.n	80133b0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013392:	6938      	ldr	r0, [r7, #16]
 8013394:	f000 fa1c 	bl	80137d0 <xEventGroupGetBitsFromISR>
 8013398:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801339a:	6839      	ldr	r1, [r7, #0]
 801339c:	6938      	ldr	r0, [r7, #16]
 801339e:	f000 fa03 	bl	80137a8 <xEventGroupClearBitsFromISR>
 80133a2:	4603      	mov	r3, r0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d108      	bne.n	80133ba <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80133a8:	f06f 0302 	mvn.w	r3, #2
 80133ac:	617b      	str	r3, [r7, #20]
 80133ae:	e004      	b.n	80133ba <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	6938      	ldr	r0, [r7, #16]
 80133b4:	f000 f9c0 	bl	8013738 <xEventGroupClearBits>
 80133b8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80133ba:	697b      	ldr	r3, [r7, #20]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3718      	adds	r7, #24
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b08c      	sub	sp, #48	; 0x30
 80133c8:	af02      	add	r7, sp, #8
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	607a      	str	r2, [r7, #4]
 80133d0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d004      	beq.n	80133e6 <osEventFlagsWait+0x22>
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d003      	beq.n	80133ee <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80133e6:	f06f 0303 	mvn.w	r3, #3
 80133ea:	61fb      	str	r3, [r7, #28]
 80133ec:	e04b      	b.n	8013486 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133ee:	f3ef 8305 	mrs	r3, IPSR
 80133f2:	617b      	str	r3, [r7, #20]
  return(result);
 80133f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d003      	beq.n	8013402 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80133fa:	f06f 0305 	mvn.w	r3, #5
 80133fe:	61fb      	str	r3, [r7, #28]
 8013400:	e041      	b.n	8013486 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f003 0301 	and.w	r3, r3, #1
 8013408:	2b00      	cmp	r3, #0
 801340a:	d002      	beq.n	8013412 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801340c:	2301      	movs	r3, #1
 801340e:	627b      	str	r3, [r7, #36]	; 0x24
 8013410:	e001      	b.n	8013416 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013412:	2300      	movs	r3, #0
 8013414:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f003 0302 	and.w	r3, r3, #2
 801341c:	2b00      	cmp	r3, #0
 801341e:	d002      	beq.n	8013426 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013420:	2300      	movs	r3, #0
 8013422:	623b      	str	r3, [r7, #32]
 8013424:	e001      	b.n	801342a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013426:	2301      	movs	r3, #1
 8013428:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013430:	6a3a      	ldr	r2, [r7, #32]
 8013432:	68b9      	ldr	r1, [r7, #8]
 8013434:	69b8      	ldr	r0, [r7, #24]
 8013436:	f000 f8b1 	bl	801359c <xEventGroupWaitBits>
 801343a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f003 0301 	and.w	r3, r3, #1
 8013442:	2b00      	cmp	r3, #0
 8013444:	d010      	beq.n	8013468 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013446:	68ba      	ldr	r2, [r7, #8]
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	4013      	ands	r3, r2
 801344c:	68ba      	ldr	r2, [r7, #8]
 801344e:	429a      	cmp	r2, r3
 8013450:	d019      	beq.n	8013486 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d003      	beq.n	8013460 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013458:	f06f 0301 	mvn.w	r3, #1
 801345c:	61fb      	str	r3, [r7, #28]
 801345e:	e012      	b.n	8013486 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013460:	f06f 0302 	mvn.w	r3, #2
 8013464:	61fb      	str	r3, [r7, #28]
 8013466:	e00e      	b.n	8013486 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	69fb      	ldr	r3, [r7, #28]
 801346c:	4013      	ands	r3, r2
 801346e:	2b00      	cmp	r3, #0
 8013470:	d109      	bne.n	8013486 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d003      	beq.n	8013480 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013478:	f06f 0301 	mvn.w	r3, #1
 801347c:	61fb      	str	r3, [r7, #28]
 801347e:	e002      	b.n	8013486 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013480:	f06f 0302 	mvn.w	r3, #2
 8013484:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013486:	69fb      	ldr	r3, [r7, #28]
}
 8013488:	4618      	mov	r0, r3
 801348a:	3728      	adds	r7, #40	; 0x28
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013490:	b480      	push	{r7}
 8013492:	b085      	sub	sp, #20
 8013494:	af00      	add	r7, sp, #0
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	60b9      	str	r1, [r7, #8]
 801349a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	4a07      	ldr	r2, [pc, #28]	; (80134bc <vApplicationGetIdleTaskMemory+0x2c>)
 80134a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	4a06      	ldr	r2, [pc, #24]	; (80134c0 <vApplicationGetIdleTaskMemory+0x30>)
 80134a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2280      	movs	r2, #128	; 0x80
 80134ac:	601a      	str	r2, [r3, #0]
}
 80134ae:	bf00      	nop
 80134b0:	3714      	adds	r7, #20
 80134b2:	46bd      	mov	sp, r7
 80134b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b8:	4770      	bx	lr
 80134ba:	bf00      	nop
 80134bc:	24001eb4 	.word	0x24001eb4
 80134c0:	24001f10 	.word	0x24001f10

080134c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80134c4:	b480      	push	{r7}
 80134c6:	b085      	sub	sp, #20
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	4a07      	ldr	r2, [pc, #28]	; (80134f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80134d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	4a06      	ldr	r2, [pc, #24]	; (80134f4 <vApplicationGetTimerTaskMemory+0x30>)
 80134da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80134e2:	601a      	str	r2, [r3, #0]
}
 80134e4:	bf00      	nop
 80134e6:	3714      	adds	r7, #20
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr
 80134f0:	24002110 	.word	0x24002110
 80134f4:	2400216c 	.word	0x2400216c

080134f8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b086      	sub	sp, #24
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d10a      	bne.n	801351c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350a:	f383 8811 	msr	BASEPRI, r3
 801350e:	f3bf 8f6f 	isb	sy
 8013512:	f3bf 8f4f 	dsb	sy
 8013516:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013518:	bf00      	nop
 801351a:	e7fe      	b.n	801351a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801351c:	2320      	movs	r3, #32
 801351e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	2b20      	cmp	r3, #32
 8013524:	d00a      	beq.n	801353c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801352a:	f383 8811 	msr	BASEPRI, r3
 801352e:	f3bf 8f6f 	isb	sy
 8013532:	f3bf 8f4f 	dsb	sy
 8013536:	60fb      	str	r3, [r7, #12]
}
 8013538:	bf00      	nop
 801353a:	e7fe      	b.n	801353a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d00a      	beq.n	801355c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	2200      	movs	r2, #0
 801354a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	3304      	adds	r3, #4
 8013550:	4618      	mov	r0, r3
 8013552:	f000 fa3d 	bl	80139d0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	2201      	movs	r2, #1
 801355a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801355c:	697b      	ldr	r3, [r7, #20]
	}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}

08013566 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013566:	b580      	push	{r7, lr}
 8013568:	b082      	sub	sp, #8
 801356a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801356c:	2020      	movs	r0, #32
 801356e:	f002 fd53 	bl	8016018 <pvPortMalloc>
 8013572:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d00a      	beq.n	8013590 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2200      	movs	r2, #0
 801357e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	3304      	adds	r3, #4
 8013584:	4618      	mov	r0, r3
 8013586:	f000 fa23 	bl	80139d0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2200      	movs	r2, #0
 801358e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013590:	687b      	ldr	r3, [r7, #4]
	}
 8013592:	4618      	mov	r0, r3
 8013594:	3708      	adds	r7, #8
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
	...

0801359c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b090      	sub	sp, #64	; 0x40
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
 80135a8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80135b2:	2300      	movs	r3, #0
 80135b4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d10a      	bne.n	80135d2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80135bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c0:	f383 8811 	msr	BASEPRI, r3
 80135c4:	f3bf 8f6f 	isb	sy
 80135c8:	f3bf 8f4f 	dsb	sy
 80135cc:	623b      	str	r3, [r7, #32]
}
 80135ce:	bf00      	nop
 80135d0:	e7fe      	b.n	80135d0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d00a      	beq.n	80135f2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80135dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e0:	f383 8811 	msr	BASEPRI, r3
 80135e4:	f3bf 8f6f 	isb	sy
 80135e8:	f3bf 8f4f 	dsb	sy
 80135ec:	61fb      	str	r3, [r7, #28]
}
 80135ee:	bf00      	nop
 80135f0:	e7fe      	b.n	80135f0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d10a      	bne.n	801360e <xEventGroupWaitBits+0x72>
	__asm volatile
 80135f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fc:	f383 8811 	msr	BASEPRI, r3
 8013600:	f3bf 8f6f 	isb	sy
 8013604:	f3bf 8f4f 	dsb	sy
 8013608:	61bb      	str	r3, [r7, #24]
}
 801360a:	bf00      	nop
 801360c:	e7fe      	b.n	801360c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801360e:	f001 fe51 	bl	80152b4 <xTaskGetSchedulerState>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <xEventGroupWaitBits+0x82>
 8013618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <xEventGroupWaitBits+0x86>
 801361e:	2301      	movs	r3, #1
 8013620:	e000      	b.n	8013624 <xEventGroupWaitBits+0x88>
 8013622:	2300      	movs	r3, #0
 8013624:	2b00      	cmp	r3, #0
 8013626:	d10a      	bne.n	801363e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362c:	f383 8811 	msr	BASEPRI, r3
 8013630:	f3bf 8f6f 	isb	sy
 8013634:	f3bf 8f4f 	dsb	sy
 8013638:	617b      	str	r3, [r7, #20]
}
 801363a:	bf00      	nop
 801363c:	e7fe      	b.n	801363c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801363e:	f001 f9a3 	bl	8014988 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	68b9      	ldr	r1, [r7, #8]
 801364c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801364e:	f000 f988 	bl	8013962 <prvTestWaitCondition>
 8013652:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00e      	beq.n	8013678 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801365e:	2300      	movs	r3, #0
 8013660:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d028      	beq.n	80136ba <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	43db      	mvns	r3, r3
 8013670:	401a      	ands	r2, r3
 8013672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013674:	601a      	str	r2, [r3, #0]
 8013676:	e020      	b.n	80136ba <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801367a:	2b00      	cmp	r3, #0
 801367c:	d104      	bne.n	8013688 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013680:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013682:	2301      	movs	r3, #1
 8013684:	633b      	str	r3, [r7, #48]	; 0x30
 8013686:	e018      	b.n	80136ba <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d003      	beq.n	8013696 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013694:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d003      	beq.n	80136a4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801369e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80136a2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80136a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136a6:	1d18      	adds	r0, r3, #4
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ac:	4313      	orrs	r3, r2
 80136ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136b0:	4619      	mov	r1, r3
 80136b2:	f001 fb77 	bl	8014da4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80136b6:	2300      	movs	r3, #0
 80136b8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80136ba:	f001 f973 	bl	80149a4 <xTaskResumeAll>
 80136be:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80136c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d031      	beq.n	801372a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80136c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d107      	bne.n	80136dc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80136cc:	4b19      	ldr	r3, [pc, #100]	; (8013734 <xEventGroupWaitBits+0x198>)
 80136ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136d2:	601a      	str	r2, [r3, #0]
 80136d4:	f3bf 8f4f 	dsb	sy
 80136d8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80136dc:	f001 fe76 	bl	80153cc <uxTaskResetEventItemValue>
 80136e0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80136e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d11a      	bne.n	8013722 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80136ec:	f002 fb72 	bl	8015dd4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80136f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80136f6:	683a      	ldr	r2, [r7, #0]
 80136f8:	68b9      	ldr	r1, [r7, #8]
 80136fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80136fc:	f000 f931 	bl	8013962 <prvTestWaitCondition>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d009      	beq.n	801371a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d006      	beq.n	801371a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801370e:	681a      	ldr	r2, [r3, #0]
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	43db      	mvns	r3, r3
 8013714:	401a      	ands	r2, r3
 8013716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013718:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801371a:	2301      	movs	r3, #1
 801371c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801371e:	f002 fb89 	bl	8015e34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013728:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801372c:	4618      	mov	r0, r3
 801372e:	3740      	adds	r7, #64	; 0x40
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	e000ed04 	.word	0xe000ed04

08013738 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b086      	sub	sp, #24
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d10a      	bne.n	8013762 <xEventGroupClearBits+0x2a>
	__asm volatile
 801374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013750:	f383 8811 	msr	BASEPRI, r3
 8013754:	f3bf 8f6f 	isb	sy
 8013758:	f3bf 8f4f 	dsb	sy
 801375c:	60fb      	str	r3, [r7, #12]
}
 801375e:	bf00      	nop
 8013760:	e7fe      	b.n	8013760 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013768:	2b00      	cmp	r3, #0
 801376a:	d00a      	beq.n	8013782 <xEventGroupClearBits+0x4a>
	__asm volatile
 801376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013770:	f383 8811 	msr	BASEPRI, r3
 8013774:	f3bf 8f6f 	isb	sy
 8013778:	f3bf 8f4f 	dsb	sy
 801377c:	60bb      	str	r3, [r7, #8]
}
 801377e:	bf00      	nop
 8013780:	e7fe      	b.n	8013780 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013782:	f002 fb27 	bl	8015dd4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	43db      	mvns	r3, r3
 8013794:	401a      	ands	r2, r3
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801379a:	f002 fb4b 	bl	8015e34 <vPortExitCritical>

	return uxReturn;
 801379e:	693b      	ldr	r3, [r7, #16]
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3718      	adds	r7, #24
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b084      	sub	sp, #16
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80137b2:	2300      	movs	r3, #0
 80137b4:	683a      	ldr	r2, [r7, #0]
 80137b6:	6879      	ldr	r1, [r7, #4]
 80137b8:	4804      	ldr	r0, [pc, #16]	; (80137cc <xEventGroupClearBitsFromISR+0x24>)
 80137ba:	f002 f9c1 	bl	8015b40 <xTimerPendFunctionCallFromISR>
 80137be:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80137c0:	68fb      	ldr	r3, [r7, #12]
	}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3710      	adds	r7, #16
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	08013949 	.word	0x08013949

080137d0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80137d0:	b480      	push	{r7}
 80137d2:	b089      	sub	sp, #36	; 0x24
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80137dc:	f3ef 8211 	mrs	r2, BASEPRI
 80137e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e4:	f383 8811 	msr	BASEPRI, r3
 80137e8:	f3bf 8f6f 	isb	sy
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	60fa      	str	r2, [r7, #12]
 80137f2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80137f4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80137f6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	617b      	str	r3, [r7, #20]
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013808:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801380a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801380c:	4618      	mov	r0, r3
 801380e:	3724      	adds	r7, #36	; 0x24
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr

08013818 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b08e      	sub	sp, #56	; 0x38
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013822:	2300      	movs	r3, #0
 8013824:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801382a:	2300      	movs	r3, #0
 801382c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d10a      	bne.n	801384a <xEventGroupSetBits+0x32>
	__asm volatile
 8013834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013838:	f383 8811 	msr	BASEPRI, r3
 801383c:	f3bf 8f6f 	isb	sy
 8013840:	f3bf 8f4f 	dsb	sy
 8013844:	613b      	str	r3, [r7, #16]
}
 8013846:	bf00      	nop
 8013848:	e7fe      	b.n	8013848 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00a      	beq.n	801386a <xEventGroupSetBits+0x52>
	__asm volatile
 8013854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013858:	f383 8811 	msr	BASEPRI, r3
 801385c:	f3bf 8f6f 	isb	sy
 8013860:	f3bf 8f4f 	dsb	sy
 8013864:	60fb      	str	r3, [r7, #12]
}
 8013866:	bf00      	nop
 8013868:	e7fe      	b.n	8013868 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386c:	3304      	adds	r3, #4
 801386e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013872:	3308      	adds	r3, #8
 8013874:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013876:	f001 f887 	bl	8014988 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	431a      	orrs	r2, r3
 8013888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801388c:	e03c      	b.n	8013908 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801389a:	2300      	movs	r3, #0
 801389c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138a4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80138a6:	69bb      	ldr	r3, [r7, #24]
 80138a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80138ac:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d108      	bne.n	80138ca <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80138b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	69bb      	ldr	r3, [r7, #24]
 80138be:	4013      	ands	r3, r2
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00b      	beq.n	80138dc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80138c4:	2301      	movs	r3, #1
 80138c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138c8:	e008      	b.n	80138dc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80138ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138cc:	681a      	ldr	r2, [r3, #0]
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	4013      	ands	r3, r2
 80138d2:	69ba      	ldr	r2, [r7, #24]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d101      	bne.n	80138dc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80138d8:	2301      	movs	r3, #1
 80138da:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80138dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d010      	beq.n	8013904 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d003      	beq.n	80138f4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80138ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	4313      	orrs	r3, r2
 80138f2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80138f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80138fc:	4619      	mov	r1, r3
 80138fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013900:	f001 fb1c 	bl	8014f3c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801390a:	6a3b      	ldr	r3, [r7, #32]
 801390c:	429a      	cmp	r2, r3
 801390e:	d1be      	bne.n	801388e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013916:	43db      	mvns	r3, r3
 8013918:	401a      	ands	r2, r3
 801391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801391c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801391e:	f001 f841 	bl	80149a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013924:	681b      	ldr	r3, [r3, #0]
}
 8013926:	4618      	mov	r0, r3
 8013928:	3738      	adds	r7, #56	; 0x38
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}

0801392e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801392e:	b580      	push	{r7, lr}
 8013930:	b082      	sub	sp, #8
 8013932:	af00      	add	r7, sp, #0
 8013934:	6078      	str	r0, [r7, #4]
 8013936:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013938:	6839      	ldr	r1, [r7, #0]
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f7ff ff6c 	bl	8013818 <xEventGroupSetBits>
}
 8013940:	bf00      	nop
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013952:	6839      	ldr	r1, [r7, #0]
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7ff feef 	bl	8013738 <xEventGroupClearBits>
}
 801395a:	bf00      	nop
 801395c:	3708      	adds	r7, #8
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}

08013962 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013962:	b480      	push	{r7}
 8013964:	b087      	sub	sp, #28
 8013966:	af00      	add	r7, sp, #0
 8013968:	60f8      	str	r0, [r7, #12]
 801396a:	60b9      	str	r1, [r7, #8]
 801396c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801396e:	2300      	movs	r3, #0
 8013970:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d107      	bne.n	8013988 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	4013      	ands	r3, r2
 801397e:	2b00      	cmp	r3, #0
 8013980:	d00a      	beq.n	8013998 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013982:	2301      	movs	r3, #1
 8013984:	617b      	str	r3, [r7, #20]
 8013986:	e007      	b.n	8013998 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013988:	68fa      	ldr	r2, [r7, #12]
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	4013      	ands	r3, r2
 801398e:	68ba      	ldr	r2, [r7, #8]
 8013990:	429a      	cmp	r2, r3
 8013992:	d101      	bne.n	8013998 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013994:	2301      	movs	r3, #1
 8013996:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013998:	697b      	ldr	r3, [r7, #20]
}
 801399a:	4618      	mov	r0, r3
 801399c:	371c      	adds	r7, #28
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
	...

080139a8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b086      	sub	sp, #24
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	68ba      	ldr	r2, [r7, #8]
 80139b8:	68f9      	ldr	r1, [r7, #12]
 80139ba:	4804      	ldr	r0, [pc, #16]	; (80139cc <xEventGroupSetBitsFromISR+0x24>)
 80139bc:	f002 f8c0 	bl	8015b40 <xTimerPendFunctionCallFromISR>
 80139c0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80139c2:	697b      	ldr	r3, [r7, #20]
	}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3718      	adds	r7, #24
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	0801392f 	.word	0x0801392f

080139d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80139d0:	b480      	push	{r7}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f103 0208 	add.w	r2, r3, #8
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80139e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f103 0208 	add.w	r2, r3, #8
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f103 0208 	add.w	r2, r3, #8
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013a04:	bf00      	nop
 8013a06:	370c      	adds	r7, #12
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0e:	4770      	bx	lr

08013a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013a10:	b480      	push	{r7}
 8013a12:	b083      	sub	sp, #12
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013a1e:	bf00      	nop
 8013a20:	370c      	adds	r7, #12
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr

08013a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013a2a:	b480      	push	{r7}
 8013a2c:	b085      	sub	sp, #20
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
 8013a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	689a      	ldr	r2, [r3, #8]
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	689b      	ldr	r3, [r3, #8]
 8013a4c:	683a      	ldr	r2, [r7, #0]
 8013a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	683a      	ldr	r2, [r7, #0]
 8013a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	1c5a      	adds	r2, r3, #1
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	601a      	str	r2, [r3, #0]
}
 8013a66:	bf00      	nop
 8013a68:	3714      	adds	r7, #20
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr

08013a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013a72:	b480      	push	{r7}
 8013a74:	b085      	sub	sp, #20
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	6078      	str	r0, [r7, #4]
 8013a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a88:	d103      	bne.n	8013a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	691b      	ldr	r3, [r3, #16]
 8013a8e:	60fb      	str	r3, [r7, #12]
 8013a90:	e00c      	b.n	8013aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	3308      	adds	r3, #8
 8013a96:	60fb      	str	r3, [r7, #12]
 8013a98:	e002      	b.n	8013aa0 <vListInsert+0x2e>
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	60fb      	str	r3, [r7, #12]
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d2f6      	bcs.n	8013a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	685a      	ldr	r2, [r3, #4]
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	683a      	ldr	r2, [r7, #0]
 8013aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	68fa      	ldr	r2, [r7, #12]
 8013ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	683a      	ldr	r2, [r7, #0]
 8013ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	1c5a      	adds	r2, r3, #1
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	601a      	str	r2, [r3, #0]
}
 8013ad8:	bf00      	nop
 8013ada:	3714      	adds	r7, #20
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr

08013ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b085      	sub	sp, #20
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	691b      	ldr	r3, [r3, #16]
 8013af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	6892      	ldr	r2, [r2, #8]
 8013afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	689b      	ldr	r3, [r3, #8]
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	6852      	ldr	r2, [r2, #4]
 8013b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d103      	bne.n	8013b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	689a      	ldr	r2, [r3, #8]
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	1e5a      	subs	r2, r3, #1
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3714      	adds	r7, #20
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr

08013b38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b084      	sub	sp, #16
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10a      	bne.n	8013b62 <xQueueGenericReset+0x2a>
	__asm volatile
 8013b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b50:	f383 8811 	msr	BASEPRI, r3
 8013b54:	f3bf 8f6f 	isb	sy
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	60bb      	str	r3, [r7, #8]
}
 8013b5e:	bf00      	nop
 8013b60:	e7fe      	b.n	8013b60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013b62:	f002 f937 	bl	8015dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	681a      	ldr	r2, [r3, #0]
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b6e:	68f9      	ldr	r1, [r7, #12]
 8013b70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013b72:	fb01 f303 	mul.w	r3, r1, r3
 8013b76:	441a      	add	r2, r3
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681a      	ldr	r2, [r3, #0]
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b92:	3b01      	subs	r3, #1
 8013b94:	68f9      	ldr	r1, [r7, #12]
 8013b96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013b98:	fb01 f303 	mul.w	r3, r1, r3
 8013b9c:	441a      	add	r2, r3
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	22ff      	movs	r2, #255	; 0xff
 8013ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	22ff      	movs	r2, #255	; 0xff
 8013bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d114      	bne.n	8013be2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	691b      	ldr	r3, [r3, #16]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d01a      	beq.n	8013bf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	3310      	adds	r3, #16
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f001 f955 	bl	8014e74 <xTaskRemoveFromEventList>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d012      	beq.n	8013bf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013bd0:	4b0c      	ldr	r3, [pc, #48]	; (8013c04 <xQueueGenericReset+0xcc>)
 8013bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bd6:	601a      	str	r2, [r3, #0]
 8013bd8:	f3bf 8f4f 	dsb	sy
 8013bdc:	f3bf 8f6f 	isb	sy
 8013be0:	e009      	b.n	8013bf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	3310      	adds	r3, #16
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7ff fef2 	bl	80139d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	3324      	adds	r3, #36	; 0x24
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7ff feed 	bl	80139d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013bf6:	f002 f91d 	bl	8015e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013bfa:	2301      	movs	r3, #1
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3710      	adds	r7, #16
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}
 8013c04:	e000ed04 	.word	0xe000ed04

08013c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b08e      	sub	sp, #56	; 0x38
 8013c0c:	af02      	add	r7, sp, #8
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	607a      	str	r2, [r7, #4]
 8013c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10a      	bne.n	8013c32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c20:	f383 8811 	msr	BASEPRI, r3
 8013c24:	f3bf 8f6f 	isb	sy
 8013c28:	f3bf 8f4f 	dsb	sy
 8013c2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013c2e:	bf00      	nop
 8013c30:	e7fe      	b.n	8013c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d10a      	bne.n	8013c4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c3c:	f383 8811 	msr	BASEPRI, r3
 8013c40:	f3bf 8f6f 	isb	sy
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013c4a:	bf00      	nop
 8013c4c:	e7fe      	b.n	8013c4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d002      	beq.n	8013c5a <xQueueGenericCreateStatic+0x52>
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d001      	beq.n	8013c5e <xQueueGenericCreateStatic+0x56>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	e000      	b.n	8013c60 <xQueueGenericCreateStatic+0x58>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d10a      	bne.n	8013c7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c68:	f383 8811 	msr	BASEPRI, r3
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	623b      	str	r3, [r7, #32]
}
 8013c76:	bf00      	nop
 8013c78:	e7fe      	b.n	8013c78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d102      	bne.n	8013c86 <xQueueGenericCreateStatic+0x7e>
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d101      	bne.n	8013c8a <xQueueGenericCreateStatic+0x82>
 8013c86:	2301      	movs	r3, #1
 8013c88:	e000      	b.n	8013c8c <xQueueGenericCreateStatic+0x84>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d10a      	bne.n	8013ca6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c94:	f383 8811 	msr	BASEPRI, r3
 8013c98:	f3bf 8f6f 	isb	sy
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	61fb      	str	r3, [r7, #28]
}
 8013ca2:	bf00      	nop
 8013ca4:	e7fe      	b.n	8013ca4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013ca6:	2350      	movs	r3, #80	; 0x50
 8013ca8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	2b50      	cmp	r3, #80	; 0x50
 8013cae:	d00a      	beq.n	8013cc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb4:	f383 8811 	msr	BASEPRI, r3
 8013cb8:	f3bf 8f6f 	isb	sy
 8013cbc:	f3bf 8f4f 	dsb	sy
 8013cc0:	61bb      	str	r3, [r7, #24]
}
 8013cc2:	bf00      	nop
 8013cc4:	e7fe      	b.n	8013cc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013cc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00d      	beq.n	8013cee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013cda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce0:	9300      	str	r3, [sp, #0]
 8013ce2:	4613      	mov	r3, r2
 8013ce4:	687a      	ldr	r2, [r7, #4]
 8013ce6:	68b9      	ldr	r1, [r7, #8]
 8013ce8:	68f8      	ldr	r0, [r7, #12]
 8013cea:	f000 f805 	bl	8013cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3730      	adds	r7, #48	; 0x30
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	60f8      	str	r0, [r7, #12]
 8013d00:	60b9      	str	r1, [r7, #8]
 8013d02:	607a      	str	r2, [r7, #4]
 8013d04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d103      	bne.n	8013d14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013d0c:	69bb      	ldr	r3, [r7, #24]
 8013d0e:	69ba      	ldr	r2, [r7, #24]
 8013d10:	601a      	str	r2, [r3, #0]
 8013d12:	e002      	b.n	8013d1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013d14:	69bb      	ldr	r3, [r7, #24]
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	68fa      	ldr	r2, [r7, #12]
 8013d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	68ba      	ldr	r2, [r7, #8]
 8013d24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013d26:	2101      	movs	r1, #1
 8013d28:	69b8      	ldr	r0, [r7, #24]
 8013d2a:	f7ff ff05 	bl	8013b38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	78fa      	ldrb	r2, [r7, #3]
 8013d32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013d36:	bf00      	nop
 8013d38:	3710      	adds	r7, #16
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
	...

08013d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b08e      	sub	sp, #56	; 0x38
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
 8013d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d10a      	bne.n	8013d72 <xQueueGenericSend+0x32>
	__asm volatile
 8013d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d60:	f383 8811 	msr	BASEPRI, r3
 8013d64:	f3bf 8f6f 	isb	sy
 8013d68:	f3bf 8f4f 	dsb	sy
 8013d6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013d6e:	bf00      	nop
 8013d70:	e7fe      	b.n	8013d70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d103      	bne.n	8013d80 <xQueueGenericSend+0x40>
 8013d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d101      	bne.n	8013d84 <xQueueGenericSend+0x44>
 8013d80:	2301      	movs	r3, #1
 8013d82:	e000      	b.n	8013d86 <xQueueGenericSend+0x46>
 8013d84:	2300      	movs	r3, #0
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d10a      	bne.n	8013da0 <xQueueGenericSend+0x60>
	__asm volatile
 8013d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d8e:	f383 8811 	msr	BASEPRI, r3
 8013d92:	f3bf 8f6f 	isb	sy
 8013d96:	f3bf 8f4f 	dsb	sy
 8013d9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013d9c:	bf00      	nop
 8013d9e:	e7fe      	b.n	8013d9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	2b02      	cmp	r3, #2
 8013da4:	d103      	bne.n	8013dae <xQueueGenericSend+0x6e>
 8013da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d101      	bne.n	8013db2 <xQueueGenericSend+0x72>
 8013dae:	2301      	movs	r3, #1
 8013db0:	e000      	b.n	8013db4 <xQueueGenericSend+0x74>
 8013db2:	2300      	movs	r3, #0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d10a      	bne.n	8013dce <xQueueGenericSend+0x8e>
	__asm volatile
 8013db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dbc:	f383 8811 	msr	BASEPRI, r3
 8013dc0:	f3bf 8f6f 	isb	sy
 8013dc4:	f3bf 8f4f 	dsb	sy
 8013dc8:	623b      	str	r3, [r7, #32]
}
 8013dca:	bf00      	nop
 8013dcc:	e7fe      	b.n	8013dcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013dce:	f001 fa71 	bl	80152b4 <xTaskGetSchedulerState>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d102      	bne.n	8013dde <xQueueGenericSend+0x9e>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d101      	bne.n	8013de2 <xQueueGenericSend+0xa2>
 8013dde:	2301      	movs	r3, #1
 8013de0:	e000      	b.n	8013de4 <xQueueGenericSend+0xa4>
 8013de2:	2300      	movs	r3, #0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10a      	bne.n	8013dfe <xQueueGenericSend+0xbe>
	__asm volatile
 8013de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dec:	f383 8811 	msr	BASEPRI, r3
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	61fb      	str	r3, [r7, #28]
}
 8013dfa:	bf00      	nop
 8013dfc:	e7fe      	b.n	8013dfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013dfe:	f001 ffe9 	bl	8015dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d302      	bcc.n	8013e14 <xQueueGenericSend+0xd4>
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	2b02      	cmp	r3, #2
 8013e12:	d129      	bne.n	8013e68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013e14:	683a      	ldr	r2, [r7, #0]
 8013e16:	68b9      	ldr	r1, [r7, #8]
 8013e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e1a:	f000 fa0b 	bl	8014234 <prvCopyDataToQueue>
 8013e1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d010      	beq.n	8013e4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2a:	3324      	adds	r3, #36	; 0x24
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f001 f821 	bl	8014e74 <xTaskRemoveFromEventList>
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d013      	beq.n	8013e60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013e38:	4b3f      	ldr	r3, [pc, #252]	; (8013f38 <xQueueGenericSend+0x1f8>)
 8013e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e3e:	601a      	str	r2, [r3, #0]
 8013e40:	f3bf 8f4f 	dsb	sy
 8013e44:	f3bf 8f6f 	isb	sy
 8013e48:	e00a      	b.n	8013e60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d007      	beq.n	8013e60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013e50:	4b39      	ldr	r3, [pc, #228]	; (8013f38 <xQueueGenericSend+0x1f8>)
 8013e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	f3bf 8f4f 	dsb	sy
 8013e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013e60:	f001 ffe8 	bl	8015e34 <vPortExitCritical>
				return pdPASS;
 8013e64:	2301      	movs	r3, #1
 8013e66:	e063      	b.n	8013f30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d103      	bne.n	8013e76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013e6e:	f001 ffe1 	bl	8015e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013e72:	2300      	movs	r3, #0
 8013e74:	e05c      	b.n	8013f30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d106      	bne.n	8013e8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e7c:	f107 0314 	add.w	r3, r7, #20
 8013e80:	4618      	mov	r0, r3
 8013e82:	f001 f8bd 	bl	8015000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013e86:	2301      	movs	r3, #1
 8013e88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013e8a:	f001 ffd3 	bl	8015e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013e8e:	f000 fd7b 	bl	8014988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013e92:	f001 ff9f 	bl	8015dd4 <vPortEnterCritical>
 8013e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e9c:	b25b      	sxtb	r3, r3
 8013e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ea2:	d103      	bne.n	8013eac <xQueueGenericSend+0x16c>
 8013ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013eb2:	b25b      	sxtb	r3, r3
 8013eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eb8:	d103      	bne.n	8013ec2 <xQueueGenericSend+0x182>
 8013eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013ec2:	f001 ffb7 	bl	8015e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ec6:	1d3a      	adds	r2, r7, #4
 8013ec8:	f107 0314 	add.w	r3, r7, #20
 8013ecc:	4611      	mov	r1, r2
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f001 f8ac 	bl	801502c <xTaskCheckForTimeOut>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d124      	bne.n	8013f24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013edc:	f000 faa2 	bl	8014424 <prvIsQueueFull>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d018      	beq.n	8013f18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee8:	3310      	adds	r3, #16
 8013eea:	687a      	ldr	r2, [r7, #4]
 8013eec:	4611      	mov	r1, r2
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f000 ff34 	bl	8014d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ef6:	f000 fa2d 	bl	8014354 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013efa:	f000 fd53 	bl	80149a4 <xTaskResumeAll>
 8013efe:	4603      	mov	r3, r0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	f47f af7c 	bne.w	8013dfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013f06:	4b0c      	ldr	r3, [pc, #48]	; (8013f38 <xQueueGenericSend+0x1f8>)
 8013f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	f3bf 8f4f 	dsb	sy
 8013f12:	f3bf 8f6f 	isb	sy
 8013f16:	e772      	b.n	8013dfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f1a:	f000 fa1b 	bl	8014354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013f1e:	f000 fd41 	bl	80149a4 <xTaskResumeAll>
 8013f22:	e76c      	b.n	8013dfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f26:	f000 fa15 	bl	8014354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013f2a:	f000 fd3b 	bl	80149a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3738      	adds	r7, #56	; 0x38
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	e000ed04 	.word	0xe000ed04

08013f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b090      	sub	sp, #64	; 0x40
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	60b9      	str	r1, [r7, #8]
 8013f46:	607a      	str	r2, [r7, #4]
 8013f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d10a      	bne.n	8013f6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f58:	f383 8811 	msr	BASEPRI, r3
 8013f5c:	f3bf 8f6f 	isb	sy
 8013f60:	f3bf 8f4f 	dsb	sy
 8013f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013f66:	bf00      	nop
 8013f68:	e7fe      	b.n	8013f68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d103      	bne.n	8013f78 <xQueueGenericSendFromISR+0x3c>
 8013f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d101      	bne.n	8013f7c <xQueueGenericSendFromISR+0x40>
 8013f78:	2301      	movs	r3, #1
 8013f7a:	e000      	b.n	8013f7e <xQueueGenericSendFromISR+0x42>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d10a      	bne.n	8013f98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f86:	f383 8811 	msr	BASEPRI, r3
 8013f8a:	f3bf 8f6f 	isb	sy
 8013f8e:	f3bf 8f4f 	dsb	sy
 8013f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013f94:	bf00      	nop
 8013f96:	e7fe      	b.n	8013f96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d103      	bne.n	8013fa6 <xQueueGenericSendFromISR+0x6a>
 8013f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d101      	bne.n	8013faa <xQueueGenericSendFromISR+0x6e>
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	e000      	b.n	8013fac <xQueueGenericSendFromISR+0x70>
 8013faa:	2300      	movs	r3, #0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d10a      	bne.n	8013fc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	623b      	str	r3, [r7, #32]
}
 8013fc2:	bf00      	nop
 8013fc4:	e7fe      	b.n	8013fc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013fc6:	f001 ffe7 	bl	8015f98 <vPortValidateInterruptPriority>
	__asm volatile
 8013fca:	f3ef 8211 	mrs	r2, BASEPRI
 8013fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd2:	f383 8811 	msr	BASEPRI, r3
 8013fd6:	f3bf 8f6f 	isb	sy
 8013fda:	f3bf 8f4f 	dsb	sy
 8013fde:	61fa      	str	r2, [r7, #28]
 8013fe0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8013fe2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013fe4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d302      	bcc.n	8013ff8 <xQueueGenericSendFromISR+0xbc>
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	2b02      	cmp	r3, #2
 8013ff6:	d12f      	bne.n	8014058 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014006:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014008:	683a      	ldr	r2, [r7, #0]
 801400a:	68b9      	ldr	r1, [r7, #8]
 801400c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801400e:	f000 f911 	bl	8014234 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014012:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801401a:	d112      	bne.n	8014042 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014020:	2b00      	cmp	r3, #0
 8014022:	d016      	beq.n	8014052 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014026:	3324      	adds	r3, #36	; 0x24
 8014028:	4618      	mov	r0, r3
 801402a:	f000 ff23 	bl	8014e74 <xTaskRemoveFromEventList>
 801402e:	4603      	mov	r3, r0
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00e      	beq.n	8014052 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d00b      	beq.n	8014052 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2201      	movs	r2, #1
 801403e:	601a      	str	r2, [r3, #0]
 8014040:	e007      	b.n	8014052 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014046:	3301      	adds	r3, #1
 8014048:	b2db      	uxtb	r3, r3
 801404a:	b25a      	sxtb	r2, r3
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014052:	2301      	movs	r3, #1
 8014054:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014056:	e001      	b.n	801405c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014058:	2300      	movs	r3, #0
 801405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801405e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	f383 8811 	msr	BASEPRI, r3
}
 8014066:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801406a:	4618      	mov	r0, r3
 801406c:	3740      	adds	r7, #64	; 0x40
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
	...

08014074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b08c      	sub	sp, #48	; 0x30
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014080:	2300      	movs	r3, #0
 8014082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408a:	2b00      	cmp	r3, #0
 801408c:	d10a      	bne.n	80140a4 <xQueueReceive+0x30>
	__asm volatile
 801408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014092:	f383 8811 	msr	BASEPRI, r3
 8014096:	f3bf 8f6f 	isb	sy
 801409a:	f3bf 8f4f 	dsb	sy
 801409e:	623b      	str	r3, [r7, #32]
}
 80140a0:	bf00      	nop
 80140a2:	e7fe      	b.n	80140a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d103      	bne.n	80140b2 <xQueueReceive+0x3e>
 80140aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d101      	bne.n	80140b6 <xQueueReceive+0x42>
 80140b2:	2301      	movs	r3, #1
 80140b4:	e000      	b.n	80140b8 <xQueueReceive+0x44>
 80140b6:	2300      	movs	r3, #0
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d10a      	bne.n	80140d2 <xQueueReceive+0x5e>
	__asm volatile
 80140bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c0:	f383 8811 	msr	BASEPRI, r3
 80140c4:	f3bf 8f6f 	isb	sy
 80140c8:	f3bf 8f4f 	dsb	sy
 80140cc:	61fb      	str	r3, [r7, #28]
}
 80140ce:	bf00      	nop
 80140d0:	e7fe      	b.n	80140d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80140d2:	f001 f8ef 	bl	80152b4 <xTaskGetSchedulerState>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d102      	bne.n	80140e2 <xQueueReceive+0x6e>
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d101      	bne.n	80140e6 <xQueueReceive+0x72>
 80140e2:	2301      	movs	r3, #1
 80140e4:	e000      	b.n	80140e8 <xQueueReceive+0x74>
 80140e6:	2300      	movs	r3, #0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d10a      	bne.n	8014102 <xQueueReceive+0x8e>
	__asm volatile
 80140ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f0:	f383 8811 	msr	BASEPRI, r3
 80140f4:	f3bf 8f6f 	isb	sy
 80140f8:	f3bf 8f4f 	dsb	sy
 80140fc:	61bb      	str	r3, [r7, #24]
}
 80140fe:	bf00      	nop
 8014100:	e7fe      	b.n	8014100 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014102:	f001 fe67 	bl	8015dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801410a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410e:	2b00      	cmp	r3, #0
 8014110:	d01f      	beq.n	8014152 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014112:	68b9      	ldr	r1, [r7, #8]
 8014114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014116:	f000 f8f7 	bl	8014308 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411c:	1e5a      	subs	r2, r3, #1
 801411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014120:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014124:	691b      	ldr	r3, [r3, #16]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d00f      	beq.n	801414a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412c:	3310      	adds	r3, #16
 801412e:	4618      	mov	r0, r3
 8014130:	f000 fea0 	bl	8014e74 <xTaskRemoveFromEventList>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d007      	beq.n	801414a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801413a:	4b3d      	ldr	r3, [pc, #244]	; (8014230 <xQueueReceive+0x1bc>)
 801413c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014140:	601a      	str	r2, [r3, #0]
 8014142:	f3bf 8f4f 	dsb	sy
 8014146:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801414a:	f001 fe73 	bl	8015e34 <vPortExitCritical>
				return pdPASS;
 801414e:	2301      	movs	r3, #1
 8014150:	e069      	b.n	8014226 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d103      	bne.n	8014160 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014158:	f001 fe6c 	bl	8015e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801415c:	2300      	movs	r3, #0
 801415e:	e062      	b.n	8014226 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014162:	2b00      	cmp	r3, #0
 8014164:	d106      	bne.n	8014174 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014166:	f107 0310 	add.w	r3, r7, #16
 801416a:	4618      	mov	r0, r3
 801416c:	f000 ff48 	bl	8015000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014170:	2301      	movs	r3, #1
 8014172:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014174:	f001 fe5e 	bl	8015e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014178:	f000 fc06 	bl	8014988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801417c:	f001 fe2a 	bl	8015dd4 <vPortEnterCritical>
 8014180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014186:	b25b      	sxtb	r3, r3
 8014188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801418c:	d103      	bne.n	8014196 <xQueueReceive+0x122>
 801418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014190:	2200      	movs	r2, #0
 8014192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801419c:	b25b      	sxtb	r3, r3
 801419e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141a2:	d103      	bne.n	80141ac <xQueueReceive+0x138>
 80141a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a6:	2200      	movs	r2, #0
 80141a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141ac:	f001 fe42 	bl	8015e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80141b0:	1d3a      	adds	r2, r7, #4
 80141b2:	f107 0310 	add.w	r3, r7, #16
 80141b6:	4611      	mov	r1, r2
 80141b8:	4618      	mov	r0, r3
 80141ba:	f000 ff37 	bl	801502c <xTaskCheckForTimeOut>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d123      	bne.n	801420c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80141c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141c6:	f000 f917 	bl	80143f8 <prvIsQueueEmpty>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d017      	beq.n	8014200 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80141d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d2:	3324      	adds	r3, #36	; 0x24
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	4611      	mov	r1, r2
 80141d8:	4618      	mov	r0, r3
 80141da:	f000 fdbf 	bl	8014d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80141de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141e0:	f000 f8b8 	bl	8014354 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80141e4:	f000 fbde 	bl	80149a4 <xTaskResumeAll>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d189      	bne.n	8014102 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80141ee:	4b10      	ldr	r3, [pc, #64]	; (8014230 <xQueueReceive+0x1bc>)
 80141f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141f4:	601a      	str	r2, [r3, #0]
 80141f6:	f3bf 8f4f 	dsb	sy
 80141fa:	f3bf 8f6f 	isb	sy
 80141fe:	e780      	b.n	8014102 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014202:	f000 f8a7 	bl	8014354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014206:	f000 fbcd 	bl	80149a4 <xTaskResumeAll>
 801420a:	e77a      	b.n	8014102 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801420c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801420e:	f000 f8a1 	bl	8014354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014212:	f000 fbc7 	bl	80149a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014218:	f000 f8ee 	bl	80143f8 <prvIsQueueEmpty>
 801421c:	4603      	mov	r3, r0
 801421e:	2b00      	cmp	r3, #0
 8014220:	f43f af6f 	beq.w	8014102 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014226:	4618      	mov	r0, r3
 8014228:	3730      	adds	r7, #48	; 0x30
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	e000ed04 	.word	0xe000ed04

08014234 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014240:	2300      	movs	r3, #0
 8014242:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014248:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10d      	bne.n	801426e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d14d      	bne.n	80142f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	4618      	mov	r0, r3
 8014260:	f001 f846 	bl	80152f0 <xTaskPriorityDisinherit>
 8014264:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	609a      	str	r2, [r3, #8]
 801426c:	e043      	b.n	80142f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d119      	bne.n	80142a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	6858      	ldr	r0, [r3, #4]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801427c:	461a      	mov	r2, r3
 801427e:	68b9      	ldr	r1, [r7, #8]
 8014280:	f002 f8de 	bl	8016440 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	685a      	ldr	r2, [r3, #4]
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801428c:	441a      	add	r2, r3
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	685a      	ldr	r2, [r3, #4]
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	689b      	ldr	r3, [r3, #8]
 801429a:	429a      	cmp	r2, r3
 801429c:	d32b      	bcc.n	80142f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	605a      	str	r2, [r3, #4]
 80142a6:	e026      	b.n	80142f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	68d8      	ldr	r0, [r3, #12]
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142b0:	461a      	mov	r2, r3
 80142b2:	68b9      	ldr	r1, [r7, #8]
 80142b4:	f002 f8c4 	bl	8016440 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	68da      	ldr	r2, [r3, #12]
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142c0:	425b      	negs	r3, r3
 80142c2:	441a      	add	r2, r3
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	68da      	ldr	r2, [r3, #12]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d207      	bcs.n	80142e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	689a      	ldr	r2, [r3, #8]
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142dc:	425b      	negs	r3, r3
 80142de:	441a      	add	r2, r3
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d105      	bne.n	80142f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d002      	beq.n	80142f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	3b01      	subs	r3, #1
 80142f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	1c5a      	adds	r2, r3, #1
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80142fe:	697b      	ldr	r3, [r7, #20]
}
 8014300:	4618      	mov	r0, r3
 8014302:	3718      	adds	r7, #24
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014316:	2b00      	cmp	r3, #0
 8014318:	d018      	beq.n	801434c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	68da      	ldr	r2, [r3, #12]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014322:	441a      	add	r2, r3
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	68da      	ldr	r2, [r3, #12]
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	689b      	ldr	r3, [r3, #8]
 8014330:	429a      	cmp	r2, r3
 8014332:	d303      	bcc.n	801433c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	68d9      	ldr	r1, [r3, #12]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014344:	461a      	mov	r2, r3
 8014346:	6838      	ldr	r0, [r7, #0]
 8014348:	f002 f87a 	bl	8016440 <memcpy>
	}
}
 801434c:	bf00      	nop
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}

08014354 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801435c:	f001 fd3a 	bl	8015dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014366:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014368:	e011      	b.n	801438e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801436e:	2b00      	cmp	r3, #0
 8014370:	d012      	beq.n	8014398 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	3324      	adds	r3, #36	; 0x24
 8014376:	4618      	mov	r0, r3
 8014378:	f000 fd7c 	bl	8014e74 <xTaskRemoveFromEventList>
 801437c:	4603      	mov	r3, r0
 801437e:	2b00      	cmp	r3, #0
 8014380:	d001      	beq.n	8014386 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014382:	f000 feb5 	bl	80150f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014386:	7bfb      	ldrb	r3, [r7, #15]
 8014388:	3b01      	subs	r3, #1
 801438a:	b2db      	uxtb	r3, r3
 801438c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014392:	2b00      	cmp	r3, #0
 8014394:	dce9      	bgt.n	801436a <prvUnlockQueue+0x16>
 8014396:	e000      	b.n	801439a <prvUnlockQueue+0x46>
					break;
 8014398:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	22ff      	movs	r2, #255	; 0xff
 801439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80143a2:	f001 fd47 	bl	8015e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80143a6:	f001 fd15 	bl	8015dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80143b2:	e011      	b.n	80143d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	691b      	ldr	r3, [r3, #16]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d012      	beq.n	80143e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	3310      	adds	r3, #16
 80143c0:	4618      	mov	r0, r3
 80143c2:	f000 fd57 	bl	8014e74 <xTaskRemoveFromEventList>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80143cc:	f000 fe90 	bl	80150f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80143d0:	7bbb      	ldrb	r3, [r7, #14]
 80143d2:	3b01      	subs	r3, #1
 80143d4:	b2db      	uxtb	r3, r3
 80143d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80143d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	dce9      	bgt.n	80143b4 <prvUnlockQueue+0x60>
 80143e0:	e000      	b.n	80143e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80143e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	22ff      	movs	r2, #255	; 0xff
 80143e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80143ec:	f001 fd22 	bl	8015e34 <vPortExitCritical>
}
 80143f0:	bf00      	nop
 80143f2:	3710      	adds	r7, #16
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014400:	f001 fce8 	bl	8015dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014408:	2b00      	cmp	r3, #0
 801440a:	d102      	bne.n	8014412 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801440c:	2301      	movs	r3, #1
 801440e:	60fb      	str	r3, [r7, #12]
 8014410:	e001      	b.n	8014416 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014412:	2300      	movs	r3, #0
 8014414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014416:	f001 fd0d 	bl	8015e34 <vPortExitCritical>

	return xReturn;
 801441a:	68fb      	ldr	r3, [r7, #12]
}
 801441c:	4618      	mov	r0, r3
 801441e:	3710      	adds	r7, #16
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}

08014424 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801442c:	f001 fcd2 	bl	8015dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014438:	429a      	cmp	r2, r3
 801443a:	d102      	bne.n	8014442 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801443c:	2301      	movs	r3, #1
 801443e:	60fb      	str	r3, [r7, #12]
 8014440:	e001      	b.n	8014446 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014442:	2300      	movs	r3, #0
 8014444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014446:	f001 fcf5 	bl	8015e34 <vPortExitCritical>

	return xReturn;
 801444a:	68fb      	ldr	r3, [r7, #12]
}
 801444c:	4618      	mov	r0, r3
 801444e:	3710      	adds	r7, #16
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}

08014454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014454:	b480      	push	{r7}
 8014456:	b085      	sub	sp, #20
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801445e:	2300      	movs	r3, #0
 8014460:	60fb      	str	r3, [r7, #12]
 8014462:	e014      	b.n	801448e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014464:	4a0f      	ldr	r2, [pc, #60]	; (80144a4 <vQueueAddToRegistry+0x50>)
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d10b      	bne.n	8014488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014470:	490c      	ldr	r1, [pc, #48]	; (80144a4 <vQueueAddToRegistry+0x50>)
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	683a      	ldr	r2, [r7, #0]
 8014476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801447a:	4a0a      	ldr	r2, [pc, #40]	; (80144a4 <vQueueAddToRegistry+0x50>)
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	00db      	lsls	r3, r3, #3
 8014480:	4413      	add	r3, r2
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014486:	e006      	b.n	8014496 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	3301      	adds	r3, #1
 801448c:	60fb      	str	r3, [r7, #12]
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	2b07      	cmp	r3, #7
 8014492:	d9e7      	bls.n	8014464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014494:	bf00      	nop
 8014496:	bf00      	nop
 8014498:	3714      	adds	r7, #20
 801449a:	46bd      	mov	sp, r7
 801449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a0:	4770      	bx	lr
 80144a2:	bf00      	nop
 80144a4:	2400256c 	.word	0x2400256c

080144a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b086      	sub	sp, #24
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	60f8      	str	r0, [r7, #12]
 80144b0:	60b9      	str	r1, [r7, #8]
 80144b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80144b8:	f001 fc8c 	bl	8015dd4 <vPortEnterCritical>
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80144c2:	b25b      	sxtb	r3, r3
 80144c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144c8:	d103      	bne.n	80144d2 <vQueueWaitForMessageRestricted+0x2a>
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	2200      	movs	r2, #0
 80144ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80144d8:	b25b      	sxtb	r3, r3
 80144da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144de:	d103      	bne.n	80144e8 <vQueueWaitForMessageRestricted+0x40>
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80144e8:	f001 fca4 	bl	8015e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d106      	bne.n	8014502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80144f4:	697b      	ldr	r3, [r7, #20]
 80144f6:	3324      	adds	r3, #36	; 0x24
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	68b9      	ldr	r1, [r7, #8]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f000 fc8d 	bl	8014e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014502:	6978      	ldr	r0, [r7, #20]
 8014504:	f7ff ff26 	bl	8014354 <prvUnlockQueue>
	}
 8014508:	bf00      	nop
 801450a:	3718      	adds	r7, #24
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}

08014510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014510:	b580      	push	{r7, lr}
 8014512:	b08e      	sub	sp, #56	; 0x38
 8014514:	af04      	add	r7, sp, #16
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	60b9      	str	r1, [r7, #8]
 801451a:	607a      	str	r2, [r7, #4]
 801451c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014520:	2b00      	cmp	r3, #0
 8014522:	d10a      	bne.n	801453a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014528:	f383 8811 	msr	BASEPRI, r3
 801452c:	f3bf 8f6f 	isb	sy
 8014530:	f3bf 8f4f 	dsb	sy
 8014534:	623b      	str	r3, [r7, #32]
}
 8014536:	bf00      	nop
 8014538:	e7fe      	b.n	8014538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453c:	2b00      	cmp	r3, #0
 801453e:	d10a      	bne.n	8014556 <xTaskCreateStatic+0x46>
	__asm volatile
 8014540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014544:	f383 8811 	msr	BASEPRI, r3
 8014548:	f3bf 8f6f 	isb	sy
 801454c:	f3bf 8f4f 	dsb	sy
 8014550:	61fb      	str	r3, [r7, #28]
}
 8014552:	bf00      	nop
 8014554:	e7fe      	b.n	8014554 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014556:	235c      	movs	r3, #92	; 0x5c
 8014558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	2b5c      	cmp	r3, #92	; 0x5c
 801455e:	d00a      	beq.n	8014576 <xTaskCreateStatic+0x66>
	__asm volatile
 8014560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014564:	f383 8811 	msr	BASEPRI, r3
 8014568:	f3bf 8f6f 	isb	sy
 801456c:	f3bf 8f4f 	dsb	sy
 8014570:	61bb      	str	r3, [r7, #24]
}
 8014572:	bf00      	nop
 8014574:	e7fe      	b.n	8014574 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014576:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457a:	2b00      	cmp	r3, #0
 801457c:	d01e      	beq.n	80145bc <xTaskCreateStatic+0xac>
 801457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014580:	2b00      	cmp	r3, #0
 8014582:	d01b      	beq.n	80145bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014586:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801458c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014590:	2202      	movs	r2, #2
 8014592:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014596:	2300      	movs	r3, #0
 8014598:	9303      	str	r3, [sp, #12]
 801459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801459c:	9302      	str	r3, [sp, #8]
 801459e:	f107 0314 	add.w	r3, r7, #20
 80145a2:	9301      	str	r3, [sp, #4]
 80145a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a6:	9300      	str	r3, [sp, #0]
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	68b9      	ldr	r1, [r7, #8]
 80145ae:	68f8      	ldr	r0, [r7, #12]
 80145b0:	f000 f850 	bl	8014654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80145b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145b6:	f000 f8dd 	bl	8014774 <prvAddNewTaskToReadyList>
 80145ba:	e001      	b.n	80145c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80145bc:	2300      	movs	r3, #0
 80145be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80145c0:	697b      	ldr	r3, [r7, #20]
	}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3728      	adds	r7, #40	; 0x28
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}

080145ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80145ca:	b580      	push	{r7, lr}
 80145cc:	b08c      	sub	sp, #48	; 0x30
 80145ce:	af04      	add	r7, sp, #16
 80145d0:	60f8      	str	r0, [r7, #12]
 80145d2:	60b9      	str	r1, [r7, #8]
 80145d4:	603b      	str	r3, [r7, #0]
 80145d6:	4613      	mov	r3, r2
 80145d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80145da:	88fb      	ldrh	r3, [r7, #6]
 80145dc:	009b      	lsls	r3, r3, #2
 80145de:	4618      	mov	r0, r3
 80145e0:	f001 fd1a 	bl	8016018 <pvPortMalloc>
 80145e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d00e      	beq.n	801460a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80145ec:	205c      	movs	r0, #92	; 0x5c
 80145ee:	f001 fd13 	bl	8016018 <pvPortMalloc>
 80145f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d003      	beq.n	8014602 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	697a      	ldr	r2, [r7, #20]
 80145fe:	631a      	str	r2, [r3, #48]	; 0x30
 8014600:	e005      	b.n	801460e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014602:	6978      	ldr	r0, [r7, #20]
 8014604:	f001 fdd4 	bl	80161b0 <vPortFree>
 8014608:	e001      	b.n	801460e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801460a:	2300      	movs	r3, #0
 801460c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d017      	beq.n	8014644 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014614:	69fb      	ldr	r3, [r7, #28]
 8014616:	2200      	movs	r2, #0
 8014618:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801461c:	88fa      	ldrh	r2, [r7, #6]
 801461e:	2300      	movs	r3, #0
 8014620:	9303      	str	r3, [sp, #12]
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	9302      	str	r3, [sp, #8]
 8014626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014628:	9301      	str	r3, [sp, #4]
 801462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	68b9      	ldr	r1, [r7, #8]
 8014632:	68f8      	ldr	r0, [r7, #12]
 8014634:	f000 f80e 	bl	8014654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014638:	69f8      	ldr	r0, [r7, #28]
 801463a:	f000 f89b 	bl	8014774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801463e:	2301      	movs	r3, #1
 8014640:	61bb      	str	r3, [r7, #24]
 8014642:	e002      	b.n	801464a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014648:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801464a:	69bb      	ldr	r3, [r7, #24]
	}
 801464c:	4618      	mov	r0, r3
 801464e:	3720      	adds	r7, #32
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b088      	sub	sp, #32
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
 8014660:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014664:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	461a      	mov	r2, r3
 801466c:	21a5      	movs	r1, #165	; 0xa5
 801466e:	f001 fef5 	bl	801645c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014676:	6879      	ldr	r1, [r7, #4]
 8014678:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801467c:	440b      	add	r3, r1
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	4413      	add	r3, r2
 8014682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014684:	69bb      	ldr	r3, [r7, #24]
 8014686:	f023 0307 	bic.w	r3, r3, #7
 801468a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	f003 0307 	and.w	r3, r3, #7
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00a      	beq.n	80146ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8014696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801469a:	f383 8811 	msr	BASEPRI, r3
 801469e:	f3bf 8f6f 	isb	sy
 80146a2:	f3bf 8f4f 	dsb	sy
 80146a6:	617b      	str	r3, [r7, #20]
}
 80146a8:	bf00      	nop
 80146aa:	e7fe      	b.n	80146aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d01f      	beq.n	80146f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80146b2:	2300      	movs	r3, #0
 80146b4:	61fb      	str	r3, [r7, #28]
 80146b6:	e012      	b.n	80146de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	4413      	add	r3, r2
 80146be:	7819      	ldrb	r1, [r3, #0]
 80146c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	4413      	add	r3, r2
 80146c6:	3334      	adds	r3, #52	; 0x34
 80146c8:	460a      	mov	r2, r1
 80146ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80146cc:	68ba      	ldr	r2, [r7, #8]
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	4413      	add	r3, r2
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d006      	beq.n	80146e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	3301      	adds	r3, #1
 80146dc:	61fb      	str	r3, [r7, #28]
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	2b0f      	cmp	r3, #15
 80146e2:	d9e9      	bls.n	80146b8 <prvInitialiseNewTask+0x64>
 80146e4:	e000      	b.n	80146e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80146e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80146e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ea:	2200      	movs	r2, #0
 80146ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80146f0:	e003      	b.n	80146fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80146f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f4:	2200      	movs	r2, #0
 80146f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80146fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146fc:	2b37      	cmp	r3, #55	; 0x37
 80146fe:	d901      	bls.n	8014704 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014700:	2337      	movs	r3, #55	; 0x37
 8014702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801470e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014712:	2200      	movs	r2, #0
 8014714:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014718:	3304      	adds	r3, #4
 801471a:	4618      	mov	r0, r3
 801471c:	f7ff f978 	bl	8013a10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014722:	3318      	adds	r3, #24
 8014724:	4618      	mov	r0, r3
 8014726:	f7ff f973 	bl	8013a10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801472e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801473e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014742:	2200      	movs	r2, #0
 8014744:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014748:	2200      	movs	r2, #0
 801474a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801474e:	683a      	ldr	r2, [r7, #0]
 8014750:	68f9      	ldr	r1, [r7, #12]
 8014752:	69b8      	ldr	r0, [r7, #24]
 8014754:	f001 fa14 	bl	8015b80 <pxPortInitialiseStack>
 8014758:	4602      	mov	r2, r0
 801475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801475c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014760:	2b00      	cmp	r3, #0
 8014762:	d002      	beq.n	801476a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014768:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801476a:	bf00      	nop
 801476c:	3720      	adds	r7, #32
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
	...

08014774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801477c:	f001 fb2a 	bl	8015dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014780:	4b2d      	ldr	r3, [pc, #180]	; (8014838 <prvAddNewTaskToReadyList+0xc4>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	3301      	adds	r3, #1
 8014786:	4a2c      	ldr	r2, [pc, #176]	; (8014838 <prvAddNewTaskToReadyList+0xc4>)
 8014788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801478a:	4b2c      	ldr	r3, [pc, #176]	; (801483c <prvAddNewTaskToReadyList+0xc8>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d109      	bne.n	80147a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014792:	4a2a      	ldr	r2, [pc, #168]	; (801483c <prvAddNewTaskToReadyList+0xc8>)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014798:	4b27      	ldr	r3, [pc, #156]	; (8014838 <prvAddNewTaskToReadyList+0xc4>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d110      	bne.n	80147c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80147a0:	f000 fcca 	bl	8015138 <prvInitialiseTaskLists>
 80147a4:	e00d      	b.n	80147c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80147a6:	4b26      	ldr	r3, [pc, #152]	; (8014840 <prvAddNewTaskToReadyList+0xcc>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d109      	bne.n	80147c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80147ae:	4b23      	ldr	r3, [pc, #140]	; (801483c <prvAddNewTaskToReadyList+0xc8>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d802      	bhi.n	80147c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80147bc:	4a1f      	ldr	r2, [pc, #124]	; (801483c <prvAddNewTaskToReadyList+0xc8>)
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80147c2:	4b20      	ldr	r3, [pc, #128]	; (8014844 <prvAddNewTaskToReadyList+0xd0>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	3301      	adds	r3, #1
 80147c8:	4a1e      	ldr	r2, [pc, #120]	; (8014844 <prvAddNewTaskToReadyList+0xd0>)
 80147ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80147cc:	4b1d      	ldr	r3, [pc, #116]	; (8014844 <prvAddNewTaskToReadyList+0xd0>)
 80147ce:	681a      	ldr	r2, [r3, #0]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147d8:	4b1b      	ldr	r3, [pc, #108]	; (8014848 <prvAddNewTaskToReadyList+0xd4>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d903      	bls.n	80147e8 <prvAddNewTaskToReadyList+0x74>
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147e4:	4a18      	ldr	r2, [pc, #96]	; (8014848 <prvAddNewTaskToReadyList+0xd4>)
 80147e6:	6013      	str	r3, [r2, #0]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147ec:	4613      	mov	r3, r2
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	4413      	add	r3, r2
 80147f2:	009b      	lsls	r3, r3, #2
 80147f4:	4a15      	ldr	r2, [pc, #84]	; (801484c <prvAddNewTaskToReadyList+0xd8>)
 80147f6:	441a      	add	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	3304      	adds	r3, #4
 80147fc:	4619      	mov	r1, r3
 80147fe:	4610      	mov	r0, r2
 8014800:	f7ff f913 	bl	8013a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014804:	f001 fb16 	bl	8015e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014808:	4b0d      	ldr	r3, [pc, #52]	; (8014840 <prvAddNewTaskToReadyList+0xcc>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d00e      	beq.n	801482e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014810:	4b0a      	ldr	r3, [pc, #40]	; (801483c <prvAddNewTaskToReadyList+0xc8>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801481a:	429a      	cmp	r2, r3
 801481c:	d207      	bcs.n	801482e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801481e:	4b0c      	ldr	r3, [pc, #48]	; (8014850 <prvAddNewTaskToReadyList+0xdc>)
 8014820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014824:	601a      	str	r2, [r3, #0]
 8014826:	f3bf 8f4f 	dsb	sy
 801482a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801482e:	bf00      	nop
 8014830:	3708      	adds	r7, #8
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	24002a80 	.word	0x24002a80
 801483c:	240025ac 	.word	0x240025ac
 8014840:	24002a8c 	.word	0x24002a8c
 8014844:	24002a9c 	.word	0x24002a9c
 8014848:	24002a88 	.word	0x24002a88
 801484c:	240025b0 	.word	0x240025b0
 8014850:	e000ed04 	.word	0xe000ed04

08014854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801485c:	2300      	movs	r3, #0
 801485e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d017      	beq.n	8014896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014866:	4b13      	ldr	r3, [pc, #76]	; (80148b4 <vTaskDelay+0x60>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d00a      	beq.n	8014884 <vTaskDelay+0x30>
	__asm volatile
 801486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014872:	f383 8811 	msr	BASEPRI, r3
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	f3bf 8f4f 	dsb	sy
 801487e:	60bb      	str	r3, [r7, #8]
}
 8014880:	bf00      	nop
 8014882:	e7fe      	b.n	8014882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014884:	f000 f880 	bl	8014988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014888:	2100      	movs	r1, #0
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f000 fdb6 	bl	80153fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014890:	f000 f888 	bl	80149a4 <xTaskResumeAll>
 8014894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d107      	bne.n	80148ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801489c:	4b06      	ldr	r3, [pc, #24]	; (80148b8 <vTaskDelay+0x64>)
 801489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148a2:	601a      	str	r2, [r3, #0]
 80148a4:	f3bf 8f4f 	dsb	sy
 80148a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80148ac:	bf00      	nop
 80148ae:	3710      	adds	r7, #16
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	24002aa8 	.word	0x24002aa8
 80148b8:	e000ed04 	.word	0xe000ed04

080148bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b08a      	sub	sp, #40	; 0x28
 80148c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80148c2:	2300      	movs	r3, #0
 80148c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80148c6:	2300      	movs	r3, #0
 80148c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80148ca:	463a      	mov	r2, r7
 80148cc:	1d39      	adds	r1, r7, #4
 80148ce:	f107 0308 	add.w	r3, r7, #8
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe fddc 	bl	8013490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80148d8:	6839      	ldr	r1, [r7, #0]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	68ba      	ldr	r2, [r7, #8]
 80148de:	9202      	str	r2, [sp, #8]
 80148e0:	9301      	str	r3, [sp, #4]
 80148e2:	2300      	movs	r3, #0
 80148e4:	9300      	str	r3, [sp, #0]
 80148e6:	2300      	movs	r3, #0
 80148e8:	460a      	mov	r2, r1
 80148ea:	4921      	ldr	r1, [pc, #132]	; (8014970 <vTaskStartScheduler+0xb4>)
 80148ec:	4821      	ldr	r0, [pc, #132]	; (8014974 <vTaskStartScheduler+0xb8>)
 80148ee:	f7ff fe0f 	bl	8014510 <xTaskCreateStatic>
 80148f2:	4603      	mov	r3, r0
 80148f4:	4a20      	ldr	r2, [pc, #128]	; (8014978 <vTaskStartScheduler+0xbc>)
 80148f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80148f8:	4b1f      	ldr	r3, [pc, #124]	; (8014978 <vTaskStartScheduler+0xbc>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d002      	beq.n	8014906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014900:	2301      	movs	r3, #1
 8014902:	617b      	str	r3, [r7, #20]
 8014904:	e001      	b.n	801490a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014906:	2300      	movs	r3, #0
 8014908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	2b01      	cmp	r3, #1
 801490e:	d102      	bne.n	8014916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014910:	f000 fdc8 	bl	80154a4 <xTimerCreateTimerTask>
 8014914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	2b01      	cmp	r3, #1
 801491a:	d116      	bne.n	801494a <vTaskStartScheduler+0x8e>
	__asm volatile
 801491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014920:	f383 8811 	msr	BASEPRI, r3
 8014924:	f3bf 8f6f 	isb	sy
 8014928:	f3bf 8f4f 	dsb	sy
 801492c:	613b      	str	r3, [r7, #16]
}
 801492e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014930:	4b12      	ldr	r3, [pc, #72]	; (801497c <vTaskStartScheduler+0xc0>)
 8014932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014938:	4b11      	ldr	r3, [pc, #68]	; (8014980 <vTaskStartScheduler+0xc4>)
 801493a:	2201      	movs	r2, #1
 801493c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801493e:	4b11      	ldr	r3, [pc, #68]	; (8014984 <vTaskStartScheduler+0xc8>)
 8014940:	2200      	movs	r2, #0
 8014942:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014944:	f001 f9a4 	bl	8015c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014948:	e00e      	b.n	8014968 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014950:	d10a      	bne.n	8014968 <vTaskStartScheduler+0xac>
	__asm volatile
 8014952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014956:	f383 8811 	msr	BASEPRI, r3
 801495a:	f3bf 8f6f 	isb	sy
 801495e:	f3bf 8f4f 	dsb	sy
 8014962:	60fb      	str	r3, [r7, #12]
}
 8014964:	bf00      	nop
 8014966:	e7fe      	b.n	8014966 <vTaskStartScheduler+0xaa>
}
 8014968:	bf00      	nop
 801496a:	3718      	adds	r7, #24
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}
 8014970:	080170d0 	.word	0x080170d0
 8014974:	08015109 	.word	0x08015109
 8014978:	24002aa4 	.word	0x24002aa4
 801497c:	24002aa0 	.word	0x24002aa0
 8014980:	24002a8c 	.word	0x24002a8c
 8014984:	24002a84 	.word	0x24002a84

08014988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014988:	b480      	push	{r7}
 801498a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801498c:	4b04      	ldr	r3, [pc, #16]	; (80149a0 <vTaskSuspendAll+0x18>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	3301      	adds	r3, #1
 8014992:	4a03      	ldr	r2, [pc, #12]	; (80149a0 <vTaskSuspendAll+0x18>)
 8014994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014996:	bf00      	nop
 8014998:	46bd      	mov	sp, r7
 801499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499e:	4770      	bx	lr
 80149a0:	24002aa8 	.word	0x24002aa8

080149a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b084      	sub	sp, #16
 80149a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80149aa:	2300      	movs	r3, #0
 80149ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80149ae:	2300      	movs	r3, #0
 80149b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80149b2:	4b42      	ldr	r3, [pc, #264]	; (8014abc <xTaskResumeAll+0x118>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d10a      	bne.n	80149d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80149ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149be:	f383 8811 	msr	BASEPRI, r3
 80149c2:	f3bf 8f6f 	isb	sy
 80149c6:	f3bf 8f4f 	dsb	sy
 80149ca:	603b      	str	r3, [r7, #0]
}
 80149cc:	bf00      	nop
 80149ce:	e7fe      	b.n	80149ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80149d0:	f001 fa00 	bl	8015dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80149d4:	4b39      	ldr	r3, [pc, #228]	; (8014abc <xTaskResumeAll+0x118>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	3b01      	subs	r3, #1
 80149da:	4a38      	ldr	r2, [pc, #224]	; (8014abc <xTaskResumeAll+0x118>)
 80149dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149de:	4b37      	ldr	r3, [pc, #220]	; (8014abc <xTaskResumeAll+0x118>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d162      	bne.n	8014aac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80149e6:	4b36      	ldr	r3, [pc, #216]	; (8014ac0 <xTaskResumeAll+0x11c>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d05e      	beq.n	8014aac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80149ee:	e02f      	b.n	8014a50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149f0:	4b34      	ldr	r3, [pc, #208]	; (8014ac4 <xTaskResumeAll+0x120>)
 80149f2:	68db      	ldr	r3, [r3, #12]
 80149f4:	68db      	ldr	r3, [r3, #12]
 80149f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	3318      	adds	r3, #24
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff f871 	bl	8013ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	3304      	adds	r3, #4
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7ff f86c 	bl	8013ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a10:	4b2d      	ldr	r3, [pc, #180]	; (8014ac8 <xTaskResumeAll+0x124>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d903      	bls.n	8014a20 <xTaskResumeAll+0x7c>
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a1c:	4a2a      	ldr	r2, [pc, #168]	; (8014ac8 <xTaskResumeAll+0x124>)
 8014a1e:	6013      	str	r3, [r2, #0]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a24:	4613      	mov	r3, r2
 8014a26:	009b      	lsls	r3, r3, #2
 8014a28:	4413      	add	r3, r2
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	4a27      	ldr	r2, [pc, #156]	; (8014acc <xTaskResumeAll+0x128>)
 8014a2e:	441a      	add	r2, r3
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	3304      	adds	r3, #4
 8014a34:	4619      	mov	r1, r3
 8014a36:	4610      	mov	r0, r2
 8014a38:	f7fe fff7 	bl	8013a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a40:	4b23      	ldr	r3, [pc, #140]	; (8014ad0 <xTaskResumeAll+0x12c>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d302      	bcc.n	8014a50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014a4a:	4b22      	ldr	r3, [pc, #136]	; (8014ad4 <xTaskResumeAll+0x130>)
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014a50:	4b1c      	ldr	r3, [pc, #112]	; (8014ac4 <xTaskResumeAll+0x120>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d1cb      	bne.n	80149f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d001      	beq.n	8014a62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014a5e:	f000 fc09 	bl	8015274 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014a62:	4b1d      	ldr	r3, [pc, #116]	; (8014ad8 <xTaskResumeAll+0x134>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d010      	beq.n	8014a90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014a6e:	f000 f847 	bl	8014b00 <xTaskIncrementTick>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d002      	beq.n	8014a7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014a78:	4b16      	ldr	r3, [pc, #88]	; (8014ad4 <xTaskResumeAll+0x130>)
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	3b01      	subs	r3, #1
 8014a82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d1f1      	bne.n	8014a6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014a8a:	4b13      	ldr	r3, [pc, #76]	; (8014ad8 <xTaskResumeAll+0x134>)
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014a90:	4b10      	ldr	r3, [pc, #64]	; (8014ad4 <xTaskResumeAll+0x130>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d009      	beq.n	8014aac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014a9c:	4b0f      	ldr	r3, [pc, #60]	; (8014adc <xTaskResumeAll+0x138>)
 8014a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aa2:	601a      	str	r2, [r3, #0]
 8014aa4:	f3bf 8f4f 	dsb	sy
 8014aa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014aac:	f001 f9c2 	bl	8015e34 <vPortExitCritical>

	return xAlreadyYielded;
 8014ab0:	68bb      	ldr	r3, [r7, #8]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3710      	adds	r7, #16
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	24002aa8 	.word	0x24002aa8
 8014ac0:	24002a80 	.word	0x24002a80
 8014ac4:	24002a40 	.word	0x24002a40
 8014ac8:	24002a88 	.word	0x24002a88
 8014acc:	240025b0 	.word	0x240025b0
 8014ad0:	240025ac 	.word	0x240025ac
 8014ad4:	24002a94 	.word	0x24002a94
 8014ad8:	24002a90 	.word	0x24002a90
 8014adc:	e000ed04 	.word	0xe000ed04

08014ae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014ae0:	b480      	push	{r7}
 8014ae2:	b083      	sub	sp, #12
 8014ae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014ae6:	4b05      	ldr	r3, [pc, #20]	; (8014afc <xTaskGetTickCount+0x1c>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014aec:	687b      	ldr	r3, [r7, #4]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	370c      	adds	r7, #12
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop
 8014afc:	24002a84 	.word	0x24002a84

08014b00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b086      	sub	sp, #24
 8014b04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014b06:	2300      	movs	r3, #0
 8014b08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b0a:	4b53      	ldr	r3, [pc, #332]	; (8014c58 <xTaskIncrementTick+0x158>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	f040 8095 	bne.w	8014c3e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014b14:	4b51      	ldr	r3, [pc, #324]	; (8014c5c <xTaskIncrementTick+0x15c>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014b1c:	4a4f      	ldr	r2, [pc, #316]	; (8014c5c <xTaskIncrementTick+0x15c>)
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d120      	bne.n	8014b6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014b28:	4b4d      	ldr	r3, [pc, #308]	; (8014c60 <xTaskIncrementTick+0x160>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d00a      	beq.n	8014b48 <xTaskIncrementTick+0x48>
	__asm volatile
 8014b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b36:	f383 8811 	msr	BASEPRI, r3
 8014b3a:	f3bf 8f6f 	isb	sy
 8014b3e:	f3bf 8f4f 	dsb	sy
 8014b42:	603b      	str	r3, [r7, #0]
}
 8014b44:	bf00      	nop
 8014b46:	e7fe      	b.n	8014b46 <xTaskIncrementTick+0x46>
 8014b48:	4b45      	ldr	r3, [pc, #276]	; (8014c60 <xTaskIncrementTick+0x160>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	60fb      	str	r3, [r7, #12]
 8014b4e:	4b45      	ldr	r3, [pc, #276]	; (8014c64 <xTaskIncrementTick+0x164>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	4a43      	ldr	r2, [pc, #268]	; (8014c60 <xTaskIncrementTick+0x160>)
 8014b54:	6013      	str	r3, [r2, #0]
 8014b56:	4a43      	ldr	r2, [pc, #268]	; (8014c64 <xTaskIncrementTick+0x164>)
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	6013      	str	r3, [r2, #0]
 8014b5c:	4b42      	ldr	r3, [pc, #264]	; (8014c68 <xTaskIncrementTick+0x168>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	3301      	adds	r3, #1
 8014b62:	4a41      	ldr	r2, [pc, #260]	; (8014c68 <xTaskIncrementTick+0x168>)
 8014b64:	6013      	str	r3, [r2, #0]
 8014b66:	f000 fb85 	bl	8015274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014b6a:	4b40      	ldr	r3, [pc, #256]	; (8014c6c <xTaskIncrementTick+0x16c>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	693a      	ldr	r2, [r7, #16]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d349      	bcc.n	8014c08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014b74:	4b3a      	ldr	r3, [pc, #232]	; (8014c60 <xTaskIncrementTick+0x160>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d104      	bne.n	8014b88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b7e:	4b3b      	ldr	r3, [pc, #236]	; (8014c6c <xTaskIncrementTick+0x16c>)
 8014b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b84:	601a      	str	r2, [r3, #0]
					break;
 8014b86:	e03f      	b.n	8014c08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b88:	4b35      	ldr	r3, [pc, #212]	; (8014c60 <xTaskIncrementTick+0x160>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014b98:	693a      	ldr	r2, [r7, #16]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d203      	bcs.n	8014ba8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014ba0:	4a32      	ldr	r2, [pc, #200]	; (8014c6c <xTaskIncrementTick+0x16c>)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014ba6:	e02f      	b.n	8014c08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	3304      	adds	r3, #4
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7fe ff99 	bl	8013ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d004      	beq.n	8014bc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	3318      	adds	r3, #24
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fe ff90 	bl	8013ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bc8:	4b29      	ldr	r3, [pc, #164]	; (8014c70 <xTaskIncrementTick+0x170>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d903      	bls.n	8014bd8 <xTaskIncrementTick+0xd8>
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bd4:	4a26      	ldr	r2, [pc, #152]	; (8014c70 <xTaskIncrementTick+0x170>)
 8014bd6:	6013      	str	r3, [r2, #0]
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bdc:	4613      	mov	r3, r2
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	4413      	add	r3, r2
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	4a23      	ldr	r2, [pc, #140]	; (8014c74 <xTaskIncrementTick+0x174>)
 8014be6:	441a      	add	r2, r3
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	3304      	adds	r3, #4
 8014bec:	4619      	mov	r1, r3
 8014bee:	4610      	mov	r0, r2
 8014bf0:	f7fe ff1b 	bl	8013a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bf8:	4b1f      	ldr	r3, [pc, #124]	; (8014c78 <xTaskIncrementTick+0x178>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	d3b8      	bcc.n	8014b74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014c02:	2301      	movs	r3, #1
 8014c04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c06:	e7b5      	b.n	8014b74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014c08:	4b1b      	ldr	r3, [pc, #108]	; (8014c78 <xTaskIncrementTick+0x178>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c0e:	4919      	ldr	r1, [pc, #100]	; (8014c74 <xTaskIncrementTick+0x174>)
 8014c10:	4613      	mov	r3, r2
 8014c12:	009b      	lsls	r3, r3, #2
 8014c14:	4413      	add	r3, r2
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	440b      	add	r3, r1
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b01      	cmp	r3, #1
 8014c1e:	d901      	bls.n	8014c24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014c20:	2301      	movs	r3, #1
 8014c22:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014c24:	4b15      	ldr	r3, [pc, #84]	; (8014c7c <xTaskIncrementTick+0x17c>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d101      	bne.n	8014c30 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014c2c:	f7ec f8a4 	bl	8000d78 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014c30:	4b13      	ldr	r3, [pc, #76]	; (8014c80 <xTaskIncrementTick+0x180>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d009      	beq.n	8014c4c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	617b      	str	r3, [r7, #20]
 8014c3c:	e006      	b.n	8014c4c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014c3e:	4b0f      	ldr	r3, [pc, #60]	; (8014c7c <xTaskIncrementTick+0x17c>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	3301      	adds	r3, #1
 8014c44:	4a0d      	ldr	r2, [pc, #52]	; (8014c7c <xTaskIncrementTick+0x17c>)
 8014c46:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014c48:	f7ec f896 	bl	8000d78 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014c4c:	697b      	ldr	r3, [r7, #20]
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3718      	adds	r7, #24
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	24002aa8 	.word	0x24002aa8
 8014c5c:	24002a84 	.word	0x24002a84
 8014c60:	24002a38 	.word	0x24002a38
 8014c64:	24002a3c 	.word	0x24002a3c
 8014c68:	24002a98 	.word	0x24002a98
 8014c6c:	24002aa0 	.word	0x24002aa0
 8014c70:	24002a88 	.word	0x24002a88
 8014c74:	240025b0 	.word	0x240025b0
 8014c78:	240025ac 	.word	0x240025ac
 8014c7c:	24002a90 	.word	0x24002a90
 8014c80:	24002a94 	.word	0x24002a94

08014c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b084      	sub	sp, #16
 8014c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014c8a:	4b2f      	ldr	r3, [pc, #188]	; (8014d48 <vTaskSwitchContext+0xc4>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d003      	beq.n	8014c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014c92:	4b2e      	ldr	r3, [pc, #184]	; (8014d4c <vTaskSwitchContext+0xc8>)
 8014c94:	2201      	movs	r2, #1
 8014c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014c98:	e052      	b.n	8014d40 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8014c9a:	4b2c      	ldr	r3, [pc, #176]	; (8014d4c <vTaskSwitchContext+0xc8>)
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014ca0:	4b2b      	ldr	r3, [pc, #172]	; (8014d50 <vTaskSwitchContext+0xcc>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	4b2a      	ldr	r3, [pc, #168]	; (8014d50 <vTaskSwitchContext+0xcc>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d808      	bhi.n	8014cc2 <vTaskSwitchContext+0x3e>
 8014cb0:	4b27      	ldr	r3, [pc, #156]	; (8014d50 <vTaskSwitchContext+0xcc>)
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	4b26      	ldr	r3, [pc, #152]	; (8014d50 <vTaskSwitchContext+0xcc>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	3334      	adds	r3, #52	; 0x34
 8014cba:	4619      	mov	r1, r3
 8014cbc:	4610      	mov	r0, r2
 8014cbe:	f7ec f869 	bl	8000d94 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cc2:	4b24      	ldr	r3, [pc, #144]	; (8014d54 <vTaskSwitchContext+0xd0>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	60fb      	str	r3, [r7, #12]
 8014cc8:	e010      	b.n	8014cec <vTaskSwitchContext+0x68>
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d10a      	bne.n	8014ce6 <vTaskSwitchContext+0x62>
	__asm volatile
 8014cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cd4:	f383 8811 	msr	BASEPRI, r3
 8014cd8:	f3bf 8f6f 	isb	sy
 8014cdc:	f3bf 8f4f 	dsb	sy
 8014ce0:	607b      	str	r3, [r7, #4]
}
 8014ce2:	bf00      	nop
 8014ce4:	e7fe      	b.n	8014ce4 <vTaskSwitchContext+0x60>
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	60fb      	str	r3, [r7, #12]
 8014cec:	491a      	ldr	r1, [pc, #104]	; (8014d58 <vTaskSwitchContext+0xd4>)
 8014cee:	68fa      	ldr	r2, [r7, #12]
 8014cf0:	4613      	mov	r3, r2
 8014cf2:	009b      	lsls	r3, r3, #2
 8014cf4:	4413      	add	r3, r2
 8014cf6:	009b      	lsls	r3, r3, #2
 8014cf8:	440b      	add	r3, r1
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d0e4      	beq.n	8014cca <vTaskSwitchContext+0x46>
 8014d00:	68fa      	ldr	r2, [r7, #12]
 8014d02:	4613      	mov	r3, r2
 8014d04:	009b      	lsls	r3, r3, #2
 8014d06:	4413      	add	r3, r2
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	4a13      	ldr	r2, [pc, #76]	; (8014d58 <vTaskSwitchContext+0xd4>)
 8014d0c:	4413      	add	r3, r2
 8014d0e:	60bb      	str	r3, [r7, #8]
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	685a      	ldr	r2, [r3, #4]
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	605a      	str	r2, [r3, #4]
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	685a      	ldr	r2, [r3, #4]
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	3308      	adds	r3, #8
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d104      	bne.n	8014d30 <vTaskSwitchContext+0xac>
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	685a      	ldr	r2, [r3, #4]
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	605a      	str	r2, [r3, #4]
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	4a06      	ldr	r2, [pc, #24]	; (8014d50 <vTaskSwitchContext+0xcc>)
 8014d38:	6013      	str	r3, [r2, #0]
 8014d3a:	4a06      	ldr	r2, [pc, #24]	; (8014d54 <vTaskSwitchContext+0xd0>)
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	6013      	str	r3, [r2, #0]
}
 8014d40:	bf00      	nop
 8014d42:	3710      	adds	r7, #16
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}
 8014d48:	24002aa8 	.word	0x24002aa8
 8014d4c:	24002a94 	.word	0x24002a94
 8014d50:	240025ac 	.word	0x240025ac
 8014d54:	24002a88 	.word	0x24002a88
 8014d58:	240025b0 	.word	0x240025b0

08014d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d10a      	bne.n	8014d82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d70:	f383 8811 	msr	BASEPRI, r3
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	f3bf 8f4f 	dsb	sy
 8014d7c:	60fb      	str	r3, [r7, #12]
}
 8014d7e:	bf00      	nop
 8014d80:	e7fe      	b.n	8014d80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014d82:	4b07      	ldr	r3, [pc, #28]	; (8014da0 <vTaskPlaceOnEventList+0x44>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	3318      	adds	r3, #24
 8014d88:	4619      	mov	r1, r3
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f7fe fe71 	bl	8013a72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014d90:	2101      	movs	r1, #1
 8014d92:	6838      	ldr	r0, [r7, #0]
 8014d94:	f000 fb32 	bl	80153fc <prvAddCurrentTaskToDelayedList>
}
 8014d98:	bf00      	nop
 8014d9a:	3710      	adds	r7, #16
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	240025ac 	.word	0x240025ac

08014da4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b086      	sub	sp, #24
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d10a      	bne.n	8014dcc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dba:	f383 8811 	msr	BASEPRI, r3
 8014dbe:	f3bf 8f6f 	isb	sy
 8014dc2:	f3bf 8f4f 	dsb	sy
 8014dc6:	617b      	str	r3, [r7, #20]
}
 8014dc8:	bf00      	nop
 8014dca:	e7fe      	b.n	8014dca <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014dcc:	4b11      	ldr	r3, [pc, #68]	; (8014e14 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d10a      	bne.n	8014dea <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd8:	f383 8811 	msr	BASEPRI, r3
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	f3bf 8f4f 	dsb	sy
 8014de4:	613b      	str	r3, [r7, #16]
}
 8014de6:	bf00      	nop
 8014de8:	e7fe      	b.n	8014de8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014dea:	4b0b      	ldr	r3, [pc, #44]	; (8014e18 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	68ba      	ldr	r2, [r7, #8]
 8014df0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014df4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014df6:	4b08      	ldr	r3, [pc, #32]	; (8014e18 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	3318      	adds	r3, #24
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	68f8      	ldr	r0, [r7, #12]
 8014e00:	f7fe fe13 	bl	8013a2a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014e04:	2101      	movs	r1, #1
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f000 faf8 	bl	80153fc <prvAddCurrentTaskToDelayedList>
}
 8014e0c:	bf00      	nop
 8014e0e:	3718      	adds	r7, #24
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}
 8014e14:	24002aa8 	.word	0x24002aa8
 8014e18:	240025ac 	.word	0x240025ac

08014e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b086      	sub	sp, #24
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	60f8      	str	r0, [r7, #12]
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d10a      	bne.n	8014e44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e32:	f383 8811 	msr	BASEPRI, r3
 8014e36:	f3bf 8f6f 	isb	sy
 8014e3a:	f3bf 8f4f 	dsb	sy
 8014e3e:	617b      	str	r3, [r7, #20]
}
 8014e40:	bf00      	nop
 8014e42:	e7fe      	b.n	8014e42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014e44:	4b0a      	ldr	r3, [pc, #40]	; (8014e70 <vTaskPlaceOnEventListRestricted+0x54>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	3318      	adds	r3, #24
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f7fe fdec 	bl	8013a2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d002      	beq.n	8014e5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014e5e:	6879      	ldr	r1, [r7, #4]
 8014e60:	68b8      	ldr	r0, [r7, #8]
 8014e62:	f000 facb 	bl	80153fc <prvAddCurrentTaskToDelayedList>
	}
 8014e66:	bf00      	nop
 8014e68:	3718      	adds	r7, #24
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	240025ac 	.word	0x240025ac

08014e74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	68db      	ldr	r3, [r3, #12]
 8014e80:	68db      	ldr	r3, [r3, #12]
 8014e82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d10a      	bne.n	8014ea0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8e:	f383 8811 	msr	BASEPRI, r3
 8014e92:	f3bf 8f6f 	isb	sy
 8014e96:	f3bf 8f4f 	dsb	sy
 8014e9a:	60fb      	str	r3, [r7, #12]
}
 8014e9c:	bf00      	nop
 8014e9e:	e7fe      	b.n	8014e9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	3318      	adds	r3, #24
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7fe fe1d 	bl	8013ae4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014eaa:	4b1e      	ldr	r3, [pc, #120]	; (8014f24 <xTaskRemoveFromEventList+0xb0>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d11d      	bne.n	8014eee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7fe fe14 	bl	8013ae4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014ebc:	693b      	ldr	r3, [r7, #16]
 8014ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ec0:	4b19      	ldr	r3, [pc, #100]	; (8014f28 <xTaskRemoveFromEventList+0xb4>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d903      	bls.n	8014ed0 <xTaskRemoveFromEventList+0x5c>
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ecc:	4a16      	ldr	r2, [pc, #88]	; (8014f28 <xTaskRemoveFromEventList+0xb4>)
 8014ece:	6013      	str	r3, [r2, #0]
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	4413      	add	r3, r2
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	4a13      	ldr	r2, [pc, #76]	; (8014f2c <xTaskRemoveFromEventList+0xb8>)
 8014ede:	441a      	add	r2, r3
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	3304      	adds	r3, #4
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	4610      	mov	r0, r2
 8014ee8:	f7fe fd9f 	bl	8013a2a <vListInsertEnd>
 8014eec:	e005      	b.n	8014efa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	3318      	adds	r3, #24
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	480e      	ldr	r0, [pc, #56]	; (8014f30 <xTaskRemoveFromEventList+0xbc>)
 8014ef6:	f7fe fd98 	bl	8013a2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014efe:	4b0d      	ldr	r3, [pc, #52]	; (8014f34 <xTaskRemoveFromEventList+0xc0>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f04:	429a      	cmp	r2, r3
 8014f06:	d905      	bls.n	8014f14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014f08:	2301      	movs	r3, #1
 8014f0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014f0c:	4b0a      	ldr	r3, [pc, #40]	; (8014f38 <xTaskRemoveFromEventList+0xc4>)
 8014f0e:	2201      	movs	r2, #1
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	e001      	b.n	8014f18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014f14:	2300      	movs	r3, #0
 8014f16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014f18:	697b      	ldr	r3, [r7, #20]
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3718      	adds	r7, #24
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	24002aa8 	.word	0x24002aa8
 8014f28:	24002a88 	.word	0x24002a88
 8014f2c:	240025b0 	.word	0x240025b0
 8014f30:	24002a40 	.word	0x24002a40
 8014f34:	240025ac 	.word	0x240025ac
 8014f38:	24002a94 	.word	0x24002a94

08014f3c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b086      	sub	sp, #24
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014f46:	4b29      	ldr	r3, [pc, #164]	; (8014fec <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d10a      	bne.n	8014f64 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f52:	f383 8811 	msr	BASEPRI, r3
 8014f56:	f3bf 8f6f 	isb	sy
 8014f5a:	f3bf 8f4f 	dsb	sy
 8014f5e:	613b      	str	r3, [r7, #16]
}
 8014f60:	bf00      	nop
 8014f62:	e7fe      	b.n	8014f62 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	68db      	ldr	r3, [r3, #12]
 8014f72:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d10a      	bne.n	8014f90 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7e:	f383 8811 	msr	BASEPRI, r3
 8014f82:	f3bf 8f6f 	isb	sy
 8014f86:	f3bf 8f4f 	dsb	sy
 8014f8a:	60fb      	str	r3, [r7, #12]
}
 8014f8c:	bf00      	nop
 8014f8e:	e7fe      	b.n	8014f8e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f7fe fda7 	bl	8013ae4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	3304      	adds	r3, #4
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7fe fda2 	bl	8013ae4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fa4:	4b12      	ldr	r3, [pc, #72]	; (8014ff0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d903      	bls.n	8014fb4 <vTaskRemoveFromUnorderedEventList+0x78>
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fb0:	4a0f      	ldr	r2, [pc, #60]	; (8014ff0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014fb2:	6013      	str	r3, [r2, #0]
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fb8:	4613      	mov	r3, r2
 8014fba:	009b      	lsls	r3, r3, #2
 8014fbc:	4413      	add	r3, r2
 8014fbe:	009b      	lsls	r3, r3, #2
 8014fc0:	4a0c      	ldr	r2, [pc, #48]	; (8014ff4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014fc2:	441a      	add	r2, r3
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	3304      	adds	r3, #4
 8014fc8:	4619      	mov	r1, r3
 8014fca:	4610      	mov	r0, r2
 8014fcc:	f7fe fd2d 	bl	8013a2a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd4:	4b08      	ldr	r3, [pc, #32]	; (8014ff8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d902      	bls.n	8014fe4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014fde:	4b07      	ldr	r3, [pc, #28]	; (8014ffc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	601a      	str	r2, [r3, #0]
	}
}
 8014fe4:	bf00      	nop
 8014fe6:	3718      	adds	r7, #24
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	24002aa8 	.word	0x24002aa8
 8014ff0:	24002a88 	.word	0x24002a88
 8014ff4:	240025b0 	.word	0x240025b0
 8014ff8:	240025ac 	.word	0x240025ac
 8014ffc:	24002a94 	.word	0x24002a94

08015000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015000:	b480      	push	{r7}
 8015002:	b083      	sub	sp, #12
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015008:	4b06      	ldr	r3, [pc, #24]	; (8015024 <vTaskInternalSetTimeOutState+0x24>)
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015010:	4b05      	ldr	r3, [pc, #20]	; (8015028 <vTaskInternalSetTimeOutState+0x28>)
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	605a      	str	r2, [r3, #4]
}
 8015018:	bf00      	nop
 801501a:	370c      	adds	r7, #12
 801501c:	46bd      	mov	sp, r7
 801501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015022:	4770      	bx	lr
 8015024:	24002a98 	.word	0x24002a98
 8015028:	24002a84 	.word	0x24002a84

0801502c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b088      	sub	sp, #32
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d10a      	bne.n	8015052 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015040:	f383 8811 	msr	BASEPRI, r3
 8015044:	f3bf 8f6f 	isb	sy
 8015048:	f3bf 8f4f 	dsb	sy
 801504c:	613b      	str	r3, [r7, #16]
}
 801504e:	bf00      	nop
 8015050:	e7fe      	b.n	8015050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d10a      	bne.n	801506e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801505c:	f383 8811 	msr	BASEPRI, r3
 8015060:	f3bf 8f6f 	isb	sy
 8015064:	f3bf 8f4f 	dsb	sy
 8015068:	60fb      	str	r3, [r7, #12]
}
 801506a:	bf00      	nop
 801506c:	e7fe      	b.n	801506c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801506e:	f000 feb1 	bl	8015dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015072:	4b1d      	ldr	r3, [pc, #116]	; (80150e8 <xTaskCheckForTimeOut+0xbc>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	69ba      	ldr	r2, [r7, #24]
 801507e:	1ad3      	subs	r3, r2, r3
 8015080:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801508a:	d102      	bne.n	8015092 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801508c:	2300      	movs	r3, #0
 801508e:	61fb      	str	r3, [r7, #28]
 8015090:	e023      	b.n	80150da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	4b15      	ldr	r3, [pc, #84]	; (80150ec <xTaskCheckForTimeOut+0xc0>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	429a      	cmp	r2, r3
 801509c:	d007      	beq.n	80150ae <xTaskCheckForTimeOut+0x82>
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	69ba      	ldr	r2, [r7, #24]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d302      	bcc.n	80150ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80150a8:	2301      	movs	r3, #1
 80150aa:	61fb      	str	r3, [r7, #28]
 80150ac:	e015      	b.n	80150da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	697a      	ldr	r2, [r7, #20]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d20b      	bcs.n	80150d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	1ad2      	subs	r2, r2, r3
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7ff ff9b 	bl	8015000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80150ca:	2300      	movs	r3, #0
 80150cc:	61fb      	str	r3, [r7, #28]
 80150ce:	e004      	b.n	80150da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	2200      	movs	r2, #0
 80150d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80150d6:	2301      	movs	r3, #1
 80150d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80150da:	f000 feab 	bl	8015e34 <vPortExitCritical>

	return xReturn;
 80150de:	69fb      	ldr	r3, [r7, #28]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3720      	adds	r7, #32
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	24002a84 	.word	0x24002a84
 80150ec:	24002a98 	.word	0x24002a98

080150f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80150f0:	b480      	push	{r7}
 80150f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80150f4:	4b03      	ldr	r3, [pc, #12]	; (8015104 <vTaskMissedYield+0x14>)
 80150f6:	2201      	movs	r2, #1
 80150f8:	601a      	str	r2, [r3, #0]
}
 80150fa:	bf00      	nop
 80150fc:	46bd      	mov	sp, r7
 80150fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015102:	4770      	bx	lr
 8015104:	24002a94 	.word	0x24002a94

08015108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015110:	f000 f852 	bl	80151b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015114:	4b06      	ldr	r3, [pc, #24]	; (8015130 <prvIdleTask+0x28>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b01      	cmp	r3, #1
 801511a:	d9f9      	bls.n	8015110 <prvIdleTask+0x8>
			{
				taskYIELD();
 801511c:	4b05      	ldr	r3, [pc, #20]	; (8015134 <prvIdleTask+0x2c>)
 801511e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	f3bf 8f4f 	dsb	sy
 8015128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801512c:	e7f0      	b.n	8015110 <prvIdleTask+0x8>
 801512e:	bf00      	nop
 8015130:	240025b0 	.word	0x240025b0
 8015134:	e000ed04 	.word	0xe000ed04

08015138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b082      	sub	sp, #8
 801513c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801513e:	2300      	movs	r3, #0
 8015140:	607b      	str	r3, [r7, #4]
 8015142:	e00c      	b.n	801515e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	4613      	mov	r3, r2
 8015148:	009b      	lsls	r3, r3, #2
 801514a:	4413      	add	r3, r2
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	4a12      	ldr	r2, [pc, #72]	; (8015198 <prvInitialiseTaskLists+0x60>)
 8015150:	4413      	add	r3, r2
 8015152:	4618      	mov	r0, r3
 8015154:	f7fe fc3c 	bl	80139d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	3301      	adds	r3, #1
 801515c:	607b      	str	r3, [r7, #4]
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2b37      	cmp	r3, #55	; 0x37
 8015162:	d9ef      	bls.n	8015144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015164:	480d      	ldr	r0, [pc, #52]	; (801519c <prvInitialiseTaskLists+0x64>)
 8015166:	f7fe fc33 	bl	80139d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801516a:	480d      	ldr	r0, [pc, #52]	; (80151a0 <prvInitialiseTaskLists+0x68>)
 801516c:	f7fe fc30 	bl	80139d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015170:	480c      	ldr	r0, [pc, #48]	; (80151a4 <prvInitialiseTaskLists+0x6c>)
 8015172:	f7fe fc2d 	bl	80139d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015176:	480c      	ldr	r0, [pc, #48]	; (80151a8 <prvInitialiseTaskLists+0x70>)
 8015178:	f7fe fc2a 	bl	80139d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801517c:	480b      	ldr	r0, [pc, #44]	; (80151ac <prvInitialiseTaskLists+0x74>)
 801517e:	f7fe fc27 	bl	80139d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015182:	4b0b      	ldr	r3, [pc, #44]	; (80151b0 <prvInitialiseTaskLists+0x78>)
 8015184:	4a05      	ldr	r2, [pc, #20]	; (801519c <prvInitialiseTaskLists+0x64>)
 8015186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015188:	4b0a      	ldr	r3, [pc, #40]	; (80151b4 <prvInitialiseTaskLists+0x7c>)
 801518a:	4a05      	ldr	r2, [pc, #20]	; (80151a0 <prvInitialiseTaskLists+0x68>)
 801518c:	601a      	str	r2, [r3, #0]
}
 801518e:	bf00      	nop
 8015190:	3708      	adds	r7, #8
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	240025b0 	.word	0x240025b0
 801519c:	24002a10 	.word	0x24002a10
 80151a0:	24002a24 	.word	0x24002a24
 80151a4:	24002a40 	.word	0x24002a40
 80151a8:	24002a54 	.word	0x24002a54
 80151ac:	24002a6c 	.word	0x24002a6c
 80151b0:	24002a38 	.word	0x24002a38
 80151b4:	24002a3c 	.word	0x24002a3c

080151b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80151be:	e019      	b.n	80151f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80151c0:	f000 fe08 	bl	8015dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151c4:	4b10      	ldr	r3, [pc, #64]	; (8015208 <prvCheckTasksWaitingTermination+0x50>)
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	68db      	ldr	r3, [r3, #12]
 80151ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	3304      	adds	r3, #4
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7fe fc87 	bl	8013ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80151d6:	4b0d      	ldr	r3, [pc, #52]	; (801520c <prvCheckTasksWaitingTermination+0x54>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	3b01      	subs	r3, #1
 80151dc:	4a0b      	ldr	r2, [pc, #44]	; (801520c <prvCheckTasksWaitingTermination+0x54>)
 80151de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80151e0:	4b0b      	ldr	r3, [pc, #44]	; (8015210 <prvCheckTasksWaitingTermination+0x58>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	3b01      	subs	r3, #1
 80151e6:	4a0a      	ldr	r2, [pc, #40]	; (8015210 <prvCheckTasksWaitingTermination+0x58>)
 80151e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80151ea:	f000 fe23 	bl	8015e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f000 f810 	bl	8015214 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80151f4:	4b06      	ldr	r3, [pc, #24]	; (8015210 <prvCheckTasksWaitingTermination+0x58>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d1e1      	bne.n	80151c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80151fc:	bf00      	nop
 80151fe:	bf00      	nop
 8015200:	3708      	adds	r7, #8
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}
 8015206:	bf00      	nop
 8015208:	24002a54 	.word	0x24002a54
 801520c:	24002a80 	.word	0x24002a80
 8015210:	24002a68 	.word	0x24002a68

08015214 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015214:	b580      	push	{r7, lr}
 8015216:	b084      	sub	sp, #16
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015222:	2b00      	cmp	r3, #0
 8015224:	d108      	bne.n	8015238 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801522a:	4618      	mov	r0, r3
 801522c:	f000 ffc0 	bl	80161b0 <vPortFree>
				vPortFree( pxTCB );
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f000 ffbd 	bl	80161b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015236:	e018      	b.n	801526a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801523e:	2b01      	cmp	r3, #1
 8015240:	d103      	bne.n	801524a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f000 ffb4 	bl	80161b0 <vPortFree>
	}
 8015248:	e00f      	b.n	801526a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015250:	2b02      	cmp	r3, #2
 8015252:	d00a      	beq.n	801526a <prvDeleteTCB+0x56>
	__asm volatile
 8015254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015258:	f383 8811 	msr	BASEPRI, r3
 801525c:	f3bf 8f6f 	isb	sy
 8015260:	f3bf 8f4f 	dsb	sy
 8015264:	60fb      	str	r3, [r7, #12]
}
 8015266:	bf00      	nop
 8015268:	e7fe      	b.n	8015268 <prvDeleteTCB+0x54>
	}
 801526a:	bf00      	nop
 801526c:	3710      	adds	r7, #16
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}
	...

08015274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801527a:	4b0c      	ldr	r3, [pc, #48]	; (80152ac <prvResetNextTaskUnblockTime+0x38>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d104      	bne.n	801528e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015284:	4b0a      	ldr	r3, [pc, #40]	; (80152b0 <prvResetNextTaskUnblockTime+0x3c>)
 8015286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801528a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801528c:	e008      	b.n	80152a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801528e:	4b07      	ldr	r3, [pc, #28]	; (80152ac <prvResetNextTaskUnblockTime+0x38>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	4a04      	ldr	r2, [pc, #16]	; (80152b0 <prvResetNextTaskUnblockTime+0x3c>)
 801529e:	6013      	str	r3, [r2, #0]
}
 80152a0:	bf00      	nop
 80152a2:	370c      	adds	r7, #12
 80152a4:	46bd      	mov	sp, r7
 80152a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152aa:	4770      	bx	lr
 80152ac:	24002a38 	.word	0x24002a38
 80152b0:	24002aa0 	.word	0x24002aa0

080152b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80152b4:	b480      	push	{r7}
 80152b6:	b083      	sub	sp, #12
 80152b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80152ba:	4b0b      	ldr	r3, [pc, #44]	; (80152e8 <xTaskGetSchedulerState+0x34>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d102      	bne.n	80152c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80152c2:	2301      	movs	r3, #1
 80152c4:	607b      	str	r3, [r7, #4]
 80152c6:	e008      	b.n	80152da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152c8:	4b08      	ldr	r3, [pc, #32]	; (80152ec <xTaskGetSchedulerState+0x38>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d102      	bne.n	80152d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80152d0:	2302      	movs	r3, #2
 80152d2:	607b      	str	r3, [r7, #4]
 80152d4:	e001      	b.n	80152da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80152d6:	2300      	movs	r3, #0
 80152d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80152da:	687b      	ldr	r3, [r7, #4]
	}
 80152dc:	4618      	mov	r0, r3
 80152de:	370c      	adds	r7, #12
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr
 80152e8:	24002a8c 	.word	0x24002a8c
 80152ec:	24002aa8 	.word	0x24002aa8

080152f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b086      	sub	sp, #24
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80152fc:	2300      	movs	r3, #0
 80152fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d056      	beq.n	80153b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015306:	4b2e      	ldr	r3, [pc, #184]	; (80153c0 <xTaskPriorityDisinherit+0xd0>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	693a      	ldr	r2, [r7, #16]
 801530c:	429a      	cmp	r2, r3
 801530e:	d00a      	beq.n	8015326 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015314:	f383 8811 	msr	BASEPRI, r3
 8015318:	f3bf 8f6f 	isb	sy
 801531c:	f3bf 8f4f 	dsb	sy
 8015320:	60fb      	str	r3, [r7, #12]
}
 8015322:	bf00      	nop
 8015324:	e7fe      	b.n	8015324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801532a:	2b00      	cmp	r3, #0
 801532c:	d10a      	bne.n	8015344 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015332:	f383 8811 	msr	BASEPRI, r3
 8015336:	f3bf 8f6f 	isb	sy
 801533a:	f3bf 8f4f 	dsb	sy
 801533e:	60bb      	str	r3, [r7, #8]
}
 8015340:	bf00      	nop
 8015342:	e7fe      	b.n	8015342 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015348:	1e5a      	subs	r2, r3, #1
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015356:	429a      	cmp	r2, r3
 8015358:	d02c      	beq.n	80153b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801535e:	2b00      	cmp	r3, #0
 8015360:	d128      	bne.n	80153b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	3304      	adds	r3, #4
 8015366:	4618      	mov	r0, r3
 8015368:	f7fe fbbc 	bl	8013ae4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015384:	4b0f      	ldr	r3, [pc, #60]	; (80153c4 <xTaskPriorityDisinherit+0xd4>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	429a      	cmp	r2, r3
 801538a:	d903      	bls.n	8015394 <xTaskPriorityDisinherit+0xa4>
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015390:	4a0c      	ldr	r2, [pc, #48]	; (80153c4 <xTaskPriorityDisinherit+0xd4>)
 8015392:	6013      	str	r3, [r2, #0]
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015398:	4613      	mov	r3, r2
 801539a:	009b      	lsls	r3, r3, #2
 801539c:	4413      	add	r3, r2
 801539e:	009b      	lsls	r3, r3, #2
 80153a0:	4a09      	ldr	r2, [pc, #36]	; (80153c8 <xTaskPriorityDisinherit+0xd8>)
 80153a2:	441a      	add	r2, r3
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	3304      	adds	r3, #4
 80153a8:	4619      	mov	r1, r3
 80153aa:	4610      	mov	r0, r2
 80153ac:	f7fe fb3d 	bl	8013a2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80153b0:	2301      	movs	r3, #1
 80153b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80153b4:	697b      	ldr	r3, [r7, #20]
	}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3718      	adds	r7, #24
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	240025ac 	.word	0x240025ac
 80153c4:	24002a88 	.word	0x24002a88
 80153c8:	240025b0 	.word	0x240025b0

080153cc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80153cc:	b480      	push	{r7}
 80153ce:	b083      	sub	sp, #12
 80153d0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80153d2:	4b09      	ldr	r3, [pc, #36]	; (80153f8 <uxTaskResetEventItemValue+0x2c>)
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	699b      	ldr	r3, [r3, #24]
 80153d8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153da:	4b07      	ldr	r3, [pc, #28]	; (80153f8 <uxTaskResetEventItemValue+0x2c>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153e0:	4b05      	ldr	r3, [pc, #20]	; (80153f8 <uxTaskResetEventItemValue+0x2c>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80153e8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80153ea:	687b      	ldr	r3, [r7, #4]
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	370c      	adds	r7, #12
 80153f0:	46bd      	mov	sp, r7
 80153f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f6:	4770      	bx	lr
 80153f8:	240025ac 	.word	0x240025ac

080153fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b084      	sub	sp, #16
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015406:	4b21      	ldr	r3, [pc, #132]	; (801548c <prvAddCurrentTaskToDelayedList+0x90>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801540c:	4b20      	ldr	r3, [pc, #128]	; (8015490 <prvAddCurrentTaskToDelayedList+0x94>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	3304      	adds	r3, #4
 8015412:	4618      	mov	r0, r3
 8015414:	f7fe fb66 	bl	8013ae4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801541e:	d10a      	bne.n	8015436 <prvAddCurrentTaskToDelayedList+0x3a>
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d007      	beq.n	8015436 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015426:	4b1a      	ldr	r3, [pc, #104]	; (8015490 <prvAddCurrentTaskToDelayedList+0x94>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	3304      	adds	r3, #4
 801542c:	4619      	mov	r1, r3
 801542e:	4819      	ldr	r0, [pc, #100]	; (8015494 <prvAddCurrentTaskToDelayedList+0x98>)
 8015430:	f7fe fafb 	bl	8013a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015434:	e026      	b.n	8015484 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015436:	68fa      	ldr	r2, [r7, #12]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	4413      	add	r3, r2
 801543c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801543e:	4b14      	ldr	r3, [pc, #80]	; (8015490 <prvAddCurrentTaskToDelayedList+0x94>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015446:	68ba      	ldr	r2, [r7, #8]
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	429a      	cmp	r2, r3
 801544c:	d209      	bcs.n	8015462 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801544e:	4b12      	ldr	r3, [pc, #72]	; (8015498 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	4b0f      	ldr	r3, [pc, #60]	; (8015490 <prvAddCurrentTaskToDelayedList+0x94>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	3304      	adds	r3, #4
 8015458:	4619      	mov	r1, r3
 801545a:	4610      	mov	r0, r2
 801545c:	f7fe fb09 	bl	8013a72 <vListInsert>
}
 8015460:	e010      	b.n	8015484 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015462:	4b0e      	ldr	r3, [pc, #56]	; (801549c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015464:	681a      	ldr	r2, [r3, #0]
 8015466:	4b0a      	ldr	r3, [pc, #40]	; (8015490 <prvAddCurrentTaskToDelayedList+0x94>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	3304      	adds	r3, #4
 801546c:	4619      	mov	r1, r3
 801546e:	4610      	mov	r0, r2
 8015470:	f7fe faff 	bl	8013a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015474:	4b0a      	ldr	r3, [pc, #40]	; (80154a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	68ba      	ldr	r2, [r7, #8]
 801547a:	429a      	cmp	r2, r3
 801547c:	d202      	bcs.n	8015484 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801547e:	4a08      	ldr	r2, [pc, #32]	; (80154a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	6013      	str	r3, [r2, #0]
}
 8015484:	bf00      	nop
 8015486:	3710      	adds	r7, #16
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	24002a84 	.word	0x24002a84
 8015490:	240025ac 	.word	0x240025ac
 8015494:	24002a6c 	.word	0x24002a6c
 8015498:	24002a3c 	.word	0x24002a3c
 801549c:	24002a38 	.word	0x24002a38
 80154a0:	24002aa0 	.word	0x24002aa0

080154a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b08a      	sub	sp, #40	; 0x28
 80154a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80154aa:	2300      	movs	r3, #0
 80154ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80154ae:	f000 fb07 	bl	8015ac0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80154b2:	4b1c      	ldr	r3, [pc, #112]	; (8015524 <xTimerCreateTimerTask+0x80>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d021      	beq.n	80154fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80154ba:	2300      	movs	r3, #0
 80154bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80154be:	2300      	movs	r3, #0
 80154c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80154c2:	1d3a      	adds	r2, r7, #4
 80154c4:	f107 0108 	add.w	r1, r7, #8
 80154c8:	f107 030c 	add.w	r3, r7, #12
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7fd fff9 	bl	80134c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80154d2:	6879      	ldr	r1, [r7, #4]
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	68fa      	ldr	r2, [r7, #12]
 80154d8:	9202      	str	r2, [sp, #8]
 80154da:	9301      	str	r3, [sp, #4]
 80154dc:	2302      	movs	r3, #2
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	2300      	movs	r3, #0
 80154e2:	460a      	mov	r2, r1
 80154e4:	4910      	ldr	r1, [pc, #64]	; (8015528 <xTimerCreateTimerTask+0x84>)
 80154e6:	4811      	ldr	r0, [pc, #68]	; (801552c <xTimerCreateTimerTask+0x88>)
 80154e8:	f7ff f812 	bl	8014510 <xTaskCreateStatic>
 80154ec:	4603      	mov	r3, r0
 80154ee:	4a10      	ldr	r2, [pc, #64]	; (8015530 <xTimerCreateTimerTask+0x8c>)
 80154f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80154f2:	4b0f      	ldr	r3, [pc, #60]	; (8015530 <xTimerCreateTimerTask+0x8c>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d001      	beq.n	80154fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80154fa:	2301      	movs	r3, #1
 80154fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d10a      	bne.n	801551a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015508:	f383 8811 	msr	BASEPRI, r3
 801550c:	f3bf 8f6f 	isb	sy
 8015510:	f3bf 8f4f 	dsb	sy
 8015514:	613b      	str	r3, [r7, #16]
}
 8015516:	bf00      	nop
 8015518:	e7fe      	b.n	8015518 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801551a:	697b      	ldr	r3, [r7, #20]
}
 801551c:	4618      	mov	r0, r3
 801551e:	3718      	adds	r7, #24
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	24002adc 	.word	0x24002adc
 8015528:	080170d8 	.word	0x080170d8
 801552c:	08015669 	.word	0x08015669
 8015530:	24002ae0 	.word	0x24002ae0

08015534 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b08a      	sub	sp, #40	; 0x28
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	607a      	str	r2, [r7, #4]
 8015540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015542:	2300      	movs	r3, #0
 8015544:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10a      	bne.n	8015562 <xTimerGenericCommand+0x2e>
	__asm volatile
 801554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015550:	f383 8811 	msr	BASEPRI, r3
 8015554:	f3bf 8f6f 	isb	sy
 8015558:	f3bf 8f4f 	dsb	sy
 801555c:	623b      	str	r3, [r7, #32]
}
 801555e:	bf00      	nop
 8015560:	e7fe      	b.n	8015560 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015562:	4b1a      	ldr	r3, [pc, #104]	; (80155cc <xTimerGenericCommand+0x98>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d02a      	beq.n	80155c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	2b05      	cmp	r3, #5
 801557a:	dc18      	bgt.n	80155ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801557c:	f7ff fe9a 	bl	80152b4 <xTaskGetSchedulerState>
 8015580:	4603      	mov	r3, r0
 8015582:	2b02      	cmp	r3, #2
 8015584:	d109      	bne.n	801559a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015586:	4b11      	ldr	r3, [pc, #68]	; (80155cc <xTimerGenericCommand+0x98>)
 8015588:	6818      	ldr	r0, [r3, #0]
 801558a:	f107 0110 	add.w	r1, r7, #16
 801558e:	2300      	movs	r3, #0
 8015590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015592:	f7fe fbd5 	bl	8013d40 <xQueueGenericSend>
 8015596:	6278      	str	r0, [r7, #36]	; 0x24
 8015598:	e012      	b.n	80155c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801559a:	4b0c      	ldr	r3, [pc, #48]	; (80155cc <xTimerGenericCommand+0x98>)
 801559c:	6818      	ldr	r0, [r3, #0]
 801559e:	f107 0110 	add.w	r1, r7, #16
 80155a2:	2300      	movs	r3, #0
 80155a4:	2200      	movs	r2, #0
 80155a6:	f7fe fbcb 	bl	8013d40 <xQueueGenericSend>
 80155aa:	6278      	str	r0, [r7, #36]	; 0x24
 80155ac:	e008      	b.n	80155c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80155ae:	4b07      	ldr	r3, [pc, #28]	; (80155cc <xTimerGenericCommand+0x98>)
 80155b0:	6818      	ldr	r0, [r3, #0]
 80155b2:	f107 0110 	add.w	r1, r7, #16
 80155b6:	2300      	movs	r3, #0
 80155b8:	683a      	ldr	r2, [r7, #0]
 80155ba:	f7fe fcbf 	bl	8013f3c <xQueueGenericSendFromISR>
 80155be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80155c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3728      	adds	r7, #40	; 0x28
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	24002adc 	.word	0x24002adc

080155d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b088      	sub	sp, #32
 80155d4:	af02      	add	r7, sp, #8
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155da:	4b22      	ldr	r3, [pc, #136]	; (8015664 <prvProcessExpiredTimer+0x94>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	3304      	adds	r3, #4
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7fe fa7b 	bl	8013ae4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155f4:	f003 0304 	and.w	r3, r3, #4
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d022      	beq.n	8015642 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	699a      	ldr	r2, [r3, #24]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	18d1      	adds	r1, r2, r3
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	683a      	ldr	r2, [r7, #0]
 8015608:	6978      	ldr	r0, [r7, #20]
 801560a:	f000 f8d1 	bl	80157b0 <prvInsertTimerInActiveList>
 801560e:	4603      	mov	r3, r0
 8015610:	2b00      	cmp	r3, #0
 8015612:	d01f      	beq.n	8015654 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015614:	2300      	movs	r3, #0
 8015616:	9300      	str	r3, [sp, #0]
 8015618:	2300      	movs	r3, #0
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	2100      	movs	r1, #0
 801561e:	6978      	ldr	r0, [r7, #20]
 8015620:	f7ff ff88 	bl	8015534 <xTimerGenericCommand>
 8015624:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d113      	bne.n	8015654 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015630:	f383 8811 	msr	BASEPRI, r3
 8015634:	f3bf 8f6f 	isb	sy
 8015638:	f3bf 8f4f 	dsb	sy
 801563c:	60fb      	str	r3, [r7, #12]
}
 801563e:	bf00      	nop
 8015640:	e7fe      	b.n	8015640 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015648:	f023 0301 	bic.w	r3, r3, #1
 801564c:	b2da      	uxtb	r2, r3
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	6a1b      	ldr	r3, [r3, #32]
 8015658:	6978      	ldr	r0, [r7, #20]
 801565a:	4798      	blx	r3
}
 801565c:	bf00      	nop
 801565e:	3718      	adds	r7, #24
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	24002ad4 	.word	0x24002ad4

08015668 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b084      	sub	sp, #16
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015670:	f107 0308 	add.w	r3, r7, #8
 8015674:	4618      	mov	r0, r3
 8015676:	f000 f857 	bl	8015728 <prvGetNextExpireTime>
 801567a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	4619      	mov	r1, r3
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f000 f803 	bl	801568c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015686:	f000 f8d5 	bl	8015834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801568a:	e7f1      	b.n	8015670 <prvTimerTask+0x8>

0801568c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015696:	f7ff f977 	bl	8014988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801569a:	f107 0308 	add.w	r3, r7, #8
 801569e:	4618      	mov	r0, r3
 80156a0:	f000 f866 	bl	8015770 <prvSampleTimeNow>
 80156a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d130      	bne.n	801570e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d10a      	bne.n	80156c8 <prvProcessTimerOrBlockTask+0x3c>
 80156b2:	687a      	ldr	r2, [r7, #4]
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d806      	bhi.n	80156c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80156ba:	f7ff f973 	bl	80149a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80156be:	68f9      	ldr	r1, [r7, #12]
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7ff ff85 	bl	80155d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80156c6:	e024      	b.n	8015712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d008      	beq.n	80156e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80156ce:	4b13      	ldr	r3, [pc, #76]	; (801571c <prvProcessTimerOrBlockTask+0x90>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d101      	bne.n	80156dc <prvProcessTimerOrBlockTask+0x50>
 80156d8:	2301      	movs	r3, #1
 80156da:	e000      	b.n	80156de <prvProcessTimerOrBlockTask+0x52>
 80156dc:	2300      	movs	r3, #0
 80156de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80156e0:	4b0f      	ldr	r3, [pc, #60]	; (8015720 <prvProcessTimerOrBlockTask+0x94>)
 80156e2:	6818      	ldr	r0, [r3, #0]
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	1ad3      	subs	r3, r2, r3
 80156ea:	683a      	ldr	r2, [r7, #0]
 80156ec:	4619      	mov	r1, r3
 80156ee:	f7fe fedb 	bl	80144a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80156f2:	f7ff f957 	bl	80149a4 <xTaskResumeAll>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d10a      	bne.n	8015712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80156fc:	4b09      	ldr	r3, [pc, #36]	; (8015724 <prvProcessTimerOrBlockTask+0x98>)
 80156fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015702:	601a      	str	r2, [r3, #0]
 8015704:	f3bf 8f4f 	dsb	sy
 8015708:	f3bf 8f6f 	isb	sy
}
 801570c:	e001      	b.n	8015712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801570e:	f7ff f949 	bl	80149a4 <xTaskResumeAll>
}
 8015712:	bf00      	nop
 8015714:	3710      	adds	r7, #16
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop
 801571c:	24002ad8 	.word	0x24002ad8
 8015720:	24002adc 	.word	0x24002adc
 8015724:	e000ed04 	.word	0xe000ed04

08015728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015728:	b480      	push	{r7}
 801572a:	b085      	sub	sp, #20
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015730:	4b0e      	ldr	r3, [pc, #56]	; (801576c <prvGetNextExpireTime+0x44>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d101      	bne.n	801573e <prvGetNextExpireTime+0x16>
 801573a:	2201      	movs	r2, #1
 801573c:	e000      	b.n	8015740 <prvGetNextExpireTime+0x18>
 801573e:	2200      	movs	r2, #0
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d105      	bne.n	8015758 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801574c:	4b07      	ldr	r3, [pc, #28]	; (801576c <prvGetNextExpireTime+0x44>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	68db      	ldr	r3, [r3, #12]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	60fb      	str	r3, [r7, #12]
 8015756:	e001      	b.n	801575c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015758:	2300      	movs	r3, #0
 801575a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801575c:	68fb      	ldr	r3, [r7, #12]
}
 801575e:	4618      	mov	r0, r3
 8015760:	3714      	adds	r7, #20
 8015762:	46bd      	mov	sp, r7
 8015764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	24002ad4 	.word	0x24002ad4

08015770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b084      	sub	sp, #16
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015778:	f7ff f9b2 	bl	8014ae0 <xTaskGetTickCount>
 801577c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801577e:	4b0b      	ldr	r3, [pc, #44]	; (80157ac <prvSampleTimeNow+0x3c>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	429a      	cmp	r2, r3
 8015786:	d205      	bcs.n	8015794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015788:	f000 f936 	bl	80159f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2201      	movs	r2, #1
 8015790:	601a      	str	r2, [r3, #0]
 8015792:	e002      	b.n	801579a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2200      	movs	r2, #0
 8015798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801579a:	4a04      	ldr	r2, [pc, #16]	; (80157ac <prvSampleTimeNow+0x3c>)
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80157a0:	68fb      	ldr	r3, [r7, #12]
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3710      	adds	r7, #16
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	24002ae4 	.word	0x24002ae4

080157b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b086      	sub	sp, #24
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	607a      	str	r2, [r7, #4]
 80157bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80157be:	2300      	movs	r3, #0
 80157c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	68ba      	ldr	r2, [r7, #8]
 80157c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	68fa      	ldr	r2, [r7, #12]
 80157cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80157ce:	68ba      	ldr	r2, [r7, #8]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d812      	bhi.n	80157fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	1ad2      	subs	r2, r2, r3
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	699b      	ldr	r3, [r3, #24]
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d302      	bcc.n	80157ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80157e4:	2301      	movs	r3, #1
 80157e6:	617b      	str	r3, [r7, #20]
 80157e8:	e01b      	b.n	8015822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80157ea:	4b10      	ldr	r3, [pc, #64]	; (801582c <prvInsertTimerInActiveList+0x7c>)
 80157ec:	681a      	ldr	r2, [r3, #0]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	3304      	adds	r3, #4
 80157f2:	4619      	mov	r1, r3
 80157f4:	4610      	mov	r0, r2
 80157f6:	f7fe f93c 	bl	8013a72 <vListInsert>
 80157fa:	e012      	b.n	8015822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	429a      	cmp	r2, r3
 8015802:	d206      	bcs.n	8015812 <prvInsertTimerInActiveList+0x62>
 8015804:	68ba      	ldr	r2, [r7, #8]
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	429a      	cmp	r2, r3
 801580a:	d302      	bcc.n	8015812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801580c:	2301      	movs	r3, #1
 801580e:	617b      	str	r3, [r7, #20]
 8015810:	e007      	b.n	8015822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015812:	4b07      	ldr	r3, [pc, #28]	; (8015830 <prvInsertTimerInActiveList+0x80>)
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	3304      	adds	r3, #4
 801581a:	4619      	mov	r1, r3
 801581c:	4610      	mov	r0, r2
 801581e:	f7fe f928 	bl	8013a72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015822:	697b      	ldr	r3, [r7, #20]
}
 8015824:	4618      	mov	r0, r3
 8015826:	3718      	adds	r7, #24
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	24002ad8 	.word	0x24002ad8
 8015830:	24002ad4 	.word	0x24002ad4

08015834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b08e      	sub	sp, #56	; 0x38
 8015838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801583a:	e0ca      	b.n	80159d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2b00      	cmp	r3, #0
 8015840:	da18      	bge.n	8015874 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015842:	1d3b      	adds	r3, r7, #4
 8015844:	3304      	adds	r3, #4
 8015846:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584a:	2b00      	cmp	r3, #0
 801584c:	d10a      	bne.n	8015864 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015852:	f383 8811 	msr	BASEPRI, r3
 8015856:	f3bf 8f6f 	isb	sy
 801585a:	f3bf 8f4f 	dsb	sy
 801585e:	61fb      	str	r3, [r7, #28]
}
 8015860:	bf00      	nop
 8015862:	e7fe      	b.n	8015862 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801586a:	6850      	ldr	r0, [r2, #4]
 801586c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801586e:	6892      	ldr	r2, [r2, #8]
 8015870:	4611      	mov	r1, r2
 8015872:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	f2c0 80aa 	blt.w	80159d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015882:	695b      	ldr	r3, [r3, #20]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d004      	beq.n	8015892 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588a:	3304      	adds	r3, #4
 801588c:	4618      	mov	r0, r3
 801588e:	f7fe f929 	bl	8013ae4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015892:	463b      	mov	r3, r7
 8015894:	4618      	mov	r0, r3
 8015896:	f7ff ff6b 	bl	8015770 <prvSampleTimeNow>
 801589a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2b09      	cmp	r3, #9
 80158a0:	f200 8097 	bhi.w	80159d2 <prvProcessReceivedCommands+0x19e>
 80158a4:	a201      	add	r2, pc, #4	; (adr r2, 80158ac <prvProcessReceivedCommands+0x78>)
 80158a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158aa:	bf00      	nop
 80158ac:	080158d5 	.word	0x080158d5
 80158b0:	080158d5 	.word	0x080158d5
 80158b4:	080158d5 	.word	0x080158d5
 80158b8:	08015949 	.word	0x08015949
 80158bc:	0801595d 	.word	0x0801595d
 80158c0:	080159a7 	.word	0x080159a7
 80158c4:	080158d5 	.word	0x080158d5
 80158c8:	080158d5 	.word	0x080158d5
 80158cc:	08015949 	.word	0x08015949
 80158d0:	0801595d 	.word	0x0801595d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158da:	f043 0301 	orr.w	r3, r3, #1
 80158de:	b2da      	uxtb	r2, r3
 80158e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80158e6:	68ba      	ldr	r2, [r7, #8]
 80158e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ea:	699b      	ldr	r3, [r3, #24]
 80158ec:	18d1      	adds	r1, r2, r3
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158f4:	f7ff ff5c 	bl	80157b0 <prvInsertTimerInActiveList>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d069      	beq.n	80159d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015900:	6a1b      	ldr	r3, [r3, #32]
 8015902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015904:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801590c:	f003 0304 	and.w	r3, r3, #4
 8015910:	2b00      	cmp	r3, #0
 8015912:	d05e      	beq.n	80159d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015914:	68ba      	ldr	r2, [r7, #8]
 8015916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015918:	699b      	ldr	r3, [r3, #24]
 801591a:	441a      	add	r2, r3
 801591c:	2300      	movs	r3, #0
 801591e:	9300      	str	r3, [sp, #0]
 8015920:	2300      	movs	r3, #0
 8015922:	2100      	movs	r1, #0
 8015924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015926:	f7ff fe05 	bl	8015534 <xTimerGenericCommand>
 801592a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801592c:	6a3b      	ldr	r3, [r7, #32]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d14f      	bne.n	80159d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015936:	f383 8811 	msr	BASEPRI, r3
 801593a:	f3bf 8f6f 	isb	sy
 801593e:	f3bf 8f4f 	dsb	sy
 8015942:	61bb      	str	r3, [r7, #24]
}
 8015944:	bf00      	nop
 8015946:	e7fe      	b.n	8015946 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801594e:	f023 0301 	bic.w	r3, r3, #1
 8015952:	b2da      	uxtb	r2, r3
 8015954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801595a:	e03a      	b.n	80159d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801595e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015962:	f043 0301 	orr.w	r3, r3, #1
 8015966:	b2da      	uxtb	r2, r3
 8015968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801596e:	68ba      	ldr	r2, [r7, #8]
 8015970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015972:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015976:	699b      	ldr	r3, [r3, #24]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d10a      	bne.n	8015992 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015980:	f383 8811 	msr	BASEPRI, r3
 8015984:	f3bf 8f6f 	isb	sy
 8015988:	f3bf 8f4f 	dsb	sy
 801598c:	617b      	str	r3, [r7, #20]
}
 801598e:	bf00      	nop
 8015990:	e7fe      	b.n	8015990 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015994:	699a      	ldr	r2, [r3, #24]
 8015996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015998:	18d1      	adds	r1, r2, r3
 801599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801599e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159a0:	f7ff ff06 	bl	80157b0 <prvInsertTimerInActiveList>
					break;
 80159a4:	e015      	b.n	80159d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80159a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159ac:	f003 0302 	and.w	r3, r3, #2
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d103      	bne.n	80159bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80159b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159b6:	f000 fbfb 	bl	80161b0 <vPortFree>
 80159ba:	e00a      	b.n	80159d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80159bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159c2:	f023 0301 	bic.w	r3, r3, #1
 80159c6:	b2da      	uxtb	r2, r3
 80159c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80159ce:	e000      	b.n	80159d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80159d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80159d2:	4b08      	ldr	r3, [pc, #32]	; (80159f4 <prvProcessReceivedCommands+0x1c0>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	1d39      	adds	r1, r7, #4
 80159d8:	2200      	movs	r2, #0
 80159da:	4618      	mov	r0, r3
 80159dc:	f7fe fb4a 	bl	8014074 <xQueueReceive>
 80159e0:	4603      	mov	r3, r0
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	f47f af2a 	bne.w	801583c <prvProcessReceivedCommands+0x8>
	}
}
 80159e8:	bf00      	nop
 80159ea:	bf00      	nop
 80159ec:	3730      	adds	r7, #48	; 0x30
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	24002adc 	.word	0x24002adc

080159f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b088      	sub	sp, #32
 80159fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80159fe:	e048      	b.n	8015a92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015a00:	4b2d      	ldr	r3, [pc, #180]	; (8015ab8 <prvSwitchTimerLists+0xc0>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a0a:	4b2b      	ldr	r3, [pc, #172]	; (8015ab8 <prvSwitchTimerLists+0xc0>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	68db      	ldr	r3, [r3, #12]
 8015a10:	68db      	ldr	r3, [r3, #12]
 8015a12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	3304      	adds	r3, #4
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7fe f863 	bl	8013ae4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	6a1b      	ldr	r3, [r3, #32]
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a2c:	f003 0304 	and.w	r3, r3, #4
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d02e      	beq.n	8015a92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	699b      	ldr	r3, [r3, #24]
 8015a38:	693a      	ldr	r2, [r7, #16]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015a3e:	68ba      	ldr	r2, [r7, #8]
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d90e      	bls.n	8015a64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	68ba      	ldr	r2, [r7, #8]
 8015a4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	68fa      	ldr	r2, [r7, #12]
 8015a50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a52:	4b19      	ldr	r3, [pc, #100]	; (8015ab8 <prvSwitchTimerLists+0xc0>)
 8015a54:	681a      	ldr	r2, [r3, #0]
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	3304      	adds	r3, #4
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	4610      	mov	r0, r2
 8015a5e:	f7fe f808 	bl	8013a72 <vListInsert>
 8015a62:	e016      	b.n	8015a92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015a64:	2300      	movs	r3, #0
 8015a66:	9300      	str	r3, [sp, #0]
 8015a68:	2300      	movs	r3, #0
 8015a6a:	693a      	ldr	r2, [r7, #16]
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	68f8      	ldr	r0, [r7, #12]
 8015a70:	f7ff fd60 	bl	8015534 <xTimerGenericCommand>
 8015a74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d10a      	bne.n	8015a92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a80:	f383 8811 	msr	BASEPRI, r3
 8015a84:	f3bf 8f6f 	isb	sy
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	603b      	str	r3, [r7, #0]
}
 8015a8e:	bf00      	nop
 8015a90:	e7fe      	b.n	8015a90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a92:	4b09      	ldr	r3, [pc, #36]	; (8015ab8 <prvSwitchTimerLists+0xc0>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1b1      	bne.n	8015a00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015a9c:	4b06      	ldr	r3, [pc, #24]	; (8015ab8 <prvSwitchTimerLists+0xc0>)
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015aa2:	4b06      	ldr	r3, [pc, #24]	; (8015abc <prvSwitchTimerLists+0xc4>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	4a04      	ldr	r2, [pc, #16]	; (8015ab8 <prvSwitchTimerLists+0xc0>)
 8015aa8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015aaa:	4a04      	ldr	r2, [pc, #16]	; (8015abc <prvSwitchTimerLists+0xc4>)
 8015aac:	697b      	ldr	r3, [r7, #20]
 8015aae:	6013      	str	r3, [r2, #0]
}
 8015ab0:	bf00      	nop
 8015ab2:	3718      	adds	r7, #24
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bd80      	pop	{r7, pc}
 8015ab8:	24002ad4 	.word	0x24002ad4
 8015abc:	24002ad8 	.word	0x24002ad8

08015ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015ac6:	f000 f985 	bl	8015dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015aca:	4b15      	ldr	r3, [pc, #84]	; (8015b20 <prvCheckForValidListAndQueue+0x60>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d120      	bne.n	8015b14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015ad2:	4814      	ldr	r0, [pc, #80]	; (8015b24 <prvCheckForValidListAndQueue+0x64>)
 8015ad4:	f7fd ff7c 	bl	80139d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015ad8:	4813      	ldr	r0, [pc, #76]	; (8015b28 <prvCheckForValidListAndQueue+0x68>)
 8015ada:	f7fd ff79 	bl	80139d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015ade:	4b13      	ldr	r3, [pc, #76]	; (8015b2c <prvCheckForValidListAndQueue+0x6c>)
 8015ae0:	4a10      	ldr	r2, [pc, #64]	; (8015b24 <prvCheckForValidListAndQueue+0x64>)
 8015ae2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015ae4:	4b12      	ldr	r3, [pc, #72]	; (8015b30 <prvCheckForValidListAndQueue+0x70>)
 8015ae6:	4a10      	ldr	r2, [pc, #64]	; (8015b28 <prvCheckForValidListAndQueue+0x68>)
 8015ae8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015aea:	2300      	movs	r3, #0
 8015aec:	9300      	str	r3, [sp, #0]
 8015aee:	4b11      	ldr	r3, [pc, #68]	; (8015b34 <prvCheckForValidListAndQueue+0x74>)
 8015af0:	4a11      	ldr	r2, [pc, #68]	; (8015b38 <prvCheckForValidListAndQueue+0x78>)
 8015af2:	2110      	movs	r1, #16
 8015af4:	200a      	movs	r0, #10
 8015af6:	f7fe f887 	bl	8013c08 <xQueueGenericCreateStatic>
 8015afa:	4603      	mov	r3, r0
 8015afc:	4a08      	ldr	r2, [pc, #32]	; (8015b20 <prvCheckForValidListAndQueue+0x60>)
 8015afe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015b00:	4b07      	ldr	r3, [pc, #28]	; (8015b20 <prvCheckForValidListAndQueue+0x60>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d005      	beq.n	8015b14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015b08:	4b05      	ldr	r3, [pc, #20]	; (8015b20 <prvCheckForValidListAndQueue+0x60>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	490b      	ldr	r1, [pc, #44]	; (8015b3c <prvCheckForValidListAndQueue+0x7c>)
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7fe fca0 	bl	8014454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015b14:	f000 f98e 	bl	8015e34 <vPortExitCritical>
}
 8015b18:	bf00      	nop
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	24002adc 	.word	0x24002adc
 8015b24:	24002aac 	.word	0x24002aac
 8015b28:	24002ac0 	.word	0x24002ac0
 8015b2c:	24002ad4 	.word	0x24002ad4
 8015b30:	24002ad8 	.word	0x24002ad8
 8015b34:	24002b88 	.word	0x24002b88
 8015b38:	24002ae8 	.word	0x24002ae8
 8015b3c:	080170e0 	.word	0x080170e0

08015b40 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b08a      	sub	sp, #40	; 0x28
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
 8015b4c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015b4e:	f06f 0301 	mvn.w	r3, #1
 8015b52:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015b60:	4b06      	ldr	r3, [pc, #24]	; (8015b7c <xTimerPendFunctionCallFromISR+0x3c>)
 8015b62:	6818      	ldr	r0, [r3, #0]
 8015b64:	f107 0114 	add.w	r1, r7, #20
 8015b68:	2300      	movs	r3, #0
 8015b6a:	683a      	ldr	r2, [r7, #0]
 8015b6c:	f7fe f9e6 	bl	8013f3c <xQueueGenericSendFromISR>
 8015b70:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3728      	adds	r7, #40	; 0x28
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}
 8015b7c:	24002adc 	.word	0x24002adc

08015b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015b80:	b480      	push	{r7}
 8015b82:	b085      	sub	sp, #20
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	3b04      	subs	r3, #4
 8015b90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	3b04      	subs	r3, #4
 8015b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	f023 0201 	bic.w	r2, r3, #1
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	3b04      	subs	r3, #4
 8015bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015bb0:	4a0c      	ldr	r2, [pc, #48]	; (8015be4 <pxPortInitialiseStack+0x64>)
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	3b14      	subs	r3, #20
 8015bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	3b04      	subs	r3, #4
 8015bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	f06f 0202 	mvn.w	r2, #2
 8015bce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	3b20      	subs	r3, #32
 8015bd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3714      	adds	r7, #20
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be2:	4770      	bx	lr
 8015be4:	08015be9 	.word	0x08015be9

08015be8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015be8:	b480      	push	{r7}
 8015bea:	b085      	sub	sp, #20
 8015bec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015bf2:	4b12      	ldr	r3, [pc, #72]	; (8015c3c <prvTaskExitError+0x54>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015bfa:	d00a      	beq.n	8015c12 <prvTaskExitError+0x2a>
	__asm volatile
 8015bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c00:	f383 8811 	msr	BASEPRI, r3
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	f3bf 8f4f 	dsb	sy
 8015c0c:	60fb      	str	r3, [r7, #12]
}
 8015c0e:	bf00      	nop
 8015c10:	e7fe      	b.n	8015c10 <prvTaskExitError+0x28>
	__asm volatile
 8015c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c16:	f383 8811 	msr	BASEPRI, r3
 8015c1a:	f3bf 8f6f 	isb	sy
 8015c1e:	f3bf 8f4f 	dsb	sy
 8015c22:	60bb      	str	r3, [r7, #8]
}
 8015c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015c26:	bf00      	nop
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d0fc      	beq.n	8015c28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015c2e:	bf00      	nop
 8015c30:	bf00      	nop
 8015c32:	3714      	adds	r7, #20
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr
 8015c3c:	24000094 	.word	0x24000094

08015c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015c40:	4b07      	ldr	r3, [pc, #28]	; (8015c60 <pxCurrentTCBConst2>)
 8015c42:	6819      	ldr	r1, [r3, #0]
 8015c44:	6808      	ldr	r0, [r1, #0]
 8015c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c4a:	f380 8809 	msr	PSP, r0
 8015c4e:	f3bf 8f6f 	isb	sy
 8015c52:	f04f 0000 	mov.w	r0, #0
 8015c56:	f380 8811 	msr	BASEPRI, r0
 8015c5a:	4770      	bx	lr
 8015c5c:	f3af 8000 	nop.w

08015c60 <pxCurrentTCBConst2>:
 8015c60:	240025ac 	.word	0x240025ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015c64:	bf00      	nop
 8015c66:	bf00      	nop

08015c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015c68:	4808      	ldr	r0, [pc, #32]	; (8015c8c <prvPortStartFirstTask+0x24>)
 8015c6a:	6800      	ldr	r0, [r0, #0]
 8015c6c:	6800      	ldr	r0, [r0, #0]
 8015c6e:	f380 8808 	msr	MSP, r0
 8015c72:	f04f 0000 	mov.w	r0, #0
 8015c76:	f380 8814 	msr	CONTROL, r0
 8015c7a:	b662      	cpsie	i
 8015c7c:	b661      	cpsie	f
 8015c7e:	f3bf 8f4f 	dsb	sy
 8015c82:	f3bf 8f6f 	isb	sy
 8015c86:	df00      	svc	0
 8015c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015c8a:	bf00      	nop
 8015c8c:	e000ed08 	.word	0xe000ed08

08015c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b086      	sub	sp, #24
 8015c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015c96:	4b46      	ldr	r3, [pc, #280]	; (8015db0 <xPortStartScheduler+0x120>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	4a46      	ldr	r2, [pc, #280]	; (8015db4 <xPortStartScheduler+0x124>)
 8015c9c:	4293      	cmp	r3, r2
 8015c9e:	d10a      	bne.n	8015cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8015ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca4:	f383 8811 	msr	BASEPRI, r3
 8015ca8:	f3bf 8f6f 	isb	sy
 8015cac:	f3bf 8f4f 	dsb	sy
 8015cb0:	613b      	str	r3, [r7, #16]
}
 8015cb2:	bf00      	nop
 8015cb4:	e7fe      	b.n	8015cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015cb6:	4b3e      	ldr	r3, [pc, #248]	; (8015db0 <xPortStartScheduler+0x120>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	4a3f      	ldr	r2, [pc, #252]	; (8015db8 <xPortStartScheduler+0x128>)
 8015cbc:	4293      	cmp	r3, r2
 8015cbe:	d10a      	bne.n	8015cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8015cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc4:	f383 8811 	msr	BASEPRI, r3
 8015cc8:	f3bf 8f6f 	isb	sy
 8015ccc:	f3bf 8f4f 	dsb	sy
 8015cd0:	60fb      	str	r3, [r7, #12]
}
 8015cd2:	bf00      	nop
 8015cd4:	e7fe      	b.n	8015cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015cd6:	4b39      	ldr	r3, [pc, #228]	; (8015dbc <xPortStartScheduler+0x12c>)
 8015cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	22ff      	movs	r2, #255	; 0xff
 8015ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015cf0:	78fb      	ldrb	r3, [r7, #3]
 8015cf2:	b2db      	uxtb	r3, r3
 8015cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015cf8:	b2da      	uxtb	r2, r3
 8015cfa:	4b31      	ldr	r3, [pc, #196]	; (8015dc0 <xPortStartScheduler+0x130>)
 8015cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015cfe:	4b31      	ldr	r3, [pc, #196]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d00:	2207      	movs	r2, #7
 8015d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d04:	e009      	b.n	8015d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015d06:	4b2f      	ldr	r3, [pc, #188]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	3b01      	subs	r3, #1
 8015d0c:	4a2d      	ldr	r2, [pc, #180]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015d10:	78fb      	ldrb	r3, [r7, #3]
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d1a:	78fb      	ldrb	r3, [r7, #3]
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d22:	2b80      	cmp	r3, #128	; 0x80
 8015d24:	d0ef      	beq.n	8015d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015d26:	4b27      	ldr	r3, [pc, #156]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f1c3 0307 	rsb	r3, r3, #7
 8015d2e:	2b04      	cmp	r3, #4
 8015d30:	d00a      	beq.n	8015d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8015d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d36:	f383 8811 	msr	BASEPRI, r3
 8015d3a:	f3bf 8f6f 	isb	sy
 8015d3e:	f3bf 8f4f 	dsb	sy
 8015d42:	60bb      	str	r3, [r7, #8]
}
 8015d44:	bf00      	nop
 8015d46:	e7fe      	b.n	8015d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015d48:	4b1e      	ldr	r3, [pc, #120]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	021b      	lsls	r3, r3, #8
 8015d4e:	4a1d      	ldr	r2, [pc, #116]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015d52:	4b1c      	ldr	r3, [pc, #112]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015d5a:	4a1a      	ldr	r2, [pc, #104]	; (8015dc4 <xPortStartScheduler+0x134>)
 8015d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	b2da      	uxtb	r2, r3
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015d66:	4b18      	ldr	r3, [pc, #96]	; (8015dc8 <xPortStartScheduler+0x138>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	4a17      	ldr	r2, [pc, #92]	; (8015dc8 <xPortStartScheduler+0x138>)
 8015d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015d72:	4b15      	ldr	r3, [pc, #84]	; (8015dc8 <xPortStartScheduler+0x138>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	4a14      	ldr	r2, [pc, #80]	; (8015dc8 <xPortStartScheduler+0x138>)
 8015d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015d7e:	f000 f8dd 	bl	8015f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015d82:	4b12      	ldr	r3, [pc, #72]	; (8015dcc <xPortStartScheduler+0x13c>)
 8015d84:	2200      	movs	r2, #0
 8015d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015d88:	f000 f8fc 	bl	8015f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015d8c:	4b10      	ldr	r3, [pc, #64]	; (8015dd0 <xPortStartScheduler+0x140>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a0f      	ldr	r2, [pc, #60]	; (8015dd0 <xPortStartScheduler+0x140>)
 8015d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015d98:	f7ff ff66 	bl	8015c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015d9c:	f7fe ff72 	bl	8014c84 <vTaskSwitchContext>
	prvTaskExitError();
 8015da0:	f7ff ff22 	bl	8015be8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015da4:	2300      	movs	r3, #0
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3718      	adds	r7, #24
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	e000ed00 	.word	0xe000ed00
 8015db4:	410fc271 	.word	0x410fc271
 8015db8:	410fc270 	.word	0x410fc270
 8015dbc:	e000e400 	.word	0xe000e400
 8015dc0:	24002bd8 	.word	0x24002bd8
 8015dc4:	24002bdc 	.word	0x24002bdc
 8015dc8:	e000ed20 	.word	0xe000ed20
 8015dcc:	24000094 	.word	0x24000094
 8015dd0:	e000ef34 	.word	0xe000ef34

08015dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b083      	sub	sp, #12
 8015dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8015dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dde:	f383 8811 	msr	BASEPRI, r3
 8015de2:	f3bf 8f6f 	isb	sy
 8015de6:	f3bf 8f4f 	dsb	sy
 8015dea:	607b      	str	r3, [r7, #4]
}
 8015dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015dee:	4b0f      	ldr	r3, [pc, #60]	; (8015e2c <vPortEnterCritical+0x58>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	3301      	adds	r3, #1
 8015df4:	4a0d      	ldr	r2, [pc, #52]	; (8015e2c <vPortEnterCritical+0x58>)
 8015df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015df8:	4b0c      	ldr	r3, [pc, #48]	; (8015e2c <vPortEnterCritical+0x58>)
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	2b01      	cmp	r3, #1
 8015dfe:	d10f      	bne.n	8015e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015e00:	4b0b      	ldr	r3, [pc, #44]	; (8015e30 <vPortEnterCritical+0x5c>)
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	b2db      	uxtb	r3, r3
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d00a      	beq.n	8015e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8015e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e0e:	f383 8811 	msr	BASEPRI, r3
 8015e12:	f3bf 8f6f 	isb	sy
 8015e16:	f3bf 8f4f 	dsb	sy
 8015e1a:	603b      	str	r3, [r7, #0]
}
 8015e1c:	bf00      	nop
 8015e1e:	e7fe      	b.n	8015e1e <vPortEnterCritical+0x4a>
	}
}
 8015e20:	bf00      	nop
 8015e22:	370c      	adds	r7, #12
 8015e24:	46bd      	mov	sp, r7
 8015e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2a:	4770      	bx	lr
 8015e2c:	24000094 	.word	0x24000094
 8015e30:	e000ed04 	.word	0xe000ed04

08015e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015e34:	b480      	push	{r7}
 8015e36:	b083      	sub	sp, #12
 8015e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015e3a:	4b12      	ldr	r3, [pc, #72]	; (8015e84 <vPortExitCritical+0x50>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d10a      	bne.n	8015e58 <vPortExitCritical+0x24>
	__asm volatile
 8015e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e46:	f383 8811 	msr	BASEPRI, r3
 8015e4a:	f3bf 8f6f 	isb	sy
 8015e4e:	f3bf 8f4f 	dsb	sy
 8015e52:	607b      	str	r3, [r7, #4]
}
 8015e54:	bf00      	nop
 8015e56:	e7fe      	b.n	8015e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015e58:	4b0a      	ldr	r3, [pc, #40]	; (8015e84 <vPortExitCritical+0x50>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	3b01      	subs	r3, #1
 8015e5e:	4a09      	ldr	r2, [pc, #36]	; (8015e84 <vPortExitCritical+0x50>)
 8015e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015e62:	4b08      	ldr	r3, [pc, #32]	; (8015e84 <vPortExitCritical+0x50>)
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d105      	bne.n	8015e76 <vPortExitCritical+0x42>
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	f383 8811 	msr	BASEPRI, r3
}
 8015e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015e76:	bf00      	nop
 8015e78:	370c      	adds	r7, #12
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e80:	4770      	bx	lr
 8015e82:	bf00      	nop
 8015e84:	24000094 	.word	0x24000094
	...

08015e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015e90:	f3ef 8009 	mrs	r0, PSP
 8015e94:	f3bf 8f6f 	isb	sy
 8015e98:	4b15      	ldr	r3, [pc, #84]	; (8015ef0 <pxCurrentTCBConst>)
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	f01e 0f10 	tst.w	lr, #16
 8015ea0:	bf08      	it	eq
 8015ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eaa:	6010      	str	r0, [r2, #0]
 8015eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015eb4:	f380 8811 	msr	BASEPRI, r0
 8015eb8:	f3bf 8f4f 	dsb	sy
 8015ebc:	f3bf 8f6f 	isb	sy
 8015ec0:	f7fe fee0 	bl	8014c84 <vTaskSwitchContext>
 8015ec4:	f04f 0000 	mov.w	r0, #0
 8015ec8:	f380 8811 	msr	BASEPRI, r0
 8015ecc:	bc09      	pop	{r0, r3}
 8015ece:	6819      	ldr	r1, [r3, #0]
 8015ed0:	6808      	ldr	r0, [r1, #0]
 8015ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed6:	f01e 0f10 	tst.w	lr, #16
 8015eda:	bf08      	it	eq
 8015edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015ee0:	f380 8809 	msr	PSP, r0
 8015ee4:	f3bf 8f6f 	isb	sy
 8015ee8:	4770      	bx	lr
 8015eea:	bf00      	nop
 8015eec:	f3af 8000 	nop.w

08015ef0 <pxCurrentTCBConst>:
 8015ef0:	240025ac 	.word	0x240025ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015ef4:	bf00      	nop
 8015ef6:	bf00      	nop

08015ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
	__asm volatile
 8015efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f02:	f383 8811 	msr	BASEPRI, r3
 8015f06:	f3bf 8f6f 	isb	sy
 8015f0a:	f3bf 8f4f 	dsb	sy
 8015f0e:	607b      	str	r3, [r7, #4]
}
 8015f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015f12:	f7fe fdf5 	bl	8014b00 <xTaskIncrementTick>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d003      	beq.n	8015f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015f1c:	4b06      	ldr	r3, [pc, #24]	; (8015f38 <xPortSysTickHandler+0x40>)
 8015f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f22:	601a      	str	r2, [r3, #0]
 8015f24:	2300      	movs	r3, #0
 8015f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	f383 8811 	msr	BASEPRI, r3
}
 8015f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015f30:	bf00      	nop
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	e000ed04 	.word	0xe000ed04

08015f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015f40:	4b0b      	ldr	r3, [pc, #44]	; (8015f70 <vPortSetupTimerInterrupt+0x34>)
 8015f42:	2200      	movs	r2, #0
 8015f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015f46:	4b0b      	ldr	r3, [pc, #44]	; (8015f74 <vPortSetupTimerInterrupt+0x38>)
 8015f48:	2200      	movs	r2, #0
 8015f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015f4c:	4b0a      	ldr	r3, [pc, #40]	; (8015f78 <vPortSetupTimerInterrupt+0x3c>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	4a0a      	ldr	r2, [pc, #40]	; (8015f7c <vPortSetupTimerInterrupt+0x40>)
 8015f52:	fba2 2303 	umull	r2, r3, r2, r3
 8015f56:	099b      	lsrs	r3, r3, #6
 8015f58:	4a09      	ldr	r2, [pc, #36]	; (8015f80 <vPortSetupTimerInterrupt+0x44>)
 8015f5a:	3b01      	subs	r3, #1
 8015f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015f5e:	4b04      	ldr	r3, [pc, #16]	; (8015f70 <vPortSetupTimerInterrupt+0x34>)
 8015f60:	2207      	movs	r2, #7
 8015f62:	601a      	str	r2, [r3, #0]
}
 8015f64:	bf00      	nop
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr
 8015f6e:	bf00      	nop
 8015f70:	e000e010 	.word	0xe000e010
 8015f74:	e000e018 	.word	0xe000e018
 8015f78:	24000084 	.word	0x24000084
 8015f7c:	10624dd3 	.word	0x10624dd3
 8015f80:	e000e014 	.word	0xe000e014

08015f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015f94 <vPortEnableVFP+0x10>
 8015f88:	6801      	ldr	r1, [r0, #0]
 8015f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015f8e:	6001      	str	r1, [r0, #0]
 8015f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015f92:	bf00      	nop
 8015f94:	e000ed88 	.word	0xe000ed88

08015f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015f98:	b480      	push	{r7}
 8015f9a:	b085      	sub	sp, #20
 8015f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015f9e:	f3ef 8305 	mrs	r3, IPSR
 8015fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	2b0f      	cmp	r3, #15
 8015fa8:	d914      	bls.n	8015fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015faa:	4a17      	ldr	r2, [pc, #92]	; (8016008 <vPortValidateInterruptPriority+0x70>)
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	4413      	add	r3, r2
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015fb4:	4b15      	ldr	r3, [pc, #84]	; (801600c <vPortValidateInterruptPriority+0x74>)
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	7afa      	ldrb	r2, [r7, #11]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d20a      	bcs.n	8015fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc2:	f383 8811 	msr	BASEPRI, r3
 8015fc6:	f3bf 8f6f 	isb	sy
 8015fca:	f3bf 8f4f 	dsb	sy
 8015fce:	607b      	str	r3, [r7, #4]
}
 8015fd0:	bf00      	nop
 8015fd2:	e7fe      	b.n	8015fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015fd4:	4b0e      	ldr	r3, [pc, #56]	; (8016010 <vPortValidateInterruptPriority+0x78>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015fdc:	4b0d      	ldr	r3, [pc, #52]	; (8016014 <vPortValidateInterruptPriority+0x7c>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d90a      	bls.n	8015ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe8:	f383 8811 	msr	BASEPRI, r3
 8015fec:	f3bf 8f6f 	isb	sy
 8015ff0:	f3bf 8f4f 	dsb	sy
 8015ff4:	603b      	str	r3, [r7, #0]
}
 8015ff6:	bf00      	nop
 8015ff8:	e7fe      	b.n	8015ff8 <vPortValidateInterruptPriority+0x60>
	}
 8015ffa:	bf00      	nop
 8015ffc:	3714      	adds	r7, #20
 8015ffe:	46bd      	mov	sp, r7
 8016000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016004:	4770      	bx	lr
 8016006:	bf00      	nop
 8016008:	e000e3f0 	.word	0xe000e3f0
 801600c:	24002bd8 	.word	0x24002bd8
 8016010:	e000ed0c 	.word	0xe000ed0c
 8016014:	24002bdc 	.word	0x24002bdc

08016018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b08a      	sub	sp, #40	; 0x28
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016020:	2300      	movs	r3, #0
 8016022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016024:	f7fe fcb0 	bl	8014988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016028:	4b5b      	ldr	r3, [pc, #364]	; (8016198 <pvPortMalloc+0x180>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d101      	bne.n	8016034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016030:	f000 f920 	bl	8016274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016034:	4b59      	ldr	r3, [pc, #356]	; (801619c <pvPortMalloc+0x184>)
 8016036:	681a      	ldr	r2, [r3, #0]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	4013      	ands	r3, r2
 801603c:	2b00      	cmp	r3, #0
 801603e:	f040 8093 	bne.w	8016168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d01d      	beq.n	8016084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016048:	2208      	movs	r2, #8
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	4413      	add	r3, r2
 801604e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f003 0307 	and.w	r3, r3, #7
 8016056:	2b00      	cmp	r3, #0
 8016058:	d014      	beq.n	8016084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f023 0307 	bic.w	r3, r3, #7
 8016060:	3308      	adds	r3, #8
 8016062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f003 0307 	and.w	r3, r3, #7
 801606a:	2b00      	cmp	r3, #0
 801606c:	d00a      	beq.n	8016084 <pvPortMalloc+0x6c>
	__asm volatile
 801606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016072:	f383 8811 	msr	BASEPRI, r3
 8016076:	f3bf 8f6f 	isb	sy
 801607a:	f3bf 8f4f 	dsb	sy
 801607e:	617b      	str	r3, [r7, #20]
}
 8016080:	bf00      	nop
 8016082:	e7fe      	b.n	8016082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d06e      	beq.n	8016168 <pvPortMalloc+0x150>
 801608a:	4b45      	ldr	r3, [pc, #276]	; (80161a0 <pvPortMalloc+0x188>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	687a      	ldr	r2, [r7, #4]
 8016090:	429a      	cmp	r2, r3
 8016092:	d869      	bhi.n	8016168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016094:	4b43      	ldr	r3, [pc, #268]	; (80161a4 <pvPortMalloc+0x18c>)
 8016096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016098:	4b42      	ldr	r3, [pc, #264]	; (80161a4 <pvPortMalloc+0x18c>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801609e:	e004      	b.n	80160aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80160a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80160aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ac:	685b      	ldr	r3, [r3, #4]
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d903      	bls.n	80160bc <pvPortMalloc+0xa4>
 80160b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1f1      	bne.n	80160a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80160bc:	4b36      	ldr	r3, [pc, #216]	; (8016198 <pvPortMalloc+0x180>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d050      	beq.n	8016168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80160c6:	6a3b      	ldr	r3, [r7, #32]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2208      	movs	r2, #8
 80160cc:	4413      	add	r3, r2
 80160ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80160d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	6a3b      	ldr	r3, [r7, #32]
 80160d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80160d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160da:	685a      	ldr	r2, [r3, #4]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	1ad2      	subs	r2, r2, r3
 80160e0:	2308      	movs	r3, #8
 80160e2:	005b      	lsls	r3, r3, #1
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d91f      	bls.n	8016128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80160e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	4413      	add	r3, r2
 80160ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160f0:	69bb      	ldr	r3, [r7, #24]
 80160f2:	f003 0307 	and.w	r3, r3, #7
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d00a      	beq.n	8016110 <pvPortMalloc+0xf8>
	__asm volatile
 80160fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160fe:	f383 8811 	msr	BASEPRI, r3
 8016102:	f3bf 8f6f 	isb	sy
 8016106:	f3bf 8f4f 	dsb	sy
 801610a:	613b      	str	r3, [r7, #16]
}
 801610c:	bf00      	nop
 801610e:	e7fe      	b.n	801610e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016112:	685a      	ldr	r2, [r3, #4]
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	1ad2      	subs	r2, r2, r3
 8016118:	69bb      	ldr	r3, [r7, #24]
 801611a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016122:	69b8      	ldr	r0, [r7, #24]
 8016124:	f000 f908 	bl	8016338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016128:	4b1d      	ldr	r3, [pc, #116]	; (80161a0 <pvPortMalloc+0x188>)
 801612a:	681a      	ldr	r2, [r3, #0]
 801612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	1ad3      	subs	r3, r2, r3
 8016132:	4a1b      	ldr	r2, [pc, #108]	; (80161a0 <pvPortMalloc+0x188>)
 8016134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016136:	4b1a      	ldr	r3, [pc, #104]	; (80161a0 <pvPortMalloc+0x188>)
 8016138:	681a      	ldr	r2, [r3, #0]
 801613a:	4b1b      	ldr	r3, [pc, #108]	; (80161a8 <pvPortMalloc+0x190>)
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	429a      	cmp	r2, r3
 8016140:	d203      	bcs.n	801614a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016142:	4b17      	ldr	r3, [pc, #92]	; (80161a0 <pvPortMalloc+0x188>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4a18      	ldr	r2, [pc, #96]	; (80161a8 <pvPortMalloc+0x190>)
 8016148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614c:	685a      	ldr	r2, [r3, #4]
 801614e:	4b13      	ldr	r3, [pc, #76]	; (801619c <pvPortMalloc+0x184>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	431a      	orrs	r2, r3
 8016154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801615a:	2200      	movs	r2, #0
 801615c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801615e:	4b13      	ldr	r3, [pc, #76]	; (80161ac <pvPortMalloc+0x194>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	3301      	adds	r3, #1
 8016164:	4a11      	ldr	r2, [pc, #68]	; (80161ac <pvPortMalloc+0x194>)
 8016166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016168:	f7fe fc1c 	bl	80149a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	f003 0307 	and.w	r3, r3, #7
 8016172:	2b00      	cmp	r3, #0
 8016174:	d00a      	beq.n	801618c <pvPortMalloc+0x174>
	__asm volatile
 8016176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801617a:	f383 8811 	msr	BASEPRI, r3
 801617e:	f3bf 8f6f 	isb	sy
 8016182:	f3bf 8f4f 	dsb	sy
 8016186:	60fb      	str	r3, [r7, #12]
}
 8016188:	bf00      	nop
 801618a:	e7fe      	b.n	801618a <pvPortMalloc+0x172>
	return pvReturn;
 801618c:	69fb      	ldr	r3, [r7, #28]
}
 801618e:	4618      	mov	r0, r3
 8016190:	3728      	adds	r7, #40	; 0x28
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}
 8016196:	bf00      	nop
 8016198:	240067e8 	.word	0x240067e8
 801619c:	240067fc 	.word	0x240067fc
 80161a0:	240067ec 	.word	0x240067ec
 80161a4:	240067e0 	.word	0x240067e0
 80161a8:	240067f0 	.word	0x240067f0
 80161ac:	240067f4 	.word	0x240067f4

080161b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b086      	sub	sp, #24
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d04d      	beq.n	801625e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80161c2:	2308      	movs	r3, #8
 80161c4:	425b      	negs	r3, r3
 80161c6:	697a      	ldr	r2, [r7, #20]
 80161c8:	4413      	add	r3, r2
 80161ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	685a      	ldr	r2, [r3, #4]
 80161d4:	4b24      	ldr	r3, [pc, #144]	; (8016268 <vPortFree+0xb8>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	4013      	ands	r3, r2
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d10a      	bne.n	80161f4 <vPortFree+0x44>
	__asm volatile
 80161de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e2:	f383 8811 	msr	BASEPRI, r3
 80161e6:	f3bf 8f6f 	isb	sy
 80161ea:	f3bf 8f4f 	dsb	sy
 80161ee:	60fb      	str	r3, [r7, #12]
}
 80161f0:	bf00      	nop
 80161f2:	e7fe      	b.n	80161f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d00a      	beq.n	8016212 <vPortFree+0x62>
	__asm volatile
 80161fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016200:	f383 8811 	msr	BASEPRI, r3
 8016204:	f3bf 8f6f 	isb	sy
 8016208:	f3bf 8f4f 	dsb	sy
 801620c:	60bb      	str	r3, [r7, #8]
}
 801620e:	bf00      	nop
 8016210:	e7fe      	b.n	8016210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	685a      	ldr	r2, [r3, #4]
 8016216:	4b14      	ldr	r3, [pc, #80]	; (8016268 <vPortFree+0xb8>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4013      	ands	r3, r2
 801621c:	2b00      	cmp	r3, #0
 801621e:	d01e      	beq.n	801625e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d11a      	bne.n	801625e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	685a      	ldr	r2, [r3, #4]
 801622c:	4b0e      	ldr	r3, [pc, #56]	; (8016268 <vPortFree+0xb8>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	43db      	mvns	r3, r3
 8016232:	401a      	ands	r2, r3
 8016234:	693b      	ldr	r3, [r7, #16]
 8016236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016238:	f7fe fba6 	bl	8014988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801623c:	693b      	ldr	r3, [r7, #16]
 801623e:	685a      	ldr	r2, [r3, #4]
 8016240:	4b0a      	ldr	r3, [pc, #40]	; (801626c <vPortFree+0xbc>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	4413      	add	r3, r2
 8016246:	4a09      	ldr	r2, [pc, #36]	; (801626c <vPortFree+0xbc>)
 8016248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801624a:	6938      	ldr	r0, [r7, #16]
 801624c:	f000 f874 	bl	8016338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016250:	4b07      	ldr	r3, [pc, #28]	; (8016270 <vPortFree+0xc0>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	3301      	adds	r3, #1
 8016256:	4a06      	ldr	r2, [pc, #24]	; (8016270 <vPortFree+0xc0>)
 8016258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801625a:	f7fe fba3 	bl	80149a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801625e:	bf00      	nop
 8016260:	3718      	adds	r7, #24
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}
 8016266:	bf00      	nop
 8016268:	240067fc 	.word	0x240067fc
 801626c:	240067ec 	.word	0x240067ec
 8016270:	240067f8 	.word	0x240067f8

08016274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016274:	b480      	push	{r7}
 8016276:	b085      	sub	sp, #20
 8016278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801627a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801627e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016280:	4b27      	ldr	r3, [pc, #156]	; (8016320 <prvHeapInit+0xac>)
 8016282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	f003 0307 	and.w	r3, r3, #7
 801628a:	2b00      	cmp	r3, #0
 801628c:	d00c      	beq.n	80162a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	3307      	adds	r3, #7
 8016292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	f023 0307 	bic.w	r3, r3, #7
 801629a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801629c:	68ba      	ldr	r2, [r7, #8]
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	1ad3      	subs	r3, r2, r3
 80162a2:	4a1f      	ldr	r2, [pc, #124]	; (8016320 <prvHeapInit+0xac>)
 80162a4:	4413      	add	r3, r2
 80162a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80162ac:	4a1d      	ldr	r2, [pc, #116]	; (8016324 <prvHeapInit+0xb0>)
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80162b2:	4b1c      	ldr	r3, [pc, #112]	; (8016324 <prvHeapInit+0xb0>)
 80162b4:	2200      	movs	r2, #0
 80162b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	68ba      	ldr	r2, [r7, #8]
 80162bc:	4413      	add	r3, r2
 80162be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80162c0:	2208      	movs	r2, #8
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	1a9b      	subs	r3, r3, r2
 80162c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f023 0307 	bic.w	r3, r3, #7
 80162ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	4a15      	ldr	r2, [pc, #84]	; (8016328 <prvHeapInit+0xb4>)
 80162d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80162d6:	4b14      	ldr	r3, [pc, #80]	; (8016328 <prvHeapInit+0xb4>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2200      	movs	r2, #0
 80162dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80162de:	4b12      	ldr	r3, [pc, #72]	; (8016328 <prvHeapInit+0xb4>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	2200      	movs	r2, #0
 80162e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	68fa      	ldr	r2, [r7, #12]
 80162ee:	1ad2      	subs	r2, r2, r3
 80162f0:	683b      	ldr	r3, [r7, #0]
 80162f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80162f4:	4b0c      	ldr	r3, [pc, #48]	; (8016328 <prvHeapInit+0xb4>)
 80162f6:	681a      	ldr	r2, [r3, #0]
 80162f8:	683b      	ldr	r3, [r7, #0]
 80162fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	4a0a      	ldr	r2, [pc, #40]	; (801632c <prvHeapInit+0xb8>)
 8016302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	685b      	ldr	r3, [r3, #4]
 8016308:	4a09      	ldr	r2, [pc, #36]	; (8016330 <prvHeapInit+0xbc>)
 801630a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801630c:	4b09      	ldr	r3, [pc, #36]	; (8016334 <prvHeapInit+0xc0>)
 801630e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016312:	601a      	str	r2, [r3, #0]
}
 8016314:	bf00      	nop
 8016316:	3714      	adds	r7, #20
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr
 8016320:	24002be0 	.word	0x24002be0
 8016324:	240067e0 	.word	0x240067e0
 8016328:	240067e8 	.word	0x240067e8
 801632c:	240067f0 	.word	0x240067f0
 8016330:	240067ec 	.word	0x240067ec
 8016334:	240067fc 	.word	0x240067fc

08016338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016338:	b480      	push	{r7}
 801633a:	b085      	sub	sp, #20
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016340:	4b28      	ldr	r3, [pc, #160]	; (80163e4 <prvInsertBlockIntoFreeList+0xac>)
 8016342:	60fb      	str	r3, [r7, #12]
 8016344:	e002      	b.n	801634c <prvInsertBlockIntoFreeList+0x14>
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	60fb      	str	r3, [r7, #12]
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	429a      	cmp	r2, r3
 8016354:	d8f7      	bhi.n	8016346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	68ba      	ldr	r2, [r7, #8]
 8016360:	4413      	add	r3, r2
 8016362:	687a      	ldr	r2, [r7, #4]
 8016364:	429a      	cmp	r2, r3
 8016366:	d108      	bne.n	801637a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	685a      	ldr	r2, [r3, #4]
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	441a      	add	r2, r3
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	68ba      	ldr	r2, [r7, #8]
 8016384:	441a      	add	r2, r3
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	429a      	cmp	r2, r3
 801638c:	d118      	bne.n	80163c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	681a      	ldr	r2, [r3, #0]
 8016392:	4b15      	ldr	r3, [pc, #84]	; (80163e8 <prvInsertBlockIntoFreeList+0xb0>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	429a      	cmp	r2, r3
 8016398:	d00d      	beq.n	80163b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	685a      	ldr	r2, [r3, #4]
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	441a      	add	r2, r3
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	601a      	str	r2, [r3, #0]
 80163b4:	e008      	b.n	80163c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80163b6:	4b0c      	ldr	r3, [pc, #48]	; (80163e8 <prvInsertBlockIntoFreeList+0xb0>)
 80163b8:	681a      	ldr	r2, [r3, #0]
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	601a      	str	r2, [r3, #0]
 80163be:	e003      	b.n	80163c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	681a      	ldr	r2, [r3, #0]
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80163c8:	68fa      	ldr	r2, [r7, #12]
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	429a      	cmp	r2, r3
 80163ce:	d002      	beq.n	80163d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	687a      	ldr	r2, [r7, #4]
 80163d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80163d6:	bf00      	nop
 80163d8:	3714      	adds	r7, #20
 80163da:	46bd      	mov	sp, r7
 80163dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e0:	4770      	bx	lr
 80163e2:	bf00      	nop
 80163e4:	240067e0 	.word	0x240067e0
 80163e8:	240067e8 	.word	0x240067e8

080163ec <__errno>:
 80163ec:	4b01      	ldr	r3, [pc, #4]	; (80163f4 <__errno+0x8>)
 80163ee:	6818      	ldr	r0, [r3, #0]
 80163f0:	4770      	bx	lr
 80163f2:	bf00      	nop
 80163f4:	24000098 	.word	0x24000098

080163f8 <__libc_init_array>:
 80163f8:	b570      	push	{r4, r5, r6, lr}
 80163fa:	4d0d      	ldr	r5, [pc, #52]	; (8016430 <__libc_init_array+0x38>)
 80163fc:	4c0d      	ldr	r4, [pc, #52]	; (8016434 <__libc_init_array+0x3c>)
 80163fe:	1b64      	subs	r4, r4, r5
 8016400:	10a4      	asrs	r4, r4, #2
 8016402:	2600      	movs	r6, #0
 8016404:	42a6      	cmp	r6, r4
 8016406:	d109      	bne.n	801641c <__libc_init_array+0x24>
 8016408:	4d0b      	ldr	r5, [pc, #44]	; (8016438 <__libc_init_array+0x40>)
 801640a:	4c0c      	ldr	r4, [pc, #48]	; (801643c <__libc_init_array+0x44>)
 801640c:	f000 fd2c 	bl	8016e68 <_init>
 8016410:	1b64      	subs	r4, r4, r5
 8016412:	10a4      	asrs	r4, r4, #2
 8016414:	2600      	movs	r6, #0
 8016416:	42a6      	cmp	r6, r4
 8016418:	d105      	bne.n	8016426 <__libc_init_array+0x2e>
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016420:	4798      	blx	r3
 8016422:	3601      	adds	r6, #1
 8016424:	e7ee      	b.n	8016404 <__libc_init_array+0xc>
 8016426:	f855 3b04 	ldr.w	r3, [r5], #4
 801642a:	4798      	blx	r3
 801642c:	3601      	adds	r6, #1
 801642e:	e7f2      	b.n	8016416 <__libc_init_array+0x1e>
 8016430:	08017320 	.word	0x08017320
 8016434:	08017320 	.word	0x08017320
 8016438:	08017320 	.word	0x08017320
 801643c:	08017324 	.word	0x08017324

08016440 <memcpy>:
 8016440:	440a      	add	r2, r1
 8016442:	4291      	cmp	r1, r2
 8016444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016448:	d100      	bne.n	801644c <memcpy+0xc>
 801644a:	4770      	bx	lr
 801644c:	b510      	push	{r4, lr}
 801644e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016456:	4291      	cmp	r1, r2
 8016458:	d1f9      	bne.n	801644e <memcpy+0xe>
 801645a:	bd10      	pop	{r4, pc}

0801645c <memset>:
 801645c:	4402      	add	r2, r0
 801645e:	4603      	mov	r3, r0
 8016460:	4293      	cmp	r3, r2
 8016462:	d100      	bne.n	8016466 <memset+0xa>
 8016464:	4770      	bx	lr
 8016466:	f803 1b01 	strb.w	r1, [r3], #1
 801646a:	e7f9      	b.n	8016460 <memset+0x4>

0801646c <_puts_r>:
 801646c:	b570      	push	{r4, r5, r6, lr}
 801646e:	460e      	mov	r6, r1
 8016470:	4605      	mov	r5, r0
 8016472:	b118      	cbz	r0, 801647c <_puts_r+0x10>
 8016474:	6983      	ldr	r3, [r0, #24]
 8016476:	b90b      	cbnz	r3, 801647c <_puts_r+0x10>
 8016478:	f000 fa48 	bl	801690c <__sinit>
 801647c:	69ab      	ldr	r3, [r5, #24]
 801647e:	68ac      	ldr	r4, [r5, #8]
 8016480:	b913      	cbnz	r3, 8016488 <_puts_r+0x1c>
 8016482:	4628      	mov	r0, r5
 8016484:	f000 fa42 	bl	801690c <__sinit>
 8016488:	4b2c      	ldr	r3, [pc, #176]	; (801653c <_puts_r+0xd0>)
 801648a:	429c      	cmp	r4, r3
 801648c:	d120      	bne.n	80164d0 <_puts_r+0x64>
 801648e:	686c      	ldr	r4, [r5, #4]
 8016490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016492:	07db      	lsls	r3, r3, #31
 8016494:	d405      	bmi.n	80164a2 <_puts_r+0x36>
 8016496:	89a3      	ldrh	r3, [r4, #12]
 8016498:	0598      	lsls	r0, r3, #22
 801649a:	d402      	bmi.n	80164a2 <_puts_r+0x36>
 801649c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801649e:	f000 fad3 	bl	8016a48 <__retarget_lock_acquire_recursive>
 80164a2:	89a3      	ldrh	r3, [r4, #12]
 80164a4:	0719      	lsls	r1, r3, #28
 80164a6:	d51d      	bpl.n	80164e4 <_puts_r+0x78>
 80164a8:	6923      	ldr	r3, [r4, #16]
 80164aa:	b1db      	cbz	r3, 80164e4 <_puts_r+0x78>
 80164ac:	3e01      	subs	r6, #1
 80164ae:	68a3      	ldr	r3, [r4, #8]
 80164b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80164b4:	3b01      	subs	r3, #1
 80164b6:	60a3      	str	r3, [r4, #8]
 80164b8:	bb39      	cbnz	r1, 801650a <_puts_r+0x9e>
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	da38      	bge.n	8016530 <_puts_r+0xc4>
 80164be:	4622      	mov	r2, r4
 80164c0:	210a      	movs	r1, #10
 80164c2:	4628      	mov	r0, r5
 80164c4:	f000 f848 	bl	8016558 <__swbuf_r>
 80164c8:	3001      	adds	r0, #1
 80164ca:	d011      	beq.n	80164f0 <_puts_r+0x84>
 80164cc:	250a      	movs	r5, #10
 80164ce:	e011      	b.n	80164f4 <_puts_r+0x88>
 80164d0:	4b1b      	ldr	r3, [pc, #108]	; (8016540 <_puts_r+0xd4>)
 80164d2:	429c      	cmp	r4, r3
 80164d4:	d101      	bne.n	80164da <_puts_r+0x6e>
 80164d6:	68ac      	ldr	r4, [r5, #8]
 80164d8:	e7da      	b.n	8016490 <_puts_r+0x24>
 80164da:	4b1a      	ldr	r3, [pc, #104]	; (8016544 <_puts_r+0xd8>)
 80164dc:	429c      	cmp	r4, r3
 80164de:	bf08      	it	eq
 80164e0:	68ec      	ldreq	r4, [r5, #12]
 80164e2:	e7d5      	b.n	8016490 <_puts_r+0x24>
 80164e4:	4621      	mov	r1, r4
 80164e6:	4628      	mov	r0, r5
 80164e8:	f000 f888 	bl	80165fc <__swsetup_r>
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d0dd      	beq.n	80164ac <_puts_r+0x40>
 80164f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80164f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80164f6:	07da      	lsls	r2, r3, #31
 80164f8:	d405      	bmi.n	8016506 <_puts_r+0x9a>
 80164fa:	89a3      	ldrh	r3, [r4, #12]
 80164fc:	059b      	lsls	r3, r3, #22
 80164fe:	d402      	bmi.n	8016506 <_puts_r+0x9a>
 8016500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016502:	f000 faa2 	bl	8016a4a <__retarget_lock_release_recursive>
 8016506:	4628      	mov	r0, r5
 8016508:	bd70      	pop	{r4, r5, r6, pc}
 801650a:	2b00      	cmp	r3, #0
 801650c:	da04      	bge.n	8016518 <_puts_r+0xac>
 801650e:	69a2      	ldr	r2, [r4, #24]
 8016510:	429a      	cmp	r2, r3
 8016512:	dc06      	bgt.n	8016522 <_puts_r+0xb6>
 8016514:	290a      	cmp	r1, #10
 8016516:	d004      	beq.n	8016522 <_puts_r+0xb6>
 8016518:	6823      	ldr	r3, [r4, #0]
 801651a:	1c5a      	adds	r2, r3, #1
 801651c:	6022      	str	r2, [r4, #0]
 801651e:	7019      	strb	r1, [r3, #0]
 8016520:	e7c5      	b.n	80164ae <_puts_r+0x42>
 8016522:	4622      	mov	r2, r4
 8016524:	4628      	mov	r0, r5
 8016526:	f000 f817 	bl	8016558 <__swbuf_r>
 801652a:	3001      	adds	r0, #1
 801652c:	d1bf      	bne.n	80164ae <_puts_r+0x42>
 801652e:	e7df      	b.n	80164f0 <_puts_r+0x84>
 8016530:	6823      	ldr	r3, [r4, #0]
 8016532:	250a      	movs	r5, #10
 8016534:	1c5a      	adds	r2, r3, #1
 8016536:	6022      	str	r2, [r4, #0]
 8016538:	701d      	strb	r5, [r3, #0]
 801653a:	e7db      	b.n	80164f4 <_puts_r+0x88>
 801653c:	080172d8 	.word	0x080172d8
 8016540:	080172f8 	.word	0x080172f8
 8016544:	080172b8 	.word	0x080172b8

08016548 <puts>:
 8016548:	4b02      	ldr	r3, [pc, #8]	; (8016554 <puts+0xc>)
 801654a:	4601      	mov	r1, r0
 801654c:	6818      	ldr	r0, [r3, #0]
 801654e:	f7ff bf8d 	b.w	801646c <_puts_r>
 8016552:	bf00      	nop
 8016554:	24000098 	.word	0x24000098

08016558 <__swbuf_r>:
 8016558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801655a:	460e      	mov	r6, r1
 801655c:	4614      	mov	r4, r2
 801655e:	4605      	mov	r5, r0
 8016560:	b118      	cbz	r0, 801656a <__swbuf_r+0x12>
 8016562:	6983      	ldr	r3, [r0, #24]
 8016564:	b90b      	cbnz	r3, 801656a <__swbuf_r+0x12>
 8016566:	f000 f9d1 	bl	801690c <__sinit>
 801656a:	4b21      	ldr	r3, [pc, #132]	; (80165f0 <__swbuf_r+0x98>)
 801656c:	429c      	cmp	r4, r3
 801656e:	d12b      	bne.n	80165c8 <__swbuf_r+0x70>
 8016570:	686c      	ldr	r4, [r5, #4]
 8016572:	69a3      	ldr	r3, [r4, #24]
 8016574:	60a3      	str	r3, [r4, #8]
 8016576:	89a3      	ldrh	r3, [r4, #12]
 8016578:	071a      	lsls	r2, r3, #28
 801657a:	d52f      	bpl.n	80165dc <__swbuf_r+0x84>
 801657c:	6923      	ldr	r3, [r4, #16]
 801657e:	b36b      	cbz	r3, 80165dc <__swbuf_r+0x84>
 8016580:	6923      	ldr	r3, [r4, #16]
 8016582:	6820      	ldr	r0, [r4, #0]
 8016584:	1ac0      	subs	r0, r0, r3
 8016586:	6963      	ldr	r3, [r4, #20]
 8016588:	b2f6      	uxtb	r6, r6
 801658a:	4283      	cmp	r3, r0
 801658c:	4637      	mov	r7, r6
 801658e:	dc04      	bgt.n	801659a <__swbuf_r+0x42>
 8016590:	4621      	mov	r1, r4
 8016592:	4628      	mov	r0, r5
 8016594:	f000 f926 	bl	80167e4 <_fflush_r>
 8016598:	bb30      	cbnz	r0, 80165e8 <__swbuf_r+0x90>
 801659a:	68a3      	ldr	r3, [r4, #8]
 801659c:	3b01      	subs	r3, #1
 801659e:	60a3      	str	r3, [r4, #8]
 80165a0:	6823      	ldr	r3, [r4, #0]
 80165a2:	1c5a      	adds	r2, r3, #1
 80165a4:	6022      	str	r2, [r4, #0]
 80165a6:	701e      	strb	r6, [r3, #0]
 80165a8:	6963      	ldr	r3, [r4, #20]
 80165aa:	3001      	adds	r0, #1
 80165ac:	4283      	cmp	r3, r0
 80165ae:	d004      	beq.n	80165ba <__swbuf_r+0x62>
 80165b0:	89a3      	ldrh	r3, [r4, #12]
 80165b2:	07db      	lsls	r3, r3, #31
 80165b4:	d506      	bpl.n	80165c4 <__swbuf_r+0x6c>
 80165b6:	2e0a      	cmp	r6, #10
 80165b8:	d104      	bne.n	80165c4 <__swbuf_r+0x6c>
 80165ba:	4621      	mov	r1, r4
 80165bc:	4628      	mov	r0, r5
 80165be:	f000 f911 	bl	80167e4 <_fflush_r>
 80165c2:	b988      	cbnz	r0, 80165e8 <__swbuf_r+0x90>
 80165c4:	4638      	mov	r0, r7
 80165c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165c8:	4b0a      	ldr	r3, [pc, #40]	; (80165f4 <__swbuf_r+0x9c>)
 80165ca:	429c      	cmp	r4, r3
 80165cc:	d101      	bne.n	80165d2 <__swbuf_r+0x7a>
 80165ce:	68ac      	ldr	r4, [r5, #8]
 80165d0:	e7cf      	b.n	8016572 <__swbuf_r+0x1a>
 80165d2:	4b09      	ldr	r3, [pc, #36]	; (80165f8 <__swbuf_r+0xa0>)
 80165d4:	429c      	cmp	r4, r3
 80165d6:	bf08      	it	eq
 80165d8:	68ec      	ldreq	r4, [r5, #12]
 80165da:	e7ca      	b.n	8016572 <__swbuf_r+0x1a>
 80165dc:	4621      	mov	r1, r4
 80165de:	4628      	mov	r0, r5
 80165e0:	f000 f80c 	bl	80165fc <__swsetup_r>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d0cb      	beq.n	8016580 <__swbuf_r+0x28>
 80165e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80165ec:	e7ea      	b.n	80165c4 <__swbuf_r+0x6c>
 80165ee:	bf00      	nop
 80165f0:	080172d8 	.word	0x080172d8
 80165f4:	080172f8 	.word	0x080172f8
 80165f8:	080172b8 	.word	0x080172b8

080165fc <__swsetup_r>:
 80165fc:	4b32      	ldr	r3, [pc, #200]	; (80166c8 <__swsetup_r+0xcc>)
 80165fe:	b570      	push	{r4, r5, r6, lr}
 8016600:	681d      	ldr	r5, [r3, #0]
 8016602:	4606      	mov	r6, r0
 8016604:	460c      	mov	r4, r1
 8016606:	b125      	cbz	r5, 8016612 <__swsetup_r+0x16>
 8016608:	69ab      	ldr	r3, [r5, #24]
 801660a:	b913      	cbnz	r3, 8016612 <__swsetup_r+0x16>
 801660c:	4628      	mov	r0, r5
 801660e:	f000 f97d 	bl	801690c <__sinit>
 8016612:	4b2e      	ldr	r3, [pc, #184]	; (80166cc <__swsetup_r+0xd0>)
 8016614:	429c      	cmp	r4, r3
 8016616:	d10f      	bne.n	8016638 <__swsetup_r+0x3c>
 8016618:	686c      	ldr	r4, [r5, #4]
 801661a:	89a3      	ldrh	r3, [r4, #12]
 801661c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016620:	0719      	lsls	r1, r3, #28
 8016622:	d42c      	bmi.n	801667e <__swsetup_r+0x82>
 8016624:	06dd      	lsls	r5, r3, #27
 8016626:	d411      	bmi.n	801664c <__swsetup_r+0x50>
 8016628:	2309      	movs	r3, #9
 801662a:	6033      	str	r3, [r6, #0]
 801662c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016630:	81a3      	strh	r3, [r4, #12]
 8016632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016636:	e03e      	b.n	80166b6 <__swsetup_r+0xba>
 8016638:	4b25      	ldr	r3, [pc, #148]	; (80166d0 <__swsetup_r+0xd4>)
 801663a:	429c      	cmp	r4, r3
 801663c:	d101      	bne.n	8016642 <__swsetup_r+0x46>
 801663e:	68ac      	ldr	r4, [r5, #8]
 8016640:	e7eb      	b.n	801661a <__swsetup_r+0x1e>
 8016642:	4b24      	ldr	r3, [pc, #144]	; (80166d4 <__swsetup_r+0xd8>)
 8016644:	429c      	cmp	r4, r3
 8016646:	bf08      	it	eq
 8016648:	68ec      	ldreq	r4, [r5, #12]
 801664a:	e7e6      	b.n	801661a <__swsetup_r+0x1e>
 801664c:	0758      	lsls	r0, r3, #29
 801664e:	d512      	bpl.n	8016676 <__swsetup_r+0x7a>
 8016650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016652:	b141      	cbz	r1, 8016666 <__swsetup_r+0x6a>
 8016654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016658:	4299      	cmp	r1, r3
 801665a:	d002      	beq.n	8016662 <__swsetup_r+0x66>
 801665c:	4630      	mov	r0, r6
 801665e:	f000 fa5b 	bl	8016b18 <_free_r>
 8016662:	2300      	movs	r3, #0
 8016664:	6363      	str	r3, [r4, #52]	; 0x34
 8016666:	89a3      	ldrh	r3, [r4, #12]
 8016668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801666c:	81a3      	strh	r3, [r4, #12]
 801666e:	2300      	movs	r3, #0
 8016670:	6063      	str	r3, [r4, #4]
 8016672:	6923      	ldr	r3, [r4, #16]
 8016674:	6023      	str	r3, [r4, #0]
 8016676:	89a3      	ldrh	r3, [r4, #12]
 8016678:	f043 0308 	orr.w	r3, r3, #8
 801667c:	81a3      	strh	r3, [r4, #12]
 801667e:	6923      	ldr	r3, [r4, #16]
 8016680:	b94b      	cbnz	r3, 8016696 <__swsetup_r+0x9a>
 8016682:	89a3      	ldrh	r3, [r4, #12]
 8016684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801668c:	d003      	beq.n	8016696 <__swsetup_r+0x9a>
 801668e:	4621      	mov	r1, r4
 8016690:	4630      	mov	r0, r6
 8016692:	f000 fa01 	bl	8016a98 <__smakebuf_r>
 8016696:	89a0      	ldrh	r0, [r4, #12]
 8016698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801669c:	f010 0301 	ands.w	r3, r0, #1
 80166a0:	d00a      	beq.n	80166b8 <__swsetup_r+0xbc>
 80166a2:	2300      	movs	r3, #0
 80166a4:	60a3      	str	r3, [r4, #8]
 80166a6:	6963      	ldr	r3, [r4, #20]
 80166a8:	425b      	negs	r3, r3
 80166aa:	61a3      	str	r3, [r4, #24]
 80166ac:	6923      	ldr	r3, [r4, #16]
 80166ae:	b943      	cbnz	r3, 80166c2 <__swsetup_r+0xc6>
 80166b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80166b4:	d1ba      	bne.n	801662c <__swsetup_r+0x30>
 80166b6:	bd70      	pop	{r4, r5, r6, pc}
 80166b8:	0781      	lsls	r1, r0, #30
 80166ba:	bf58      	it	pl
 80166bc:	6963      	ldrpl	r3, [r4, #20]
 80166be:	60a3      	str	r3, [r4, #8]
 80166c0:	e7f4      	b.n	80166ac <__swsetup_r+0xb0>
 80166c2:	2000      	movs	r0, #0
 80166c4:	e7f7      	b.n	80166b6 <__swsetup_r+0xba>
 80166c6:	bf00      	nop
 80166c8:	24000098 	.word	0x24000098
 80166cc:	080172d8 	.word	0x080172d8
 80166d0:	080172f8 	.word	0x080172f8
 80166d4:	080172b8 	.word	0x080172b8

080166d8 <__sflush_r>:
 80166d8:	898a      	ldrh	r2, [r1, #12]
 80166da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166de:	4605      	mov	r5, r0
 80166e0:	0710      	lsls	r0, r2, #28
 80166e2:	460c      	mov	r4, r1
 80166e4:	d458      	bmi.n	8016798 <__sflush_r+0xc0>
 80166e6:	684b      	ldr	r3, [r1, #4]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	dc05      	bgt.n	80166f8 <__sflush_r+0x20>
 80166ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	dc02      	bgt.n	80166f8 <__sflush_r+0x20>
 80166f2:	2000      	movs	r0, #0
 80166f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166fa:	2e00      	cmp	r6, #0
 80166fc:	d0f9      	beq.n	80166f2 <__sflush_r+0x1a>
 80166fe:	2300      	movs	r3, #0
 8016700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016704:	682f      	ldr	r7, [r5, #0]
 8016706:	602b      	str	r3, [r5, #0]
 8016708:	d032      	beq.n	8016770 <__sflush_r+0x98>
 801670a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801670c:	89a3      	ldrh	r3, [r4, #12]
 801670e:	075a      	lsls	r2, r3, #29
 8016710:	d505      	bpl.n	801671e <__sflush_r+0x46>
 8016712:	6863      	ldr	r3, [r4, #4]
 8016714:	1ac0      	subs	r0, r0, r3
 8016716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016718:	b10b      	cbz	r3, 801671e <__sflush_r+0x46>
 801671a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801671c:	1ac0      	subs	r0, r0, r3
 801671e:	2300      	movs	r3, #0
 8016720:	4602      	mov	r2, r0
 8016722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016724:	6a21      	ldr	r1, [r4, #32]
 8016726:	4628      	mov	r0, r5
 8016728:	47b0      	blx	r6
 801672a:	1c43      	adds	r3, r0, #1
 801672c:	89a3      	ldrh	r3, [r4, #12]
 801672e:	d106      	bne.n	801673e <__sflush_r+0x66>
 8016730:	6829      	ldr	r1, [r5, #0]
 8016732:	291d      	cmp	r1, #29
 8016734:	d82c      	bhi.n	8016790 <__sflush_r+0xb8>
 8016736:	4a2a      	ldr	r2, [pc, #168]	; (80167e0 <__sflush_r+0x108>)
 8016738:	40ca      	lsrs	r2, r1
 801673a:	07d6      	lsls	r6, r2, #31
 801673c:	d528      	bpl.n	8016790 <__sflush_r+0xb8>
 801673e:	2200      	movs	r2, #0
 8016740:	6062      	str	r2, [r4, #4]
 8016742:	04d9      	lsls	r1, r3, #19
 8016744:	6922      	ldr	r2, [r4, #16]
 8016746:	6022      	str	r2, [r4, #0]
 8016748:	d504      	bpl.n	8016754 <__sflush_r+0x7c>
 801674a:	1c42      	adds	r2, r0, #1
 801674c:	d101      	bne.n	8016752 <__sflush_r+0x7a>
 801674e:	682b      	ldr	r3, [r5, #0]
 8016750:	b903      	cbnz	r3, 8016754 <__sflush_r+0x7c>
 8016752:	6560      	str	r0, [r4, #84]	; 0x54
 8016754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016756:	602f      	str	r7, [r5, #0]
 8016758:	2900      	cmp	r1, #0
 801675a:	d0ca      	beq.n	80166f2 <__sflush_r+0x1a>
 801675c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016760:	4299      	cmp	r1, r3
 8016762:	d002      	beq.n	801676a <__sflush_r+0x92>
 8016764:	4628      	mov	r0, r5
 8016766:	f000 f9d7 	bl	8016b18 <_free_r>
 801676a:	2000      	movs	r0, #0
 801676c:	6360      	str	r0, [r4, #52]	; 0x34
 801676e:	e7c1      	b.n	80166f4 <__sflush_r+0x1c>
 8016770:	6a21      	ldr	r1, [r4, #32]
 8016772:	2301      	movs	r3, #1
 8016774:	4628      	mov	r0, r5
 8016776:	47b0      	blx	r6
 8016778:	1c41      	adds	r1, r0, #1
 801677a:	d1c7      	bne.n	801670c <__sflush_r+0x34>
 801677c:	682b      	ldr	r3, [r5, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d0c4      	beq.n	801670c <__sflush_r+0x34>
 8016782:	2b1d      	cmp	r3, #29
 8016784:	d001      	beq.n	801678a <__sflush_r+0xb2>
 8016786:	2b16      	cmp	r3, #22
 8016788:	d101      	bne.n	801678e <__sflush_r+0xb6>
 801678a:	602f      	str	r7, [r5, #0]
 801678c:	e7b1      	b.n	80166f2 <__sflush_r+0x1a>
 801678e:	89a3      	ldrh	r3, [r4, #12]
 8016790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016794:	81a3      	strh	r3, [r4, #12]
 8016796:	e7ad      	b.n	80166f4 <__sflush_r+0x1c>
 8016798:	690f      	ldr	r7, [r1, #16]
 801679a:	2f00      	cmp	r7, #0
 801679c:	d0a9      	beq.n	80166f2 <__sflush_r+0x1a>
 801679e:	0793      	lsls	r3, r2, #30
 80167a0:	680e      	ldr	r6, [r1, #0]
 80167a2:	bf08      	it	eq
 80167a4:	694b      	ldreq	r3, [r1, #20]
 80167a6:	600f      	str	r7, [r1, #0]
 80167a8:	bf18      	it	ne
 80167aa:	2300      	movne	r3, #0
 80167ac:	eba6 0807 	sub.w	r8, r6, r7
 80167b0:	608b      	str	r3, [r1, #8]
 80167b2:	f1b8 0f00 	cmp.w	r8, #0
 80167b6:	dd9c      	ble.n	80166f2 <__sflush_r+0x1a>
 80167b8:	6a21      	ldr	r1, [r4, #32]
 80167ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80167bc:	4643      	mov	r3, r8
 80167be:	463a      	mov	r2, r7
 80167c0:	4628      	mov	r0, r5
 80167c2:	47b0      	blx	r6
 80167c4:	2800      	cmp	r0, #0
 80167c6:	dc06      	bgt.n	80167d6 <__sflush_r+0xfe>
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167ce:	81a3      	strh	r3, [r4, #12]
 80167d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167d4:	e78e      	b.n	80166f4 <__sflush_r+0x1c>
 80167d6:	4407      	add	r7, r0
 80167d8:	eba8 0800 	sub.w	r8, r8, r0
 80167dc:	e7e9      	b.n	80167b2 <__sflush_r+0xda>
 80167de:	bf00      	nop
 80167e0:	20400001 	.word	0x20400001

080167e4 <_fflush_r>:
 80167e4:	b538      	push	{r3, r4, r5, lr}
 80167e6:	690b      	ldr	r3, [r1, #16]
 80167e8:	4605      	mov	r5, r0
 80167ea:	460c      	mov	r4, r1
 80167ec:	b913      	cbnz	r3, 80167f4 <_fflush_r+0x10>
 80167ee:	2500      	movs	r5, #0
 80167f0:	4628      	mov	r0, r5
 80167f2:	bd38      	pop	{r3, r4, r5, pc}
 80167f4:	b118      	cbz	r0, 80167fe <_fflush_r+0x1a>
 80167f6:	6983      	ldr	r3, [r0, #24]
 80167f8:	b90b      	cbnz	r3, 80167fe <_fflush_r+0x1a>
 80167fa:	f000 f887 	bl	801690c <__sinit>
 80167fe:	4b14      	ldr	r3, [pc, #80]	; (8016850 <_fflush_r+0x6c>)
 8016800:	429c      	cmp	r4, r3
 8016802:	d11b      	bne.n	801683c <_fflush_r+0x58>
 8016804:	686c      	ldr	r4, [r5, #4]
 8016806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d0ef      	beq.n	80167ee <_fflush_r+0xa>
 801680e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016810:	07d0      	lsls	r0, r2, #31
 8016812:	d404      	bmi.n	801681e <_fflush_r+0x3a>
 8016814:	0599      	lsls	r1, r3, #22
 8016816:	d402      	bmi.n	801681e <_fflush_r+0x3a>
 8016818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801681a:	f000 f915 	bl	8016a48 <__retarget_lock_acquire_recursive>
 801681e:	4628      	mov	r0, r5
 8016820:	4621      	mov	r1, r4
 8016822:	f7ff ff59 	bl	80166d8 <__sflush_r>
 8016826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016828:	07da      	lsls	r2, r3, #31
 801682a:	4605      	mov	r5, r0
 801682c:	d4e0      	bmi.n	80167f0 <_fflush_r+0xc>
 801682e:	89a3      	ldrh	r3, [r4, #12]
 8016830:	059b      	lsls	r3, r3, #22
 8016832:	d4dd      	bmi.n	80167f0 <_fflush_r+0xc>
 8016834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016836:	f000 f908 	bl	8016a4a <__retarget_lock_release_recursive>
 801683a:	e7d9      	b.n	80167f0 <_fflush_r+0xc>
 801683c:	4b05      	ldr	r3, [pc, #20]	; (8016854 <_fflush_r+0x70>)
 801683e:	429c      	cmp	r4, r3
 8016840:	d101      	bne.n	8016846 <_fflush_r+0x62>
 8016842:	68ac      	ldr	r4, [r5, #8]
 8016844:	e7df      	b.n	8016806 <_fflush_r+0x22>
 8016846:	4b04      	ldr	r3, [pc, #16]	; (8016858 <_fflush_r+0x74>)
 8016848:	429c      	cmp	r4, r3
 801684a:	bf08      	it	eq
 801684c:	68ec      	ldreq	r4, [r5, #12]
 801684e:	e7da      	b.n	8016806 <_fflush_r+0x22>
 8016850:	080172d8 	.word	0x080172d8
 8016854:	080172f8 	.word	0x080172f8
 8016858:	080172b8 	.word	0x080172b8

0801685c <std>:
 801685c:	2300      	movs	r3, #0
 801685e:	b510      	push	{r4, lr}
 8016860:	4604      	mov	r4, r0
 8016862:	e9c0 3300 	strd	r3, r3, [r0]
 8016866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801686a:	6083      	str	r3, [r0, #8]
 801686c:	8181      	strh	r1, [r0, #12]
 801686e:	6643      	str	r3, [r0, #100]	; 0x64
 8016870:	81c2      	strh	r2, [r0, #14]
 8016872:	6183      	str	r3, [r0, #24]
 8016874:	4619      	mov	r1, r3
 8016876:	2208      	movs	r2, #8
 8016878:	305c      	adds	r0, #92	; 0x5c
 801687a:	f7ff fdef 	bl	801645c <memset>
 801687e:	4b05      	ldr	r3, [pc, #20]	; (8016894 <std+0x38>)
 8016880:	6263      	str	r3, [r4, #36]	; 0x24
 8016882:	4b05      	ldr	r3, [pc, #20]	; (8016898 <std+0x3c>)
 8016884:	62a3      	str	r3, [r4, #40]	; 0x28
 8016886:	4b05      	ldr	r3, [pc, #20]	; (801689c <std+0x40>)
 8016888:	62e3      	str	r3, [r4, #44]	; 0x2c
 801688a:	4b05      	ldr	r3, [pc, #20]	; (80168a0 <std+0x44>)
 801688c:	6224      	str	r4, [r4, #32]
 801688e:	6323      	str	r3, [r4, #48]	; 0x30
 8016890:	bd10      	pop	{r4, pc}
 8016892:	bf00      	nop
 8016894:	08016cf9 	.word	0x08016cf9
 8016898:	08016d1b 	.word	0x08016d1b
 801689c:	08016d53 	.word	0x08016d53
 80168a0:	08016d77 	.word	0x08016d77

080168a4 <_cleanup_r>:
 80168a4:	4901      	ldr	r1, [pc, #4]	; (80168ac <_cleanup_r+0x8>)
 80168a6:	f000 b8af 	b.w	8016a08 <_fwalk_reent>
 80168aa:	bf00      	nop
 80168ac:	080167e5 	.word	0x080167e5

080168b0 <__sfmoreglue>:
 80168b0:	b570      	push	{r4, r5, r6, lr}
 80168b2:	2268      	movs	r2, #104	; 0x68
 80168b4:	1e4d      	subs	r5, r1, #1
 80168b6:	4355      	muls	r5, r2
 80168b8:	460e      	mov	r6, r1
 80168ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80168be:	f000 f997 	bl	8016bf0 <_malloc_r>
 80168c2:	4604      	mov	r4, r0
 80168c4:	b140      	cbz	r0, 80168d8 <__sfmoreglue+0x28>
 80168c6:	2100      	movs	r1, #0
 80168c8:	e9c0 1600 	strd	r1, r6, [r0]
 80168cc:	300c      	adds	r0, #12
 80168ce:	60a0      	str	r0, [r4, #8]
 80168d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80168d4:	f7ff fdc2 	bl	801645c <memset>
 80168d8:	4620      	mov	r0, r4
 80168da:	bd70      	pop	{r4, r5, r6, pc}

080168dc <__sfp_lock_acquire>:
 80168dc:	4801      	ldr	r0, [pc, #4]	; (80168e4 <__sfp_lock_acquire+0x8>)
 80168de:	f000 b8b3 	b.w	8016a48 <__retarget_lock_acquire_recursive>
 80168e2:	bf00      	nop
 80168e4:	24006801 	.word	0x24006801

080168e8 <__sfp_lock_release>:
 80168e8:	4801      	ldr	r0, [pc, #4]	; (80168f0 <__sfp_lock_release+0x8>)
 80168ea:	f000 b8ae 	b.w	8016a4a <__retarget_lock_release_recursive>
 80168ee:	bf00      	nop
 80168f0:	24006801 	.word	0x24006801

080168f4 <__sinit_lock_acquire>:
 80168f4:	4801      	ldr	r0, [pc, #4]	; (80168fc <__sinit_lock_acquire+0x8>)
 80168f6:	f000 b8a7 	b.w	8016a48 <__retarget_lock_acquire_recursive>
 80168fa:	bf00      	nop
 80168fc:	24006802 	.word	0x24006802

08016900 <__sinit_lock_release>:
 8016900:	4801      	ldr	r0, [pc, #4]	; (8016908 <__sinit_lock_release+0x8>)
 8016902:	f000 b8a2 	b.w	8016a4a <__retarget_lock_release_recursive>
 8016906:	bf00      	nop
 8016908:	24006802 	.word	0x24006802

0801690c <__sinit>:
 801690c:	b510      	push	{r4, lr}
 801690e:	4604      	mov	r4, r0
 8016910:	f7ff fff0 	bl	80168f4 <__sinit_lock_acquire>
 8016914:	69a3      	ldr	r3, [r4, #24]
 8016916:	b11b      	cbz	r3, 8016920 <__sinit+0x14>
 8016918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801691c:	f7ff bff0 	b.w	8016900 <__sinit_lock_release>
 8016920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016924:	6523      	str	r3, [r4, #80]	; 0x50
 8016926:	4b13      	ldr	r3, [pc, #76]	; (8016974 <__sinit+0x68>)
 8016928:	4a13      	ldr	r2, [pc, #76]	; (8016978 <__sinit+0x6c>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	62a2      	str	r2, [r4, #40]	; 0x28
 801692e:	42a3      	cmp	r3, r4
 8016930:	bf04      	itt	eq
 8016932:	2301      	moveq	r3, #1
 8016934:	61a3      	streq	r3, [r4, #24]
 8016936:	4620      	mov	r0, r4
 8016938:	f000 f820 	bl	801697c <__sfp>
 801693c:	6060      	str	r0, [r4, #4]
 801693e:	4620      	mov	r0, r4
 8016940:	f000 f81c 	bl	801697c <__sfp>
 8016944:	60a0      	str	r0, [r4, #8]
 8016946:	4620      	mov	r0, r4
 8016948:	f000 f818 	bl	801697c <__sfp>
 801694c:	2200      	movs	r2, #0
 801694e:	60e0      	str	r0, [r4, #12]
 8016950:	2104      	movs	r1, #4
 8016952:	6860      	ldr	r0, [r4, #4]
 8016954:	f7ff ff82 	bl	801685c <std>
 8016958:	68a0      	ldr	r0, [r4, #8]
 801695a:	2201      	movs	r2, #1
 801695c:	2109      	movs	r1, #9
 801695e:	f7ff ff7d 	bl	801685c <std>
 8016962:	68e0      	ldr	r0, [r4, #12]
 8016964:	2202      	movs	r2, #2
 8016966:	2112      	movs	r1, #18
 8016968:	f7ff ff78 	bl	801685c <std>
 801696c:	2301      	movs	r3, #1
 801696e:	61a3      	str	r3, [r4, #24]
 8016970:	e7d2      	b.n	8016918 <__sinit+0xc>
 8016972:	bf00      	nop
 8016974:	080172b4 	.word	0x080172b4
 8016978:	080168a5 	.word	0x080168a5

0801697c <__sfp>:
 801697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801697e:	4607      	mov	r7, r0
 8016980:	f7ff ffac 	bl	80168dc <__sfp_lock_acquire>
 8016984:	4b1e      	ldr	r3, [pc, #120]	; (8016a00 <__sfp+0x84>)
 8016986:	681e      	ldr	r6, [r3, #0]
 8016988:	69b3      	ldr	r3, [r6, #24]
 801698a:	b913      	cbnz	r3, 8016992 <__sfp+0x16>
 801698c:	4630      	mov	r0, r6
 801698e:	f7ff ffbd 	bl	801690c <__sinit>
 8016992:	3648      	adds	r6, #72	; 0x48
 8016994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016998:	3b01      	subs	r3, #1
 801699a:	d503      	bpl.n	80169a4 <__sfp+0x28>
 801699c:	6833      	ldr	r3, [r6, #0]
 801699e:	b30b      	cbz	r3, 80169e4 <__sfp+0x68>
 80169a0:	6836      	ldr	r6, [r6, #0]
 80169a2:	e7f7      	b.n	8016994 <__sfp+0x18>
 80169a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80169a8:	b9d5      	cbnz	r5, 80169e0 <__sfp+0x64>
 80169aa:	4b16      	ldr	r3, [pc, #88]	; (8016a04 <__sfp+0x88>)
 80169ac:	60e3      	str	r3, [r4, #12]
 80169ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80169b2:	6665      	str	r5, [r4, #100]	; 0x64
 80169b4:	f000 f847 	bl	8016a46 <__retarget_lock_init_recursive>
 80169b8:	f7ff ff96 	bl	80168e8 <__sfp_lock_release>
 80169bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80169c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80169c4:	6025      	str	r5, [r4, #0]
 80169c6:	61a5      	str	r5, [r4, #24]
 80169c8:	2208      	movs	r2, #8
 80169ca:	4629      	mov	r1, r5
 80169cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80169d0:	f7ff fd44 	bl	801645c <memset>
 80169d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169dc:	4620      	mov	r0, r4
 80169de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169e0:	3468      	adds	r4, #104	; 0x68
 80169e2:	e7d9      	b.n	8016998 <__sfp+0x1c>
 80169e4:	2104      	movs	r1, #4
 80169e6:	4638      	mov	r0, r7
 80169e8:	f7ff ff62 	bl	80168b0 <__sfmoreglue>
 80169ec:	4604      	mov	r4, r0
 80169ee:	6030      	str	r0, [r6, #0]
 80169f0:	2800      	cmp	r0, #0
 80169f2:	d1d5      	bne.n	80169a0 <__sfp+0x24>
 80169f4:	f7ff ff78 	bl	80168e8 <__sfp_lock_release>
 80169f8:	230c      	movs	r3, #12
 80169fa:	603b      	str	r3, [r7, #0]
 80169fc:	e7ee      	b.n	80169dc <__sfp+0x60>
 80169fe:	bf00      	nop
 8016a00:	080172b4 	.word	0x080172b4
 8016a04:	ffff0001 	.word	0xffff0001

08016a08 <_fwalk_reent>:
 8016a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a0c:	4606      	mov	r6, r0
 8016a0e:	4688      	mov	r8, r1
 8016a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a14:	2700      	movs	r7, #0
 8016a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8016a1e:	d505      	bpl.n	8016a2c <_fwalk_reent+0x24>
 8016a20:	6824      	ldr	r4, [r4, #0]
 8016a22:	2c00      	cmp	r4, #0
 8016a24:	d1f7      	bne.n	8016a16 <_fwalk_reent+0xe>
 8016a26:	4638      	mov	r0, r7
 8016a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a2c:	89ab      	ldrh	r3, [r5, #12]
 8016a2e:	2b01      	cmp	r3, #1
 8016a30:	d907      	bls.n	8016a42 <_fwalk_reent+0x3a>
 8016a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a36:	3301      	adds	r3, #1
 8016a38:	d003      	beq.n	8016a42 <_fwalk_reent+0x3a>
 8016a3a:	4629      	mov	r1, r5
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	47c0      	blx	r8
 8016a40:	4307      	orrs	r7, r0
 8016a42:	3568      	adds	r5, #104	; 0x68
 8016a44:	e7e9      	b.n	8016a1a <_fwalk_reent+0x12>

08016a46 <__retarget_lock_init_recursive>:
 8016a46:	4770      	bx	lr

08016a48 <__retarget_lock_acquire_recursive>:
 8016a48:	4770      	bx	lr

08016a4a <__retarget_lock_release_recursive>:
 8016a4a:	4770      	bx	lr

08016a4c <__swhatbuf_r>:
 8016a4c:	b570      	push	{r4, r5, r6, lr}
 8016a4e:	460e      	mov	r6, r1
 8016a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a54:	2900      	cmp	r1, #0
 8016a56:	b096      	sub	sp, #88	; 0x58
 8016a58:	4614      	mov	r4, r2
 8016a5a:	461d      	mov	r5, r3
 8016a5c:	da08      	bge.n	8016a70 <__swhatbuf_r+0x24>
 8016a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016a62:	2200      	movs	r2, #0
 8016a64:	602a      	str	r2, [r5, #0]
 8016a66:	061a      	lsls	r2, r3, #24
 8016a68:	d410      	bmi.n	8016a8c <__swhatbuf_r+0x40>
 8016a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a6e:	e00e      	b.n	8016a8e <__swhatbuf_r+0x42>
 8016a70:	466a      	mov	r2, sp
 8016a72:	f000 f9a7 	bl	8016dc4 <_fstat_r>
 8016a76:	2800      	cmp	r0, #0
 8016a78:	dbf1      	blt.n	8016a5e <__swhatbuf_r+0x12>
 8016a7a:	9a01      	ldr	r2, [sp, #4]
 8016a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a84:	425a      	negs	r2, r3
 8016a86:	415a      	adcs	r2, r3
 8016a88:	602a      	str	r2, [r5, #0]
 8016a8a:	e7ee      	b.n	8016a6a <__swhatbuf_r+0x1e>
 8016a8c:	2340      	movs	r3, #64	; 0x40
 8016a8e:	2000      	movs	r0, #0
 8016a90:	6023      	str	r3, [r4, #0]
 8016a92:	b016      	add	sp, #88	; 0x58
 8016a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a98 <__smakebuf_r>:
 8016a98:	898b      	ldrh	r3, [r1, #12]
 8016a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a9c:	079d      	lsls	r5, r3, #30
 8016a9e:	4606      	mov	r6, r0
 8016aa0:	460c      	mov	r4, r1
 8016aa2:	d507      	bpl.n	8016ab4 <__smakebuf_r+0x1c>
 8016aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016aa8:	6023      	str	r3, [r4, #0]
 8016aaa:	6123      	str	r3, [r4, #16]
 8016aac:	2301      	movs	r3, #1
 8016aae:	6163      	str	r3, [r4, #20]
 8016ab0:	b002      	add	sp, #8
 8016ab2:	bd70      	pop	{r4, r5, r6, pc}
 8016ab4:	ab01      	add	r3, sp, #4
 8016ab6:	466a      	mov	r2, sp
 8016ab8:	f7ff ffc8 	bl	8016a4c <__swhatbuf_r>
 8016abc:	9900      	ldr	r1, [sp, #0]
 8016abe:	4605      	mov	r5, r0
 8016ac0:	4630      	mov	r0, r6
 8016ac2:	f000 f895 	bl	8016bf0 <_malloc_r>
 8016ac6:	b948      	cbnz	r0, 8016adc <__smakebuf_r+0x44>
 8016ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016acc:	059a      	lsls	r2, r3, #22
 8016ace:	d4ef      	bmi.n	8016ab0 <__smakebuf_r+0x18>
 8016ad0:	f023 0303 	bic.w	r3, r3, #3
 8016ad4:	f043 0302 	orr.w	r3, r3, #2
 8016ad8:	81a3      	strh	r3, [r4, #12]
 8016ada:	e7e3      	b.n	8016aa4 <__smakebuf_r+0xc>
 8016adc:	4b0d      	ldr	r3, [pc, #52]	; (8016b14 <__smakebuf_r+0x7c>)
 8016ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8016ae0:	89a3      	ldrh	r3, [r4, #12]
 8016ae2:	6020      	str	r0, [r4, #0]
 8016ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ae8:	81a3      	strh	r3, [r4, #12]
 8016aea:	9b00      	ldr	r3, [sp, #0]
 8016aec:	6163      	str	r3, [r4, #20]
 8016aee:	9b01      	ldr	r3, [sp, #4]
 8016af0:	6120      	str	r0, [r4, #16]
 8016af2:	b15b      	cbz	r3, 8016b0c <__smakebuf_r+0x74>
 8016af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016af8:	4630      	mov	r0, r6
 8016afa:	f000 f975 	bl	8016de8 <_isatty_r>
 8016afe:	b128      	cbz	r0, 8016b0c <__smakebuf_r+0x74>
 8016b00:	89a3      	ldrh	r3, [r4, #12]
 8016b02:	f023 0303 	bic.w	r3, r3, #3
 8016b06:	f043 0301 	orr.w	r3, r3, #1
 8016b0a:	81a3      	strh	r3, [r4, #12]
 8016b0c:	89a0      	ldrh	r0, [r4, #12]
 8016b0e:	4305      	orrs	r5, r0
 8016b10:	81a5      	strh	r5, [r4, #12]
 8016b12:	e7cd      	b.n	8016ab0 <__smakebuf_r+0x18>
 8016b14:	080168a5 	.word	0x080168a5

08016b18 <_free_r>:
 8016b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b1a:	2900      	cmp	r1, #0
 8016b1c:	d044      	beq.n	8016ba8 <_free_r+0x90>
 8016b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b22:	9001      	str	r0, [sp, #4]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	f1a1 0404 	sub.w	r4, r1, #4
 8016b2a:	bfb8      	it	lt
 8016b2c:	18e4      	addlt	r4, r4, r3
 8016b2e:	f000 f97d 	bl	8016e2c <__malloc_lock>
 8016b32:	4a1e      	ldr	r2, [pc, #120]	; (8016bac <_free_r+0x94>)
 8016b34:	9801      	ldr	r0, [sp, #4]
 8016b36:	6813      	ldr	r3, [r2, #0]
 8016b38:	b933      	cbnz	r3, 8016b48 <_free_r+0x30>
 8016b3a:	6063      	str	r3, [r4, #4]
 8016b3c:	6014      	str	r4, [r2, #0]
 8016b3e:	b003      	add	sp, #12
 8016b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b44:	f000 b978 	b.w	8016e38 <__malloc_unlock>
 8016b48:	42a3      	cmp	r3, r4
 8016b4a:	d908      	bls.n	8016b5e <_free_r+0x46>
 8016b4c:	6825      	ldr	r5, [r4, #0]
 8016b4e:	1961      	adds	r1, r4, r5
 8016b50:	428b      	cmp	r3, r1
 8016b52:	bf01      	itttt	eq
 8016b54:	6819      	ldreq	r1, [r3, #0]
 8016b56:	685b      	ldreq	r3, [r3, #4]
 8016b58:	1949      	addeq	r1, r1, r5
 8016b5a:	6021      	streq	r1, [r4, #0]
 8016b5c:	e7ed      	b.n	8016b3a <_free_r+0x22>
 8016b5e:	461a      	mov	r2, r3
 8016b60:	685b      	ldr	r3, [r3, #4]
 8016b62:	b10b      	cbz	r3, 8016b68 <_free_r+0x50>
 8016b64:	42a3      	cmp	r3, r4
 8016b66:	d9fa      	bls.n	8016b5e <_free_r+0x46>
 8016b68:	6811      	ldr	r1, [r2, #0]
 8016b6a:	1855      	adds	r5, r2, r1
 8016b6c:	42a5      	cmp	r5, r4
 8016b6e:	d10b      	bne.n	8016b88 <_free_r+0x70>
 8016b70:	6824      	ldr	r4, [r4, #0]
 8016b72:	4421      	add	r1, r4
 8016b74:	1854      	adds	r4, r2, r1
 8016b76:	42a3      	cmp	r3, r4
 8016b78:	6011      	str	r1, [r2, #0]
 8016b7a:	d1e0      	bne.n	8016b3e <_free_r+0x26>
 8016b7c:	681c      	ldr	r4, [r3, #0]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	6053      	str	r3, [r2, #4]
 8016b82:	4421      	add	r1, r4
 8016b84:	6011      	str	r1, [r2, #0]
 8016b86:	e7da      	b.n	8016b3e <_free_r+0x26>
 8016b88:	d902      	bls.n	8016b90 <_free_r+0x78>
 8016b8a:	230c      	movs	r3, #12
 8016b8c:	6003      	str	r3, [r0, #0]
 8016b8e:	e7d6      	b.n	8016b3e <_free_r+0x26>
 8016b90:	6825      	ldr	r5, [r4, #0]
 8016b92:	1961      	adds	r1, r4, r5
 8016b94:	428b      	cmp	r3, r1
 8016b96:	bf04      	itt	eq
 8016b98:	6819      	ldreq	r1, [r3, #0]
 8016b9a:	685b      	ldreq	r3, [r3, #4]
 8016b9c:	6063      	str	r3, [r4, #4]
 8016b9e:	bf04      	itt	eq
 8016ba0:	1949      	addeq	r1, r1, r5
 8016ba2:	6021      	streq	r1, [r4, #0]
 8016ba4:	6054      	str	r4, [r2, #4]
 8016ba6:	e7ca      	b.n	8016b3e <_free_r+0x26>
 8016ba8:	b003      	add	sp, #12
 8016baa:	bd30      	pop	{r4, r5, pc}
 8016bac:	24006804 	.word	0x24006804

08016bb0 <sbrk_aligned>:
 8016bb0:	b570      	push	{r4, r5, r6, lr}
 8016bb2:	4e0e      	ldr	r6, [pc, #56]	; (8016bec <sbrk_aligned+0x3c>)
 8016bb4:	460c      	mov	r4, r1
 8016bb6:	6831      	ldr	r1, [r6, #0]
 8016bb8:	4605      	mov	r5, r0
 8016bba:	b911      	cbnz	r1, 8016bc2 <sbrk_aligned+0x12>
 8016bbc:	f000 f88c 	bl	8016cd8 <_sbrk_r>
 8016bc0:	6030      	str	r0, [r6, #0]
 8016bc2:	4621      	mov	r1, r4
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f000 f887 	bl	8016cd8 <_sbrk_r>
 8016bca:	1c43      	adds	r3, r0, #1
 8016bcc:	d00a      	beq.n	8016be4 <sbrk_aligned+0x34>
 8016bce:	1cc4      	adds	r4, r0, #3
 8016bd0:	f024 0403 	bic.w	r4, r4, #3
 8016bd4:	42a0      	cmp	r0, r4
 8016bd6:	d007      	beq.n	8016be8 <sbrk_aligned+0x38>
 8016bd8:	1a21      	subs	r1, r4, r0
 8016bda:	4628      	mov	r0, r5
 8016bdc:	f000 f87c 	bl	8016cd8 <_sbrk_r>
 8016be0:	3001      	adds	r0, #1
 8016be2:	d101      	bne.n	8016be8 <sbrk_aligned+0x38>
 8016be4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016be8:	4620      	mov	r0, r4
 8016bea:	bd70      	pop	{r4, r5, r6, pc}
 8016bec:	24006808 	.word	0x24006808

08016bf0 <_malloc_r>:
 8016bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf4:	1ccd      	adds	r5, r1, #3
 8016bf6:	f025 0503 	bic.w	r5, r5, #3
 8016bfa:	3508      	adds	r5, #8
 8016bfc:	2d0c      	cmp	r5, #12
 8016bfe:	bf38      	it	cc
 8016c00:	250c      	movcc	r5, #12
 8016c02:	2d00      	cmp	r5, #0
 8016c04:	4607      	mov	r7, r0
 8016c06:	db01      	blt.n	8016c0c <_malloc_r+0x1c>
 8016c08:	42a9      	cmp	r1, r5
 8016c0a:	d905      	bls.n	8016c18 <_malloc_r+0x28>
 8016c0c:	230c      	movs	r3, #12
 8016c0e:	603b      	str	r3, [r7, #0]
 8016c10:	2600      	movs	r6, #0
 8016c12:	4630      	mov	r0, r6
 8016c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c18:	4e2e      	ldr	r6, [pc, #184]	; (8016cd4 <_malloc_r+0xe4>)
 8016c1a:	f000 f907 	bl	8016e2c <__malloc_lock>
 8016c1e:	6833      	ldr	r3, [r6, #0]
 8016c20:	461c      	mov	r4, r3
 8016c22:	bb34      	cbnz	r4, 8016c72 <_malloc_r+0x82>
 8016c24:	4629      	mov	r1, r5
 8016c26:	4638      	mov	r0, r7
 8016c28:	f7ff ffc2 	bl	8016bb0 <sbrk_aligned>
 8016c2c:	1c43      	adds	r3, r0, #1
 8016c2e:	4604      	mov	r4, r0
 8016c30:	d14d      	bne.n	8016cce <_malloc_r+0xde>
 8016c32:	6834      	ldr	r4, [r6, #0]
 8016c34:	4626      	mov	r6, r4
 8016c36:	2e00      	cmp	r6, #0
 8016c38:	d140      	bne.n	8016cbc <_malloc_r+0xcc>
 8016c3a:	6823      	ldr	r3, [r4, #0]
 8016c3c:	4631      	mov	r1, r6
 8016c3e:	4638      	mov	r0, r7
 8016c40:	eb04 0803 	add.w	r8, r4, r3
 8016c44:	f000 f848 	bl	8016cd8 <_sbrk_r>
 8016c48:	4580      	cmp	r8, r0
 8016c4a:	d13a      	bne.n	8016cc2 <_malloc_r+0xd2>
 8016c4c:	6821      	ldr	r1, [r4, #0]
 8016c4e:	3503      	adds	r5, #3
 8016c50:	1a6d      	subs	r5, r5, r1
 8016c52:	f025 0503 	bic.w	r5, r5, #3
 8016c56:	3508      	adds	r5, #8
 8016c58:	2d0c      	cmp	r5, #12
 8016c5a:	bf38      	it	cc
 8016c5c:	250c      	movcc	r5, #12
 8016c5e:	4629      	mov	r1, r5
 8016c60:	4638      	mov	r0, r7
 8016c62:	f7ff ffa5 	bl	8016bb0 <sbrk_aligned>
 8016c66:	3001      	adds	r0, #1
 8016c68:	d02b      	beq.n	8016cc2 <_malloc_r+0xd2>
 8016c6a:	6823      	ldr	r3, [r4, #0]
 8016c6c:	442b      	add	r3, r5
 8016c6e:	6023      	str	r3, [r4, #0]
 8016c70:	e00e      	b.n	8016c90 <_malloc_r+0xa0>
 8016c72:	6822      	ldr	r2, [r4, #0]
 8016c74:	1b52      	subs	r2, r2, r5
 8016c76:	d41e      	bmi.n	8016cb6 <_malloc_r+0xc6>
 8016c78:	2a0b      	cmp	r2, #11
 8016c7a:	d916      	bls.n	8016caa <_malloc_r+0xba>
 8016c7c:	1961      	adds	r1, r4, r5
 8016c7e:	42a3      	cmp	r3, r4
 8016c80:	6025      	str	r5, [r4, #0]
 8016c82:	bf18      	it	ne
 8016c84:	6059      	strne	r1, [r3, #4]
 8016c86:	6863      	ldr	r3, [r4, #4]
 8016c88:	bf08      	it	eq
 8016c8a:	6031      	streq	r1, [r6, #0]
 8016c8c:	5162      	str	r2, [r4, r5]
 8016c8e:	604b      	str	r3, [r1, #4]
 8016c90:	4638      	mov	r0, r7
 8016c92:	f104 060b 	add.w	r6, r4, #11
 8016c96:	f000 f8cf 	bl	8016e38 <__malloc_unlock>
 8016c9a:	f026 0607 	bic.w	r6, r6, #7
 8016c9e:	1d23      	adds	r3, r4, #4
 8016ca0:	1af2      	subs	r2, r6, r3
 8016ca2:	d0b6      	beq.n	8016c12 <_malloc_r+0x22>
 8016ca4:	1b9b      	subs	r3, r3, r6
 8016ca6:	50a3      	str	r3, [r4, r2]
 8016ca8:	e7b3      	b.n	8016c12 <_malloc_r+0x22>
 8016caa:	6862      	ldr	r2, [r4, #4]
 8016cac:	42a3      	cmp	r3, r4
 8016cae:	bf0c      	ite	eq
 8016cb0:	6032      	streq	r2, [r6, #0]
 8016cb2:	605a      	strne	r2, [r3, #4]
 8016cb4:	e7ec      	b.n	8016c90 <_malloc_r+0xa0>
 8016cb6:	4623      	mov	r3, r4
 8016cb8:	6864      	ldr	r4, [r4, #4]
 8016cba:	e7b2      	b.n	8016c22 <_malloc_r+0x32>
 8016cbc:	4634      	mov	r4, r6
 8016cbe:	6876      	ldr	r6, [r6, #4]
 8016cc0:	e7b9      	b.n	8016c36 <_malloc_r+0x46>
 8016cc2:	230c      	movs	r3, #12
 8016cc4:	603b      	str	r3, [r7, #0]
 8016cc6:	4638      	mov	r0, r7
 8016cc8:	f000 f8b6 	bl	8016e38 <__malloc_unlock>
 8016ccc:	e7a1      	b.n	8016c12 <_malloc_r+0x22>
 8016cce:	6025      	str	r5, [r4, #0]
 8016cd0:	e7de      	b.n	8016c90 <_malloc_r+0xa0>
 8016cd2:	bf00      	nop
 8016cd4:	24006804 	.word	0x24006804

08016cd8 <_sbrk_r>:
 8016cd8:	b538      	push	{r3, r4, r5, lr}
 8016cda:	4d06      	ldr	r5, [pc, #24]	; (8016cf4 <_sbrk_r+0x1c>)
 8016cdc:	2300      	movs	r3, #0
 8016cde:	4604      	mov	r4, r0
 8016ce0:	4608      	mov	r0, r1
 8016ce2:	602b      	str	r3, [r5, #0]
 8016ce4:	f7ec fa56 	bl	8003194 <_sbrk>
 8016ce8:	1c43      	adds	r3, r0, #1
 8016cea:	d102      	bne.n	8016cf2 <_sbrk_r+0x1a>
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	b103      	cbz	r3, 8016cf2 <_sbrk_r+0x1a>
 8016cf0:	6023      	str	r3, [r4, #0]
 8016cf2:	bd38      	pop	{r3, r4, r5, pc}
 8016cf4:	2400680c 	.word	0x2400680c

08016cf8 <__sread>:
 8016cf8:	b510      	push	{r4, lr}
 8016cfa:	460c      	mov	r4, r1
 8016cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d00:	f000 f8a0 	bl	8016e44 <_read_r>
 8016d04:	2800      	cmp	r0, #0
 8016d06:	bfab      	itete	ge
 8016d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8016d0c:	181b      	addge	r3, r3, r0
 8016d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016d12:	bfac      	ite	ge
 8016d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8016d16:	81a3      	strhlt	r3, [r4, #12]
 8016d18:	bd10      	pop	{r4, pc}

08016d1a <__swrite>:
 8016d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d1e:	461f      	mov	r7, r3
 8016d20:	898b      	ldrh	r3, [r1, #12]
 8016d22:	05db      	lsls	r3, r3, #23
 8016d24:	4605      	mov	r5, r0
 8016d26:	460c      	mov	r4, r1
 8016d28:	4616      	mov	r6, r2
 8016d2a:	d505      	bpl.n	8016d38 <__swrite+0x1e>
 8016d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d30:	2302      	movs	r3, #2
 8016d32:	2200      	movs	r2, #0
 8016d34:	f000 f868 	bl	8016e08 <_lseek_r>
 8016d38:	89a3      	ldrh	r3, [r4, #12]
 8016d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016d42:	81a3      	strh	r3, [r4, #12]
 8016d44:	4632      	mov	r2, r6
 8016d46:	463b      	mov	r3, r7
 8016d48:	4628      	mov	r0, r5
 8016d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d4e:	f000 b817 	b.w	8016d80 <_write_r>

08016d52 <__sseek>:
 8016d52:	b510      	push	{r4, lr}
 8016d54:	460c      	mov	r4, r1
 8016d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d5a:	f000 f855 	bl	8016e08 <_lseek_r>
 8016d5e:	1c43      	adds	r3, r0, #1
 8016d60:	89a3      	ldrh	r3, [r4, #12]
 8016d62:	bf15      	itete	ne
 8016d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8016d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016d6e:	81a3      	strheq	r3, [r4, #12]
 8016d70:	bf18      	it	ne
 8016d72:	81a3      	strhne	r3, [r4, #12]
 8016d74:	bd10      	pop	{r4, pc}

08016d76 <__sclose>:
 8016d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d7a:	f000 b813 	b.w	8016da4 <_close_r>
	...

08016d80 <_write_r>:
 8016d80:	b538      	push	{r3, r4, r5, lr}
 8016d82:	4d07      	ldr	r5, [pc, #28]	; (8016da0 <_write_r+0x20>)
 8016d84:	4604      	mov	r4, r0
 8016d86:	4608      	mov	r0, r1
 8016d88:	4611      	mov	r1, r2
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	602a      	str	r2, [r5, #0]
 8016d8e:	461a      	mov	r2, r3
 8016d90:	f7ec f9af 	bl	80030f2 <_write>
 8016d94:	1c43      	adds	r3, r0, #1
 8016d96:	d102      	bne.n	8016d9e <_write_r+0x1e>
 8016d98:	682b      	ldr	r3, [r5, #0]
 8016d9a:	b103      	cbz	r3, 8016d9e <_write_r+0x1e>
 8016d9c:	6023      	str	r3, [r4, #0]
 8016d9e:	bd38      	pop	{r3, r4, r5, pc}
 8016da0:	2400680c 	.word	0x2400680c

08016da4 <_close_r>:
 8016da4:	b538      	push	{r3, r4, r5, lr}
 8016da6:	4d06      	ldr	r5, [pc, #24]	; (8016dc0 <_close_r+0x1c>)
 8016da8:	2300      	movs	r3, #0
 8016daa:	4604      	mov	r4, r0
 8016dac:	4608      	mov	r0, r1
 8016dae:	602b      	str	r3, [r5, #0]
 8016db0:	f7ec f9bb 	bl	800312a <_close>
 8016db4:	1c43      	adds	r3, r0, #1
 8016db6:	d102      	bne.n	8016dbe <_close_r+0x1a>
 8016db8:	682b      	ldr	r3, [r5, #0]
 8016dba:	b103      	cbz	r3, 8016dbe <_close_r+0x1a>
 8016dbc:	6023      	str	r3, [r4, #0]
 8016dbe:	bd38      	pop	{r3, r4, r5, pc}
 8016dc0:	2400680c 	.word	0x2400680c

08016dc4 <_fstat_r>:
 8016dc4:	b538      	push	{r3, r4, r5, lr}
 8016dc6:	4d07      	ldr	r5, [pc, #28]	; (8016de4 <_fstat_r+0x20>)
 8016dc8:	2300      	movs	r3, #0
 8016dca:	4604      	mov	r4, r0
 8016dcc:	4608      	mov	r0, r1
 8016dce:	4611      	mov	r1, r2
 8016dd0:	602b      	str	r3, [r5, #0]
 8016dd2:	f7ec f9b6 	bl	8003142 <_fstat>
 8016dd6:	1c43      	adds	r3, r0, #1
 8016dd8:	d102      	bne.n	8016de0 <_fstat_r+0x1c>
 8016dda:	682b      	ldr	r3, [r5, #0]
 8016ddc:	b103      	cbz	r3, 8016de0 <_fstat_r+0x1c>
 8016dde:	6023      	str	r3, [r4, #0]
 8016de0:	bd38      	pop	{r3, r4, r5, pc}
 8016de2:	bf00      	nop
 8016de4:	2400680c 	.word	0x2400680c

08016de8 <_isatty_r>:
 8016de8:	b538      	push	{r3, r4, r5, lr}
 8016dea:	4d06      	ldr	r5, [pc, #24]	; (8016e04 <_isatty_r+0x1c>)
 8016dec:	2300      	movs	r3, #0
 8016dee:	4604      	mov	r4, r0
 8016df0:	4608      	mov	r0, r1
 8016df2:	602b      	str	r3, [r5, #0]
 8016df4:	f7ec f9b5 	bl	8003162 <_isatty>
 8016df8:	1c43      	adds	r3, r0, #1
 8016dfa:	d102      	bne.n	8016e02 <_isatty_r+0x1a>
 8016dfc:	682b      	ldr	r3, [r5, #0]
 8016dfe:	b103      	cbz	r3, 8016e02 <_isatty_r+0x1a>
 8016e00:	6023      	str	r3, [r4, #0]
 8016e02:	bd38      	pop	{r3, r4, r5, pc}
 8016e04:	2400680c 	.word	0x2400680c

08016e08 <_lseek_r>:
 8016e08:	b538      	push	{r3, r4, r5, lr}
 8016e0a:	4d07      	ldr	r5, [pc, #28]	; (8016e28 <_lseek_r+0x20>)
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	4608      	mov	r0, r1
 8016e10:	4611      	mov	r1, r2
 8016e12:	2200      	movs	r2, #0
 8016e14:	602a      	str	r2, [r5, #0]
 8016e16:	461a      	mov	r2, r3
 8016e18:	f7ec f9ae 	bl	8003178 <_lseek>
 8016e1c:	1c43      	adds	r3, r0, #1
 8016e1e:	d102      	bne.n	8016e26 <_lseek_r+0x1e>
 8016e20:	682b      	ldr	r3, [r5, #0]
 8016e22:	b103      	cbz	r3, 8016e26 <_lseek_r+0x1e>
 8016e24:	6023      	str	r3, [r4, #0]
 8016e26:	bd38      	pop	{r3, r4, r5, pc}
 8016e28:	2400680c 	.word	0x2400680c

08016e2c <__malloc_lock>:
 8016e2c:	4801      	ldr	r0, [pc, #4]	; (8016e34 <__malloc_lock+0x8>)
 8016e2e:	f7ff be0b 	b.w	8016a48 <__retarget_lock_acquire_recursive>
 8016e32:	bf00      	nop
 8016e34:	24006800 	.word	0x24006800

08016e38 <__malloc_unlock>:
 8016e38:	4801      	ldr	r0, [pc, #4]	; (8016e40 <__malloc_unlock+0x8>)
 8016e3a:	f7ff be06 	b.w	8016a4a <__retarget_lock_release_recursive>
 8016e3e:	bf00      	nop
 8016e40:	24006800 	.word	0x24006800

08016e44 <_read_r>:
 8016e44:	b538      	push	{r3, r4, r5, lr}
 8016e46:	4d07      	ldr	r5, [pc, #28]	; (8016e64 <_read_r+0x20>)
 8016e48:	4604      	mov	r4, r0
 8016e4a:	4608      	mov	r0, r1
 8016e4c:	4611      	mov	r1, r2
 8016e4e:	2200      	movs	r2, #0
 8016e50:	602a      	str	r2, [r5, #0]
 8016e52:	461a      	mov	r2, r3
 8016e54:	f7ec f930 	bl	80030b8 <_read>
 8016e58:	1c43      	adds	r3, r0, #1
 8016e5a:	d102      	bne.n	8016e62 <_read_r+0x1e>
 8016e5c:	682b      	ldr	r3, [r5, #0]
 8016e5e:	b103      	cbz	r3, 8016e62 <_read_r+0x1e>
 8016e60:	6023      	str	r3, [r4, #0]
 8016e62:	bd38      	pop	{r3, r4, r5, pc}
 8016e64:	2400680c 	.word	0x2400680c

08016e68 <_init>:
 8016e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e6a:	bf00      	nop
 8016e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e6e:	bc08      	pop	{r3}
 8016e70:	469e      	mov	lr, r3
 8016e72:	4770      	bx	lr

08016e74 <_fini>:
 8016e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e76:	bf00      	nop
 8016e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e7a:	bc08      	pop	{r3}
 8016e7c:	469e      	mov	lr, r3
 8016e7e:	4770      	bx	lr
